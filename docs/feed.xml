<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://hvppyarchive.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hvppyarchive.github.io/" rel="alternate" type="text/html" /><updated>2025-08-28T18:16:37+09:00</updated><id>https://hvppyarchive.github.io/feed.xml</id><title type="html">ARCHIVE</title><subtitle>An amazing archive.</subtitle><author><name>hvppyarchive</name></author><entry><title type="html"></title><link href="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/" rel="alternate" type="text/html" title="" /><published>2025-08-28T18:16:37+09:00</published><updated>2025-08-28T18:16:37+09:00</updated><id>https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str</id><content type="html" xml:base="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/"><![CDATA[<p class="chat--user">

Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 함수와 <code class="language-plaintext highlighter-rouge">__str__</code> 함수의 차이점

</p>

<p>Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 과 <code class="language-plaintext highlighter-rouge">__str__</code> 의 차이점은 <strong>객체를 문자열로 표현하는 목적</strong> 에서 달라집니다. 차이를 단계적으로 정리해드릴게요.</p>

<hr />

<h2 id="1-__repr__-의-목적">1. <code class="language-plaintext highlighter-rouge">__repr__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>개발자 중심</strong> : 객체를 "개발자"가 보고 이해할 수 있도록 표현합니다.</p>
  </li>
  <li>
    <p><strong>재현 가능(reproducible)</strong> : 가능한 한 객체를 다시 만들 수 있는 코드 형태로 보여주는 것이 목표입니다.</p>
  </li>
  <li>
    <p>보통 <code class="language-plaintext highlighter-rouge">eval(repr(obj)) == obj</code> 가 성립하는 형태를 지향합니다 (꼭 항상 그런 건 아니지만 권장).</p>
  </li>
  <li>
    <p>디버깅할 때 주로 사용됩니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Person(name=</span><span class="sh">'</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s">, age=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>  <span class="c1"># Person(name='Alice', age=30)
</span></code></pre></div></div>

<hr />

<h2 id="2-__str__-의-목적">2. <code class="language-plaintext highlighter-rouge">__str__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>사용자 중심</strong> : 객체를 "사용자"가 보기 좋은 문자열로 표현합니다.</p>
  </li>
  <li>
    <p>읽기 쉽고 깔끔하게 출력하는 데 초점을 둡니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">print(obj)</code> 를 호출했을 때 보여지는 값이 <code class="language-plaintext highlighter-rouge">__str__</code> 입니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># Alice (30 years old)
</span></code></pre></div></div>

<hr />

<h2 id="3-__repr__-vs-__str__-비교">3. <code class="language-plaintext highlighter-rouge">__repr__</code> vs <code class="language-plaintext highlighter-rouge">__str__</code> 비교</h2>

<table>
  <thead>
    <tr>
      <th>특징</th>
      <th><code class="language-plaintext highlighter-rouge">__repr__</code></th>
      <th><code class="language-plaintext highlighter-rouge">__str__</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>목적</td>
      <td>개발자용, 디버깅</td>
      <td>사용자용, 가독성</td>
    </tr>
    <tr>
      <td>출력 대상</td>
      <td><code class="language-plaintext highlighter-rouge">repr(obj)</code>, 대화형 쉘에서 기본</td>
      <td><code class="language-plaintext highlighter-rouge">str(obj)</code>, <code class="language-plaintext highlighter-rouge">print(obj)</code></td>
    </tr>
    <tr>
      <td>형식</td>
      <td>객체 재현 가능하거나 상세</td>
      <td>읽기 쉬운 설명 위주</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="4-구현-시-주의사항">4. 구현 시 주의사항</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code> 가 없으면 <code class="language-plaintext highlighter-rouge">__repr__</code> 가 대신 사용</strong>됩니다.</p>
  </li>
  <li>
    <p>따라서 최소한 <code class="language-plaintext highlighter-rouge">__repr__</code> 은 정의해 두는 것이 좋습니다.</p>
  </li>
</ul>

<hr />

<p>👉 정리하면,</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__repr__</code></strong> : “개발자가 디버깅할 때” 객체의 정확한 표현.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code></strong> : “사용자가 출력물을 볼 때” 보기 좋게 표현.</p>
  </li>
</ul>

<hr />

<p>원하시면 <code class="language-plaintext highlighter-rouge">__repr__</code> 와 <code class="language-plaintext highlighter-rouge">__str__</code> 를 동시에 구현했을 때 <code class="language-plaintext highlighter-rouge">print(obj)</code> 와 <code class="language-plaintext highlighter-rouge">obj</code> (쉘 출력) 의 차이를 직접 실행해 보여드릴 수도 있는데, 예제 코드 시연을 원하시나요?</p>]]></content><author><name>hvppyarchive</name></author></entry><entry><title type="html">작업 폴더 구성 추천</title><link href="https://hvppyarchive.github.io/misc/work-directory-structure/" rel="alternate" type="text/html" title="작업 폴더 구성 추천" /><published>2025-08-28T18:16:31+09:00</published><updated>2025-08-28T18:16:31+09:00</updated><id>https://hvppyarchive.github.io/misc/work-directory-structure</id><content type="html" xml:base="https://hvppyarchive.github.io/misc/work-directory-structure/"><![CDATA[<p class="chat--user">

회사에서 작업 폴더 구성을 도와줘. 뭔가 작업 폴더를 꾸미는 것에 대한 일반적인 추천 같은게 있을까?

</p>

<p>좋아—회사에서 쓸 “작업 폴더”는 한 번 잘 짜두면 팀 생산성이 확 달라져요. 아래처럼 <strong>단계별로</strong> 만들면 실패 확률이 낮습니다.</p>

<h1 id="1-먼저-원칙부터-정하기-짧고-강력한-룰-8가지">1) 먼저 원칙부터 정하기 (짧고 강력한 룰 8가지)</h1>

<ol>
  <li>
    <p><strong>최대 깊이 3단계</strong> : <code class="language-plaintext highlighter-rouge">팀 → 프로젝트 → 작업물</code>까지만. (깊어질수록 찾기·권한 관리가 어려워져요)</p>
  </li>
  <li>
    <p><strong>정렬되는 이름</strong> : 접두 번호(<code class="language-plaintext highlighter-rouge">00,10,20…</code>) + 한글/영문 키워드.</p>
  </li>
  <li>
    <p><strong>날짜 형식 고정</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> (예: <code class="language-plaintext highlighter-rouge">2025-08-26_회의록.md</code>)</p>
  </li>
  <li>
    <p><strong>버전 규칙</strong> : 최종본 금지. <code class="language-plaintext highlighter-rouge">v001, v002…</code> 또는 <code class="language-plaintext highlighter-rouge">draft/approved</code> 두 트랙.</p>
  </li>
  <li>
    <p><strong>원본 vs 산출물 분리</strong> : <code class="language-plaintext highlighter-rouge">source</code>(편집파일) / <code class="language-plaintext highlighter-rouge">export</code>(배포파일).</p>
  </li>
  <li>
    <p><strong>권한 레벨 분리</strong> : <code class="language-plaintext highlighter-rouge">Shared</code>(공유) / <code class="language-plaintext highlighter-rouge">Restricted</code>(민감·임원용) / <code class="language-plaintext highlighter-rouge">Private</code>(개인).</p>
  </li>
  <li>
    <p><strong>메타정보는 README에</strong> : 폴더마다 <code class="language-plaintext highlighter-rouge">README.md</code>로 목적·담당·태그 기록.</p>
  </li>
  <li>
    <p><strong>아카이브 주기</strong> : 완료 30일 후 <code class="language-plaintext highlighter-rouge">Archive/</code>로 이동, 1년 후 장기보관.</p>
  </li>
</ol>

<h1 id="2-상위-구조-선택-3가지-중-택1-또는-하이브리드">2) 상위 구조 선택 (3가지 중 택1 또는 하이브리드)</h1>

<ul>
  <li>
    <p><strong>프로젝트 중심(권장: 프로젝트형 조직)</strong><br />
<code class="language-plaintext highlighter-rouge">10_Projects/PRJ-코드_이름</code> 아래에 표준 하위 폴더.</p>
  </li>
  <li>
    <p><strong>기능 중심(권장: 기능별 팀조직)</strong><br />
<code class="language-plaintext highlighter-rouge">20_Product, 30_Design, 40_Engineering…</code> 아래에 연간/분기 폴더.</p>
  </li>
  <li>
    <p><strong>개인 작업공간 + 공유 허브(혼합형)</strong><br />
<code class="language-plaintext highlighter-rouge">90_People/홍길동/workspace</code>는 자유롭게, 산출물만 공유 폴더로 승격.</p>
  </li>
</ul>

<h1 id="3-바로-쓰는-표준-템플릿">3) 바로 쓰는 표준 템플릿</h1>

<p>아래 트리는 <strong>대부분 회사에서 바로 적용</strong> 가능한 최소·표준 구성입니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Company
├─ 00_Admin
│  ├─ 01_Policies
│  └─ 02_Templates   ← 문서/슬라이드/회의록 템플릿
├─ 10_Projects
│  └─ PRJ-2025-012_신제품출시
│     ├─ 01_Plan        ← 일정/OKR/예산
│     ├─ 02_Research    ← 리서치, 경쟁/고객 인터뷰
│     ├─ 03_Design
│     │  ├─ source
│     │  └─ export
│     ├─ 04_Build
│     ├─ 05_Test
│     ├─ 06_Release
│     ├─ 80_Meetings    ← 2025-08-26_킥오프_메모.md
│     ├─ 90_Archive
│     └─ README.md
├─ 20_Product
├─ 30_SalesMarketing
├─ 40_Engineering
├─ 50_Data
│  ├─ 01_Raw
│  ├─ 02_Processed
│  └─ 03_Reports
├─ 60_SharedAssets     ← 로고, 폰트, 컬러가이드 등 공용
├─ 70_Restricted       ← 계약서/급여/법무(권한 제한)
├─ 90_People
│  └─ 홍길동
│     ├─ workspace
│     └─ handover      ← 인수인계용
└─ 99_Archive
</code></pre></div></div>

<h1 id="4-파일폴더-네이밍-규칙-복붙해서-팀-규칙으로">4) 파일·폴더 네이밍 규칙 (복붙해서 팀 규칙으로)</h1>

<ul>
  <li>
    <p><strong>폴더</strong> : <code class="language-plaintext highlighter-rouge">10_Projects</code>, <code class="language-plaintext highlighter-rouge">PRJ-2025-012_신제품출시</code></p>
  </li>
  <li>
    <p><strong>문서</strong> : <code class="language-plaintext highlighter-rouge">2025-08-26_프로젝트킥오프_회의록_v001.md</code></p>
  </li>
  <li>
    <p><strong>디자인</strong> :</p>

    <ul>
      <li>
        <p>원본: <code class="language-plaintext highlighter-rouge">홈페이지KV_v003_source.psd</code></p>
      </li>
      <li>
        <p>산출: <code class="language-plaintext highlighter-rouge">홈페이지KV_v003_1080x1080_export.png</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>데이터</strong> : <code class="language-plaintext highlighter-rouge">2025-08-월간DAU_v004_approved.csv</code></p>
  </li>
</ul>

<h1 id="5-폴더별-readme-템플릿-복붙">5) 폴더별 README 템플릿 (복붙)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 폴더 목적
- 신제품 출시 프로젝트 산출물 중앙 저장소

# 담당/권한
- 오너: 홍길동(@id) / 편집 권한: PM팀, 디자인팀 / 열람: 전사

# 구조
- 01_Plan: 일정·OKR·예산
- 02_Research: 고객/경쟁 리서치
- 03_Design: source/export 분리
...

# 공통 규칙
- 파일명: YYYY-MM-DD_제목_v### (source/export 구분)
- 완료 30일 후 90_Archive로 이동
- 의사결정은 /01_Plan/ADR에 기록
</code></pre></div></div>

<h1 id="6-협업운영-습관-실무-팁-8가지">6) 협업·운영 습관 (실무 팁 8가지)</h1>

<ol>
  <li>
    <p><strong>결정 기록(ADR)</strong> : 중요한 결정은 <code class="language-plaintext highlighter-rouge">/01_Plan/ADR/2025-08-26_결정_요약.md</code>.</p>
  </li>
  <li>
    <p><strong>회의록 표준화</strong> : <code class="language-plaintext highlighter-rouge">회의 목적 · 참석자 · 요약 · 액션아이템(담당/기한)</code> 섹션 고정.</p>
  </li>
  <li>
    <p><strong>액션 아이템은 도구로 이관</strong> : 회의록 내 체크리스트는 JIRA/Asana로 바로 링크.</p>
  </li>
  <li>
    <p><strong>링크만 저장</strong> : SaaS 산출물(Google Docs 등)은 링크 파일 <code class="language-plaintext highlighter-rouge">.url</code>로 두되, <strong>최종 PDF</strong> 도 함께 보관.</p>
  </li>
  <li>
    <p><strong>민감정보 분리</strong> : 계약/급여/개인정보는 <code class="language-plaintext highlighter-rouge">70_Restricted</code>로만. 접근 로그 관리.</p>
  </li>
  <li>
    <p><strong>아카이브 의식화</strong> : 매월 말 “폴더 다이어트” 30분—<code class="language-plaintext highlighter-rouge">Archive</code>로 이동 + README 갱신.</p>
  </li>
  <li>
    <p><strong>템플릿 먼저</strong> : 새 프로젝트 시작 시 <code class="language-plaintext highlighter-rouge">02_Templates</code>에서 복제해 시작.</p>
  </li>
  <li>
    <p><strong>검색 친화 태그</strong> : 파일 첫 줄에 <code class="language-plaintext highlighter-rouge">#태그</code>(예: <code class="language-plaintext highlighter-rouge">#런칭 #광고 #DAU</code>)를 넣어 검색 품질↑.</p>
  </li>
</ol>

<h1 id="7-역할별-미세튜닝">7) 역할별 미세튜닝</h1>

<ul>
  <li>
    <p><strong>PM/기획</strong> : <code class="language-plaintext highlighter-rouge">/01_Plan</code>에 <code class="language-plaintext highlighter-rouge">Roadmap.xlsx, KPI_Dashboard.pdf, ADR/</code> 고정 폴더.</p>
  </li>
  <li>
    <p><strong>디자인</strong> : <code class="language-plaintext highlighter-rouge">source/export</code>, <code class="language-plaintext highlighter-rouge">fonts/brand/refs</code> 3분리, 내보내기 규격 프리셋 같이 저장.</p>
  </li>
  <li>
    <p><strong>개발</strong> : 코드 저장소와 산출물 폴더는 링크로 연결(<code class="language-plaintext highlighter-rouge">docs/</code>, <code class="language-plaintext highlighter-rouge">release_notes/</code>). 빌드 산출물은 <code class="language-plaintext highlighter-rouge">06_Release</code>.</p>
  </li>
  <li>
    <p><strong>세일즈/마케팅</strong> : <code class="language-plaintext highlighter-rouge">campaigns/YYYY-QN/캠페인명/</code>로 분기 관리, 모든 크리에이티브는 <code class="language-plaintext highlighter-rouge">export</code>에만 배포.</p>
  </li>
</ul>

<hr />

<p>원하면, <strong>당신 팀의 업종/툴 체인(예: Google Drive/OneDrive, Notion, Jira, Figma)</strong>에 맞춰 위 구조를 1:1로 커스터마이즈해서 드릴게요. “팀 구성/업무 유형/민감자료 범위”만 알려주면 곧바로 맞춤 트리 만들어줄게요.</p>

<p class="chat--user">

나 혼자 쓰는 거긴 해

</p>

<p>좋아, “혼자 쓰는 회사 작업 폴더”라면 <strong>빠른 캡처 → 쉽게 찾기 → 가벼운 유지보수</strong> 만 잘 되면 끝이에요. 아래대로 <strong>단계별</strong> 로 세팅해보세요.</p>

<h1 id="1-목표-3가지-먼저-정리">1) 목표 3가지 먼저 정리</h1>

<ol>
  <li>
    <p><strong>캡처 속도</strong> : 생각/파일을 즉시 던져놓을 곳이 있어야 함(= <code class="language-plaintext highlighter-rouge">00_Inbox</code>).</p>
  </li>
  <li>
    <p><strong>검색 용이</strong> : 규칙적 네이밍 + 얕은 깊이(최대 3단).</p>
  </li>
  <li>
    <p><strong>관리 최소화</strong> : 주 1회 아카이브만 하면 버틸 구조.</p>
  </li>
</ol>

<h1 id="2-추천-상위-구조-parasolo">2) 추천 상위 구조 (PARA+Solo)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Work (루트 폴더)
├─ 00_Inbox           ← 급하게 던져두는 임시함 (매일/격일 비우기)
├─ 10_Today           ← 오늘 집중: WIP, 임시 노트
├─ 20_Projects        ← 끝나면 Archive로 이동
├─ 30_Areas           ← 역할/지속업무(예: 리포트, 운영)
├─ 40_Resources       ← 참고자료(매뉴얼, 규정, 레퍼런스)
├─ 50_Snippets        ← 텍스트 스니펫/스크립트/쿼리 모음
├─ 60_Assets          ← 로고/템플릿/브랜드 리소스
├─ 70_Exports         ← 외부 전달본(PDF, PPT, 이미지)
└─ 99_Archive         ← 완료 프로젝트·옛 참고자료
</code></pre></div></div>

<ul>
  <li><strong>개념</strong> : Projects(유한), Areas(지속), Resources(참고), Archive(보관) + 혼자쓰는 맛을 위한 <code class="language-plaintext highlighter-rouge">Today/Inbox/Snippets/Exports</code>.</li>
</ul>

<h1 id="3-네이밍-규칙짧고-강력">3) 네이밍 규칙(짧고 강력)</h1>

<ul>
  <li>
    <p><strong>날짜</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> (예: <code class="language-plaintext highlighter-rouge">2025-08-26_주간리포트.md</code>)</p>
  </li>
  <li>
    <p><strong>버전</strong> : <code class="language-plaintext highlighter-rouge">_v001, v002…</code> (최종본 금지)</p>
  </li>
  <li>
    <p><strong>프로젝트 폴더</strong> : <code class="language-plaintext highlighter-rouge">PRJ-YYYY-번호_짧은이름</code> (예: <code class="language-plaintext highlighter-rouge">PRJ-2025-012_런칭준비</code>)</p>
  </li>
  <li>
    <p><strong>정렬용 접두</strong> : 폴더는 <code class="language-plaintext highlighter-rouge">00,10,20…</code> 사용 (이미 반영)</p>
  </li>
</ul>

<h1 id="4-프로젝트-폴더-템플릿복붙">4) 프로젝트 폴더 템플릿(복붙)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/20_Projects/PRJ-2025-012_런칭준비
├─ 01_Plan        ← 목표/타임라인/OKR
├─ 02_Work        ← 실작업(문서, 스프레드시트 등)
├─ 03_Meetings    ← 회의노트(날짜_제목.md)
├─ 04_Refs        ← 링크모음/연구자료(요약 필수)
├─ export         ← 대외공유본(PDF/이미지)
└─ README.md
</code></pre></div></div>

<p><strong>README.md 템플릿</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 목적
- (한 줄 요약) 런칭 준비 전 과정 관리

# 범위/완료조건
- (예) 9/30까지 광고·CS·릴리즈 노트 확정

# 링크
- 기획 문서: ...
- 대시보드: ...

# 진행 현황(요약)
- 2025-08-26: 킥오프 완료, 메시지 프레임 확정

# 다음 액션(담당/기한)
- 배너 시안 v002 (나 / 08-28)
</code></pre></div></div>

<h1 id="5-개인-작업-루틴하루주간월간">5) 개인 작업 루틴(하루·주간·월간)</h1>

<p><strong>매일</strong></p>

<ol>
  <li>
    <p><strong>캡처</strong> : 모든 파일/메모는 <code class="language-plaintext highlighter-rouge">00_Inbox</code>에 던지기.</p>
  </li>
  <li>
    <p><strong>집중 공간</strong> : 당일 작업은 <code class="language-plaintext highlighter-rouge">10_Today</code>에서 처리(완료/중간산출물은 해당 프로젝트로 이동).</p>
  </li>
  <li>
    <p><strong>로그</strong> : <code class="language-plaintext highlighter-rouge">30_Areas/worklog/2025/2025-08/2025-08-26.md</code>에 5줄 요약.</p>
  </li>
</ol>

<p><strong>주 1회(금요일 15분)</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">00_Inbox</code> 비우기 → <code class="language-plaintext highlighter-rouge">20_Projects</code> 또는 <code class="language-plaintext highlighter-rouge">40_Resources</code>로 분류.</p>
  </li>
  <li>
    <p>끝난 프로젝트는 <code class="language-plaintext highlighter-rouge">99_Archive</code>로 이동.</p>
  </li>
</ul>

<p><strong>월 1회(첫 영업일 20분)</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">40_Resources</code> 중 구식 자료는 아카이브.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">50_Snippets</code> 정리(재사용 가능한 제목으로 변경).</p>
  </li>
</ul>

<h1 id="6-자주-쓰는-노트-템플릿-2종">6) 자주 쓰는 노트 템플릿 2종</h1>

<p><strong>회의 노트</strong> (<code class="language-plaintext highlighter-rouge">03_Meetings/2025-08-26_파트너_콜.md</code>)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 목적
# 요약(3줄)
# 결정사항
# 액션(담당/기한)
# 참고 링크
</code></pre></div></div>

<p><strong>일일 작업로그</strong> (<code class="language-plaintext highlighter-rouge">worklog/2025/2025-08/2025-08-26.md</code>)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 오늘 3줄 요약
- 
## 집중 작업(링크)
- 
## 배운 점 / 이슈
- 
## 내일 첫 태스크
- 
</code></pre></div></div>

<h1 id="7-단독-사용에-딱-맞는-팁">7) 단독 사용에 딱 맞는 팁</h1>

<ul>
  <li>
    <p><strong>링크만 두지 말고 “최종 PDF”도 함께</strong> <code class="language-plaintext highlighter-rouge">export</code>에 저장(나중에 권한 문제 방지).</p>
  </li>
  <li>
    <p><strong>검색 키워드</strong> 를 문서 첫 줄에 넣기: <code class="language-plaintext highlighter-rouge">tags: #런칭 #광고 #대시보드</code>.</p>
  </li>
  <li>
    <p><strong>스니펫 관리</strong> : <code class="language-plaintext highlighter-rouge">50_Snippets/sql</code>, <code class="language-plaintext highlighter-rouge">50_Snippets/text</code>, <code class="language-plaintext highlighter-rouge">50_Snippets/bash</code>로 분리.</p>
  </li>
  <li>
    <p><strong>깊이는 3단 이하</strong> 만 유지(찾기 속도↓ 방지).</p>
  </li>
  <li>
    <p><strong>바탕화면 금지, 북마크화면 2개</strong> 만: <code class="language-plaintext highlighter-rouge">00_Inbox</code>, <code class="language-plaintext highlighter-rouge">10_Today</code>.</p>
  </li>
</ul>

<hr />

<p>원하면 지금 구조를 <strong>당신 이름/업무에 맞춰 바로 커스터마이즈</strong> 해서 트리까지 만들어줄게요. (예: 직무/툴—기획, 데이터, 디자인—에 맞춘 하위 폴더와 스니펫 기본 세트)</p>

<p class="chat--user">

주 업무는 데스크탑 애플리케이션 툴 개발이야(파이썬 패키지 형태), 그리고 교육 자료나 논문 자료를 모을 수 있는 곳도 있으면 좋겠어. 그리고 필요한 툴 설치 공간도 있으면 좋겠어. 그리고 환경 세팅을 위한 공간도 있으면 좋겠어. 

</p>

<p>좋다—니 요구(데스크탑 앱용 파이썬 패키지 + 교육/논문 자료 + 툴 설치공간 + 환경 세팅)를 딱 맞춘 <strong>1인 개발용 작업 폴더</strong> 와 <strong>스타터 키트</strong> 까지 만들어놨어. 바로 받아서 쓰면 돼요.</p>

<p>starter kit 다운로드</p>

<hr />

<h1 id="1-상위-구조-혼자-쓰는-용--네가-원하는-추가공간">1) 상위 구조 (혼자 쓰는 용 + 네가 원하는 추가공간)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Work
├─ 00_Inbox            ← 급히 던져놓는 임시함
├─ 10_Today            ← 오늘 집중(WIP)
├─ 20_Projects         ← 각 앱/도구별 프로젝트(파이썬 패키지 형식)
├─ 30_Areas
│  ├─ worklog          ← 일일/주간 로그
│  └─ environments     ← 공통 환경 메모
├─ 40_Resources
│  └─ edu              ← 교육/논문/튜토리얼 모음
│     ├─ courses
│     ├─ tutorials
│     └─ papers
│        ├─ to_read
│        ├─ reading_notes (템플릿 포함)
│        └─ summaries
├─ 50_Snippets         ← 재사용 스니펫(sql/text/bash)
├─ 60_Assets           ← 로고/템플릿 등 공용
├─ 70_Exports          ← 외부 전달용 산출물(PDF/실행파일)
├─ 80_Tools            ← 툴 설치/포터블/스크립트/devcontainer
│  ├─ installers       ← 오프라인 설치 파일 보관(체크섬 기록 권장)
│  ├─ bin              ← 포터블 실행파일
│  ├─ scripts          ← 설치 자동화 스크립트/메모
│  └─ devcontainer     ← VSCode devcontainer 등
├─ 85_Environments     ← conda/venv/docker 예시 구성
└─ 99_Archive
</code></pre></div></div>

<blockquote>
  <p>교육/논문: <code class="language-plaintext highlighter-rouge">40_Resources/edu/papers</code>에 <strong>읽을거리/메모/요약</strong> 3분리 + <code class="language-plaintext highlighter-rouge">reading_notes/TEMPLATE.md</code> 포함.<br />
 툴 설치: <code class="language-plaintext highlighter-rouge">80_Tools/installers</code> 폴더와 <code class="language-plaintext highlighter-rouge">scripts/install_notes.md</code> 준비.<br />
 환경 세팅: <code class="language-plaintext highlighter-rouge">85_Environments/conda/environment.yml</code>, <code class="language-plaintext highlighter-rouge">venv/README.md</code>, <code class="language-plaintext highlighter-rouge">docker/Dockerfile</code> 샘플 포함.</p>
</blockquote>

<hr />

<h1 id="2-프로젝트파이썬-패키지-템플릿--바로-실행-가능">2) 프로젝트(파이썬 패키지) 템플릿 — 바로 실행 가능</h1>

<p>starter kit 안에 예제로 <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-2025-001_sample_app</code>를 넣어뒀어. 구조:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PRJ-2025-001_sample_app
├─ src/sample_app       ← 패키지 소스 (CLI/GUI 엔트리 포함)
├─ tests                ← pytest 예제
├─ scripts              ← OS별 설치/실행/빌드 스크립트(.sh/.ps1)
├─ .devcontainer        ← 컨테이너 개발환경 설정
├─ pyproject.toml       ← PEP621(setuptools) + extras(dev/gui)
├─ .env.example         ← 환경변수 예시
├─ .gitignore / .editorconfig
└─ README.md
</code></pre></div></div>

<h3 id="키-포인트">키 포인트</h3>

<ul>
  <li>
    <p><strong>엔트리포인트</strong></p>

    <ul>
      <li>
        <p>CLI: <code class="language-plaintext highlighter-rouge">sample-app</code> → <code class="language-plaintext highlighter-rouge">sample_app.cli:main</code></p>
      </li>
      <li>
        <p>GUI(선택): <code class="language-plaintext highlighter-rouge">sample-app-gui</code> → <code class="language-plaintext highlighter-rouge">sample_app.gui:main</code> (PySide6 필요)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>옵션 의존성</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">.[dev]</code>: pytest/ruff/pyinstaller</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">.[gui]</code>: PySide6 (원하면 설치)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>단일 실행파일 빌드</strong> : PyInstaller 스크립트 내장(윈도/맥/리눅스 공통)</p>
  </li>
</ul>

<hr />

<h1 id="3-시작-순서-한-번만-하면-끝">3) 시작 순서 (한 번만 하면 끝)</h1>

<h2 id="macos--linux">macOS / Linux</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Work/20_Projects/PRJ-2025-001_sample_app
./scripts/install.sh         <span class="c"># venv 생성 + dev 의존성 설치</span>
./scripts/run_cli.sh         <span class="c"># CLI 동작 확인</span>
<span class="c"># GUI가 필요하면:</span>
<span class="nb">source</span> .venv/bin/activate
pip <span class="nb">install</span> <span class="s2">".[gui]"</span>
./scripts/run_gui.sh
</code></pre></div></div>

<h2 id="windows-powershell">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">Work/20_Projects/PRJ-2025-001_sample_app</span><span class="w">
</span><span class="o">.</span><span class="n">/scripts/install.ps1</span><span class="w">
</span><span class="o">.</span><span class="nx">/scripts/run_cli.ps1</span><span class="w">
</span><span class="c"># GUI 필요 시:</span><span class="w">
</span><span class="o">.</span><span class="n">\.venv\Scripts\Activate.ps1</span><span class="w">
</span><span class="nx">pip</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="s2">".[gui]"</span><span class="w">
</span><span class="o">.</span><span class="n">/scripts/run_gui.ps1</span><span class="w">
</span></code></pre></div></div>

<h2 id="빌드실행파일-만들기">빌드(실행파일 만들기)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># CLI</span>
./scripts/build_cli.sh    <span class="c"># dist/sample-app(또는 .exe)</span>
<span class="c"># GUI</span>
./scripts/build_gui.sh    <span class="c"># dist/sample-app-gui(또는 .exe)</span>
</code></pre></div></div>

<hr />

<h1 id="4-논문교육-자료-관리--최소-규칙">4) 논문/교육 자료 관리 — 최소 규칙</h1>

<ul>
  <li>
    <p><strong>PDF는<code class="language-plaintext highlighter-rouge">/papers/to_read</code></strong>, 메모는 <code class="language-plaintext highlighter-rouge">/papers/reading_notes/YYYY-MM-DD_제목.md</code></p>
  </li>
  <li>
    <p>한 달에 한 번 <strong><code class="language-plaintext highlighter-rouge">/summaries</code></strong>에 1~2페이지 요약(나중에 검색/레퍼런스로 최고)</p>
  </li>
  <li>
    <p>코스/튜토리얼은 <code class="language-plaintext highlighter-rouge">/edu/courses</code>, <code class="language-plaintext highlighter-rouge">/edu/tutorials</code>로 구분. 실습 산출물은 해당 프로젝트의 <code class="language-plaintext highlighter-rouge">/docs</code>나 <code class="language-plaintext highlighter-rouge">/export</code>로 링크</p>
  </li>
</ul>

<hr />

<h1 id="5-환경-세팅--툴-설치--실무-루틴">5) 환경 세팅 &amp; 툴 설치 — 실무 루틴</h1>

<ol>
  <li>
    <p><strong>툴 설치파일</strong> 은 <code class="language-plaintext highlighter-rouge">80_Tools/installers</code>에 보관 + <code class="language-plaintext highlighter-rouge">install_notes.md</code>에 버전/체크섬 기록</p>
  </li>
  <li>
    <p><strong>개별 프로젝트마다 로컬 venv</strong> (<code class="language-plaintext highlighter-rouge">.venv/</code>)로 독립 관리</p>
  </li>
  <li>
    <p>회사/외부 이동 대비해서 <strong><code class="language-plaintext highlighter-rouge">70_Exports</code>에 최종 산출물(실행파일/PDF)</strong> 같이 남기기</p>
  </li>
  <li>
    <p>컨테이너가 필요하면 <code class="language-plaintext highlighter-rouge">85_Environments/docker/Dockerfile</code>이나 프로젝트 내 <code class="language-plaintext highlighter-rouge">.devcontainer</code> 사용</p>
  </li>
</ol>

<hr />

<h1 id="6-네이밍-요약복붙-규칙">6) 네이밍 요약(복붙 규칙)</h1>

<ul>
  <li>
    <p>파일: <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code></p>
  </li>
  <li>
    <p>프로젝트 폴더: <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_짧은이름</code> 예) <code class="language-plaintext highlighter-rouge">PRJ-2025-012_GUI툴</code></p>
  </li>
  <li>
    <p>깊이: <strong>최대 3단</strong> 유지</p>
  </li>
</ul>

<hr />

<h1 id="7-다음-액션-3분-컷">7) 다음 액션 (3분 컷)</h1>

<ol>
  <li>
    <p>위 <strong>starter kit 압축 해제</strong> → 원하는 위치에 <code class="language-plaintext highlighter-rouge">/Work</code> 배치</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">PRJ-2025-001_sample_app</code>을 네 프로젝트명으로 <strong>폴더/pyproject 패키지명 변경</strong></p>
  </li>
  <li>
    <p>OS에 맞는 <strong>설치 스크립트 실행</strong> 후 바로 코딩 시작</p>
  </li>
</ol>

<p>필요하면 네가 쓰는 <strong>GUI 프레임워크(PySide6/PyQt/Tkinter), 배포 방식(PyInstaller/Briefcase), 테스트 전략</strong> 에 맞춰 템플릿을 더 다듬어 줄게. 원하는 스택만 알려줘—바로 적용한 버전으로 트리까지 만들어서 드릴게!</p>

<p class="chat--user">

그리고 툴 개발만 하는건 아니고 그 툴을 이용해서 어떤 실제 산출물을 만들어야 할 때도 있어.

</p>

<p>좋아—<strong>툴 개발 + 그 툴로 실제 산출물(레포트, 이미지, 패키지, 실행파일 등)까지 만드는</strong> 흐름을 깔끔하게 돌릴 수 있게 구조와 템플릿을 추가로 준비했어. (재현성·추적성·인수인계에 강함)</p>

<p>업데이트된 스타터(Jobs 포함) 다운로드</p>

<hr />

<h2 id="1-한눈에-보는-구조-툴--산출물-분리">1) 한눈에 보는 구조 (툴 ↔ 산출물 분리)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Work
├─ 20_Projects         ← 툴(파이썬 패키지) 개발
│   └─ PRJ-2025-001_sample_app/...
├─ 25_Jobs             ← 툴을 써서 만드는 “산출물 작업 단위”
│   └─ JOB-2025-001_sample_output/  ← 샘플 Job 포함
│      ├─ 01_Brief         요구사항/검수기준
│      ├─ 02_Input/raw     원천데이터
│      ├─ 03_Config        파라미터(yml/json)
│      ├─ 04_Run           실행 스크립트, 로그, 매니페스트
│      ├─ 05_Output        중간/최종 산출물(작업용)
│      └─ 06_Export        전달본(완성품)
├─ 40_Resources/edu     ← 교육/논문/튜토리얼
├─ 70_Exports           ← 여러 Job의 최종본 모아보기(선택)
└─ 85_Environments      ← conda/venv/docker 샘플
</code></pre></div></div>

<h3 id="왜-분리하나">왜 분리하나?</h3>

<ul>
  <li>
    <p><strong>Projects</strong> 는 코드 수명(버전·릴리즈) 중심, <strong>Jobs</strong> 는 <strong>요구사항·입력·설정 → 결과물</strong> 이라는 <strong>프로세스</strong> 중심.</p>
  </li>
  <li>
    <p>Job 단위로 매니페스트/체크섬이 남으니 <strong>나중에 같은 결과를 재현</strong> 하기 쉬움.</p>
  </li>
</ul>

<hr />

<h2 id="2-실행-흐름-step-by-step">2) 실행 흐름 (Step-by-step)</h2>

<ol>
  <li>
    <p><strong>툴 개발/업데이트</strong> : <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-...</code>에서 기능 추가 후 <code class="language-plaintext highlighter-rouge">.[dev]</code> 설치.</p>
  </li>
  <li>
    <p><strong>Job 생성</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs</code> 아래 새 <code class="language-plaintext highlighter-rouge">JOB-YYYY-###_이름</code> 폴더 복제.</p>
  </li>
  <li>
    <p><strong>입력/설정 배치</strong> : <code class="language-plaintext highlighter-rouge">02_Input/raw</code>에 데이터, <code class="language-plaintext highlighter-rouge">03_Config/config.yml</code>에 파라미터 작성.</p>
  </li>
  <li>
    <p><strong>실행</strong> :</p>

    <ul>
      <li>macOS/Linux:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>25_Jobs/JOB-.../04_Run
bash run.sh
</code></pre></div>        </div>
      </li>
      <li>Windows (PowerShell):
        <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">25_Jobs/JOB-.../04_Run</span><span class="w">
</span><span class="o">.</span><span class="n">/run.ps1</span><span class="w">
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<p>스크립트가 <code class="language-plaintext highlighter-rouge">run.py</code>를 호출 → <strong>산출물</strong> 을 <code class="language-plaintext highlighter-rouge">06_Export</code>에 생성 + <strong>manifest.json</strong> / <strong>run_log.txt</strong> 기록.</p>

<ol>
  <li><strong>검수/전달</strong> : <code class="language-plaintext highlighter-rouge">qa_checklist.md</code>로 확인 → 필요 시 <code class="language-plaintext highlighter-rouge">/Work/70_Exports</code>에도 복사.</li>
</ol>

<blockquote>
  <p>샘플 Job은 실제로 <strong>툴 패키지 버전(예:<code class="language-plaintext highlighter-rouge">sample_app.__version__</code>)을 읽어 매니페스트에 박아두고</strong>, 산출물 파일의 <strong>SHA256 체크섬</strong> 까지 저장하도록 되어 있어. (전달 후 변경 여부도 검증 가능)</p>
</blockquote>

<hr />

<h2 id="3-네이밍--버전-전략-산출물용">3) 네이밍 &amp; 버전 전략 (산출물용)</h2>

<ul>
  <li>
    <p><strong>Job 코드 접두</strong> : <code class="language-plaintext highlighter-rouge">JOB-2025-023_캠페인A_보고서_v003.pdf</code></p>
  </li>
  <li>
    <p><strong>세부 규칙</strong> : <code class="language-plaintext highlighter-rouge">JOB코드_YYYYMMDD[-run]_v###.ext</code></p>
  </li>
  <li>
    <p><strong>툴 버전 고정</strong> : 매니페스트에 <code class="language-plaintext highlighter-rouge">tool_version</code>, 파라미터 파일 경로, Python 버전, OS 정보 포함.</p>
  </li>
</ul>

<hr />

<h2 id="4-재현성-체크리스트">4) 재현성 체크리스트</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">03_Config/config.yml</code>에 모든 파라미터 기록</p>
  </li>
  <li>
    <p>입력 데이터 소스/버전 기록(가능하면 체크섬)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">85_Environments</code>(conda/venv/docker) 중 하나로 환경 고정</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">04_Run/manifest.json</code> 자동 생성 확인</p>
  </li>
  <li>
    <p>랜덤 사용 시 <strong>시드 고정</strong> 및 매니페스트에 기록</p>
  </li>
</ul>

<hr />

<h2 id="5-교육논문-자료와-실무-연결">5) 교육/논문 자료와 실무 연결</h2>

<ul>
  <li>
    <p>논문을 읽고 도입한 알고리즘/기법은 <strong>해당 툴 PRJ의 <code class="language-plaintext highlighter-rouge">/docs</code></strong>에 요약,<br />
실험·비교 결과는 <strong>개별 Job</strong> 으로 실행해 <strong>입력/설정/산출</strong> 을 남기면 <strong>논문→코드→결과</strong> 추적이 선명해짐.</p>
  </li>
  <li>
    <p>템플릿 포함: <code class="language-plaintext highlighter-rouge">40_Resources/edu/papers/reading_notes/TEMPLATE.md</code></p>
  </li>
</ul>

<hr />

<h2 id="6-바로-다음-액션">6) 바로 다음 액션</h2>

<ol>
  <li>
    <p>압축을 풀고 <code class="language-plaintext highlighter-rouge">/Work</code>를 원하는 위치에 둔다.</p>
  </li>
  <li>
    <p>샘플 툴 <code class="language-plaintext highlighter-rouge">PRJ-2025-001_sample_app</code>에서 설치 스크립트 실행 → 동작 확인.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/JOB-2025-001_sample_output</code>을 복제해 너의 실제 산출물 작업에 맞춰 <code class="language-plaintext highlighter-rouge">brief/config</code>만 바꿔 실행.</p>
  </li>
</ol>

<p>원하면 네 도메인(예: 이미지 처리, 리포트 생성, 포맷 규격) 기준으로 <strong>Job 스캐폴드</strong>(검수 스텝·표준 파라미터·파일명 규칙)를 더 빡빡하게 커스터마이즈해서 만들어줄게.</p>

<p class="chat--user">

전체 다시 보여줘

</p>

<p>좋아! 지금까지 만든 걸 <strong>한눈에, 단계별로</strong> 싹 정리해 줄게.<br />
(바로 쓸 수 있는 스타터 포함)</p>

<p>최신 스타터(툴 + Jobs 포함) 다운로드</p>

<hr />

<h1 id="1-목표-3가지">1) 목표 3가지</h1>

<ol>
  <li>
    <p><strong>빠른 캡처</strong> : 어디서든 <code class="language-plaintext highlighter-rouge">00_Inbox</code>로 던져 넣기</p>
  </li>
  <li>
    <p><strong>쉽게 찾기</strong> : 얕은 깊이(최대 3단) + 규칙적 네이밍</p>
  </li>
  <li>
    <p><strong>가벼운 유지보수</strong> : 주 1회 정리·아카이브</p>
  </li>
</ol>

<hr />

<h1 id="2-상위-폴더-구조최종본">2) 상위 폴더 구조(최종본)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Work
├─ 00_Inbox               # 급히 던지는 임시함
├─ 10_Today               # 오늘 집중 작업(WIP)
├─ 20_Projects            # 툴(파이썬 패키지) 개발
│   └─ PRJ-2025-001_sample_app/...
├─ 25_Jobs                # 툴을 사용해 만드는 실제 산출 작업 단위
│   └─ JOB-2025-001_sample_output/
│      ├─ 01_Brief
│      ├─ 02_Input/raw
│      ├─ 03_Config
│      ├─ 04_Run
│      ├─ 05_Output
│      └─ 06_Export
├─ 30_Areas
│   ├─ worklog
│   └─ environments
├─ 40_Resources
│   └─ edu
│      ├─ courses
│      ├─ tutorials
│      └─ papers
│         ├─ to_read
│         ├─ reading_notes (TEMPLATE.md 포함)
│         └─ summaries
├─ 50_Snippets           # sql/text/bash 재사용 스니펫
├─ 60_Assets             # 로고·템플릿 등 공용
├─ 70_Exports            # 여러 Job 최종 전달본 모아보기(선택)
├─ 80_Tools              # 설치파일·포터블·자동화 스크립트·devcontainer
│   ├─ installers
│   ├─ bin
│   ├─ scripts
│   └─ devcontainer
├─ 85_Environments       # conda/venv/docker 샘플
└─ 99_Archive
</code></pre></div></div>

<hr />

<h1 id="3-네이밍-규칙짧고-강력-1">3) 네이밍 규칙(짧고 강력)</h1>

<ul>
  <li>
    <p><strong>파일</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code></p>
  </li>
  <li>
    <p><strong>프로젝트 폴더</strong> : <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_짧은이름</code> → 예) <code class="language-plaintext highlighter-rouge">PRJ-2025-012_GUI툴</code></p>
  </li>
  <li>
    <p><strong>Job 폴더</strong> : <code class="language-plaintext highlighter-rouge">JOB-연도-번호_짧은이름</code> → 예) <code class="language-plaintext highlighter-rouge">JOB-2025-023_보고서A</code></p>
  </li>
  <li>
    <p><strong>깊이 제한</strong> : 최대 3단</p>
  </li>
</ul>

<hr />

<h1 id="4-툴파이썬-패키지-템플릿-요약">4) 툴(파이썬 패키지) 템플릿 요약</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PRJ-2025-001_sample_app
├─ src/sample_app (cli.py, gui.py, __init__.py)
├─ tests/test_smoke.py
├─ scripts/ (install/run/build/test/lint: .sh / .ps1 모두)
├─ .devcontainer/devcontainer.json
├─ pyproject.toml (extras: dev/gui, entry points 등록)
├─ .env.example, .gitignore, .editorconfig
└─ README.md
</code></pre></div></div>

<ul>
  <li>
    <p><strong>엔트리포인트</strong> :</p>

    <ul>
      <li>
        <p>CLI: <code class="language-plaintext highlighter-rouge">sample-app</code> → <code class="language-plaintext highlighter-rouge">sample_app.cli:main</code></p>
      </li>
      <li>
        <p>GUI(옵션): <code class="language-plaintext highlighter-rouge">sample-app-gui</code> → <code class="language-plaintext highlighter-rouge">sample_app.gui:main</code> (PySide6)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>개발 편의</strong> : <code class="language-plaintext highlighter-rouge">.[dev]</code>에 pytest/ruff/pyinstaller 포함</p>
  </li>
  <li>
    <p><strong>단일 실행파일</strong> : PyInstaller 스크립트 내장</p>
  </li>
</ul>

<p><strong>시작(맥/리눅스)</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Work/20_Projects/PRJ-2025-001_sample_app
./scripts/install.sh
./scripts/run_cli.sh
<span class="c"># GUI 필요 시:</span>
<span class="nb">source</span> .venv/bin/activate <span class="o">&amp;&amp;</span> pip <span class="nb">install</span> <span class="s2">".[gui]"</span> <span class="o">&amp;&amp;</span> ./scripts/run_gui.sh
</code></pre></div></div>

<p><strong>시작(Windows PowerShell)</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">Work/20_Projects/PRJ-2025-001_sample_app</span><span class="w">
</span><span class="o">.</span><span class="n">/scripts/install.ps1</span><span class="w">
</span><span class="o">.</span><span class="nx">/scripts/run_cli.ps1</span><span class="w">
</span><span class="c"># GUI 필요 시:</span><span class="w">
</span><span class="o">.</span><span class="n">\.venv\Scripts\Activate.ps1</span><span class="p">;</span><span class="w"> </span><span class="n">pip</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="s2">".[gui]"</span><span class="p">;</span><span class="w"> </span><span class="o">.</span><span class="n">/scripts/run_gui.ps1</span><span class="w">
</span></code></pre></div></div>

<p><strong>빌드</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./scripts/build_cli.sh     <span class="c"># CLI 실행파일</span>
./scripts/build_gui.sh     <span class="c"># GUI 실행파일</span>
</code></pre></div></div>

<hr />

<h1 id="5-실제-산출물job-파이프라인">5) 실제 산출물(Job) 파이프라인</h1>

<ul>
  <li>
    <p><strong>의도</strong> : Projects(코드)와 분리해 <strong>입력→설정→실행→산출</strong> 흐름을 <strong>재현 가능</strong> 하게 관리</p>
  </li>
  <li>
    <p><strong>실행 절차</strong></p>

    <ol>
      <li>
        <p><code class="language-plaintext highlighter-rouge">02_Input/raw</code>에 원천 데이터 배치</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">03_Config/config.yml</code>에 파라미터 기록</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">04_Run/run.sh</code>(또는 <code class="language-plaintext highlighter-rouge">run.ps1</code>) 실행</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">06_Export</code>에 전달본 생성 + <code class="language-plaintext highlighter-rouge">manifest.json</code>/<code class="language-plaintext highlighter-rouge">run_log.txt</code> 출력</p>
      </li>
      <li>
        <p>필요 시 <code class="language-plaintext highlighter-rouge">70_Exports</code>로도 복사(전사 공유)</p>
      </li>
    </ol>
  </li>
  <li>
    <p><strong>품질/추적</strong> :</p>

    <ul>
      <li>
        <p>매니페스트에 <code class="language-plaintext highlighter-rouge">tool_version</code>, Python/OS, 파라미터 파일, <strong>SHA256 체크섬</strong> 자동 저장</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">qa_checklist.md</code>로 규격·포맷·시드 고정 점검</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="6-교육논문-자료-워크플로">6) 교육/논문 자료 워크플로</h1>

<ul>
  <li>
    <p>PDF는 <code class="language-plaintext highlighter-rouge">40_Resources/edu/papers/to_read</code></p>
  </li>
  <li>
    <p>메모는 <code class="language-plaintext highlighter-rouge">reading_notes/YYYY-MM-DD_제목.md</code> (템플릿 제공)</p>
  </li>
  <li>
    <p>1~2페이지 요약은 <code class="language-plaintext highlighter-rouge">summaries/</code></p>
  </li>
  <li>
    <p>논문에서 채택한 아이디어는 <strong>프로젝트 <code class="language-plaintext highlighter-rouge">/docs</code></strong>에 정리, 실험은 <strong>개별 Job</strong> 으로 기록(입력/설정/산출 연결)</p>
  </li>
</ul>

<hr />

<h1 id="7-환경툴-설치-공간-사용법">7) 환경·툴 설치 공간 사용법</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">80_Tools/installers</code>: 오프라인 설치 파일 보관, <strong>버전·체크섬</strong> 을 <code class="language-plaintext highlighter-rouge">scripts/install_notes.md</code>에 메모</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">85_Environments</code>:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">conda/environment.yml</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">venv/README.md</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">docker/Dockerfile</code> (또는 프로젝트 내 <code class="language-plaintext highlighter-rouge">.devcontainer</code>)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="8-일주-운영-루틴">8) 일/주 운영 루틴</h1>

<p><strong>매일</strong></p>

<ul>
  <li>
    <p>모든 캡처는 <code class="language-plaintext highlighter-rouge">00_Inbox</code> → 당일 처리건은 <code class="language-plaintext highlighter-rouge">10_Today</code></p>
  </li>
  <li>
    <p>작업 끝난 파일은 프로젝트 또는 Job 위치로 이동</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">30_Areas/worklog/YYYY/YYYY-MM/날짜.md</code>에 5줄 로그</p>
  </li>
</ul>

<p><strong>주 1회</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">00_Inbox</code> 정리, 완료 Job/Project는 <code class="language-plaintext highlighter-rouge">99_Archive</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">70_Exports</code> 정리(최종 전달본만 유지)</p>
  </li>
</ul>

<hr />

<h1 id="9-바로-다음-액션3단계">9) 바로 다음 액션(3단계)</h1>

<ol>
  <li>
    <p>압축 해제 후 <code class="language-plaintext highlighter-rouge">/Work</code> 배치</p>
  </li>
  <li>
    <p>툴 템플릿 폴더/패키지명(예: <code class="language-plaintext highlighter-rouge">sample_app</code>)을 네 프로젝트명으로 변경</p>
  </li>
  <li>
    <p>샘플 Job을 복제해 <code class="language-plaintext highlighter-rouge">brief/config</code>만 수정 → <code class="language-plaintext highlighter-rouge">04_Run</code> 실행</p>
  </li>
</ol>

<hr />

<p>필요하면 네 도메인(이미지 처리, 리포트 생성, 특정 포맷 규격 등)에 맞춰 <strong>Job 스캐폴드(검수 목록, 파라미터 스키마, 파일명 규칙)</strong>를 더 촘촘히 커스터마이즈해서 바로 쓸 버전으로 만들어줄게.</p>

<p class="chat--user">

1. 만약에 배포한 툴에 대한 제보가 버그가 들어와서 이에 대해 디버깅 수행이 필요해. 2. 배포한 툴에 대한 example을 만드는 작업을 하고 싶어. 3. 새로 설치한 툴에 대한 간단한 사용법 및 feasibility 검사용 테스트를 수행하고 싶어. 4. 파이썬 문법이 헷갈려서(regex) 등을 jupyter 띄워서 간단히 테스트하고 싶어. 5. 각종 유용한 팁을 모아두고 싶어. 6. 다른 여러 곳에서 참조할만한 Resource를 모아두고 싶어(설정 파일 등) 7. Manual 파일들을 모아두고 싶어. 각각의 업무에 대해 작업해야할 폴더를 알려줘. 없다면 추가해줘

</p>

<p>좋아! 네가 적어준 7가지 업무 각각에 대해 <strong>어디서 작업할지</strong> + <strong>없던 폴더는 추가</strong> 까지 다 해놨어.<br />
바로 쓸 수 있게 템플릿과 스크립트도 넣어 <strong>업데이트된 스타터</strong> 압축본을 만들었어.</p>

<p>업무별 확장 스타터(Tasks Extended) 다운로드</p>

<hr />

<h2 id="1-배포-툴-버그-제보-디버깅">1) “배포 툴 버그 제보” 디버깅</h2>

<ul>
  <li><strong>작업 위치(재현/증거 관리)</strong><br />
<code class="language-plaintext highlighter-rouge">25_Jobs/BUG-YYYY-###_이름/</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>01_Report/      # 제보 내용, 기대/실제, 환경
02_Repro/input  # 재현용 입력/파일
03_Config/      # 재현 파라미터(.yml/.json)
04_Run/         # repro.py + run 스크립트(sh/ps1)
05_Evidence/    # 로그/덤프/스크린샷/체크섬
06_FixValidation# 패치 검증 케이스
</code></pre></div>    </div>
  </li>
</ul>

<p>→ <strong>샘플 생성됨:</strong> <code class="language-plaintext highlighter-rouge">25_Jobs/BUG-2025-001_sample_bug/</code> (report.md, repro.py 포함)</p>

<ul>
  <li>
    <p><strong>작업 위치(코드 측 기록)</strong><br />
<code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../issues/BUG-YYYY-###/</code></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">triage.md</code>: 심각도/영향/추정 원인/다음 스텝</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">fix_notes.md</code>: 루트원인/커밋/테스트/릴리즈 계획</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="2-배포한-툴의-example-제작">2) 배포한 툴의 example 제작</h2>

<ul>
  <li><strong>소스 예제(프로젝트 안)</strong><br />
<code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../examples/</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data/      # 공개 가능한 소형 샘플 데이터
scripts/   # run_*.py: 기능별 최소 예제
docs/      # 각 예제의 기대 출력/설명
</code></pre></div>    </div>
  </li>
</ul>

<p>→ <strong>샘플 생성됨:</strong> <code class="language-plaintext highlighter-rouge">examples/scripts/run_hello.py</code>, <code class="language-plaintext highlighter-rouge">examples/docs/hello.md</code></p>

<ul>
  <li><strong>예제 결과물 패키징(선택)</strong><br />
실제 산출 패키지로 묶고 싶으면 <strong>Job으로 실행</strong> :<br />
<code class="language-plaintext highlighter-rouge">25_Jobs/EX-YYYY-###_툴예제/</code> (Job 스캐폴드 복제)</li>
</ul>

<hr />

<h2 id="3-새로-설치한-툴의-사용법feasibility-스모크-테스트">3) 새로 설치한 툴의 사용법·feasibility 스모크 테스트</h2>

<ul>
  <li>
    <p><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">25_Jobs/SMOKE-YYYY-###_toolname/</code></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code>에 버전 출력 등 <strong>통과 기준 명령</strong> 을 나열</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">04_Run/smoke.sh</code>/<code class="language-plaintext highlighter-rouge">smoke.ps1</code>가 순차 실행 → 결과 <code class="language-plaintext highlighter-rouge">06_Export/</code>에 남김<br />
→ <strong>샘플 생성됨:</strong> <code class="language-plaintext highlighter-rouge">SMOKE-2025-001_new_tool/</code> (commands.txt, smoke.sh 포함)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="4-파이썬regex-등-빠른-실험-용-jupyter">4) 파이썬/regex 등 <strong>빠른 실험</strong> 용 Jupyter</h2>

<ul>
  <li>
    <p><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">regex_scratch.ipynb</code>(생성됨): 소형 정규표현식 테스트 노트북</p>
      </li>
      <li>
        <p>실험은 <strong>작게</strong> 하고, 배운 건 <code class="language-plaintext highlighter-rouge">30_Areas/kb</code>로 옮겨 정리</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="5-각종-유용한-팁-모음">5) 각종 <strong>유용한 팁</strong> 모음</h2>

<ul>
  <li><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">30_Areas/kb/</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tips/         # 단문 팁 (python.md, regex.md 샘플 생성)
cheatsheets/  # 한 장 요약
howtos/       # 절차형 가이드
</code></pre></div>    </div>

    <ul>
      <li>라이프로그성 메모는 여기, <strong>재사용 가능한 코드</strong> 는 <code class="language-plaintext highlighter-rouge">50_Snippets/</code>에 보관</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="6-여러-곳에서-참조할-resource설정-등-중앙-저장소">6) 여러 곳에서 참조할 <strong>Resource(설정 등) 중앙 저장소</strong></h2>

<ul>
  <li><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">40_Resources/reference/configs/</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vscode/ ruff/ pytest/ pyinstaller/ pyside6/ jupyter/
</code></pre></div>    </div>
  </li>
</ul>

<p>→ 샘플 <code class="language-plaintext highlighter-rouge">pytest.ini</code>, <code class="language-plaintext highlighter-rouge">ruff.toml</code>, <code class="language-plaintext highlighter-rouge">jupyter_notebook_config.py</code> 포함</p>

<ul>
  <li>실제 프로젝트에서 가져다 쓸 <strong>골든 설정</strong> 은 여기서 관리하고, 각 프로젝트에는 <strong>심볼릭 링크/복사</strong>.</li>
</ul>

<hr />

<h2 id="7-manual-파일-모음">7) <strong>Manual</strong> 파일 모음</h2>

<ul>
  <li>
    <p><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">40_Resources/manuals/&lt;벤더&gt;/&lt;제품&gt;/&lt;버전&gt;/</code><br />
→ 샘플: <code class="language-plaintext highlighter-rouge">manuals/AcmeTool/1.0/index.md</code></p>

    <ul>
      <li>PDF/HTML/마크다운 매뉴얼 정리, 루트 <code class="language-plaintext highlighter-rouge">README.md</code>에 규칙 설명</li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="보너스-빠르게-쓰는-규칙요약">보너스: 빠르게 쓰는 규칙(요약)</h1>

<ul>
  <li>
    <p><strong>Job 네이밍</strong> :</p>

    <ul>
      <li>
        <p>버그: <code class="language-plaintext highlighter-rouge">BUG-2025-023_&lt;키워드&gt;</code></p>
      </li>
      <li>
        <p>예제: <code class="language-plaintext highlighter-rouge">EX-2025-011_&lt;기능&gt;</code></p>
      </li>
      <li>
        <p>스모크: <code class="language-plaintext highlighter-rouge">SMOKE-2025-004_&lt;툴이름&gt;</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>산출 파일명</strong> : <code class="language-plaintext highlighter-rouge">JOB코드_YYYYMMDD_v###.ext</code></p>
  </li>
  <li>
    <p><strong>증거 관리</strong> : <code class="language-plaintext highlighter-rouge">05_Evidence</code>에 로그/덤프/스크린샷 + <strong>SHA256</strong> 기록</p>
  </li>
  <li>
    <p><strong>지식 이전</strong> : <code class="language-plaintext highlighter-rouge">31_Labs</code> → 정리되면 <code class="language-plaintext highlighter-rouge">30_Areas/kb</code>로 승격</p>
  </li>
</ul>

<hr />

<p>원하면 니가 실제로 쓰는 <strong>툴 이름/도메인</strong>(예: 영상 처리, 리포트 생성, CAD 등)을 알려줘. 그러면 BUG/EX/SMOKE Job 템플릿을 그 도메인 규격(입력 포맷, QA 체크리스트, 파일명 규칙)으로 더 구체화해서 <strong>맞춤 스캐폴드</strong> 로 바로 내줄게.</p>

<p class="chat--user">

kb가 뭐야? 이제 정리된 구조를 하나의 plain text 파일로 정리해줘. 각 폴더별로 간단한 설명을 오른쪽에 붙여주면 좋겠어. 하위 폴더 구조 예시도 같이 주고

</p>

<p>좋아! 먼저 질문부터 답할게.</p>

<ul>
  <li><strong>kb가 뭐야?</strong><br />
<code class="language-plaintext highlighter-rouge">kb</code>는 <strong>knowledge base(지식 베이스)</strong>의 줄임말이야. 계속 쓰이는 팁·치트시트·가이드(How-to) 같은 <strong>축적형 지식</strong> 을 모아두는 폴더고, 우리 구조에서는 <code class="language-plaintext highlighter-rouge">30_Areas/kb/</code> 아래에 <code class="language-plaintext highlighter-rouge">tips/</code>, <code class="language-plaintext highlighter-rouge">cheatsheets/</code>, <code class="language-plaintext highlighter-rouge">howtos/</code>로 나눠서 정리해.</li>
</ul>

<p>요청한 대로, <strong>전체 구조를 plain text 파일</strong> 로 만들어 두었어. 각 폴더 오른쪽에 <strong>간단 설명</strong> 이 붙어 있고, <strong>하위 구조 예시</strong> 도 포함했어.</p>

<p>work_folder_structure.txt 다운로드</p>

<p>원본을 그대로 붙여넣어도 되지만, 파일로 받아두면 팀원에게 전송하거나 문서에 링크 걸기 편해. 필요하면 네 실제 프로젝트명/툴명으로 예시들을 자동 치환한 버전도 만들어 줄게.</p>

<p class="chat--user">

그냥 본문에 써줘

</p>

<p>아래 그대로 복붙해서 쓰면 돼요. (오른쪽은 간단 설명, 들여쓰기는 계층)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work 폴더 구조 요약 (생성: 2025-08-26)
※ 각 줄의 오른쪽은 간단 설명, 들여쓰기는 계층을 의미합니다.

Work/ - 1인 개발용 작업 루트
  00_Inbox/ - 급히 던져두는 임시함(매일 비우기)
  10_Today/ - 오늘 집중 작업(WIP), 끝나면 제자리 이동
  20_Projects/ - 툴(파이썬 패키지) 개발 공간
    PRJ-YYYY-NNN_name/ - 단일 프로젝트(패키지) 단위
      src/ - 패키지 소스 코드
        &lt;package_name&gt;/ - 모듈 디렉터리(예: sample_app)
      tests/ - pytest 테스트
      scripts/ - install/run/build/lint/test 스크립트(.sh/.ps1)
      examples/ - 배포용 예제 모음
        data/ - 공개 가능한 소형 샘플 데이터
        scripts/ - run_*.py 예제 스크립트
        docs/ - 예제 설명 및 기대 출력
      .devcontainer/ - 컨테이너 개발환경 설정(devcontainer.json 등)
      pyproject.toml - 프로젝트 메타, 의존성, 엔트리포인트
      README.md - 사용법/개요
      .gitignore, .editorconfig - 개발 편의
  25_Jobs/ - 툴을 사용해 만드는 실제 산출 작업 단위
    JOB-YYYY-NNN_name/ - 일반 산출 Job(입력→설정→실행→산출)
      01_Brief/ - 요구사항/검수기준/마감
      02_Input/
        raw/ - 원천 데이터
      03_Config/ - 파라미터(yml/json), 런 설정
      04_Run/ - 실행 스크립트(run.sh/ps1, run.py), 로그
      05_Output/ - 중간/최종 산출물(작업용)
      06_Export/ - 전달본(최종 산출물)
      90_Archive/ - 완료 후 보관
    BUG-YYYY-NNN_name/ - 배포 버그 재현/증거/수정 검증 용 Job
      01_Report/ - 제보 내용, 환경, 기대/실제
      02_Repro/
        input/ - 재현에 필요한 입력
      03_Config/ - 재현 파라미터
      04_Run/ - repro.py, repro.sh/ps1, repro_log.txt
      05_Evidence/
        logs/ - 콘솔/크래시 로그, 스크린샷, 체크섬
      06_FixValidation/ - 패치 검증 케이스
    EX-YYYY-NNN_name/ - 툴 예제 산출 Job(선택, 패키징 목적)
    SMOKE-YYYY-NNN_tool/ - 새 툴 설치 후 스모크/feasibility 테스트
      01_Brief/ - 성공 기준 정의
      03_Config/ - commands.txt: 테스트 명령 목록
      04_Run/ - smoke.sh/ps1로 일괄 실행
      06_Export/ - 결과 요약(result.txt 등)
  30_Areas/ - 지속 업무 영역(Projects와 달리 계속 유지)
    worklog/ - 일일/주간 작업 로그(YYYY/YY-MM/날짜.md)
    environments/ - 공통 환경 메모/전략
    kb/ - knowledge base(지식 베이스): 팁·문서·가이드 축적
      tips/ - 단문 팁 모음(예: python.md, regex.md)
      cheatsheets/ - 한 장 요약
      howtos/ - 절차형 가이드
  31_Labs/ - 실험실 영역(가벼운 테스트/실습)
    jupyter/ - 스크래치 노트북(예: regex_scratch.ipynb)
  40_Resources/ - 참고 자료(교육/레퍼런스/매뉴얼/설정)
    edu/ - 교육·논문·튜토리얼
      courses/ - 강의/코스 자료
      tutorials/ - 튜토리얼 모음
      papers/ - 논문 관리
        to_read/ - 읽을 논문 PDF
        reading_notes/ - 논문 메모(YYYY-MM-DD_제목.md, TEMPLATE.md 포함)
        summaries/ - 1~2페이지 요약
    reference/ - 여러 곳에서 참조할 공통 리소스
      configs/ - 표준 설정(프로젝트에서 재사용)
        vscode/ - VSCode 설정
        ruff/ - ruff.toml 예시
        pytest/ - pytest.ini 예시
        pyinstaller/ - 빌드 설정 템플릿
        pyside6/ - GUI 프레임워크 관련
        jupyter/ - jupyter_notebook_config.py 예시
    manuals/ - 매뉴얼/가이드(PDF/HTML/MD)
      &lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/ - 버전별 정리
  50_Snippets/ - 재사용 코드/문구
    sql/ - 쿼리 스니펫
    text/ - 문서/이메일 문구
    bash/ - 쉘 스니펫
  60_Assets/ - 로고/폰트/템플릿 등 공용 리소스
  70_Exports/ - 여러 Job의 최종 전달본 모아보기(옵션)
  80_Tools/ - 툴 설치/포터블/자동화
    installers/ - 오프라인 설치 파일, install_notes.md(버전·체크섬)
    bin/ - 포터블 실행파일
    scripts/ - 설치/유틸 스크립트
    devcontainer/ - 개발 컨테이너 관련
  85_Environments/ - 개발 환경 예시
    conda/
      environment.yml - conda 환경 정의
    venv/
      README.md - 표준 venv 사용 가이드
    docker/
      Dockerfile - 개발 컨테이너 베이스
  99_Archive/ - 완료 프로젝트/Job/자료 보관

[네이밍 요약]
- 프로젝트 폴더: PRJ-연도-번호_짧은이름 (예: PRJ-2025-012_GUItool)
- Job 폴더: JOB/BUG/EX/SMOKE-연도-번호_이름
- 파일: YYYY-MM-DD_제목_v001.ext (최종본 금지, 버전 증가)
- 깊이: 최대 3단 유지
</code></pre></div></div>

<p class="chat--user">

1. 내가 만든 툴을 유저들에게 배포할 장소도 있으면 좋겠어. 2. 골든 설정 뿐 아니라 내 개인 설정을 저장할 곳도 있으면 좋겠어. 두 가지를 어떻게 관리하면 될 지 알려줘. 폴더 추가가 필요하다면 추가해줘

</p>

<p>좋아—두 가지를 깔끔하게 나누자.</p>

<h1 id="1-배포-장소-유저에게-줄-최종물-보관">1) 배포 장소 (유저에게 줄 최종물 보관)</h1>

<h2 id="폴더-추가">폴더 추가</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/75_Releases                         ← “배포 전용” 중앙 보관소
  /&lt;project_slug&gt;/                   ← 예: sample-app
    /vX.Y.Z/                         ← 릴리스 버전별
      /installers/                   ← .exe/.msi/.pkg/.dmg 등
      /wheels/                       ← Python wheel(s)
      /portable/                     ← 포터블/압축본
      /docs/                         ← 설치 가이드, README, FAQ
      /licenses/                     ← LICENSE, ThirdPartyNotices.txt
      /checksums/                    ← *.sha256 (무결성 확인)
      ReleaseNotes.md                ← 릴리스 노트
    /latest/                         ← 최신 버전(심볼릭링크 or 복사)
  catalog.json                       ← (선택) 버전/파일 목록 인덱스
</code></pre></div></div>

<h2 id="운용-규칙짧게">운용 규칙(짧게)</h2>

<ol>
  <li>
    <p><strong>빌드 산출물</strong> 은 프로젝트 내부 <code class="language-plaintext highlighter-rouge">dist/</code>에 생성</p>
  </li>
  <li>
    <p><strong>QA 통과</strong> 후 <code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/</code>로 복사</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">checksums/</code>에 <code class="language-plaintext highlighter-rouge">*.sha256</code> 생성(무결성 검증)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ReleaseNotes.md</code>와 간단 설치 가이드 <code class="language-plaintext highlighter-rouge">/docs/</code> 배치</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">latest/</code>를 새 버전으로 갱신</p>
  </li>
  <li>
    <p>외부 공유 시엔 <strong>이 경로만 링크</strong> (프로젝트 내부 <code class="language-plaintext highlighter-rouge">dist/</code>는 개발용)</p>
  </li>
</ol>

<blockquote>
  <p>필요하면 <code class="language-plaintext highlighter-rouge">25_Jobs/REL-YYYY-###_&lt;project&gt;_vX.Y.Z/</code> 형태로 <strong>릴리스 Job</strong> 을 만들어 “체크섬 생성/노트 작성/배포 복사”를 자동화하면 좋아요.</p>
</blockquote>

<hr />

<h1 id="2-개인-설정-보관-골든-설정과-분리">2) 개인 설정 보관 (골든 설정과 분리)</h1>

<h2 id="폴더-추가-1">폴더 추가</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/40_Resources
  /reference/configs/                ← 골든 설정(공유·문서화 대상)
    vscode/ ruff/ pytest/ jupyter/ … 
  /personal/configs/                 ← 내 PC/취향/비밀 경로(비공유)
    /os/                             ← os별 설정
      mac/  win/  linux/
    /shell/                          ← bash/zsh/powershell 프로필
      bash/ zsh/ powershell/
    /editors/                        ← VSCode, PyCharm 사용자 설정
      vscode/settings.user.json
      vscode/keybindings.user.json
    /git/                            ← .gitconfig.local 등
    /python/                         ← pip.conf, poetry.toml, pypirc
    /tools/                          ← 각종 툴 개인 프리셋
    /secrets/README.md               ← (실제 비밀은 두지 말고 안내만)
    .gitignore                       ← 개인/민감 파일 커밋 방지
</code></pre></div></div>

<h3 id="레이어링권장-패턴">레이어링(권장 패턴)</h3>

<ul>
  <li>
    <p><strong>골든(Base)</strong> : <code class="language-plaintext highlighter-rouge">/40_Resources/reference/configs/...</code></p>
  </li>
  <li>
    <p><strong>개인(Override)</strong> : <code class="language-plaintext highlighter-rouge">/40_Resources/personal/configs/...</code></p>
  </li>
  <li>
    <p>로직/도구에서는 <code class="language-plaintext highlighter-rouge">base + personal</code>을 <strong>겹쳐 읽기</strong>(있으면 개인이 우선).</p>

    <ul>
      <li>
        <p>예: <code class="language-plaintext highlighter-rouge">config.yml</code> + <code class="language-plaintext highlighter-rouge">config.local.yml</code></p>
      </li>
      <li>
        <p>VSCode: <code class="language-plaintext highlighter-rouge">settings.json</code>(골든) + <code class="language-plaintext highlighter-rouge">settings.user.json</code>(개인)</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="안전편의-팁">안전/편의 팁</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">personal/configs/.gitignore</code>에 <code class="language-plaintext highlighter-rouge">*.local</code>, <code class="language-plaintext highlighter-rouge">secrets/*</code>, <code class="language-plaintext highlighter-rouge">*.key</code>, <code class="language-plaintext highlighter-rouge">*.pem</code>, <code class="language-plaintext highlighter-rouge">*.p12</code>, <code class="language-plaintext highlighter-rouge">id_*</code>, <code class="language-plaintext highlighter-rouge">*token*</code>, <code class="language-plaintext highlighter-rouge">.env*</code> 등 <strong>광범위 차단</strong></p>
  </li>
  <li>
    <p>진짜 비밀값은 저장하지 말고 <strong>예시만</strong>(e.g. <code class="language-plaintext highlighter-rouge">.env.example</code>) 남기기</p>
  </li>
  <li>
    <p>홈 디렉터리와 <strong>심볼릭 링크</strong> 로 연결하는 부트스트랩 스크립트를 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/bootstrap_*</code>에 둬도 좋음</p>

    <ul>
      <li>예: <code class="language-plaintext highlighter-rouge">ln -s /Work/40_Resources/personal/configs/shell/zsh/.zshrc ~/.zshrc</code></li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="빠른-요약한-줄씩">빠른 요약(한 줄씩)</h1>

<ul>
  <li>
    <p><strong>배포</strong> 는 <code class="language-plaintext highlighter-rouge">/75_Releases/&lt;project&gt;/vX.Y.Z/</code>에 버전/체크섬/문서까지 <strong>원스톱 정리</strong> , <code class="language-plaintext highlighter-rouge">latest/</code>로 최신 포인터 제공.</p>
  </li>
  <li>
    <p><strong>설정</strong> 은 “공유 가능한 골든”은 <code class="language-plaintext highlighter-rouge">/40_Resources/reference/configs/</code>, “내 취향/개인/민감”은 <code class="language-plaintext highlighter-rouge">/40_Resources/personal/configs/</code>로 <strong>이원화</strong> 하고, 툴은 <strong>개인 설정을 덮어쓰기 레이어</strong> 로 읽게 설계.</p>
  </li>
</ul>

<p>원하면 위 구조를 네 현재 스타터에 <strong>실제 폴더/샘플 파일까지 추가한 압축본</strong> 으로 바로 만들어 줄게.</p>

<p class="chat--user">

이제 마지막으로 지금까지의 모든 내용을 정리하자. 1. 최종 폴더 구조(각 폴더에 대한 설명과 예시 구조와 함께) 2. 주요 업무 flow

</p>

<p>좋아—지금까지 만든 걸 한 번에 보기 좋게 정리했어.<br />
필요하면 바로 복붙해서 팀 문서/Notion에 넣어도 돼.</p>

<h1 id="1-최종-폴더-구조-설명--예시-하위-구조">1) 최종 폴더 구조 (설명 + 예시 하위 구조)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/                                - 1인 개발용 작업 루트
  00_Inbox/                          - 급히 던져두는 임시함(매일 비우기)
  10_Today/                          - 오늘 집중 작업(WIP), 끝나면 제자리 이동

  20_Projects/                       - 툴(파이썬 패키지) 개발 공간
    PRJ-YYYY-NNN_name/               - 단일 프로젝트(패키지) 단위 (예: PRJ-2025-001_sample_app)
      src/&lt;package_name&gt;/            - 패키지 소스(예: sample_app/)
      tests/                         - pytest 테스트
      scripts/                       - install/run/build/lint/test 스크립트(.sh/.ps1)
      examples/                      - 배포용 예제 모음
        data/                        - 공개 가능한 소형 샘플 데이터
        scripts/                     - run_*.py 예제 스크립트
        docs/                        - 예제 설명 및 기대 출력
      issues/                        - 버그/개선 이슈 노트(예: BUG-2025-001/)
      .devcontainer/                 - 컨테이너 개발환경 설정
      docs/                          - 프로젝트 문서(설계/ADR/가이드)
      pyproject.toml                 - 메타/의존성/엔트리포인트
      .gitignore, .editorconfig, README.md

  25_Jobs/                           - 툴을 사용해 만드는 “산출물 작업 단위”
    JOB-YYYY-NNN_name/               - 일반 산출 Job(입력→설정→실행→산출)
      01_Brief/                      - 요구사항/검수기준/마감
      02_Input/
        raw/                         - 원천 데이터
      03_Config/                     - 파라미터(yml/json)
      04_Run/                        - run.sh/ps1, run.py, 로그
      05_Output/                     - 중간/최종 산출물(작업용)
      06_Export/                     - 전달본(최종 산출물)
      90_Archive/                    - 완료 후 보관
    BUG-YYYY-NNN_name/               - 배포 버그 재현/증거/수정 검증 Job
      01_Report/                     - 제보 내용, 환경, 기대/실제
      02_Repro/input/                - 재현 입력
      03_Config/                     - 재현 파라미터
      04_Run/                        - repro.py + 스크립트, repro_log.txt
      05_Evidence/logs/              - 콘솔/크래시 로그·스크린샷·체크섬
      06_FixValidation/              - 패치 검증 케이스
    EX-YYYY-NNN_name/                - “툴 예제” 산출 Job(패키징 목적)
    SMOKE-YYYY-NNN_tool/             - 새 툴 설치 후 스모크/feasibility 테스트
      01_Brief/                      - 성공 기준 정의
      03_Config/                     - commands.txt: 테스트 명령 목록
      04_Run/                        - smoke.sh/ps1로 일괄 실행
      06_Export/                     - 결과 요약(result.txt 등)

  30_Areas/                          - 지속 업무(Projects와 달리 계속 유지)
    worklog/YYYY/YY-MM/날짜.md       - 일일/주간 작업 로그(5줄 요약 권장)
    environments/                    - 공통 환경 메모/전략
    kb/                              - knowledge base(지식 베이스)
      tips/                          - 단문 팁(예: python.md, regex.md)
      cheatsheets/                   - 한 장 요약
      howtos/                        - 절차형 가이드

  31_Labs/                           - 실험실(가벼운 테스트/실습)
    jupyter/                         - 스크래치 노트북(예: regex_scratch.ipynb)

  40_Resources/                      - 참고 자료(교육/레퍼런스/설정/매뉴얼)
    edu/                             - 교육·논문·튜토리얼
      courses/                       - 강의/코스 자료
      tutorials/                     - 튜토리얼 모음
      papers/                        - 논문 관리
        to_read/                     - 읽을 논문 PDF
        reading_notes/               - 메모(YYYY-MM-DD_제목.md, TEMPLATE.md)
        summaries/                   - 1~2 페이지 요약
    reference/                       - “골든” 공용 설정(공유/문서화 대상)
      configs/                       - 표준 설정 모음
        vscode/ ruff/ pytest/ pyinstaller/ pyside6/ jupyter/
    personal/                        - 개인 설정(내 PC/취향/비공개)
      configs/
        os/{mac,win,linux}/          - OS별 설정
        shell/{bash,zsh,powershell}/ - 쉘 프로필
        editors/vscode/              - settings.user.json, keybindings.user.json
        git/                         - .gitconfig.local 등
        python/                      - pip.conf, poetry.toml, pypirc
        tools/                       - 각종 도구 개인 프리셋
        secrets/README.md            - (실제 비밀은 두지 않음)
        .gitignore                   - *.local, secrets/* 등 광범위 차단
    manuals/                         - 매뉴얼/가이드(PDF/HTML/MD)
      &lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/  - 버전별 정리

  50_Snippets/                       - 재사용 코드/문구
    sql/ text/ bash/

  60_Assets/                         - 로고/폰트/템플릿 등 공용 리소스

  70_Exports/                        - 여러 Job의 “최종 전달본” 모아보기(옵션)

  75_Releases/                       - 유저 배포 전용 중앙 보관소
    &lt;project_slug&gt;/                  - 예: sample-app
      vX.Y.Z/                        - 버전별 폴더
        installers/                  - .exe/.msi/.pkg/.dmg 등
        wheels/                      - Python wheel(s)
        portable/                    - 포터블/압축본
        docs/                        - 설치 가이드, README, FAQ
        licenses/                    - LICENSE, ThirdPartyNotices.txt
        checksums/                   - *.sha256 (무결성 확인)
        ReleaseNotes.md              - 릴리스 노트
      latest/                        - 최신 버전(심볼릭 링크 또는 복사)
    catalog.json                     - (선택) 버전/파일 인덱스

  80_Tools/                          - 툴 설치/포터블/자동화
    installers/                      - 오프라인 설치 파일, install_notes.md
    bin/                             - 포터블 실행파일
    scripts/                         - 설치/유틸/부트스트랩 스크립트
    devcontainer/                    - 개발 컨테이너 관련

  85_Environments/                   - 개발 환경 예시
    conda/environment.yml
    venv/README.md
    docker/Dockerfile

  99_Archive/                        - 완료 프로젝트/Job/자료 보관
</code></pre></div></div>

<h3 id="네이밍--버전-규칙요약">네이밍 &amp; 버전 규칙(요약)</h3>

<ul>
  <li>
    <p><strong>프로젝트 폴더</strong> : <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_짧은이름</code> (예: <code class="language-plaintext highlighter-rouge">PRJ-2025-012_GUI툴</code>)</p>
  </li>
  <li>
    <p><strong>Job 폴더</strong> : <code class="language-plaintext highlighter-rouge">JOB/BUG/EX/SMOKE-연도-번호_이름</code></p>
  </li>
  <li>
    <p><strong>파일</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code> (최종본 금지, 버전 증가)</p>
  </li>
  <li>
    <p><strong>깊이</strong> : 최대 3단</p>
  </li>
  <li>
    <p><strong>설정 레이어링</strong> : <code class="language-plaintext highlighter-rouge">reference/configs</code>(공용 골든) + <code class="language-plaintext highlighter-rouge">personal/configs</code>(내 오버라이드)</p>
  </li>
</ul>

<hr />

<h1 id="2-주요-업무-flow-핵심-단계별">2) 주요 업무 Flow (핵심 단계별)</h1>

<h2 id="a-툴파이썬-패키지-개발--릴리스">A. 툴(파이썬 패키지) 개발 → 릴리스</h2>

<ol>
  <li>
    <p><strong>프로젝트 생성/진행</strong> : <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-...</code></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">./scripts/install.(sh|ps1)</code>로 venv + dev 의존성 설치</p>
      </li>
      <li>
        <p>기능 추가 → <code class="language-plaintext highlighter-rouge">tests/</code>에 단위 테스트, <code class="language-plaintext highlighter-rouge">ruff</code>로 린트</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>실행파일 빌드(옵션)</strong> : <code class="language-plaintext highlighter-rouge">./scripts/build_cli.sh</code> / <code class="language-plaintext highlighter-rouge">build_gui.sh</code></p>
  </li>
  <li>
    <p><strong>릴리스 산출 정리</strong> : QA 통과 후 <code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/</code>에</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">installers/</code>, <code class="language-plaintext highlighter-rouge">wheels/</code>, <code class="language-plaintext highlighter-rouge">portable/</code> + <code class="language-plaintext highlighter-rouge">docs/</code>, <code class="language-plaintext highlighter-rouge">licenses/</code>, <code class="language-plaintext highlighter-rouge">checksums/*.sha256</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ReleaseNotes.md</code> 작성, <code class="language-plaintext highlighter-rouge">latest/</code> 갱신</p>
      </li>
      <li>
        <p>(선택) <code class="language-plaintext highlighter-rouge">25_Jobs/REL-YYYY-###_...</code>로 릴리스 자동화 Job 운영</p>
      </li>
    </ul>
  </li>
</ol>

<h2 id="b-실제-산출물-만들기도구-사용--결과-전달">B. 실제 산출물 만들기(도구 사용 → 결과 전달)</h2>

<ol>
  <li>
    <p><strong>Job 생성</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/JOB-YYYY-###_이름</code> 복제</p>
  </li>
  <li>
    <p><strong>입력/설정</strong> : <code class="language-plaintext highlighter-rouge">02_Input/raw/</code>에 데이터, <code class="language-plaintext highlighter-rouge">03_Config/config.yml</code> 작성</p>
  </li>
  <li>
    <p><strong>실행</strong> : <code class="language-plaintext highlighter-rouge">04_Run/run.sh|ps1</code> → 결과 <code class="language-plaintext highlighter-rouge">06_Export/</code>, 로그·매니페스트 자동 생성</p>
  </li>
  <li>
    <p><strong>검수/전달</strong> : <code class="language-plaintext highlighter-rouge">qa_checklist.md</code> 확인 → 필요 시 <code class="language-plaintext highlighter-rouge">70_Exports/</code>에 모아두기</p>
  </li>
  <li>
    <p><strong>재현성 확보</strong> : 매니페스트에 <strong>툴 버전/파라미터/OS/Python/체크섬</strong> 기록</p>
  </li>
</ol>

<h2 id="c-배포-버그-제보--디버깅--수정-검증">C. 배포 버그 제보 → 디버깅 → 수정 검증</h2>

<ol>
  <li>
    <p><strong>수집/정리</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/BUG-YYYY-###_.../01_Report/</code>에 제보·환경·재현 절차 기록</p>
  </li>
  <li>
    <p><strong>재현 세팅</strong> : <code class="language-plaintext highlighter-rouge">02_Repro/input/</code>, <code class="language-plaintext highlighter-rouge">03_Config/</code> 구성 → <code class="language-plaintext highlighter-rouge">04_Run/repro.py</code> 실행</p>
  </li>
  <li>
    <p><strong>증거 수집</strong> : <code class="language-plaintext highlighter-rouge">05_Evidence/logs/</code>에 로그·덤프·스크린샷·체크섬</p>
  </li>
  <li>
    <p><strong>코드 작업</strong> : <code class="language-plaintext highlighter-rouge">20_Projects/.../issues/BUG-.../triage.md</code> → 원인/수정 방향</p>
  </li>
  <li>
    <p><strong>검증</strong> : <code class="language-plaintext highlighter-rouge">06_FixValidation/</code> 시나리오 통과 후 패치 릴리스(Flow A로 연결)</p>
  </li>
</ol>

<h2 id="d-배포-예제example-제작">D. 배포 예제(example) 제작</h2>

<ol>
  <li>
    <p><strong>프로젝트 내</strong> <code class="language-plaintext highlighter-rouge">examples/{data,scripts,docs}</code>에 <strong>최소 실행 예제</strong> 작성</p>
  </li>
  <li>
    <p>(선택) 패키징/전달용이면 <code class="language-plaintext highlighter-rouge">25_Jobs/EX-YYYY-###_...</code>로 Job 화 → 재현/전달 관리</p>
  </li>
</ol>

<h2 id="e-새로-설치한-툴-스모크feasibility-테스트">E. 새로 설치한 툴 스모크/feasibility 테스트</h2>

<ol>
  <li>
    <p><strong>Job 생성</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/SMOKE-YYYY-###_tool/</code></p>
  </li>
  <li>
    <p><strong>명령 정의</strong> : <code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code>(예: <code class="language-plaintext highlighter-rouge">tool --version</code>)</p>
  </li>
  <li>
    <p><strong>실행</strong> : <code class="language-plaintext highlighter-rouge">04_Run/smoke.sh|ps1</code> → <code class="language-plaintext highlighter-rouge">06_Export/result.txt</code></p>
  </li>
  <li>
    <p><strong>판정</strong> : 성공 기준(시간/종료코드/출력) 충족 확인</p>
  </li>
</ol>

<h2 id="f-빠른-실험정규표현식파이썬-문법-등">F. 빠른 실험(정규표현식·파이썬 문법 등)</h2>

<ol>
  <li>
    <p><strong>스크래치</strong> : <code class="language-plaintext highlighter-rouge">31_Labs/jupyter/regex_scratch.ipynb</code> 등에서 <strong>작게</strong> 실험</p>
  </li>
  <li>
    <p><strong>지식화</strong> : 유효한 내용은 <code class="language-plaintext highlighter-rouge">30_Areas/kb/{tips,cheatsheets,howtos}</code>로 승격 정리</p>
  </li>
</ol>

<h2 id="g-지식설정-자산화골든-vs-개인">G. 지식/설정 자산화(골든 vs 개인)</h2>

<ul>
  <li>
    <p><strong>골든 설정</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/reference/configs/</code>에서 <strong>공유 가능한 표준</strong> 을 관리</p>
  </li>
  <li>
    <p><strong>개인 설정</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/personal/configs/</code>에 내 취향/PC별 설정 저장</p>
  </li>
  <li>
    <p><strong>레이어링 원칙</strong> : 도구가 <code class="language-plaintext highlighter-rouge">base(골든) + personal(오버라이드)</code>를 함께 읽도록 설계</p>
  </li>
  <li>
    <p><strong>부트스트랩</strong> : <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>에 심볼릭 링크/복사 스크립트 두고 환경 신속 반영</p>
  </li>
</ul>

<h2 id="h-매뉴얼레퍼런스교육자료-관리">H. 매뉴얼/레퍼런스/교육자료 관리</h2>

<ul>
  <li>
    <p><strong>논문/교육</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/edu/</code>에서 <code class="language-plaintext highlighter-rouge">to_read → reading_notes → summaries</code> 흐름</p>
  </li>
  <li>
    <p><strong>매뉴얼</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/manuals/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/</code>에 버전별 정리</p>
  </li>
  <li>
    <p><strong>공통 참조 리소스</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/reference/</code>(골든)와 <code class="language-plaintext highlighter-rouge">personal/</code>(개인)를 구분</p>
  </li>
</ul>

<h2 id="i-일상-운영-루틴">I. 일상 운영 루틴</h2>

<ul>
  <li>
    <p><strong>매일</strong> : 캡처는 <code class="language-plaintext highlighter-rouge">00_Inbox</code> → 당일 작업은 <code class="language-plaintext highlighter-rouge">10_Today</code>에서 처리 → 제자리 이동</p>
  </li>
  <li>
    <p><strong>주 1회</strong> : <code class="language-plaintext highlighter-rouge">00_Inbox</code> 비우기, 완료 Job/Project는 <code class="language-plaintext highlighter-rouge">99_Archive</code>로 이동, <code class="language-plaintext highlighter-rouge">70_Exports</code> 정리</p>
  </li>
  <li>
    <p><strong>월 1회</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/edu</code>/<code class="language-plaintext highlighter-rouge">kb</code> 정리, 불용 자료 아카이브</p>
  </li>
</ul>

<hr />

<p>필요하면 네 환경/도메인(예: 영상·리포트·CAD) 기준으로 <strong>Job 템플릿의 QA 체크리스트/파일명 규격/파라미터 스키마</strong> 를 더 촘촘히 커스터마이즈해서 바로 쓸 버전으로 만들어줄게.</p>

<p class="chat--user">

근데 31_Labs랑 25_Jobs/SMOKE*랑 역할이 겹치진 않나?

</p>

<p>좋은 질문! 둘이 살짝 겹쳐 보이지만 <strong>목적·형식·보존성</strong> 이 다릅니다. 아래처럼 쓰면 깔끔해요.</p>

<h2 id="결론-먼저">결론 먼저</h2>

<ul>
  <li>
    <p><strong>31<em>Labs** = _개인용 스크래치 공간</em>. 빨리 시도하고 버려도 되는 **짧은 실험</strong>(regex, 파이썬 문법, 라이브러리 API 감 잡기).</p>
  </li>
  <li>
    <p><strong>25<em>Jobs/SMOKE-** * = _재현 가능한 점검 공간</em>. **새로 설치한 툴의 동작 확인/feasibility</strong> 를 <strong>증거와 함께</strong> 남기는 <strong>공식 스모크 테스트</strong>.</p>
  </li>
</ul>

<hr />

<h2 id="언제-어디에-결정-규칙">언제 어디에? (결정 규칙)</h2>

<ol>
  <li>
    <p><strong>5분/50줄 규칙</strong></p>

    <ul>
      <li>
        <p>5분 내, 50줄 이하의 즉흥 테스트 → <strong>31_Labs</strong></p>
      </li>
      <li>
        <p>설치·환경 의존, 통과 기준/로그/결과를 남겨야 함 → <strong>SMOKE Job</strong></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>재현 필요? 공유 필요?</strong></p>

    <ul>
      <li>
        <p>“나만 잠깐 확인” → <strong>31_Labs</strong></p>
      </li>
      <li>
        <p>“나중에 또 돌리거나 증빙/비교 필요” → <strong>SMOKE Job</strong></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>입력/설정/출력 구조가 필요?</strong></p>

    <ul>
      <li>
        <p>필요 없음(메모성/코드 조각) → <strong>31_Labs</strong></p>
      </li>
      <li>
        <p>필요 있음(명령 목록, 로그, 결과물, 매니페스트) → <strong>SMOKE Job</strong></p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="역할-차이-한눈에">역할 차이 한눈에</h2>

<table>
  <thead>
    <tr>
      <th>구분</th>
      <th>31_Labs</th>
      <th>25_Jobs/SMOKE-*</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>목적</td>
      <td>빠른 실험, 개념 확인</td>
      <td>설치 검증/feasibility, 재현/증빙</td>
    </tr>
    <tr>
      <td>형식</td>
      <td>자유(노트북/스크립트)</td>
      <td>정형(입력·설정·실행·결과 폴더)</td>
    </tr>
    <tr>
      <td>결과</td>
      <td>버려도 됨, 요약만 kb로 승격</td>
      <td>로그/결과/체크섬·통과기준 보존</td>
    </tr>
    <tr>
      <td>공유성</td>
      <td>개인 중심</td>
      <td>공유·재사용 전제</td>
    </tr>
    <tr>
      <td>예</td>
      <td>regex 패턴, pandas 한 줄 테스트</td>
      <td><code class="language-plaintext highlighter-rouge">tool --version</code>·샘플 실행·성능 스냅샷</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="충돌중복을-피하는-운용-룰">충돌/중복을 피하는 운용 룰</h2>

<ul>
  <li>
    <p><strong>프로모션 사다리</strong> : 31_Labs에서 시작 → “재현/공유 필요” 판단되면 <strong>SMOKE Job으로 승격</strong></p>

    <ol>
      <li>
        <p><code class="language-plaintext highlighter-rouge">25_Jobs/SMOKE-YYYY-###_&lt;tool&gt;/</code> 생성</p>
      </li>
      <li>
        <p>Labs에서 확인한 명령들을 <code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code>로 옮김</p>
      </li>
      <li>
        <p>기대 출력/성공 기준을 <code class="language-plaintext highlighter-rouge">01_Brief/brief.md</code>에 명시</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">04_Run/smoke.sh|ps1</code> 실행 → <code class="language-plaintext highlighter-rouge">06_Export/result.txt</code>와 로그로 증빙</p>
      </li>
    </ol>
  </li>
  <li>
    <p><strong>보존 정책</strong> : 31_Labs 산출물은 <strong>7일 이내</strong> 에</p>

    <ul>
      <li>
        <p>지식은 <code class="language-plaintext highlighter-rouge">30_Areas/kb/{tips, cheatsheets, howtos}</code>로</p>
      </li>
      <li>
        <p>재현 테스트는 <strong>SMOKE Job</strong> 으로</p>
      </li>
      <li>
        <p>나머지는 삭제/아카이브</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>네이밍</strong> :</p>

    <ul>
      <li>
        <p>Labs 노트북: <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_topic.ipynb</code></p>
      </li>
      <li>
        <p>SMOKE Job: <code class="language-plaintext highlighter-rouge">SMOKE-YYYY-###_&lt;tool&gt;</code> + 결과 파일 <code class="language-plaintext highlighter-rouge">result.txt</code>, 로그 <code class="language-plaintext highlighter-rouge">run_log.txt</code></p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="폴더-배치최종-권장">폴더 배치(최종 권장)</h2>

<ul>
  <li>
    <p><strong>31_Labs/jupyter/</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">regex_scratch.ipynb</code> (짧은 패턴/문법 테스트)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">proto_*.ipynb</code> (짧은 실험들)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>**25<em>Jobs/SMOKE-YYYY-###</em> <tool>/**</tool></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">01_Brief/</code> (성공 기준)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code> (검증 명령 리스트)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">04_Run/smoke.sh|ps1</code> (일괄 실행)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">06_Export/result.txt</code> + 로그/매니페스트(증빙)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="예시-시나리오">예시 시나리오</h2>

<ul>
  <li>
    <p><strong>“ffmpeg 새 버전 깔았는데 옵션 잘 먹나?”</strong></p>

    <ul>
      <li>Labs에서 옵션 한두 개 <strong>즉석 확인</strong> → 정상이라도 <strong>SMOKE Job</strong> 으로 승격해 <code class="language-plaintext highlighter-rouge">ffmpeg -version</code>, 샘플 변환 1건, 처리시간, 출력 해시까지 기록.</li>
    </ul>
  </li>
  <li>
    <p><strong>“정규식 lookbehind 기억 안 나네?”</strong></p>

    <ul>
      <li><strong>Labs 노트북</strong> 에서 바로 테스트 → 유용한 패턴은 <code class="language-plaintext highlighter-rouge">kb/regex.md</code>에 추가.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="미니멀을-원한다면">미니멀을 원한다면</h2>

<ul>
  <li>
    <p>31_Labs를 <strong>완전히 없애고</strong> 모든 검증을 SMOKE로만 해도 됩니다. 다만 초기 탐색 속도는 떨어져요.</p>
  </li>
  <li>
    <p>반대로 간단히 하고 싶다면, “설치 검증/증빙이 필요한 것만 SMOKE, 나머지는 Labs”로 유지하는 게 보통 가장 효율적입니다.</p>
  </li>
</ul>

<p>원하면 <strong>Labs→SMOKE 자동 승격 스크립트</strong>(노트북 코드 블록을 <code class="language-plaintext highlighter-rouge">commands.txt</code>로 변환, Job 스켈레톤 생성)도 만들어 줄게.</p>

<p class="chat--user">

kb 대신 한국인이 쉽게 이해할만한 쉬운 단어 추천해주고, 폴더 구조 다시 한 번 자세히 설명해줘. 몇몇 라인에 대한 설명이 빠져 있는것 같아

</p>

<p>좋은 포인트! 먼저 <strong>kb</strong> 대체어부터 정리하고, 그다음 <strong>폴더 구조를 한 줄도 빠짐없이 상세 설명</strong> 으로 다시 써줄게.</p>

<h2 id="kb-대체어한국어">kb 대체어(한국어)</h2>

<ul>
  <li>
    <p>1순위 추천: <strong>노하우</strong> — 가장 직관적이고 짧음</p>
  </li>
  <li>
    <p>대안: <strong>지식창고</strong> , <strong>메모모음</strong> , <strong>가이드북</strong><br />
→ 아래 구조에서는 <code class="language-plaintext highlighter-rouge">30_Areas/kb</code>를 <strong><code class="language-plaintext highlighter-rouge">30_Areas/노하우</code></strong>로 바꿔서 표기할게.</p>
  </li>
</ul>

<hr />

<h2 id="최종-폴더-구조-설명--예시-하위-구조-포함">최종 폴더 구조 (설명 + 예시 하위 구조 포함)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/                                - 1인 개발용 작업 루트(모든 업무의 최고 루트)
  00_Inbox/                          - 급히 던져두는 임시함(매일/주 1회 비우기)
  10_Today/                          - 오늘 집중 작업(WIP) 임시 거점(끝나면 제자리로 이동)

  20_Projects/                       - 툴(파이썬 패키지) 개발 공간(코드 수명 중심)
    PRJ-YYYY-NNN_name/               - 개별 프로젝트(예: PRJ-2025-001_sample_app)
      src/&lt;package_name&gt;/            - 패키지 소스(예: sample_app/)
      tests/                         - pytest 테스트 케이스
      scripts/                       - install/run/build/lint/test 스크립트(.sh/.ps1)
      examples/                      - 배포용 예제(최소 실행 가능 샘플)
        data/                        - 공개 가능한 소형 샘플 데이터
        scripts/                     - run_*.py 예제 스크립트
        docs/                        - 예제 설명·기대 출력
      issues/                        - 버그/개선 이슈 노트(예: BUG-2025-001/)
      docs/                          - 설계 문서/ADR/가이드
      .devcontainer/                 - 컨테이너 개발환경(devcontainer.json 등)
      pyproject.toml                 - 메타/의존성/엔트리포인트(PEP 621)
      .gitignore, .editorconfig, README.md - 개발 편의·개요

  25_Jobs/                           - 툴을 사용해 만드는 “산출물 작업 단위”(프로세스 중심)
    JOB-YYYY-NNN_name/               - 일반 산출 Job(입력→설정→실행→산출)
      01_Brief/                      - 요구사항/수락 기준/마감 명시
      02_Input/
        raw/                         - 원천 데이터(읽기 전용 보관)
      03_Config/                     - 파라미터(yml/json), 실행 설정
      04_Run/                        - run.sh|ps1, run.py, 실행 로그
      05_Output/                     - 중간/최종 산출물(작업 영역)
      06_Export/                     - 전달본(최종 산출물)
      90_Archive/                    - 완료 후 장기 보관
    BUG-YYYY-NNN_name/               - 배포 버그 재현/증거/수정 검증 Job
      01_Report/                     - 제보 내용·환경·기대/실제 기록
      02_Repro/input/                - 재현에 필요한 입력 샘플
      03_Config/                     - 재현 파라미터·플래그
      04_Run/                        - repro.py + 스크립트, repro_log.txt
      05_Evidence/logs/              - 콘솔/크래시 로그·스크린샷·체크섬
      06_FixValidation/              - 패치 검증 시나리오/결과
    EX-YYYY-NNN_name/                - “툴 예제”를 패키징·배포하기 위한 Job(선택)
    SMOKE-YYYY-NNN_tool/             - 새 툴 설치 후 스모크/feasibility 테스트
      01_Brief/                      - 성공 기준(시간·종료코드·출력) 정의
      03_Config/                     - commands.txt: 검증 명령 목록
      04_Run/                        - smoke.sh|ps1로 일괄 실행(로그 남김)
      06_Export/                     - 결과 요약(result.txt 등)

  30_Areas/                          - 지속 업무(장기 유지되는 영역)
    worklog/YYYY/YY-MM/날짜.md       - 일일/주간 작업 로그(5줄 요약 권장)
    environments/                    - 공통 환경 메모/전략(예: Python 버전 정책)
    노하우/                          - Knowledge Base(축적형 지식, ‘kb’ 대체)
      팁/                             - 단문 팁(예: python.md, regex.md)
      요약표/                         - 한 장짜리 치트시트
      가이드/                         - 절차형 How-to(설치/배포/디버깅 절차)

  31_Labs/                           - 실험실(짧은 테스트/프로토타입; 재현 불필수)
    jupyter/                         - 스크래치 노트북(예: regex_scratch.ipynb)

  40_Resources/                      - 참고 자료(교육/레퍼런스/설정/매뉴얼)
    edu/                             - 교육·논문·튜토리얼
      courses/                       - 강의·코스 자료(슬라이드/노트)
      tutorials/                     - 튜토리얼 모음(링크/코드)
      papers/                        - 논문 관리(읽기→메모→요약 흐름)
        to_read/                     - 읽을 논문 PDF
        reading_notes/               - 메모(YYYY-MM-DD_제목.md, TEMPLATE.md 포함)
        summaries/                   - 1~2페이지 요약본
    reference/                       - “골든” 공용 설정(공유·문서화 대상)
      configs/                       - 표준 설정 모음(프로젝트에서 재사용)
        vscode/ ruff/ pytest/ pyinstaller/ pyside6/ jupyter/ - 도구별 샘플
    personal/                        - 개인 설정(내 PC/취향/비공개)
      configs/
        os/{mac,win,linux}/          - OS별 설정(예: 키보드/언어)
        shell/{bash,zsh,powershell}/ - 쉘 프로필(.zshrc/.bashrc 등)
        editors/vscode/              - settings.user.json, keybindings.user.json
        git/                         - .gitconfig.local 등
        python/                      - pip.conf, poetry.toml, pypirc
        tools/                       - 각종 도구 개인 프리셋
        secrets/README.md            - (실제 비밀은 두지 말고 안내만)
        .gitignore                   - *.local, secrets/*, *.pem 등 광범위 차단
    manuals/                         - 매뉴얼/가이드(PDF/HTML/MD)
      &lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/  - 벤더/제품/버전별 정리

  50_Snippets/                       - 재사용 코드·문구 조각
    sql/ text/ bash/                 - 카테고리별 스니펫

  60_Assets/                         - 로고/폰트/템플릿·브랜딩 리소스

  70_Exports/                        - 여러 Job의 “최종 전달본” 뷰(모아보기; 선택)

  75_Releases/                       - 유저 배포 전용 중앙 보관소(버전별)
    &lt;project_slug&gt;/                  - 예: sample-app
      vX.Y.Z/                        - 특정 버전 릴리스
        installers/                  - .exe/.msi/.pkg/.dmg 등 설치 프로그램
        wheels/                      - Python wheel(s)
        portable/                    - 포터블/압축 패키지
        docs/                        - README/설치 가이드/FAQ
        licenses/                    - LICENSE/ThirdPartyNotices.txt
        checksums/                   - *.sha256(무결성 검증용)
        ReleaseNotes.md              - 릴리스 노트(변경 사항)
      latest/                        - 최신 버전 포인터(심볼릭 링크/복사)
    catalog.json                     - (선택) 버전·파일 인덱스

  80_Tools/                          - 툴 설치/포터블/자동화 스크립트
    installers/                      - 오프라인 설치 파일 + install_notes.md
    bin/                             - 포터블 실행 파일(로컬 PATH로 연결 가능)
    scripts/                         - 설치·부트스트랩·유틸 스크립트
    devcontainer/                    - 개발 컨테이너 도구(공유 템플릿)

  85_Environments/                   - 개발 환경 예시(고정·재현 목적)
    conda/environment.yml            - conda 환경 정의
    venv/README.md                   - 표준 venv 사용 가이드
    docker/Dockerfile                - 개발 컨테이너 베이스 이미지

  99_Archive/                        - 완료 Project/Job/자료 장기 보관(읽기 전용)
</code></pre></div></div>

<hr />

<h3 id="네이밍운용-규칙요약">네이밍·운용 규칙(요약)</h3>

<ul>
  <li>
    <p><strong>프로젝트 폴더</strong> : <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_짧은이름</code> (예: <code class="language-plaintext highlighter-rouge">PRJ-2025-012_GUI툴</code>)</p>
  </li>
  <li>
    <p><strong>Job 폴더</strong> : <code class="language-plaintext highlighter-rouge">JOB/BUG/EX/SMOKE-연도-번호_이름</code></p>
  </li>
  <li>
    <p><strong>파일명</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code> (최종본 대신 버전 넘김)</p>
  </li>
  <li>
    <p><strong>깊이 제한</strong> : 최대 3단(찾기/권한/동기화 이슈 최소화)</p>
  </li>
  <li>
    <p><strong>설정 레이어링</strong> : <code class="language-plaintext highlighter-rouge">reference/configs</code>(골든) + <code class="language-plaintext highlighter-rouge">personal/configs</code>(개인 오버라이드)</p>
  </li>
  <li>
    <p><strong>Labs ↔ SMOKE 경계</strong> : 5분/50줄 규칙—짧은 실험은 <code class="language-plaintext highlighter-rouge">31_Labs</code>, 재현·증빙 필요 시 <code class="language-plaintext highlighter-rouge">SMOKE Job</code>으로 승격</p>
  </li>
</ul>

<p>필요하면 위 구조에서 <strong>노하우 하위 폴더 이름</strong>(예: <code class="language-plaintext highlighter-rouge">팁</code>→<code class="language-plaintext highlighter-rouge">Tip</code>, <code class="language-plaintext highlighter-rouge">요약표</code>→<code class="language-plaintext highlighter-rouge">Cheatsheets</code>)을 영문으로 바꾼 변형판도 같이 정리해 줄게.</p>

<p class="chat--user">

응 영문으로 바꿔줘. 그리고 10_Today는 어떻게 쓰는거야? 내가 작업하는 것을 mv로 여기로 가져와?

</p>

<p>좋아! 요청대로 <strong>한국어 폴더명 → 영어</strong> 로 바꾸고, <strong><code class="language-plaintext highlighter-rouge">10_Today</code>의 실제 운용</strong>도 단계별로 정리해줄게.</p>

<hr />

<h1 id="1-영어로-바꾼-최종-폴더-구조-설명--예시-하위">1) 영어로 바꾼 최종 폴더 구조 (설명 + 예시 하위)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/                                - Solo dev workspace root
  00_Inbox/                          - Quick dump inbox (clear daily/weekly)
  10_Today/                          - Today's focus staging area (WIP dashboard)

  20_Projects/                       - Tool (Python package) development (code lifecycle)
    PRJ-YYYY-NNN_name/               - One project/package (e.g., PRJ-2025-001_sample_app)
      src/&lt;package_name&gt;/            - Package source (e.g., sample_app/)
      tests/                         - Pytest cases
      scripts/                       - install/run/build/lint/test (.sh/.ps1)
      examples/                      - Minimal runnable examples for users
        data/                        - Small public/sample datasets
        scripts/                     - run_*.py example scripts
        docs/                        - Example docs &amp; expected outputs
      issues/                        - Bug/feature notes (e.g., BUG-2025-001/)
      docs/                          - Design docs/ADR/guides
      .devcontainer/                 - Dev container config
      pyproject.toml                 - Metadata/deps/entry points (PEP 621)
      .gitignore, .editorconfig, README.md

  25_Jobs/                           - Real deliverable runs (process lifecycle)
    JOB-YYYY-NNN_name/               - General job (input → config → run → outputs)
      01_Brief/                      - Requirements/acceptance criteria/deadline
      02_Input/
        raw/                         - Source data (read-only)
      03_Config/                     - Params (yml/json) &amp; run settings
      04_Run/                        - run.sh|ps1, run.py, logs
      05_Output/                     - Intermediate/final (working area)
      06_Export/                     - Final deliverables for hand-off
      90_Archive/                    - Long-term storage after completion
    BUG-YYYY-NNN_name/               - Distributed-binary bug repro &amp; fix validation
      01_Report/                     - Report/env/expected vs actual
      02_Repro/input/                - Minimal repro inputs
      03_Config/                     - Repro flags/params
      04_Run/                        - repro.py + scripts, repro_log.txt
      05_Evidence/logs/              - Console/crash logs, screenshots, checksums
      06_FixValidation/              - Post-fix validation scenarios
    EX-YYYY-NNN_name/                - Packaged examples job (optional)
    SMOKE-YYYY-NNN_tool/             - New tool smoke/feasibility tests
      01_Brief/                      - Pass criteria (time/exit-code/output)
      03_Config/                     - commands.txt (test commands)
      04_Run/                        - smoke.sh|ps1 (batch run, logs)
      06_Export/                     - Result summary (result.txt)

  30_Areas/                          - Ongoing areas (long-lived)
    worklog/YYYY/YY-MM/DATE.md       - Daily/weekly 5-line logs
    environments/                    - Common env strategy (e.g., Python policy)
    knowledge_base/                  - Accumulated knowledge (was 'kb/노하우')
      tips/                          - Short tips (e.g., python.md, regex.md)
      cheatsheets/                   - One-pagers
      howtos/                        - Step-by-step guides (install/release/debug)

  31_Labs/                           - Scratch lab (quick experiments; non-repro)
    jupyter/                         - Scratch notebooks (e.g., regex_scratch.ipynb)

  40_Resources/                      - References (education/configs/manuals)
    edu/                             - Courses/tutorials/papers
      courses/                       - Course slides/notes
      tutorials/                     - Tutorial links &amp; code
      papers/                        - Paper flow (to_read → notes → summaries)
        to_read/                     - PDFs queued to read
        reading_notes/               - Notes (YYYY-MM-DD_Title.md, TEMPLATE.md)
        summaries/                   - 1–2 page summaries
    reference/                       - “Golden” shared configs (documented, reusable)
      configs/                       - Standard configs used across projects
        vscode/ ruff/ pytest/ pyinstaller/ pyside6/ jupyter/
    personal/                        - Private/personal configs (override layer)
      configs/
        os/{mac,win,linux}/          - OS-level settings
        shell/{bash,zsh,powershell}/ - Shell profiles
        editors/vscode/              - settings.user.json, keybindings.user.json
        git/                         - .gitconfig.local, etc.
        python/                      - pip.conf, poetry.toml, pypirc
        tools/                       - Personal presets per tool
        secrets/README.md            - (Pointers only; no real secrets)
        .gitignore                   - Broad ignore (e.g., *.local, secrets/*, *.pem)

    manuals/                         - Product manuals (PDF/HTML/MD)
      &lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/  - Vendor/product/version tree

  50_Snippets/                       - Reusable snippets
    sql/ text/ bash/

  60_Assets/                         - Logos/fonts/templates &amp; brand assets

  70_Exports/                        - Collected final deliverables (across jobs; optional)

  75_Releases/                       - Distribution hub for users (versioned)
    &lt;project_slug&gt;/
      vX.Y.Z/
        installers/                  - .exe/.msi/.pkg/.dmg
        wheels/                      - Python wheels
        portable/                    - Portable/zip packages
        docs/                        - README/install guide/FAQ
        licenses/                    - LICENSE/ThirdParty notices
        checksums/                   - *.sha256 (integrity)
        ReleaseNotes.md              - Changelog per release
      latest/                        - Pointer to current version
    catalog.json                     - (Optional) index of versions/files

  80_Tools/                          - Installers/portable/tools automation
    installers/                      - Offline installers + install_notes.md
    bin/                             - Portable binaries (optional PATH)
    scripts/                         - Bootstrap/utility scripts
    devcontainer/                    - Dev container tooling

  85_Environments/                   - Reproducible dev env samples
    conda/environment.yml
    venv/README.md
    docker/Dockerfile

  99_Archive/                        - Completed projects/jobs/resources (read-only)
</code></pre></div></div>

<hr />

<h1 id="2-10_today는-어떻게-쓰나-step-by-step-운용법">2) <code class="language-plaintext highlighter-rouge">10_Today</code>는 어떻게 쓰나? (step-by-step 운용법)</h1>

<h3 id="결론">결론</h3>

<ul>
  <li>
    <p><strong>정답은 “여기로 ‘이동(mv)’해서 작업하지 않는다.”</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">10_Today</code>는 <strong>대시보드/런치패드</strong> 야. <strong>원본은 항상 제자리</strong>(Projects/Jobs/Resources)에 두고, Today에는 <strong>링크/체크리스트/임시 메모</strong> 만 둬.</p>
  </li>
</ul>

<h3 id="추천-방식-3가지">추천 방식 3가지</h3>

<p><strong>A) 링크 모드(권장)</strong> — 원본은 제자리, Today엔 <strong>바로가기(심볼릭 링크/바로가기 파일)</strong></p>

<ul>
  <li>macOS/Linux:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Work/10_Today
<span class="nb">ln</span> <span class="nt">-s</span> ../20_Projects/PRJ-2025-001_sample_app/README.md README.today.md
<span class="nb">ln</span> <span class="nt">-s</span> ../25_Jobs/JOB-2025-010_report/04_Run/run.sh job_run.sh
</code></pre></div>    </div>
  </li>
  <li>Windows (PowerShell; 관리자/개발자 모드 권장):
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">Work\10_Today</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">README.today.md</span><span class="w"> </span><span class="o">..</span><span class="nx">\20_Projects\PRJ-2025-001_sample_app\README.md</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">job_run.ps1</span><span class="w"> </span><span class="o">..</span><span class="nx">\25_Jobs\JOB-2025-010_report\04_Run\run.ps1</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>장점: 경로 일관성, 중복/충돌 없음.</li>
</ul>

<p><strong>B) 인덱스 모드(가볍게)</strong> — Today에는 <code class="language-plaintext highlighter-rouge">today.md</code>만 두고 <strong>작업 링크</strong> 를 모음</p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># 2025-08-26</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Run job</span><span class="p">](</span><span class="sx">../25_Jobs/JOB-2025-010_report/04_Run/run.sh</span><span class="p">)</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Spec</span><span class="p">](</span><span class="sx">../20_Projects/PRJ-2025-001_sample_app/docs/spec.md</span><span class="p">)</span>
<span class="p">-</span> Notes: ...
</code></pre></div></div>

<p><strong>C) 스테이징 모드(예외적)</strong> — 아주 잠깐 필요한 <strong>임시 파일</strong> 만 복사해서 사용하고, <strong>EOD(End Of Day)</strong>에 원위치 이동/삭제</p>

<ul>
  <li>규칙: 코드 리포/입력 데이터의 <strong>정본은 절대 이동 금지</strong>. 혼선/충돌 위험 큼.</li>
</ul>

<h3 id="하루-루틴10_today-중심">하루 루틴(10_Today 중심)</h3>

<ol>
  <li>
    <p><strong>아침 5분</strong> : <code class="language-plaintext highlighter-rouge">10_Today/today.md</code> 업데이트(Top 3, 주요 링크, 간단 체크리스트).</p>
  </li>
  <li>
    <p><strong>작업 중</strong> : 링크/노트를 Today에 추가. 실제 파일 편집은 <strong>원래 폴더</strong> 에서.</p>
  </li>
  <li>
    <p><strong>업무 종료 전 5분</strong> :</p>

    <ul>
      <li>
        <p>PR/커밋/아카이브는 본 위치에서 마무리</p>
      </li>
      <li>
        <p>Today의 임시 파일 삭제, <code class="language-plaintext highlighter-rouge">today.md</code>에 결과 요약 3줄</p>
      </li>
      <li>
        <p>남길 내용은 <code class="language-plaintext highlighter-rouge">30_Areas/knowledge_base</code>나 해당 Project/Job의 README로 <strong>승격</strong>.</p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="do--dont">Do / Don’t</h3>

<ul>
  <li>
    <p><strong>Do</strong> : 링크/노트/짧은 To-Do, 오늘만 쓸 임시 스크립트</p>
  </li>
  <li>
    <p><strong>Don’t</strong> : 장기 보관, 깊은 하위 폴더, 정본 파일 이동</p>
  </li>
</ul>

<hr />

<p>필요하면 <code class="language-plaintext highlighter-rouge">10_Today/today.md</code> 템플릿이나 <strong>링크 생성/정리 자동화 스크립트</strong>(오늘 할 일 → 링크 묶음 생성)를 만들어줄게.</p>

<p class="chat--user">

그러면 PRJ 폴더 채로 링크하거나 하진 마?

</p>

<p>짧은 답: <strong>웬만하면 PRJ 폴더 “통째로” Today에 링크하지 않는 걸 추천</strong> 해.<br />
대신 “핵심 핸들(README, run 스크립트, 현재 작업 파일/노트, Export 폴더)”만 걸어두는 게 안전하고 깔끔해.</p>

<hr />

<h2 id="왜-통째-링크를-비추하나-step-by-step">왜 통째 링크를 비추하나 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>혼선 위험</strong> : Today에서 열어놓고 작업하다가 “여기가 진짜 루트”처럼 느껴져서 경로가 꼬이거나 불필요한 새 파일이 Today 쪽에 생길 수 있어.</p>
  </li>
  <li>
    <p><strong>도구/인덱싱 문제</strong> : IDE, 검색 인덱서, 백업 툴이 <strong>원본+링크를 중복 스캔</strong> 해서 속도 저하/중복 결과가 나올 수 있어.</p>
  </li>
  <li>
    <p><strong>대청소 사고 방지</strong> : Today는 매일/주기적으로 비우는 공간인데, 폴더 통째 링크는 <strong>삭제/이동 실수</strong> 의 표면적을 넓혀. (링크만 지워도 되지만 헷갈리기 쉬움)</p>
  </li>
  <li>
    <p><strong>불필요한 깊이</strong> : Today는 “대시보드”라서 <strong>얕고 가벼워야</strong> 해. 통째 링크는 Today를 다시 트리로 만들어 버림.</p>
  </li>
</ol>

<hr />

<h2 id="그러면-어떻게-권장-패턴">그러면 어떻게? (권장 패턴)</h2>

<h3 id="1-핵심-핸들-링크만-둔다">1) “핵심 핸들” 링크만 둔다</h3>

<ul>
  <li>
    <p>프로젝트당 3~5개 정도:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">README.md</code> (프로젝트 개요/체크리스트)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">scripts/run.sh</code> 또는 <code class="language-plaintext highlighter-rouge">04_Run/run.sh</code> (자주 돌리는 엔트리)</p>
      </li>
      <li>
        <p>오늘 편집할 문서 1개 (예: <code class="language-plaintext highlighter-rouge">docs/spec.md</code>)</p>
      </li>
      <li>
        <p>산출 확인용 <code class="language-plaintext highlighter-rouge">06_Export/</code> 폴더 (있으면)</p>
      </li>
    </ul>
  </li>
  <li>macOS/Linux
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Work/10_Today
<span class="nb">ln</span> <span class="nt">-s</span> ../20_Projects/PRJ-2025-001_sample_app/README.md PRJ1_README.md
<span class="nb">ln</span> <span class="nt">-s</span> ../20_Projects/PRJ-2025-001_sample_app/scripts/run.sh PRJ1_run.sh
<span class="nb">ln</span> <span class="nt">-s</span> ../25_Jobs/JOB-2025-010_report/04_Run/run.sh JOB10_run.sh
<span class="nb">ln</span> <span class="nt">-s</span> ../25_Jobs/JOB-2025-010_report/06_Export JOB10_Export
</code></pre></div>    </div>
  </li>
  <li>Windows (PowerShell, 관리자 권장)
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">Work\10_Today</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">PRJ1_README.md</span><span class="w"> </span><span class="o">..</span><span class="nx">\20_Projects\PRJ-2025-001_sample_app\README.md</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">PRJ1_run.ps1</span><span class="w"> </span><span class="o">..</span><span class="nx">\20_Projects\PRJ-2025-001_sample_app\scripts\run.ps1</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="nx">JOB10_Export</span><span class="w"> </span><span class="o">..</span><span class="nx">\25_Jobs\JOB-2025-010_report\06_Export</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-인덱스-노트-1장만-두고-링크-모음">2) 인덱스 노트 1장만 두고 링크 모음</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">10_Today/today.md</code>에 그날 핸들 링크만 나열:
```md
    <h1 id="2025-08-26">2025-08-26</h1>
    <ul>
      <li><a href="../20_Projects/PRJ-2025-001_sample_app/README.md">PRJ1 README</a></li>
      <li><a href="../25_Jobs/JOB-2025-010_report/04_Run/run.sh">Run JOB10</a></li>
      <li>Notes: …
```</li>
    </ul>
  </li>
</ul>

<h3 id="3-예외적으로-폴더-링크가-꼭-필요하다면">3) 예외적으로 폴더 링크가 꼭 필요하다면</h3>

<ul>
  <li>
    <p><strong>일시적으로만</strong> 쓰고 EOD에 정리.</p>
  </li>
  <li>
    <p>OS별 권장:</p>

    <ul>
      <li>
        <p>macOS: Finder <strong>Alias</strong>(자동 추적에 강함) 또는 <code class="language-plaintext highlighter-rouge">ln -s</code>(CLI 친화)</p>
      </li>
      <li>
        <p>Windows: <code class="language-plaintext highlighter-rouge">mklink /D</code>(디렉터리 심볼릭 링크) 또는 <strong>.lnk 바로가기</strong>(GUI 용이)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>주의</strong> : VSCode 등 일부 도구는 <strong>심볼릭 루트로 연 프로젝트</strong> 에서 경로/디버깅이 살짝 헷갈릴 수 있으니, 가능하면 <strong>원본 경로를 워크스페이스 루트</strong> 로 여는 걸 추천.</p>
  </li>
</ul>

<hr />

<h2 id="today-운영-미니-규칙">Today 운영 미니 규칙</h2>

<ul>
  <li>
    <p><strong>5분/3핸들 룰</strong> : 아침에 3개 내외 핸들만 걸고, 퇴근 전 정리.</p>
  </li>
  <li>
    <p><strong>정본 불가침</strong> : 코드/데이터의 <strong>정본은 항상 원래 위치</strong>(Projects/Jobs/Resources). Today에는 링크·체크리스트·임시 메모만.</p>
  </li>
  <li>
    <p><strong>주 1회 리셋</strong> : 쓰지 않는 링크/임시 파일 제거.</p>
  </li>
</ul>

<hr />

<h2 id="요약">요약</h2>

<ul>
  <li>
    <p><strong>통째 링크?</strong> 기본은 <strong>No</strong>.</p>
  </li>
  <li>
    <p><strong>대안</strong> : “핵심 핸들”만 Today에 링크하거나, <code class="language-plaintext highlighter-rouge">today.md</code>로 링크 인덱스 관리.</p>
  </li>
  <li>
    <p><strong>예외</strong> : 정말 필요하면 일시적으로 폴더 링크를 쓰되, EOD에 반드시 정리하고 원본 루트로 작업 여는 습관 유지.</p>
  </li>
</ul>

<p class="chat--user">

근데 그럴거면 링크 만드는게 더 일일거 같은데. md에 저장해봐야 주로 console에서 작업을 하는데 별 편의적으로는 도움이 안될거 같고 그냥 메모용 정도로 쓰는건가

</p>

<p>맞아—링크 만들고 md 편집하는 게 오히려 일이면 안 쓰게 돼요. 그럴 땐 <strong>콘솔 중심</strong> 으로 <code class="language-plaintext highlighter-rouge">10_Today</code>를 “대시보드 명령팔레트”로 쓰면 딱 좋아요. 링크/MD 없이, <strong>단 하나의 스크립트 + 짧은 목록 파일</strong> 로 오늘 할 일을 실행하게요.</p>

<p>아래 중 하나(또는 둘 다)로 가자:</p>

<hr />

<h1 id="옵션-a-today-단일-스크립트--간단-목록-파일-가장-추천">옵션 A) <code class="language-plaintext highlighter-rouge">today</code> 단일 스크립트 + 간단 목록 파일 (가장 추천)</h1>

<h2 id="1-목록-파일편집만-하면-됨">1) 목록 파일(편집만 하면 됨)</h2>

<p><code class="language-plaintext highlighter-rouge">Work/10_Today/shortcuts.list</code> (형식: <code class="language-plaintext highlighter-rouge">라벨 | 경로(Work 기준) | 명령</code>)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 예시
Run PRJ tests          | 20_Projects/PRJ-2025-001_sample_app        | ./scripts/test.sh
Build GUI              | 20_Projects/PRJ-2025-001_sample_app        | ./scripts/build_gui.sh
Re-run sample JOB      | 25_Jobs/JOB-2025-001_sample_output/04_Run  | ./run.sh
Open JOB export        | 25_Jobs/JOB-2025-001_sample_output/06_Export | ls -al
</code></pre></div></div>

<h2 id="2-bashzsh용-today-의존성-없음-select-메뉴">2) Bash/Zsh용 <code class="language-plaintext highlighter-rouge">today</code> (의존성 없음: <code class="language-plaintext highlighter-rouge">select</code> 메뉴)</h2>

<p><code class="language-plaintext highlighter-rouge">Work/10_Today/today</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">LIST</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/10_Today/shortcuts.list"</span>
<span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"No shortcuts.list"</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>

<span class="nb">mapfile</span> <span class="nt">-t</span> ITEMS &lt; &lt;<span class="o">(</span><span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'^\s*#'</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s1">'/^\s*$/d'</span><span class="o">)</span>
<span class="nv">PS3</span><span class="o">=</span><span class="s2">"today&gt; "</span>
<span class="k">select </span>CH <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ITEMS</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"Edit shortcuts"</span><span class="p">;</span> <span class="k">do
  if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$REPLY</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="k">$((${#</span><span class="nv">ITEMS</span><span class="p">[@]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span><span class="p">;</span> <span class="k">continue</span><span class="p">;</span> <span class="k">fi
  </span><span class="nv">IFS</span><span class="o">=</span><span class="s1">'|'</span> <span class="nb">read</span> <span class="nt">-r</span> LABEL REL CMD <span class="o">&lt;&lt;&lt;</span><span class="s2">"</span><span class="nv">$CH</span><span class="s2">"</span>
  <span class="nv">DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$REL</span><span class="s2">"</span> | xargs<span class="si">)</span><span class="s2">"</span>
  <span class="o">(</span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$DIR</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="s2">"</span><span class="nv">$CMD</span><span class="s2">"</span><span class="o">)</span>
  <span class="nb">break
</span><span class="k">done</span>
</code></pre></div></div>

<p>실행권한: <code class="language-plaintext highlighter-rouge">chmod +x Work/10_Today/today</code><br />
사용: <code class="language-plaintext highlighter-rouge">~/Work/10_Today/today</code></p>

<h3 id="빠른-추가용-pin-함수콘솔에서-1줄-등록">빠른 추가용 <code class="language-plaintext highlighter-rouge">pin</code> 함수(콘솔에서 1줄 등록)</h3>

<p><code class="language-plaintext highlighter-rouge">~/.bashrc</code> 또는 <code class="language-plaintext highlighter-rouge">~/.zshrc</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>
pin<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">label</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="p">;</span> <span class="nb">shift</span> <span class="o">||</span> <span class="nb">true
  local </span><span class="nv">cmd</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="p">*</span><span class="k">:-</span><span class="nv">$SHELL</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">local </span><span class="nv">rel</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">PWD</span><span class="p">#</span><span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/"</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$label</span><span class="s2"> | </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$cmd</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/10_Today/shortcuts.list"</span>
  <span class="nb">echo</span> <span class="s2">"Pinned: </span><span class="nv">$label</span><span class="s2"> -&gt; </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$cmd</span><span class="s2">"</span>
<span class="o">}</span>
</code></pre></div></div>

<p>예) 현재 디렉터리에서 자주 돌리는 명령을 고정:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pin "This job run" "./run.sh"
pin "Open spec" "${EDITOR:-vi} docs/spec.md"
</code></pre></div></div>

<h2 id="3-powershell용-todayps1-윈도우">3) PowerShell용 <code class="language-plaintext highlighter-rouge">today.ps1</code> (윈도우)</h2>

<p><code class="language-plaintext highlighter-rouge">Work\10_Today\today.ps1</code>:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$L</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$L</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"No shortcuts.list"</span><span class="p">;</span><span class="w"> </span><span class="kr">exit</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="nv">$items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Content</span><span class="w"> </span><span class="nv">$L</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="o">-notmatch</span><span class="w"> </span><span class="s1">'^\s*$|^\s*#'</span><span class="p">}</span><span class="w">
</span><span class="kr">for</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="nv">$items</span><span class="o">.</span><span class="nf">Count</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"{0}. {1}"</span><span class="w"> </span><span class="nt">-f</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="nv">$items</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$choice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"today&gt;"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$choice</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'^\d+$'</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$items</span><span class="p">[</span><span class="nv">$choice</span><span class="nt">-1</span><span class="p">]</span><span class="w">
  </span><span class="nv">$parts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$line</span><span class="w"> </span><span class="o">-split</span><span class="w"> </span><span class="s1">'\s*\|\s*'</span><span class="w">
  </span><span class="n">Set-Location</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="w">
  </span><span class="n">Invoke-Expression</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>핀 기능</strong> :</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">pin</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="kr">param</span><span class="p">([</span><span class="n">string</span><span class="p">]</span><span class="nv">$Label</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$Cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="p">)</span><span class="w">
  </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="nv">$rel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Resolve-Path</span><span class="w"> </span><span class="o">.</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\"</span><span class="p">,</span><span class="s2">""</span><span class="p">)</span><span class="w">
  </span><span class="nx">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$Cmd</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$Cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$Host</span><span class="o">.</span><span class="nf">UI</span><span class="o">.</span><span class="nf">RawUI</span><span class="o">.</span><span class="nf">WindowTitle</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="s2">"</span><span class="nv">$Label</span><span class="s2"> | </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$Cmd</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>요약: 링크·md 없이 <strong>목록 파일에 라인만 추가</strong> → <code class="language-plaintext highlighter-rouge">today</code>로 선택 실행.</p>
</blockquote>

<hr />

<h1 id="옵션-b-아예-함수별칭만-쓰기-초간단">옵션 B) 아예 “함수/별칭”만 쓰기 (초간단)</h1>

<h2 id="bashzsh">Bash/Zsh</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>
p<span class="o">()</span> <span class="o">{</span> <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/20_Projects"</span> <span class="o">&amp;&amp;</span> <span class="k">select </span>d <span class="k">in </span>PRJ-<span class="k">*</span><span class="p">;</span> <span class="k">do </span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span><span class="p">;</span> <span class="nb">break</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span> <span class="o">}</span>     <span class="c"># 프로젝트 이동</span>
j<span class="o">()</span> <span class="o">{</span> <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs"</span> <span class="o">&amp;&amp;</span> <span class="k">select </span>d <span class="k">in</span> <span class="o">{</span>JOB,BUG,EX,SMOKE<span class="o">}</span>-<span class="k">*</span> 2&gt;/dev/null<span class="p">;</span> <span class="k">do </span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span><span class="p">;</span> <span class="nb">break</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span> <span class="o">}</span>  <span class="c"># 잡 이동</span>
prun<span class="o">()</span> <span class="o">{</span> <span class="o">(</span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs/</span><span class="nv">$1</span><span class="s2">/04_Run"</span> <span class="o">&amp;&amp;</span> ./run.sh<span class="o">)</span><span class="p">;</span> <span class="o">}</span>  <span class="c"># 사용: prun JOB-2025-001_x</span>
pexport<span class="o">()</span> <span class="o">{</span> <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs/</span><span class="nv">$1</span><span class="s2">/06_Export"</span><span class="p">;</span> <span class="o">}</span>
</code></pre></div></div>

<h2 id="powershell">PowerShell</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Set-Location</span><span class="w"> </span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\20_Projects"</span><span class="p">;</span><span class="w"> </span><span class="nv">$d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nx">PRJ-</span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-GridView</span><span class="w"> </span><span class="nt">-PassThru</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$d</span><span class="p">){</span><span class="w"> </span><span class="n">Set-Location</span><span class="w"> </span><span class="nv">$d</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Set-Location</span><span class="w"> </span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\25_Jobs"</span><span class="p">;</span><span class="w"> </span><span class="nv">$d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nt">-Directory</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'^(JOB|BUG|EX|SMOKE)-'</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-GridView</span><span class="w"> </span><span class="nt">-PassThru</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$d</span><span class="p">){</span><span class="w"> </span><span class="n">Set-Location</span><span class="w"> </span><span class="nv">$d</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">prun</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Push-Location</span><span class="w"> </span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\25_Jobs\</span><span class="nv">$job</span><span class="s2">\04_Run"</span><span class="p">;</span><span class="w"> </span><span class="o">.</span><span class="n">/run.ps1</span><span class="p">;</span><span class="w"> </span><span class="n">Pop-Location</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>완전 심플: <strong>링크도 md도 없음</strong>. 함수로 점프하고 스크립트만 실행.</p>
</blockquote>

<hr />

<h1 id="마무리-가이드-의사결정-규칙">마무리 가이드 (의사결정 규칙)</h1>

<ul>
  <li>
    <p><strong>링크/MD는 굳이 X.</strong> 콘솔 위주면 <code class="language-plaintext highlighter-rouge">today</code>(옵션 A)나 <strong>함수/별칭</strong>(옵션 B)이 가장 빠름.</p>
  </li>
  <li>
    <p><strong>등록은 1줄</strong> : <code class="language-plaintext highlighter-rouge">shortcuts.list</code>에 라인 추가(또는 <code class="language-plaintext highlighter-rouge">pin "라벨" "명령"</code>).</p>
  </li>
  <li>
    <p><strong>정본은 원래 위치</strong> : Today는 “출발점”일 뿐, 코드는 Projects/Jobs에서 실행.</p>
  </li>
  <li>
    <p><strong>주 1회 청소</strong> : 안 쓰는 단축 라인 삭제, 최신 작업만 남기기.</p>
  </li>
</ul>

<p>원하면 위 스크립트들을 네 스타터에 <strong>파일로 반영한 버전</strong> 을 바로 만들어 줄게. 어느 셸(Bash/Zsh/PowerShell) 주력인지만 알려줘!</p>

<p class="chat--user">

Work/10_Today/shortcuts.list 이걸 어떻게 쓰는거야?

</p>

<p>좋아 — <code class="language-plaintext highlighter-rouge">Work/10_Today/shortcuts.list</code>는 <strong>콘솔에서 자주 하는 작업들을 “메뉴처럼” 고르는 목록</strong> 이야.<br />
각 줄마다 <strong>라벨 | (Work 기준) 상대경로 | 실행 명령</strong> 3개를 <code class="language-plaintext highlighter-rouge">|</code> 로 구분해 적어두고, <code class="language-plaintext highlighter-rouge">today</code> 스크립트로 선택 실행해.</p>

<p>아래를 <strong>순서대로</strong> 하면 바로 써진다.</p>

<hr />

<h2 id="0-개념-한-줄">0) 개념 한 줄</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">shortcuts.list</code> = “오늘 쓸 단축키 목록”</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">today</code> = 이 목록을 읽어서 <strong>번호로 고르게 해주는 런처</strong></p>
  </li>
</ul>

<hr />

<h2 id="1-기본-설치-macoslinux">1) 기본 설치 (macOS/Linux)</h2>

<ol>
  <li><strong>환경 변수(Work 루트) 지정</strong></li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>   <span class="c"># Work 폴더가 다른 곳이면 그 경로로 바꿔줘</span>
</code></pre></div></div>

<ol>
  <li><strong>런처 스크립트 저장</strong><br />
<code class="language-plaintext highlighter-rouge">~/Work/10_Today/today</code> 파일을 만들고 아래 내용 붙여넣기:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">LIST</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/10_Today/shortcuts.list"</span>
<span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"No shortcuts.list"</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>

<span class="nb">mapfile</span> <span class="nt">-t</span> ITEMS &lt; &lt;<span class="o">(</span><span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'^\s*#'</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s1">'/^\s*$/d'</span><span class="o">)</span>
<span class="nv">PS3</span><span class="o">=</span><span class="s2">"today&gt; "</span>
<span class="k">select </span>CH <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ITEMS</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"Edit shortcuts"</span><span class="p">;</span> <span class="k">do
  if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$REPLY</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="k">$((${#</span><span class="nv">ITEMS</span><span class="p">[@]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span><span class="p">;</span> <span class="k">continue</span><span class="p">;</span> <span class="k">fi
  </span><span class="nv">IFS</span><span class="o">=</span><span class="s1">'|'</span> <span class="nb">read</span> <span class="nt">-r</span> LABEL REL CMD <span class="o">&lt;&lt;&lt;</span><span class="s2">"</span><span class="nv">$CH</span><span class="s2">"</span>
  <span class="nv">DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$REL</span><span class="s2">"</span> | xargs<span class="si">)</span><span class="s2">"</span>
  <span class="o">(</span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$DIR</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="s2">"</span><span class="nv">$CMD</span><span class="s2">"</span><span class="o">)</span>
  <span class="nb">break
</span><span class="k">done</span>
</code></pre></div></div>

<p>실행 권한:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/Work/10_Today/today
</code></pre></div></div>

<ol>
  <li><strong>목록 파일 만들기</strong><br />
<code class="language-plaintext highlighter-rouge">~/Work/10_Today/shortcuts.list</code>:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Label                | RelativePath(from Work)                       | Command
Run tests              | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/test.sh
Build GUI              | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/build_gui.sh
Re-run sample job      | 25_Jobs/JOB-2025-001_sample_output/04_Run     | ./run.sh
Open job export        | 25_Jobs/JOB-2025-001_sample_output/06_Export  | ls -al
</code></pre></div></div>

<ol>
  <li><strong>실행</strong></li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/Work/10_Today/today
<span class="c"># → 번호 메뉴가 뜨고, 고르면 해당 경로로 cd 후 명령을 실행</span>
</code></pre></div></div>

<blockquote>
  <p>(선택) 편하게 <code class="language-plaintext highlighter-rouge">t</code> 별칭 추가:<br />
 <code class="language-plaintext highlighter-rouge">echo "alias t='$HOME/Work/10_Today/today'" &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</code><br />
 이제 <code class="language-plaintext highlighter-rouge">t</code>만 쳐도 된다.</p>
</blockquote>

<hr />

<h2 id="2-기본-설치-windows--powershell">2) 기본 설치 (Windows / PowerShell)</h2>

<ol>
  <li><strong>환경 변수(Work 루트) 지정</strong></li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li><strong>런처 스크립트 저장</strong><br />
<code class="language-plaintext highlighter-rouge">$HOME\Work\10_Today\today.ps1</code>:</li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$L</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$L</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"No shortcuts.list"</span><span class="p">;</span><span class="w"> </span><span class="kr">exit</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="nv">$items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Content</span><span class="w"> </span><span class="nv">$L</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="o">-notmatch</span><span class="w"> </span><span class="s1">'^\s*$|^\s*#'</span><span class="p">}</span><span class="w">
</span><span class="kr">for</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="nv">$items</span><span class="o">.</span><span class="nf">Count</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"{0}. {1}"</span><span class="w"> </span><span class="nt">-f</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="nv">$items</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$choice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"today&gt;"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$choice</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'^\d+$'</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$items</span><span class="p">[</span><span class="nv">$choice</span><span class="nt">-1</span><span class="p">]</span><span class="w">
  </span><span class="nv">$parts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$line</span><span class="w"> </span><span class="o">-split</span><span class="w"> </span><span class="s1">'\s*\|\s*'</span><span class="w">
  </span><span class="n">Set-Location</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="w">
  </span><span class="n">Invoke-Expression</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>실행 정책 때문에 막히면(관리자 PowerShell에서):<br />
 <code class="language-plaintext highlighter-rouge">Set-ExecutionPolicy -Scope CurrentUser RemoteSigned</code></p>
</blockquote>

<ol>
  <li><strong>목록 파일 만들기</strong><br />
<code class="language-plaintext highlighter-rouge">$HOME\Work\10_Today\shortcuts.list</code> (형식 동일):</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Run tests              | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/test.ps1
Build GUI              | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/build_gui.ps1
Re-run sample job      | 25_Jobs/JOB-2025-001_sample_output/04_Run     | ./run.ps1
Open job export        | 25_Jobs/JOB-2025-001_sample_output/06_Export  | dir
</code></pre></div></div>

<ol>
  <li><strong>실행</strong></li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="bp">$HOME</span><span class="n">\Work\10_Today\today.ps1</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>(선택) <code class="language-plaintext highlighter-rouge">Set-Alias t "$HOME\Work\10_Today\today.ps1"</code> 추가 후 <code class="language-plaintext highlighter-rouge">t</code>로 실행.</p>
</blockquote>

<hr />

<h2 id="3-shortcutslist-작성-규칙-중요-포인트">3) <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 작성 규칙 (중요 포인트)</h2>

<ul>
  <li>
    <p><strong>포맷</strong> : <code class="language-plaintext highlighter-rouge">라벨 | (Work 기준) 상대경로 | 명령</code></p>

    <ul>
      <li>
        <p><strong>라벨</strong> : 메뉴에서 보이는 이름. 자유 텍스트.</p>
      </li>
      <li>
        <p><strong>상대경로</strong> : <code class="language-plaintext highlighter-rouge">Work/</code> 기준. 예: <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../scripts</code></p>
      </li>
      <li>
        <p><strong>명령</strong> : 해당 경로에서 실행할 콘솔 명령. 예: <code class="language-plaintext highlighter-rouge">./run.sh</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>주석/빈 줄</strong> : <code class="language-plaintext highlighter-rouge">#</code> 로 시작하면 무시, 빈 줄도 무시.</p>
  </li>
  <li>
    <p><strong>파이프 기호<code class="language-plaintext highlighter-rouge">|</code> 주의</strong>: 이 파일은 <code class="language-plaintext highlighter-rouge">|</code>로 구분하니, <strong>명령에 파이프가 필요하면</strong></p>

    <ul>
      <li>
        <p>작은 <strong>래퍼 스크립트</strong>(예: <code class="language-plaintext highlighter-rouge">scripts/mycmd.sh</code>)를 만들어 그걸 호출해.</p>
      </li>
      <li>
        <p>예) <code class="language-plaintext highlighter-rouge">scripts/mycmd.sh</code> 안에 <code class="language-plaintext highlighter-rouge">python x.py | grep foo</code> → 목록에는 <code class="language-plaintext highlighter-rouge">./scripts/mycmd.sh</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>상대경로는 Work 기준</strong> : <code class="language-plaintext highlighter-rouge">WORK_DIR</code>(기본 <code class="language-plaintext highlighter-rouge">~/Work</code>)를 바꾸면 자동으로 따라감.</p>
  </li>
  <li>
    <p><strong>환경변수/별칭</strong> : 명령 안에서 <code class="language-plaintext highlighter-rouge">${EDITOR}</code>(bash)나 <code class="language-plaintext highlighter-rouge">$env:EDITOR</code>(PowerShell) 사용 가능.</p>
  </li>
</ul>

<hr />

<h2 id="4-선택-콘솔에서-1줄로-빠르게-등록--pin-함수">4) (선택) 콘솔에서 1줄로 빠르게 등록 — <code class="language-plaintext highlighter-rouge">pin</code> 함수</h2>

<h3 id="bashzsh-1">Bash/Zsh</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>
pin<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">label</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="p">;</span> <span class="nb">shift</span> <span class="o">||</span> <span class="nb">true
  local </span><span class="nv">cmd</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="p">*</span><span class="k">:-</span><span class="nv">$SHELL</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">local </span><span class="nv">rel</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">PWD</span><span class="p">#</span><span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/"</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$label</span><span class="s2"> | </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$cmd</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/10_Today/shortcuts.list"</span>
  <span class="nb">echo</span> <span class="s2">"Pinned: </span><span class="nv">$label</span><span class="s2"> -&gt; </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$cmd</span><span class="s2">"</span>
<span class="o">}</span>
<span class="c"># 사용 예시</span>
pin <span class="s2">"Run current job"</span> <span class="s2">"./run.sh"</span>
pin <span class="s2">"Edit spec"</span>      <span class="s1">'${EDITOR:-vi} docs/spec.md'</span>
</code></pre></div></div>

<h3 id="powershell-1">PowerShell</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">pin</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="kr">param</span><span class="p">([</span><span class="n">string</span><span class="p">]</span><span class="nv">$Label</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$Cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="p">)</span><span class="w">
  </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="nv">$rel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Resolve-Path</span><span class="w"> </span><span class="o">.</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\"</span><span class="p">,</span><span class="s2">""</span><span class="p">)</span><span class="w">
  </span><span class="nx">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$Cmd</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$Cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"powershell"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="s2">"</span><span class="nv">$Label</span><span class="s2"> | </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$Cmd</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="c"># 예시</span><span class="w">
</span><span class="n">pin</span><span class="w"> </span><span class="s2">"Run current job"</span><span class="w"> </span><span class="s2">"./run.ps1"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="5-자주-쓰는-실전-예시-복붙">5) 자주 쓰는 실전 예시 (복붙)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Open project README    | 20_Projects/PRJ-2025-001_sample_app           | ${EDITOR:-vi} README.md
Run CLI                | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/run_cli.sh
Build (CLI onefile)    | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/build_cli.sh
Run SMOKE              | 25_Jobs/SMOKE-2025-001_new_tool/04_Run        | ./smoke.sh
Re-run BUG repro       | 25_Jobs/BUG-2025-001_sample_bug/04_Run        | ./repro.sh
Check JOB exports      | 25_Jobs/JOB-2025-001_sample_output/06_Export  | ls -al
Release notes (edit)   | 75_Releases/sample-app/v0.1.0                 | ${EDITOR:-vi} ReleaseNotes.md
</code></pre></div></div>

<hr />

<h2 id="6-문제-해결">6) 문제 해결</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">No shortcuts.list</code> → 경로 확인: <code class="language-plaintext highlighter-rouge">~/Work/10_Today/shortcuts.list</code></p>
  </li>
  <li>
    <p>Permission denied → <code class="language-plaintext highlighter-rouge">chmod +x ~/Work/10_Today/today</code> (bash) / 실행정책 설정(PS)</p>
  </li>
  <li>
    <p>명령에서 파이프가 필요 → <strong>래퍼 스크립트</strong> 로 감싸서 실행</p>
  </li>
  <li>
    <p>다른 곳에 Work가 있을 때 → <code class="language-plaintext highlighter-rouge">export WORK_DIR="/path/to/Work"</code>(bash) / <code class="language-plaintext highlighter-rouge">$env:WORK_DIR="D:\Work"</code>(PS)</p>
  </li>
</ul>

<hr />

<p>요약: <strong><code class="language-plaintext highlighter-rouge">shortcuts.list</code>만 편집</strong>하고 <code class="language-plaintext highlighter-rouge">today</code>를 실행하면, 원하는 작업을 <strong>번호 선택</strong> 으로 바로 돌릴 수 있어. 링크/MD 필요 없다—완전 콘솔 친화 모드!</p>

<p class="chat--user">

tcsh용으로도 하나 만들어줘

</p>

<p>좋지! <strong>tcsh</strong> 에서도 똑같이 “번호 선택 메뉴”로 돌릴 수 있게 런처/핀 스크립트를 만들어 보자. 콘솔만으로 씁니다—링크/MD 불필요.</p>

<hr />

<h1 id="1-tcsh-런처-todaycsh">1) tcsh 런처: <code class="language-plaintext highlighter-rouge">today.csh</code></h1>

<h2 id="설치-macoslinux-tcsh">설치 (macOS/Linux, tcsh)</h2>

<ol>
  <li>Work 루트 환경변수(로그인 시 자동)</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# ~/.cshrc
setenv WORK_DIR "$HOME/Work"
</code></pre></div></div>

<ol>
  <li>런처 스크립트 저장<br />
<code class="language-plaintext highlighter-rouge">$HOME/Work/10_Today/today.csh</code>:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# tcsh launcher for Work/10_Today/shortcuts.list
# Format per line: Label | RelativePath(from Work) | Command

# Resolve Work root
set W = "$HOME/Work"
if ( $?WORK_DIR ) set W = "$WORK_DIR"

set LIST = "$W/10_Today/shortcuts.list"
if ( ! -f "$LIST" ) then
  echo "No shortcuts.list at: $LIST"
  exit 1
endif

# Filter comments/blank lines into a temp file
set TMP = "$W/10_Today/.shortcuts.filtered.$$"
grep -v '^[[:space:]]*#' "$LIST" | sed '/^[[:space:]]*$/d' &gt; "$TMP"
set count = `wc -l &lt; "$TMP"`
if ( "$count" == 0 ) then
  echo "No items in shortcuts.list"
  /bin/rm -f "$TMP"
  exit 0
endif

# Show numbered menu
set i = 1
while ( $i &lt;= $count )
  set line = `sed -n "${i}p" "$TMP"`
  echo "$i. $line"
  @ i++
end
@ edit_idx = $count + 1
echo "$edit_idx. Edit shortcuts"
echo -n "today&gt; "
set choice = $&lt;

if ( "$choice" == "$edit_idx" ) then
  if ( $?EDITOR ) then
    eval "$EDITOR $LIST"
  else
    vi "$LIST"
  endif
  /bin/rm -f "$TMP"
  exit 0
endif

# Validate numeric choice
if ( "$choice" !~ [0-9]* ) then
  echo "Invalid choice"
  /bin/rm -f "$TMP"
  exit 1
endif

# Pick the selected line
set sel = `sed -n "${choice}p" "$TMP"`

# Extract Label | Relative | Command
set label = `echo "$sel" | awk -F '|' '{gsub(/^[ \t]+|[ \t]+$/, "", $1); print $1}'`
set rel   = `echo "$sel" | awk -F '|' '{gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2}'`
set cmd   = `echo "$sel" | awk -F '|' '{sub(/^[ \t]+/, "", $3); print $3}'`

set dir = "$W/$rel"
if ( ! -d "$dir" ) then
  echo "Directory not found: $dir"
  /bin/rm -f "$TMP"
  exit 1
endif

cd "$dir"
# Run command in that dir
eval "$cmd"

# Cleanup
/bin/rm -f "$TMP"
</code></pre></div></div>

<p>실행 권한:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/10_Today/today.csh"</span>
</code></pre></div></div>

<p>(선택) 단축 별칭:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# ~/.cshrc
alias t '$HOME/Work/10_Today/today.csh'
source ~/.cshrc
</code></pre></div></div>

<ol>
  <li><strong>목록 파일</strong> 만들기<br />
<code class="language-plaintext highlighter-rouge">$HOME/Work/10_Today/shortcuts.list</code>:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Label                 | RelativePath(from Work)                      | Command
Run tests               | 20_Projects/PRJ-2025-001_sample_app          | ./scripts/test.sh
Build GUI               | 20_Projects/PRJ-2025-001_sample_app          | ./scripts/build_gui.sh
Re-run sample job       | 25_Jobs/JOB-2025-001_sample_output/04_Run    | ./run.sh
Open job export         | 25_Jobs/JOB-2025-001_sample_output/06_Export | ls -al
</code></pre></div></div>

<p>사용:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

$ ~/Work/10_Today/today.csh
# → 번호 선택 후, 해당 경로로 cd 하고 Command 실행
</code></pre></div></div>

<blockquote>
  <p><strong>파이프(|) 주의</strong> : 이 파일은 <code class="language-plaintext highlighter-rouge">|</code> 구분자를 쓰므로, 명령에 파이프가 필요하면<br />
 작은 래퍼 스크립트(예: <code class="language-plaintext highlighter-rouge">scripts/mycmd.sh</code>)를 만들어 그걸 호출해 주세요.</p>
</blockquote>

<hr />

<h1 id="2-tcsh-핀-유틸-한-줄로-목록에-추가하기">2) tcsh “핀” 유틸: 한 줄로 목록에 추가하기</h1>

<p><code class="language-plaintext highlighter-rouge">$HOME/Work/10_Today/pin.csh</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# Usage: pin.csh "Label" [command]
set W = "$HOME/Work"
if ( $?WORK_DIR ) set W = "$WORK_DIR"
set L = "$W/10_Today/shortcuts.list"

if ( "$#argv" == 0 ) then
  echo 'Usage: pin.csh "Label" [command]'
  exit 1
endif

set label = "$1"
shift
if ( "$#argv" &gt; 0 ) then
  set cmd = "$*"
else
  set cmd = "$SHELL"
endif

# Current dir relative to Work
set rel = `echo "$cwd" | sed "s#^$W/##"`
echo "$label | $rel | $cmd" &gt;&gt; "$L"
echo "Pinned: $label -&gt; $rel | $cmd"
</code></pre></div></div>

<p>권한:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/10_Today/pin.csh"</span>
</code></pre></div></div>

<p>사용 예시:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# 지금 폴더의 run.sh를 핀으로 등록
~/Work/10_Today/pin.csh "Run current job" "./run.sh"

# 스펙 문서 편집을 핀으로 등록(EDITOR가 설정되어 있다면 그걸 사용)
~/Work/10_Today/pin.csh "Edit spec" '${EDITOR} docs/spec.md'
</code></pre></div></div>

<hr />

<h2 id="자주-묻는-요점-정리">자주 묻는 요점 정리</h2>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">shortcuts.list</code> 포맷: **Label</td>
          <td>RelativePath</td>
          <td>Command** (Work 기준 상대경로)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p><strong>편집 키</strong> : 메뉴의 마지막 항목 <strong>“Edit shortcuts”</strong> 선택하면 <code class="language-plaintext highlighter-rouge">$EDITOR</code>(없으면 <code class="language-plaintext highlighter-rouge">vi</code>)로 바로 열림</p>
  </li>
  <li>
    <p><strong>WORK_DIR</strong> 를 옮겼다면: <code class="language-plaintext highlighter-rouge">setenv WORK_DIR "/새/경로/Work"</code> 만 바꾸면 자동으로 따라감</p>
  </li>
  <li>
    <p><strong>문제</strong> : “No shortcuts.list” → 경로 확인, 빈 파일이면 항목 추가</p>
  </li>
  <li><strong>권장</strong> : Today는 “실행 출발점”일 뿐, 정본 코드는 <code class="language-plaintext highlighter-rouge">20_Projects/</code>와 <code class="language-plaintext highlighter-rouge">25_Jobs/</code>에 둡니다</li>
</ul>

<p>필요하면 <code class="language-plaintext highlighter-rouge">today.csh</code>에 <strong>즐겨찾기 고정/검색/필터</strong> 같은 옵션(menu 검색, 번호 다중 실행 등)도 추가해 줄게.</p>

<p class="chat--user">

간단한 스크립트는 어디 모아야할까

</p>

<p>좋은 질문! “간단한 스크립트”는 <strong>쓰임새(범위·수명)</strong>로 나눠서 보관하면 헷갈림이 사라져요. 아래 <strong>결정표</strong> 대로 두면 됩니다. 필요에 따라 폴더 하나(▶ 추가 표시)도 제안했어요.</p>

<hr />

<h2 id="어디에-둘까-결정표">어디에 둘까? (결정표)</h2>

<table>
  <thead>
    <tr>
      <th>상황/목적</th>
      <th>보관 위치</th>
      <th>이유/메모</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>프로젝트 전용 작업</strong> (빌드/테스트/런)</td>
      <td><code class="language-plaintext highlighter-rouge">20_Projects/PRJ-…/scripts/</code></td>
      <td>프로젝트 루트 기준 경로가 고정. 팀/CI도 그대로 사용 가능.</td>
    </tr>
    <tr>
      <td><strong>Job 실행 파이프라인</strong> (입력→설정→실행→산출)</td>
      <td><code class="language-plaintext highlighter-rouge">25_Jobs/&lt;JOB&gt;/04_Run/</code></td>
      <td>재현·증빙 목적. 로그/매니페스트와 같은 맥락에 둠.</td>
    </tr>
    <tr>
      <td><strong>여러 프로젝트에서 재사용하는 범용 스크립트</strong></td>
      <td><code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code></td>
      <td>공용(골든) 도구. <strong>PATH</strong> 에 추가해서 어디서든 호출.</td>
    </tr>
    <tr>
      <td><strong>오늘만 쓰는 임시 래퍼/런처</strong> (콘솔 중심)</td>
      <td>▶ <code class="language-plaintext highlighter-rouge">10_Today/wrappers/</code></td>
      <td><code class="language-plaintext highlighter-rouge">shortcuts.list</code>에서 부르는 작은 래퍼를 모아두는 임시 구역. EOD/주 1회 정리.</td>
    </tr>
    <tr>
      <td><strong>짧은 1~3줄 트릭/반복 명령(코드 조각)</strong></td>
      <td><code class="language-plaintext highlighter-rouge">50_Snippets/bash/</code></td>
      <td>‘실행파일’이 아니라 <strong>참고용 조각</strong>. 나중에 성숙하면 스크립트로 승격.</td>
    </tr>
    <tr>
      <td><strong>실험·프로토타입</strong> (버려도 되는 테스트)</td>
      <td><code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code> 또는 해당 실험 폴더</td>
      <td>아이디어 검증 단계. 유효해지면 상위 위치로 승격.</td>
    </tr>
    <tr>
      <td><strong>개인 셸 함수/별칭</strong> (환경 설정)</td>
      <td><code class="language-plaintext highlighter-rouge">40_Resources/personal/configs/shell/{bash,zsh,tcsh,powershell}/</code></td>
      <td>로그인 시 자동 로딩. 비공유/취향/OS별로 분리.</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>▶ <strong>신규 폴더 제안</strong> : <code class="language-plaintext highlighter-rouge">10_Today/wrappers/</code></p>

  <ul>
    <li>
      <p>예: <code class="language-plaintext highlighter-rouge">today</code>에서 파이프(<code class="language-plaintext highlighter-rouge">|</code>), 복잡한 인자 등이 필요할 때 짧은 래퍼(<code class="language-plaintext highlighter-rouge">*.sh</code>, <code class="language-plaintext highlighter-rouge">*.ps1</code>, <code class="language-plaintext highlighter-rouge">*.csh</code>)를 여기에 두고 <code class="language-plaintext highlighter-rouge">shortcuts.list</code>에서는 그 래퍼만 호출.</p>
    </li>
    <li>
      <p>정리 주기: <strong>하루~일주일</strong>. 재사용 가치가 생기면 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>나 <code class="language-plaintext highlighter-rouge">PRJ-…/scripts/</code>로 <strong>승격</strong>.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h2 id="운용-규칙-간단실전형">운용 규칙 (간단·실전형)</h2>

<ol>
  <li><strong>PATH 설정</strong>(단 한 번)</li>
</ol>

<ul>
  <li>Bash/Zsh/tcsh:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Tools/scripts:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div>    </div>
  </li>
  <li>PowerShell:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\80_Tools\scripts;"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>이렇게 하면 어디서든 <code class="language-plaintext highlighter-rouge">my-tool.sh</code> 같은 공용 스크립트를 바로 실행.</p>
</blockquote>

<ol>
  <li><strong>승격 루트</strong></li>
</ol>

<ul>
  <li><code class="language-plaintext highlighter-rouge">50_Snippets/bash/one-liner.txt</code> → 좋아서 자주 쓰게 됨 →<br />
<code class="language-plaintext highlighter-rouge">10_Today/wrappers/say_hello.sh</code>로 임시 사용 → 여전히 유용 →<br />
<code class="language-plaintext highlighter-rouge">80_Tools/scripts/say_hello.sh</code>로 <strong>승격</strong> + <code class="language-plaintext highlighter-rouge">--help</code>/설명 추가.</li>
</ul>

<ol>
  <li><strong>이름 규칙</strong></li>
</ol>

<ul>
  <li>
    <p><strong>동사-목적</strong> : <code class="language-plaintext highlighter-rouge">build_cli.sh</code>, <code class="language-plaintext highlighter-rouge">release_copy.ps1</code>, <code class="language-plaintext highlighter-rouge">repro_bug.csh</code></p>
  </li>
  <li>
    <p><strong>OS/셸 태그</strong>(필요 시): <code class="language-plaintext highlighter-rouge">*_mac.sh</code>, <code class="language-plaintext highlighter-rouge">*_win.ps1</code>, <code class="language-plaintext highlighter-rouge">*_nix.sh</code>, <code class="language-plaintext highlighter-rouge">*_tcsh.csh</code></p>
  </li>
  <li>
    <p><strong>프로젝트 한정</strong> 이면 파일명에 <strong>프로젝트 약어</strong> 붙이기: <code class="language-plaintext highlighter-rouge">build_cli_app1.sh</code></p>
  </li>
</ul>

<ol>
  <li><strong>헤더/안전 옵션(필수)</strong></li>
</ol>

<ul>
  <li>Bash/Zsh:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
</code></pre></div>    </div>
  </li>
  <li>PowerShell:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="bp">$Error</span><span class="n">ActionPreference</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Stop"</span><span class="w">
</span><span class="n">Set-StrictMode</span><span class="w"> </span><span class="nt">-Version</span><span class="w"> </span><span class="nx">Latest</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>tcsh:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh
    
#!/bin/tcsh -f
</code></pre></div>    </div>
  </li>
  <li>최상단 주석 3줄(설명/의존성/예시):
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># build_cli.sh - Build CLI as onefile with PyInstaller</span>
<span class="c"># deps: pyinstaller&gt;=6, Python 3.11 venv activated</span>
<span class="c"># usage: ./build_cli.sh</span>
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li><strong>문서화 위치</strong></li>
</ol>

<ul>
  <li>
    <p>공용 스크립트 목록은 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/INDEX.md</code> 한 장으로 관리<br />
(이름, 한줄 설명, 사용 예시).</p>
  </li>
  <li>
    <p>프로젝트 전용은 <code class="language-plaintext highlighter-rouge">PRJ-…/README.md</code>의 “Scripts” 섹션에 표로 정리.</p>
  </li>
</ul>

<hr />

<h2 id="예시-배치-샘플">예시 배치 (샘플)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
  10_Today/
    wrappers/
      hotfix_export.sh         # 오늘만 쓸 임시 래퍼 (EOD 삭제/승격)
  20_Projects/PRJ-2025-001_sample_app/
    scripts/
      install.sh | .ps1
      run_cli.sh | .ps1
      build_cli.sh | .ps1
  25_Jobs/JOB-2025-010_report/04_Run/
    run.sh | run.ps1            # Job 실행 진입점
  50_Snippets/bash/
    tmux_one_liners.md
    git_tricks.md
  80_Tools/scripts/
    release_copy.sh             # 공용: dist → 75_Releases 로 전개
    checksum_all.sh             # 공용: SHA256 생성
    today                       # 콘솔 런처(선택)
    today.csh                   # tcsh 런처(선택)
    today.ps1                   # PS 런처(선택)
  40_Resources/personal/configs/shell/
    .zshrc, .tcshrc, Microsoft.PowerShell_profile.ps1
</code></pre></div></div>

<hr />

<h2 id="shortcutslist와-궁합-좋게-쓰는-팁"><code class="language-plaintext highlighter-rouge">shortcuts.list</code>와 궁합 좋게 쓰는 팁</h2>

<ul>
  <li>
    <p>파이프/복잡 명령이 필요하면 <code class="language-plaintext highlighter-rouge">10_Today/wrappers/*.sh</code>에 래퍼로 만들고,<br />
<code class="language-plaintext highlighter-rouge">shortcuts.list</code>에서는 <code class="language-plaintext highlighter-rouge">./wrappers/that_task.sh</code>만 호출 → 깔끔.</p>
  </li>
  <li>
    <p>래퍼가 일주일 내내 유용하면 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>로 <strong>승격</strong> + PATH에서 직접 호출.</p>
  </li>
</ul>

<hr />

<p>원하면 지금 스타터에 <code class="language-plaintext highlighter-rouge">10_Today/wrappers/</code>와 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/INDEX.md</code> 틀, 그리고 <code class="language-plaintext highlighter-rouge">checksum_all.sh</code>/<code class="language-plaintext highlighter-rouge">release_copy.sh</code> 같은 <strong>실사용 공용 스크립트</strong> 샘플까지 바로 만들어서 붙여줄게. 어느 셸(Bash/Zsh/tcsh/PowerShell)을 주력으로 쓰는지도 알려줘!</p>

<p class="chat--user">

근데 config를 교육자료랑 같은 폴더에 두는게 난 좀 이상해

</p>

<p>완전 공감해요. <strong>교육자료(edu)</strong>와 <strong>설정(config)</strong>은 성격이 달라서 분리하는 게 깔끔합니다.<br />
아래처럼 <strong>전용 루트 <code class="language-plaintext highlighter-rouge">32_Configs/</code></strong>를 새로 두고, 기존 구조를 살짝 조정해요.</p>

<hr />

<h1 id="왜-분리">왜 분리?</h1>

<ul>
  <li>
    <p><strong>의도 분리</strong> : 문서/학습(읽기) vs 설정/프리셋(실행·적용)</p>
  </li>
  <li>
    <p><strong>권한/백업</strong> : 개인설정은 민감·빈도 높음 → 별도 관리가 안전</p>
  </li>
  <li>
    <p><strong>레이어링 명확</strong> : <code class="language-plaintext highlighter-rouge">shared(골든)</code> ↔ <code class="language-plaintext highlighter-rouge">personal(오버라이드)</code> 우선순위가 뚜렷</p>
  </li>
</ul>

<hr />

<h1 id="수정된-최종-트리설정만-이동-나머지-동일">수정된 최종 트리(설정만 이동, 나머지 동일)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
  00_Inbox/
  10_Today/
  20_Projects/
  25_Jobs/
  30_Areas/
    worklog/
    environments/
    knowledge_base/
      tips/ cheatsheets/ howtos/
  31_Labs/
  32_Configs/                         - ★ 설정 전용 루트
    shared/                           - 조직/프로젝트에 공유 가능한 '골든'
      global/                         - 도구별 표준 설정(전역)
        vscode/ ruff/ pytest/ pyinstaller/ pyside6/ jupyter/
      projects/                       - 특정 프로젝트 전용 기본설정
        sample-app/                   - 예: 프로젝트별 pytest.ini, ruff.toml 등
      README.md                       - 적용 원칙/우선순위
    personal/                         - 나만의 오버라이드(비공개)
      os/{mac,win,linux}/             - OS별 세팅(키보드/입력기 등)
      shell/{bash,zsh,tcsh,powershell}/ - 프로필·별칭
      editors/vscode/                 - settings.user.json, keybindings.user.json
      git/                            - .gitconfig.local 등
      python/                         - pip.conf, poetry.toml, pypirc
      tools/                          - 각 툴 개인 프리셋
      secrets/README.md               - (실제 비밀은 두지 말 것)
      .gitignore                      - *.local, secrets/*, *.pem 등 폭넓게 제외
  40_Resources/                       - 레퍼런스/교육/매뉴얼(설정 X)
    edu/ (courses, tutorials, papers/…)
    manuals/ (&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/)
    reference/                        - (선택) 스펙/표준 문서 등 '읽을거리'만
  50_Snippets/
  60_Assets/
  70_Exports/
  75_Releases/
  80_Tools/
    installers/ bin/ scripts/ devcontainer/
  85_Environments/ (conda/ venv/ docker/)
  99_Archive/
</code></pre></div></div>

<blockquote>
  <p>포인트: <strong>설정은 전부<code class="language-plaintext highlighter-rouge">32_Configs/</code>로 이동</strong>. 40_Resources엔 더 이상 설정이 없고, 순수 레퍼런스/학습 자료만 남깁니다.</p>
</blockquote>

<hr />

<h1 id="레이어링우선순위-규칙">레이어링(우선순위) 규칙</h1>

<ol>
  <li>
    <p><strong>Project 로컬</strong>(리포 내부 설정)</p>
  </li>
  <li>
    <p><strong>32_Configs/personal/</strong> (내 오버라이드)</p>
  </li>
  <li>
    <p>**32_Configs/shared/projects/ <proj>/** (프로젝트용 골든)</proj></p>
  </li>
  <li>
    <p><strong>32_Configs/shared/global/</strong> (전역 골든)</p>
  </li>
</ol>

<p>예: pytest는 순서대로 <code class="language-plaintext highlighter-rouge">pytest.ini</code>를 찾고, 없으면 상위로 올라가며 대체.</p>

<hr />

<h1 id="마이그레이션3분-컷">마이그레이션(3분 컷)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) 디렉터리 생성</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/Work/32_Configs/shared/<span class="o">{</span>global,projects<span class="o">}</span> ~/Work/32_Configs/personal

<span class="c"># 2) 기존 설정 이동</span>
<span class="c">#   (전역 골든)</span>
<span class="nb">mv</span> ~/Work/40_Resources/reference/configs/<span class="k">*</span> ~/Work/32_Configs/shared/global/ 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
<span class="c">#   (개인)</span>
<span class="nb">mv</span> ~/Work/40_Resources/personal/configs/<span class="k">*</span>  ~/Work/32_Configs/personal/     2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># 3) 흔적 정리(선택)</span>
<span class="nb">rmdir</span> ~/Work/40_Resources/reference/configs ~/Work/40_Resources/personal/configs 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<p>PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\shared\global"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\shared\projects"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\personal"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\40_Resources\reference\configs\*"</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\shared\global"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\40_Resources\personal\configs\*"</span><span class="w">  </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\personal"</span><span class="w">     </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="부트스트랩홈-설정-연결-예시">부트스트랩(홈 설정 연결 예시)</h1>

<p>Bash/Zsh:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>
<span class="nb">export </span><span class="nv">WORK_CONFIGS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/32_Configs"</span>
<span class="c"># 예: zsh 개인설정 연결</span>
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$WORK_CONFIGS</span><span class="s2">/personal/shell/zsh/.zshrc"</span> ~/.zshrc
<span class="c"># VSCode 사용자 설정</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/Library/Application<span class="se">\ </span>Support/Code/User
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$WORK_CONFIGS</span><span class="s2">/personal/editors/vscode/settings.user.json"</span> <span class="se">\</span>
        ~/Library/Application<span class="se">\ </span>Support/Code/User/settings.json
</code></pre></div></div>

<p>PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="o">=</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\personal"</span><span class="w">
</span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-Type</span><span class="w"> </span><span class="nx">SymbolicLink</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Documents\PowerShell\Microsoft.PowerShell_profile.ps1"</span><span class="w"> </span><span class="nt">-Target</span><span class="w"> </span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\shell\powershell\profile.ps1"</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span></code></pre></div></div>

<p>tcsh:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

setenv WORK_CONFIGS "$HOME/Work/32_Configs"
ln -snf "$WORK_CONFIGS/personal/shell/tcsh/.tcshrc" ~/.tcshrc
</code></pre></div></div>

<hr />

<h1 id="프로젝트에서-설정-불러오기권장-패턴">프로젝트에서 설정 불러오기(권장 패턴)</h1>

<h3 id="패턴-a-base--local">패턴 A) <code class="language-plaintext highlighter-rouge">*.base.*</code> + <code class="language-plaintext highlighter-rouge">*.local.*</code></h3>

<ul>
  <li>
    <p>리포 내 <code class="language-plaintext highlighter-rouge">pyproject.toml</code>/<code class="language-plaintext highlighter-rouge">ruff.toml</code>/<code class="language-plaintext highlighter-rouge">pytest.ini</code>는 <strong>기본</strong></p>
  </li>
  <li>
    <p>내 개인 오버라이드는 같은 디렉터리의 <code class="language-plaintext highlighter-rouge">*.local.*</code></p>
  </li>
  <li>
    <p>스크립트에서 발견 시 병합:</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">test</span> <span class="nt">-f</span> ruff.local.toml <span class="o">&amp;&amp;</span> <span class="nb">export </span><span class="nv">RUFF_ARGS</span><span class="o">=</span><span class="s2">"--config ruff.local.toml"</span>
</code></pre></div></div>

<h3 id="패턴-b-configd-디렉터리-병합">패턴 B) <code class="language-plaintext highlighter-rouge">config.d/</code> 디렉터리 병합</h3>

<ul>
  <li>
    <p>프로젝트 내 <code class="language-plaintext highlighter-rouge">config.d/00-base.toml</code>, <code class="language-plaintext highlighter-rouge">10-ci.toml</code></p>
  </li>
  <li>
    <p>개인은 <code class="language-plaintext highlighter-rouge">config.d/90-local.toml</code>로 추가(깃 무시)</p>
  </li>
</ul>

<hr />

<h1 id="today런처에서도-바로-접근"><code class="language-plaintext highlighter-rouge">today</code>/런처에서도 바로 접근</h1>

<p><code class="language-plaintext highlighter-rouge">Work/10_Today/shortcuts.list</code>에 자주 쓰는 설정 편집/링크 추가:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Edit pytest (shared)   | 32_Configs/shared/global/pytest   | ${EDITOR:-vi} pytest.ini
Edit ruff (personal)   | 32_Configs/personal/python        | ${EDITOR:-vi} ruff.local.toml
Bootstrap dotfiles     | 80_Tools/scripts                  | ./bootstrap_configs.sh
</code></pre></div></div>

<hr />

<h1 id="요약-1">요약</h1>

<ul>
  <li>
    <p><strong>설정 =<code class="language-plaintext highlighter-rouge">32_Configs/</code>로 완전 분리</strong> (shared/personal, global/projects 계층)</p>
  </li>
  <li>
    <p><strong>교육/레퍼런스 =<code class="language-plaintext highlighter-rouge">40_Resources/</code></strong> (설정 없음)</p>
  </li>
  <li>
    <p><strong>우선순위</strong> : Project → personal → shared/projects → shared/global</p>
  </li>
  <li>
    <p><strong>부트스트랩 스크립트</strong> 로 홈/IDE에 심볼릭 링크나 복사 연결</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">today</code> 런처나 <code class="language-plaintext highlighter-rouge">pin</code>으로 <strong>설정 편집/적용을 콘솔 한 번</strong> 에</p>
  </li>
</ul>

<p>원하면 <code class="language-plaintext highlighter-rouge">bootstrap_configs.sh</code>/<code class="language-plaintext highlighter-rouge">.ps1</code>와 <code class="language-plaintext highlighter-rouge">32_Configs/shared</code> 템플릿 파일들(ruff/pytest/VSC)까지 <strong>실제 파일</strong> 로 생성한 압축본을 바로 만들어줄게.</p>

<p class="chat--user">

왜 하필 32야?

</p>

<p>짧게 말하면, <strong>정렬·근접성·확장성</strong> 때문에 <code class="language-plaintext highlighter-rouge">32_Configs</code>로 잡았어요.</p>

<h2 id="왜-하필-32">왜 하필 32?</h2>

<ul>
  <li><strong>정렬(시각적 그룹화)</strong><br />
상위 레벨을 10 단위로 끊어 두었죠.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>30_Areas   ← 장기 운영(업무 영역)
31_Labs    ← 가벼운 실험
32_Configs ← 설정(실행·적용 중심)
40_Resources ← 읽을거리/레퍼런스
</code></pre></div>    </div>
  </li>
</ul>

<p>→ <code class="language-plaintext highlighter-rouge">Configs</code>가 <strong>Labs와 Resources 사이</strong> 에 오도록 32를 줘서, “업무(30) → 실험(31) → 설정적용(32) → 참고자료(40)” 흐름으로 자연스럽게 스캔됩니다.</p>

<ul>
  <li>
    <p><strong>근접성(자주 손대는 것끼리)</strong><br />
설정은 주로 <strong>Areas/Labs에서 파생</strong> 돼요(실험하다 설정을 고치고, 운영하면서 정책을 조정). 그래서 30대에 붙여 <strong>손 닿는 데</strong> 두었습니다.</p>
  </li>
  <li>
    <p><strong>확장성(번호 남겨두기)</strong><br />
33~39 사이에 여유가 생겨요. 나중에 필요하면:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">33_Templates</code> (문서/코드 템플릿)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">34_Policies</code> (보안/품질 정책 문서)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">35_Checklists</code>(QA/릴리스 체크리스트)<br />
… 같은 식으로 <strong>중간번호를 끼워넣기</strong> 쉽습니다.</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="꼭-32여야-해">꼭 32여야 해?</h2>

<p>아니요. 아래처럼 취향대로 바꿔도 좋아요—핵심은 <strong>일관성</strong>.</p>

<ul>
  <li>
    <p><strong>35_Configs</strong> : 홀수만 써서 시각적으로 구분 원할 때</p>
  </li>
  <li>
    <p><strong>28_Configs</strong> : Projects(20대)와 운영(30대) 사이로 끌어당기고 싶을 때</p>
  </li>
  <li>
    <p><strong>82_Configs</strong> : Tools(80대)와 묶고 싶을 때(개인 취향/DevOps 성향)</p>
  </li>
</ul>

<h2 id="바꾸고-싶다면-안전하게-리네임">바꾸고 싶다면 (안전하게 리네임)</h2>

<blockquote>
  <p>두 곳 이상에서 쓰는 스크립트/런처가 있으면 경로만 함께 바꿔주면 됩니다.</p>
</blockquote>

<p><strong>bash/zsh</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> ~/Work/32_Configs ~/Work/35_Configs
<span class="c"># today 런처 목록 등 경로 업데이트</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/32_Configs/#/35_Configs/#g'</span> ~/Work/10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<p><strong>PowerShell</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs"</span><span class="w"> </span><span class="s2">"35_Configs"</span><span class="w">
</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/32_Configs/'</span><span class="p">,</span><span class="w"> </span><span class="s1">'/35_Configs/'</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="w">
</span></code></pre></div></div>

<h2 id="현재-상위-번호-체계-요약기억용">현재 상위 번호 체계 요약(기억용)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00  Inbox         | 10  Today          | 20  Projects      | 25  Jobs
30  Areas         | 31  Labs            | 32  Configs       | 40  Resources
50  Snippets      | 60  Assets          | 70  Exports       | 75  Releases
80  Tools         | 85  Environments    | 99  Archive
</code></pre></div></div>

<p>원하면 네 취향(짝수만/홀수만/문자 프리픽스 등)에 맞춰 <strong>전체 번호 리패터닝 표</strong> 랑 자동 마이그레이션 스크립트도 같이 만들어줄게.</p>

<p class="chat--user">

90을 개인용 Configs 로 하자. 최종적으로 각 폴더명(영어)과 담을 내용(한글)을 정리해줘. 그리고 10가지 정도 업무 예시에 대해 Workflow를 작성해줘. 예를 들어 프로젝트 만들기, 분석 작업하기, 개인용 스크립트 만들기, 툴 설치하기, 개인 shell alias 설정하기 등등이 있을 수 있어.

</p>

<p>좋아—요청대로 <strong>폴더명은 영어</strong> , <strong>설명은 한글</strong> 로 정리하고, 마지막에 <strong>대표 업무 10가지 워크플로우</strong> 를 단계별로 붙일게.<br />
(개인용 설정은 <code class="language-plaintext highlighter-rouge">90_Configs</code>로 확정, “공유/골든 설정”은 <code class="language-plaintext highlighter-rouge">32_Configs</code>에 유지)</p>

<hr />

<h1 id="1-최종-폴더-구조-영문-이름--한글-설명--예시-하위">1) 최종 폴더 구조 (영문 이름 + 한글 설명 + 예시 하위)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/                                     - 1인 개발용 작업 루트
  00_Inbox/                               - 급히 던져두는 임시함(매일/주기적으로 비우기)

  10_Today/                               - 오늘 작업 대시보드(콘솔 중심 실행 출발점)
    shortcuts.list                        - today 런처가 읽는 “라벨|경로|명령” 목록
    (wrappers/)                           - 파이프/복잡 인자용 임시 래퍼 스크립트(단기 보관)

  20_Projects/                            - 툴(파이썬 패키지) 개발(코드 수명 중심)
    PRJ-YYYY-NNN_name/                    - 개별 프로젝트(예: PRJ-2025-001_sample_app)
      src/&lt;package_name&gt;/                 - 패키지 소스
      tests/                              - pytest 테스트
      scripts/                            - install/run/build/lint/test 스크립트(.sh/.ps1)
      examples/{data,scripts,docs}/       - 배포용 최소 실행 예제
      issues/BUG-YYYY-NNN/                - 버그/개선 이슈 노트
      docs/                               - 설계·ADR·가이드
      .devcontainer/                      - 개발 컨테이너 설정
      pyproject.toml, README.md, .gitignore, .editorconfig

  25_Jobs/                                - “산출물 작업 단위”(프로세스 수명 중심)
    JOB-YYYY-NNN_name/                    - 일반 산출 Job(입력→설정→실행→산출)
      01_Brief/                           - 요구사항/수락 기준/마감
      02_Input/raw/                       - 원천 데이터(읽기 전용 보관)
      03_Config/                          - 파라미터(yml/json), 실행 설정
      04_Run/                             - run.sh|ps1, run.py, 로그
      05_Output/                          - 중간/최종 산출물(작업 영역)
      06_Export/                          - 전달본(최종 산출물)
      90_Archive/                         - 완료 후 장기 보관
    BUG-YYYY-NNN_name/                    - 배포 버그 재현/증거/수정 검증
      01_Report/ 02_Repro/input/ 03_Config/ 04_Run/ 05_Evidence/logs/ 06_FixValidation/
    EX-YYYY-NNN_name/                     - “툴 예제” 패키징용 Job(선택)
    SMOKE-YYYY-NNN_tool/                  - 새 툴 설치 후 스모크/feasibility 테스트

  30_Areas/                               - 장기 운영 영역(지속 업무)
    worklog/YYYY/YY-MM/DATE.md            - 일일/주간 5줄 로그
    environments/                         - 공통 환경 메모/전략(예: 파이썬 버전 정책)
    knowledge_base/{tips,cheatsheets,howtos}/
                                           - 축적 지식: 팁/치트시트/가이드

  31_Labs/                                - 실험실(짧은 테스트/프로토; 재현 불필요)
    jupyter/                              - 스크래치 노트북(예: regex_scratch.ipynb)

  32_Configs/                             - 공유/골든 설정(문서화·재사용 대상)
    shared/
      global/{vscode,ruff,pytest,pyinstaller,pyside6,jupyter}/
                                           - 전역 표준 설정
      projects/&lt;project_slug&gt;/             - 특정 프로젝트 기본설정
      README.md                            - 적용 원칙/우선순위

  40_Resources/                           - 참고 자료(교육/매뉴얼/스펙—설정 제외)
    edu/{courses,tutorials,papers/…}/      - 강의·튜토리얼·논문(읽을거리 중심)
    manuals/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/  - 매뉴얼/가이드(PDF/HTML/MD)
    reference/                             - 표준/스펙 문서 등 레퍼런스

  50_Snippets/{sql,text,bash}/            - 재사용 코드/문구 조각(짧은 예제·원라이너)

  60_Assets/                              - 로고/폰트/템플릿 등 브랜딩 리소스

  70_Exports/                             - 여러 Job의 “최종 전달본” 모아보기(선택)

  75_Releases/                            - 유저 배포 전용 중앙 보관소(버전드)
    &lt;project_slug&gt;/vX.Y.Z/{installers,wheels,portable,docs,licenses,checksums}/
    &lt;project_slug&gt;/latest/                 - 최신 버전 포인터
    catalog.json                           - (선택) 버전/파일 인덱스

  80_Tools/                               - 설치파일/포터블/자동화 스크립트
    installers/                            - 오프라인 설치 파일 + install_notes.md(버전·체크섬)
    bin/                                   - 포터블 실행파일(PATH에 추가 가능)
    scripts/                               - bootstrap/release/checksum 등 공용 스크립트
    devcontainer/                          - 개발 컨테이너 툴

  85_Environments/                        - 재현 가능한 개발 환경 샘플
    conda/environment.yml
    venv/README.md
    docker/Dockerfile

  90_Configs/                             - ★개인 설정(오버라이드·비공개)
    os/{mac,win,linux}/                    - OS별 설정(키맵/입력기 등)
    shell/{bash,zsh,tcsh,powershell}/      - 프로필·별칭(개인용)
    editors/vscode/{settings.user.json,keybindings.user.json}
    git/.gitconfig.local
    python/{pip.conf,poetry.toml,pypirc}
    tools/                                 - 각 툴 개인 프리셋
    secrets/README.md                      - (실제 비밀은 두지 말고 안내만)
    .gitignore                             - *.local, secrets/*, *.pem 등 광범위 제외

  99_Archive/                             - 완료 Project/Job/자료 장기 보관(읽기 전용)
</code></pre></div></div>

<hr />

<h1 id="2-대표-업무-10가지-workflow-step-by-step">2) 대표 업무 10가지 Workflow (Step-by-step)</h1>

<h2 id="1-새-프로젝트-만들기-python-패키지데스크탑-툴">1) 새 프로젝트 만들기 (Python 패키지/데스크탑 툴)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">20_Projects/PRJ-YYYY-NNN_&lt;name&gt;/</code> 생성(템플릿 복사).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">./scripts/install.(sh|ps1)</code>로 venv + dev 의존성 설치.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">src/&lt;pkg&gt;/</code>, <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 패키지명과 엔트리포인트 수정.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tests/</code>에 최소 <code class="language-plaintext highlighter-rouge">test_smoke.py</code> 추가 → <code class="language-plaintext highlighter-rouge">./scripts/test.*</code> 실행.</p>
  </li>
  <li>
    <p>필요 시 GUI 의존성(<code class="language-plaintext highlighter-rouge">.[gui]</code>) 추가, <code class="language-plaintext highlighter-rouge">scripts/run_gui.*</code>로 확인.</p>
  </li>
  <li>
    <p>README에 사용법/예제/버전 정책 기입.</p>
  </li>
</ol>

<h2 id="2-분석산출물-작업-수행도구-사용--결과-전달">2) 분석·산출물 작업 수행(도구 사용 → 결과 전달)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/JOB-YYYY-NNN_&lt;title&gt;/</code> 생성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">01_Brief/</code>에 요구사항·마감·검수 기준 작성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">02_Input/raw/</code>에 입력 배치, <code class="language-plaintext highlighter-rouge">03_Config/config.yml</code> 작성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">04_Run/run.(sh|ps1)</code> 실행 → <code class="language-plaintext highlighter-rouge">06_Export/</code>에 최종본, 로그/manifest 생성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">qa_checklist.md</code> 통과 → 필요 시 <code class="language-plaintext highlighter-rouge">70_Exports/</code>에도 복사.</p>
  </li>
</ol>

<h2 id="3-개인용-스크립트-만들기">3) 개인용 스크립트 만들기</h2>

<ol>
  <li>
    <p>오늘만 쓸 임시면 <code class="language-plaintext highlighter-rouge">10_Today/wrappers/</code>에 작성 → <code class="language-plaintext highlighter-rouge">shortcuts.list</code>에서 호출.</p>
  </li>
  <li>
    <p>여러 프로젝트에서 재사용되면 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>로 <strong>승격</strong> + <code class="language-plaintext highlighter-rouge">--help</code>/README 작성.</p>
  </li>
  <li>
    <p>PATH에 <code class="language-plaintext highlighter-rouge">80_Tools/scripts</code> 추가.</p>
  </li>
  <li>
    <p>프로젝트 전용이면 <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-…/scripts/</code>에 두고 README의 Scripts 섹션에 문서화.</p>
  </li>
</ol>

<h2 id="4-새-툴-설치-스모크-테스트">4) 새 툴 설치(+ 스모크 테스트)</h2>

<ol>
  <li>
    <p>설치파일을 <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code>에 보관, <code class="language-plaintext highlighter-rouge">install_notes.md</code>에 버전·체크섬 기록.</p>
  </li>
  <li>
    <p>설치 후 <code class="language-plaintext highlighter-rouge">25_Jobs/SMOKE-YYYY-NNN_&lt;tool&gt;/</code> 생성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code>에 <code class="language-plaintext highlighter-rouge">tool --version</code> 등 기본 명령 기입.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">04_Run/smoke.(sh|ps1)</code> 실행 → <code class="language-plaintext highlighter-rouge">06_Export/result.txt</code> 확인.</p>
  </li>
  <li>
    <p>통과하면 <code class="language-plaintext highlighter-rouge">10_Today/shortcuts.list</code>에 단축 명령 추가.</p>
  </li>
</ol>

<h2 id="5-개인-shell-alias프로필-설정">5) 개인 shell alias/프로필 설정</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">90_Configs/shell/&lt;your_shell&gt;/</code>에 프로필·별칭 작성(예: <code class="language-plaintext highlighter-rouge">.zshrc</code>, <code class="language-plaintext highlighter-rouge">profile.ps1</code>).</p>
  </li>
  <li>
    <p>홈으로 심볼릭 링크 연결(또는 복사):</p>

    <ul>
      <li>
        <p>macOS/Linux: <code class="language-plaintext highlighter-rouge">ln -snf "$HOME/Work/90_Configs/shell/zsh/.zshrc" ~/.zshrc</code></p>
      </li>
      <li>
        <p>PowerShell: 프로필 링크/로드.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>재시작 또는 <code class="language-plaintext highlighter-rouge">source</code> 후 동작 확인.</p>
  </li>
  <li>
    <p>공용으로 권장하고 싶은 항목은 <code class="language-plaintext highlighter-rouge">32_Configs/shared/global/</code>에도 복제.</p>
  </li>
</ol>

<h2 id="6-배포-버전-만들기release">6) 배포 버전 만들기(Release)</h2>

<ol>
  <li>
    <p>프로젝트에서 <code class="language-plaintext highlighter-rouge">./scripts/build_cli.*</code>/<code class="language-plaintext highlighter-rouge">build_gui.*</code>로 빌드.</p>
  </li>
  <li>
    <p>릴리스 검증 Job(선택): <code class="language-plaintext highlighter-rouge">25_Jobs/REL-YYYY-NNN_&lt;proj&gt;_vX.Y.Z/</code>에서 체크섬·노트 자동화.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/</code>에 <code class="language-plaintext highlighter-rouge">{installers,wheels,portable,docs,licenses,checksums}/</code> 정리.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ReleaseNotes.md</code> 작성, <code class="language-plaintext highlighter-rouge">latest/</code> 갱신.</p>
  </li>
  <li>
    <p>필요 시 사내/외부 배포 링크 공지.</p>
  </li>
</ol>

<h2 id="7-버그-제보--디버깅--패치">7) 버그 제보 → 디버깅 → 패치</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/BUG-YYYY-NNN_&lt;title&gt;/01_Report/</code>에 제보/환경/재현절차 작성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">02_Repro/input/</code>, <code class="language-plaintext highlighter-rouge">03_Config/</code> 준비 → <code class="language-plaintext highlighter-rouge">04_Run/repro.*</code>로 재현.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">05_Evidence/logs/</code>에 로그·스크린샷·체크섬 수집.</p>
  </li>
  <li>
    <p>코드는 <code class="language-plaintext highlighter-rouge">20_Projects/.../issues/BUG-.../</code>에서 triage/fix_notes 관리.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">06_FixValidation/</code> 시나리오 통과 후 패치 릴리스(Workflow 6로 이동).</p>
  </li>
</ol>

<h2 id="8-빠른-실험정규식파이썬-문법-등">8) 빠른 실험(정규식/파이썬 문법 등)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code>에서 스크래치(작게, 5분/50줄 규칙).</p>
  </li>
  <li>
    <p>가치가 있으면 <code class="language-plaintext highlighter-rouge">30_Areas/knowledge_base/{tips,cheatsheets,howtos}</code>로 <strong>승격 요약</strong>.</p>
  </li>
  <li>
    <p>재현/증빙이 필요해지면 <strong>SMOKE Job</strong> 이나 일반 <strong>JOB</strong> 으로 전환.</p>
  </li>
</ol>

<h2 id="9-교육논문-자료-관리">9) 교육·논문 자료 관리</h2>

<ol>
  <li>
    <p>PDF는 <code class="language-plaintext highlighter-rouge">40_Resources/edu/papers/to_read/</code>에 저장.</p>
  </li>
  <li>
    <p>읽으면서 <code class="language-plaintext highlighter-rouge">reading_notes/YYYY-MM-DD_Title.md</code> 작성(템플릿 사용).</p>
  </li>
  <li>
    <p>한 달에 한 번 <code class="language-plaintext highlighter-rouge">summaries/</code>에 1~2페이지 요약 정리.</p>
  </li>
  <li>
    <p>코드/알고리즘으로 채택되면 관련 PRJ의 <code class="language-plaintext highlighter-rouge">docs/</code> 또는 Job으로 연결하여 실험/결과 보관.</p>
  </li>
</ol>

<h2 id="10-설정-레이어링-적용골든--개인">10) 설정 레이어링 적용(골든 ↔ 개인)</h2>

<ol>
  <li>
    <p><strong>우선순위</strong> : Project 로컬 → <code class="language-plaintext highlighter-rouge">90_Configs/personal</code> → <code class="language-plaintext highlighter-rouge">32_Configs/shared/projects/&lt;proj&gt;</code> → <code class="language-plaintext highlighter-rouge">32_Configs/shared/global</code>.</p>
  </li>
  <li>
    <p>VSCode/ruff/pytest 등은 프로젝트에서 기본 설정, 개인은 <code class="language-plaintext highlighter-rouge">*.local.*</code> 오버라이드.</p>
  </li>
  <li>
    <p>부트스트랩 스크립트(<code class="language-plaintext highlighter-rouge">80_Tools/scripts/bootstrap_configs.*</code>)로 홈/IDE에 링크·복사 자동 적용.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">10_Today/shortcuts.list</code>에 “Edit ruff (personal)” 같은 단축키 추가.</p>
  </li>
</ol>

<hr />

<p>원하면 위 변경(특히 <code class="language-plaintext highlighter-rouge">90_Configs</code> 신설)까지 <strong>실제 폴더와 샘플 파일을 생성한 스타터 압축본</strong> 으로 바로 만들어 줄 수 있어. 어떤 셸을 주력으로 쓰는지만 알려줘(예: zsh, tcsh, PowerShell).</p>

<p class="chat--user">

90_Configs랑 32_Configs랑 이름이 겹쳐. rename이 필요해 보여

</p>

<p>좋은 지적! 이름 충돌을 없애고 <strong>의도가 한눈에 보이도록</strong> 이렇게 바꿉니다.</p>

<h1 id="새-이름-명확일관">새 이름 (명확·일관)</h1>

<ul>
  <li>
    <p>**32<em>SharedConfigs** → _공유/골든 설정</em> (팀·프로젝트가 재사용하는 표준)</p>
  </li>
  <li>
    <p>**90<em>PersonalConfigs** → _개인 설정</em> (내 취향/오버라이드/비공개)</p>
  </li>
</ul>

<p>둘 다 <code class="language-plaintext highlighter-rouge">Configs</code>를 유지하되 접두로 <strong>Shared / Personal</strong> 을 붙여 구분을 확실히 했어요.</p>

<hr />

<h1 id="최종-구조해당-부분만-발췌">최종 구조(해당 부분만 발췌)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
  32_SharedConfigs/                     - 공유/골든 설정(문서화·재사용 대상)
    global/{vscode,ruff,pytest,pyinstaller,pyside6,jupyter}/
                                         - 전역 표준 설정
    projects/&lt;project_slug&gt;/             - 특정 프로젝트 기본설정
    README.md                            - 적용 원칙/우선순위

  90_PersonalConfigs/                   - 개인 설정(오버라이드·비공개)
    os/{mac,win,linux}/                  - OS별 설정
    shell/{bash,zsh,tcsh,powershell}/    - 프로필·별칭
    editors/vscode/{settings.user.json,keybindings.user.json}
    git/.gitconfig.local
    python/{pip.conf,poetry.toml,pypirc}
    tools/                               - 각 툴 개인 프리셋
    secrets/README.md                    - (실제 비밀은 두지 말 것)
    .gitignore                           - *.local, secrets/*, *.pem 등 폭넓게 제외
</code></pre></div></div>

<h2 id="설정-레이어링우선순위-그대로-유지">설정 레이어링(우선순위 그대로 유지)</h2>

<p>Project 로컬 → <strong>90_PersonalConfigs</strong> → 32_SharedConfigs/projects → 32_SharedConfigs/global</p>

<hr />

<h1 id="안전한-리네임3분-컷">안전한 리네임(3분 컷)</h1>

<h2 id="macoslinux-bashzsh">macOS/Linux (bash/zsh)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work
<span class="nb">mv </span>32_Configs 32_SharedConfigs 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
mv </span>90_Configs 90_PersonalConfigs 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># today 목록 경로 일괄 치환</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/32_Configs/#/32_SharedConfigs/#g'</span> 10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/90_Configs/#/90_PersonalConfigs/#g'</span> 10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># 홈 심볼릭 링크 재연결 예시</span>
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/90_PersonalConfigs/shell/zsh/.zshrc"</span> ~/.zshrc
</code></pre></div></div>

<h2 id="windows-powershell-1">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs"</span><span class="w"> </span><span class="s2">"32_SharedConfigs"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\90_Configs"</span><span class="w"> </span><span class="s2">"90_PersonalConfigs"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">

</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/32_Configs/'</span><span class="p">,</span><span class="w"> </span><span class="s1">'/32_SharedConfigs/'</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/90_Configs/'</span><span class="p">,</span><span class="w"> </span><span class="s1">'/90_PersonalConfigs/'</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="w">

</span><span class="c"># 예: 개인 프로필 링크 재설정</span><span class="w">
</span><span class="c"># New-Item -Type SymbolicLink -Path "$HOME\Documents\PowerShell\Microsoft.PowerShell_profile.ps1" `</span><span class="w">
</span><span class="c">#   -Target "$HOME\Work\90_PersonalConfigs\shell\powershell\profile.ps1" -Force</span><span class="w">
</span></code></pre></div></div>

<h2 id="tcsh">tcsh</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

cd ~/Work
if ( -d 32_Configs )  mv 32_Configs 32_SharedConfigs
if ( -d 90_Configs )  mv 90_Configs 90_PersonalConfigs
# shortcuts.list 내 경로는 수동 또는 sed로 치환
sed -i '' 's#/32_Configs/#/32_SharedConfigs/#g; s#/90_Configs/#/90_PersonalConfigs/#g' 10_Today/shortcuts.list
</code></pre></div></div>

<hr />

<h1 id="부트스트랩런처에서의-새-경로-사용-예">부트스트랩/런처에서의 새 경로 사용 예</h1>

<p><strong><code class="language-plaintext highlighter-rouge">shortcuts.list</code> 예시</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Edit pytest (shared)   | 32_SharedConfigs/global/pytest   | ${EDITOR:-vi} pytest.ini
Edit ruff (personal)   | 90_PersonalConfigs/python        | ${EDITOR:-vi} ruff.local.toml
Bootstrap dotfiles     | 80_Tools/scripts                 | ./bootstrap_configs.sh
</code></pre></div></div>

<p><strong>심볼릭 링크 예시</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># VSCode 사용자 설정</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/Library/Application<span class="se">\ </span>Support/Code/User
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/90_PersonalConfigs/editors/vscode/settings.user.json"</span> <span class="se">\</span>
        ~/Library/Application<span class="se">\ </span>Support/Code/User/settings.json
</code></pre></div></div>

<hr />

<h2 id="왜-이-이름이-좋은가-짧게">왜 이 이름이 좋은가 (짧게)</h2>

<ul>
  <li>
    <p><strong>가독성</strong> : 폴더를 보는 순간 “공유용 vs 개인용”이 즉시 구분.</p>
  </li>
  <li>
    <p><strong>검색성</strong> : <code class="language-plaintext highlighter-rouge">SharedConfigs</code>, <code class="language-plaintext highlighter-rouge">PersonalConfigs</code> 키워드로 코드·문서·스크립트에서 쉽게 grep.</p>
  </li>
  <li>
    <p><strong>확장성</strong> : 나중에 <code class="language-plaintext highlighter-rouge">33_Templates/</code>, <code class="language-plaintext highlighter-rouge">34_Policies/</code> 같은 디렉터리도 무리 없이 추가.</p>
  </li>
</ul>

<p>필요하면 위 리네임을 반영한 <strong>today 런처/핀 스크립트</strong> 샘플 업데이트와 <code class="language-plaintext highlighter-rouge">bootstrap_configs.(sh|ps1|csh)</code>까지 만들어서 드릴게.</p>

<p class="chat--user">

근데 shortcuts가 그렇게 유용해? 여러 군데서 사용하네

</p>

<p>좋은 포인트야. <strong>shortcuts.list</strong> 가 “유용하냐”는 건 작업 스타일/규모에 따라 갈려.<br />
정리하자면:</p>

<h2 id="결론-의사결정-매트릭스">결론 (의사결정 매트릭스)</h2>

<ul>
  <li>
    <p><strong>명령이 5~20개</strong> 정도로 “매일 반복”된다 → <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 유지 (번호 선택 한 방, 쉘/OS 무관).</p>
  </li>
  <li>
    <p><strong>명령이 들쭉날쭉·많음( &gt;30)</strong> → <code class="language-plaintext highlighter-rouge">shortcuts.list</code> <em>없애고</em> <strong>자동 탐색 러너</strong> 로 전환.</p>
  </li>
  <li>
    <p><strong>프로젝트별로만 돌림</strong> → 각 PRJ에 <strong>Make/just/invoke/nox</strong> 같은 <strong>로컬 태스크 러너</strong> 두고, Today는 단순 점프만.</p>
  </li>
</ul>

<p>아래에 <strong>세 가지 운용안</strong> 을 다 줬어. 너한테 맞는 걸 골라 쓰면 돼.</p>

<hr />

<h1 id="옵션-a-shortcutslist-계속-쓸-때-유지비-최소-트릭">옵션 A) shortcuts.list 계속 쓸 때 (유지비 최소 트릭)</h1>

<ul>
  <li>
    <p><strong>등록은 1줄</strong> : <code class="language-plaintext highlighter-rouge">pin</code>(bash/zsh/ps/tcsh)로 현재 폴더·명령을 자동 추가 → 타이핑 부담 최소.</p>
  </li>
  <li>
    <p><strong>정리 주기</strong> : 금요일 5분에 <strong>TOP10만 남기고 나머지 아카이브</strong>.</p>
  </li>
  <li>
    <p><strong>한 곳에서만 사용</strong> : <code class="language-plaintext highlighter-rouge">today</code> 러너만 이 파일을 읽게 하고, 다른 스크립트/도구는 <strong>직접 파싱 금지</strong>(중복도입 방지).</p>
  </li>
</ul>

<blockquote>
  <p>이미 우리가 만든 <code class="language-plaintext highlighter-rouge">today</code>/<code class="language-plaintext highlighter-rouge">pin</code> 세트는 이 전제를 만족해. (=한 군데에서만 소비)</p>
</blockquote>

<hr />

<h1 id="옵션-b-자동-탐색-러너추천-명령이-많거나-자주-변할-때">옵션 B) <strong>자동 탐색 러너</strong>(추천: 명령이 많거나 자주 변할 때)</h1>

<blockquote>
  <p>리스트 관리 자체가 귀찮다면, <strong>Work 전체를 스캔</strong> 해서 “돌릴 수 있는 스크립트”를 <strong>자동으로</strong> 메뉴로 보여주면 끝이야.<br />
 <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 없이 바로 사용.</p>
</blockquote>

<h2 id="bashzsh-work-run-fzf-있으면-퍼지-선택-없으면-번호-선택">bash/zsh: <code class="language-plaintext highlighter-rouge">work-run</code> (fzf 있으면 퍼지 선택, 없으면 번호 선택)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># (1) 후보 수집: 자주 쓰는 엔트리 스크립트 패턴</span>
<span class="nb">mapfile</span> <span class="nt">-t</span> CANDIDATES &lt; &lt;<span class="o">(</span>
  find <span class="s2">"</span><span class="nv">$W</span><span class="s2">"</span> <span class="nt">-type</span> f <span class="se">\(</span> <span class="se">\</span>
      <span class="nt">-path</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/20_Projects/*/scripts/*.sh"</span> <span class="nt">-o</span> <span class="se">\</span>
      <span class="nt">-path</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs/*/04_Run/*.sh"</span> <span class="nt">-o</span> <span class="se">\</span>
      <span class="nt">-path</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs/*/04_Run/*.ps1"</span> <span class="nt">-o</span> <span class="se">\</span>
      <span class="nt">-path</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/80_Tools/scripts/*.sh"</span> <span class="se">\</span>
    <span class="se">\)</span> 2&gt;/dev/null <span class="se">\</span>
  | <span class="nb">sort</span>
<span class="o">)</span>

<span class="o">((</span> <span class="k">${#</span><span class="nv">CANDIDATES</span><span class="p">[@]</span><span class="k">}</span> <span class="o">))</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"No runnable scripts found."</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>

pick_with_fzf<span class="o">()</span> <span class="o">{</span>
  <span class="nb">command</span> <span class="nt">-v</span> fzf <span class="o">&gt;</span>/dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="k">return </span>1
  <span class="nb">printf</span> <span class="s1">'%s\n'</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CANDIDATES</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span> <span class="se">\</span>
    | <span class="nb">sed</span> <span class="s2">"s|^</span><span class="nv">$W</span><span class="s2">/||"</span> <span class="se">\</span>
    | fzf <span class="nt">--prompt</span><span class="o">=</span><span class="s2">"work-run&gt; "</span> <span class="nt">--height</span><span class="o">=</span>40% <span class="nt">--reverse</span> <span class="se">\</span>
          <span class="nt">--preview</span><span class="o">=</span><span class="s2">"sed -n '1,80p' </span><span class="se">\"</span><span class="nv">$W</span><span class="s2">/{}</span><span class="se">\"</span><span class="s2">"</span> <span class="se">\</span>
    | <span class="nb">sed</span> <span class="s2">"s|^|</span><span class="nv">$W</span><span class="s2">/|"</span>
<span class="o">}</span>

<span class="nv">SEL</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>pick_with_fzf <span class="o">||</span> <span class="nb">true</span><span class="si">)</span><span class="s2">"</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">SEL</span><span class="k">:-}</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
  <span class="c"># fallback: 번호 선택</span>
  <span class="nv">i</span><span class="o">=</span>1
  <span class="k">for </span>p <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CANDIDATES</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">rel</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">p</span><span class="p">#</span><span class="nv">$W</span><span class="p">/</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="nb">printf</span> <span class="s2">"%2d) %s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$i</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$rel</span><span class="s2">"</span><span class="p">;</span> <span class="o">((</span>i++<span class="o">))</span>
  <span class="k">done
  </span><span class="nb">read</span> <span class="nt">-rp</span> <span class="s2">"work-run&gt; "</span> idx
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$idx</span><span class="s2">"</span> <span class="o">=</span>~ ^[0-9]+<span class="nv">$ </span><span class="o">]]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"Invalid"</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>
  <span class="nv">SEL</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">CANDIDATES</span><span class="p">[</span><span class="k">$((</span>idx-1<span class="k">))</span><span class="p">]</span><span class="k">}</span><span class="s2">"</span>
<span class="k">fi

</span><span class="nb">dir</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$SEL</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span><span class="p">;</span> <span class="nv">file</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$SEL</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">"</span>
<span class="k">case</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="k">in</span>
  <span class="k">*</span>.ps1<span class="p">)</span>  pwsh <span class="nt">-NoLogo</span> <span class="nt">-NoProfile</span> <span class="nt">-File</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="p">;;</span>   <span class="c"># pwsh있으면 PS 스크립트도 실행</span>
  <span class="k">*</span>.sh<span class="p">)</span>   <span class="nb">chmod</span> +x <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span><span class="p">;</span> <span class="s2">"./</span><span class="nv">$file</span><span class="s2">"</span> <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>      <span class="nb">echo</span> <span class="s2">"Unknown type: </span><span class="nv">$file</span><span class="s2">"</span><span class="p">;</span> <span class="nb">exit </span>1 <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<p>사용:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/Work/80_Tools/scripts/work-run
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Tools/scripts:</span><span class="nv">$PATH</span><span class="s2">"</span>
work-run
</code></pre></div></div>

<ul>
  <li>
    <p>패턴은 필요하면 추가해(예: <code class="language-plaintext highlighter-rouge">build_*.sh</code>, <code class="language-plaintext highlighter-rouge">repro.sh</code>, <code class="language-plaintext highlighter-rouge">smoke.sh</code> 등).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">fzf</code>가 있으면 퍼지 검색/프리뷰, 없으면 번호 메뉴.</p>
  </li>
</ul>

<h2 id="tcsh-work-runcsh-간단-번호-선택">tcsh: <code class="language-plaintext highlighter-rouge">work-run.csh</code> (간단 번호 선택)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
set W = "$HOME/Work"
if ( $?WORK_DIR ) set W = "$WORK_DIR"

set tmp = "/tmp/work-run.$$"
# 후보: scripts/*.sh, 04_Run/*.sh, 80_Tools/scripts/*.sh
find "$W" -type f \( \
  -path "$W/20_Projects/*/scripts/*.sh" -o \
  -path "$W/25_Jobs/*/04_Run/*.sh" -o \
  -path "$W/80_Tools/scripts/*.sh" \
\) | sort | sed "s|^$W/||" &gt; "$tmp"

set n = `wc -l &lt; "$tmp"`
if ( "$n" == 0 ) then
  echo "No runnable scripts found."; /bin/rm -f "$tmp"; exit 0
endif

set i = 1
foreach line (`cat "$tmp"`)
  echo "$i) $line"
  @ i++
end
echo -n "work-run&gt; "
set idx = $&lt;
set sel = `sed -n "${idx}p" "$tmp"`; /bin/rm -f "$tmp"
set full = "$W/$sel"
set dir = `dirname "$full"`; set file = `basename "$full"`
cd "$dir"
if ( "$file:e" == "sh" ) then
  chmod +x "$file" &gt;/dev/null
  ./"$file"
else
  echo "Unknown type: $file"
endif
</code></pre></div></div>

<p>사용:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

chmod +x ~/Work/80_Tools/scripts/work-run.csh
setenv PATH "$HOME/Work/80_Tools/scripts:$PATH"
work-run.csh
</code></pre></div></div>

<blockquote>
  <p>이 방식이면 <strong>여러 군데서 shortcuts를 쓰지 않아도</strong> 되고, 새 스크립트를 만들면 자동으로 메뉴에 잡혀.</p>
</blockquote>

<hr />

<h1 id="옵션-c-프로젝트-로컬-태스크-러너-로-통일">옵션 C) <strong>프로젝트 로컬 태스크 러너</strong> 로 통일</h1>

<ul>
  <li>
    <p>각 PRJ 루트에 아래 중 하나를 채택:</p>

    <ul>
      <li>
        <p><strong>Makefile</strong> : <code class="language-plaintext highlighter-rouge">make test</code>, <code class="language-plaintext highlighter-rouge">make build</code>, <code class="language-plaintext highlighter-rouge">make run</code></p>
      </li>
      <li>
        <p><strong>justfile</strong>(추천): 사람이 읽기 쉬운 문법, <code class="language-plaintext highlighter-rouge">just build</code>, <code class="language-plaintext highlighter-rouge">just test</code></p>
      </li>
      <li>
        <p><strong>Invoke/Fab</strong>(파이썬 태스크): <code class="language-plaintext highlighter-rouge">inv build</code>, <code class="language-plaintext highlighter-rouge">inv release</code></p>
      </li>
      <li>
        <p><strong>nox/tox</strong>(테스트/세션): <code class="language-plaintext highlighter-rouge">nox -s lint tests</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">10_Today</code>에서는 <strong>그 프로젝트로 cd만</strong> 하고, 나머지는 로컬 태스크로 실행.</p>
  </li>
  <li>
    <p>장점: <strong>유지보수 최소</strong> , CI/CD와 스크립트 공유 쉬움.</p>
  </li>
  <li>
    <p>단점: 프로젝트마다 태스크 정의 필요.</p>
  </li>
</ul>

<hr />

<h2 id="어느-걸-쓰면-좋을까-현실-규칙">어느 걸 쓰면 좋을까? (현실 규칙)</h2>

<ul>
  <li>
    <p><strong>초기 셋업/개인 워크스페이스</strong> : B(자동 탐색) → 관리 부담 0</p>
  </li>
  <li>
    <p><strong>안정화되면</strong> : C(프로젝트 태스크 러너)로 고정해 품질↑</p>
  </li>
  <li>
    <p><strong>매일 도는 Top10 명령이 뚜렷</strong> : A(shotcuts.list) 유지 + <code class="language-plaintext highlighter-rouge">pin</code>으로 등록을 “노가다 0”으로</p>
  </li>
</ul>

<hr />

<h2 id="보너스-혼용-예시-실전형">보너스: 혼용 예시 (실전형)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">work-run</code>으로 전체 스크립트 <strong>퍼지 검색</strong> 해서 바로 실행</p>
  </li>
  <li>
    <p>자주 쓰는 5~10개는 <code class="language-plaintext highlighter-rouge">shortcuts.list</code>에 <strong>고정 슬롯</strong></p>
  </li>
  <li>
    <p>프로젝트 내부에는 <code class="language-plaintext highlighter-rouge">justfile</code>로 <code class="language-plaintext highlighter-rouge">build/test/run</code> 표준화</p>
  </li>
</ul>

<p>이렇게 잡으면 “여러 군데서 shortcuts를 쓴다”는 느낌 없이,<br />
<strong>한 가지 진입점(work-run 혹은 today)</strong> 만 기억하면 되고,<br />
필요할 때만 최소한으로 <code class="language-plaintext highlighter-rouge">shortcuts.list</code>를 운용하면 돼.</p>

<p class="chat--user">

만약에 교육 실험(LAB)을 따라해보고 싶다면 어디서 해야할까

</p>

<p>좋은 질문! <strong>교육 실험(LAB)</strong>은 “자료(읽기)”와 “실습(실행)”을 분리해서 관리하면 깔끔합니다.</p>

<h2 id="한-줄-결론">한 줄 결론</h2>

<ul>
  <li>
    <p><strong>자료(강의/튜토리얼/노트)</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/edu/...</code> (읽기 전용 레퍼런스)</p>
  </li>
  <li>
    <p><strong>가벼운 따라하기·짧은 탐색( &lt;30분)</strong>: <code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code> (스크래치)</p>
  </li>
  <li>
    <p><strong>데이터·설정·결과를 남기는 제대로 된 실습</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/LAB-YYYY-NNN_&lt;topic&gt;/</code> (재현 가능한 구조)</p>
  </li>
</ul>

<hr />

<h1 id="어디서-무엇을-하나요">어디서 무엇을 하나요?</h1>

<h2 id="1-자료는-여기-40_resourcesedu">1) 자료는 여기: <code class="language-plaintext highlighter-rouge">40_Resources/edu/</code></h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">courses/&lt;provider&gt;/&lt;course-name&gt;/</code> : 강의 슬라이드/수업 링크</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tutorials/&lt;topic&gt;/</code> : 튜토리얼 링크/README</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">papers/</code> : 논문 워크플로(to_read → reading_notes → summaries)</p>
  </li>
</ul>

<blockquote>
  <p>역할: “읽을거리/레퍼런스” 저장소. <strong>실행 파일이나 산출물은 두지 않음</strong>.</p>
</blockquote>

<h2 id="2-짧은-실습은-여기-31_labsjupyter">2) 짧은 실습은 여기: <code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code></h2>

<ul>
  <li>
    <p>파일 예: <code class="language-plaintext highlighter-rouge">2025-08-26_pytorch-tensor-basics.ipynb</code>, <code class="language-plaintext highlighter-rouge">regex_scratch.ipynb</code></p>
  </li>
  <li>
    <p>용도: API 감, 문법/정규식 테스트, 작은 코드 실험(5분/50줄 규칙)</p>
  </li>
  <li>
    <p>끝나고 유용하면 <strong>요약을</strong> <code class="language-plaintext highlighter-rouge">30_Areas/knowledge_base/{tips|cheatsheets|howtos}</code>로 <strong>승격</strong><br />
(예: “PyTorch 텐서 기본” 치트시트)</p>
  </li>
</ul>

<h2 id="3-본격-실습데이터산출리포트-필요은-여기-25_jobslab-yyyy-nnn_topic">3) 본격 실습(데이터·산출·리포트 필요)은 여기: <code class="language-plaintext highlighter-rouge">25_Jobs/LAB-YYYY-NNN_&lt;topic&gt;/</code></h2>

<blockquote>
  <p>LAB을 <strong>JOB의 한 타입</strong> 으로 보면 됩니다(재현성/증빙 목적).</p>
</blockquote>

<h3 id="권장-스켈레톤">권장 스켈레톤</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>25_Jobs/
  LAB-2025-012_pytorch-cnn/
    01_Brief/            - 학습 목표, 평가 기준(예: 정확도 ≥ 90%), 마감
    02_Input/
      raw/               - 원천 데이터(큰 파일은 심볼릭 링크 권장)
    03_Config/
      env.yml            - conda/venv 의존성 명세(또는 requirements.txt)
      params.yml         - 하이퍼파라미터/경로 설정
    04_Run/
      notebooks/         - 실습 노트북(실행 본문)
      run.sh|run.ps1     - 일괄실행/로그/시드고정
      manifest.json      - 자동 생성(환경/버전/체크섬)
    05_Output/
      intermediate/      - 체크포인트/중간 산출
      reports/           - 리포트 파일(HTML/PDF)
    06_Export/
      final/             - 제출/공유용 최종본
</code></pre></div></div>

<h3 id="왜-job-형태">왜 Job 형태?</h3>

<ul>
  <li>
    <p>입력/설정/실행/산출이 분리되어 <strong>다시 돌리기 쉬움</strong></p>
  </li>
  <li>
    <p>체크섬·환경 버전이 <strong>manifest로 기록</strong> → 결과 신뢰도↑</p>
  </li>
  <li>
    <p>팀/미래의 나에게 <strong>재현 가능한 증거</strong> 가 됨</p>
  </li>
</ul>

<hr />

<h1 id="실전-워크플로-lab-따라하기">실전 워크플로 (LAB 따라하기)</h1>

<h2 id="a-짧게-맛보기-유튜토리얼블로그-코드-몇-줄">A) “짧게 맛보기” (유튜토리얼/블로그 코드 몇 줄)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">40_Resources/edu/tutorials/&lt;topic&gt;/</code>에 링크/원문 저장</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">31_Labs/jupyter/2025-08-26_&lt;topic&gt;.ipynb</code>에서 바로 실습</p>
  </li>
  <li>
    <p>유용하면 → <code class="language-plaintext highlighter-rouge">30_Areas/knowledge_base/tips/&lt;topic&gt;.md</code>에 요약 10줄</p>
  </li>
</ol>

<h2 id="b-실제-데이터로-결과를-내야-함성능리포트-필요">B) “실제 데이터로 결과를 내야 함”(성능/리포트 필요)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/LAB-YYYY-NNN_&lt;topic&gt;/</code> 생성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">01_Brief/</code>에 목표/평가 기준/데이터 출처 작성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">02_Input/raw/</code>에 데이터 배치(대용량은 경로만, 심링크 추천)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">03_Config/env.yml</code>, <code class="language-plaintext highlighter-rouge">params.yml</code> 작성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">04_Run/notebooks/</code>에 노트북 저장, <code class="language-plaintext highlighter-rouge">run.sh</code>에서 순서·시드 고정</p>
  </li>
  <li>
    <p>실행 → <code class="language-plaintext highlighter-rouge">05_Output/</code>에 중간물, <code class="language-plaintext highlighter-rouge">06_Export/final/</code>에 최종 리포트/PDF</p>
  </li>
  <li>
    <p>성과가 재사용 가능하면, <strong>도구화</strong> 해서 <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-...</code>로 승격</p>
  </li>
</ol>

<h2 id="c-lab이-결국-재사용-툴로-발전">C) “LAB이 결국 재사용 툴로 발전”</h2>

<ol>
  <li>
    <p>실습 코드에서 공통 로직을 <strong>패키지화</strong> → <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../src/&lt;pkg&gt;/</code></p>
  </li>
  <li>
    <p>예제는 <code class="language-plaintext highlighter-rouge">20_Projects/.../examples/</code>로 옮겨 <strong>최소 실행 샘플</strong> 제공</p>
  </li>
  <li>
    <p>학습 기록/리포트는 기존 <code class="language-plaintext highlighter-rouge">LAB-...</code> Job에 그대로 보존(출처·증빙)</p>
  </li>
</ol>

<hr />

<h1 id="환경설정은-어디서">환경/설정은 어디서?</h1>

<ul>
  <li>
    <p><strong>공유/골든 설정</strong> : <code class="language-plaintext highlighter-rouge">32_SharedConfigs/</code> (예: 표준 <code class="language-plaintext highlighter-rouge">pytest.ini</code>, <code class="language-plaintext highlighter-rouge">ruff.toml</code>)</p>
  </li>
  <li>
    <p><strong>개인 설정(오버라이드)</strong> : <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/</code> (셸 프로필, 개인 ruff/VSCode 등)</p>
  </li>
  <li>
    <p><strong>특정 LAB 전용 의존성</strong> : <code class="language-plaintext highlighter-rouge">LAB-.../03_Config/env.yml</code> 또는 <code class="language-plaintext highlighter-rouge">requirements.txt</code><br />
(프로젝트로 승격되면 PRJ 리포 안으로 옮기기)</p>
  </li>
</ul>

<hr />

<h1 id="today-런처자동-러너에-연결-선택">Today 런처/자동 러너에 연결 (선택)</h1>

<ul>
  <li>
    <p>그냥 콘솔에서 자주 돌리면:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">work-run</code> 자동 탐색 러너를 쓰면 <code class="language-plaintext highlighter-rouge">LAB-.../04_Run/*.sh</code>가 자동 후보에 올라옵니다.</p>
      </li>
      <li>
        <p>또는 <code class="language-plaintext highlighter-rouge">10_Today/shortcuts.list</code>에 한 줄 추가:</p>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Run LAB CNN | 25_Jobs/LAB-2025-012_pytorch-cnn/04_Run | ./run.sh
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="언제-어디서-할지-결정-규칙요약">언제 어디서 할지 결정 규칙(요약)</h1>

<ul>
  <li>
    <p><strong>&lt; 30분 / 재현 불요 / 개인 확인</strong> → <code class="language-plaintext highlighter-rouge">31_Labs/jupyter</code></p>
  </li>
  <li>
    <p><strong>데이터·결과·평가 필요 / 공유·재현 필요</strong> → <code class="language-plaintext highlighter-rouge">25_Jobs/LAB-YYYY-...</code></p>
  </li>
  <li>
    <p><strong>도구로 발전</strong> → <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-...</code> (LAB은 기록으로 남김)</p>
  </li>
</ul>

<p>필요하면 <strong>LAB용 템플릿(Job 스캐폴드 + env/params 샘플 + run 스크립트)</strong>을 바로 만들어줄게. 어떤 주제(예: PyTorch, Pandas, NLP, 시각화)로 실습할지 알려주면 거기에 맞춰 뼈대까지 넣어 드릴 수 있어!</p>

<p class="chat--user">

25_Jobs가 엄청 뚱뚱해지네

</p>

<p>맞아—그 느낌 정상이에요. <strong>25_Jobs가 비대해지기 쉬운 폴더</strong> 라서, 구조·정책·자동화 3가지만 잡으면 금방 얇아집니다. 아래 그대로 적용해보자.</p>

<hr />

<h1 id="1-구조-25_jobs를-타입연도상태로-쪼개기">1) 구조: 25_Jobs를 “타입×연도×상태”로 쪼개기</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
  25_Jobs/                          ← 산출 작업 루트
    _active/                        ← 지금 진행 중(12개 이내 유지)
    _templates/                     ← 복제용 스캐폴드(빈 템플릿)
    JOB/                            ← 일반 작업(연도별 보관)
      2025/
      2024/
    BUG/                            ← 배포 버그 재현/검증
      2025/
    SMOKE/                          ← 새 툴 스모크/feasibility
      2025/
    LAB/                            ← 교육 실습 중 “재현형” 실습
      2025/
    EX/                             ← 배포 예제 패키징
      2025/
    REL/                            ← 릴리스 준비/검증(Job 형태)
      2025/
</code></pre></div></div>

<ul>
  <li>
    <p>새 작업은 <strong>항상 <code class="language-plaintext highlighter-rouge">25_Jobs/_active/타입-YYYY-NNN_제목/</code></strong>로 시작 → 끝나면 <strong>동일 타입의 연도 폴더로 이동</strong>.</p>
  </li>
  <li>
    <p>템플릿은 전부 <strong><code class="language-plaintext highlighter-rouge">_templates/</code>에 모아두고</strong> 복제만 한다(중복 템플릿 방지).</p>
  </li>
</ul>

<blockquote>
  <p>예) 진행 중 버그: <code class="language-plaintext highlighter-rouge">_active/BUG-2025-013_crash_xxx/</code><br />
 완료 후 이동: <code class="language-plaintext highlighter-rouge">BUG/2025/BUG-2025-013_crash_xxx/</code></p>
</blockquote>

<hr />

<h1 id="2-정책-수명주기hot--warm--cold">2) 정책: 수명주기(Hot → Warm → Cold)</h1>

<table>
  <thead>
    <tr>
      <th>단계</th>
      <th>위치</th>
      <th>기간/기준</th>
      <th>해야 할 일</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Hot</strong></td>
      <td><code class="language-plaintext highlighter-rouge">_active/</code></td>
      <td>작업 중</td>
      <td>매일 편집, 로그/메모 살림</td>
    </tr>
    <tr>
      <td><strong>Warm</strong></td>
      <td><code class="language-plaintext highlighter-rouge">타입/2025/</code></td>
      <td><strong>완료 후 ~90일</strong></td>
      <td>중간산출물 정리, <code class="language-plaintext highlighter-rouge">05_Output/intermediate</code> 압축/삭제</td>
    </tr>
    <tr>
      <td><strong>Cold</strong></td>
      <td><code class="language-plaintext highlighter-rouge">99_Archive/25_Jobs/2025/</code></td>
      <td>90일↑ 또는 재사용 낮음</td>
      <td>전체 폴더 이동(읽기 전용), 필요 파일만 <code class="language-plaintext highlighter-rouge">70_Exports</code> 링크</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p><strong>상한선</strong> : <code class="language-plaintext highlighter-rouge">_active/</code>는 <strong>12개 이내</strong> (넘으면 가장 오래된 것부터 Warm으로 이동).</p>
  </li>
  <li>
    <p><strong>원천데이터</strong> : 큰 파일은 <code class="language-plaintext highlighter-rouge">02_Input/raw</code>에 <strong>심볼릭 링크/경로만</strong>(실파일은 별도 데이터 저장소; 아래 5번 참고).</p>
  </li>
</ul>

<hr />

<h1 id="3-인덱스-가벼운-카탈로그-1장검색정리용">3) 인덱스: 가벼운 카탈로그 1장(검색·정리용)</h1>

<p><code class="language-plaintext highlighter-rouge">25_Jobs/index.csv</code> (또는 <code class="language-plaintext highlighter-rouge">catalog.json</code>) — 최소 필드:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>job_code,type,year,title,status,owner,tags,start,end,path
JOB-2025-041,JOB,2025,"보고서 A",done,me,"report,pdf",2025-08-20,2025-08-22,25_Jobs/JOB/2025/JOB-2025-041_보고서A
BUG-2025-013,BUG,2025,"crash on save",warm,me,"win11,pyinstaller",2025-08-15,2025-08-16,25_Jobs/BUG/2025/BUG-2025-013_crash
</code></pre></div></div>

<ul>
  <li>
    <p>새 Job 만들 때 <strong>한 줄 추가</strong> → 완료 시 <code class="language-plaintext highlighter-rouge">status</code>만 <code class="language-plaintext highlighter-rouge">done</code>으로 바꿔도 검색이 편함.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">work-run</code>(자동 탐색 러너)나 간단 스크립트가 이 인덱스를 참고하면 더 빨라져요.</p>
  </li>
</ul>

<hr />

<h1 id="4-자동화-얇게-유지하는-4가지-루틴">4) 자동화: 얇게 유지하는 4가지 루틴</h1>

<h3 id="a-close--move핫--웜">A) “Close &amp; Move”(핫 → 웜)</h3>

<ul>
  <li>
    <p>종료 커밋/정리 후:</p>

    <ol>
      <li>
        <p><code class="language-plaintext highlighter-rouge">05_Output/intermediate</code> 압축 또는 삭제</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">06_Export</code>만 남기고 나머지 로그는 7~30일 보존</p>
      </li>
      <li>
        <p>폴더를 <code class="language-plaintext highlighter-rouge">타입/연도/</code>로 <strong>mv</strong></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">index.csv</code> 상태 <code class="language-plaintext highlighter-rouge">done</code> 업데이트</p>
      </li>
    </ol>
  </li>
</ul>

<h3 id="b-archive웜--콜드">B) “Archive”(웜 → 콜드)</h3>

<ul>
  <li>
    <p>90일 지난 <code class="language-plaintext highlighter-rouge">done</code> → <code class="language-plaintext highlighter-rouge">99_Archive/25_Jobs/연도/</code>로 이동</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">70_Exports</code>엔 최종본 링크 또는 복사</p>
  </li>
</ul>

<h3 id="c-thin-logs">C) “Thin Logs”</h3>

<ul>
  <li>
    <p>30일 지난 <code class="language-plaintext highlighter-rouge">*.log</code>는 <code class="language-plaintext highlighter-rouge">gzip</code></p>
  </li>
  <li>
    <p>대용량 <code class="language-plaintext highlighter-rouge">*.csv</code> 중간 산출은 해시만 남기고 삭제 가능</p>
  </li>
</ul>

<h3 id="d-top-n-active-rule">D) “Top-N Active Rule”</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">_active/</code>가 12개 초과 시 today에 경고: <strong>가장 오래된 3개</strong> 를 Warm로 이동</li>
</ul>

<blockquote>
  <p>원하면 위 4개를 묶은 <strong>주간 스윕 스크립트</strong> 도 내줄 수 있어요(쉘/PS/tcsh 버전).</p>
</blockquote>

<hr />

<h1 id="5-선택-대용량-데이터-분리">5) (선택) 대용량 데이터 분리</h1>

<p>대용량 원천/중간 데이터가 많은 편이면 아래처럼 분리하면 Jobs가 가벼워집니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
  26_Data/
    raw/&lt;dataset or source&gt;/...
    cache/&lt;tool or proj&gt;/...
</code></pre></div></div>

<ul>
  <li>
    <p>Job의 <code class="language-plaintext highlighter-rouge">02_Input/raw</code>에는 <strong>심볼릭 링크</strong> 또는 <strong>경로만</strong> 두기</p>
  </li>
  <li>
    <p>데이터 버전 기록은 Job의 <code class="language-plaintext highlighter-rouge">03_Config/params.yml</code>에 해시/버전/경로로 남김</p>
  </li>
</ul>

<hr />

<h1 id="6-콘솔에서-빠르게-찾기열기-예시-스니펫">6) 콘솔에서 빠르게 찾기/열기 (예시 스니펫)</h1>

<h3 id="bashzsh-타입별상태별-리스트">Bash/Zsh: 타입별/상태별 리스트</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jobs-find<span class="o">()</span> <span class="o">{</span> find <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/25_Jobs/</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">_active</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-maxdepth</span> 2 <span class="nt">-type</span> d <span class="nt">-name</span> <span class="s2">"*-20*"</span> | <span class="nb">sort</span><span class="p">;</span> <span class="o">}</span>
jobs-open<span class="o">()</span> <span class="o">{</span> <span class="nb">cd</span> <span class="s2">"</span><span class="si">$(</span>jobs-find <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | fzf<span class="si">)</span><span class="s2">"</span> <span class="o">||</span> <span class="k">return</span><span class="p">;</span> <span class="o">}</span>
<span class="c"># 사용: jobs-open _active  /  jobs-open BUG/2025</span>
</code></pre></div></div>

<h3 id="powershell-2">PowerShell:</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">JobsOpen</span><span class="p">(</span><span class="nv">$path</span><span class="o">=</span><span class="s2">"</span><span class="bp">$_</span><span class="s2">active"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$root</span><span class="o">=</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\25_Jobs\</span><span class="nv">$path</span><span class="s2">"</span><span class="w">
  </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nv">$root</span><span class="w"> </span><span class="nt">-Recurse</span><span class="w"> </span><span class="nt">-Depth</span><span class="w"> </span><span class="nx">2</span><span class="w"> </span><span class="nt">-Directory</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-GridView</span><span class="w"> </span><span class="nt">-PassThru</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Location</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><em>(tcsh 버전도 원하면 줄게요.)</em></p>

<hr />

<h1 id="7-템플릿은-한-곳에만">7) 템플릿은 한 곳에만</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/_templates/</code> 에 <strong>JOB/BUG/SMOKE/LAB/EX/REL</strong> 스켈레톤 6개만 유지</p>
  </li>
  <li>
    <p>새 작업은 항상 여기서 <strong>복제</strong> → 템플릿 중복을 없애고 한 번만 관리</p>
  </li>
</ul>

<hr />

<h1 id="8-today런처와의-연동-가볍게">8) Today/런처와의 연동 (가볍게)</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">_active/</code>만 <strong>런처 대상</strong> 에 포함 → 완료와 동시에 자동 제외</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">work-run</code> 자동 탐색 러너를 쓰면 <code class="language-plaintext highlighter-rouge">_active/**/04_Run/*.sh|ps1</code>만 우선 순위로 스캔</p>
  </li>
</ul>

<hr />

<h2 id="오늘-할-일3분-셋업">오늘 할 일(3분 셋업)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs</code> 안에 <strong><code class="language-plaintext highlighter-rouge">_active/</code>, <code class="language-plaintext highlighter-rouge">_templates/</code>, <code class="language-plaintext highlighter-rouge">JOB/2025</code>, <code class="language-plaintext highlighter-rouge">BUG/2025</code>, <code class="language-plaintext highlighter-rouge">SMOKE/2025</code>, <code class="language-plaintext highlighter-rouge">LAB/2025</code>, <code class="language-plaintext highlighter-rouge">EX/2025</code>, <code class="language-plaintext highlighter-rouge">REL/2025</code></strong> 만들기</p>
  </li>
  <li>
    <p>진행 중 Job을 전부 <code class="language-plaintext highlighter-rouge">_active/</code>로 옮기기(12개 이하로)</p>
  </li>
  <li>
    <p>완료된 것들은 타입/연도 폴더로 정리</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">index.csv</code> 초안 만들어 상단 10개만 우선 채우기</p>
  </li>
</ol>

<hr />

<h3 id="요약-2">요약</h3>

<ul>
  <li>
    <p><strong>모든 새 작업은<code class="language-plaintext highlighter-rouge">_active/</code>에서 시작 → 끝나면 타입/연도로 이동 → 오래되면 99_Archive.</strong></p>
  </li>
  <li>
    <p>템플릿은 <strong>한 군데</strong>(<code class="language-plaintext highlighter-rouge">_templates/</code>)만.</p>
  </li>
  <li>
    <p>(원하면) <strong>26_Data</strong> 로 대용량 분리.</p>
  </li>
  <li>
    <p>주간 스윕 스크립트/자동 탐색 러너로 <strong>손 가는 정리 작업 0에 가깝게</strong>.</p>
  </li>
</ul>

<p>필요하면 위 구조로 <strong>폴더/인덱스/스윕 스크립트 세트</strong> 를 바로 만들어 드릴게—쓰는 셸(bash/zsh/PowerShell/tcsh)만 알려줘!</p>

<p class="chat--user">

DB 같은 데이터셋들을 저장하고 싶을 땐 어디에 해야할까?

</p>

<p>좋은 질문! <strong>DB 같은 데이터셋</strong> 은 코드/산출과 분리해서 <strong>전용 루트</strong> 에 보관하는 게 최고예요.<br />
내역 추적·복구·용량 관리가 쉬워지고, 25_Jobs도 가벼워집니다.</p>

<hr />

<h1 id="추천-위치-work26_data-데이터-전용-루트">추천 위치: <code class="language-plaintext highlighter-rouge">Work/26_Data/</code> (데이터 전용 루트)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>26_Data/                                   ← 데이터셋 중앙 저장소
├─ registry/                               ← 카탈로그(메타데이터)
│  ├─ catalog.csv
│  └─ README.md
├─ raw/                                    ← 원본(불변) 스냅샷/덤프
│  ├─ db/
│  │  ├─ postgres/&lt;db_name&gt;/snapshots/YYYY/&lt;TS&gt;/  ← .dump(.gz) or .sql.gz
│  │  │  ├─ dump.sql.gz
│  │  │  ├─ SHA256SUMS
│  │  │  └─ manifest.yml                   ← 출처/버전/테이블/PII/라이선스 등
│  │  └─ mysql/&lt;db_name&gt;/snapshots/...
│  └─ files/&lt;source&gt;/&lt;dataset&gt;/&lt;YYYY-MM-DD&gt;/  ← CSV/JSON/ZIP 등 외부 파일 원본
├─ processed/                              ← 정제/정규화/파케이(Parquet) 등 2차 산출
│  └─ &lt;dataset&gt;/&lt;version&gt;/
├─ samples/                                ← 예제/테스트용 소용량 서브셋
│  └─ &lt;dataset&gt;/&lt;version&gt;/
├─ cache/                                  ← 일시 캐시(삭제 가능)
│  ├─ project/&lt;PRJ-slug&gt;/
│  └─ job/&lt;JOB-code&gt;/
└─ schemas/                                ← DDL/스키마(JSON/SQL)
   └─ &lt;engine&gt;/&lt;db_name&gt;/
</code></pre></div></div>

<blockquote>
  <p><strong>원칙</strong></p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">raw/</code>는 <strong>불변(immutable)</strong> 로 취급: 덮어쓰지 말고 <strong>스냅샷을 추가</strong> 만 합니다.</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">processed/</code>는 파생 데이터(정제/집계), <code class="language-plaintext highlighter-rouge">samples/</code>는 작은 학습/테스트셋.</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">cache/</code>는 언제든 지워도 되는 중간물.</p>
    </li>
    <li>
      <p>큰 원본은 <strong>여기</strong> 에 두고, <strong>Job/Project에서는 경로 참조나 심볼릭 링크</strong> 만 사용.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h2 id="db-덤프스냅샷-표준-네이밍">DB 덤프/스냅샷 표준 네이밍</h2>

<ul>
  <li>
    <p>디렉터리: <code class="language-plaintext highlighter-rouge">raw/db/&lt;engine&gt;/&lt;db_name&gt;/snapshots/&lt;YYYY&gt;/&lt;YYYYMMDD-HHMMSS&gt;/</code></p>
  </li>
  <li>
    <p>파일:</p>

    <ul>
      <li>
        <p>Postgres: <code class="language-plaintext highlighter-rouge">&lt;db_name&gt;_&lt;YYYYMMDD-HHMMSS&gt;.dump.gz</code> (pg_dump -Fc 후 gzip)</p>
      </li>
      <li>
        <p>MySQL: <code class="language-plaintext highlighter-rouge">&lt;db_name&gt;_&lt;YYYYMMDD-HHMMSS&gt;.sql.gz</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p>무결성: <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> (여러 파일이면 모두 기록)</p>
  </li>
  <li>
    <p>메타: <code class="language-plaintext highlighter-rouge">manifest.yml</code> 예시
```yaml
dataset: postgres/salesdb
snapshot: 2025-08-26T10-20-00
source: prod-rds
pii_level: medium          # none/low/medium/high
license: internal
tables:</p>
    <ul>
      <li>customers: {rows: 120342}</li>
      <li>orders: {rows: 502113}
checksum:
  dump.sql.gz: "ab12…ef"
restore:
  engine: postgres
  target_db: salesdb_local
```</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="26_data-카탈로그인덱스-예시">26_Data 카탈로그(인덱스) 예시</h2>

<p><code class="language-plaintext highlighter-rouge">26_Data/registry/catalog.csv</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kind,engine,name,version_or_ts,tags,path,pii,notes
db,postgres,salesdb,2025-08-26T10-20-00,"prod,snapshot",raw/db/postgres/salesdb/snapshots/2025/20250826-102000,medium,"month-end"
files,ext,ad_events,2025-08-01,"ads,csv",raw/files/ad_platform/ad_events/2025-08-01,low,"export via API"
</code></pre></div></div>

<hr />

<h1 id="워크플로-db-기준-postgres-예시">워크플로 (DB 기준, Postgres 예시)</h1>

<h2 id="1-스냅샷덤프-만들기--26_data에-보관">1) 스냅샷(덤프) 만들기 → 26_Data에 보관</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 예: Postgres</span>
<span class="nv">TS</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span>
<span class="nv">BASE</span><span class="o">=</span>~/Work/26_Data/raw/db/postgres/salesdb/snapshots/<span class="si">$(</span><span class="nb">date</span> +%Y<span class="si">)</span>
<span class="nv">DEST</span><span class="o">=</span><span class="nv">$BASE</span>/<span class="nv">$TS</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">"</span>
pg_dump <span class="nt">-Fc</span> <span class="s2">"postgresql://user:pass@host:5432/salesdb"</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/dump.dump"</span>
<span class="nb">gzip</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/dump.dump"</span>
<span class="nb">sha256sum</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/dump.dump.gz"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/SHA256SUMS"</span>
<span class="c"># manifest.yml 작성(템플릿 복사 후 수정)</span>
</code></pre></div></div>

<blockquote>
  <p><strong>MySQL</strong> : <code class="language-plaintext highlighter-rouge">mysqldump -u user -p --databases salesdb | gzip &gt; "$DEST/dump.sql.gz"</code></p>
</blockquote>

<ul>
  <li><strong>자격증명</strong> 은 <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets/.env-db.local</code> 같은 곳에 두고, 스크립트는 <strong>환경변수 참조</strong> 만 하세요(비밀 직접 기록 금지).</li>
</ul>

<h2 id="2-로컬-복원실험job용">2) 로컬 복원(실험/Job용)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Postgres</span>
createdb salesdb_local
<span class="nb">gunzip</span> <span class="nt">-c</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/dump.dump.gz"</span> | pg_restore <span class="nt">-d</span> salesdb_local
<span class="c"># 또는: pg_restore -d salesdb_local "$DEST/dump.dump.gz"</span>
</code></pre></div></div>

<ul>
  <li>컨테이너 사용 시(권장): <code class="language-plaintext highlighter-rouge">85_Environments/docker/docker-compose.yml</code>에 DB 서비스 정의하고,<br />
<code class="language-plaintext highlighter-rouge">26_Data/db/postgres/_volumes/&lt;name&gt;:/var/lib/postgresql/data</code> 볼륨으로 붙입니다.</li>
</ul>

<h2 id="3-jobproject에서-쓰기-링크-또는-경로-참조">3) Job/Project에서 쓰기 (링크 또는 경로 참조)</h2>

<ul>
  <li><strong>링크(맥/리눅스)</strong> :
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> ~/Work/26_Data/raw/db/postgres/salesdb/snapshots/2025/20250826-102000 <span class="se">\</span>
      ~/Work/25_Jobs/JOB-2025-041_report/02_Input/raw/salesdb_20250826
</code></pre></div>    </div>
  </li>
  <li><strong>경로 설정</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/.../03_Config/params.yml</code>에 기록
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">inputs</span><span class="pi">:</span>
  <span class="na">salesdb_snapshot</span><span class="pi">:</span> <span class="s2">"</span><span class="s">../../../26_Data/raw/db/postgres/salesdb/snapshots/2025/20250826-102000"</span>
</code></pre></div>    </div>
  </li>
  <li><strong>크레덴셜</strong> : <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets/.env-db.local</code>에, Job 스크립트는 <code class="language-plaintext highlighter-rouge">source</code>만.</li>
</ul>

<h2 id="4-샘플서브셋-만들기">4) 샘플/서브셋 만들기</h2>

<ul>
  <li>테이블 일부만 CSV로 덤프:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql salesdb_local <span class="nt">-c</span> <span class="s2">"</span><span class="se">\c</span><span class="s2">opy (SELECT * FROM customers LIMIT 1000) TO 'customers_sample.csv' CSV HEADER"</span>
<span class="nb">mv </span>customers_sample.csv ~/Work/26_Data/samples/salesdb/v2025.08/
</code></pre></div>    </div>
  </li>
  <li>반복 쓰면 스크립트화 → <code class="language-plaintext highlighter-rouge">80_Tools/scripts/make_sample_salesdb.sh</code>로 <strong>승격</strong>.</li>
</ul>

<h2 id="5-정제정규화-파이프라인">5) 정제/정규화 파이프라인</h2>

<ul>
  <li>
    <p>ETL/정제 결과는 <code class="language-plaintext highlighter-rouge">processed/&lt;dataset&gt;/&lt;version&gt;/...</code>에 저장(Parquet 권장).</p>
  </li>
  <li>
    <p>파라미터/코드/환경은 해당 Job/Project 쪽에 남기고, <strong>결과물만</strong> processed에.</p>
  </li>
</ul>

<hr />

<h1 id="보안거버넌스-체크리스트">보안/거버넌스 체크리스트</h1>

<ul>
  <li>
    <p><strong>PII/민감도 태깅</strong> : <code class="language-plaintext highlighter-rouge">manifest.yml</code>에 <code class="language-plaintext highlighter-rouge">pii_level</code> 필수.</p>
  </li>
  <li><strong>접근권한</strong> : 고(高) 민감도 스냅샷은 디스크 암호화 또는 gpg로 파일 단위 암호화:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">-c</span> dump.dump.gz   <span class="c"># 복호화는 gpg dump.dump.gz.gpg</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>보존 정책</strong> : <code class="language-plaintext highlighter-rouge">raw/</code>는 N개월 보관(예: 12개월); <code class="language-plaintext highlighter-rouge">cache/</code>는 7~30일 후 정리.</p>
  </li>
  <li><strong>.gitignore</strong> : Work 전체를 git에 올리지 않더라도, <code class="language-plaintext highlighter-rouge">26_Data</code> 루트에 보호용 <code class="language-plaintext highlighter-rouge">.gitignore</code> 권장:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>*
!registry/
!registry/catalog.csv
!.gitignore
</code></pre></div>    </div>
  </li>
</ul>

<p>(의도치 않은 업로드 방지)</p>

<hr />

<h1 id="25_jobs가-가벼워지는-이유">25_Jobs가 가벼워지는 이유</h1>

<ul>
  <li>
    <p><strong>대용량은 전부<code class="language-plaintext highlighter-rouge">26_Data</code></strong>: Job에는 <strong>링크/경로/manifest만</strong>.</p>
  </li>
  <li>
    <p>완료된 Job을 아카이브해도 데이터는 중앙(<code class="language-plaintext highlighter-rouge">26_Data</code>)에 남아 <strong>중복 저장 없음</strong>.</p>
  </li>
</ul>

<hr />

<h1 id="today런처-연결선택">Today/런처 연결(선택)</h1>

<p><code class="language-plaintext highlighter-rouge">10_Today/shortcuts.list</code> 또는 <code class="language-plaintext highlighter-rouge">work-run</code> 자동 러너에서 스냅샷·복원 스크립트를 호출:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Snapshot salesdb | 26_Data/raw/db/postgres/salesdb/snapshots | ./../../../../80_Tools/scripts/pg_snapshot_salesdb.sh
Restore salesdb  | 26_Data/raw/db/postgres/salesdb/snapshots/2025/20250826-102000 | ./../../../../80_Tools/scripts/pg_restore_local.sh
</code></pre></div></div>

<hr />

<h2 id="요약-3">요약</h2>

<ul>
  <li>
    <p><strong>데이터는<code class="language-plaintext highlighter-rouge">26_Data</code>로 일원화</strong>: <code class="language-plaintext highlighter-rouge">raw/</code>(불변) · <code class="language-plaintext highlighter-rouge">processed/</code> · <code class="language-plaintext highlighter-rouge">samples/</code> · <code class="language-plaintext highlighter-rouge">cache/</code> · <code class="language-plaintext highlighter-rouge">schemas/</code> · <code class="language-plaintext highlighter-rouge">registry/</code>.</p>
  </li>
  <li>
    <p><strong>DB 스냅샷은 엔진/DB/연도/타임스탬프</strong> 체계로 보관 + <code class="language-plaintext highlighter-rouge">manifest.yml</code> + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>.</p>
  </li>
  <li>
    <p><strong>Job/Project는 경로 참조/심링크</strong> 만 사용 → 25_Jobs 비대화 방지.</p>
  </li>
  <li>
    <p><strong>비밀/크레덴셜은<code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets</code></strong>, 설정 표준은 <code class="language-plaintext highlighter-rouge">32_SharedConfigs</code>, 개인 오버라이드는 <code class="language-plaintext highlighter-rouge">90_PersonalConfigs</code>.</p>
  </li>
</ul>

<p>원하면 Postgres/MySQL 기준으로 <strong>스냅샷/복원 스크립트 두 개(리눅스·PowerShell·tcsh)</strong>와 <code class="language-plaintext highlighter-rouge">manifest.yml</code> 템플릿, 그리고 <code class="language-plaintext highlighter-rouge">registry/catalog.csv</code> 초기 파일까지 <strong>실제 파일</strong> 로 만들어줄게.</p>

<p class="chat--user">

그런 db는 아니고 dataset (input/output 등)을 저장하려고

</p>

<p>굿! <strong>DB 덤프가 아니라 ‘데이터셋(입력/출력)’</strong>을 보관하려는 거라면, 코드는 그대로 두고 <strong>데이터만 중앙화</strong> 하면 깔끔해요. 아래처럼 정리하면 됩니다.</p>

<hr />

<h1 id="한-줄-요약">한 줄 요약</h1>

<ul>
  <li>
    <p><strong>중앙 저장소</strong> : <code class="language-plaintext highlighter-rouge">Work/26_Data/</code></p>
  </li>
  <li>
    <p><strong>입력 데이터셋</strong> : <code class="language-plaintext highlighter-rouge">26_Data/datasets/…</code></p>
  </li>
  <li>
    <p><strong>가공/출력 데이터셋</strong>(여러 Job에서 재사용할 가치가 있는 결과): <code class="language-plaintext highlighter-rouge">26_Data/derived/…</code></p>
  </li>
  <li>
    <p><strong>Job/Project</strong> 에서는 <strong>경로 참조 또는 심볼릭 링크만 사용</strong> (복사 금지)</p>
  </li>
</ul>

<hr />

<h1 id="폴더-구조권장">폴더 구조(권장)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>26_Data/                                  ← 데이터 전용 루트
├─ registry/                               ← 카탈로그/색인
│  ├─ catalog.csv                          ← 데이터셋 목록/버전/경로
│  └─ README.md                            ← 등록 규칙
├─ datasets/                               ← “입력” 데이터셋(원본/정제)
│  └─ &lt;dataset_name&gt;/
│     └─ vYYYY.MMDD/                       ← 날짜 버전 추천(또는 semver)
│        ├─ raw/                           ← 주로 외부 원본(가급적 불변)
│        ├─ interim/                       ← 일시 정제(중간물)
│        ├─ processed/                     ← 분석/모델에 투입 가능한 정제본
│        ├─ samples/                       ← 소용량 서브셋(테스트/예제)
│        ├─ docs/                          ← README, dataset_card.md
│        ├─ manifest.yml                   ← 출처/라이선스/체크섬 등 메타
│        └─ SHA256SUMS                     ← 무결성
├─ derived/                                ← “출력/가공 결과” 데이터셋(재사용 가치 있음)
│  └─ &lt;artifact_name&gt;/
│     └─ vYYYY.MMDD/
│        ├─ data/                          ← 결과물(예: parquet/csv/images)
│        ├─ metrics/                       ← 점수/리포트/지표
│        ├─ docs/
│        ├─ manifest.yml
│        └─ SHA256SUMS
└─ cache/                                  ← 언제 지워도 되는 캐시(속도용)
</code></pre></div></div>

<blockquote>
  <p><strong>의미</strong></p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">datasets/</code> = 입력 측 “공급원” 저장소</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">derived/</code> = 여러 Job에서 재사용할 <strong>결과물</strong> 저장소(“출력 데이터셋” 승격본)</p>
    </li>
    <li>
      <p>Job 안의 <code class="language-plaintext highlighter-rouge">06_Export</code>는 <strong>전달본</strong> 이고, 장기 재사용 가치가 생기면 <code class="language-plaintext highlighter-rouge">derived/</code>로 승격</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="네이밍--메타짧게">네이밍 &amp; 메타(짧게)</h1>

<ul>
  <li>
    <p><strong>버전</strong> : <code class="language-plaintext highlighter-rouge">vYYYY.MMDD</code> (예: <code class="language-plaintext highlighter-rouge">v2025.0825</code>) 권장. 바꾸면 <code class="language-plaintext highlighter-rouge">manifest.yml</code>에 이유 기록.</p>
  </li>
  <li>
    <p><strong>파일 형식</strong> : 가능하면 <strong>Parquet</strong>(열 지향, 스키마/압축 유리), 그 외 CSV/JSON.</p>
  </li>
  <li><strong>manifest.yml 예시</strong>
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">ad_events</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">v2025.0826</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">dataset</span>            <span class="c1"># or derived</span>
<span class="na">license</span><span class="pi">:</span> <span class="s">internal</span>
<span class="na">source</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ad_platform</span><span class="nv"> </span><span class="s">export</span><span class="nv"> </span><span class="s">API"</span>
<span class="na">schema</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">rows</span><span class="pi">:</span> <span class="nv">5_021_113</span><span class="pi">,</span> <span class="nv">format</span><span class="pi">:</span> <span class="nv">parquet</span><span class="pi">}</span>
<span class="na">pii_level</span><span class="pi">:</span> <span class="s">low</span>           <span class="c1"># none/low/medium/high</span>
<span class="na">checksum</span><span class="pi">:</span>
  <span class="na">processed/events.parquet</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ab12...ef"</span>
<span class="na">notes</span><span class="pi">:</span> <span class="s2">"</span><span class="s">tz</span><span class="nv"> </span><span class="s">normalized</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">UTC,</span><span class="nv"> </span><span class="s">invalid</span><span class="nv"> </span><span class="s">rows</span><span class="nv"> </span><span class="s">dropped"</span>
</code></pre></div>    </div>
  </li>
  <li><strong>dataset_card.md</strong> : 용도/전처리/열 설명/예시 쿼리 1~2개만.</li>
</ul>

<hr />

<h1 id="jobproject에서-쓰는-법복사-금지-링크경로-참조">Job/Project에서 쓰는 법(복사 금지! 링크/경로 참조)</h1>

<h3 id="심볼릭-링크맥리눅스">심볼릭 링크(맥/리눅스)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> ~/Work/26_Data/datasets/ad_events/v2025.0826/processed <span class="se">\</span>
      ~/Work/25_Jobs/JOB-2025-041_report/02_Input/raw/ad_events
</code></pre></div></div>

<h3 id="powershell윈도우-디렉터리-링크">PowerShell(윈도우, 디렉터리 링크)</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="err">^</span><span class="w">
  </span><span class="s2">"%USERPROFILE%\Work\25_Jobs\JOB-2025-041_report\02_Input\raw\ad_events"</span><span class="w"> </span><span class="err">^</span><span class="w">
  </span><span class="s2">"%USERPROFILE%\Work\26_Data\datasets\ad_events\v2025.0826\processed"</span><span class="w">
</span></code></pre></div></div>

<h3 id="job-설정에-경로-기입">Job 설정에 경로 기입</h3>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 25_Jobs/.../03_Config/params.yml</span>
<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">ad_events_dir</span><span class="pi">:</span> <span class="s2">"</span><span class="s">../../../26_Data/datasets/ad_events/v2025.0826/processed"</span>
</code></pre></div></div>

<hr />

<h1 id="워크플로우간단">워크플로우(간단)</h1>

<h2 id="a-새-입력-데이터셋-추가">A) 새 “입력” 데이터셋 추가</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">26_Data/datasets/&lt;name&gt;/vYYYY.MMDD/</code> 생성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">raw/</code>에 원본 배치 → 필요 시 <code class="language-plaintext highlighter-rouge">interim/</code>→<code class="language-plaintext highlighter-rouge">processed/</code> 정제</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">manifest.yml</code>/<code class="language-plaintext highlighter-rouge">dataset_card.md</code>/<code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 작성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">registry/catalog.csv</code>에 한 줄 등록</p>
  </li>
</ol>

<h2 id="b-job에서-사용">B) Job에서 사용</h2>

<ol>
  <li>
    <p>심링크 or <code class="language-plaintext highlighter-rouge">params.yml</code>에 절대/상대 경로 지정</p>
  </li>
  <li>
    <p>실행 시 <strong>입력버전</strong> 을 매니페스트에 기록(재현성)</p>
  </li>
</ol>

<h2 id="c-job-출력을-재사용-데이터셋으로-승격">C) Job “출력”을 재사용 데이터셋으로 승격</h2>

<ol>
  <li>
    <p>Job의 <code class="language-plaintext highlighter-rouge">06_Export</code> 결과 중 <strong>일반화된 산출물</strong> 만 추려</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">26_Data/derived/&lt;artifact&gt;/vYYYY.MMDD/</code>에 배치</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">manifest.yml</code>과 지표(<code class="language-plaintext highlighter-rouge">metrics/</code>) 작성 → <code class="language-plaintext highlighter-rouge">catalog.csv</code> 등록</p>
  </li>
</ol>

<h2 id="d-정리청소">D) 정리/청소</h2>

<ul>
  <li>
    <p>60~90일 지난 <code class="language-plaintext highlighter-rouge">interim/</code>, 대용량 CSV는 <strong>압축 또는 삭제</strong>(hash/로그만 보존)</p>
  </li>
  <li>
    <p><strong>cache/</strong>는 언제든 삭제 가능</p>
  </li>
</ul>

<hr />

<h1 id="do--dont-1">Do / Don’t</h1>

<ul>
  <li>
    <p>✅ <strong>중앙화</strong> : 입력/출력 데이터셋은 <strong>26_Data</strong> 에만, Job/Project는 링크/경로만</p>
  </li>
  <li>
    <p>✅ <strong>버전 고정</strong> : Job 매니페스트에 <strong>dataset 버전</strong> 을 박아두기</p>
  </li>
  <li>
    <p>✅ <strong>작은 샘플</strong> : <code class="language-plaintext highlighter-rouge">samples/</code>를 만들어 테스트/예제에 활용</p>
  </li>
  <li>
    <p>❌ <strong>복사본 남기기</strong> : Job 안에 원본 데이터를 복제해서 쌓지 않기</p>
  </li>
  <li>
    <p>❌ <strong>비밀 넣기</strong> : 자격증명/토큰은 <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets/</code>에만</p>
  </li>
</ul>

<hr />

<p>원하면 <strong>초기 스캐폴드(폴더/manifest 템플릿/csv 카탈로그)</strong>와<br />
<code class="language-plaintext highlighter-rouge">symlink</code>/<code class="language-plaintext highlighter-rouge">catalog 등록</code>을 자동으로 해주는 간단 스크립트(bash·PowerShell·tcsh)도 바로 만들어 줄게.</p>

<p class="chat--user">

번호는 26번 괜찮아?

</p>

<p>짧은 결론: <strong>네, 26번 아주 괜찮아요.</strong><br />
지금 쓰는 번호 체계(20=Projects, 25=Jobs, 30대=운영/학습, 40=레퍼런스…)에서 <strong>데이터셋은 Jobs보다 살짝 뒤</strong> 에 두면 “코드→실행→데이터 자산” 흐름이 자연스럽고, 26은 그 목적에 딱 맞습니다.</p>

<hr />

<h2 id="왜-26인가-step-by-step">왜 26인가 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>시각적 그룹화</strong> :<br />
<code class="language-plaintext highlighter-rouge">20_Projects → 25_Jobs → 26_(Data|Datasets) → 30_Areas</code><br />
= 코드 → 실행 → <strong>데이터 자산(공유 입력/출력)</strong> → 장기 운영 순서로 정렬.</p>
  </li>
  <li>
    <p><strong>근접성</strong> :<br />
Job이 쓰는 입력/출력 경로를 <strong>한 단계 옆(25↔26)</strong> 에 두면 경로 참조/심볼릭 링크가 짧고 관리가 쉬움.</p>
  </li>
  <li>
    <p><strong>확장 여지</strong> :<br />
27~29 비워둬서, 나중에 <code class="language-plaintext highlighter-rouge">27_ModelStore</code>, <code class="language-plaintext highlighter-rouge">28_FeatureStore</code> 같은 확장도 자연스럽게 끼워 넣기 가능.</p>
  </li>
</ol>

<hr />

<h2 id="이름은-26_data-vs-26_datasets-중-택1">이름은 <code class="language-plaintext highlighter-rouge">26_Data</code> vs <code class="language-plaintext highlighter-rouge">26_Datasets</code> 중 택1</h2>

<ul>
  <li>
    <p><strong>26_Datasets</strong> : “입력/출력 데이터셋”에 초점(당신 목적에 가장 명확)</p>
  </li>
  <li>
    <p><strong>26_Data</strong> : DB 덤프·원천 파일·캐시까지 <strong>넓게</strong> 포함할 때</p>
  </li>
</ul>

<blockquote>
  <p>지금 대화 맥락상 <strong><code class="language-plaintext highlighter-rouge">26_Datasets</code></strong> 추천. (원하면 <code class="language-plaintext highlighter-rouge">datasets/derived/cache/registry</code> 하위 그대로 유지)</p>
</blockquote>

<p>예시:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>26_Datasets/
  registry/         # 카탈로그
  datasets/         # 입력 데이터셋(버전별: vYYYY.MMDD)
  derived/          # 여러 Job에서 재사용할 출력 데이터셋(승격본)
  cache/            # 삭제 가능 캐시
</code></pre></div></div>

<hr />

<h2 id="이미-만들어-둔-구조와의-연결-규칙요약">이미 만들어 둔 구조와의 연결 규칙(요약)</h2>

<ul>
  <li>
    <p><strong>Job/Project에는 복사 금지</strong> → <strong>심볼릭 링크/경로만</strong> 참조</p>
  </li>
  <li>
    <p>Job 매니페스트에 <strong>dataset 버전</strong> 기록(재현성)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">06_Export</code>의 결과 중 “재사용 가치” 있는 건 <code class="language-plaintext highlighter-rouge">26_Datasets/derived</code>로 <strong>승격</strong></p>
  </li>
</ul>

<hr />

<h2 id="바꾸고-싶을-때안전-리네임">바꾸고 싶을 때(안전 리네임)</h2>

<p>bash/zsh:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work
<span class="nb">mv </span>26_Data 26_Datasets 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/26_Data/#/26_Datasets/#g'</span> 10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<p>PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\26_Data"</span><span class="w"> </span><span class="s2">"26_Datasets"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/26_Data/'</span><span class="p">,</span><span class="s1">'/26_Datasets/'</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="최종-추천-한-줄">최종 추천 한 줄</h2>

<ul>
  <li><strong>번호는 26 유지</strong> , 이름은 <strong><code class="language-plaintext highlighter-rouge">26_Datasets</code></strong>로 명확성↑ — 지금 쓰는 워크플로(25_Jobs, 75_Releases, 32_SharedConfigs, 90_PersonalConfigs)와도 정렬이 아주 잘 맞습니다.</li>
</ul>

<p class="chat--user">

전체 구조를 마지막으로 한 번 만들어줘(띄어쓰기 대신에 폴더 선을 이용해서 표현해줬으면 좋겠어, 폴더명은 영어, 설명은 한글로). 그리고 사용 시 주요 주의점도 밑에 써줘.

</p>

<p>아래 트리를 그대로 복붙해서 문서에 쓰면 돼요.<br />
(좌측은 <strong>폴더명(영문)</strong> , <code class="language-plaintext highlighter-rouge">-</code> 오른쪽은 <strong>설명(한글)</strong> 입니다. 하위 예시도 넣었어요.)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/                                           - 1인 개발용 작업 루트
├─ 00_Inbox/                                    - 급히 던져두는 임시함(매일/주기적 비우기)
├─ 10_Today/                                    - 오늘 작업 대시보드(콘솔 실행 출발점)
│  ├─ shortcuts.list                             - today 런처가 읽는 "라벨 | 경로 | 명령" 목록
│  └─ wrappers/                                  - 파이프/복잡 인자용 임시 래퍼 스크립트(단기 보관)
├─ 20_Projects/                                 - 툴(파이썬 패키지) 개발(코드 수명 중심)
│  └─ PRJ-YYYY-NNN_name/                         - 개별 프로젝트(예: PRJ-2025-001_sample_app)
│     ├─ src/&lt;package_name&gt;/                     - 패키지 소스(예: sample_app/)
│     ├─ tests/                                  - pytest 테스트
│     ├─ scripts/                                - install/run/build/lint/test 스크립트(.sh/.ps1)
│     ├─ examples/{data,scripts,docs}/           - 배포용 최소 실행 예제
│     ├─ issues/BUG-YYYY-NNN/                    - 버그/개선 이슈 노트
│     ├─ docs/                                   - 설계·ADR·가이드
│     ├─ .devcontainer/                          - 개발 컨테이너 설정
│     └─ pyproject.toml, README.md, .gitignore, .editorconfig
├─ 25_Jobs/                                     - “산출물 작업 단위”(프로세스 수명 중심)
│  ├─ _active/                                   - 진행 중 작업(최대 12개 유지)
│  ├─ _templates/                                - 복제용 스캐폴드(JOB/BUG/SMOKE/LAB/EX/REL)
│  ├─ JOB/                                       - 일반 산출 작업(연도별 보관)
│  │  └─ 2025/
│  ├─ BUG/                                       - 배포 버그 재현/증거/검증
│  │  └─ 2025/
│  ├─ SMOKE/                                     - 새 툴 스모크/feasibility
│  │  └─ 2025/
│  ├─ LAB/                                       - 재현형 교육 실습
│  │  └─ 2025/
│  ├─ EX/                                        - 배포 예제 패키징
│  │  └─ 2025/
│  └─ REL/                                       - 릴리스 준비/검증(Job 형태)
│     └─ 2025/
├─ 26_Datasets/                                 - 데이터셋 중앙 저장소(입력/출력 자산)
│  ├─ registry/                                   - 카탈로그(색인)
│  │  ├─ catalog.csv                              - 데이터셋 목록/버전/경로
│  │  └─ README.md                                - 등록 규칙
│  ├─ datasets/                                   - “입력” 데이터셋(원본/정제)
│  │  └─ &lt;dataset_name&gt;/vYYYY.MMDD/               - 날짜 버전 권장(예: v2025.0826)
│  │     ├─ raw/                                  - 외부 원본(불변 취급)
│  │     ├─ interim/                              - 일시 정제(중간물)
│  │     ├─ processed/                            - 분석/모델 투입용 정제본
│  │     ├─ samples/                              - 소용량 서브셋(테스트/예제)
│  │     ├─ docs/                                 - README, dataset_card.md
│  │     ├─ manifest.yml                          - 출처/스키마/체크섬/라이선스
│  │     └─ SHA256SUMS                            - 무결성 체크섬
│  ├─ derived/                                    - 재사용 가치 있는 “출력” 데이터셋(승격본)
│  │  └─ &lt;artifact_name&gt;/vYYYY.MMDD/
│  │     ├─ data/                                 - 결과물(예: parquet/csv/images)
│  │     ├─ metrics/                              - 점수·지표·리포트
│  │     ├─ docs/, manifest.yml, SHA256SUMS
│  └─ cache/                                      - 언제 지워도 되는 캐시
├─ 30_Areas/                                    - 장기 운영 영역(지속 업무)
│  ├─ worklog/YYYY/YY-MM/DATE.md                 - 일일/주간 5줄 로그
│  ├─ environments/                               - 공통 환경 전략(예: 파이썬 버전 정책)
│  └─ knowledge_base/{tips,cheatsheets,howtos}/   - 축적 지식: 팁/치트시트/가이드
├─ 31_Labs/                                     - 실험실(짧은 실습/프로토타입; 재현 불필요)
│  └─ jupyter/                                   - 스크래치 노트북(예: regex_scratch.ipynb)
├─ 32_SharedConfigs/                            - 공유/골든 설정(문서화·재사용)
│  ├─ global/{vscode,ruff,pytest,pyinstaller,pyside6,jupyter}/
│  └─ projects/&lt;project_slug&gt;/                   - 특정 프로젝트 기본설정
├─ 40_Resources/                                - 참고 자료(교육/매뉴얼/스펙—설정 제외)
│  ├─ edu/{courses,tutorials,papers/{to_read,reading_notes,summaries}}/
│  ├─ manuals/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/      - 매뉴얼/가이드(PDF/HTML/MD)
│  └─ reference/                                 - 표준/스펙 문서 등 읽을거리
├─ 50_Snippets/{sql,text,bash}/                 - 재사용 코드/문구 조각(짧은 예제·원라이너)
├─ 60_Assets/                                   - 로고/폰트/템플릿 등 브랜딩 리소스
├─ 70_Exports/                                  - 여러 Job의 “최종 전달본” 모아보기(선택)
├─ 75_Releases/                                 - 유저 배포 전용(버전드)
│  └─ &lt;project_slug&gt;/
│     ├─ vX.Y.Z/{installers,wheels,portable,docs,licenses,checksums,ReleaseNotes.md}
│     └─ latest/                                - 최신 버전 포인터
├─ 80_Tools/                                    - 설치파일/포터블/자동화 스크립트
│  ├─ installers/                                - 오프라인 설치 + install_notes.md(버전·체크섬)
│  ├─ bin/                                       - 포터블 실행파일(PATH 추가 가능)
│  ├─ scripts/                                   - bootstrap/release/checksum 등 공용 스크립트
│  └─ devcontainer/                              - 개발 컨테이너 도구
├─ 85_Environments/                             - 재현 가능한 개발 환경 샘플
│  ├─ conda/environment.yml
│  ├─ venv/README.md
│  └─ docker/Dockerfile
├─ 90_PersonalConfigs/                          - 개인 설정(오버라이드·비공개)
│  ├─ os/{mac,win,linux}/                        - OS별 설정(키맵/입력기 등)
│  ├─ shell/{bash,zsh,tcsh,powershell}/          - 프로필·별칭
│  ├─ editors/vscode/{settings.user.json,keybindings.user.json}
│  ├─ git/.gitconfig.local
│  ├─ python/{pip.conf,poetry.toml,pypirc}
│  ├─ tools/                                     - 각 툴 개인 프리셋
│  ├─ secrets/README.md                          - (실제 비밀은 두지 말 것)
│  └─ .gitignore                                 - *.local, secrets/*, *.pem 등 넓게 제외
└─ 99_Archive/                                  - 완료 Project/Job/자료 장기 보관(읽기 전용)
</code></pre></div></div>

<hr />

<h2 id="사용-시-주요-주의점-핵심-체크리스트">사용 시 주요 주의점 (핵심 체크리스트)</h2>

<ol>
  <li>
    <p><strong>단일 정본 원칙</strong></p>

    <ul>
      <li>
        <p>코드 정본은 <code class="language-plaintext highlighter-rouge">20_Projects/</code>, 산출 파이프라인은 <code class="language-plaintext highlighter-rouge">25_Jobs/</code>, 데이터셋은 <code class="language-plaintext highlighter-rouge">26_Datasets/</code>에만 둡니다.</p>
      </li>
      <li>
        <p>다른 위치에는 <strong>복사하지 말고</strong> 경로 참조/심볼릭 링크만 사용하세요.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>10_Today는 ‘대시보드’</strong></p>

    <ul>
      <li>
        <p>원본을 옮기지 않습니다. 링크/런처만 두고, 편집은 본래 위치에서.</p>
      </li>
      <li>
        <p>콘솔 위주면 <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 또는 <code class="language-plaintext highlighter-rouge">work-run</code> 자동 탐색 러너만 사용.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>25_Jobs 비대화 방지</strong></p>

    <ul>
      <li>
        <p>새 작업은 항상 <code class="language-plaintext highlighter-rouge">25_Jobs/_active/타입-YYYY-NNN_제목/</code>에서 시작 → 완료 즉시 <code class="language-plaintext highlighter-rouge">타입/연도/</code>로 이동.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">_active/</code>는 최대 12개 규칙, 30일 지난 로그는 압축, 중간물은 정리.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>데이터 버전/무결성</strong></p>

    <ul>
      <li>
        <p>입력/출력 데이터셋은 <code class="language-plaintext highlighter-rouge">vYYYY.MMDD</code> 버전으로 관리하고 <code class="language-plaintext highlighter-rouge">manifest.yml</code> + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>를 필수 기록.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">26_Datasets/cache/</code>는 언제든 삭제 가능. 중요한 데이터는 <code class="language-plaintext highlighter-rouge">raw/</code> 또는 <code class="language-plaintext highlighter-rouge">processed/</code>에.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>설정 레이어링(우선순위)</strong></p>

    <ul>
      <li>
        <p>Project 로컬 → <code class="language-plaintext highlighter-rouge">90_PersonalConfigs</code>(개인 오버라이드) → <code class="language-plaintext highlighter-rouge">32_SharedConfigs/projects/&lt;proj&gt;</code> → <code class="language-plaintext highlighter-rouge">32_SharedConfigs/global</code>.</p>
      </li>
      <li>
        <p>VSCode/ruff/pytest 등은 <code class="language-plaintext highlighter-rouge">*.local.*</code>로 개인 설정을 분리하면 충돌 최소화.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>보안/비밀 관리</strong></p>

    <ul>
      <li>
        <p>자격증명/토큰/키는 <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets/</code>에만 두고, 코드/스크립트는 <strong>환경변수로 읽기</strong>.</p>
      </li>
      <li>
        <p>레포에 올릴 땐 <code class="language-plaintext highlighter-rouge">.gitignore</code>가 비밀/대용량을 확실히 제외하는지 확인.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>깊이 제한 &amp; 네이밍</strong></p>

    <ul>
      <li>
        <p>폴더 깊이는 <strong>최대 3단</strong> 을 목표로(탐색/권한/동기화 이슈 감소).</p>
      </li>
      <li>
        <p>규칙적 네이밍: <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_이름</code>, <code class="language-plaintext highlighter-rouge">JOB/BUG/SMOKE/LAB/EX/REL-연도-번호_이름</code>, 파일은 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code>.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>릴리스 품질 보장</strong></p>

    <ul>
      <li>
        <p>배포는 항상 <code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/</code>로만 공유. checksums/와 <code class="language-plaintext highlighter-rouge">ReleaseNotes.md</code> 포함.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">latest/</code> 업데이트 시 실제 버전 폴더 내용과 일치 확인.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>대용량 데이터 분리 고려</strong></p>

    <ul>
      <li>정말 큰 원천/캐시는 <code class="language-plaintext highlighter-rouge">26_Datasets</code> 하위에만 두고, Job/Project에는 링크로만 연결. 백업 정책도 별도로.</li>
    </ul>
  </li>
  <li>
    <p><strong>운영 루틴</strong></p>
  </li>
</ol>

<ul>
  <li>
    <p>매일: <code class="language-plaintext highlighter-rouge">00_Inbox</code> 비우기, Today 정리.</p>
  </li>
  <li>
    <p>주 1회: <code class="language-plaintext highlighter-rouge">_active</code> 슬림화, <code class="language-plaintext highlighter-rouge">shortcuts.list</code> Top10 유지, 로그 압축.</p>
  </li>
  <li>
    <p>월 1회: 데이터 카탈로그 갱신, 불용 Job/데이터 아카이브.</p>
  </li>
</ul>

<p>필요하면 이 구조를 <strong>초기 폴더/README/샘플 파일 세트</strong> 로 바로 생성해 드릴게요. (선호 셸: bash/zsh/tcsh/PowerShell 알려주면 해당 스크립트도 포함해서!)</p>

<p class="chat--user">

manifest.yml는 어떻게 작성해야해? 그리고 checksum는 어떻게 만들어?

</p>

<p>좋아! <strong>manifest.yml</strong> 은 “이 데이터셋이 무엇이며, 어디서 왔고, 어떻게 만들었고, 무엇으로 검증했는가”를 기록하는 <strong>증빙 카드</strong> 예요.<br />
<strong>checksum</strong> 은 파일 무결성을 확인하기 위한 <strong>지문</strong> 이고, 보통 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>라는 텍스트 파일로 함께 둡니다.</p>

<p>아래를 그대로 따라 하면 됩니다.</p>

<hr />

<h1 id="1-manifestyml-작성-가이드">1) <code class="language-plaintext highlighter-rouge">manifest.yml</code> 작성 가이드</h1>

<h2 id="위치">위치</h2>

<ul>
  <li>각 버전 루트에 둡니다.<br />
예:<br />
<code class="language-plaintext highlighter-rouge">Work/26_Datasets/datasets/&lt;dataset_name&gt;/vYYYY.MMDD/manifest.yml</code><br />
<code class="language-plaintext highlighter-rouge">Work/26_Datasets/derived/&lt;artifact_name&gt;/vYYYY.MMDD/manifest.yml</code></li>
</ul>

<h2 id="최소-필수-필드-작게-시작">최소 필수 필드 (작게 시작)</h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">ad_events</span>                  <span class="c1"># 데이터셋/아티팩트 이름</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">dataset</span>                    <span class="c1"># dataset | derived</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">v2025.0826</span>             <span class="c1"># 버전(권장: vYYYY.MMDD)</span>
<span class="na">created_at</span><span class="pi">:</span> <span class="s">2025-08-26T14:30:00+09:00</span>
<span class="na">owner</span><span class="pi">:</span> <span class="s">your.name@company.com</span>

<span class="na">source</span><span class="pi">:</span>                          <span class="c1"># 어디서 왔는가(입력 데이터셋이면 필수)</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">external</span>                 <span class="c1"># external | internal | manual</span>
  <span class="na">detail</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ad_platform</span><span class="nv"> </span><span class="s">export</span><span class="nv"> </span><span class="s">API</span><span class="nv"> </span><span class="s">v3"</span>

<span class="na">schema</span><span class="pi">:</span>                          <span class="c1"># 간단 스키마(요약)</span>
  <span class="na">format</span><span class="pi">:</span> <span class="s">parquet</span>                <span class="c1"># parquet | csv | json | image | ...</span>
  <span class="na">rows</span><span class="pi">:</span> <span class="m">5021113</span>
  <span class="na">columns</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">event_id</span><span class="pi">,</span> <span class="nv">type</span><span class="pi">:</span> <span class="nv">string</span><span class="pi">}</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">ts_utc</span><span class="pi">,</span>   <span class="nv">type</span><span class="pi">:</span> <span class="nv">timestamp</span><span class="pi">}</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">campaign</span><span class="pi">,</span> <span class="nv">type</span><span class="pi">:</span> <span class="nv">string</span><span class="pi">}</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">cost</span><span class="pi">,</span>     <span class="nv">type</span><span class="pi">:</span> <span class="nv">float</span><span class="pi">}</span>

<span class="na">pii_level</span><span class="pi">:</span> <span class="s">low</span>                   <span class="c1"># none | low | medium | high</span>
<span class="na">license</span><span class="pi">:</span> <span class="s">internal</span>                <span class="c1"># 라이선스/사용 제한</span>

<span class="na">files</span><span class="pi">:</span>                           <span class="c1"># 포함 파일 요약(상대경로)</span>
  <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">processed/events.parquet</span>
    <span class="na">bytes</span><span class="pi">:</span> <span class="m">812345678</span>
    <span class="na">sha256</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ab12...ef"</span>          <span class="c1"># 선택(있으면 SHA256SUMS와 동일해야 함)</span>

<span class="na">notes</span><span class="pi">:</span> <span class="s2">"</span><span class="s">tz</span><span class="nv"> </span><span class="s">normalized</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">UTC,</span><span class="nv"> </span><span class="s">invalid</span><span class="nv"> </span><span class="s">rows</span><span class="nv"> </span><span class="s">dropped"</span>
</code></pre></div></div>

<h2 id="파생derived-데이터셋일-때의-추가-필드">파생(derived) 데이터셋일 때의 추가 필드</h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">kind</span><span class="pi">:</span> <span class="s">derived</span>
<span class="na">lineage</span><span class="pi">:</span>                          <span class="c1"># 어떤 입력/코드/실행에서 나왔는가</span>
  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">ad_events</span><span class="pi">,</span> <span class="nv">version</span><span class="pi">:</span> <span class="nv">v2025.0826</span><span class="pi">,</span> <span class="nv">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">../../../datasets/ad_events/v2025.0826/processed"</span><span class="pi">}</span>
  <span class="na">code</span><span class="pi">:</span>
    <span class="na">repo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">PRJ-2025-001_sample_app"</span>       <span class="c1"># 또는 Git URL</span>
    <span class="na">commit</span><span class="pi">:</span> <span class="s2">"</span><span class="s">a1b2c3d"</span>                     <span class="c1"># 생성에 사용한 커밋/태그</span>
  <span class="na">job</span><span class="pi">:</span>
    <span class="na">id</span><span class="pi">:</span> <span class="s2">"</span><span class="s">JOB-2025-041_reportX"</span>            <span class="c1"># (있으면) 생산 Job 코드</span>

<span class="na">metrics</span><span class="pi">:</span>                          <span class="c1"># 품질/성능 요약(선택)</span>
  <span class="na">records_after_filters</span><span class="pi">:</span> <span class="m">4988333</span>
  <span class="na">null_rate_cost</span><span class="pi">:</span> <span class="m">0.0004</span>
  <span class="na">sanity_checks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">timestamp</span><span class="nv"> </span><span class="s">not</span><span class="nv"> </span><span class="s">null:</span><span class="nv"> </span><span class="s">pass"</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">cost</span><span class="nv"> </span><span class="s">&gt;=</span><span class="nv"> </span><span class="s">0:</span><span class="nv"> </span><span class="s">pass"</span>
</code></pre></div></div>

<h2 id="확장-필드필요할-때만">확장 필드(필요할 때만)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tool_versions</code>: Python/패키지/CLI 버전</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">constraints</code>: 사용 제한, 만료일</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">hash_tree</code>: 전체 디렉터리 해시(고급)</p>
  </li>
</ul>

<blockquote>
  <p><strong>규칙</strong></p>

  <ul>
    <li>
      <p><strong>짧게</strong> 시작(필수만) → 진짜 필요한 메타만 점진적으로 추가</p>
    </li>
    <li>
      <p><strong>경로는 상대경로</strong> 로 적되, 항상 <strong>버전 루트 기준</strong> 으로 기록</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="2-sha256sums-만들기-무결성-체크섬">2) <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 만들기 (무결성 체크섬)</h1>

<h2 id="파일-위치이름">파일 위치/이름</h2>

<ul>
  <li>
    <p>각 버전 루트에 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>(확장자 없음)로 둡니다.</p>
  </li>
  <li>
    <p>내용 포맷:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;sha256&gt;  &lt;상대경로&gt;
</code></pre></div>    </div>
  </li>
</ul>

<p>예:<br />
<code class="language-plaintext highlighter-rouge">d2c7...9fa processed/events.parquet</code></p>

<h2 id="macos--linux-bashzsh">macOS / Linux (bash/zsh)</h2>

<p><strong>버전 루트에서 실행:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) 기존 파일 제거(있다면)</span>
<span class="nb">rm</span> <span class="nt">-f</span> SHA256SUMS

<span class="c"># 2) 모든 파일에 대해 sha256 생성(숨김·SUMS 제외)</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'SHA256SUMS'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.*'</span> <span class="nt">-print0</span> <span class="se">\</span>
| xargs <span class="nt">-0</span> <span class="nb">sha256sum</span> <span class="o">&gt;</span> SHA256SUMS
<span class="c"># macOS에는 sha256sum이 없을 수 있음 → 대체:</span>
<span class="c"># find . -type f ! -name 'SHA256SUMS' ! -name '.*' -exec sh -c 'shasum -a 256 "$1" | sed "s#  #  #"' _ {} \; &gt; SHA256SUMS</span>

<span class="c"># 3) 검증(선택)</span>
<span class="nb">sha256sum</span> <span class="nt">-c</span> SHA256SUMS
<span class="c"># macOS 대체:</span>
<span class="c"># awk '{print $2}' SHA256SUMS | while read -r f; do</span>
<span class="c">#   calc=$(shasum -a 256 "$f" | awk '{print $1}')</span>
<span class="c">#   want=$(grep "  $f$" SHA256SUMS | awk '{print $1}')</span>
<span class="c">#   [[ "$calc" == "$want" ]] &amp;&amp; echo "OK  $f" || echo "FAIL  $f"</span>
<span class="c"># done</span>
</code></pre></div></div>

<h2 id="windows-powershell-2">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 버전 루트에서 실행:</span><span class="w">
</span><span class="n">Remove-Item</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nt">-Recurse</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s1">'SHA256SUMS'</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="o">-not</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="o">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s1">'.'</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Get-FileHash</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">SHA256</span><span class="p">)</span><span class="o">.</span><span class="nf">Hash</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w">
  </span><span class="nv">$rel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="o">.</span><span class="nf">Substring</span><span class="p">((</span><span class="n">Get-Location</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">Length</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">1</span><span class="p">)</span><span class="o">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s1">'\'</span><span class="p">,</span><span class="s1">'/'</span><span class="p">)</span><span class="w">
  </span><span class="s2">"</span><span class="nv">$h</span><span class="s2">  </span><span class="nv">$rel</span><span class="s2">"</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Content</span><span class="w"> </span><span class="nt">-NoNewline</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w">

</span><span class="c"># 검증:</span><span class="w">
</span><span class="n">Get-Content</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$parts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$_</span><span class="w"> </span><span class="o">-split</span><span class="w"> </span><span class="s1">'\s\s'</span><span class="w">
  </span><span class="nv">$want</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w"> </span><span class="nv">$file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w">
  </span><span class="nv">$got</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Get-FileHash</span><span class="w"> </span><span class="nv">$file</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">SHA256</span><span class="p">)</span><span class="o">.</span><span class="nf">Hash</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w">
  </span><span class="nx">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$got</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$want</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"OK  </span><span class="nv">$file</span><span class="s2">"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"FAIL  </span><span class="nv">$file</span><span class="s2">"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="tcsh-1">tcsh</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# 버전 루트에서 실행:
rm -f SHA256SUMS
# GNU coreutils(sha256sum)가 있으면:
find . -type f ! -name 'SHA256SUMS' ! -name '.*' -print0 | xargs -0 sha256sum &gt; SHA256SUMS
# 없고 macOS 기본이라면:
# find . -type f ! -name 'SHA256SUMS' ! -name '.*' -exec sh -c 'shasum -a 256 "$1"' _ {} \; &gt; SHA256SUMS
</code></pre></div></div>

<h3 id="생성검증-스크립트로-고정추천">생성/검증 스크립트로 고정(추천)</h3>

<ul>
  <li>
    <p><strong>공용</strong> : <code class="language-plaintext highlighter-rouge">Work/80_Tools/scripts/checksum_all.sh|ps1|csh</code></p>
  </li>
  <li>
    <p><strong>사용법</strong> : 버전 루트에서 <code class="language-plaintext highlighter-rouge">checksum_all.sh</code> 실행 → <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성 → <code class="language-plaintext highlighter-rouge">-c</code> 옵션으로 검증</p>
  </li>
</ul>

<hr />

<h1 id="3-함께-쓰는-운영-팁">3) 함께 쓰는 운영 팁</h1>

<ul>
  <li>
    <p><strong>manifest vs SHA256SUMS</strong></p>

    <ul>
      <li>
        <p><strong>SHA256SUMS</strong> : 파일 <strong>전체 목록</strong> 과 해시(머신용, 검증 전용)</p>
      </li>
      <li>
        <p><strong>manifest.yml</strong> : 주요 파일 요약/메타(<strong>사람이 읽기 쉬운 카드</strong>)<br />
→ 둘 다 있되, manifest의 <code class="language-plaintext highlighter-rouge">files[].sha256</code>은 <strong>핵심 파일만</strong> 넣어도 충분</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>무결성 실패 시</strong></p>

    <ul>
      <li>
        <p>전송/압축/복사 과정에서 손상 가능 → 원본에서 다시 가져와 SUMS 재생성</p>
      </li>
      <li>
        <p>라인 엔딩/권한과 무관(바이너리 기준)이라 신뢰도 높음</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>제외 대상</strong></p>

    <ul>
      <li>
        <p>SUMS 만들 때 <strong>숨김파일(<code class="language-plaintext highlighter-rouge">.*</code>)</strong>과 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 자신은 제외</p>
      </li>
      <li>
        <p>캐시/임시 파일은 <code class="language-plaintext highlighter-rouge">cache/</code>에만 두고 SUMS에서 자연히 제외되게</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>대용량 최적화</strong></p>

    <ul>
      <li>Parquet 등 대형 파일은 <strong>생성 직후</strong> SUMS를 만들어두고, 나중엔 변경 금지(불변 원칙)</li>
    </ul>
  </li>
  <li>
    <p><strong>버전 규칙</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">vYYYY.MMDD</code>로 <strong>스냅샷 의미</strong> 가 분명해짐. 파생물도 동일 규칙 사용</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="빠른-시작복붙용-템플릿">빠른 시작(복붙용 템플릿)</h2>

<p><strong>입력 데이터셋:<code class="language-plaintext highlighter-rouge">manifest.yml</code></strong></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">&lt;dataset_name&gt;</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">dataset</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">vYYYY.MMDD</span>
<span class="na">created_at</span><span class="pi">:</span> <span class="s">2025-08-26T00:00:00+09:00</span>
<span class="na">owner</span><span class="pi">:</span> <span class="s">your.name@company.com</span>
<span class="na">source</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">&lt;external|internal|manual&gt;</span>
  <span class="na">detail</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;설명/링크&gt;"</span>
<span class="na">schema</span><span class="pi">:</span>
  <span class="na">format</span><span class="pi">:</span> <span class="s">&lt;parquet|csv|json|image|...&gt;</span>
  <span class="na">rows</span><span class="pi">:</span> <span class="s">&lt;int or unknown&gt;</span>
  <span class="na">columns</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">&lt;col1&gt;</span><span class="pi">,</span> <span class="nv">type</span><span class="pi">:</span> <span class="nv">&lt;type&gt;</span><span class="pi">}</span>
<span class="na">pii_level</span><span class="pi">:</span> <span class="s">&lt;none|low|medium|high&gt;</span>
<span class="na">license</span><span class="pi">:</span> <span class="s">&lt;internal|...&gt;</span>
<span class="na">files</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="pi">{</span><span class="nv">path</span><span class="pi">:</span> <span class="nv">&lt;relative/file&gt;</span><span class="pi">,</span> <span class="nv">bytes</span><span class="pi">:</span> <span class="nv">&lt;int&gt;</span><span class="pi">,</span> <span class="nv">sha256</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;optional&gt;"</span><span class="pi">}</span>
<span class="na">notes</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;중요</span><span class="nv"> </span><span class="s">정제/전처리</span><span class="nv"> </span><span class="s">노트&gt;"</span>
</code></pre></div></div>

<p><strong>파생 데이터셋:<code class="language-plaintext highlighter-rouge">manifest.yml</code></strong></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">&lt;artifact_name&gt;</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">derived</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">vYYYY.MMDD</span>
<span class="na">created_at</span><span class="pi">:</span> <span class="s">2025-08-26T00:00:00+09:00</span>
<span class="na">owner</span><span class="pi">:</span> <span class="s">your.name@company.com</span>
<span class="na">lineage</span><span class="pi">:</span>
  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">&lt;dataset_a&gt;</span><span class="pi">,</span> <span class="nv">version</span><span class="pi">:</span> <span class="nv">vYYYY.MMDD</span><span class="pi">,</span> <span class="nv">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">../../../datasets/&lt;dataset_a&gt;/vYYYY.MMDD/processed"</span><span class="pi">}</span>
  <span class="na">code</span><span class="pi">:</span>
    <span class="na">repo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;PRJ-...</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">git</span><span class="nv"> </span><span class="s">URL&gt;"</span>
    <span class="na">commit</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;hash</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">tag&gt;"</span>
  <span class="na">job</span><span class="pi">:</span>
    <span class="na">id</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;JOB-YYYY-NNN_title&gt;"</span>
<span class="na">schema</span><span class="pi">:</span>
  <span class="na">format</span><span class="pi">:</span> <span class="s">&lt;parquet|csv|...&gt;</span>
  <span class="na">rows</span><span class="pi">:</span> <span class="s">&lt;int&gt;</span>
<span class="na">metrics</span><span class="pi">:</span>
  <span class="na">records_after_filters</span><span class="pi">:</span> <span class="s">&lt;int&gt;</span>
  <span class="na">sanity_checks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">rule:</span><span class="nv"> </span><span class="s">pass/fail"</span>
<span class="na">notes</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;변환</span><span class="nv"> </span><span class="s">요약/제약&gt;"</span>
</code></pre></div></div>

<p>필요하면 위 <strong>체크섬 생성/검증 스크립트</strong> 를 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>에 넣은 버전으로 만들어 줄게—쓰는 셸(bash/zsh/PowerShell/tcsh)만 말해줘!</p>

<p class="chat--user">

폰트 파일은 어디 저장해?

</p>

<p>짧게: <strong><code class="language-plaintext highlighter-rouge">Work/60_Assets/fonts/</code></strong> 아래에 둬요.<br />
여긴 로고/템플릿과 같은 “브랜딩/시각 자산” 영역이라 폰트의 <strong>정본 위치</strong> 로 딱 맞습니다.</p>

<hr />

<h1 id="권장-폴더-트리복붙">권장 폴더 트리(복붙)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
└─ 60_Assets/                               - 브랜딩/시각 자산
   └─ fonts/                                - 폰트 정본 저장소
      ├─ _catalog.csv                       - (선택) 폰트 목록/버전/라이선스 인덱스
      ├─ &lt;FamilyName&gt;/                      - 예: Pretendard, Inter, NotoSansKR
      │  └─ vX.Y/                           - 폰트 패밀리 버전(없으면 v1.0 등)
      │     ├─ desktop/                     - 앱/문서용: OTF/TTF
      │     ├─ web/                         - 웹/경량 배포: WOFF2(권장), WOFF
      │     ├─ variable/                    - 가변 폰트(옵션)
      │     ├─ subsets/                     - 부분 서브셋(예: KR-basic, UI-only)
      │     ├─ license/                     - LICENSE, README-LICENSE.md
      │     ├─ specimen/                    - 샘플 이미지/미리보기
      │     └─ SHA256SUMS                   - 무결성 체크섬(옵션)
      └─ &lt;FamilyName2&gt;/
         └─ vX.Y/...
</code></pre></div></div>

<blockquote>
  <p><strong>프로젝트 전용 폰트?</strong><br />
 정본은 위에 두고, 프로젝트에서는 <strong>링크/빌드시 복사</strong> 만 해요. (복사본이 정본이 되지 않도록!)</p>
</blockquote>

<hr />

<h2 id="운용-규칙핵심">운용 규칙(핵심)</h2>

<ul>
  <li>
    <p><strong>정본은 60_Assets/fonts</strong> : 여기만 갱신하고, 나머지는 <strong>참조/동기화</strong>.</p>
  </li>
  <li>
    <p><strong>버저닝</strong> : 폰트 패밀리마다 <code class="language-plaintext highlighter-rouge">vX.Y</code> 폴더를 만들어 버전 충돌을 방지.</p>
  </li>
  <li>
    <p><strong>라이선스 동봉</strong> : <code class="language-plaintext highlighter-rouge">license/</code>에 LICENSE, 사용범위 메모(웹 임베드 가능 여부 등).</p>
  </li>
  <li>
    <p><strong>무결성(선택)</strong> : 대외 배포/릴리스에 들어가면 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성(아래 예시).</p>
  </li>
  <li>
    <p><strong>개인 설치본</strong> 은 OS에 설치하되(시스템 폴더), <strong>정본은 변하지 않게</strong> 60_Assets에 유지.</p>
  </li>
</ul>

<hr />

<h2 id="프로젝트에서-쓰는-법">프로젝트에서 쓰는 법</h2>

<h3 id="1-데스크탑-앱pyside6qt-등에서-번들">1) 데스크탑 앱(PySide6/Qt 등)에서 번들</h3>

<ul>
  <li><strong>복사 방식(빌드 시)</strong> : 빌드 스크립트에서 필요한 파일만 프로젝트로 동기화.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 예: Inter v4.0의 OTF만 앱 리포지토리로 동기화</span>
rsync <span class="nt">-av</span> <span class="se">\</span>
  <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/60_Assets/fonts/Inter/v4.0/desktop/"</span> <span class="se">\</span>
  <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/20_Projects/PRJ-2025-001_app/assets/fonts/"</span>
</code></pre></div>    </div>
  </li>
  <li><strong>런타임 로드(PySide6)</strong> :
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">PySide6.QtGui</span> <span class="kn">import</span> <span class="n">QFontDatabase</span><span class="p">,</span> <span class="n">QFont</span>
<span class="n">QFontDatabase</span><span class="p">.</span><span class="nf">addApplicationFont</span><span class="p">(</span><span class="sh">"</span><span class="s">:/assets/fonts/Inter-Regular.otf</span><span class="sh">"</span><span class="p">)</span>
<span class="n">QApplication</span><span class="p">.</span><span class="nf">setFont</span><span class="p">(</span><span class="nc">QFont</span><span class="p">(</span><span class="sh">"</span><span class="s">Inter</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-웹css에서-임베드">2) 웹/CSS에서 임베드</h3>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* WOFF2 우선 */</span>
<span class="k">@font-face</span><span class="p">{</span>
  <span class="nl">font-family</span><span class="p">:</span><span class="s1">"Inter"</span><span class="p">;</span>
  <span class="nl">src</span><span class="p">:</span> <span class="nf">url</span><span class="p">(</span><span class="s1">"/assets/fonts/Inter/v4.0/web/Inter-Variable.woff2"</span><span class="p">)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">"woff2"</span><span class="p">);</span>
  <span class="nl">font-weight</span><span class="p">:</span> <span class="m">100</span> <span class="m">900</span><span class="p">;</span> <span class="c">/* variable */</span>
  <span class="nl">font-style</span><span class="p">:</span> <span class="nb">normal</span><span class="p">;</span>
  <span class="nl">font-display</span><span class="p">:</span> <span class="nb">swap</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">body</span><span class="p">{</span> <span class="nl">font-family</span><span class="p">:</span> <span class="s1">"Inter"</span><span class="p">,</span> <span class="s1">"Noto Sans KR"</span><span class="p">,</span> <span class="n">system-ui</span><span class="p">,</span> <span class="o">-</span><span class="n">apple-system</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="3-릴리스에-포함선택">3) 릴리스에 포함(선택)</h3>

<ul>
  <li>폰트를 앱과 함께 배포하면, 해당 프로젝트의 <code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/docs/</code>에<br />
<strong>라이선스 요약</strong> 을 반드시 포함하세요(배포권한 확인).</li>
</ul>

<hr />

<h2 id="서브셋가변-폰트-팁">서브셋/가변 폰트 팁</h2>

<ul>
  <li>
    <p><strong>가변 폰트(variable)</strong>가 있다면 우선 고려(파일 수↓, 품질↑).</p>
  </li>
  <li>
    <p>웹/경량 배포는 <strong>WOFF2만</strong> 으로 충분한 경우가 많음.</p>
  </li>
  <li>
    <p><strong>서브셋</strong> 은 UI에 필요한 글리프만 추출해 용량을 크게 줄일 수 있어요.<br />
(툴: <code class="language-plaintext highlighter-rouge">pyftsubset</code> 등—원하면 스크립트 만들어 드림)</p>
  </li>
</ul>

<hr />

<h2 id="라이선스보안-주의">라이선스/보안 주의</h2>

<ul>
  <li>
    <p>상업용/배포제한 폰트는 리포지토리에 올리지 말고,<br />
<code class="language-plaintext highlighter-rouge">60_Assets/fonts/&lt;Family&gt;/vX.Y/license/</code>에 <strong>사용범위 메모</strong> 를 명확히.</p>
  </li>
  <li>
    <p>팀 공유가 불가하면, 개인 환경에는 <strong>OS 설치</strong> 만 하고 정본은 내부 서버/스토리지에 두기.</p>
  </li>
  <li>
    <p>외부 배포 시 <code class="language-plaintext highlighter-rouge">README-LICENSE.md</code>에 출처/허용범위/금지사항 요약.</p>
  </li>
</ul>

<hr />

<h2 id="체크섬sha256-만들기옵션">체크섬(SHA256) 만들기(옵션)</h2>

<p>버전 루트에서:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># macOS/Linux (sha256sum 있을 때)</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'SHA256SUMS'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.*'</span> <span class="nt">-print0</span> | xargs <span class="nt">-0</span> <span class="nb">sha256sum</span> <span class="o">&gt;</span> SHA256SUMS

<span class="c"># macOS 기본(shasum) 대체</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'SHA256SUMS'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.*'</span> <span class="nt">-exec</span> sh <span class="nt">-c</span> <span class="s1">'shasum -a 256 "$1" | sed "s#  #  #"'</span> _ <span class="o">{}</span> <span class="se">\;</span> <span class="o">&gt;</span> SHA256SUMS
</code></pre></div></div>

<p>Windows PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Remove-Item</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nt">-Recurse</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s1">'SHA256SUMS'</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="o">-not</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="o">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s1">'.'</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$h</span><span class="o">=</span><span class="p">(</span><span class="n">Get-FileHash</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">SHA256</span><span class="p">)</span><span class="o">.</span><span class="nf">Hash</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w">
    </span><span class="nv">$rel</span><span class="o">=</span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="o">.</span><span class="nf">Substring</span><span class="p">((</span><span class="n">Get-Location</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">Length</span><span class="o">+</span><span class="nx">1</span><span class="p">)</span><span class="o">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s1">'\'</span><span class="p">,</span><span class="s1">'/'</span><span class="p">)</span><span class="w">
    </span><span class="s2">"</span><span class="nv">$h</span><span class="s2">  </span><span class="nv">$rel</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Content</span><span class="w"> </span><span class="nt">-NoNewline</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="빠른-체크리스트">빠른 체크리스트</h2>

<ul>
  <li>
    <p>폰트 정본: <strong><code class="language-plaintext highlighter-rouge">60_Assets/fonts</code></strong> (버전·라이선스 동봉)</p>
  </li>
  <li>
    <p>프로젝트: <strong>빌드시 동기화/복사</strong> 또는 <strong>런타임 로드</strong>(정본은 건드리지 않기)</p>
  </li>
  <li>
    <p>웹: <strong>WOFF2 +<code class="language-plaintext highlighter-rouge">font-display: swap</code></strong>, 시스템 폰트 적절한 폴백</p>
  </li>
  <li>
    <p>데스크탑: 애플리케이션 번들에 포함하면 <strong>라이선스 확인 필수</strong></p>
  </li>
  <li>
    <p>서브셋/가변 폰트로 <strong>용량 최적화</strong> , 필요 시 스크립트화</p>
  </li>
</ul>

<p>원하면 네가 쓰는 폰트 패밀리(예: Pretendard, Noto Sans KR) 기준으로<br />
<strong>초기 트리 + 빌드 동기화 스크립트</strong>(bash/PowerShell/tcsh)까지 만들어줄게.</p>

<p class="chat--user">

다운로드 파일들 저장할 폴더도 추가해줘

</p>

<p>좋아, <strong>다운로드 전용 착륙지(Landing Zone)</strong>를 추가하자.<br />
기존 <code class="language-plaintext highlighter-rouge">00_Inbox</code>(수작업 스크랩/임시)와 구분해서, <strong>브라우저/CLI가 내려받는 파일</strong> 은 여기로 모으고 정리 후 각 “정본 위치”로 이동하는 흐름이 깔끔해.</p>

<hr />

<h2 id="추가-트리-복붙용--영문-폴더명--한글-설명">추가 트리 (복붙용) — <em>영문 폴더명 + 한글 설명</em></h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
├─ 05_Downloads/                               - 다운로드 착륙지(Landing Zone, 정리 전 임시)
│  ├─ _inbox/                                  - 브라우저/툴 기본 저장 경로(정리 전)
│  ├─ installers/                              - 설치 파일 임시(.exe/.msi/.pkg/.dmg/.whl/.zip)
│  ├─ datasets/                                - 데이터셋 압축/CSV 임시(해제 전)
│  ├─ manuals/                                 - 매뉴얼/가이드 PDF/HTML 임시
│  ├─ assets/                                  - 폰트/아이콘/템플릿 등 임시
│  ├─ quarantine/                              - 의심 파일(검사 전 격리)
│  └─ README_SORTING.md                        - 분류 규칙 요약(어디로 옮길지 안내)
├─ 10_Today/
├─ 20_Projects/
├─ 25_Jobs/
├─ 26_Datasets/
├─ 30_Areas/
├─ 31_Labs/
├─ 32_SharedConfigs/
├─ 40_Resources/
├─ 50_Snippets/
├─ 60_Assets/
├─ 70_Exports/
├─ 75_Releases/
├─ 80_Tools/
├─ 85_Environments/
├─ 90_PersonalConfigs/
└─ 99_Archive/
</code></pre></div></div>

<hr />

<h2 id="라우팅-규칙다운로드--정본-위치">라우팅 규칙(다운로드 → 정본 위치)</h2>

<table>
  <thead>
    <tr>
      <th>분류(05_Downloads 하위)</th>
      <th>정리 완료 시 최종 위치(정본)</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>installers/</strong></td>
      <td><code class="language-plaintext highlighter-rouge">80_Tools/installers/</code></td>
      <td>버전·체크섬 기록(install_notes.md, SHA256)</td>
    </tr>
    <tr>
      <td><strong>datasets/</strong></td>
      <td><code class="language-plaintext highlighter-rouge">26_Datasets/datasets/&lt;name&gt;/vYYYY.MMDD/{raw→processed}</code></td>
      <td>압축 해제 후 manifest.yml 작성</td>
    </tr>
    <tr>
      <td><strong>manuals/</strong></td>
      <td><code class="language-plaintext highlighter-rouge">40_Resources/manuals/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/</code></td>
      <td>PDF/HTML/MD</td>
    </tr>
    <tr>
      <td><strong>assets/</strong> (폰트 등)</td>
      <td><code class="language-plaintext highlighter-rouge">60_Assets/fonts/…</code> <code class="language-plaintext highlighter-rouge">60_Assets/...</code></td>
      <td>라이선스 동봉, 버전 폴더 유지</td>
    </tr>
    <tr>
      <td><strong>_inbox/</strong> 기타</td>
      <td>용도에 따라 위 카테고리로 이동</td>
      <td>스크린샷/메모는 <code class="language-plaintext highlighter-rouge">00_Inbox</code>가 더 적합</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>원칙: <strong>05_Downloads는 임시</strong>. 정리 끝나면 <strong>비워서 가볍게</strong> 유지!</p>
</blockquote>

<hr />

<h2 id="브라우저툴-연동선택">브라우저/툴 연동(선택)</h2>

<ul>
  <li>
    <p><strong>기본 다운로드 경로</strong> 를 <code class="language-plaintext highlighter-rouge">Work/05_Downloads/_inbox</code>로 지정.</p>
  </li>
  <li>
    <p>시스템 “다운로드” 폴더를 바꾸고 싶다면, <strong>심볼릭 링크</strong> 로 연결:</p>
  </li>
</ul>

<p><strong>macOS/Linux</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 기존 ~/Downloads를 백업/삭제 후 Today 착륙지로 링크</span>
<span class="nb">mv</span> ~/Downloads ~/Downloads.bak 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
ln</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/05_Downloads/_inbox"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Downloads"</span>
</code></pre></div></div>

<p><strong>Windows (PowerShell 관리자)</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ren</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Downloads"</span><span class="w"> </span><span class="nx">Downloads.bak</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Downloads"</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Work\05_Downloads\_inbox"</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>부담되면, 브라우저(Chrome/Edge/Firefox)에서 <strong>해당 경로만 기본 폴더로</strong> 지정해도 충분.</p>
</blockquote>

<hr />

<h2 id="주간-정리-루틴가볍게">주간 정리 루틴(가볍게)</h2>

<ol>
  <li>
    <p><strong>installers/</strong> → <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code>로 이동 + <code class="language-plaintext highlighter-rouge">install_notes.md</code> 업데이트</p>
  </li>
  <li>
    <p><strong>datasets/</strong> → 압축 해제 → <code class="language-plaintext highlighter-rouge">26_Datasets/datasets/&lt;name&gt;/vYYYY.MMDD/raw</code>에 배치</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">manifest.yml</code> 초안 작성, <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성(무결성)</li>
    </ul>
  </li>
  <li>
    <p><strong>manuals/</strong> → <code class="language-plaintext highlighter-rouge">40_Resources/manuals/...</code>로 이동</p>
  </li>
  <li>
    <p><strong>assets/</strong>(폰트 등) → <code class="language-plaintext highlighter-rouge">60_Assets/...</code>로 이동</p>
  </li>
  <li>
    <p><strong>_inbox/</strong> → 비우기(불필요 파일 삭제, 기타는 적절한 곳으로 라우팅)</p>
  </li>
  <li>
    <p><strong>quarantine/</strong> → 바이러스/정책 검사 후 처리</p>
  </li>
</ol>

<hr />

<h2 id="today런처에-한-줄-추가선택">today/런처에 한 줄 추가(선택)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sort downloads       | 05_Downloads               | ${EDITOR:-vi} README_SORTING.md
Open installers box  | 80_Tools/installers        | ls -al
</code></pre></div></div>

<hr />

<h2 id="사용-시-주요-주의점">사용 시 주요 주의점</h2>

<ul>
  <li>
    <p><strong>정본은 각 전용 폴더</strong> : 05_Downloads는 <strong>절대 정본 보관소가 아님</strong>. 정리 후 반드시 이동.</p>
  </li>
  <li>
    <p><strong>체크섬/메타</strong> : 데이터셋·설치파일은 이동 전에 <strong>SHA256SUMS</strong> 생성, <code class="language-plaintext highlighter-rouge">manifest.yml</code>/<code class="language-plaintext highlighter-rouge">install_notes.md</code> 기록.</p>
  </li>
  <li>
    <p><strong>보안</strong> : 알 수 없는 파일은 <strong>quarantine/</strong>로 옮겨 검사 후 사용.</p>
  </li>
  <li>
    <p><strong>용량 관리</strong> : <code class="language-plaintext highlighter-rouge">_inbox</code>와 <code class="language-plaintext highlighter-rouge">datasets</code>의 압축본은 <strong>해제 후 삭제</strong>(정본은 26_Datasets).</p>
  </li>
  <li>
    <p><strong>.gitignore</strong> : Work를 레포로 관리한다면 <code class="language-plaintext highlighter-rouge">05_Downloads/**</code>는 반드시 <strong>무시</strong>.</p>
  </li>
  <li>
    <p><strong>중복 방지</strong> : 동일 파일이 정본 위치에 있으면 <strong>복사 금지</strong> , 덮어쓰기 대신 <strong>버전 폴더</strong> 사용.</p>
  </li>
</ul>

<p>필요하면 05_Downloads에서 <strong>자동 분류(installers/datasets/manuals/…)</strong> 하고<br />
정본 위치로 옮기면서 <strong>체크섬까지 생성</strong> 하는 스윕 스크립트(bash/PowerShell/tcsh)도 만들어줄게.</p>

<p class="chat--user">

오 생각보다 빠른 번호네 나는 98 정도 생각했어

</p>

<p>좋아, 번호는 <strong>취향/운영 철학</strong> 문제라 05든 98이든 OK야.<br />
아래처럼 <strong>장단점 비교 → 98로 쓸 때의 최종안(트리/규칙/리네임 명령)</strong>까지 한 번에 정리해줄게.</p>

<hr />

<h2 id="어떤-번호가-좋을까-짧은-판단-기준">어떤 번호가 좋을까? (짧은 판단 기준)</h2>

<ol>
  <li>
    <p><strong>05_Downloads (상단 배치)</strong></p>

    <ul>
      <li>
        <p>장점: 파일 탐색기에서 항상 <strong>맨 위</strong> 에 보여서 “받자마자 분류”가 쉬움.</p>
      </li>
      <li>
        <p>단점: 상단이 복잡해 보일 수 있음.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>98_Downloads (하단 배치)</strong> ← 네가 선호</p>

    <ul>
      <li>
        <p>장점: <strong>작업 트리의 말미</strong> 에 있어 시각적 소음 ↓, “임시/정리대상” 느낌이 분명.</p>
      </li>
      <li>
        <p>단점: 스크롤이 조금 늘어남. (대신 브라우저 기본경로만 잘 맞추면 문제 없음)</p>
      </li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>결론: <strong>98도 충분히 합리적</strong>. “임시·정리대상”을 뒤로 미루고 싶다면 98이 좋아.</p>
</blockquote>

<hr />

<h2 id="98로-쓰는-최종안-복붙용">98로 쓰는 최종안 (복붙용)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
├─ 00_Inbox/                                  - 수작업 스크랩/임시(노트·스크린샷)
├─ 10_Today/
├─ 20_Projects/
├─ 25_Jobs/
├─ 26_Datasets/
├─ 30_Areas/
├─ 31_Labs/
├─ 32_SharedConfigs/
├─ 40_Resources/
├─ 50_Snippets/
├─ 60_Assets/
├─ 70_Exports/
├─ 75_Releases/
├─ 80_Tools/
├─ 85_Environments/
├─ 90_PersonalConfigs/
├─ 98_Downloads/                              - 다운로드 착륙지(Landing Zone, 정리 전 임시)
│  ├─ _inbox/                                 - 브라우저/툴 기본 저장 경로
│  ├─ installers/                             - 설치 파일(.exe/.msi/.pkg/.dmg/.whl/.zip)
│  ├─ datasets/                               - 데이터셋 압축/CSV 임시(해제 전)
│  ├─ manuals/                                - 매뉴얼/가이드 PDF/HTML 임시
│  ├─ assets/                                 - 폰트/아이콘/템플릿 등 임시
│  ├─ quarantine/                             - 의심 파일(검사 전 격리)
│  └─ README_SORTING.md                       - 분류 규칙 요약(최종 위치 안내)
└─ 99_Archive/
</code></pre></div></div>

<h3 id="라우팅-규칙변경-없음-폴더만-98로-교체">라우팅 규칙(변경 없음, 폴더만 98로 교체)</h3>

<table>
  <thead>
    <tr>
      <th>98_Downloads 하위</th>
      <th>정본 최종 위치</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>installers/</td>
      <td><code class="language-plaintext highlighter-rouge">80_Tools/installers/</code></td>
      <td>버전·체크섬 <code class="language-plaintext highlighter-rouge">install_notes.md</code>, <code class="language-plaintext highlighter-rouge">SHA256SUMS</code></td>
    </tr>
    <tr>
      <td>datasets/</td>
      <td><code class="language-plaintext highlighter-rouge">26_Datasets/datasets/&lt;name&gt;/vYYYY.MMDD/{raw→processed}</code></td>
      <td><code class="language-plaintext highlighter-rouge">manifest.yml</code> 작성</td>
    </tr>
    <tr>
      <td>manuals/</td>
      <td><code class="language-plaintext highlighter-rouge">40_Resources/manuals/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/</code></td>
      <td> </td>
    </tr>
    <tr>
      <td>assets/</td>
      <td><code class="language-plaintext highlighter-rouge">60_Assets/...</code></td>
      <td>폰트는 <code class="language-plaintext highlighter-rouge">60_Assets/fonts/...</code></td>
    </tr>
    <tr>
      <td>_inbox/ 기타</td>
      <td>상황에 맞게 위 카테고리로 이동</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="안전한-리네임--브라우저-연동">안전한 리네임 &amp; 브라우저 연동</h2>

<h3 id="macoslinux-bashzsh-1">macOS/Linux (bash/zsh)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work
<span class="nb">mkdir</span> <span class="nt">-p</span> 98_Downloads/<span class="o">{</span>_inbox,installers,datasets,manuals,assets,quarantine<span class="o">}</span>
<span class="c"># 기존 05_Downloads를 썼다면:</span>
<span class="o">[</span> <span class="nt">-d</span> 05_Downloads <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv </span>05_Downloads/<span class="k">*</span> 98_Downloads/ <span class="o">&amp;&amp;</span> <span class="nb">rmdir </span>05_Downloads 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># OS의 ~/Downloads를 Work/98_Downloads/_inbox로 심볼릭 링크(선택)</span>
<span class="nb">mv</span> ~/Downloads ~/Downloads.bak 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
ln</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/98_Downloads/_inbox"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Downloads"</span>
</code></pre></div></div>

<h3 id="windows-powershell-3">Windows (PowerShell)</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\_inbox"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\installers"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\datasets"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\manuals"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\assets"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\quarantine"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="c"># 기존 05_Downloads 사용분 이동(있을 때만)</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\*"</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads"</span><span class="w"> </span><span class="nt">-Force</span><span class="p">;</span><span class="w"> </span><span class="n">Remove-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads"</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="c"># 사용자 Downloads → _inbox 링크(선택, 관리자 권장)</span><span class="w">
</span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Downloads"</span><span class="w"> </span><span class="s2">"Downloads.bak"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Downloads"</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Work\98_Downloads\_inbox"</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>브라우저(Chrome/Edge/Firefox)의 <strong>기본 다운로드 폴더</strong> 를 <code class="language-plaintext highlighter-rouge">Work/98_Downloads/_inbox</code>로 바꿔두면 더 편함.</p>
</blockquote>

<hr />

<h2 id="주의점번호-바꿔도-변하지-않는-원칙">주의점(번호 바꿔도 변하지 않는 원칙)</h2>

<ul>
  <li>
    <p><strong>정본은 각 전용 폴더</strong> : 98_Downloads는 <strong>임시 착륙지</strong> 일 뿐. 정리 후 반드시</p>

    <ul>
      <li>
        <p>설치파일 → <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code></p>
      </li>
      <li>
        <p>데이터셋 → <code class="language-plaintext highlighter-rouge">26_Datasets/...</code></p>
      </li>
      <li>
        <p>매뉴얼 → <code class="language-plaintext highlighter-rouge">40_Resources/manuals/...</code></p>
      </li>
      <li>
        <p>자산(폰트 등) → <code class="language-plaintext highlighter-rouge">60_Assets/...</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>체크섬·메타 필수</strong> : 데이터셋/설치파일은 이동 전에 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>/<code class="language-plaintext highlighter-rouge">manifest.yml</code>(데이터셋), <code class="language-plaintext highlighter-rouge">install_notes.md</code>(설치파일)를 남겨 재현성 확보.</p>
  </li>
  <li>
    <p><strong>보안</strong> : 출처 불명은 <code class="language-plaintext highlighter-rouge">quarantine/</code>에 두고 검사 후 사용.</p>
  </li>
  <li>
    <p><strong>.gitignore</strong> : Work를 레포로 관리한다면 <code class="language-plaintext highlighter-rouge">98_Downloads/**</code>는 <strong>무조건 무시</strong>.</p>
  </li>
  <li>
    <p><strong>정리 주기</strong> : 주 1회 <code class="language-plaintext highlighter-rouge">_inbox</code> 비우기, 하위 카테고리도 정본으로 이동 후 비우기.</p>
  </li>
</ul>

<hr />

<h2 id="선택-today런처에-경로만-교체">(선택) today/런처에 경로만 교체</h2>

<p>기존 예시에서 <code class="language-plaintext highlighter-rouge">05_Downloads</code> → <code class="language-plaintext highlighter-rouge">98_Downloads</code>로 바꾸면 끝.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sort downloads       | 98_Downloads               | ${EDITOR:-vi} README_SORTING.md
Open installers box  | 80_Tools/installers        | ls -al
</code></pre></div></div>

<p>원하면 <strong>주간 자동정리 스크립트</strong>(다운로드 자동 분류→정본 이동→체크섬 생성)도 98 경로 기준으로 만들어줄게.</p>

<p class="chat--user">

임시 보관소라는 관점에서는 앞쪽 번호가 어울린다고 보는건가

</p>

<p>짧은 답: <strong>네. “임시 보관소”는 앞쪽 번호(상단 배치)가 더 어울립니다.</strong><br />
이유는 “빨리 보고 빨리 비우게” 만드는 시각적/동선 효과가 커서예요.</p>

<h2 id="왜-앞번호상단가-유리한가">왜 앞번호(상단)가 유리한가</h2>

<ol>
  <li>
    <p><strong>가시성 → 행동 유도</strong><br />
폴더 트리 상단(00~10대)에 있으면 매일 시야에 들어와서 “정리해야지”가 자연스레 작동합니다.</p>
  </li>
  <li>
    <p><strong>흐름 정렬</strong><br />
하루 흐름이 <code class="language-plaintext highlighter-rouge">00_Inbox → 05_Downloads → 10_Today → 20_Projects/25_Jobs…</code>로 이어져 <strong>수집→정리→집중 작업</strong> 순서가 깔끔해집니다.</p>
  </li>
  <li>
    <p><strong>마찰 최소화</strong><br />
브라우저/툴의 기본 저장 폴더를 상단 폴더로 지정하기 쉽고, 경로가 짧아 조작이 빠릅니다.</p>
  </li>
</ol>

<h2 id="언제-뒤번호하단가-더-낫나">언제 뒤번호(하단)가 더 낫나</h2>

<ul>
  <li>
    <p>트리 상단을 “업무 핵심만” 보이게 하고 싶거나, 다운로드를 <strong>자주 안 쓰는</strong> 경우.</p>
  </li>
  <li>
    <p>팀 규칙/개인 취향상 “임시는 뒤로 보내 시각적 소음 ↓”가 더 편한 경우.<br />
→ 이런 상황이면 <strong>98_Downloads</strong> 도 충분히 합리적이에요.</p>
  </li>
</ul>

<h2 id="현실적인-권장안-둘-중-하나">현실적인 권장안 (둘 중 하나)</h2>

<ul>
  <li>
    <p><strong>A안(상단 임시 존)</strong> :<br />
<code class="language-plaintext highlighter-rouge">00_Inbox</code>(수작업 스크랩) + <code class="language-plaintext highlighter-rouge">05_Downloads</code>(자동 착륙지) + <code class="language-plaintext highlighter-rouge">10_Today</code>(실행 대시보드)</p>

    <ul>
      <li>매일 아침: <code class="language-plaintext highlighter-rouge">05_Downloads/_inbox</code> 비우기 → 정본 위치로 이동</li>
    </ul>
  </li>
  <li>
    <p><strong>B안(하단 임시 존)</strong> :<br />
<code class="language-plaintext highlighter-rouge">98_Downloads</code>로 두되 브라우저 기본경로만 <code class="language-plaintext highlighter-rouge">…/98_Downloads/_inbox</code>로 고정,<br />
Today/런처에서 바로 열 수 있게 단축만 둠</p>
  </li>
</ul>

<h2 id="결정-규칙간단">결정 규칙(간단)</h2>

<ul>
  <li>
    <p><strong>매일/자주 비울 거다</strong> → 앞번호(05)</p>
  </li>
  <li>
    <p><strong>거의 신경 안 쓰고 가끔 정리</strong> → 뒷번호(98)</p>
  </li>
  <li>
    <p>어떤 번호를 쓰든 <strong>정본은 해당 전용 폴더</strong>(26_Datasets, 80_Tools/installers, 60_Assets/fonts, 40_Resources/manuals…)로 반드시 이동하세요.</p>
  </li>
</ul>

<p>원하면 지금 구조를 A안(05) 또는 B안(98) 중 원하는 쪽으로 최종본 트리와 스크립트(브라우저 기본 경로 설정/주간 자동정리)까지 맞춰서 정리해 줄게.</p>

<p class="chat--user">

자주 정리하는게 맞긴하지만 귀찮아서 쌓아두긴해 내 성격상;

</p>

<p>그럼 “쌓이는 성격” 전제로, <strong>손 안 대도 굴러가는 자동 정리 세팅</strong> 으로 가자.<br />
아래 그대로 넣으면 <strong>주 1회/매일 자동으로</strong> <code class="language-plaintext highlighter-rouge">98_Downloads/_inbox</code>에 쌓인 걸 규칙대로 분류·이동하고, 체크섬도 남겨줘.</p>

<hr />

<h1 id="핵심-아이디어-귀찮음-최소화">핵심 아이디어 (귀찮음 최소화)</h1>

<ul>
  <li>
    <p><strong>다운로드 착륙지</strong> : <code class="language-plaintext highlighter-rouge">Work/98_Downloads/_inbox</code></p>
  </li>
  <li>
    <p><strong>자동 스윕 규칙</strong></p>

    <ul>
      <li>
        <p>설치파일( <code class="language-plaintext highlighter-rouge">.exe .msi .pkg .dmg .whl .deb .rpm .zip</code>(설치 키워드)) → <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code> + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> + <code class="language-plaintext highlighter-rouge">install_notes.md</code> append</p>
      </li>
      <li>
        <p>데이터셋( <code class="language-plaintext highlighter-rouge">.csv .tsv .parquet .json .xlsx</code> / 압축 내부에 csv/parquet가 있으면 포함) → <code class="language-plaintext highlighter-rouge">26_Datasets/_staging/YYYY-MM-DD/</code> + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code></p>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>매뉴얼( <code class="language-plaintext highlighter-rouge">.pdf .chm .html .htm</code> / 이름에 manual</td>
              <td>guide</td>
              <td>user</td>
              <td>spec) → <code class="language-plaintext highlighter-rouge">40_Resources/manuals/_incoming/</code></td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>폰트( <code class="language-plaintext highlighter-rouge">.ttf .otf .woff .woff2</code>) → <code class="language-plaintext highlighter-rouge">60_Assets/fonts/_incoming/</code></p>
      </li>
      <li>그 외 → 그대로 둠(다음 스윕에서 재시도)</li>
    </ul>
  </li>
  <li>
    <p><strong>삭제 금지</strong> : 자동화는 “이동+기록”만. (실수 방지)</p>
  </li>
</ul>

<hr />

<h1 id="1-macoslinux용-자동-스윕-스크립트">1) macOS/Linux용: 자동 스윕 스크립트</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/80_Tools/scripts/sweep_downloads.sh</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail

<span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>
<span class="c"># 착륙지: 98이 없으면 05로 폴백</span>
<span class="nv">DL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/98_Downloads/_inbox"</span>
<span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$DL</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="nv">DL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/05_Downloads/_inbox"</span>

<span class="nv">DEST_INSTALL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/80_Tools/installers"</span>
<span class="nv">DEST_DATA_STAGE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/26_Datasets/_staging/</span><span class="si">$(</span><span class="nb">date</span> +%Y-%m-%d<span class="si">)</span><span class="s2">"</span>
<span class="nv">DEST_MANUALS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/40_Resources/manuals/_incoming"</span>
<span class="nv">DEST_FONTS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/60_Assets/fonts/_incoming"</span>

<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_MANUALS</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_FONTS</span><span class="s2">"</span>

log<span class="o">()</span> <span class="o">{</span> <span class="nb">printf</span> <span class="s2">"[%s] %s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%F %T'</span><span class="si">)</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$*</span><span class="s2">"</span><span class="p">;</span> <span class="o">}</span>

<span class="c"># sha256 함수 (macOS 호환)</span>
sha256<span class="o">()</span> <span class="o">{</span>
  <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> <span class="nb">sha256sum</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then </span><span class="nb">sha256sum</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="p">;</span>
  <span class="k">else </span>shasum <span class="nt">-a</span> 256 <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="p">;</span> <span class="k">fi</span>
<span class="o">}</span>

is_installer<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">f</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">"</span>
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="se">\.</span><span class="o">(</span>exe|msi|pkg|dmg|deb|rpm|whl<span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.zip <span class="o">&amp;&amp;</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="o">(</span>setup|install|installer|msi|driver<span class="o">)</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0
  <span class="k">return </span>1
<span class="o">}</span>

is_manual<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">f</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">"</span>
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="se">\.</span><span class="o">(</span>pdf|chm|html|htm<span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">||</span> <span class="k">return </span>1
  <span class="k">return </span>0
<span class="o">}</span>

is_font<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">f</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">"</span>
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="se">\.</span><span class="o">(</span>ttf|otf|woff2?|ttc<span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0 <span class="o">||</span> <span class="k">return </span>1
<span class="o">}</span>

zip_has_dataset<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">z</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
  <span class="nb">command</span> <span class="nt">-v</span> unzip <span class="o">&gt;</span>/dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="k">return </span>1
  unzip <span class="nt">-l</span> <span class="s2">"</span><span class="nv">$z</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{print $4}'</span> | <span class="nb">grep</span> <span class="nt">-Eiq</span> <span class="s1">'\.(csv|tsv|json|parquet|xlsx)$'</span>
<span class="o">}</span>

is_dataset<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">f</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">"</span>
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="se">\.</span><span class="o">(</span>csv|tsv|json|parquet|xlsx<span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0
  <span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.zip <span class="o">||</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.tar.gz <span class="o">||</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.tgz <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span>zip_has_dataset <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0
  <span class="k">fi
  return </span>1
<span class="o">}</span>

append_install_notes<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">file</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="nv">sha</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
  <span class="nb">local </span><span class="nv">notes</span><span class="o">=</span><span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/install_notes.md"</span>
  <span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$notes</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="nb">printf</span> <span class="s2">"# Installers notes</span><span class="se">\n\n</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$notes</span><span class="s2">"</span>
  <span class="nb">printf</span> <span class="s2">"- %s  </span><span class="se">\`</span><span class="s2">%s</span><span class="se">\`</span><span class="s2">  sha256=%s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%F %T'</span><span class="si">)</span><span class="s2">"</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$sha</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$notes</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 메인 루프</span>
<span class="nb">shopt</span> <span class="nt">-s</span> nullglob
<span class="nv">found_any</span><span class="o">=</span>0
<span class="k">for </span>p <span class="k">in</span> <span class="s2">"</span><span class="nv">$DL</span><span class="s2">"</span>/<span class="k">*</span><span class="p">;</span> <span class="k">do</span>
  <span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="k">continue
  </span><span class="nv">found_any</span><span class="o">=</span>1
  <span class="nv">base</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
  <span class="k">if </span>is_installer <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mv</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
    <span class="nv">sha</span><span class="o">=</span><span class="si">$(</span>sha256 <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span><span class="si">)</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$sha</span><span class="s2">  </span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$base</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/SHA256SUMS"</span>
    append_install_notes <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$sha</span><span class="s2">"</span>
    log <span class="s2">"INSTALLER → </span><span class="nv">$DEST_INSTALL</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">elif </span>is_dataset <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">"</span>
    <span class="nb">mv</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
    <span class="nv">sha</span><span class="o">=</span><span class="si">$(</span>sha256 <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span><span class="si">)</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$sha</span><span class="s2">  </span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$base</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">/SHA256SUMS"</span>
    log <span class="s2">"DATASET → </span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">elif </span>is_manual <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mv</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_MANUALS</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
    log <span class="s2">"MANUAL → </span><span class="nv">$DEST_MANUALS</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">elif </span>is_font <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mv</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_FONTS</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
    log <span class="s2">"FONT → </span><span class="nv">$DEST_FONTS</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">else
    </span>log <span class="s2">"SKIP (unknown) </span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">fi
done

if</span> <span class="o">[[</span> <span class="nv">$found_any</span> <span class="nt">-eq</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span>log <span class="s2">"No files in </span><span class="nv">$DL</span><span class="s2">"</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>실행권한:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/Work/80_Tools/scripts/sweep_downloads.sh
</code></pre></div></div>

<h3 id="자동-실행둘-중-택1">자동 실행(둘 중 택1)</h3>

<ul>
  <li>
    <p><strong>macOS (launchd, 매일 19:00)</strong></p>

    <ol>
      <li><code class="language-plaintext highlighter-rouge">~/Library/LaunchAgents/com.work.sweepdownloads.plist</code> 생성:
        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">"1.0"</span><span class="nt">&gt;&lt;dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;&lt;string&gt;</span>com.work.sweepdownloads<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;array&gt;&lt;string&gt;</span>/Users/$(whoami)/Work/80_Tools/scripts/sweep_downloads.sh<span class="nt">&lt;/string&gt;&lt;/array&gt;</span>
  <span class="nt">&lt;key&gt;</span>StartCalendarInterval<span class="nt">&lt;/key&gt;&lt;dict&gt;&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;&lt;integer&gt;</span>19<span class="nt">&lt;/integer&gt;&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;&lt;integer&gt;</span>0<span class="nt">&lt;/integer&gt;&lt;/dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>StandardOutPath<span class="nt">&lt;/key&gt;&lt;string&gt;</span>/tmp/sweepdownloads.out<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>StandardErrorPath<span class="nt">&lt;/key&gt;&lt;string&gt;</span>/tmp/sweepdownloads.err<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>EnvironmentVariables<span class="nt">&lt;/key&gt;&lt;dict&gt;&lt;key&gt;</span>WORK_DIR<span class="nt">&lt;/key&gt;&lt;string&gt;</span>/Users/$(whoami)/Work<span class="nt">&lt;/string&gt;&lt;/dict&gt;</span>
<span class="nt">&lt;/dict&gt;&lt;/plist&gt;</span>
</code></pre></div>        </div>
      </li>
      <li>로드: <code class="language-plaintext highlighter-rouge">launchctl load ~/Library/LaunchAgents/com.work.sweepdownloads.plist</code></li>
    </ol>
  </li>
  <li>
    <p><strong>Linux (cron, 매주 금 19:00)</strong><br />
<code class="language-plaintext highlighter-rouge">crontab -e</code>:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 19 * * 5 WORK_DIR=$HOME/Work $HOME/Work/80_Tools/scripts/sweep_downloads.sh &gt;&gt; $HOME/sweepdownloads.log 2&gt;&amp;1
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h1 id="2-windows용-powershell-스윕">2) Windows용: PowerShell 스윕</h1>

<p><code class="language-plaintext highlighter-rouge">$HOME\Work\80_Tools\scripts\sweep_downloads.ps1</code></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$DL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"98_Downloads\_inbox"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$DL</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$DL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"05_Downloads\_inbox"</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"80_Tools\installers"</span><span class="w">
</span><span class="nv">$DEST_DATA_STAGE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="p">(</span><span class="s2">"26_Datasets\_staging\"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">Get-Date</span><span class="w"> </span><span class="nt">-Format</span><span class="w"> </span><span class="s2">"yyyy-MM-dd"</span><span class="p">))</span><span class="w">
</span><span class="nv">$DEST_MANUALS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"40_Resources\manuals\_incoming"</span><span class="w">
</span><span class="nv">$DEST_FONTS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"60_Assets\fonts\_incoming"</span><span class="w">
</span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$DEST_INSTALL</span><span class="p">,</span><span class="nv">$DEST_DATA_STAGE</span><span class="p">,</span><span class="nv">$DEST_MANUALS</span><span class="p">,</span><span class="nv">$DEST_FONTS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">Is-Installer</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="nv">$e</span><span class="o">=</span><span class="p">[</span><span class="n">IO.Path</span><span class="p">]::</span><span class="n">GetExtension</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">();</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="s2">".exe"</span><span class="p">,</span><span class="s2">".msi"</span><span class="p">,</span><span class="s2">".pkg"</span><span class="p">,</span><span class="s2">".dmg"</span><span class="p">,</span><span class="s2">".whl"</span><span class="p">,</span><span class="s2">".deb"</span><span class="p">,</span><span class="s2">".rpm"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="nv">$e</span><span class="w"> </span><span class="o">-or</span><span class="w"> </span><span class="p">(</span><span class="nv">$e</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s2">".zip"</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="n">Split-Path</span><span class="w"> </span><span class="nv">$p</span><span class="w"> </span><span class="nt">-Leaf</span><span class="p">)</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s2">"(setup|install|installer|msi|driver)"</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Is-Manual</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="s2">".pdf"</span><span class="p">,</span><span class="s2">".chm"</span><span class="p">,</span><span class="s2">".html"</span><span class="p">,</span><span class="s2">".htm"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="p">([</span><span class="n">IO.Path</span><span class="p">]::</span><span class="n">GetExtension</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">())</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Is-Font</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="s2">".ttf"</span><span class="p">,</span><span class="s2">".otf"</span><span class="p">,</span><span class="s2">".woff"</span><span class="p">,</span><span class="s2">".woff2"</span><span class="p">,</span><span class="s2">".ttc"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="p">([</span><span class="n">IO.Path</span><span class="p">]::</span><span class="n">GetExtension</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">())</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">ZipHasDataset</span><span class="p">(</span><span class="nv">$zip</span><span class="p">){</span><span class="w">
  </span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-AssemblyName</span><span class="w"> </span><span class="nx">System.IO.Compression.FileSystem</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">Stop</span><span class="w">
    </span><span class="nv">$z</span><span class="o">=</span><span class="p">[</span><span class="n">IO.Compression.ZipFile</span><span class="p">]::</span><span class="n">OpenRead</span><span class="p">(</span><span class="nv">$zip</span><span class="p">)</span><span class="w">
    </span><span class="nv">$m</span><span class="o">=</span><span class="bp">$false</span><span class="w">
    </span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$e</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$z</span><span class="o">.</span><span class="nf">Entries</span><span class="p">){</span><span class="w"> </span><span class="kr">if</span><span class="p">(</span><span class="nv">$e</span><span class="o">.</span><span class="nf">FullName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'\.(csv|tsv|json|parquet|xlsx)$'</span><span class="p">){</span><span class="w"> </span><span class="nv">$m</span><span class="o">=</span><span class="bp">$true</span><span class="p">;</span><span class="w"> </span><span class="kr">break</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="nv">$z</span><span class="o">.</span><span class="nf">Dispose</span><span class="p">();</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="nv">$m</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="bp">$false</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Is-Dataset</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w">
  </span><span class="nv">$e</span><span class="o">=</span><span class="p">[</span><span class="n">IO.Path</span><span class="p">]::</span><span class="n">GetExtension</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="s2">".csv"</span><span class="p">,</span><span class="s2">".tsv"</span><span class="p">,</span><span class="s2">".json"</span><span class="p">,</span><span class="s2">".parquet"</span><span class="p">,</span><span class="s2">".xlsx"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="nv">$e</span><span class="p">){</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="bp">$true</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="s2">".zip"</span><span class="p">,</span><span class="s2">".gz"</span><span class="p">,</span><span class="s2">".tgz"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="nv">$e</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="n">ZipHasDataset</span><span class="w"> </span><span class="nv">$p</span><span class="p">)){</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="bp">$true</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="kr">return</span><span class="w"> </span><span class="bp">$false</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Sha256</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="p">(</span><span class="n">Get-FileHash</span><span class="w"> </span><span class="nv">$p</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">SHA256</span><span class="p">)</span><span class="o">.</span><span class="nf">Hash</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nv">$DL</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$src</span><span class="o">=</span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="p">;</span><span class="w"> </span><span class="nv">$name</span><span class="o">=</span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Is-Installer</span><span class="w"> </span><span class="nv">$src</span><span class="p">){</span><span class="w">
    </span><span class="nv">$dst</span><span class="o">=</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="nv">$name</span><span class="p">;</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="nv">$src</span><span class="w"> </span><span class="nv">$dst</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="nv">$sha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sha256</span><span class="w"> </span><span class="nv">$dst</span><span class="w">
    </span><span class="s2">"</span><span class="nv">$sha</span><span class="s2">  </span><span class="nv">$name</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="s2">"SHA256SUMS"</span><span class="p">)</span><span class="w">
    </span><span class="nv">$notes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="s2">"install_notes.md"</span><span class="w">
    </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$notes</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"# Installers notes</span><span class="se">`n</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-File</span><span class="w"> </span><span class="nv">$notes</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="s2">"- </span><span class="si">$(</span><span class="n">Get-Date</span><span class="w"> </span><span class="nt">-Format</span><span class="w"> </span><span class="s1">'yyyy-MM-dd HH:mm:ss'</span><span class="p">)</span><span class="s2">  </span><span class="se">`$</span><span class="s2">name</span><span class="se">` </span><span class="s2"> sha256=</span><span class="nv">$sha</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="nv">$notes</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"INSTALLER → </span><span class="nv">$dst</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">elseif</span><span class="w"> </span><span class="p">(</span><span class="n">Is-Dataset</span><span class="w"> </span><span class="nv">$src</span><span class="p">){</span><span class="w">
    </span><span class="nv">$dst</span><span class="o">=</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_DATA_STAGE</span><span class="w"> </span><span class="nv">$name</span><span class="p">;</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="nv">$src</span><span class="w"> </span><span class="nv">$dst</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="nv">$sha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sha256</span><span class="w"> </span><span class="nv">$dst</span><span class="w">
    </span><span class="s2">"</span><span class="nv">$sha</span><span class="s2">  </span><span class="nv">$name</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_DATA_STAGE</span><span class="w"> </span><span class="s2">"SHA256SUMS"</span><span class="p">)</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"DATASET → </span><span class="nv">$dst</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">elseif</span><span class="w"> </span><span class="p">(</span><span class="n">Is-Manual</span><span class="w"> </span><span class="nv">$src</span><span class="p">){</span><span class="w">
    </span><span class="nv">$dst</span><span class="o">=</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_MANUALS</span><span class="w"> </span><span class="nv">$name</span><span class="p">;</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="nv">$src</span><span class="w"> </span><span class="nv">$dst</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"MANUAL → </span><span class="nv">$dst</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">elseif</span><span class="w"> </span><span class="p">(</span><span class="n">Is-Font</span><span class="w"> </span><span class="nv">$src</span><span class="p">){</span><span class="w">
    </span><span class="nv">$dst</span><span class="o">=</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_FONTS</span><span class="w"> </span><span class="nv">$name</span><span class="p">;</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="nv">$src</span><span class="w"> </span><span class="nv">$dst</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"FONT → </span><span class="nv">$dst</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"SKIP (unknown) </span><span class="nv">$name</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>스케줄러 등록</strong> (매일 19:00):</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$act</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-ScheduledTaskAction</span><span class="w"> </span><span class="nt">-Execute</span><span class="w"> </span><span class="s2">"pwsh.exe"</span><span class="w"> </span><span class="nt">-Argument</span><span class="w"> </span><span class="s2">"-NoProfile -File </span><span class="se">`"</span><span class="bp">$HOME</span><span class="s2">\Work\80_Tools\scripts\sweep_downloads.ps1</span><span class="se">`"</span><span class="s2">"</span><span class="w">
</span><span class="nv">$trg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-ScheduledTaskTrigger</span><span class="w"> </span><span class="nt">-Daily</span><span class="w"> </span><span class="nt">-At</span><span class="w"> </span><span class="nx">19:00</span><span class="w">
</span><span class="n">Register-ScheduledTask</span><span class="w"> </span><span class="nt">-TaskName</span><span class="w"> </span><span class="s2">"WorkSweepDownloads"</span><span class="w"> </span><span class="nt">-Action</span><span class="w"> </span><span class="nv">$act</span><span class="w"> </span><span class="nt">-Trigger</span><span class="w"> </span><span class="nv">$trg</span><span class="w"> </span><span class="nt">-Description</span><span class="w"> </span><span class="s2">"Move downloads to canonical locations"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="3-today런처에-수동-실행-버튼선택">3) today/런처에 수동 실행 버튼(선택)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sweep downloads now   | 80_Tools/scripts | ./sweep_downloads.sh
</code></pre></div></div>

<p>(PowerShell이면 <code class="language-plaintext highlighter-rouge">./sweep_downloads.ps1</code>)</p>

<hr />

<h2 id="운용-팁--주의점">운용 팁 &amp; 주의점</h2>

<ul>
  <li>
    <p><strong>정본만 이동</strong> : 스크립트는 <em>이동만</em> 하므로 되돌리기 쉬워요. 삭제는 손대지 않음.</p>
  </li>
  <li>
    <p><strong>데이터셋은<code class="language-plaintext highlighter-rouge">_staging</code></strong>: 이름/버전 결정을 못하니 <code class="language-plaintext highlighter-rouge">26_Datasets/_staging/YYYY-MM-DD/</code>로 모읍니다. 필요할 때만 정식 버전(<code class="language-plaintext highlighter-rouge">datasets/&lt;name&gt;/vYYYY.MMDD/…</code>)으로 <strong>승격</strong> 하세요.</p>
  </li>
  <li>
    <p><strong>체크섬 자동 기록</strong> : 설치파일/데이터셋은 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성, 설치파일은 <code class="language-plaintext highlighter-rouge">install_notes.md</code>에 타임스탬프까지 남김.</p>
  </li>
  <li>
    <p><strong>미인식 파일</strong> : 규칙에 안 맞으면 그냥 건드리지 않습니다(다음 스윕에 재시도).</p>
  </li>
  <li>
    <p><strong>안전망</strong> : 처음 1~2주 동안은 <strong>수동 실행으로 결과 확인</strong> 해 보세요. 문제가 없으면 스케줄러 켜두면 끝.</p>
  </li>
</ul>

<p>원하면 위 스크립트에 <strong>추가 규칙(예: 특정 프로젝트 이름 키워드로 데이터셋 자동 폴더명 부여, zip 내부 구조에 따른 자동 풀기)</strong>도 얹어 줄게.</p>

<p class="chat--user">

그냥 05로 할게

</p>

<p>좋아, <strong>05로 확정!</strong> 다운로드 착륙지를 <code class="language-plaintext highlighter-rouge">05_Downloads</code>로 쓰는 설정을 한 번에 마무리하자. 아래 그대로 따라 하면 끝이야.</p>

<hr />

<h1 id="1-폴더-만들기-복붙">1) 폴더 만들기 (복붙)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
├─ 05_Downloads/                 - 다운로드 착륙지(Landing Zone, 정리 전 임시)
│  ├─ _inbox/                    - 브라우저/툴 기본 저장 경로
│  ├─ installers/                - 설치 파일(.exe/.msi/.pkg/.dmg/.whl/.zip)
│  ├─ datasets/                  - 데이터셋 압축/CSV 임시(해제 전)
│  ├─ manuals/                   - 매뉴얼/가이드 PDF/HTML 임시
│  ├─ assets/                    - 폰트/아이콘/템플릿 등 임시
│  └─ quarantine/                - 의심 파일(검사 전 격리)
</code></pre></div></div>

<hr />

<h1 id="2-초기-셋업-step-by-step">2) 초기 셋업 (step-by-step)</h1>

<h2 id="macos--linux-1">macOS / Linux</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/Work/05_Downloads/<span class="o">{</span>_inbox,installers,datasets,manuals,assets,quarantine<span class="o">}</span>

<span class="c"># (선택) OS 기본 Downloads → Work/05_Downloads/_inbox 로 바꾸기</span>
<span class="nb">mv</span> ~/Downloads ~/Downloads.bak 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
ln</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/05_Downloads/_inbox"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Downloads"</span>
</code></pre></div></div>

<h2 id="windows-powershell-4">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\_inbox"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\installers"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\datasets"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\manuals"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\assets"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\quarantine"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">

</span><span class="c"># (선택) 사용자 Downloads → Work\05_Downloads\_inbox 링크</span><span class="w">
</span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Downloads"</span><span class="w"> </span><span class="s2">"Downloads.bak"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Downloads"</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Work\05_Downloads\_inbox"</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>브라우저(Chrome/Edge/Firefox) <strong>기본 다운로드 폴더</strong> 를 <code class="language-plaintext highlighter-rouge">Work/05_Downloads/_inbox</code>로 설정하면 더 깔끔.</p>
</blockquote>

<hr />

<h1 id="3-사용-중이면-98에서-05로-이관">3) (사용 중이면) 98에서 05로 이관</h1>

<h3 id="macos--linux-2">macOS / Linux</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> ~/Work/98_Downloads <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv</span> ~/Work/98_Downloads/<span class="k">*</span> ~/Work/05_Downloads/ 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
rmdir</span> ~/Work/98_Downloads 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/98_Downloads/#/05_Downloads/#g'</span> ~/Work/10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<h3 id="windows-powershell-5">Windows (PowerShell)</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\*"</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads"</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
  </span><span class="n">Remove-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads"</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/98_Downloads/'</span><span class="p">,</span><span class="s1">'/05_Downloads/'</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="4-자동-정리-스크립트05-우선-사용-팁">4) 자동 정리 스크립트(05 우선) 사용 팁</h1>

<p>내가 줬던 <strong>스윕 스크립트</strong> 를 05 우선으로 돌리려면, 상단의 다운로드 경로만 이렇게 잡으면 돼.</p>

<p><strong>bash/zsh (<code class="language-plaintext highlighter-rouge">sweep_downloads.sh</code>)</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">DL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/05_Downloads/_inbox"</span>
<span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$DL</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="nv">DL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/98_Downloads/_inbox"</span>   <span class="c"># (있으면 폴백)</span>
</code></pre></div></div>

<p><strong>PowerShell (<code class="language-plaintext highlighter-rouge">sweep_downloads.ps1</code>)</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$DL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"05_Downloads\_inbox"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$DL</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$DL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"98_Downloads\_inbox"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>스케줄(매일/매주) 등록 방법은 이전 메시지 그대로 쓰면 OK.</p>
</blockquote>

<hr />

<h1 id="5-today-런처에-한-줄선택">5) Today 런처에 한 줄(선택)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sort downloads       | 05_Downloads               | ${EDITOR:-vi} README_SORTING.md
Open installers box  | 80_Tools/installers        | ls -al
</code></pre></div></div>

<hr />

<h2 id="사용-시-주의점요약">사용 시 주의점(요약)</h2>

<ul>
  <li>
    <p><strong>05_Downloads는 임시</strong> : 정본은 반드시 전용 위치로</p>

    <ul>
      <li>
        <p>설치파일 → <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code> (+ <code class="language-plaintext highlighter-rouge">install_notes.md</code>/<code class="language-plaintext highlighter-rouge">SHA256SUMS</code>)</p>
      </li>
      <li>
        <p>데이터셋 → <code class="language-plaintext highlighter-rouge">26_Datasets/...</code> (+ <code class="language-plaintext highlighter-rouge">manifest.yml</code>/<code class="language-plaintext highlighter-rouge">SHA256SUMS</code>)</p>
      </li>
      <li>
        <p>매뉴얼 → <code class="language-plaintext highlighter-rouge">40_Resources/manuals/...</code></p>
      </li>
      <li>
        <p>자산(폰트 등) → <code class="language-plaintext highlighter-rouge">60_Assets/...</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>자동화 적극 활용</strong> : 스윕 스크립트를 <strong>스케줄러에 등록</strong> 해 “손 안 대고” 분류·이동.</p>
  </li>
  <li>
    <p><strong>보안</strong> : 출처 불명은 <code class="language-plaintext highlighter-rouge">quarantine/</code>에 먼저 두고 검사.</p>
  </li>
  <li>
    <p><strong>.gitignore</strong> : Work를 레포로 관리한다면 <code class="language-plaintext highlighter-rouge">05_Downloads/**</code>는 <strong>항상 제외</strong>.</p>
  </li>
  <li>
    <p><strong>정리 루틴</strong> : 최소 주 1회 <code class="language-plaintext highlighter-rouge">_inbox</code> 확인(자동화가 못 잡은 항목만 처리).</p>
  </li>
</ul>

<p>원하면 네 환경(운영체제/셸)에 맞춰 스윕 스크립트를 <strong>05 기준으로 고정한 최종본</strong> 을 깔끔히 묶어서 드릴게.</p>

<p class="chat--user">

.cshrc는 어디 두는게 좋을까

</p>

<p>짧게: <strong>정본은</strong> <code class="language-plaintext highlighter-rouge">Work/90_PersonalConfigs/shell/tcsh/.tcshrc</code> 에 두고, <strong>홈에는 심볼릭 링크</strong> 로 연결하세요.<br />
(팀/공유 기본값이 있다면 <code class="language-plaintext highlighter-rouge">Work/32_SharedConfigs/global/shell/tcsh/tcshrc.base</code>를 먼저 <code class="language-plaintext highlighter-rouge">source</code>하고 개인 설정으로 오버라이드.)</p>

<hr />

<h1 id="어디에-어떻게-두나-step-by-step">어디에 어떻게 두나 (step-by-step)</h1>

<h2 id="1-위치정본">1) 위치(정본)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
└─ 90_PersonalConfigs/
   └─ shell/
      └─ tcsh/
         ├─ .tcshrc          ← 개인 메인 설정(정본)
         ├─ rc.d/            ← 분할 설정(옵션)
         │  ├─ 00-paths.csh
         │  ├─ 10-env.csh
         │  ├─ 20-aliases.csh
         │  └─ 30-prompt.csh
         └─ host.d/          ← 기기별 오버라이드(옵션)
            └─ &lt;hostname&gt;.csh
</code></pre></div></div>

<blockquote>
  <p><strong>왜<code class="language-plaintext highlighter-rouge">.tcshrc</code>?</strong> tcsh는 <code class="language-plaintext highlighter-rouge">~/.tcshrc</code>가 있으면 그걸 우선 읽고, 없으면 <code class="language-plaintext highlighter-rouge">~/.cshrc</code>를 읽습니다. 호환이 필요하면 <code class="language-plaintext highlighter-rouge">~/.cshrc</code>를 <code class="language-plaintext highlighter-rouge">~/.tcshrc</code>로 링크해 두면 돼요.</p>
</blockquote>

<h2 id="2-홈에-연결심볼릭-링크">2) 홈에 연결(심볼릭 링크)</h2>

<p><strong>macOS/Linux</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/90_PersonalConfigs/shell/tcsh/.tcshrc"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.tcshrc"</span>
<span class="c"># (선택) csh 호환</span>
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.tcshrc"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.cshrc"</span>
</code></pre></div></div>

<p><strong>WSL/Cygwin</strong> 도 동일(경로만 맞추면 됨).</p>

<h2 id="3-추천-tcshrc-골격복붙">3) 추천 <code class="language-plaintext highlighter-rouge">.tcshrc</code> 골격(복붙)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# --- shared base (있으면) ---
if ( -r "$HOME/Work/32_SharedConfigs/global/shell/tcsh/tcshrc.base" ) then
  source "$HOME/Work/32_SharedConfigs/global/shell/tcsh/tcshrc.base"
endif

# --- 개인 기본값 ---
setenv WORK_DIR "$HOME/Work"

# PATH 예시: (중복되면 앞에 두기)
set path = ( $HOME/Work/80_Tools/scripts $path )

# 분할 로드(rc.d/*.csh)
set _rcdir = "$HOME/Work/90_PersonalConfigs/shell/tcsh/rc.d"
if ( -d "$_rcdir" ) then
  set _files = ( `/bin/ls $_rcdir/*.csh 2&gt;/dev/null` )
  foreach f ( $_files )
    if ( -r "$f" ) source "$f"
  end
endif

# 호스트별 오버라이드(host.d/&lt;hostname&gt;.csh)
set _host = `hostname -s`
set _hostrc = "$HOME/Work/90_PersonalConfigs/shell/tcsh/host.d/${_host}.csh"
if ( -r "$_hostrc" ) source "$_hostrc"

# 인터랙티브에서만 프롬프트/컬러
if ( $?prompt ) then
  set prompt = "%B%n%b@%m:%~ %# "
endif

# (선택) Today 런처 단축키
if ( -x "$HOME/Work/10_Today/today.csh" ) then
  alias t "$HOME/Work/10_Today/today.csh"
endif
</code></pre></div></div>

<h3 id="예시-분할-파일">예시 분할 파일</h3>

<p><code class="language-plaintext highlighter-rouge">rc.d/20-aliases.csh</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

alias ll 'ls -alF'
alias gs 'git status'
alias gp 'git pull --rebase'
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">rc.d/00-paths.csh</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# 자주 쓰는 경로 우선
set path = ( $HOME/Work/80_Tools/scripts $HOME/bin $path )
</code></pre></div></div>

<blockquote>
  <p><strong>비밀/토큰</strong> 은 이 파일들에 직접 넣지 말고, tcsh 형식으로 적은 <code class="language-plaintext highlighter-rouge">Work/90_PersonalConfigs/secrets/.env-shell.local</code> 등을 따로 두고 필요 시 <code class="language-plaintext highlighter-rouge">source</code>하세요.</p>
</blockquote>

<hr />

<h1 id="운용-규칙핵심-1">운용 규칙(핵심)</h1>

<ul>
  <li>
    <p><strong>정본은 90_PersonalConfigs</strong> : 홈의 <code class="language-plaintext highlighter-rouge">~/.tcshrc</code>는 <strong>링크</strong> 만. 백업/동기화는 정본만 관리.</p>
  </li>
  <li>
    <p><strong>레이어링</strong> : <code class="language-plaintext highlighter-rouge">32_SharedConfigs</code>(있으면) → <code class="language-plaintext highlighter-rouge">90_PersonalConfigs</code>(개인 오버라이드) → 호스트별.</p>
  </li>
  <li>
    <p><strong>모듈화</strong> : <code class="language-plaintext highlighter-rouge">rc.d/*.csh</code>로 쪼개 두면 충돌/수정이 쉬움.</p>
  </li>
  <li>
    <p><strong>재적용</strong> : 변경 후 <code class="language-plaintext highlighter-rouge">source ~/.tcshrc</code>로 즉시 적용.</p>
  </li>
  <li>
    <p><strong>이식성</strong> : 다른 머신에선 <strong>링크만</strong> 다시 걸면 같은 환경 재현.</p>
  </li>
</ul>

<p>필요하면 네 현재 <code class="language-plaintext highlighter-rouge">.cshrc</code> 내용을 위 구조로 자동 분해(aliases/env/path/prompt)해 주는 스크립트도 만들어 줄게—원하면 붙여줘!</p>

<p class="chat--user">

좀 Stable 하게 기반이 될 Tool들(e.g. gcc)도 그냥 80_Tools에 설치하면 되려나? 여러 사람이 공유할 급의 안정적이어야하는 툴들과 가볍게 개인적으로 테스트해보는 툴 등 전부다 저기 박으려니 좀 헷갈릴거 같기도하고

</p>

<p>좋은 고민이야. <strong>정리:</strong> <em>모든 걸 80_Tools에 몰지 말고</em> “안정적·공유용 vs. 개인 실험용”으로 <strong>물리적 분리</strong> 하자.</p>

<hr />

<h1 id="권장-분리안">권장 분리안</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
├─ 78_Toolchains/                         - 팀/장기 공용용 ‘고정 버전’ 툴체인(매우 안정)
│  ├─ gcc/13.2.0/{bin,lib,include,...}
│  ├─ cmake/3.29.3/{bin,...}
│  ├─ ninja/1.12.1/{bin,...}
│  └─ &lt;tool&gt;/&lt;ver&gt;/&lt;os&gt;-&lt;arch&gt;/          - 필요 시 OS/아키 구분 (win-x64, linux-x64, mac-arm64)
│     └─ latest → &lt;ver&gt;                  - 심볼릭 링크(현재 표준)
├─ 79_SDKs/                               - 큰 플랫폼 SDK/런타임(JDK, Qt, Android NDK 등)
│  ├─ jdk/21.0.2/
│  ├─ qt/6.7.2/
│  └─ &lt;sdk&gt;/&lt;ver&gt;/
├─ 80_Tools/                              - 개인·단기·포터블 유틸(자주 바뀌는 것)
│  ├─ installers/                         - 설치 파일 보관(체크섬, install_notes.md)
│  ├─ bin/                                - 작은 단일 바이너리(사전 PATH)
│  ├─ portable/                           - 압축 풀어 쓰는 포터블 툴(개인용)
│  ├─ scripts/                            - 부트스트랩/릴리스/체크섬 스크립트
│  └─ scratch/                            - 실험용(자동 청소 대상)
└─ 85_Environments/                       - 도커/콘다/venv 등 “환경 캡슐” 샘플
</code></pre></div></div>

<blockquote>
  <p><strong>한 줄 규칙</strong></p>

  <ul>
    <li>
      <p><strong>팀과 공유할 ‘표준 버전, 오래 쓰는 툴’</strong> → <code class="language-plaintext highlighter-rouge">78_Toolchains/</code></p>
    </li>
    <li>
      <p><strong>개인 테스트·포터블·자주 바뀌는 유틸</strong> → <code class="language-plaintext highlighter-rouge">80_Tools/</code></p>
    </li>
    <li>
      <p><strong>플랫폼/런타임 묶음</strong>(JDK/Qt/NDK 등 대형 SDK) → <code class="language-plaintext highlighter-rouge">79_SDKs/</code></p>
    </li>
    <li>
      <p><strong>프로젝트 전용/복제 가능 환경</strong> → <code class="language-plaintext highlighter-rouge">85_Environments/</code>(Docker/conda 등)로 캡슐화</p>
    </li>
  </ul>

</blockquote>

<hr />

<h2 id="어떻게-선택하지-결정표">어떻게 선택하지? (결정표)</h2>

<table>
  <thead>
    <tr>
      <th>상황</th>
      <th>위치</th>
      <th>이유</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>팀 표준 gcc/cmake/ninja처럼 <strong>버전 고정·장기 사용</strong></td>
      <td><code class="language-plaintext highlighter-rouge">78_Toolchains/&lt;tool&gt;/&lt;ver&gt;/</code></td>
      <td>경로·버전이 안 흔들림, CI/문서와 일치</td>
    </tr>
    <tr>
      <td>Qt/JDK/NDK 같은 <strong>대형 SDK</strong></td>
      <td><code class="language-plaintext highlighter-rouge">79_SDKs/&lt;sdk&gt;/&lt;ver&gt;/</code></td>
      <td>용량 큼, 다중 버전 공존 필요</td>
    </tr>
    <tr>
      <td><strong>개인 실험/경량 유틸</strong>(ripgrep, fd, bat 등)</td>
      <td><code class="language-plaintext highlighter-rouge">80_Tools/bin</code> or <code class="language-plaintext highlighter-rouge">80_Tools/portable</code></td>
      <td>자주 교체, 실패해도 영향 적음</td>
    </tr>
    <tr>
      <td><strong>프로젝트별 의존 스택</strong>(파이썬/시스템툴 조합)</td>
      <td>`85_Environments/docker</td>
      <td>conda</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="버전path-운용충돌-없이">버전·PATH 운용(충돌 없이)</h2>

<h3 id="1-latest-심볼릭-링크공유-표준">1) “latest” 심볼릭 링크(공유 표준)</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>78_Toolchains/gcc/13.2.0/...
78_Toolchains/gcc/latest  -&gt; 13.2.0
</code></pre></div></div>

<ul>
  <li>문서/스크립트에 <strong><code class="language-plaintext highlighter-rouge">.../gcc/latest/bin</code></strong>를 쓰면 팀이 최신 표준을 바꿀 때 하나만 갈아끼면 됨.</li>
</ul>

<h3 id="2-path-레이어우선순위">2) PATH 레이어(우선순위)</h3>

<ul>
  <li><strong>bash/zsh</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Tools/bin:</span><span class="nv">$HOME</span><span class="s2">/Work/78_Toolchains/gcc/latest/bin:</span><span class="nv">$HOME</span><span class="s2">/Work/78_Toolchains/cmake/latest/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div>    </div>
  </li>
  <li><strong>tcsh</strong>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh
    
set path = ( $HOME/Work/80_Tools/bin $HOME/Work/78_Toolchains/gcc/latest/bin $path )
</code></pre></div>    </div>
  </li>
  <li><strong>PowerShell</strong>
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\80_Tools\bin;</span><span class="bp">$HOME</span><span class="s2">\Work\78_Toolchains\gcc\latest\bin;"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-세션-한정-버전-스위치충돌-방지">3) 세션 한정 버전 스위치(충돌 방지)</h3>

<ul>
  <li><strong>bash/zsh</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>use<span class="o">()</span> <span class="o">{</span>  <span class="c"># 사용: use gcc 13.2.0</span>
  <span class="k">case</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="k">in
    </span>gcc|cmake|ninja<span class="p">)</span> <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/78_Toolchains/</span><span class="nv">$1</span><span class="s2">/</span><span class="nv">$2</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span> <span class="p">;;</span>
    jdk<span class="p">)</span> <span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/79_SDKs/jdk/</span><span class="nv">$2</span><span class="s2">"</span><span class="p">;</span> <span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$JAVA_HOME</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span> <span class="p">;;</span>
    <span class="k">*</span><span class="p">)</span> <span class="nb">echo</span> <span class="s2">"unknown tool"</span><span class="p">;;</span>
  <span class="k">esac</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li><strong>tcsh</strong>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh
    
alias use 'set t=\!:1; set v=\!:2; set p=$HOME/Work/78_Toolchains/$t/$v/bin; if ( -d $p ) set path = ( $p $path )'
</code></pre></div>    </div>
  </li>
  <li><strong>PowerShell</strong>
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">Use-Tool</span><span class="p">(</span><span class="nv">$t</span><span class="p">,</span><span class="nv">$v</span><span class="p">){</span><span class="w"> </span><span class="nv">$p</span><span class="o">=</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\78_Toolchains\</span><span class="nv">$t</span><span class="s2">\</span><span class="nv">$v</span><span class="s2">\bin"</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="o">=</span><span class="s2">"</span><span class="nv">$p</span><span class="s2">;</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="s2">"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<hr />

<h2 id="설치기록-규칙짧게">설치/기록 규칙(짧게)</h2>

<ul>
  <li>
    <p><strong>체크섬</strong> : 내려받은 아카이브는 <code class="language-plaintext highlighter-rouge">80_Tools/installers</code>에 보관하고 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> + <code class="language-plaintext highlighter-rouge">install_notes.md</code> 기록.</p>
  </li>
  <li>
    <p><strong>풀 위치</strong> :</p>

    <ul>
      <li>
        <p>공용/고정 버전 → <code class="language-plaintext highlighter-rouge">78_Toolchains/&lt;tool&gt;/&lt;ver&gt;/</code>에 압축 해제</p>
      </li>
      <li>
        <p>개인 테스트 → <code class="language-plaintext highlighter-rouge">80_Tools/portable/&lt;tool&gt;-&lt;ver&gt;/</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>문서화</strong> : <code class="language-plaintext highlighter-rouge">32_SharedConfigs/global/&lt;tool&gt;/README.md</code>에 “표준 버전/경로/업데이트 절차” 1페이지.</p>
  </li>
</ul>

<hr />

<h2 id="청소-정책">청소 정책</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">80_Tools/scratch</code>와 <code class="language-plaintext highlighter-rouge">80_Tools/portable</code>은 <strong>N일(예: 60일) 미사용 시 자동 삭제</strong> 스윕 스크립트 권장.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">78_Toolchains</code>/<code class="language-plaintext highlighter-rouge">79_SDKs</code>는 <strong>삭제 금지</strong>(팀 표준). 교체 시 <strong>latest</strong> 만 전환하고 구버전은 일정 기간 보존.</p>
  </li>
</ul>

<hr />

<h2 id="예시-gcc-운용">예시: gcc 운용</h2>

<ol>
  <li>
    <p>설치 파일을 <code class="language-plaintext highlighter-rouge">05_Downloads/_inbox</code> → 스윕 → <code class="language-plaintext highlighter-rouge">80_Tools/installers</code>로 이동(+체크섬).</p>
  </li>
  <li>
    <p>압축/설치 후 <code class="language-plaintext highlighter-rouge">78_Toolchains/gcc/13.2.0/</code>에 배치.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">78_Toolchains/gcc/latest → 13.2.0</code> 링크 생성.</p>
  </li>
  <li>
    <p>CI/문서/개인 PATH에서 <code class="language-plaintext highlighter-rouge">.../gcc/latest/bin</code> 사용.</p>
  </li>
  <li>
    <p>새 표준 채택 시 <code class="language-plaintext highlighter-rouge">latest</code>만 갈아끼우고, 구버전은 <code class="language-plaintext highlighter-rouge">13.1.0/</code> 그대로 보존.</p>
  </li>
</ol>

<hr />

<h2 id="마이그레이션지금-섞여-있다면">마이그레이션(지금 섞여 있다면)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">80_Tools/portable</code>로 <strong>개인 실험 툴</strong> 을 먼저 분리 이동.</p>
  </li>
  <li>
    <p>팀이 공유하는 고정 버전은 <code class="language-plaintext highlighter-rouge">78_Toolchains/&lt;tool&gt;/&lt;ver&gt;/</code>로 이관 + <code class="language-plaintext highlighter-rouge">latest</code> 링크.</p>
  </li>
  <li>
    <p>PATH/런처/스크립트에서 절대경로를 <strong>78/79 기준</strong> 으로 교체.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">32_SharedConfigs/global</code>에 <strong>표준 버전 표</strong> 1장 추가(업데이트 절차 포함).</p>
  </li>
</ol>

<hr />

<h3 id="요약-4">요약</h3>

<ul>
  <li>
    <p><strong>안정·공유</strong> ↔ <strong>개인·가변</strong> 을 <strong>물리적으로 분리</strong> : <code class="language-plaintext highlighter-rouge">78_Toolchains</code>/<code class="language-plaintext highlighter-rouge">79_SDKs</code> vs <code class="language-plaintext highlighter-rouge">80_Tools</code>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">latest</code> 링크 + <code class="language-plaintext highlighter-rouge">use</code> 함수로 <strong>버전 스위칭</strong> 스트레스 최소화.</p>
  </li>
  <li>
    <p>설치·체크섬·문서화 루틴을 고정해 <strong>예측 가능성</strong> 을 확보.</p>
  </li>
</ul>

<p>원하면 네 OS/셸에 맞는 <strong>폴더 생성·latest 링크·PATH 설정</strong> 을 한 번에 해주는 부트스트랩 스크립트(bash/tcsh/PowerShell)도 만들어줄게.</p>

<p class="chat--user">

지금 상태에서 각각 폴더명은 그대로 둔 채 폴더 번호를 다시 합리적으로 꼼꼼히 생각해서 매겨봐줘.

</p>

<p>좋아! “폴더 <strong>이름은 그대로</strong> 두고, <strong>번호만</strong> 합리적으로 리패터닝” 해봤어.<br />
핵심은 <strong>흐름(수집→오늘→개발→실행/데이터→지식/설정→자료→산출→툴/환경→개인→보관)</strong> 순으로 <strong>번호 블록을 붙여</strong> 스캔했을 때 직관적으로 보이게 하는 거야.</p>

<hr />

<h1 id="번호-설계-원칙-짧게">번호 설계 원칙 (짧게)</h1>

<ol>
  <li>
    <p><strong>00–09 수집/임시</strong> : Inbox·Downloads</p>
  </li>
  <li>
    <p><strong>10–19 오늘·런처</strong> : Today</p>
  </li>
  <li>
    <p><strong>20–29 개발/실행/데이터</strong> : Projects·Labs·Jobs·Datasets</p>
  </li>
  <li>
    <p><strong>30–39 지식/설정</strong> : Areas·SharedConfigs</p>
  </li>
  <li>
    <p><strong>40–49 참고자료</strong> : Resources</p>
  </li>
  <li>
    <p><strong>50–59 코드조각</strong> : Snippets</p>
  </li>
  <li>
    <p><strong>60–69 시각자산</strong> : Assets</p>
  </li>
  <li>
    <p><strong>70–79 산출/배포</strong> : Exports·Releases</p>
  </li>
  <li>
    <p><strong>80–89 툴스택</strong> : Toolchains·SDKs·Tools·Environments</p>
  </li>
  <li>
    <p><strong>90–99 개인/보관</strong> : PersonalConfigs·Archive</p>
  </li>
</ol>

<hr />

<h1 id="제안-번호-최종안">제안 번호 (최종안)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>00_Inbox             - 급히 던져두는 임시함
05_Downloads         - 다운로드 착륙지(_inbox/ installers/ datasets/ …)
10_Today             - 오늘 작업 대시보드(런처/단축)
20_Projects          - 툴(파이썬 패키지) 개발 리포
22_Labs              - 가벼운 실험/프로토(재현 불필요)
25_Jobs              - 산출 작업 단위(입력→설정→실행→전달)
26_Datasets          - 입력/출력 데이터셋 중앙 저장소
30_Areas             - 장기 운영 영역(지속 업무/정책 메모)
32_SharedConfigs     - 공유/골든 설정(표준 ruff/pytest/VSCode 등)
40_Resources         - 교육/매뉴얼/스펙 등 참고 자료
50_Snippets          - 재사용 코드/원라이너/텍스트 조각
60_Assets            - 로고/폰트/템플릿 등 시각 자산
70_Exports           - 여러 Job의 최종 전달본 모아보기(옵션)
75_Releases          - 유저 배포본(버전드, checksums/ ReleaseNotes)
82_Toolchains        - gcc/cmake/ninja 등 팀 표준 ‘고정 버전’ 툴체인
83_SDKs              - JDK/Qt/Android NDK 같은 대형 SDK
84_Tools             - 개인·경량·포터블 유틸/스크립트
86_Environments      - docker/conda/venv 등 환경 캡슐
90_PersonalConfigs   - 개인 설정(오버라이드/비공개)
99_Archive           - 완료 항목 장기 보관(읽기 전용)
</code></pre></div></div>

<blockquote>
  <p>포인트</p>

  <ul>
    <li>
      <p><strong>Labs를 31→22</strong> 로 당겨 <strong>Projects(20)–Labs(22)–Jobs(25)–Datasets(26)</strong>가 연속 흐름이 됨.</p>
    </li>
    <li>
      <p><strong>Toolchains/SDKs/Tools/Environments</strong> 를 <strong>82–86</strong> 으로 한 블록에 모아 충돌/우선순위 관리 쉬움.</p>
    </li>
    <li>
      <p>나머지는 기존 의미 유지(번호만 정리).</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="참고-기존--새-번호-매핑">(참고) 기존 → 새 번호 매핑</h1>

<table>
  <thead>
    <tr>
      <th>기존</th>
      <th>새</th>
      <th>폴더명</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>00</td>
      <td>00</td>
      <td>Inbox</td>
    </tr>
    <tr>
      <td>05 또는 98</td>
      <td>05</td>
      <td>Downloads</td>
    </tr>
    <tr>
      <td>10</td>
      <td>10</td>
      <td>Today</td>
    </tr>
    <tr>
      <td>20</td>
      <td>20</td>
      <td>Projects</td>
    </tr>
    <tr>
      <td>31</td>
      <td>22</td>
      <td>Labs</td>
    </tr>
    <tr>
      <td>25</td>
      <td>25</td>
      <td>Jobs</td>
    </tr>
    <tr>
      <td>26</td>
      <td>26</td>
      <td>Datasets</td>
    </tr>
    <tr>
      <td>30</td>
      <td>30</td>
      <td>Areas</td>
    </tr>
    <tr>
      <td>32</td>
      <td>32</td>
      <td>SharedConfigs</td>
    </tr>
    <tr>
      <td>40</td>
      <td>40</td>
      <td>Resources</td>
    </tr>
    <tr>
      <td>50</td>
      <td>50</td>
      <td>Snippets</td>
    </tr>
    <tr>
      <td>60</td>
      <td>60</td>
      <td>Assets</td>
    </tr>
    <tr>
      <td>70</td>
      <td>70</td>
      <td>Exports</td>
    </tr>
    <tr>
      <td>75</td>
      <td>75</td>
      <td>Releases</td>
    </tr>
    <tr>
      <td>78</td>
      <td>82</td>
      <td>Toolchains</td>
    </tr>
    <tr>
      <td>79</td>
      <td>83</td>
      <td>SDKs</td>
    </tr>
    <tr>
      <td>80</td>
      <td>84</td>
      <td>Tools</td>
    </tr>
    <tr>
      <td>85</td>
      <td>86</td>
      <td>Environments</td>
    </tr>
    <tr>
      <td>90</td>
      <td>90</td>
      <td>PersonalConfigs</td>
    </tr>
    <tr>
      <td>99</td>
      <td>99</td>
      <td>Archive</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="마이그레이션-팁-선택">마이그레이션 팁 (선택)</h2>

<ul>
  <li>
    <p><strong>심볼릭 링크/스크립트 경로</strong> 에서 숫자만 바뀌니, <code class="language-plaintext highlighter-rouge">sed</code>로 일괄 치환하면 끝.</p>
  </li>
  <li>
    <p>Today 런처(<code class="language-plaintext highlighter-rouge">shortcuts.list</code>)와 PATH 설정만 확인해 주면 대부분 끝나요.</p>

    <ul>
      <li>예: <code class="language-plaintext highlighter-rouge">…/78_Toolchains/</code> → <code class="language-plaintext highlighter-rouge">…/82_Toolchains/</code>, <code class="language-plaintext highlighter-rouge">…/31_Labs/</code> → <code class="language-plaintext highlighter-rouge">…/22_Labs/</code></li>
    </ul>
  </li>
</ul>

<p>필요하면 <strong>bash/tcsh/PowerShell용 안전 리네임 스크립트</strong>(존재 시에만 mv, shortcuts.list 자동 치환)도 바로 만들어줄게.</p>

<p class="chat--user">

왜 굳이 82야

</p>

<p>좋은 질문! <strong>82</strong> 로 둔 건 “80대=툴 스택” 블록 안에서 <strong>여유·정렬·확장성</strong> 을 동시에 잡기 위한 의도야. 간단히, <em>기초 → 플랫폼 → 개인 유틸 → 캡슐 환경</em> 순서로 정렬하면서 중간에 빈 번호를 남겨두려는 선택이었어.</p>

<h2 id="왜-82인가-step-by-step">왜 82인가 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>블록화(80대 전용)</strong><br />
80–89를 “툴/런타임/환경” 전용으로 묶고, 그 안에서 계층을 아래처럼 배치:</p>

    <ul>
      <li>
        <p><strong>82_Toolchains</strong> : gcc/cmake/ninja 같은 <strong>핵심 빌드 도구(기초층)</strong></p>
      </li>
      <li>
        <p><strong>83_SDKs</strong> : JDK/Qt/NDK 같은 <strong>플랫폼 SDK(기반층)</strong></p>
      </li>
      <li>
        <p><strong>84_Tools</strong> : ripgrep/bat/사내 유틸 등 <strong>개인/경량 도구(응용층)</strong></p>
      </li>
      <li>
        <p><strong>86_Environments</strong> : docker/conda/venv <strong>캡슐 환경(격리층)</strong><br />
→ <strong>기초→플랫폼→개인→격리</strong> 순으로 자연스럽게 스캔되도록 번호가 증가해.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>여유 슬롯 확보</strong><br />
80–81, 85, 87–89를 비워 두면 나중에 끼워넣기 좋아:</p>

    <ul>
      <li>
        <p>80_Runtimes (Python/Node/Go 런타임 모음)</p>
      </li>
      <li>
        <p>81_PackageManagers (asdf/pyenv/nvm 등)</p>
      </li>
      <li>
        <p>85_Containers (이미지/베이스레이어)</p>
      </li>
      <li>
        <p>87_CIHelpers … 같은 식의 확장 여지</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>시각적 구분 + 충돌 최소화</strong><br />
84_Tools(개인 실험/포터블)보다 <strong>앞</strong> 에 82_Toolchains(팀 표준·고정버전)를 두면<br />
“표준 먼저, 개인 유틸 나중”이 정렬상에서도 드러나고, 문서/PATH 우선순위도 명확해.</p>
  </li>
</ol>

<hr />

<h2 id="대안-번호도-ok-취향에-따라">대안 번호도 OK (취향에 따라)</h2>

<ul>
  <li>
    <p><strong>연속형이 더 좋다면</strong> : <code class="language-plaintext highlighter-rouge">80_Toolchains / 81_SDKs / 82_Tools / 83_Environments</code></p>

    <ul>
      <li>장점: 기억하기 쉬움. 단점: 중간에 새 카테고리 끼우기 어려움.</li>
    </ul>
  </li>
  <li>
    <p><strong>기존 80_Tools 유지 호환형</strong> : <code class="language-plaintext highlighter-rouge">78_Toolchains / 79_SDKs / 80_Tools / 85_Environments</code></p>

    <ul>
      <li>장점: 기존 경로 변경 최소. 단점: 70대·80대가 섞여 시각적 군집이 약함.</li>
    </ul>
  </li>
</ul>

<p>원하면 네 선호(연속형 vs 여유 슬롯형)에 맞춰 <strong>일괄 리네임 스크립트</strong> 까지 바로 만들어줄게.</p>

<p class="chat--user">

80, 81, 82가 더 나을것 같아서

</p>

<p>좋아, <strong>툴 스택을 80–82 연속 번호</strong> 로 재정렬하자. 깔끔하고 기억하기 쉬워!</p>

<h1 id="최종-번호툴-스택만-변경">최종 번호(툴 스택만 변경)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>80_Toolchains      - 팀/장기 공용 ‘고정 버전’ 빌드 도구 (gcc/cmake/ninja…)
81_SDKs            - 플랫폼 SDK/런타임 (JDK/Qt/Android NDK…)
82_Tools           - 개인·경량·포터블 유틸/스크립트 (ripgrep/fd/bat 등)
83_Environments    - docker/conda/venv 같은 캡슐 환경(※ 연속성 위해 83으로 당김)
</code></pre></div></div>

<blockquote>
  <p>나머지 번호(00,05,10,20,22,25,26,30,32,40,50,60,70,75,90,99)는 그대로.</p>
</blockquote>

<hr />

<h1 id="path-권장-순서-표준-우선--개인">PATH 권장 순서 (표준 우선 → 개인)</h1>

<h2 id="bashzsh-2">bash/zsh</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/82_Tools/bin:</span><span class="nv">$HOME</span><span class="s2">/Work/80_Toolchains/gcc/latest/bin:</span><span class="nv">$HOME</span><span class="s2">/Work/80_Toolchains/cmake/latest/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<h2 id="tcsh-2">tcsh</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

set path = ( $HOME/Work/82_Tools/bin $HOME/Work/80_Toolchains/gcc/latest/bin $path )
</code></pre></div></div>

<h2 id="powershell-3">PowerShell</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\82_Tools\bin;</span><span class="bp">$HOME</span><span class="s2">\Work\80_Toolchains\gcc\latest\bin;"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="마이그레이션-step-by-step">마이그레이션 (step-by-step)</h1>

<h2 id="macoslinux">macOS/Linux</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work
<span class="c"># 폴더 리네임(있을 때만)</span>
<span class="o">[</span> <span class="nt">-d</span> 82_Toolchains <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv </span>82_Toolchains 80_Toolchains
<span class="o">[</span> <span class="nt">-d</span> 83_SDKs       <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv </span>83_SDKs       81_SDKs
<span class="o">[</span> <span class="nt">-d</span> 84_Tools      <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv </span>84_Tools      82_Tools
<span class="o">[</span> <span class="nt">-d</span> 86_Environments <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv </span>86_Environments 83_Environments

<span class="c"># today/스크립트 경로 일괄 치환</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="nt">-e</span> <span class="s1">'s#/82_Toolchains/#/80_Toolchains/#g'</span> <span class="se">\</span>
          <span class="nt">-e</span> <span class="s1">'s#/83_SDKs/#/81_SDKs/#g'</span> <span class="se">\</span>
          <span class="nt">-e</span> <span class="s1">'s#/84_Tools/#/82_Tools/#g'</span> <span class="se">\</span>
          <span class="nt">-e</span> <span class="s1">'s#/86_Environments/#/83_Environments/#g'</span> 10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<h2 id="windows-powershell-6">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-Location</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"82_Toolchains"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"82_Toolchains"</span><span class="w"> </span><span class="s2">"80_Toolchains"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"83_SDKs"</span><span class="p">)</span><span class="w">       </span><span class="p">{</span><span class="w"> </span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"83_SDKs"</span><span class="w">       </span><span class="s2">"81_SDKs"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"84_Tools"</span><span class="p">)</span><span class="w">      </span><span class="p">{</span><span class="w"> </span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"84_Tools"</span><span class="w">      </span><span class="s2">"82_Tools"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"86_Environments"</span><span class="p">){</span><span class="w"> </span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"86_Environments"</span><span class="w"> </span><span class="s2">"83_Environments"</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="c"># today/스크립트 경로 치환</span><span class="w">
</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/82_Toolchains/'</span><span class="p">,</span><span class="s1">'/80_Toolchains/'</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/83_SDKs/'</span><span class="p">,</span><span class="s1">'/81_SDKs/'</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/84_Tools/'</span><span class="p">,</span><span class="s1">'/82_Tools/'</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/86_Environments/'</span><span class="p">,</span><span class="s1">'/83_Environments/'</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="앞으로-더-안정적으로-쓰는-팁-작은-습관">앞으로 더 안정적으로 쓰는 팁 (작은 습관)</h1>

<ol>
  <li>
    <p><strong>latest 심볼릭 링크</strong> 유지:<br />
<code class="language-plaintext highlighter-rouge">80_Toolchains/gcc/latest → 13.2.0</code> 처럼 표준 전환 시 링크만 갈아끼우기.</p>
  </li>
  <li>
    <p><strong>환경변수 레이어</strong>(리네임 내성↑):</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_TC</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Toolchains"</span>
<span class="nb">export </span><span class="nv">WORK_SDK</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/81_SDKs"</span>
<span class="nb">export </span><span class="nv">WORK_TOOLS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/82_Tools"</span>
<span class="nb">export </span><span class="nv">WORK_ENV</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/83_Environments"</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>스크립트에 절대경로 대신 위 변수 사용.</p>

<ol>
  <li>
    <p><strong>역할 경계</strong> :</p>

    <ul>
      <li>
        <p>고정·공유: <strong>80_Toolchains</strong> , <strong>81_SDKs</strong></p>
      </li>
      <li>
        <p>개인·가변: <strong>82_Tools</strong></p>
      </li>
      <li>
        <p>격리된 조합: <strong>83_Environments</strong>(docker/conda/venv)</p>
      </li>
    </ul>
  </li>
</ol>

<p>원하면 위 변경을 반영해 <strong>PATH 초기화 스크립트</strong>(bash/tcsh/PowerShell)랑 <code class="language-plaintext highlighter-rouge">latest</code> 링크 생성 스크립트도 바로 만들어줄게.</p>

<p class="chat--user">

아니 85 Environment는 그냥 두자. 각 80, 81, 82, 83 폴더의 내부 subdirectory 예시도 만들어줘. 컴파일은 어디서 해야하는지 등등

</p>

<p>좋아! <strong>85_Environments는 그대로 유지</strong> 하면서,<br />
<strong>80/81/82/83</strong> 의 “역할·하위 구조 예시·컴파일(빌드) 위치”를 정리해 줄게.</p>

<hr />

<h1 id="한눈에-규칙">한눈에 규칙</h1>

<ul>
  <li>
    <p><strong>소스코드 컴파일(앱/라이브러리)</strong> 👉 <strong><code class="language-plaintext highlighter-rouge">20_Projects/&lt;PRJ&gt;</code> 안에서만</strong> 해요.<br />
(예: <code class="language-plaintext highlighter-rouge">PRJ-.../build/</code> out-of-source 빌드)</p>
  </li>
  <li>
    <p><strong>툴체인/SDK 자체 설치</strong> 👉 <strong><code class="language-plaintext highlighter-rouge">80/81/82/83</code>에 “설치/배치”만</strong> 하고,<br />
빌드는 <strong>별도의 Job</strong>(예: <code class="language-plaintext highlighter-rouge">25_Jobs/REL-...</code> 또는 <code class="language-plaintext highlighter-rouge">SMOKE-...</code>)에서 수행 후 결과만 배치.</p>
  </li>
</ul>

<hr />

<h1 id="80_toolchains--팀-표준-고정-버전-빌드-도구">80_Toolchains — “팀 표준, 고정 버전 빌드 도구”</h1>

<ul>
  <li>
    <p>대상: <code class="language-plaintext highlighter-rouge">gcc</code>, <code class="language-plaintext highlighter-rouge">clang</code>, <code class="language-plaintext highlighter-rouge">cmake</code>, <code class="language-plaintext highlighter-rouge">ninja</code>, <code class="language-plaintext highlighter-rouge">make</code>, <code class="language-plaintext highlighter-rouge">lld</code>, <code class="language-plaintext highlighter-rouge">gdb</code> 등</p>
  </li>
  <li>
    <p>원칙: <strong>버전별 폴더</strong> + <strong><code class="language-plaintext highlighter-rouge">latest</code> 링크</strong>, <strong>OS/ARCH 분리</strong> 가능</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>80_Toolchains/
├─ gcc/
│  ├─ 13.2.0/
│  │  ├─ bin/ lib/ include/ share/
│  │  └─ manifest.yml          - 설치 출처/체크섬/빌드옵션 요약
│  └─ latest → 13.2.0
├─ cmake/
│  ├─ 3.29.3/{bin,share}/
│  └─ latest → 3.29.3
├─ ninja/
│  └─ 1.12.1/{bin,doc}/
└─ (optional) linux-x64/, mac-arm64/, win-x64/ 아래로 OS/ARCH 레벨을 한 번 더 두어도 OK
</code></pre></div></div>

<h3 id="path-예시">PATH 예시</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Toolchains/gcc/latest/bin:</span><span class="nv">$HOME</span><span class="s2">/Work/80_Toolchains/cmake/latest/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="컴파일은-어디서">컴파일은 어디서?</h3>

<ul>
  <li>✅ <strong>프로젝트</strong> : <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work/20_Projects/PRJ-2025-001_app
cmake <span class="nt">-S</span> <span class="nb">.</span> <span class="nt">-B</span> build <span class="nt">-G</span> Ninja <span class="se">\</span>
      <span class="nt">-DCMAKE_C_COMPILER</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Toolchains/gcc/latest/bin/gcc"</span> <span class="se">\</span>
      <span class="nt">-DCMAKE_CXX_COMPILER</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Toolchains/gcc/latest/bin/g++"</span>
cmake <span class="nt">--build</span> build <span class="nt">--config</span> Release
</code></pre></div>    </div>
  </li>
  <li>❌ <strong>80_Toolchains 내부에서 코드 빌드 금지</strong> (여긴 “툴 보관소”)</li>
</ul>

<hr />

<h1 id="81_sdks--플랫폼-sdk런타임대형-번들">81_SDKs — “플랫폼 SDK/런타임(대형 번들)”</h1>

<ul>
  <li>대상: <code class="language-plaintext highlighter-rouge">JDK</code>, <code class="language-plaintext highlighter-rouge">Qt</code>, <code class="language-plaintext highlighter-rouge">Android NDK/SDK</code>, <code class="language-plaintext highlighter-rouge">.NET SDK</code>, <code class="language-plaintext highlighter-rouge">CUDA</code> 등</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>81_SDKs/
├─ jdk/
│  ├─ 21.0.2/           - JAVA_HOME로 지정
│  └─ latest → 21.0.2
├─ qt/
│  ├─ 6.7.2/
│  │  ├─ bin/ lib/ plugins/ qml/ mkspecs/
│  │  └─ README_install_notes.md
│  └─ latest → 6.7.2
├─ android-ndk/
│  └─ r26d/
└─ cuda/
   └─ 12.5/
</code></pre></div></div>

<h3 id="프로젝트에서-쓰기">프로젝트에서 쓰기</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/81_SDKs/jdk/latest"</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$JAVA_HOME</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>

<span class="c"># Qt 예 (CMake)</span>
cmake <span class="nt">-S</span> <span class="nb">.</span> <span class="nt">-B</span> build <span class="nt">-G</span> Ninja <span class="se">\</span>
  <span class="nt">-DCMAKE_PREFIX_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/81_SDKs/qt/latest"</span>
cmake <span class="nt">--build</span> build
</code></pre></div></div>

<hr />

<h1 id="82_tools--개인경량포터블-유틸">82_Tools — “개인·경량·포터블 유틸”</h1>

<ul>
  <li>
    <p>대상: <code class="language-plaintext highlighter-rouge">ripgrep</code>, <code class="language-plaintext highlighter-rouge">fd</code>, <code class="language-plaintext highlighter-rouge">bat</code>, <code class="language-plaintext highlighter-rouge">jq</code>, <code class="language-plaintext highlighter-rouge">yq</code>, 작은 CLI·스クリپ트</p>
  </li>
  <li>
    <p>원칙: <strong>자주 바뀜</strong> → 정리/교체 쉬운 구조</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>82_Tools/
├─ bin/                      - 단일 실행파일(우선 PATH)
│  ├─ rg
│  ├─ fd
│  └─ jq
├─ portable/                 - 압축 풀어 쓰는 포터블 도구
│  ├─ my-cli-1.2.3/
│  └─ some-tool-0.9/
├─ scripts/                  - 개인 스크립트(bootstrap/release/checksum 등)
│  └─ checksum_all.sh
└─ scratch/                  - 임시 테스트용(주기적 청소)
</code></pre></div></div>

<h3 id="path-예시-1">PATH 예시</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/82_Tools/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="주의">주의</h3>

<ul>
  <li>유용성이 <strong>장기·공유</strong> 로 발전하면 <strong>80/81로 승격</strong>(문서화 + 고정 버전).</li>
</ul>

<hr />

<h1 id="83_runtimes--언어-런타임--패키지-관리자-선택-슬롯">83_Runtimes — “언어 런타임 &amp; 패키지 관리자 (선택 슬롯)”</h1>

<ul>
  <li>
    <p>목적: “툴체인(80)·SDK(81)과는 별개”로 <strong>언어 런타임/버전 관리자</strong> 를 모아 둠</p>
  </li>
  <li>
    <p>대상: <code class="language-plaintext highlighter-rouge">python</code>(standalone 또는 asdf/pyenv), <code class="language-plaintext highlighter-rouge">node</code>(nvm), <code class="language-plaintext highlighter-rouge">go</code>, <code class="language-plaintext highlighter-rouge">rustup</code>, <code class="language-plaintext highlighter-rouge">dotnet</code> 런타임 등<br />
<em>(이미 시스템/홈 관리자 쓰면 생략해도 됨. 폴더만 예약 슬롯으로 사용)</em></p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>83_Runtimes/
├─ python/
│  ├─ 3.11.9/
│  │  ├─ bin/python3  - 독립 배포본(임베디드/프리빌트)
│  │  └─ README.md
│  └─ 3.12.4/
├─ node/
│  ├─ 20.16.0/
│  └─ nvm/              - nvm 자체를 보관할 수도
├─ go/
│  └─ 1.22.5/
└─ rust/
   └─ toolchains/stable/
</code></pre></div></div>

<h3 id="사용-예">사용 예</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 특정 런타임을 한 세션에만 우선</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/83_Runtimes/python/3.12.4/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
python <span class="nt">--version</span>  <span class="c"># 3.12.4</span>
</code></pre></div></div>

<blockquote>
  <p><em>83을 쓰지 않고 시스템 런타임/패키지관리자를 그대로 써도 OK.<br />
 이 슬롯은 “정리된 위치에 모아두고 싶을 때” 유용해요.</em></p>
</blockquote>

<hr />

<h1 id="85_environments--캡슐-환경그대로-유지">85_Environments — “캡슐 환경(그대로 유지)”</h1>

<ul>
  <li>
    <p>대상: <code class="language-plaintext highlighter-rouge">docker/compose</code>, <code class="language-plaintext highlighter-rouge">conda</code>/<code class="language-plaintext highlighter-rouge">venv</code>, <code class="language-plaintext highlighter-rouge">devcontainer</code></p>
  </li>
  <li>
    <p>쓰임: <strong>프로젝트별 조합을 격리</strong> 해서 재현성 보장</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>85_Environments/
├─ docker/
│  ├─ Dockerfile
│  └─ compose.yml
├─ conda/
│  ├─ envs/
│  │  └─ py311/           - 실제 생성된 env(선택)
│  └─ environment.yml     - 표준 스펙
└─ devcontainer/
   └─ base/
      ├─ Dockerfile
      └─ devcontainer.json
</code></pre></div></div>

<h3 id="프로젝트에서-쓰기-1">프로젝트에서 쓰기</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># conda</span>
conda <span class="nb">env </span>create <span class="nt">-f</span> ~/Work/85_Environments/conda/environment.yml
conda activate py311

<span class="c"># docker</span>
docker compose <span class="nt">-f</span> ~/Work/85_Environments/docker/compose.yml up <span class="nt">-d</span>
</code></pre></div></div>

<hr />

<h2 id="컴파일은-어디서-요점-재정리">“컴파일은 어디서?” 요점 재정리</h2>

<ul>
  <li>
    <p><strong>앱/라이브러리 빌드</strong> : 항상 <strong><code class="language-plaintext highlighter-rouge">20_Projects/&lt;PRJ&gt;/build/</code></strong>(out-of-source).</p>

    <ul>
      <li>도구/SDK 경로는 <code class="language-plaintext highlighter-rouge">80/81/83</code>에서 <strong>참조만</strong>.</li>
    </ul>
  </li>
  <li>
    <p><strong>툴체인/SDK 자체를 소스에서 빌드해야 할 때</strong> :</p>

    <ol>
      <li>
        <p><strong>Job 생성</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/REL-YYYY-NNN_&lt;tool&gt;-&lt;ver&gt;/</code></p>
      </li>
      <li>
        <p>거기서 소스 빌드 &amp; 테스트</p>
      </li>
      <li>
        <p>산출물을 <strong><code class="language-plaintext highlighter-rouge">80_Toolchains/&lt;tool&gt;/&lt;ver&gt;/</code> 또는 <code class="language-plaintext highlighter-rouge">81_SDKs/&lt;sdk&gt;/&lt;ver&gt;/</code></strong>로 <strong>배치</strong></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">latest</code> 링크 업데이트 + <code class="language-plaintext highlighter-rouge">manifest.yml</code>/<code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 기록</p>
      </li>
    </ol>
  </li>
  <li>
    <p><strong>개인 유틸 테스트</strong> : <code class="language-plaintext highlighter-rouge">82_Tools/portable</code> or <code class="language-plaintext highlighter-rouge">82_Tools/scratch</code> (안정화되면 승격)</p>
  </li>
</ul>

<hr />

<h2 id="빠른-체크리스트-1">빠른 체크리스트</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">80</code>(표준 빌드 도구) → <strong>고정 버전 + latest 링크</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">81</code>(대형 SDK) → <strong>경로 변수(JAVA_HOME 등)와 함께 문서화</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">82</code>(개인 유틸) → <strong>가볍게, 필요 시 승격</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">83</code>(런타임) → <strong>언어별 버전 모음(선택 슬롯)</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">85</code>(환경) → <strong>조합 격리/재현, 프로젝트에서 activate</strong></p>
  </li>
</ul>

<p>원하면 위 구조대로 <strong>폴더와 README/manifest 템플릿, PATH 초기화 스크립트</strong> 까지 한 번에 만들어주는 세팅 스크립트( bash / tcsh / PowerShell )도 바로 만들어줄게.</p>

<p class="chat--user">

installer 폴더가 사라졌네?

</p>

<p>좋은 캐치! 번호 재정렬하면서 <strong>installers 상자</strong> 를 표기에서 빼먹었어요.<br />
정답은:</p>

<blockquote>
  <p><strong>정본 보관소:</strong> <code class="language-plaintext highlighter-rouge">82_Tools/installers/</code><br />
 <strong>임시 착륙지:</strong> <code class="language-plaintext highlighter-rouge">05_Downloads/_inbox</code> (브라우저/CLI 기본 저장) → 스윕 후 <code class="language-plaintext highlighter-rouge">82_Tools/installers/</code>로 이동</p>
</blockquote>

<hr />

<h1 id="왜-82_toolsinstallers인가-step-by-step">왜 <code class="language-plaintext highlighter-rouge">82_Tools/installers/</code>인가 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>한 곳에 모으기</strong> : gcc·cmake 같은 툴체인(80), JDK/Qt 같은 SDK(81), 개인 유틸(82) <strong>모두의 설치 원본</strong> 을 한 군데에 아카이브.</p>
  </li>
  <li>
    <p><strong>흐름 단순화</strong> : 다운로드(05) → <strong>installers로 이동</strong> → 실제 배치</p>

    <ul>
      <li>
        <p>Toolchains은 <code class="language-plaintext highlighter-rouge">80_Toolchains/&lt;tool&gt;/&lt;ver&gt;/</code></p>
      </li>
      <li>
        <p>SDK는 <code class="language-plaintext highlighter-rouge">81_SDKs/&lt;sdk&gt;/&lt;ver&gt;/</code></p>
      </li>
      <li>
        <p>개인 유틸은 <code class="language-plaintext highlighter-rouge">82_Tools/portable/&lt;tool&gt;-&lt;ver&gt;/</code> (또는 <code class="language-plaintext highlighter-rouge">bin/</code>)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>증빙/복구 쉬움</strong> : 체크섬·노트가 installers에 모여 있어, 나중에 <strong>검증/재설치</strong> 가 빠름.</p>
  </li>
</ol>

<hr />

<h1 id="폴더-예시-복붙">폴더 예시 (복붙)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>82_Tools/
├─ installers/                                 - 설치 원본 정본(아카이브)
│  ├─ cmake/3.29.3/cmake-3.29.3-linux-x86_64.tar.gz
│  │  └─ SHA256SUMS, install_notes.md
│  ├─ gcc/13.2.0/gcc-13.2.0-x86_64.tar.xz
│  │  └─ SHA256SUMS, install_notes.md
│  ├─ jdk/21.0.2/jdk-21.0.2_macos-aarch64.tar.gz
│  ├─ qt/6.7.2/qt-opensource-mac-6.7.2.dmg
│  ├─ python/wheels/&lt;project_or_vendor&gt;/...    # .whl/.tar.gz 모음
│  └─ misc/                                    # 분류 어려운 기타
├─ bin/                                        - 단일 실행파일(개인 PATH)
├─ portable/                                   - 포터블 툴 압축 해제 위치
└─ scripts/                                    - checksum/스윕 등 스크립트
</code></pre></div></div>

<blockquote>
  <p>각 <code class="language-plaintext highlighter-rouge">&lt;tool&gt;/&lt;ver&gt;/</code> 폴더 안에 <strong><code class="language-plaintext highlighter-rouge">SHA256SUMS</code></strong>와 <strong><code class="language-plaintext highlighter-rouge">install_notes.md</code></strong>(출처/날짜/옵션) 붙이기 권장.</p>
</blockquote>

<hr />

<h1 id="워크플로-설치-원본-기준">워크플로 (설치 원본 기준)</h1>

<ol>
  <li>
    <p><strong>다운로드</strong> → <code class="language-plaintext highlighter-rouge">05_Downloads/_inbox</code></p>
  </li>
  <li>
    <p><strong>스윕 실행</strong>(자동/수동): 인스톨러 파일을 <code class="language-plaintext highlighter-rouge">82_Tools/installers/&lt;tool&gt;/&lt;ver&gt;/</code>로 이동 + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성 + <code class="language-plaintext highlighter-rouge">install_notes.md</code>에 기록</p>
  </li>
  <li>
    <p><strong>배치</strong></p>

    <ul>
      <li>
        <p>툴체인: 압축 해제 → <code class="language-plaintext highlighter-rouge">80_Toolchains/&lt;tool&gt;/&lt;ver&gt;/</code> → <code class="language-plaintext highlighter-rouge">latest</code> 링크 갱신</p>
      </li>
      <li>
        <p>SDK: 압축/설치 → <code class="language-plaintext highlighter-rouge">81_SDKs/&lt;sdk&gt;/&lt;ver&gt;/</code></p>
      </li>
      <li>
        <p>개인 유틸: <code class="language-plaintext highlighter-rouge">82_Tools/portable/</code> 또는 <code class="language-plaintext highlighter-rouge">82_Tools/bin/</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>검증/기록</strong> : 버전·경로를 README/문서(<code class="language-plaintext highlighter-rouge">32_SharedConfigs/global/&lt;tool&gt;/README.md</code>)에 반영</p>
  </li>
</ol>

<hr />

<h1 id="스윕-스크립트-경로만-바꾸기">스윕 스크립트 경로만 바꾸기</h1>

<p>이전에 드린 스크립트에서 <strong>DEST_INSTALL</strong> 경로를 아래처럼 바꾸세요.</p>

<p><strong>bash/zsh (<code class="language-plaintext highlighter-rouge">sweep_downloads.sh</code>)</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">DEST_INSTALL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/82_Tools/installers"</span>
</code></pre></div></div>

<p><strong>PowerShell (<code class="language-plaintext highlighter-rouge">sweep_downloads.ps1</code>)</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"82_Tools\installers"</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>나머지 로직은 동일합니다. (<code class="language-plaintext highlighter-rouge">05_Downloads/_inbox</code> → installers로 이동, 체크섬 생성, 노트 추가)</p>
</blockquote>

<hr />

<h1 id="선택-안전-마이그레이션">(선택) 안전 마이그레이션</h1>

<p><strong>macOS/Linux</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/Work/82_Tools/installers
<span class="o">[</span> <span class="nt">-d</span> ~/Work/80_Tools/installers <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv</span> ~/Work/80_Tools/installers/<span class="k">*</span> ~/Work/82_Tools/installers/ 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<p><strong>Windows (PowerShell)</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\82_Tools\installers"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\80_Tools\installers"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\80_Tools\installers\*"</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\82_Tools\installers"</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="요약-5">요약</h2>

<ul>
  <li>
    <p><strong>installers 정본 상자</strong> 는 <strong><code class="language-plaintext highlighter-rouge">82_Tools/installers/</code></strong>.</p>
  </li>
  <li>
    <p><strong>05_Downloads</strong> 는 임시 착륙지, 스윕이 알아서 installers로 옮김.</p>
  </li>
  <li>
    <p>설치 후 <strong>실제 실행 경로</strong> 는: Toolchains(80) / SDKs(81) / 개인유틸(82).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SHA256SUMS</code> + <code class="language-plaintext highlighter-rouge">install_notes.md</code>로 <strong>무결성/출처</strong> 를 남겨 복구성 확보.</p>
  </li>
</ul>

<p>필요하면 <code class="language-plaintext highlighter-rouge">install_notes.md</code> 자동 append와 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성을 묶은 <strong>최종 스크립트</strong> 를 82 경로 기준으로 정리해서 드릴게.</p>

<p class="chat--user">

latest를 symbolic link를 만들잖아. 이거 하는 법 알려줘. 상대경로로 그냥 하면 되나?

</p>

<p>좋아! <strong>결론:</strong> 네—<code class="language-plaintext highlighter-rouge">latest</code>는 <strong>상대경로 심볼릭 링크</strong> 로 만드는 게 가장 안전하고 이식성이 좋아.<br />
아래를 그대로 따라 하면 돼. (macOS/Linux, Windows 둘 다 정리)</p>

<hr />

<h2 id="기본-예시-디렉터리-구조">기본 예시 (디렉터리 구조)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>80_Toolchains/
  gcc/
    13.2.0/
    latest  -&gt; 13.2.0    # ← 이걸 만들 거야(상대 링크)
</code></pre></div></div>

<hr />

<h2 id="macos--linux-3">macOS / Linux</h2>

<h3 id="1-새로-만들기">1) 새로 만들기</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work/80_Toolchains/gcc
<span class="nb">ln</span> <span class="nt">-s</span> 13.2.0 latest   <span class="c"># 상대경로 링크: latest -&gt; 13.2.0</span>
</code></pre></div></div>

<h3 id="2-버전-업데이트이미-latest가-있을-때-교체">2) 버전 업데이트(이미 latest가 있을 때 교체)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work/80_Toolchains/gcc
<span class="nb">ln</span> <span class="nt">-sfn</span> 13.3.0 latest
<span class="c"># -s : symlink, -f : 기존 링크 덮어쓰기, -n : 링크를 디렉터리로 보지 않고 '이름'으로 취급</span>
</code></pre></div></div>

<h3 id="3-확인점검">3) 확인/점검</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-l</span> latest         <span class="c"># latest -&gt; 13.3.0</span>
<span class="nb">readlink </span>latest      <span class="c"># 13.3.0  (상대경로가 보이면 OK)</span>
</code></pre></div></div>

<h3 id="4-실수했을-때잘못-만든-최신-링크-지우기">4) 실수했을 때(잘못 만든 최신 링크 지우기)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm </span>latest            <span class="c"># 링크만 지워짐(타깃은 그대로)</span>
</code></pre></div></div>

<blockquote>
  <p><strong>왜 상대경로?</strong> 폴더(예: <code class="language-plaintext highlighter-rouge">80_Toolchains/gcc</code>)를 통째로 다른 위치로 옮겨도 링크가 <strong>깨지지 않음</strong>.<br />
 절대경로(<code class="language-plaintext highlighter-rouge">/Users/...</code>)로 만들면 이동 시 전부 다시 만들어야 해.</p>
</blockquote>

<hr />

<h2 id="windows">Windows</h2>

<p>Windows는 두 가지가 있어:</p>

<ul>
  <li>
    <p><strong>심볼릭 링크(권장):</strong> <code class="language-plaintext highlighter-rouge">mklink /D</code> (관리자 권한 또는 Windows “개발자 모드” 필요)</p>
  </li>
  <li>
    <p><strong>디렉터리 정션(대안):</strong> <code class="language-plaintext highlighter-rouge">mklink /J</code> (관리자 불필요, 다만 드라이브 간 이동에 취약)</p>
  </li>
</ul>

<h3 id="1-cmd-관리자-권장">1) CMD (관리자 권장)</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmd

cd %USERPROFILE%\Work\80_Toolchains\gcc

:: 심볼릭 링크 (권장, 관리자 또는 개발자 모드)
mklink /D latest 13.2.0

:: 업데이트(교체)
rmdir latest
mklink /D latest 13.3.0
</code></pre></div></div>

<h3 id="2-관리자-권한-없이-쓰고-싶으면정션">2) 관리자 권한 없이 쓰고 싶으면(정션)</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmd

cd %USERPROFILE%\Work\80_Toolchains\gcc
mklink /J latest 13.2.0
</code></pre></div></div>

<h3 id="3-powershell-심볼릭-링크">3) PowerShell (심볼릭 링크)</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Set-Location</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\80_Toolchains\gcc"</span><span class="w">
</span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">SymbolicLink</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"latest"</span><span class="w"> </span><span class="nt">-Target</span><span class="w"> </span><span class="s2">"13.2.0"</span><span class="w">  </span><span class="c"># 관리자 또는 개발자 모드</span><span class="w">
</span></code></pre></div></div>

<h3 id="4-확인">4) 확인</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Get-Item</span><span class="w"> </span><span class="nx">latest</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Format-List</span><span class="w"> </span><span class="nx">Name</span><span class="p">,</span><span class="nx">LinkType</span><span class="p">,</span><span class="nx">Target</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p><strong>팁:</strong> 심볼릭 링크는 상대경로 타겟도 잘 동작함. 정션(/J)은 내부적으로 절대경로로 고정되기 쉬워,<br />
 폴더를 다른 드라이브로 옮기면 깨질 수 있어. 가능하면 <strong>/D(심볼릭)</strong>을 쓰자.</p>
</blockquote>

<hr />

<h2 id="작은-자동화선택">작은 자동화(선택)</h2>

<h3 id="bashzsh-set-latestsh">Bash/Zsh: <code class="language-plaintext highlighter-rouge">set-latest.sh</code></h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nb">dir</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">1</span>:?tool<span class="p"> dir</span><span class="k">}</span><span class="s2">"</span>     <span class="c"># 예: ~/Work/80_Toolchains/gcc</span>
<span class="nv">ver</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">2</span>:?version<span class="k">}</span><span class="s2">"</span>      <span class="c"># 예: 13.3.0</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">"</span>
<span class="nb">ln</span> <span class="nt">-sfn</span> <span class="s2">"</span><span class="nv">$ver</span><span class="s2">"</span> latest
<span class="nb">echo</span> <span class="s2">"latest -&gt; </span><span class="nv">$ver</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="powershell-set-latestps1">PowerShell: <code class="language-plaintext highlighter-rouge">Set-Latest.ps1</code></h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">param</span><span class="p">([</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="p">)][</span><span class="n">string</span><span class="p">]</span><span class="nv">$Dir</span><span class="p">,[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="p">)][</span><span class="n">string</span><span class="p">]</span><span class="nv">$Version</span><span class="p">)</span><span class="w">
</span><span class="n">Set-Location</span><span class="w"> </span><span class="nv">$Dir</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nx">latest</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Remove-Item</span><span class="w"> </span><span class="nx">latest</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">SymbolicLink</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"latest"</span><span class="w"> </span><span class="nt">-Target</span><span class="w"> </span><span class="nv">$Version</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="s2">"latest -&gt; </span><span class="nv">$Version</span><span class="s2">"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="자주-나는-실수--체크리스트">자주 나는 실수 &amp; 체크리스트</h2>

<ul>
  <li>
    <p>경로에 <strong>공백</strong> 이 있으면 꼭 <strong>따옴표</strong> 로 감싸기.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ln -sfn</code>은 기존 <strong>링크</strong> 만 깔끔히 교체해 줌. 기존이 “실제 디렉터리”라면 먼저 <code class="language-plaintext highlighter-rouge">rm -rf latest</code> 후 다시 생성.</p>
  </li>
  <li>
    <p>Windows에서 권한 문제 나면: <strong>관리자 PowerShell/CMD</strong> 로 실행하거나 <strong>개발자 모드</strong> 켜기.</p>
  </li>
  <li>
    <p>링크 만든 뒤 <strong>PATH</strong> 에 <code class="language-plaintext highlighter-rouge">.../gcc/latest/bin</code>처럼 <code class="language-plaintext highlighter-rouge">latest</code>를 넣어두면, 버전 전환 시 <strong>링크만 바꾸면</strong> 스크립트 수정이 필요 없음.</p>
  </li>
</ul>

<p>필요하면 네가 쓰는 툴(예: <code class="language-plaintext highlighter-rouge">gcc</code>, <code class="language-plaintext highlighter-rouge">cmake</code>, <code class="language-plaintext highlighter-rouge">jdk</code>, <code class="language-plaintext highlighter-rouge">qt</code>) 리스트를 알려줘. 각 폴더에 대해 <code class="language-plaintext highlighter-rouge">latest</code>를 <strong>일괄 생성/갱신</strong> 하는 스크립트를 맞춤으로 만들어 줄게!</p>

<p class="chat--user">

폴더 명을 버젼만 쓰는게 맞아? gcc-13.3.0 이게 더 좋아보이기도 하고.

</p>

<p>좋은 질문! 결론부터 말하면 <strong>“버전만” vs “툴-버전”</strong>은 “부모 폴더가 이미 툴을 식별하느냐”로 나눠 결정하면 깔끔해요.</p>

<h2 id="결정-규칙-step-by-step">결정 규칙 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>부모 폴더가 툴을 이미 말해준다</strong><br />
→ <strong>버전만</strong> 쓰는 게 정석.<br />
예) <code class="language-plaintext highlighter-rouge">80_Toolchains/gcc/13.3.0/</code> (✅), <code class="language-plaintext highlighter-rouge">latest → 13.3.0</code></p>

    <ul>
      <li>
        <p>중복 없이 짧고 보기 좋음</p>
      </li>
      <li>
        <p>업데이트 시 <code class="language-plaintext highlighter-rouge">ln -sfn 13.3.1 latest</code> 한 줄이면 끝</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>여러 툴이 한 폴더에 섞여 있다</strong>(portable 모음 등)<br />
→ <strong>툴-버전</strong> 이 안전.<br />
예) <code class="language-plaintext highlighter-rouge">82_Tools/portable/gcc-13.3.0/</code>, <code class="language-plaintext highlighter-rouge">82_Tools/portable/cmake-3.29.3/</code> (✅)</p>

    <ul>
      <li>
        <p>한 눈에 무엇인지 식별 쉬움</p>
      </li>
      <li>
        <p>정렬/검색에 유리(<code class="language-plaintext highlighter-rouge">ls | grep gcc-</code>)</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="추천-패턴-요약">추천 패턴 요약</h2>

<ul>
  <li><strong>Toolchains/SDKs 같이 “툴별 전용 디렉터리”가 있는 곳</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>80_Toolchains/
 gcc/
   13.3.0/
   latest -&gt; 13.3.0
 cmake/
   3.29.3/
   latest -&gt; 3.29.3
</code></pre></div></div>

<p><em>여기서는</em> <code class="language-plaintext highlighter-rouge">13.3.0</code>처럼 <strong>버전만</strong> 이 맞습니다. <code class="language-plaintext highlighter-rouge">gcc-13.3.0</code>은 중복.</p>

<ul>
  <li><strong>Tools/portable 같이 “여러 툴이 섞이는 곳”</strong></li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>82_Tools/
 portable/
   gcc-13.3.0/
   cmake-3.29.3/
   ninja-1.12.1/
</code></pre></div></div>

<p><em>여기서는</em> <strong>툴-버전</strong> 이 가독성 최고.</p>

<hr />

<h2 id="os아키변형까지-표기해야-할-때">OS/아키/변형까지 표기해야 할 때</h2>

<p>툴별 디렉터리(예: <code class="language-plaintext highlighter-rouge">80_Toolchains/gcc/</code>)에서도 <strong>버전 뒤에만 변형을 붙이는</strong> 방식이 깔끔합니다.</p>

<ul>
  <li>
    <p>패턴:<br />
<code class="language-plaintext highlighter-rouge">/&lt;version&gt;[-&lt;os&gt;-&lt;arch&gt;[-&lt;libc|vendor&gt;]]/</code></p>
  </li>
  <li>
    <p>예시:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">13.3.0-mac-arm64/</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">13.3.0-linux-x64-glibc/</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">6.7.2-win-x64-msvc/</code> (Qt처럼 툴체인이 다른 경우)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">latest</code>는 항상 해당 변형 디렉터리를 가리키게:<br />
<code class="language-plaintext highlighter-rouge">latest -&gt; 13.3.0-mac-arm64</code></p>
  </li>
</ul>

<blockquote>
  <p>반대로 <strong>portable 섞임 폴더</strong> 라면: <code class="language-plaintext highlighter-rouge">gcc-13.3.0-linux-x64/</code>처럼 접두 툴명을 유지.</p>
</blockquote>

<hr />

<h2 id="latest-심볼릭-링크-예시상대경로">latest 심볼릭 링크 예시(상대경로)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work/80_Toolchains/gcc
<span class="nb">ln</span> <span class="nt">-sfn</span> 13.3.0 latest          <span class="c"># 기본</span>
<span class="c"># 변형이 있을 때</span>
<span class="nb">ln</span> <span class="nt">-sfn</span> 13.3.0-mac-arm64 latest
</code></pre></div></div>

<ul>
  <li><strong>상대경로 링크</strong> 를 권장(폴더를 통째로 옮겨도 안 깨짐).</li>
</ul>

<hr />

<h2 id="실제-트리-예시혼합-사례">실제 트리 예시(혼합 사례)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>80_Toolchains/
  gcc/
    13.3.0-linux-x64/
    13.3.0-mac-arm64/
    latest -&gt; 13.3.0-mac-arm64
  cmake/
    3.29.3/
    latest -&gt; 3.29.3

81_SDKs/
  jdk/
    21.0.2/
    latest -&gt; 21.0.2
  qt/
    6.7.2-win-x64-msvc/
    latest -&gt; 6.7.2-win-x64-msvc

82_Tools/
  bin/                   # 단일 바이너리
    rg
    fd
  portable/              # 섞여 있으므로 접두어-버전
    gcc-13.3.0-linux-x64/
    cmake-3.29.3/
    ninja-1.12.1/
</code></pre></div></div>

<hr />

<h2 id="운영-팁간단-룰">운영 팁(간단 룰)</h2>

<ul>
  <li>
    <p><strong>툴별 전용 디렉터리면 → 버전만</strong></p>
  </li>
  <li>
    <p><strong>섞여 있으면 → 툴-버전</strong></p>
  </li>
  <li>
    <p><strong>변형이 필요하면 → 버전 뒤에만 붙이기</strong>(<code class="language-plaintext highlighter-rouge">13.3.0-mac-arm64</code>)</p>
  </li>
  <li>
    <p><strong>latest는 상대심볼릭</strong></p>
  </li>
  <li>
    <p>스크립트에는 경로 하드코딩 대신 환경변수 사용(예: <code class="language-plaintext highlighter-rouge">WORK_TC</code>, <code class="language-plaintext highlighter-rouge">WORK_SDK</code>, <code class="language-plaintext highlighter-rouge">WORK_TOOLS</code>)으로 리네임 내성 ↑</p>
  </li>
</ul>

<p>원하면 지금 쓰는 폴더들 기준으로 <strong>자동 리네이머</strong>(중복 접두 제거, 변형 접미 추가, latest 생성까지) 스크립트를 만들어줄게—사용 OS/셸만 알려줘!</p>

<p class="chat--user">

ln -s 를 써서 심볼릭을 했는데 -sfn는 뭐가 달라?

</p>

<p>짧게:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-s</code> = <strong>심볼릭 링크</strong> 로 만들어</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-f</code> = <strong>기존 목적지(linkname)가 있으면 지우고</strong> 다시 만들어</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-n</code> = <strong>linkname이 “디렉터리를 가리키는 심볼릭 링크”여도 디렉터리로 취급하지 말고 그 “링크 그 자체”를 교체</strong></p>
  </li>
</ul>

<p>그래서 <code class="language-plaintext highlighter-rouge">ln -sfn 새버전 latest</code> 는 “latest가 무엇이든(특히 디렉터리를 가리키는 기존 심볼릭)” <strong>강제로 최신 링크로 갈아끼우는 안전한 한 줄</strong> 이에요.</p>

<hr />

<h2 id="왜--n이-필요하죠">왜 <code class="language-plaintext highlighter-rouge">-n</code>이 필요하죠?</h2>

<p>기존에 <code class="language-plaintext highlighter-rouge">latest -&gt; 13.2.0/</code> 같은 <strong>디렉터리 심볼릭</strong> 이 있을 때,<br />
<code class="language-plaintext highlighter-rouge">ln -sf 13.3.0 latest</code> 는 플랫폼/상황에 따라 <code class="language-plaintext highlighter-rouge">latest</code>를 <strong>디렉터리로 따라가</strong> 서 그 <strong>안에</strong> 뭔가 만들려고 시도할 수 있어요(의도 아님).<br />
<code class="language-plaintext highlighter-rouge">-n</code>을 주면 <code class="language-plaintext highlighter-rouge">latest</code>를 <strong>“그냥 파일(링크) 이름”으로만</strong> 보고 <strong>그 링크 자체를 교체</strong> 합니다.</p>

<blockquote>
  <p>macOS/BSD에서는 <code class="language-plaintext highlighter-rouge">-n</code>이 <code class="language-plaintext highlighter-rouge">-h</code>(symlink를 따라가지 않음)과 동일한 의미입니다.<br />
 GNU coreutils(리눅스)에서도 <code class="language-plaintext highlighter-rouge">-n/--no-dereference</code>가 같은 역할을 합니다.</p>
</blockquote>

<hr />

<h2 id="자주-쓰는-패턴">자주 쓰는 패턴</h2>

<h3 id="새로-만들-때">새로 만들 때</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> 13.3.0 latest           <span class="c"># latest -&gt; 13.3.0 (상대링크 권장)</span>
</code></pre></div></div>

<h3 id="기존-latest를-새-버전으로-교체가장-안전">기존 latest를 새 버전으로 교체(가장 안전)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-sfn</span> 13.3.1 latest         <span class="c"># 기존 symlink를 강제로 교체</span>
</code></pre></div></div>

<h3 id="확인">확인</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-l</span> latest      <span class="c"># latest -&gt; 13.3.1</span>
<span class="nb">readlink </span>latest   <span class="c"># 13.3.1</span>
</code></pre></div></div>

<hr />

<h2 id="비교-요약">비교 요약</h2>

<table>
  <thead>
    <tr>
      <th>명령</th>
      <th>동작</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ln -s T L</code></td>
      <td>L이 없을 때만 <strong>심볼릭 L → T</strong> 생성(이미 있으면 실패)</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ln -sf T L</code></td>
      <td>L이 파일/링크면 <strong>삭제 후 재생성</strong>. L이 <strong>디렉터리(또는 그를 가리키는 링크)</strong>일 땐 <strong>의도와 다르게 디렉터리로 따라갈 수 있음</strong></td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">ln -sfn T L</code></td>
      <td>L이 디렉터리를 가리키는 <strong>심볼릭</strong> 이더라도 <strong>따라가지 않고</strong> <strong>L 자체를 교체</strong>(의도대로 최신 링크 업데이트)</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>주의: <strong>L이 실제 디렉터리</strong> 라면 <code class="language-plaintext highlighter-rouge">-f</code>라도 지우지 않습니다. 그런 경우는 <code class="language-plaintext highlighter-rouge">rm -rf L</code>로 직접 지운 뒤 다시 만드세요.</p>
</blockquote>

<hr />

<h2 id="실전-팁">실전 팁</h2>

<ul>
  <li>
    <p><strong>상대경로</strong>(예: <code class="language-plaintext highlighter-rouge">ln -s 13.3.0 latest</code>)로 만들어 두면 상위 폴더를 통째로 옮겨도 링크가 안 깨집니다.</p>
  </li>
  <li>
    <p><strong>슬래시 주의</strong> : <code class="language-plaintext highlighter-rouge">13.3.0/</code> 처럼 타깃에 <code class="language-plaintext highlighter-rouge">/</code>를 붙이면 디렉터리로 간주되어 옵션 동작이 미묘해질 수 있으니, <strong>그냥 <code class="language-plaintext highlighter-rouge">13.3.0</code></strong>으로 쓰는 걸 추천.</p>
  </li>
  <li>
    <p>Windows는 <code class="language-plaintext highlighter-rouge">mklink /D latest 13.3.0</code>(또는 PowerShell <code class="language-plaintext highlighter-rouge">New-Item -ItemType SymbolicLink</code>)로 만들고, 교체는 <code class="language-plaintext highlighter-rouge">rmdir latest</code> 후 다시 <code class="language-plaintext highlighter-rouge">mklink</code>가 정석입니다.</p>
  </li>
</ul>

<p>원하면 네 툴 폴더들(gcc, cmake, jdk…)을 순회하며 <strong><code class="language-plaintext highlighter-rouge">latest</code>를 일괄 갱신</strong>하는 작은 스크립트(bash/tcsh/PowerShell)도 바로 만들어줄게.</p>

<p class="chat--user">

이미 빌드된 폴더들을 그냥 cp -rf 로 옮겨도 상관없나

</p>

<p>요약부터: <strong>그냥<code class="language-plaintext highlighter-rouge">cp -rf</code>로 통째 복사하는 건 비추</strong>예요.<br />
안전하게 옮기려면 <strong>같은 디스크면<code class="language-plaintext highlighter-rouge">mv</code></strong>, 다른 디스크/장치면 <strong><code class="language-plaintext highlighter-rouge">rsync -a</code>(또는 <code class="language-plaintext highlighter-rouge">cp -a</code>/<code class="language-plaintext highlighter-rouge">-pPR</code>)</strong>를 쓰고, “옮겨도 되는지”를 <strong>종류별로</strong> 판단해야 합니다.</p>

<hr />

<h1 id="1-언제-그냥-옮겨도-되나-relocatable-ok">1) 언제 “그냥 옮겨도” 되나? (Relocatable OK)</h1>

<ul>
  <li>
    <p><strong>포터블/압축 해제형 CLI</strong>(tar.gz로 배포된 cmake/ninja 등)</p>
  </li>
  <li>
    <p><strong>헤더-only/스크립트-only</strong>(특정 절대경로에 묶이지 않은 것)</p>
  </li>
  <li>
    <p><strong>자체 RPATH가 상대형</strong> 이거나 <strong>정적 링크 바이너리</strong><br />
→ 이런 건 보통 위치 독립적이라 폴더만 옮겨도 동작합니다.</p>
  </li>
</ul>

<h1 id="2-옮기면-깨지기-쉬운-것-relocatable-위험">2) 옮기면 깨지기 쉬운 것 (Relocatable 위험)</h1>

<ul>
  <li>
    <p><strong>Python venv / conda env</strong> : 내부 shebang과 경로가 <strong>절대경로로 박혀</strong> 있어요.<br />
→ <em>권장</em> : venv는 다시 만들기, conda는 <strong>conda-pack</strong> 같은 도구 사용.</p>
  </li>
  <li>
    <p><strong>C/C++ 툴체인·라이브러리</strong> 가 <strong>절대 RPATH / install prefix</strong> 를 가질 때<br />
→ <code class="language-plaintext highlighter-rouge">readelf -d</code>/<code class="language-plaintext highlighter-rouge">patchelf</code>(Linux), <code class="language-plaintext highlighter-rouge">otool -l</code>/<code class="language-plaintext highlighter-rouge">install_name_tool</code>(macOS)로 확인·수정 필요.</p>
  </li>
  <li>
    <p><strong>Qt/GTK 등 프레임워크 앱</strong> : 플랫폼 러ntime 경로/툴(deploy 도구) 의존.<br />
→ <code class="language-plaintext highlighter-rouge">macdeployqt</code>/<code class="language-plaintext highlighter-rouge">windeployqt</code>로 번들링한 산출만 위치 독립이 됨.</p>
  </li>
  <li>
    <p><strong>Windows에 “인스톨러로 설치된” 툴</strong> : 레지스트리/서비스/시스템 PATH 의존.<br />
→ Program Files에 깔린 건 <strong>복사 말고 재설치</strong> 가 안전.</p>
  </li>
</ul>

<hr />

<h1 id="3-안전한-복사이동-커맨드">3) 안전한 복사/이동 커맨드</h1>

<h2 id="같은-디스크파티션라면--이동이-정답">같은 디스크(파티션)라면 → <strong>이동이 정답</strong></h2>

<ul>
  <li><strong>Linux/macOS</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> /old/path/gcc/13.2.0 /new/path/gcc/
</code></pre></div>    </div>

    <ul>
      <li><em>장점</em> : 빠름(메타데이터만 갱신), <strong>권한/타임스탬프/링크 보존</strong>.</li>
    </ul>
  </li>
</ul>

<h2 id="다른-디스크장치로-복사해야-한다면">다른 디스크/장치로 복사해야 한다면</h2>

<ul>
  <li><strong>Linux</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-aHAX</span> <span class="nt">--info</span><span class="o">=</span>progress2 /old/path/ /new/path/
<span class="c"># 또는 최소: rsync -a /old/path/ /new/path/</span>
<span class="c"># cp 대안: cp -a /old/path /new/path</span>
</code></pre></div>    </div>
  </li>
  <li><strong>macOS (BSD cp는 -a가 약함)</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-a</span> /old/path/ /new/path/
<span class="c"># 또는: cp -pPR /old/path /new/path   # -p(속성) -P(심볼릭 보존) -R(재귀)</span>
<span class="c"># 또는: ditto /old/path /new/path     # xattrs/리소스 포크까지 잘 보존</span>
</code></pre></div>    </div>
  </li>
  <li><strong>Windows</strong>
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">robocopy</span><span class="w"> </span><span class="s2">"C:\old\path"</span><span class="w"> </span><span class="s2">"D:\new\path"</span><span class="w"> </span><span class="nx">/MIR</span><span class="w"> </span><span class="nx">/COPY:DATSO</span><span class="w"> </span><span class="nx">/DCOPY:DAT</span><span class="w"> </span><span class="nx">/SL</span><span class="w">
</span><span class="c"># /SL: 심볼릭 링크를 '대상'이 아니라 '링크 자체'로 복사</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p><strong>왜<code class="language-plaintext highlighter-rouge">cp -rf</code>는 위험?</strong><br />
 <code class="language-plaintext highlighter-rouge">-r</code>은 재귀 복사지만 <strong>메타데이터(권한/타임스탬프/링크/확장속성)</strong>를 제대로 안 지켜요.<br />
 또한 <strong>심볼릭 링크를 따라가</strong> 실제 내용을 복사해 버릴 수 있어 구조가 바뀝니다.<br />
 → <strong><code class="language-plaintext highlighter-rouge">-a</code>(archive)나 <code class="language-plaintext highlighter-rouge">-pPR</code>/<code class="language-plaintext highlighter-rouge">rsync -a</code></strong>를 쓰세요.</p>
</blockquote>

<hr />

<h1 id="4-옮긴-뒤-고장-체크-빠른-점검표">4) 옮긴 뒤 “고장 체크” 빠른 점검표</h1>

<h3 id="공통">공통</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bin/툴 --version</code> 실행</p>
  </li>
  <li>
    <p><strong>심볼릭 링크</strong> 가 그대로인지: <code class="language-plaintext highlighter-rouge">find . -type l -ls</code> (링크가 파일로 “복제”되어 있지 않은지)</p>
  </li>
  <li>
    <p><strong>타임스탬프</strong> 유지 여부(증분 빌드 트리거 방지): <code class="language-plaintext highlighter-rouge">stat</code>로 몇 개 샘플 확인</p>
  </li>
</ul>

<h3 id="linuxelf">Linux(ELF)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ldd bin/somebinary                  <span class="c"># 의존 so 확인</span>
patchelf <span class="nt">--print-rpath</span> bin/somebinary
</code></pre></div></div>

<ul>
  <li>절대 RPATH가 이전 경로를 가리키면 동작 불가 → <code class="language-plaintext highlighter-rouge">patchelf --set-rpath</code>로 수정.</li>
</ul>

<h3 id="macosmach-o">macOS(Mach-O)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>otool <span class="nt">-L</span> bin/somebinary             <span class="c"># 로드 라이브러리 경로</span>
otool <span class="nt">-l</span> bin/somebinary | <span class="nb">grep</span> <span class="nt">-A2</span> LC_RPATH
</code></pre></div></div>

<ul>
  <li>필요 시 <code class="language-plaintext highlighter-rouge">install_name_tool -change/-add_rpath</code>로 경로 수정.</li>
</ul>

<h3 id="pythonconda">Python/conda</h3>

<ul>
  <li>venv는 <strong>다시 생성</strong> 권장:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv .venv <span class="o">&amp;&amp;</span> <span class="nb">.</span> .venv/bin/activate <span class="o">&amp;&amp;</span> pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div>    </div>
  </li>
  <li>conda는 <strong>conda-pack</strong> 으로 묶어서 옮긴 뒤 <strong>재배치</strong> :
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda-pack <span class="nt">-n</span> myenv <span class="nt">-o</span> myenv.tar.gz
<span class="nb">mkdir</span> <span class="nt">-p</span> /new/env <span class="o">&amp;&amp;</span> <span class="nb">tar</span> <span class="nt">-xzf</span> myenv.tar.gz <span class="nt">-C</span> /new/env
/new/env/bin/conda-unpack
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="windows-1">Windows</h3>

<ul>
  <li>포터블 앱이면 OK. <strong>인스톨러 기반</strong>(레지스트리 사용) 툴은 재설치 권장.</li>
</ul>

<hr />

<h1 id="5-latest-링크는">5) <code class="language-plaintext highlighter-rouge">latest</code> 링크는?</h1>

<p>폴더 위치가 바뀌면 <strong>상대링크</strong> 로 다시 잡는 게 안전:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /new/path/gcc
<span class="nb">ln</span> <span class="nt">-sfn</span> 13.3.0 latest   <span class="c"># 상대경로 심볼릭</span>
</code></pre></div></div>

<hr />

<h2 id="결론-실무-룰">결론 (실무 룰)</h2>

<ol>
  <li>
    <p><strong>같은 디스크면<code class="language-plaintext highlighter-rouge">mv</code></strong>, 다른 디스크면 <strong><code class="language-plaintext highlighter-rouge">rsync -a</code></strong> (mac은 <code class="language-plaintext highlighter-rouge">cp -pPR</code>/<code class="language-plaintext highlighter-rouge">ditto</code>도 OK).</p>
  </li>
  <li>
    <p><strong>venv/conda, 인스톨러 기반 툴</strong> 은 복사 대신 <strong>재생성/재설치</strong>.</p>
  </li>
  <li>
    <p>바이너리는 <strong>RPATH/의존 라이브러리</strong> 를 점검(필요 시 <code class="language-plaintext highlighter-rouge">patchelf</code>/<code class="language-plaintext highlighter-rouge">install_name_tool</code>).</p>
  </li>
  <li>
    <p>복사 후에는 <strong>latest 심볼릭</strong> 과 PATH만 다시 확인.</p>
  </li>
</ol>

<p>원하면 네가 실제로 옮기려는 폴더(예: <code class="language-plaintext highlighter-rouge">gcc/13.2.0</code>, <code class="language-plaintext highlighter-rouge">qt/6.7.2</code>) 기준으로 <strong>안전 명령어 세트</strong> 를 구체적으로 써 줄게.</p>

<p class="chat--user">

이동하나 카피하나 똑같은거 아닌가

</p>

<p>짧게: <strong>아니요.</strong></p>

<ul>
  <li>
    <p><strong>같은 디스크/파일시스템이면</strong> <code class="language-plaintext highlighter-rouge">mv</code>는 거의 <strong>이름만 바꾸는(renaming) 메타데이터 연산</strong> → 빠르고 원형(권한/타임스탬프/하드링크 등) 그대로.</p>
  </li>
  <li>
    <p><strong>다른 디스크/파티션이면</strong> <code class="language-plaintext highlighter-rouge">mv</code>도 내부적으로 <strong>복사 후 원본 삭제</strong> 라서 사실상 <code class="language-plaintext highlighter-rouge">cp</code>와 비슷하지만, <code class="language-plaintext highlighter-rouge">cp -rf</code>는 <strong>메타데이터·심볼릭 처리</strong> 가 부정확할 수 있어 위험.</p>
  </li>
</ul>

<p>아래를 기준으로 골라 써요.</p>

<hr />

<h1 id="step-by-step-판단">step-by-step 판단</h1>

<ol>
  <li>
    <p><strong>같은 파일시스템?</strong> → <strong><code class="language-plaintext highlighter-rouge">mv</code></strong></p>

    <ul>
      <li>
        <p>장점: 0-copy(초고속), <strong>원본 inode/권한/타임스탬프/xattr/하드링크 그대로</strong> , <strong>원자적(atomic) rename</strong>.</p>
      </li>
      <li>
        <p>예: <code class="language-plaintext highlighter-rouge">mv /work/old/gcc/13.2.0 /work/80_Toolchains/gcc/</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>다른 파일시스템(또는 드라이브)?</strong> → <strong><code class="language-plaintext highlighter-rouge">rsync -a</code>(또는 <code class="language-plaintext highlighter-rouge">cp -a</code>)</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">rsync -a</code>가 표준 답: 권한/타임스탬프/심볼릭링크/하드링크를 보존.</p>
      </li>
      <li>예 (Linux/macOS):
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync <span class="nt">-a</span> /old/path/ /new/path/    <span class="c"># 끝에 슬래시 주의</span>
<span class="c"># 대안: macOS는 cp -pPR 또는 ditto / robocopy(Windows)</span>
</code></pre></div>        </div>
      </li>
      <li>끝나면 원본을 직접 지우기(<code class="language-plaintext highlighter-rouge">rm -rf /old/path</code>)—<strong>검증 후</strong>.</li>
    </ul>
  </li>
</ol>

<blockquote>
  <p><strong>왜<code class="language-plaintext highlighter-rouge">cp -rf</code>는 비추?</strong><br />
 <code class="language-plaintext highlighter-rouge">-r</code>은 심볼릭 링크를 <strong>따라가서 내용까지 복사</strong> 할 수 있고, xattr/ACL/타임스탬프 보존이 깨질 수 있어요. 최소 <strong><code class="language-plaintext highlighter-rouge">cp -a</code></strong>(Linux)나 <strong><code class="language-plaintext highlighter-rouge">cp -pPR</code>/<code class="language-plaintext highlighter-rouge">ditto</code>(macOS)</strong>를 써야 안전.</p>
</blockquote>

<hr />

<h1 id="빠른-체크같은-fs인지">빠른 체크(같은 FS인지)</h1>

<ul>
  <li>
    <p><strong>Linux</strong> : <code class="language-plaintext highlighter-rouge">stat -c %d &lt;path&gt;</code> 두 경로의 숫자가 같으면 같은 FS</p>
  </li>
  <li>
    <p><strong>macOS</strong> : <code class="language-plaintext highlighter-rouge">stat -f %d &lt;path&gt;</code></p>
  </li>
  <li>
    <p>간단 함수:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>samefs<span class="o">()</span> <span class="o">{</span>
  <span class="k">if </span><span class="nb">stat</span> <span class="nt">-c</span> %d / <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then</span>
    <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">stat</span> <span class="nt">-c</span> %d <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">stat</span> <span class="nt">-c</span> %d <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">]</span>
  <span class="k">else</span>
    <span class="o">[</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">stat</span> <span class="nt">-f</span> %d <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">stat</span> <span class="nt">-f</span> %d <span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">]</span>
  <span class="k">fi</span>
<span class="o">}</span>
<span class="c"># 사용: samefs /src /dst &amp;&amp; mv /src /dst || rsync -a /src/ /dst/</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h1 id="도구빌드-폴더에-대한-실무-팁">도구/빌드 폴더에 대한 실무 팁</h1>

<ul>
  <li>
    <p><strong>포터블 툴체인/SDK(압축 풀어 쓰는 형태)</strong> : 위 규칙대로 옮기면 대체로 OK.</p>
  </li>
  <li>
    <p><strong>Python venv/conda</strong> : 내부 절대경로 때문에 <strong>복사/이동 후 깨짐</strong> → venv는 다시 만들고, conda는 <code class="language-plaintext highlighter-rouge">conda-pack</code> 사용 권장.</p>
  </li>
  <li>
    <p><strong>ELF/Mach-O 바이너리</strong> : RPATH/install_name이 절대경로면 이동 후 실패 →</p>

    <ul>
      <li>
        <p>Linux: <code class="language-plaintext highlighter-rouge">patchelf --print-rpath bin/...</code>로 확인, 필요시 <code class="language-plaintext highlighter-rouge">--set-rpath</code>.</p>
      </li>
      <li>
        <p>macOS: <code class="language-plaintext highlighter-rouge">otool -L</code>/<code class="language-plaintext highlighter-rouge">install_name_tool</code>로 수정.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Windows “인스톨러 설치” 앱</strong> : 레지스트리/서비스 의존 → <strong>재설치</strong> 가 안전.</p>
  </li>
</ul>

<hr />

<h1 id="마지막-한-줄-규칙">마지막 한 줄 규칙</h1>

<ul>
  <li>
    <p><strong>같은 FS</strong> ➜ <code class="language-plaintext highlighter-rouge">mv</code> (최고)</p>
  </li>
  <li>
    <p><strong>다른 FS</strong> ➜ <code class="language-plaintext highlighter-rouge">rsync -a</code> / <code class="language-plaintext highlighter-rouge">cp -a</code> (검증 후 원본 삭제)</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">cp -rf</code>는 지양</strong> (링크/메타데이터 깨질 위험)</p>
  </li>
  <li>
    <p>옮긴 뒤엔 <strong><code class="language-plaintext highlighter-rouge">latest</code> 심볼릭</strong>과 <strong>실행 체크(<code class="language-plaintext highlighter-rouge">--version</code>)</strong>로 검증!</p>
  </li>
</ul>

<p class="chat--user">

today.csh 별로인데? 가상환경 소싱하도록 하고 싶은데 커맨드로 venv_user (내 가상환경 소싱하는 alias) 등록하니 그런 커맨드가 없대

</p>

<p>좋은 포인트야. 증상은 “<code class="language-plaintext highlighter-rouge">today.csh</code>가 <strong>비대화(non-interactive) 셸</strong> 에서 커맨드를 실행하고, 네 <strong>alias(venv_user)</strong> 는 <strong>인터랙티브에서만 로드</strong> 되기 때문”이에요. 게다가 Python venv는 tcsh에선 <code class="language-plaintext highlighter-rouge">activate.csh</code>를 <code class="language-plaintext highlighter-rouge">source</code>해야 하는데, 이건 <strong>tcsh에서만</strong> 먹습니다(= sh/bash에서 실행하면 에러).</p>

<p>아래 중 편한 해법 하나 골라 써!</p>

<hr />

<h1 id="왜-alias가-안-먹나">왜 alias가 안 먹나</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">today.csh</code>가 내부에서 <code class="language-plaintext highlighter-rouge">sh</code>나 <code class="language-plaintext highlighter-rouge">tcsh -f -c "..."</code> 같은 <strong>비대화 셸</strong> 로 실행 → <code class="language-plaintext highlighter-rouge">~/.tcshrc</code>의 alias가 로드되지 않음.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">source</code>는 <strong>셸 내장</strong> 이라 <strong>tcsh</strong> 로 실행해야 함. (bash로 돌리면 당연히 “없는 커맨드”)</p>
  </li>
</ul>

<hr />

<h1 id="해결-a-shortcutslist에서-한-줄로-venv-활성화-후-실행">해결 A) shortcuts.list에서 <strong>한 줄로</strong> venv 활성화 후 실행</h1>

<blockquote>
  <p>프로젝트마다 venv가 있다면 <strong>tcsh로 실행</strong> 하고 <strong>activate.csh</strong> 를 <code class="language-plaintext highlighter-rouge">source</code>하세요.</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>My App (venv) | 20_Projects/PRJ-2025-001_app | tcsh -c 'source .venv/bin/activate.csh; ./scripts/run.sh'
</code></pre></div>  </div>
</blockquote>

<ul>
  <li>conda를 쓴다면:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>My App (conda) | 20_Projects/PRJ-2025-001_app | tcsh -c 'source ~/miniconda3/etc/profile.d/conda.csh; conda activate myenv; ./scripts/run.sh'
</code></pre></div></div>

<blockquote>
  <p>포인트: <strong>반드시 tcsh -c</strong> 로 돌려야 <code class="language-plaintext highlighter-rouge">source</code>가 먹습니다.<br />
 venv는 <code class="language-plaintext highlighter-rouge">bin/activate.csh</code>를 쓰고, bash용 <code class="language-plaintext highlighter-rouge">bin/activate</code>를 쓰면 tcsh에선 실패해요.</p>
</blockquote>

<hr />

<h1 id="해결-b-래퍼-스크립트-를-만들어서-언제나-작동하게">해결 B) <strong>래퍼 스크립트</strong> 를 만들어서 언제나 작동하게</h1>

<p><code class="language-plaintext highlighter-rouge">10_Today/wrappers/run_in_venv.csh</code> (tcsh용, venv 전용)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# 사용: run_in_venv.csh &lt;venv_dir&gt; &lt;커맨드...&gt;
if ( $#argv &lt; 1 ) then
  echo "usage: run_in_venv.csh &lt;venv_dir&gt; [command ...]"
  exit 2
endif
set venv = "$1"; shift
if ( ! -f "$venv/bin/activate.csh" ) then
  echo "activate.csh not found in $venv/bin"; exit 3
endif
source "$venv/bin/activate.csh"
if ( $#argv == 0 ) then
  exec tcsh -i
else
  # 남은 인자를 하나의 커맨드로 실행
  set cmd = "$*"
  exec tcsh -c "$cmd"
endif
</code></pre></div></div>

<p>권한 주기:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

chmod +x ~/Work/10_Today/wrappers/run_in_venv.csh
</code></pre></div></div>

<p>shortcuts.list 예시:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Run PRJ in venv | 20_Projects/PRJ-2025-001_app | ../../10_Today/wrappers/run_in_venv.csh .venv './scripts/run.sh'
Open tcsh@venv  | 20_Projects/PRJ-2025-001_app | ../../10_Today/wrappers/run_in_venv.csh .venv
</code></pre></div></div>

<p><strong>conda 버전</strong>(<code class="language-plaintext highlighter-rouge">run_in_conda.csh</code>):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# 사용: run_in_conda.csh &lt;env_name&gt; &lt;커맨드...&gt;
source ~/miniconda3/etc/profile.d/conda.csh
if ( $#argv &lt; 1 ) then
  echo "usage: run_in_conda.csh &lt;env_name&gt; [command ...]"; exit 2
endif
set env = "$1"; shift
conda activate "$env"
if ( $#argv == 0 ) then
  exec tcsh -i
else
  exec tcsh -c "$*"
endif
</code></pre></div></div>

<hr />

<h1 id="해결-c-alias-대신-실행-파일-로-venv_user를-만들기">해결 C) alias 대신 <strong>실행 파일</strong> 로 <code class="language-plaintext highlighter-rouge">venv_user</code>를 만들기</h1>

<p>alias는 비대화 셸에서 안 불러와져요. 아예 <strong>스크립트</strong> 로 만들어 PATH에 두면 어디서든 호출 가능.</p>

<p><code class="language-plaintext highlighter-rouge">82_Tools/bin/venv_user</code> (tcsh 스크립트):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# 기본 venv 경로를 하드코딩하거나, 인자로 받게 하자
set venv = "$HOME/Work/20_Projects/PRJ-2025-001_app/.venv"
if ( "$1" != "" ) set venv = "$1"; shift
if ( ! -f "$venv/bin/activate.csh" ) then
  echo "activate.csh not found in $venv/bin"; exit 3
endif
source "$venv/bin/activate.csh"
if ( $#argv == 0 ) then
  exec tcsh -i
else
  exec tcsh -c "$*"
endif
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chmod +x ~/Work/82_Tools/bin/venv_user
</code></pre></div></div>

<p>PATH에 <code class="language-plaintext highlighter-rouge">82_Tools/bin</code>이 있다면 shortcuts.list는 이렇게:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Run via venv_user | 20_Projects/PRJ-2025-001_app | venv_user .venv './scripts/run.sh'
</code></pre></div></div>

<hr />

<h2 id="자주-걸리는-함정-체크리스트">자주 걸리는 함정 체크리스트</h2>

<ul>
  <li>
    <p><strong>tcsh 전용 활성화</strong> : <code class="language-plaintext highlighter-rouge">activate.csh</code>를 <code class="language-plaintext highlighter-rouge">source</code>해야 한다.</p>
  </li>
  <li>
    <p><strong>셸 지정</strong> : <code class="language-plaintext highlighter-rouge">tcsh -c '...'</code>로 실행(기본 sh로 돌리면 실패).</p>
  </li>
  <li>
    <p><strong>지속성 기대 금지</strong> : today 런처가 <strong>하위 셸</strong> 에서 실행하므로, 활성화 상태는 그 실행에만 적용됨.<br />
오래 머무는 셸이 필요하면 위 래퍼로 <code class="language-plaintext highlighter-rouge">exec tcsh -i</code>를 열도록.</p>
  </li>
  <li>
    <p><strong>경로 공백</strong> : 패스/커맨드는 따옴표로 감싸자.</p>
  </li>
  <li>
    <p><strong>conda</strong> : <code class="language-plaintext highlighter-rouge">conda.csh</code>를 <code class="language-plaintext highlighter-rouge">source</code>한 뒤 <code class="language-plaintext highlighter-rouge">conda activate</code> 해야 함.</p>
  </li>
</ul>

<p>원하면 지금 쓰는 <code class="language-plaintext highlighter-rouge">today.csh</code>를 살짝 수정해서 <strong>항상 tcsh로 실행</strong> 하고, 에러/로그 출력도 깔끔하게 보는 버전으로 리팩터링해줄게.</p>

<p class="chat--user">

흠 단순히 tcsh에서 작업 폴더로 이동 + command 실행 -&gt; 이후 tcsh 세션 유지 이런 flow가 아닌가보네

</p>

<p>맞아—지금 러너는 “비대화 셸에서 실행 → 종료”라서 네가 원하는<br />
<strong>(1) 작업 폴더로 이동 → (2) venv/conda 활성화 → (3) 커맨드 실행 → (4) 셸 유지</strong> 흐름이 안 나와.<br />
해결법은 마지막에 <strong><code class="language-plaintext highlighter-rouge">exec tcsh -i</code></strong>로 <strong>인터랙티브 셸로 전환</strong> 해 머무르게 하는 거야.</p>

<p>아래 셋 중 편한 걸 골라 써.</p>

<hr />

<h1 id="옵션-a-한-줄로-해결-shortcutslist용">옵션 A) 한 줄로 해결 (shortcuts.list용)</h1>

<blockquote>
  <p>실행 후 셸을 유지하려면 끝에 <strong><code class="language-plaintext highlighter-rouge">exec tcsh -i</code></strong>가 핵심!</p>
</blockquote>

<p><strong>venv 사용 예</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Label | 20_Projects/PRJ-2025-001_app | tcsh -c 'source .venv/bin/activate.csh; ./scripts/run.sh; exec tcsh -i'
</code></pre></div></div>

<p><strong>conda 사용 예</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Label | 20_Projects/PRJ-2025-001_app | tcsh -c 'source ~/miniconda3/etc/profile.d/conda.csh; conda activate myenv; ./scripts/run.sh; exec tcsh -i'
</code></pre></div></div>

<blockquote>
  <p>포인트: <code class="language-plaintext highlighter-rouge">tcsh -c '...'</code> 안에서 필요한 걸 실행한 뒤 <strong>그 프로세스를 인터랙티브 tcsh로 교체</strong> 하니, 환경이 보존된 채 셸이 남아있어.</p>
</blockquote>

<hr />

<h1 id="옵션-b-재사용-래퍼-스크립트-추천">옵션 B) 재사용 래퍼 스크립트 (추천)</h1>

<p><code class="language-plaintext highlighter-rouge">Work/10_Today/wrappers/enter.csh</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# 사용: enter.csh &lt;path&gt; [--venv &lt;venvdir&gt; | --conda &lt;envname&gt;] [-- cmd ...]
if ( $#argv &lt; 1 ) then
  echo "usage: enter.csh &lt;path&gt; [--venv DIR | --conda NAME] [-- cmd ...]"; exit 2
endif

set cwd = "$1"; shift
cd "$cwd" || exit 3

# 옵션 파싱
set use_venv = ""; set use_conda = ""; set i = 1
while ( $i &lt;= $#argv )
  if ( "$argv[$i]" == "--venv" ) then
    @ i++; set use_venv = "$argv[$i]"
  else if ( "$argv[$i]" == "--conda" ) then
    @ i++; set use_conda = "$argv[$i]"
  else if ( "$argv[$i]" == "--" ) then
    @ i++; break
  else
    break
  endif
  @ i++
end
@ cmd_start = $i

# 환경 활성화
if ( "$use_venv" != "" ) then
  if ( ! -f "$use_venv/bin/activate.csh" ) then
    echo "venv activate.csh not found: $use_venv/bin/activate.csh"; exit 4
  endif
  source "$use_venv/bin/activate.csh"
else if ( "$use_conda" != "" ) then
  if ( -f ~/miniconda3/etc/profile.d/conda.csh ) then
    source ~/miniconda3/etc/profile.d/conda.csh
  endif
  conda activate "$use_conda"
endif

# 커맨드가 있으면 실행
if ( $cmd_start &lt;= $#argv ) then
  set cmd = "$argv[$cmd_start-]"
  tcsh -c "$cmd"
endif

# 여기서 셸에 '머무르기'
exec tcsh -i
</code></pre></div></div>

<p>권한:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

chmod +x ~/Work/10_Today/wrappers/enter.csh
</code></pre></div></div>

<p><strong>shortcuts.list 예시</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PRJ venv &amp; stay  | 20_Projects/PRJ-2025-001_app | ../../10_Today/wrappers/enter.csh . --venv .venv -- ./scripts/run.sh
Just enter venv   | 20_Projects/PRJ-2025-001_app | ../../10_Today/wrappers/enter.csh . --venv .venv
PRJ conda &amp; stay  | 20_Projects/PRJ-2025-001_app | ../../10_Today/wrappers/enter.csh . --conda myenv -- ./scripts/run.sh
</code></pre></div></div>

<hr />

<h1 id="옵션-c-전역-커맨드로-고정-venv_user">옵션 C) 전역 커맨드로 고정 (<code class="language-plaintext highlighter-rouge">venv_user</code>)</h1>

<p><code class="language-plaintext highlighter-rouge">Work/82_Tools/bin/venv_user</code> (PATH에 들어가게)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# 사용: venv_user &lt;project_path&gt; &lt;venv_dir&gt; [-- cmd ...]
set proj="$1"; set venv="$2"; shift; shift
cd "$proj" || exit 3
source "$venv/bin/activate.csh"
if ( "$1" == "--" ) shift
if ( $#argv ) then
  tcsh -c "$*"
endif
exec tcsh -i
</code></pre></div></div>

<p>권한:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

chmod +x ~/Work/82_Tools/bin/venv_user
</code></pre></div></div>

<p><strong>예</strong></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Label | / | venv_user "$HOME/Work/20_Projects/PRJ-2025-001_app" ".venv" -- ./scripts/run.sh
</code></pre></div></div>

<hr />

<h2 id="흔한-함정-체크">흔한 함정 체크</h2>

<ul>
  <li>
    <p><strong>반드시<code class="language-plaintext highlighter-rouge">tcsh</code>로 실행</strong>해야 <code class="language-plaintext highlighter-rouge">source .../activate.csh</code>가 먹음. (bash로 돌리면 실패)</p>
  </li>
  <li>
    <p><strong>마지막에 <code class="language-plaintext highlighter-rouge">exec tcsh -i</code></strong>가 있어야 환경을 들고 <strong>머무름</strong>.</p>
  </li>
  <li>
    <p>runner가 이미 경로로 <code class="language-plaintext highlighter-rouge">cd</code>해 준다면 <code class="language-plaintext highlighter-rouge">enter.csh</code>의 <code class="language-plaintext highlighter-rouge">&lt;path&gt;</code>를 <code class="language-plaintext highlighter-rouge">.</code>로 쓰면 됨.</p>
  </li>
  <li>
    <p>경로에 공백 있으면 <strong>따옴표</strong> 필수.</p>
  </li>
</ul>

<p>이대로 쓰면 “작업 폴더 이동 → 가상환경 활성화 → 커맨드 실행 → tcsh 유지”가 딱 그 흐름으로 돌아갈 거야.</p>

<p class="chat--user">

그냥 내가 원하는 흐름대로 할 순 없어? 작업명 | 작업 폴더(절대 경로) | 작업 경로로 현재 쉘에서 cd로 이동 후 실행할 커맨드드들(비어있을 수도 있음)

</p>

<p>가능해! 핵심은 <strong>“현재 셸(tcsh)의 상태를 바꾸려면 실행이 아니라 <code class="language-plaintext highlighter-rouge">source</code> 해야 한다”</strong>는 점이야.<br />
아래 스크립트를 쓰면, <strong>현재 tcsh에서</strong> <code class="language-plaintext highlighter-rouge">cd</code>로 이동하고 (필요하면) <strong>명령을 실행</strong> 한 뒤 <strong>그 상태로 계속 머물러</strong>.</p>

<hr />

<h1 id="1-원하는-형식의-리스트-파일">1) 원하는 형식의 리스트 파일</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/10_Today/shortcuts.list</code> (예: 절대경로 + 선택 명령)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># label | abs path | commands (optional)
My App(run) | /Users/me/Work/20_Projects/PRJ-2025-001_app | source .venv/bin/activate.csh; ./scripts/run.sh
Just Go     | /Users/me/Work/26_Datasets/datasets/ad_events/v2025.0826/processed |
</code></pre></div></div>

<ul>
  <li>
    <p>3번째 칸은 <strong>비워도 됨</strong>(그냥 폴더만 이동).</p>
  </li>
  <li>
    <p>명령이 여러 개면 <code class="language-plaintext highlighter-rouge">;</code>로 이어서 쓰면 <strong>현재 셸</strong> 에서 그대로 실행됨.</p>
  </li>
</ul>

<hr />

<h1 id="2-tcsh-전용-러너-현재-셸에서-cd--실행--유지">2) tcsh 전용 러너 (현재 셸에서 cd + 실행 + 유지)</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/10_Today/jump.csh</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# 사용: source ~/Work/10_Today/jump.csh &lt;번호|라벨 일부&gt;
# 동작: shortcuts.list에서 매칭 항목을 찾아 "현재 셸"에서 cd 후 (있으면) 명령을 실행.
# 중요: 반드시 source로 호출해야 현재 셸에 반영됨!

set _list = "$HOME/Work/10_Today/shortcuts.list"
if ( ! -r "$_list" ) then
  echo "not found: $_list"; exit 1
endif

# 인자 없으면 번호 목록을 보여주고 종료
if ( $#argv == 0 ) then
  awk -F'\\|' 'BEGIN{i=0}
    $0 ~ /^[[:space:]]*#/ {next}
    NF&gt;=2 {
      i++; for (k=1;k&lt;=NF;k++){ gsub(/^[ \t]+|[ \t]+$/,"",$k) }
      printf("%2d) %-24s  -&gt; %s\n", i, $1, $2)
    }' "$_list"
  echo 'usage: source ~/Work/10_Today/jump.csh &lt;번호|라벨 일부&gt;'
  exit 0
endif

# 선택 로직: 숫자 인덱스 또는 라벨 부분 일치(대소문자 무시, 첫 매칭)
set _key = "$*"

# dir
set _dir = "`awk -F'\\|' -v key=\"$_key\" '
  BEGIN{IGNORECASE=1; i=0}
  $0 ~ /^[[:space:]]*#/ {next}
  NF&gt;=2 {
    for(k=1;k&lt;=NF;k++){ gsub(/^[ \t]+|[ \t]+$/,"",$k) }
    i++
    if ( (key ~ /^[0-9]+$/ &amp;&amp; i==key) || index($1,key) ) { print $2; exit }
  }' \"$_list\"`"

# cmd (optional)
set _cmd = "`awk -F'\\|' -v key=\"$_key\" '
  BEGIN{IGNORECASE=1; i=0}
  $0 ~ /^[[:space:]]*#/ {next}
  NF&gt;=2 {
    for(k=1;k&lt;=NF;k++){ gsub(/^[ \t]+|[ \t]+$/,"",$k) }
    i++
    if ( (key ~ /^[0-9]+$/ &amp;&amp; i==key) || index($1,key) ) { if (NF&gt;=3) print $3; exit }
  }' \"$_list\"`"

if ( "$_dir" == "" ) then
  echo "not found: $_key"; exit 2
endif
if ( ! -d "$_dir" ) then
  echo "no such dir: $_dir"; exit 3
endif

# 현재 셸에서 이동
cd "$_dir"

# 명령이 있으면 현재 셸에서 실행(환경 유지)
if ( "$_cmd" != "" ) then
  eval "$_cmd"
endif

# 여기서 끝. source로 불렀기 때문에 셸은 계속 유지됨.
</code></pre></div></div>

<h2 id="사용법">사용법</h2>

<ol>
  <li><code class="language-plaintext highlighter-rouge">.tcshrc</code>에 바로가기 추가:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

alias j 'source ~/Work/10_Today/jump.csh'
</code></pre></div></div>

<ol>
  <li>사용 예:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

j                 # 목록 보기
j 1               # 1번으로 이동(+명령 실행)
j "My App"        # 라벨 부분 매칭으로 이동(+명령 실행)
</code></pre></div></div>

<blockquote>
  <p><strong>중요:</strong> 반드시 <code class="language-plaintext highlighter-rouge">source</code>로 호출해야 <strong>현재 셸</strong> 에서 <code class="language-plaintext highlighter-rouge">cd</code>/환경변경이 반영돼요.<br />
 (위 alias <code class="language-plaintext highlighter-rouge">j</code>가 바로 그걸 해줍니다.)</p>
</blockquote>

<hr />

<h2 id="팁-venvconda">팁 (venv/conda)</h2>

<ul>
  <li>venv 활성화는 명령 칸에 그냥 넣으면 돼요:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>My App | /abs/PRJ | source .venv/bin/activate.csh; ./scripts/run.sh
</code></pre></div>    </div>
  </li>
  <li>conda:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PRJ(conda) | /abs/PRJ | source ~/miniconda3/etc/profile.d/conda.csh; conda activate myenv; ./scripts/run.sh
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="안전장치">안전장치</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">#</code>로 시작하는 줄은 주석/비활성 처리.</p>
  </li>
  <li>
    <p>라벨에 공백 OK. 경로나 명령에 공백이 있어도 위 스크립트가 <strong>그대로</strong> 잡아줍니다.</p>
  </li>
  <li>
    <p>번호/라벨 중 <strong>첫 매칭 1건</strong> 만 실행(중복 라벨은 피하세요).</p>
  </li>
</ul>

<hr />

<p>원하면 이 러너에 <strong>fzf 선택</strong>(있으면), <strong>디렉터리 자동 완성</strong> , <strong>실패 로그</strong> 같은 기능도 얹어줄 수 있어.</p>

<p class="chat--user">

그런데 사용 방식은 이전에 너가 한거처럼 번호 묻고 인덱스 넣고 엔터하면 그걸 실행하면 좋겠어. 등록할때도 마찬가지로 라벨 묻고 답하고, 커맨드 묻고 답하면 그 후 등록되는 식이면 좋겠어

</p>

<p>좋아, 너가 원하는 <strong>번호 선택 → 실행 / 대화형 등록</strong> 흐름으로 딱 맞춘 <code class="language-plaintext highlighter-rouge">tcsh</code> 러너를 만들어줄게.<br />
핵심은 <strong>현재 셸에서<code class="language-plaintext highlighter-rouge">source</code>로 실행</strong>해야 <code class="language-plaintext highlighter-rouge">cd</code>/venv 활성화가 그대로 유지된다는 점!</p>

<hr />

<h1 id="1-shortcutslist-포맷-그대로-복붙">1) <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 포맷 (그대로 복붙)</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/10_Today/shortcuts.list</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># label | abs path | commands (optional, ;로 구분)
My App (venv run) | /Users/me/Work/20_Projects/PRJ-2025-001_app | source .venv/bin/activate.csh; ./scripts/run.sh
Just Go           | /Users/me/Work/26_Datasets/datasets/ad_events/v2025.0826/processed |
</code></pre></div></div>

<hr />

<h1 id="2-인터랙티브-러너-번호-실행--대화형-등록">2) 인터랙티브 러너 (번호 실행 + 대화형 등록)</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/10_Today/jmenu.csh</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# jmenu.csh — tcsh용 “번호 선택 실행 + 대화형 등록” 러너
# 사용: source ~/Work/10_Today/jmenu.csh

set _list = "$HOME/Work/10_Today/shortcuts.list"
if ( ! -e "$_list" ) then
  echo "# label | abs path | commands (optional)" &gt; "$_list"
endif

# 리스트 출력 함수
alias _jlist 'awk -F"\\|" '"'"'BEGIN{i=0}
  $0 ~ /^[[:space:]]*#/ {next}
  NF&gt;=2 {
    for (k=1;k&lt;=NF;k++){ gsub(/^[ \t]+|[ \t]+$/,"",$k) }
    if ($1=="") next
    i++; printf("%2d) %-28s -&gt; %s\n", i, $1, $2)
  }'"'"' '$_list

# N번째 항목의 필드 가져오기(1=label, 2=dir, 3=cmd)
alias _jget 'awk -F"\\|" -v idx="\!:1" -v fld="\!:2" '"'"'BEGIN{i=0}
  $0 ~ /^[[:space:]]*#/ {next}
  NF&gt;=2 {
    for (k=1;k&lt;=NF;k++){ gsub(/^[ \t]+|[ \t]+$/,"",$k) }
    if ($1=="") next
    i++; if (i==idx){ if(fld==1)print $1; else if(fld==2)print $2; else if(fld==3 &amp;&amp; NF&gt;=3)print $3; exit }
  }'"'"' '$_list

echo ""
echo "== TODAY MENU =="
echo "[R]un (번호로 실행) / [A]dd (등록) / [E]dit / [Q]uit  [Enter=R]"
echo ""
_jlist
echo ""
echo -n "Action [R/A/E/Q]: "
set act = "$&lt;"
if ( "$act" == "" ) set act = "R"
set act = `echo "$act" | tr '[:lower:]' '[:upper:]'`

if ( "$act" == "E" ) then
  set ed = "$EDITOR"
  if ( "$ed" == "" ) set ed = "vi"
  $ed "$_list"
  echo "편집 완료."
  goto END
else if ( "$act" == "A" ) then
  echo -n "Label (띄어쓰기 가능, '|' 금지): "
  set lab = "$&lt;"
  if ( "$lab" == "" ) then
    echo "취소: 라벨이 비어있음."
    goto END
  endif
  if ( "$lab" =~ "*|*" ) then
    echo "취소: '|' 문자는 사용할 수 없음."
    goto END
  endif

  echo -n "Absolute path (비어있으면 현재 경로 사용): "
  set dir = "$&lt;"
  if ( "$dir" == "" ) set dir = "$cwd"
  # 상대경로면 절대경로로 보정
  if ( "$dir" !~ "/*" ) set dir = "$cwd/$dir"
  if ( ! -d "$dir" ) then
    echo -n "디렉터리가 없습니다. 만들까요? [y/N]: "
    set ans = "$&lt;"
    if ( "$ans" == "y" || "$ans" == "Y" ) then
      mkdir -p "$dir"
    else
      echo "취소."
      goto END
    endif
  endif

  echo -n "Commands (옵션, 여러 개는 ';'로 연결): "
  set cmd = "$&lt;"

  # 줄 추가
  if ( "$cmd" == "" ) then
    echo "$lab | $dir |" &gt;&gt; "$_list"
  else
    echo "$lab | $dir | $cmd" &gt;&gt; "$_list"
  endif
  echo "등록 완료:"
  echo "  $lab | $dir | $cmd"
  echo ""
  echo "지금 실행할까요? [y/N]: "
  set runnow = "$&lt;"
  if ( "$runnow" != "y" &amp;&amp; "$runnow" != "Y" ) goto END

  # 방금 추가한 항목 번호 계산
  set idx = `_jlist | wc -l`
  # fallthrough to 실행
  goto RUN

else if ( "$act" == "R" ) then
  echo -n "실행할 번호: "
  set idx = "$&lt;"
  if ( "$idx" == "" ) then
    echo "취소: 번호가 비어있음."
    goto END
  endif
  if ( "$idx" !~ "^[0-9][0-9]*$" ) then
    echo "취소: 숫자를 입력하세요."
    goto END
  endif
  # 실행으로 이동
  goto RUN

else
  echo "종료."
  goto END
endif

RUN:
# 필드 추출
set label = "`_jget $idx 1`"
set dest  = "`_jget $idx 2`"
set cmds  = "`_jget $idx 3`"

if ( "$label" == "" || "$dest" == "" ) then
  echo "해당 번호를 찾을 수 없습니다."
  goto END
endif
if ( ! -d "$dest" ) then
  echo "경로가 없습니다: $dest"
  goto END
endif

# 현재 셸에서 이동 + (있으면) 명령 실행
cd "$dest"
if ( "$cmds" != "" ) then
  echo "% 실행: $cmds"
  eval "$cmds"
endif
echo "% 위치: $cwd  (라벨: $label)"
# 스크립트 종료 후에도 현재 셸은 계속 유지됨(이 파일은 source로 불러야 함)

END:
</code></pre></div></div>

<h3 id="꼭-이렇게-실행하세요-현재-셸-유지">꼭 이렇게 실행하세요 (현재 셸 유지)</h3>

<p><code class="language-plaintext highlighter-rouge">.tcshrc</code>에 단축키:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

alias jm 'source ~/Work/10_Today/jmenu.csh'
</code></pre></div></div>

<p>이후:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

jm         # 메뉴 표시 → Action 입력 → 번호 선택 → 실행 → 셸 유지
</code></pre></div></div>

<hr />

<h2 id="사용-예-venvconda">사용 예 (venv/conda)</h2>

<ul>
  <li>
    <p>venv 활성화 후 실행:</p>

    <ul>
      <li>Commands: <code class="language-plaintext highlighter-rouge">source .venv/bin/activate.csh; ./scripts/run.sh</code></li>
    </ul>
  </li>
  <li>
    <p>conda:</p>

    <ul>
      <li>Commands: <code class="language-plaintext highlighter-rouge">source ~/miniconda3/etc/profile.d/conda.csh; conda activate myenv; ./scripts/run.sh</code></li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="포인트-중요">포인트 (중요)</h2>

<ul>
  <li>
    <p><strong>반드시<code class="language-plaintext highlighter-rouge">source</code>로 실행</strong>(<code class="language-plaintext highlighter-rouge">alias jm 'source ...'</code>) → 현재 셸에서 <code class="language-plaintext highlighter-rouge">cd</code>/환경 변경이 살아있음.</p>
  </li>
  <li>
    <p>번호 선택은 <strong>주석( # )과 빈 줄 제외</strong> 순서로 자동 번호가 매겨집니다.</p>
  </li>
  <li>
    <p>등록(Add)도 <strong>질문→답</strong> 형식으로 진행하고, 끝나면 즉시 실행할지 물어봐요.</p>
  </li>
  <li>
    <p>경로에 공백/세미콜론이 있으면 <strong>따옴표</strong> 로 감싸주세요.</p>
  </li>
</ul>

<p>원하면 이 러너에 <strong>삭제/이동(번호 기반 재정렬)</strong> , <strong>fzf 선택 지원</strong> 도 추가해 줄 수 있어.</p>

<p class="chat--user">

alias _jlist 에서부터 unmatched "'" 뜨고 종료돼. 좀 쉽게 하는 법 없나 파이썬 같은걸로

</p>

<p>맞아, tcsh 따옴표 지옥 피하려면 Python으로 “번호 선택/등록 → 현재 셸에서 cd+실행” 흐름을 만드는 게 제일 깔끔해. 아래 그대로 쓰면 돼.</p>

<hr />

<h1 id="0-핵심-아이디어">0) 핵심 아이디어</h1>

<ul>
  <li>
    <p><strong>Python</strong> 스크립트가 메뉴/등록을 처리하고, 실행할 <strong>tcsh 코드</strong> 를 <code class="language-plaintext highlighter-rouge">~/.cache/jmenu_out.csh</code>에 써둠</p>
  </li>
  <li>
    <p>현재 셸에서는 <strong>작은 래퍼(jm.csh)를<code class="language-plaintext highlighter-rouge">source</code></strong> 해서 그 코드를 실행 → <strong>cd/venv 활성화가 현재 셸에 그대로 반영</strong></p>
  </li>
</ul>

<hr />

<h1 id="1-리스트-파일-포맷-그대로-사용">1) 리스트 파일 포맷 (그대로 사용)</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/10_Today/shortcuts.list</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># label | abs path | commands (optional, 여러 개는 ; 로 연결)
My App (venv run) | /Users/me/Work/20_Projects/PRJ-2025-001_app | source .venv/bin/activate.csh; ./scripts/run.sh
Just Go           | /Users/me/Work/26_Datasets/datasets/ad_events/v2025.0826/processed |
</code></pre></div></div>

<hr />

<h1 id="2-python-메뉴등록-스크립트">2) Python 메뉴/등록 스크립트</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/10_Today/jmenu.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">sys</span>

<span class="n">LIST_PATH</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">'</span><span class="s">~/Work/10_Today/shortcuts.list</span><span class="sh">'</span><span class="p">)</span>
<span class="n">OUT_PATH</span>  <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">'</span><span class="s">~/.cache/jmenu_out.csh</span><span class="sh">'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">load_items</span><span class="p">():</span>
    <span class="n">items</span><span class="o">=</span><span class="p">[]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">LIST_PATH</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">items</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">LIST_PATH</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">s</span><span class="o">=</span><span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span> <span class="ow">or</span> <span class="n">s</span><span class="p">.</span><span class="nf">lstrip</span><span class="p">().</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">'</span><span class="s">#</span><span class="sh">'</span><span class="p">):</span> <span class="k">continue</span>
            <span class="n">parts</span><span class="o">=</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">|</span><span class="sh">'</span><span class="p">)]</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span><span class="o">&lt;</span><span class="mi">2</span><span class="p">:</span> <span class="k">continue</span>
            <span class="n">label</span><span class="o">=</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="n">path</span><span class="o">=</span><span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">cmd</span><span class="o">=</span><span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span><span class="o">&gt;=</span><span class="mi">3</span> <span class="k">else</span> <span class="sh">''</span>
            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">:</span><span class="n">label</span><span class="p">,</span><span class="sh">'</span><span class="s">path</span><span class="sh">'</span><span class="p">:</span><span class="n">path</span><span class="p">,</span><span class="sh">'</span><span class="s">cmd</span><span class="sh">'</span><span class="p">:</span><span class="n">cmd</span><span class="p">})</span>
    <span class="k">return</span> <span class="n">items</span>

<span class="k">def</span> <span class="nf">print_menu</span><span class="p">(</span><span class="n">items</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">== TODAY MENU ==</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">items</span><span class="p">:</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">(no entries yet)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">it</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">items</span><span class="p">,</span><span class="mi">1</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">i</span><span class="si">:</span><span class="mi">2</span><span class="n">d</span><span class="si">}</span><span class="s">) </span><span class="si">{</span><span class="n">it</span><span class="p">[</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="mi">28</span><span class="si">}</span><span class="s"> -&gt; </span><span class="si">{</span><span class="n">it</span><span class="p">[</span><span class="sh">'</span><span class="s">path</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">write_out</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">OUT_PATH</span><span class="p">),</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">OUT_PATH</span><span class="p">,</span> <span class="sh">'</span><span class="s">w</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span>
        <span class="n">w</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="s"># generated by jmenu.py</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">w</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">cd </span><span class="sh">"</span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="sh">"</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">w</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">cmd</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">()</span> <span class="o">+</span> <span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[jmenu] wrote </span><span class="si">{</span><span class="n">OUT_PATH</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">save_item</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">cmd</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">LIST_PATH</span><span class="p">),</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">LIST_PATH</span><span class="p">,</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">w</span><span class="p">:</span>
        <span class="n">w</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">label</span><span class="si">}</span><span class="s"> | </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="s"> | </span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">items</span><span class="o">=</span><span class="nf">load_items</span><span class="p">()</span>
    <span class="nf">print_menu</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
    <span class="n">act</span><span class="o">=</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Action [R]un / [A]dd / [E]dit / [Q]uit (default R): </span><span class="sh">"</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">upper</span><span class="p">()</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">R</span><span class="sh">'</span>
    <span class="k">if</span> <span class="n">act</span><span class="o">==</span><span class="sh">'</span><span class="s">Q</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="n">act</span><span class="o">==</span><span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">editor</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">EDITOR</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">vi</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">execvp</span><span class="p">(</span><span class="n">editor</span><span class="p">,[</span><span class="n">editor</span><span class="p">,</span><span class="n">LIST_PATH</span><span class="p">])</span>

    <span class="k">if</span> <span class="n">act</span><span class="o">==</span><span class="sh">'</span><span class="s">A</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">lab</span><span class="o">=</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Label: </span><span class="sh">"</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">lab</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">|</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">lab</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Invalid label.</span><span class="sh">"</span><span class="p">);</span> <span class="k">return</span> <span class="mi">1</span>
        <span class="n">default_pwd</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">'</span><span class="s">PWD</span><span class="sh">'</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="nf">getcwd</span><span class="p">())</span>
        <span class="n">dir_</span><span class="o">=</span><span class="nf">input</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Absolute path [</span><span class="si">{</span><span class="n">default_pwd</span><span class="si">}</span><span class="s">]: </span><span class="sh">"</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span> <span class="ow">or</span> <span class="n">default_pwd</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isabs</span><span class="p">(</span><span class="n">dir_</span><span class="p">):</span> <span class="n">dir_</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">dir_</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">dir_</span><span class="p">):</span>
            <span class="n">mk</span><span class="o">=</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Directory not found. Create? [y/N]: </span><span class="sh">"</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">mk</span><span class="o">==</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">dir_</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span> <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Canceled.</span><span class="sh">"</span><span class="p">);</span> <span class="k">return</span> <span class="mi">1</span>
        <span class="n">cmd</span><span class="o">=</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Commands (optional; use </span><span class="sh">'</span><span class="s">;</span><span class="sh">'</span><span class="s"> to chain): </span><span class="sh">"</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
        <span class="nf">save_item</span><span class="p">(</span><span class="n">lab</span><span class="p">,</span> <span class="n">dir_</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Added.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Run now? [y/N]: </span><span class="sh">"</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span><span class="o">==</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">:</span>
            <span class="nf">write_out</span><span class="p">(</span><span class="n">dir_</span><span class="p">,</span> <span class="n">cmd</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">0</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">items</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">No entries to run.</span><span class="sh">"</span><span class="p">);</span> <span class="k">return</span> <span class="mi">1</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">idx</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="nf">input</span><span class="p">(</span><span class="sh">"</span><span class="s">Number to run: </span><span class="sh">"</span><span class="p">).</span><span class="nf">strip</span><span class="p">())</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Invalid number.</span><span class="sh">"</span><span class="p">);</span> <span class="k">return</span> <span class="mi">1</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;=</span><span class="n">idx</span><span class="o">&lt;=</span><span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Out of range.</span><span class="sh">"</span><span class="p">);</span> <span class="k">return</span> <span class="mi">1</span>
    <span class="n">it</span><span class="o">=</span><span class="n">items</span><span class="p">[</span><span class="n">idx</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">path</span><span class="o">=</span><span class="n">it</span><span class="p">[</span><span class="sh">'</span><span class="s">path</span><span class="sh">'</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isabs</span><span class="p">(</span><span class="n">path</span><span class="p">):</span> <span class="n">path</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="nf">write_out</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">it</span><span class="p">[</span><span class="sh">'</span><span class="s">cmd</span><span class="sh">'</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">→ </span><span class="si">{</span><span class="n">it</span><span class="p">[</span><span class="sh">'</span><span class="s">label</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">0</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="3-tcsh-래퍼-현재-셸에-반영">3) tcsh 래퍼 (현재 셸에 반영)</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/10_Today/jm.csh</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# 현재 셸에서 source 해야 cd/환경이 유지됨
python3 ~/Work/10_Today/jmenu.py
if ( -r ~/.cache/jmenu_out.csh ) then
  source ~/.cache/jmenu_out.csh
endif
</code></pre></div></div>

<p>권한:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

chmod +x ~/Work/10_Today/jm.csh
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">.tcshrc</code>에 단축키:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

alias jm 'source ~/Work/10_Today/jm.csh'
</code></pre></div></div>

<hr />

<h1 id="4-사용법">4) 사용법</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jm          # 메뉴가 뜸 → R/A/E 선택 → 번호 입력 → 실행
</code></pre></div></div>

<ul>
  <li>
    <p><strong>등록(Add)</strong> : 라벨/경로/커맨드 차례로 묻고 저장. “Run now?”에 <code class="language-plaintext highlighter-rouge">y</code>면 즉시 실행 스크립트가 만들어져 현재 셸에 반영됨.</p>
  </li>
  <li>
    <p><strong>실행(Run)</strong> : 번호만 넣으면 됨.</p>
  </li>
  <li>
    <p><strong>유지</strong> : 별도 <code class="language-plaintext highlighter-rouge">exec tcsh -i</code> 필요 없음. “현재 셸에서 source” 하므로 venv/conda 활성화가 그대로 남아있음.</p>
  </li>
</ul>

<blockquote>
  <p>venv 예시 커맨드: <code class="language-plaintext highlighter-rouge">source .venv/bin/activate.csh; ./scripts/run.sh</code><br />
 conda 예시: <code class="language-plaintext highlighter-rouge">source ~/miniconda3/etc/profile.d/conda.csh; conda activate myenv; ./scripts/run.sh</code></p>
</blockquote>

<hr />

<p>이렇게 하면 tcsh 인용/따옴표 문제 없이 <strong>번호 선택/등록</strong> 이 깔끔하게 돌아가고, 네가 원한 <strong>“작업 폴더로 이동 → 명령 실행 → 셸 유지”</strong> 흐름을 그대로 쓸 수 있어.</p>

<p class="chat--user">

unmatched error는 왜 뜬걸까

</p>

<p>맞아요—그 “unmatched ' ” 에러는 <strong>tcsh의 따옴표(quote) 규칙</strong> 때문에 납니다.</p>

<h2 id="왜-그랬냐면-핵심">왜 그랬냐면 (핵심)</h2>

<ul>
  <li>
    <p>보통 <code class="language-plaintext highlighter-rouge">alias name '...명령...'</code> 처럼 <strong>단일 인용부호(')</strong>로 alias 본문을 감싸요.</p>
  </li>
  <li>
    <p>그런데 alias 본문 안에서 또 <code class="language-plaintext highlighter-rouge">awk -F'\|'</code> 같이 <strong>다시 ' 를 사용</strong> 하면,<br />
tcsh는 <strong>바깥 ' 가 거기서 닫혔다고 해석</strong> 합니다.<br />
→ 결과적으로 <strong>열린 ' 와 닫힌 ' 의 짝이 안 맞아</strong> “unmatched '”가 터져요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tcsh</code>는 <strong>단일 인용부호를 내부에서 이스케이프할 수 없습니다.</strong><br />
(sh 계열에서 쓰는 <code class="language-plaintext highlighter-rouge">'\''</code> 같은 꼼수도 tcsh에선 통하지 않아요.)</p>
  </li>
</ul>

<p>작은 재현 예:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

alias bad 'awk -F'\|' '{print $1}''   # ← 여기서 unmatched '
</code></pre></div></div>

<h2 id="간단한-해결법-3가지">간단한 해결법 3가지</h2>

<ol>
  <li><strong>alias 바깥을 " (이중인용부호)로 감싸고</strong> , awk 프로그램은 ' 로 유지
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh
     
alias _jlist "awk -F'\\|' 'BEGIN{i=0} {print $0}' $_list"
</code></pre></div>    </div>

    <ul>
      <li>
        <p>바깥은 <code class="language-plaintext highlighter-rouge">"</code> 이라 내부의 <code class="language-plaintext highlighter-rouge">'...'</code> 가 <strong>문자 그대로</strong> awk로 전달됩니다.</p>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td><code class="language-plaintext highlighter-rouge">\\|</code> 는 awk로 <code class="language-plaintext highlighter-rouge">\|</code>가 전달되도록 한 이스케이프입니다(필드 구분자에 ‘</td>
              <td>’ literal).</td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li><strong>awk 스크립트를 파일로 분리</strong> (가장 안전)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh
     
# ~/Work/10_Today/jlist.awk
BEGIN { i=0 }
$0 !~ /^[[:space:]]*#/ &amp;&amp; NF&gt;=2 {
  gsub(/^[ \t]+|[ \t]+$/,"",$1); gsub(/^[ \t]+|[ \t]+$/,"",$2);
  i++; printf("%2d) %-28s -&gt; %s\n", i, $1, $2)
}
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh
     
alias _jlist "awk -F'\\|' -f ~/Work/10_Today/jlist.awk $_list"
</code></pre></div>    </div>
  </li>
  <li><strong>(추천) 아예 tcsh를 안 건드리고 Python으로 처리</strong><br />
이미 드린 <code class="language-plaintext highlighter-rouge">jmenu.py + jm.csh</code> 방식이 이 문제를 원천 차단합니다.<br />
(파싱/등록/번호 선택은 파이썬이 하고, <strong>현재 셸</strong> 반영은 <code class="language-plaintext highlighter-rouge">source ~/.cache/jmenu_out.csh</code>로 해결)</li>
</ol>

<h2 id="추가로-흔한-함정">추가로 흔한 함정</h2>

<ul>
  <li>
    <p><strong>history 확장(!)</strong> : tcsh는 <code class="language-plaintext highlighter-rouge">"</code> 안에서도 <code class="language-plaintext highlighter-rouge">!</code>를 히스토리로 해석합니다.<br />
awk 코드에 <code class="language-plaintext highlighter-rouge">!</code>가 들어간다면 alias 바깥을 <code class="language-plaintext highlighter-rouge">'...'</code>로, awk 본문은 <code class="language-plaintext highlighter-rouge">-f 파일</code>로 빼는 게 안전합니다.</p>
  </li>
  <li>
    <p><strong>backslash 처리</strong> : <code class="language-plaintext highlighter-rouge">"</code> 안에서는 <code class="language-plaintext highlighter-rouge">\</code>, <code class="language-plaintext highlighter-rouge">"</code>, <code class="language-plaintext highlighter-rouge">$</code>, <code class="language-plaintext highlighter-rouge">!</code>만 특별 취급되고 나머지 <code class="language-plaintext highlighter-rouge">\</code>는 그대로 전달됩니다.<br />
그래서 <code class="language-plaintext highlighter-rouge">-F"\\|"</code>처럼 <strong>두 번</strong> 적어야 awk로 <code class="language-plaintext highlighter-rouge">\|</code>가 전달돼요.</p>
  </li>
</ul>

<hr />

<h3 id="정리">정리</h3>

<ul>
  <li>
    <p>에러 원인: <strong>단일 인용부호를 중첩</strong> 해서 tcsh 파서가 문자열 경계를 오해했기 때문.</p>
  </li>
  <li>
    <p>해결: <strong>바깥은 "…", 안쪽 awk는 '…'</strong> 패턴으로 바꾸거나, <strong>awk 스크립트를 파일로 분리</strong> ,<br />
또는 <strong>Python 러너</strong> 를 사용해 quotes 지옥을 회피하세요.</p>
  </li>
</ul>

<p>원하면, 기존 tcsh-only 버전을 <strong>문자열 안전하게</strong> 고친 <code class="language-plaintext highlighter-rouge">_jlist</code>/<code class="language-plaintext highlighter-rouge">_jget</code> alias 전체를 만들어서 드릴게.</p>]]></content><author><name>hvppyarchive</name></author><category term="misc" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Mini LLM 스크립트 예시</title><link href="https://hvppyarchive.github.io/llm/mini-llm-script/" rel="alternate" type="text/html" title="Mini LLM 스크립트 예시" /><published>2025-08-27T10:12:37+09:00</published><updated>2025-08-27T10:12:37+09:00</updated><id>https://hvppyarchive.github.io/llm/mini-llm-script</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/mini-llm-script/"><![CDATA[<p class="chat--user">

Developer: # 목적 - 셀 환경에서 실행 가능한, 간단하고 유용한 LLM 스크립트(예: one-liner 또는 짧은 커맨드)를 작성하려고 합니다. - LLM에게 간단한 질문을 던지는 방식으로 활용하고자 합니다. # 요청 사항 - 우수한 예시로 어떤 LLM 스크립트들이 있는지 궁금합니다. - 셀 환경에서 손쉽게 실행 가능하며, 실제 실무에 도움이 되는 스크립트 사용 예시를 알려주세요. # 예시(예상) - 예: 번역, 요약, 코드 설명 등 - 예: 특정 파일 내 주요 내용 요약 스크립트, 자동 코드 문서화 등 시작 전, 다음과 같은 체크리스트(3-7개)를 간결하게 작성하세요. 구현 세부 내용이 아닌 개념 단계로 구성합니다. 스크립트나 코드 예시가 포함된다면, 다음을 명확히 하세요: (1) 전제 가정 명시, (2) 재현 가능한 예시 또는 테스트 케이스 포함, (3) 일관된 스타일 적용. 각 스크립트 예시에는 목적 및 입력/출력 설명을 간단히 덧붙이세요.

</p>

<p>아래 내용은 “셀에서 바로 쓰는, 짧고 유용한 LLM 스크립트”에 초점을 맞춰 정리했습니다. (요청하신 대로, 단계별로 사고하고 구성했어요—다만 내부 추론 전개 대신 실행 가능한 절차로 분해해 드립니다.)</p>

<h1 id="시작-전-체크리스트-개념">시작 전 체크리스트 (개념)</h1>

<ol>
  <li>
    <p><strong>목적 고정</strong> : 요약/번역/설명/생성 등 각 스크립트의 1문장 목표를 먼저 정하세요.</p>
  </li>
  <li>
    <p><strong>입력 경계</strong> : 표준입력/파일/<code class="language-plaintext highlighter-rouge">git diff</code> 등 입력 경로를 명확히 하고, 길면 잘라서 보내세요(예: <code class="language-plaintext highlighter-rouge">head -c 12000</code>).</p>
  </li>
  <li>
    <p><strong>출력 약속</strong> : 결과 형식을 미리 정하세요(한글/불릿/JSON 등) → 파이프라인에서 <code class="language-plaintext highlighter-rouge">jq</code>, <code class="language-plaintext highlighter-rouge">sed</code>, <code class="language-plaintext highlighter-rouge">awk</code>로 후처리.</p>
  </li>
  <li>
    <p><strong>일관 프롬프트</strong> : 톤/언어/길이/포맷을 프롬프트 초반에 고정(“한국어, 핵심만, 5줄 불릿” 등).</p>
  </li>
  <li>
    <p><strong>재현성</strong> : 예시는 <strong>가정(백엔드/모델/키)</strong>를 먼저 밝히고, <strong>테스트 케이스</strong> 를 포함합니다.</p>
  </li>
  <li>
    <p><strong>보안/비용</strong> : 키는 환경변수로, 대용량은 로컬 요약→핵심만 업로드, 민감 데이터는 로컬 모델(Ollama) 고려.</p>
  </li>
  <li>
    <p><strong>장애 대비</strong> : 실패 시 재시도/타임아웃/최대 토큰/온도값(=랜덤성) 같은 기본 파라미터를 명시.</p>
  </li>
</ol>

<hr />

<h2 id="전제공통">전제(공통)</h2>

<ul>
  <li>
    <p><strong>OpenAI API 사용 시</strong> : <code class="language-plaintext highlighter-rouge">export OPENAI_API_KEY=...</code> 와 <code class="language-plaintext highlighter-rouge">export OPENAI_MODEL=gpt-5</code> (계정에서 사용 가능한 최신 모델로 지정). 엔드포인트는 <strong>Responses API</strong> <code class="language-plaintext highlighter-rouge">/v1/responses</code> 입니다. <a href="https://platform.openai.com/docs/api-reference/responses?utm_source=chatgpt.com">OpenAI 플랫폼+3</a></p>
  </li>
  <li>
    <p><strong>로컬 대안(Ollama)</strong> : <code class="language-plaintext highlighter-rouge">ollama</code> 설치 후 <code class="language-plaintext highlighter-rouge">ollama run &lt;모델&gt;</code> 또는 REST <code class="language-plaintext highlighter-rouge">POST :11434/api/generate</code>. 예: <code class="language-plaintext highlighter-rouge">codellama</code>, <code class="language-plaintext highlighter-rouge">mistral:instruct</code>, <code class="language-plaintext highlighter-rouge">llama2:chat</code>. <a href="https://ollama.com/library/codellama?utm_source=chatgpt.com">Ollama+4</a></p>
  </li>
</ul>

<blockquote>
  <p>아래 모든 스크립트는 <strong>OpenAI 버전(curl)</strong> 과 <strong>Ollama 버전</strong> 을 나란히 제공합니다.<br />
 <code class="language-plaintext highlighter-rouge">jq</code>로 결과를 뽑을 땐 신/구 응답 포맷 호환을 위해 <code class="language-plaintext highlighter-rouge">output_text</code> → <code class="language-plaintext highlighter-rouge">choices[0].message.content</code> 순서로 폴백합니다.</p>
</blockquote>

<hr />

<h1 id="1-단문-질의응답ad-hoc-qa">1) 단문 질의응답(Ad-hoc Q&amp;A)</h1>

<p><strong>목적</strong> : 빠른 질문→짧은 답.<br />
<strong>입력/출력</strong> : <code class="language-plaintext highlighter-rouge">echo "질문"</code> → 한글 5문장 이내 답.<br />
<strong>가정</strong> : 작은 프롬프트(수백~수천 자).<br />
<strong>테스트</strong> : “PostgreSQL 인덱스가 동작하는 핵심 원리를 5문장으로.”</p>

<p><strong>OpenAI</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'한국어로 간결히. PostgreSQL 인덱스 핵심 원리를 5문장으로 요약해줘.'</span> | <span class="se">\</span>
curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> @- | jq <span class="nt">-r</span> <span class="s1">'.output_text // .choices[0].message.content'</span>
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'한국어로 간결히. PostgreSQL 인덱스 핵심 원리를 5문장으로 요약해줘.'</span> | <span class="se">\</span>
curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"codellama:7b-instruct","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span>
</code></pre></div></div>

<p>(Responses API 개요/예시는 공식 문서 참고. <a href="https://platform.openai.com/docs/api-reference/responses?utm_source=chatgpt.com">OpenAI 플랫폼+1</a>)</p>

<hr />

<h1 id="2-번역one-liner-번역-파이프">2) 번역(one-liner 번역 파이프)</h1>

<p><strong>목적</strong> : 영어↔한국어 문단 번역.<br />
<strong>입력/출력</strong> : 파일/표준입력 → 원문 보존 없이 번역문만.<br />
<strong>가정</strong> : 짧은 텍스트(긴 경우 1만~2만 바이트로 잘라 전송).<br />
<strong>테스트</strong> : 아래 <code class="language-plaintext highlighter-rouge">sample_en.txt</code> 생성 후 실행.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> sample_en.txt <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">TXT</span><span class="sh">'
PostgreSQL uses B-tree indexes by default. They keep keys sorted and enable fast lookups.
</span><span class="no">TXT
</span><span class="nb">head</span> <span class="nt">-c</span> 12000 sample_en.txt | <span class="nb">sed</span> <span class="s1">'1s/^/다음 영어를 한국어로 자연스럽게 번역: \n/'</span> | <span class="se">\</span>
curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> @- | jq <span class="nt">-r</span> <span class="s1">'.output_text // .choices[0].message.content'</span>
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">head</span> <span class="nt">-c</span> 12000 sample_en.txt | <span class="nb">sed</span> <span class="s1">'1s/^/다음 영어를 한국어로 자연스럽게 번역: \n/'</span> | <span class="se">\</span>
curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"mistral:instruct","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span>
</code></pre></div></div>

<hr />

<h1 id="3-파일-요약불릿-7줄">3) 파일 요약(불릿 7줄)</h1>

<p><strong>목적</strong> : 긴 텍스트 요약(회의록/리포트).<br />
<strong>입력/출력</strong> : 텍스트 파일 → 7불릿 핵심 포인트.<br />
<strong>가정</strong> : 문서가 길면 <strong>부분 요약→최종 요약</strong>(map-reduce).<br />
<strong>테스트</strong> : <code class="language-plaintext highlighter-rouge">notes.txt</code> 생성.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> notes.txt <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">TXT</span><span class="sh">'
We discussed migration steps, risks (downtime), and rollout plan with canary deployments...
</span><span class="no">TXT
</span><span class="nb">head</span> <span class="nt">-c</span> 12000 notes.txt | <span class="nb">sed</span> <span class="s1">'1s/^/[지침] 한국어, 불릿 7개, 명사형 간결 요약.\n[본문]\n/'</span> | <span class="se">\</span>
curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> @- | jq <span class="nt">-r</span> <span class="s1">'.output_text // .choices[0].message.content'</span>
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">head</span> <span class="nt">-c</span> 12000 notes.txt | <span class="nb">sed</span> <span class="s1">'1s/^/[지침] 한국어, 불릿 7개, 명사형 간결 요약.\n[본문]\n/'</span> | <span class="se">\</span>
curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"llama2:chat","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span>
</code></pre></div></div>

<blockquote>
  <p>대용량/비텍스트(PDF 등)는 파일 업로드+참조 방식도 있습니다(Responses API + Files). <a href="https://platform.openai.com/docs/guides/pdf-files?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
</blockquote>

<hr />

<h1 id="4-코드-설명--개선-제안">4) 코드 설명 + 개선 제안</h1>

<p><strong>목적</strong> : 코드 스니펫 해설 + 리팩터링 팁.<br />
<strong>입력/출력</strong> : <code class="language-plaintext highlighter-rouge">example.py</code> → “설명/복잡도/리팩터링” 3섹션.<br />
<strong>가정</strong> : 짧은 함수 단위.<br />
<strong>테스트</strong> : 파일 생성.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> example.py <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">PY</span><span class="sh">'
def fib(n):
    if n &lt;= 1: return n
    return fib(n-1)+fib(n-2)
</span><span class="no">PY
</span><span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"[지침] 한국어, 3섹션(설명/복잡도/리팩터링)."</span><span class="p">;</span> 
  <span class="nb">echo</span> <span class="s2">"[코드]"</span><span class="p">;</span> <span class="nb">cat </span>example.py<span class="p">;</span>
<span class="o">}</span> | curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> @- | jq <span class="nt">-r</span> <span class="s1">'.output_text // .choices[0].message.content'</span>
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"[지침] 한국어, 3섹션(설명/복잡도/리팩터링)."</span><span class="p">;</span> 
  <span class="nb">echo</span> <span class="s2">"[코드]"</span><span class="p">;</span> <span class="nb">cat </span>example.py<span class="p">;</span>
<span class="o">}</span> | curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"codellama:7b-instruct","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span>
</code></pre></div></div>

<p>(Code Llama 계열 사용 예시와 프롬프트 팁 참고. <a href="https://ollama.com/library/codellama?utm_source=chatgpt.com">Ollama+1</a>)</p>

<hr />

<h1 id="5-git-diff--컨벤셔널-커밋-메시지">5) <code class="language-plaintext highlighter-rouge">git diff</code> → 컨벤셔널 커밋 메시지</h1>

<p><strong>목적</strong> : 변경점에서 커밋 메시지 자동 생성.<br />
<strong>입력/출력</strong> : <code class="language-plaintext highlighter-rouge">git diff</code> → <code class="language-plaintext highlighter-rouge">feat/fix/docs</code> 형식 1~3줄.<br />
<strong>가정</strong> : 워킹 디렉토리에 git 저장소.<br />
<strong>테스트</strong> : 임의 수정 후 실행.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff | <span class="nb">sed</span> <span class="s1">'1s/^/[지침] 한국어, Conventional Commits 스타일, 제목 72자 이내, 본문 1-2줄.\n[diff]\n/'</span> | <span class="se">\</span>
curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> @- | jq <span class="nt">-r</span> <span class="s1">'.output_text // .choices[0].message.content'</span>
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git diff | <span class="nb">sed</span> <span class="s1">'1s/^/[지침] 한국어, Conventional Commits 스타일, 제목 72자 이내, 본문 1-2줄.\n[diff]\n/'</span> | <span class="se">\</span>
curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"mistral:instruct","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span>
</code></pre></div></div>

<hr />

<h1 id="6-특정-파일에서-할-일-자동-추출">6) 특정 파일에서 “할 일” 자동 추출</h1>

<p><strong>목적</strong> : 문서/노트에서 TODO/액션아이템만 수집.<br />
<strong>입력/출력</strong> : 텍스트 → <code class="language-plaintext highlighter-rouge">- [ ]</code> Markdown 체크리스트.<br />
<strong>가정</strong> : 한국어 문서.<br />
<strong>테스트</strong> : <code class="language-plaintext highlighter-rouge">meeting.md</code> 생성.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> meeting.md <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">MD</span><span class="sh">'
- 마이그레이션 일정 확정 필요
- 위험 항목 점검(롤백 플랜 작성)
</span><span class="no">MD
</span><span class="o">{</span> <span class="nb">echo</span> <span class="s2">"[지침] 한국어, 문서에서 TODO를 '- [ ]' 목록으로만 추출."</span><span class="p">;</span> <span class="nb">cat </span>meeting.md<span class="p">;</span> <span class="o">}</span> | <span class="se">\</span>
curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> @- | jq <span class="nt">-r</span> <span class="s1">'.output_text // .choices[0].message.content'</span>
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span> <span class="nb">echo</span> <span class="s2">"[지침] 한국어, 문서에서 TODO를 '- [ ]' 목록으로만 추출."</span><span class="p">;</span> <span class="nb">cat </span>meeting.md<span class="p">;</span> <span class="o">}</span> | <span class="se">\</span>
curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"llama2:chat","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span>
</code></pre></div></div>

<hr />

<h1 id="7-문서-질의응답rag-lite-단일-파일">7) “문서 질의응답”(RAG-lite: 단일 파일)</h1>

<p><strong>목적</strong> : 로컬 문서 내용에 대한 질의응답.<br />
<strong>입력/출력</strong> : 파일+질문 → 근거 포함 답변(줄번호/문장).<br />
<strong>가정</strong> : 1개 파일, 짧은 컨텍스트.<br />
<strong>테스트</strong> : <code class="language-plaintext highlighter-rouge">policy.txt</code> 생성.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> policy.txt <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">TXT</span><span class="sh">'
SLA: critical fixes within 24 hours. Minor issues within 7 days.
</span><span class="no">TXT
</span><span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"[지침] 한국어, policy.txt 인용하여 답변, 근거 문장 인용 포함."</span><span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"[파일]"</span><span class="p">;</span> <span class="nb">cat </span>policy.txt<span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"[질문] Minor 이슈 대응시간은?"</span><span class="p">;</span>
<span class="o">}</span> | curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> @- | jq <span class="nt">-r</span> <span class="s1">'.output_text // .choices[0].message.content'</span>
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"[지침] 한국어, policy.txt 인용하여 답변, 근거 문장 인용 포함."</span><span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"[파일]"</span><span class="p">;</span> <span class="nb">cat </span>policy.txt<span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"[질문] Minor 이슈 대응시간은?"</span><span class="p">;</span>
<span class="o">}</span> | curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"mistral:instruct","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span>
</code></pre></div></div>

<blockquote>
  <p>더 본격적인 툴 사용/웹검색 도구 연동은 Responses API의 “도구 사용” 가이드를 참고하세요. <a href="https://platform.openai.com/docs/guides/tools?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
</blockquote>

<hr />

<h1 id="8-설명-주석docstring-자동화파이썬-예">8) “설명 주석/Docstring 자동화”(파이썬 예)</h1>

<p><strong>목적</strong> : 함수에 한국어 Docstring 부여.<br />
<strong>입력/출력</strong> : <code class="language-plaintext highlighter-rouge">*.py</code> → 패치 제안(“+++” 구문 포함).<br />
<strong>가정</strong> : 한 파일 단위.<br />
<strong>테스트</strong> : <code class="language-plaintext highlighter-rouge">utils.py</code> 생성.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> utils.py <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">PY</span><span class="sh">'
def slugify(s):
    return s.lower().replace(' ','-')
</span><span class="no">PY
</span><span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"[지침] 한국어, PEP257 스타일 Docstring 삽입용 unified diff 출력."</span><span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"[파일]"</span><span class="p">;</span> <span class="nb">cat </span>utils.py<span class="p">;</span>
<span class="o">}</span> | curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> @- | jq <span class="nt">-r</span> <span class="s1">'.output_text // .choices[0].message.content'</span> | <span class="nb">tee </span>doc.patch
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"[지침] 한국어, PEP257 스타일 Docstring 삽입용 unified diff 출력."</span><span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"[파일]"</span><span class="p">;</span> <span class="nb">cat </span>utils.py<span class="p">;</span>
<span class="o">}</span> | curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"codellama:7b-instruct","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span> | <span class="nb">tee </span>doc.patch
</code></pre></div></div>

<hr />

<h1 id="9-텍스트--json-분류-간단-보장-jq-검증">9) “텍스트 → JSON 분류” (간단 보장, <code class="language-plaintext highlighter-rouge">jq</code> 검증)</h1>

<p><strong>목적</strong> : 임의 문장을 카테고리/긴급도 등으로 JSON 라벨링.<br />
<strong>입력/출력</strong> : 텍스트 → <code class="language-plaintext highlighter-rouge">{"category":"...","priority":"..."}</code><br />
<strong>가정</strong> : 엄격 JSON이 필요하면 <strong>Structured Outputs</strong> 로 JSON Schema를 적용(아래 주석 링크).<br />
<strong>테스트</strong> : 3줄 입력.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> inbox.txt <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">TXT</span><span class="sh">'
DB 연결 오류가 자주 발생함
문서 오탈자 수정 요청
신규 대시보드 제안
</span><span class="no">TXT

</span><span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> line<span class="p">;</span> <span class="k">do
  </span><span class="nb">printf</span> <span class="s1">'다음 문장을 JSON으로 분류해. {"category":("bug"|"docs"|"feature"),"priority":("high"|"low")}\n문장: %s\n'</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | <span class="se">\</span>
  curl <span class="nt">-s</span> https://api.openai.com/v1/responses <span class="se">\</span>
    <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
    <span class="nt">-d</span> @- | jq <span class="nt">-re</span> <span class="s1">'.output_text // .choices[0].message.content | fromjson'</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"⚠️ JSON 실패: </span><span class="nv">$line</span><span class="s2">"</span>
<span class="k">done</span> &lt; inbox.txt
</code></pre></div></div>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while </span><span class="nv">IFS</span><span class="o">=</span> <span class="nb">read</span> <span class="nt">-r</span> line<span class="p">;</span> <span class="k">do
  </span><span class="nb">printf</span> <span class="s1">'다음 문장을 JSON으로 분류해. {"category":("bug"|"docs"|"feature"),"priority":("high"|"low")}\n문장: %s\n'</span> <span class="s2">"</span><span class="nv">$line</span><span class="s2">"</span> | <span class="se">\</span>
  curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
    <span class="nt">-d</span> <span class="s1">'{"model":"mistral:instruct","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-re</span> <span class="s1">'.response | fromjson'</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">"⚠️ JSON 실패: </span><span class="nv">$line</span><span class="s2">"</span>
<span class="k">done</span> &lt; inbox.txt
</code></pre></div></div>

<blockquote>
  <p><strong>강한 JSON 보장</strong> 이 필요하면 Responses API의 <strong>Structured Outputs</strong>(JSON Schema 강제)을 사용하세요. <a href="https://platform.openai.com/docs/guides/structured-outputs?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
</blockquote>

<hr />

<h1 id="10-테스트케이스-요약-보고서코드블록만-모으기">10) “테스트케이스 요약 보고서”(코드블록만 모으기)</h1>

<p><strong>목적</strong> : 로그/리포트에서 코드블록만 추출→핵심 요약.<br />
<strong>입력/출력</strong> : md/로그 → 실패 사례 위주 요약(불릿 5개).<br />
<strong>가정</strong> : 마크다운 로그.<br />
<strong>테스트</strong> : <code class="language-plaintext highlighter-rouge">report.md</code> 생성.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> <span class="o">&gt;</span> report.md <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">MD</span><span class="sh">'
### Case A
</span></code></pre></div></div>
<p>FAIL: timeout</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### Case B
</code></pre></div></div>
<p>bash</p>

<p>OK</p>

<pre><code class="language-MD">{  
echo "[지침] 한국어, 코드블록만 스캔→실패/원인/재현 단계를 불릿 5개로.";  
echo "[본문]"; cat report.md;  
} | curl -s https://api.openai.com/v1/responses   
-H "Authorization: Bearer $OPENAI_API_KEY" -H "Content-Type: application/json"   
-d @- | jq -r '.output_text // .choices[0].message.content'
</code></pre>
<p>bash</p>

<p><strong>Ollama</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">{</span>
  <span class="nb">echo</span> <span class="s2">"[지침] 한국어, 코드블록만 스캔→실패/원인/재현 단계를 불릿 5개로."</span><span class="p">;</span>
  <span class="nb">echo</span> <span class="s2">"[본문]"</span><span class="p">;</span> <span class="nb">cat </span>report.md<span class="p">;</span>
<span class="o">}</span> | curl <span class="nt">-s</span> http://localhost:11434/api/generate <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{"model":"llama2:chat","prompt": "'</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> -<span class="si">)</span><span class="s2">"</span><span class="s1">'"}'</span> | jq <span class="nt">-r</span> <span class="s1">'.response'</span>

</code></pre></div></div>
<hr />

<h2 id="스타일운영-팁">스타일·운영 팁</h2>

<ul>
  <li>
    <p><strong>프롬프트 상단 고정</strong> : <code class="language-plaintext highlighter-rouge">[지침] 언어/톤/형식</code> → <code class="language-plaintext highlighter-rouge">[본문]</code> → <code class="language-plaintext highlighter-rouge">[질문]</code> 순서로 일관.</p>
  </li>
  <li>
    <p><strong>온도/토큰</strong> : 일관성 필요 시 온도 낮추기(모델 옵션: OpenAI <code class="language-plaintext highlighter-rouge">temperature</code>, Ollama <code class="language-plaintext highlighter-rouge">options.temperature</code>).</p>
  </li>
  <li>
    <p><strong>길이 제어</strong> : “최대 N줄/각 줄 M자” 등 명령을 프롬프트 첫 줄에 넣기.</p>
  </li>
  <li>
    <p><strong>리트라이</strong> : <code class="language-plaintext highlighter-rouge">curl --max-time 60 || sleep 2 &amp;&amp; 재시도</code> 같은 간단한 재시도 루틴.</p>
  </li>
  <li>
    <p><strong>도구/웹 검색 연동</strong> : Responses API의 <strong>도구 사용</strong>(웹검색 등)으로 확장 가능. <a href="https://platform.openai.com/docs/guides/tools?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
</ul>

<hr />

<h2 id="참고공식-문서">참고(공식 문서)</h2>

<ul>
  <li>
    <p><strong>OpenAI Responses API</strong> : 엔드포인트/예시/모델 사용법. <a href="https://platform.openai.com/docs/api-reference/responses?utm_source=chatgpt.com">OpenAI 플랫폼+3</a></p>
  </li>
  <li>
    <p><strong>파일 입력(업로드 후 참조)</strong> : 대용량 문서 처리. <a href="https://platform.openai.com/docs/guides/pdf-files?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p><strong>Structured Outputs(JSON Schema 강제)</strong> : 신뢰 가능한 JSON. <a href="https://platform.openai.com/docs/guides/structured-outputs?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p><strong>Ollama 사용법/모델 라이브러리</strong> : CLI·REST, CodeLlama/Mistral/Llama2 예시. <a href="https://ollama.com/library/codellama?utm_source=chatgpt.com">Ollama+3</a></p>
  </li>
  <li>
    <p><strong>Ollama Windows 프리뷰</strong>(환경 참고). <a href="https://ollama.com/blog/windows-preview?utm_source=chatgpt.com">Ollama</a></p>
  </li>
</ul>

<hr />

<p>필요하시면 위 스크립트를 <strong>하나의<code class="language-plaintext highlighter-rouge">ai.sh</code> 유틸</strong>(백엔드 스위치: OpenAI↔Ollama)로 묶어서 드릴게요. 원하는 작업군(번역/요약/코드/커밋 등) 중심으로 더 다듬어 최적화해드립니다.</p>

<p class="chat--user">

python script 하나로 만들어줘. 몇 가지 잘 쓸만한 system prompt를 준비해놓고 예를 들어 script_name translate "안녕?" 이런 식으로 쓸 수 있게

</p>

<p>좋아요! “한 파일짜리 파이썬 CLI”로 정리해 드릴게요. 아래는 바로 저장·실행 가능한 스크립트와 함께, (1) 전제 가정, (2) 재현 가능한 사용 예제(테스트), (3) 일관된 스타일(서브커맨드+프리셋)까지 갖춘 형태입니다.<br />
요청하신 “<code class="language-plaintext highlighter-rouge">script_name translate "안녕?"</code>” 스타일 그대로 됩니다.</p>

<hr />

<h2 id="시작-전-체크리스트개념">시작 전 체크리스트(개념)</h2>

<ul>
  <li>
    <p><strong>목적 고정</strong> : <code class="language-plaintext highlighter-rouge">translate</code>, <code class="language-plaintext highlighter-rouge">summarize</code>, <code class="language-plaintext highlighter-rouge">explain</code>, <code class="language-plaintext highlighter-rouge">commit</code>, <code class="language-plaintext highlighter-rouge">todo</code>, <code class="language-plaintext highlighter-rouge">docstring</code>, <code class="language-plaintext highlighter-rouge">classify</code> 처럼 태스크 단일 목적.</p>
  </li>
  <li>
    <p><strong>입력 경계</strong> : <code class="language-plaintext highlighter-rouge">--text</code>, <code class="language-plaintext highlighter-rouge">--file</code>, 또는 표준입력(없으면 에러). 너무 길면 스스로 잘림 없음(원하면 <code class="language-plaintext highlighter-rouge">head -c</code> 등으로 전처리).</p>
  </li>
  <li>
    <p><strong>출력 약속</strong> : 텍스트 기본, <code class="language-plaintext highlighter-rouge">classify</code>는 <strong>JSON</strong> 보장(가능 시 스키마 강제).</p>
  </li>
  <li>
    <p><strong>백엔드 선택</strong> : <code class="language-plaintext highlighter-rouge">--backend openai|ollama</code>(기본=openai). 모델은 <code class="language-plaintext highlighter-rouge">--model</code>로 오버라이드.</p>
  </li>
  <li>
    <p><strong>보안/재현</strong> : 키는 환경변수(OPENAI_API_KEY). Ollama는 로컬 11434 API 사용.</p>
  </li>
</ul>

<hr />

<h2 id="전제가정">전제(가정)</h2>

<ul>
  <li>
    <p><strong>OpenAI</strong> : 환경변수 <code class="language-plaintext highlighter-rouge">OPENAI_API_KEY</code> 필요. Python SDK 없이 <strong>HTTP /v1/responses</strong> 호출 사용(문서 기준 최신 기본 엔드포인트). <a href="https://platform.openai.com/docs/api-reference/responses?utm_source=chatgpt.com">OpenAI 플랫폼+1</a><a href="https://github.com/openai/openai-python?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p><strong>Ollama</strong> : 로컬에서 <code class="language-plaintext highlighter-rouge">ollama serve</code> 동작, 기본 호스트 <code class="language-plaintext highlighter-rouge">http://localhost:11434</code>. <code class="language-plaintext highlighter-rouge">/api/chat</code> 및 <code class="language-plaintext highlighter-rouge">/api/generate</code> 사용(분류 시 JSON 강제 위해 <code class="language-plaintext highlighter-rouge">format:"json"</code> 활용). <a href="https://ollama.readthedocs.io/en/api/?utm_source=chatgpt.com">Ollama</a><a href="https://github.com/ollama/ollama?utm_source=chatgpt.com">GitHub</a></p>
  </li>
</ul>

<hr />

<h2 id="파일-ai_clipy">파일: <code class="language-plaintext highlighter-rouge">ai_cli.py</code></h2>

<p>아래를 그대로 저장하세요.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ai_cli.py — 단일 파이썬 스크립트로 여러 LLM 유틸 제공
- 서브커맨드: translate, summarize, explain, commit, todo, docstring, classify
- 백엔드: OpenAI Responses API(기본) 또는 Ollama 로컬 API
- 일관된 프롬프트 포맷: [system preset] + 사용자 입력
"""

import os, sys, json, argparse, subprocess, textwrap
from typing import Optional, Dict, Any
try:
    import requests
except Exception as e:
    print("requests 라이브러리가 필요합니다. `pip install requests` 후 다시 실행하세요.", file=sys.stderr)
    sys.exit(2)

# -----------------------------
# System prompt presets
# -----------------------------
PRESETS = {
    "translate": lambda to="en": (
        f"역할: 고품질 번역기\n"
        f"규칙:\n"
        f"- 목표 언어: {to}\n"
        f"- 의미와 뉘앙스를 보존하고, 자연스럽게 의역\n"
        f"- 출력은 번역문만(주석/설명 금지)\n"
    ),
    "summarize": (
        "역할: 전문 요약가\n"
        "규칙:\n"
        "- 한국어 출력, 불릿 7개 이내, 명사형 간결체\n"
        "- 핵심 주장/근거/위험/다음 액션 우선\n"
    ),
    "explain": (
        "역할: 코드 리뷰어\n"
        "규칙:\n"
        "- 한국어로 3섹션 출력: [설명] [복잡도] [리팩터링]\n"
        "- 핵심 로직, 시간/공간 복잡도, 구체적 개선안 포함\n"
    ),
    "commit": (
        "역할: Conventional Commits 작성기\n"
        "규칙:\n"
        "- 한국어, 제목 72자 이내, 한 줄 요약 + 1~2줄 본문\n"
        "- 타입은 feat/fix/docs/refactor/test/chore 중 선택\n"
        "- 변경 의도와 영향 범위를 간결히\n"
        "- 출력은 커밋 메시지 본문만\n"
    ),
    "todo": (
        "역할: TODO 추출기\n"
        "규칙:\n"
        "- 한국어, 입력 문서에서 실행 가능한 액션만 추려서 '- [ ] ' 체크리스트로만 출력\n"
    ),
    "docstring": (
        "역할: 파이썬 Docstring 작성기\n"
        "규칙:\n"
        "- 한국어 PEP257 스타일\n"
        "- 수정 제안은 unified diff 패치 형식으로 출력(+++ 파일명 포함)\n"
    ),
    "classify": (
        "역할: 간단 이슈 분류기\n"
        "규칙:\n"
        "- 입력 한 줄을 카테고리와 우선순위로 JSON 출력\n"
        "- category ∈ {\"bug\",\"docs\",\"feature\"}, priority ∈ {\"high\",\"low\"}\n"
        "- 출력은 하나의 순수 JSON 객체만\n"
    ),
}

# JSON Schema for classify (OpenAI Structured Outputs 용)
CLASSIFY_JSON_SCHEMA = {
    "name": "classification",
    "strict": True,
    "schema": {
        "type": "object",
        "properties": {
            "category": {"type": "string", "enum": ["bug", "docs", "feature"]},
            "priority": {"type": "string", "enum": ["high", "low"]},
        },
        "required": ["category", "priority"],
        "additionalProperties": False,
    },
}

# -----------------------------
# I/O helpers
# -----------------------------
def read_input_text(args) -&gt; str:
    if args.text:
        return args.text
    if args.file:
        with open(args.file, "r", encoding="utf-8") as f:
            return f.read()
    if not sys.stdin.isatty():
        return sys.stdin.read()
    print("입력이 없습니다. --text, --file 또는 표준입력으로 내용을 전달하세요.", file=sys.stderr)
    sys.exit(1)

def maybe_git_diff(staged: bool) -&gt; str:
    cmd = ["git", "diff", "--staged"] if staged else ["git", "diff"]
    try:
        out = subprocess.check_output(cmd, encoding="utf-8", stderr=subprocess.STDOUT)
        if not out.strip():
            print("git diff 결과가 비어 있습니다. 변경사항을 확인하세요.", file=sys.stderr)
            sys.exit(1)
        return out
    except subprocess.CalledProcessError as e:
        print("git diff 실행 실패:", e.output, file=sys.stderr)
        sys.exit(1)

# -----------------------------
# Backends
# -----------------------------
def call_openai(system_text: str, user_text: str, model: str, *, json_schema: Optional[Dict[str, Any]] = None) -&gt; str:
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        print("환경변수 OPENAI_API_KEY 가 필요합니다.", file=sys.stderr)
        sys.exit(2)

    url = os.environ.get("OPENAI_BASE_URL", "https://api.openai.com/v1/responses")
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}

    payload: Dict[str, Any] = {
        "model": model,
        "instructions": system_text,
        "input": user_text,
    }
    if json_schema:
        payload["response_format"] = {
            "type": "json_schema",
            "json_schema": json_schema,
        }

    resp = requests.post(url, headers=headers, data=json.dumps(payload), timeout=120)
    if resp.status_code != 200:
        print(f"[OpenAI] HTTP {resp.status_code}: {resp.text}", file=sys.stderr)
        sys.exit(3)
    data = resp.json()
    # Responses API는 output_text에 전체 텍스트가 평탄화되어 제공됨
    text = data.get("output_text")
    if not text:
        # 호환용(혹시 구조가 바뀐 경우)
        try:
            text = data["choices"][0]["message"]["content"]
            if isinstance(text, list):  # 멀티파트 대비
                text = "".join(part.get("text", "") for part in text if isinstance(part, dict))
        except Exception:
            text = json.dumps(data, ensure_ascii=False)
    return text

def call_ollama_chat(system_text: str, user_text: str, model: str) -&gt; str:
    host = os.environ.get("OLLAMA_HOST", "http://localhost:11434")
    url = f"{host}/api/chat"
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": system_text},
            {"role": "user", "content": user_text},
        ],
        "stream": False,
    }
    resp = requests.post(url, data=json.dumps(payload), timeout=120)
    if resp.status_code != 200:
        print(f"[Ollama chat] HTTP {resp.status_code}: {resp.text}", file=sys.stderr)
        sys.exit(3)
    data = resp.json()
    # Ollama chat 응답 형태: {"message":{"content": "..."}}
    try:
        return data["message"]["content"]
    except Exception:
        # generate 형식 등 다양성 대비
        return data.get("response", json.dumps(data, ensure_ascii=False))

def call_ollama_generate(prompt_text: str, model: str, *, json_mode: bool = False) -&gt; str:
    host = os.environ.get("OLLAMA_HOST", "http://localhost:11434")
    url = f"{host}/api/generate"
    payload = {
        "model": model,
        "prompt": prompt_text,
        "stream": False,
    }
    if json_mode:
        payload["format"] = "json"
    resp = requests.post(url, data=json.dumps(payload), timeout=120)
    if resp.status_code != 200:
        print(f"[Ollama gen] HTTP {resp.status_code}: {resp.text}", file=sys.stderr)
        sys.exit(3)
    data = resp.json()
    return data.get("response", json.dumps(data, ensure_ascii=False))

# -----------------------------
# Router
# -----------------------------
def run_task(args):
    backend = args.backend
    model = args.model

    def run(system_text: str, user_text: str, *, json_schema: Optional[Dict[str, Any]] = None, force_json=False) -&gt; str:
        if backend == "openai":
            return call_openai(system_text, user_text, model, json_schema=json_schema)
        # Ollama: JSON 보장이 필요하면 generate + json_mode 사용
        if force_json:
            prompt = f"{system_text.strip()}\n\n[입력]\n{user_text.strip()}\n"
            return call_ollama_generate(prompt, model, json_mode=True)
        return call_ollama_chat(system_text, user_text, model)

    # translate
    if args.command == "translate":
        to_lang = args.to
        sys_prompt = PRESETS["translate"](to=to_lang)
        text = read_input_text(args)
        print(run(sys_prompt, text).strip())
        return

    # summarize
    if args.command == "summarize":
        sys_prompt = PRESETS["summarize"]
        text = read_input_text(args)
        print(run(sys_prompt, text).strip())
        return

    # explain (code)
    if args.command == "explain":
        sys_prompt = PRESETS["explain"]
        text = read_input_text(args)
        print(run(sys_prompt, text).strip())
        return

    # commit (from text or git diff)
    if args.command == "commit":
        sys_prompt = PRESETS["commit"]
        if args.git or args.staged:
            text = maybe_git_diff(staged=args.staged)
        else:
            text = read_input_text(args)
        user_msg = f"[변경점]\n{text}"
        print(run(sys_prompt, user_msg).strip())
        return

    # todo extraction
    if args.command == "todo":
        sys_prompt = PRESETS["todo"]
        text = read_input_text(args)
        print(run(sys_prompt, text).strip())
        return

    # docstring (unified diff patch)
    if args.command == "docstring":
        sys_prompt = PRESETS["docstring"]
        text = read_input_text(args)
        user_msg = f"[파일]\n{text}"
        print(run(sys_prompt, user_msg).strip())
        return

    # classify -&gt; strict JSON
    if args.command == "classify":
        sys_prompt = PRESETS["classify"]
        # 한 줄만 분류(여러 줄은 쉘에서 while read 루프 권장)
        text = read_input_text(args).strip()
        if backend == "openai":
            out = run(sys_prompt, text, json_schema=CLASSIFY_JSON_SCHEMA)
        else:
            # Ollama: JSON 강제는 generate/format=json 사용
            prompt = textwrap.dedent(f"""
            {sys_prompt}
            출력은 JSON 한 객체만. 예: category
            문장: {text}
            """).strip()
            out = call_ollama_generate(prompt, model, json_mode=True)
        # pretty print or raw
        try:
            obj = json.loads(out)
            print(json.dumps(obj, ensure_ascii=False))
        except Exception:
            # 혹시 순수 JSON이 아니면 원본 출력
            print(out.strip())
        return

    # unknown
    print("지원하지 않는 커맨드입니다.", file=sys.stderr)
    sys.exit(1)

# -----------------------------
# CLI
# -----------------------------
def build_parser():
    p = argparse.ArgumentParser(description="LLM one-file CLI (OpenAI / Ollama)")
    p.add_argument("--backend", choices=["openai", "ollama"], default=os.environ.get("AI_BACKEND", "openai"),
                   help="백엔드 선택 (기본: openai)")
    p.add_argument("--model", default=os.environ.get("AI_MODEL", None),
                   help="사용할 모델명 (OpenAI 예: gpt-4o-mini, Ollama 예: llama3.2)")
    sub = p.add_subparsers(dest="command", required=True)

    def common(sp):
        sp.add_argument("--text", help="직접 입력 텍스트")
        sp.add_argument("--file", help="입력 파일 경로")

    sp = sub.add_parser("translate", help="번역")
    common(sp)
    sp.add_argument("--to", default="en", help="목표 언어 코드(기본=en)")

    sp = sub.add_parser("summarize", help="요약(불릿 7)")
    common(sp)

    sp = sub.add_parser("explain", help="코드 설명+개선")
    common(sp)

    sp = sub.add_parser("commit", help="Conventional Commits 생성")
    common(sp)
    sp.add_argument("--git", action="store_true", help="git diff 사용")
    sp.add_argument("--staged", action="store_true", help="git diff --staged 사용")

    sp = sub.add_parser("todo", help="문서에서 TODO 추출")
    common(sp)

    sp = sub.add_parser("docstring", help="파이썬 파일에 대한 Docstring 패치 제안")
    common(sp)

    sp = sub.add_parser("classify", help="문장을 JSON으로 라벨링(category/priority)")
    common(sp)

    return p

def main():
    parser = build_parser()
    args = parser.parse_args()

    # 기본 모델 값 보정
    if not args.model:
        args.model = "gpt-4o-mini" if args.backend == "openai" else "llama3.2"

    run_task(args)

if __name__ == "__main__":
    main()

</code></pre></div></div>
<hr />

<h2 id="사용-예시재현-가능한-테스트">사용 예시(재현 가능한 테스트)</h2>

<blockquote>
  <p>아래 명령은 Mac/Linux 기준. Windows는 <code class="language-plaintext highlighter-rouge">python</code> 대신 <code class="language-plaintext highlighter-rouge">py</code> 또는 <code class="language-plaintext highlighter-rouge">python.exe</code> 사용하세요.</p>
</blockquote>

<ol>
  <li>설치 &amp; 실행 준비
```
bash</li>
</ol>

<p>pip install requests
export OPENAI_API_KEY="sk-…"           # OpenAI 백엔드 쓸 때만</p>
<h1 id="ollama-사용-시-ollama-serve--모델-준비-ollama-pull-llama32">(Ollama 사용 시) ollama serve &amp; 모델 준비: ollama pull llama3.2</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  2. 번역 (요청 예시와 동일)
</code></pre></div></div>
<p>bash</p>

<p>python ai_cli.py translate –text "안녕?" –to en</p>
<h1 id="또는-파일stdin">또는 파일/STDIN:</h1>
<p>echo "PostgreSQL 인덱스는…" | python ai_cli.py translate –to en</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  3. 요약
</code></pre></div></div>
<p>bash</p>

<p>python ai_cli.py summarize –text "회의에서 마이그레이션 일정과 위험…"</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  4. 코드 설명
</code></pre></div></div>
<p>bash</p>

<p>cat &gt; example.py «'PY'
def fib(n):
    if n &lt;= 1: return n
    return fib(n-1)+fib(n-2)
PY
python ai_cli.py explain –file example.py</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  5. 커밋 메시지(로컬 변경에서)
</code></pre></div></div>
<p>bash</p>

<h1 id="워킹-디렉토리에서">워킹 디렉토리에서</h1>
<p>python ai_cli.py commit –git              # git diff 사용
python ai_cli.py commit –staged           # git diff –staged 사용</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  6. TODO 추출
</code></pre></div></div>
<p>bash</p>

<p>python ai_cli.py todo –text "위험 항목 점검 및 롤백 플랜 작성 필요"</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  7. 분류(JSON 보장)
</code></pre></div></div>
<p>bash</p>

<p>python ai_cli.py classify –text "DB 연결 오류가 자주 발생함"</p>
<h1 id="출력-예-categorybugpriorityhigh">출력 예: {"category":"bug","priority":"high"}</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  8. Docstring 패치 제안
</code></pre></div></div>
<p>bash</p>

<p>python ai_cli.py docstring –file example.py</p>
<h1 id="unified-diff-형태로-나옵니다수동-패치-or-git-apply-가능">unified diff 형태로 나옵니다(수동 패치 or git apply 가능).</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* * *

## 입출력 요약(서브커맨드별)

  * `translate`: 입력=임의 텍스트 → 출력=목표 언어 번역문 1개.

  * `summarize`: 입력=문서 텍스트 → 출력=불릿 ≤7개 핵심 요약(한글).

  * `explain`: 입력=코드 → 출력=[설명][복잡도][리팩터링] 3섹션.

  * `commit`: 입력=git diff/텍스트 → 출력=Conventional Commits 메시지 본문.

  * `todo`: 입력=문서 → 출력=Markdown 체크리스트(`- [ ] ...`).

  * `docstring`: 입력=파이썬 파일 → 출력=unified diff 패치.

  * `classify`: 입력=한 줄 문장 → 출력=JSON `{category, priority}` (OpenAI는 **구조적 출력** 사용, Ollama는 `format:"json"`). [OpenAI 플랫폼](https://platform.openai.com/docs/guides/structured-outputs?utm_source=chatgpt.com)[Ollama](https://ollama.readthedocs.io/en/api/?utm_source=chatgpt.com)

* * *

## 구현 메모(일관된 스타일)

  * 프롬프트는 **시스템 프리셋 + 사용자 입력** 규격화.

  * OpenAI는 **Responses API** 를 사용해 `instructions + input` 형태로 호출. [GitHub](https://github.com/openai/openai-python?utm_source=chatgpt.com)[OpenAI 플랫폼](https://platform.openai.com/docs/api-reference/responses?utm_source=chatgpt.com)

  * `classify`는 OpenAI에서 **Structured Outputs(JSON Schema)** 를 사용하도록 `response_format`을 설정. [OpenAI 플랫폼](https://platform.openai.com/docs/guides/structured-outputs?utm_source=chatgpt.com)[OpenAI](https://openai.com/index/introducing-structured-outputs-in-the-api/?utm_source=chatgpt.com)

  * Ollama는 일반 태스크는 `/api/chat`, JSON 강제 태스크는 `/api/generate + format:"json"` 사용. [Ollama](https://ollama.readthedocs.io/en/api/?utm_source=chatgpt.com)

* * *

## 참고

  * **OpenAI Responses API** 개요/빠른 시작: [OpenAI 플랫폼+1](https://platform.openai.com/docs/quickstart?utm_source=chatgpt.com)

  * **OpenAI Python 라이브러리 README(Responses 예시)** : [GitHub](https://github.com/openai/openai-python)

  * **Structured Outputs(JSON 스키마 강제)** : [OpenAI 플랫폼](https://platform.openai.com/docs/guides/structured-outputs?utm_source=chatgpt.com)[OpenAI](https://openai.com/index/introducing-structured-outputs-in-the-api/?utm_source=chatgpt.com)

  * **Ollama API(chat/generate, JSON 모드)** : [Ollama](https://ollama.readthedocs.io/en/api/?utm_source=chatgpt.com)[GitHub](https://github.com/ollama/ollama?utm_source=chatgpt.com)

필요하시면 `--stream` 옵션, 배치 처리(파일 한 줄씩 분류), 프리셋 추가(예: `ragfile`, `rewrite`, `polish`)도 확장해 드릴게요.

&lt;p class="chat--user" markdown="1"&gt;

1\. 이 스크립트 이름을 10개 정도 작명해줘. (개인적인 의견으로는 간단한 ai라는 느낌이 들면 좋을 듯) 2\. 이걸 python project화 할거야. sturcture와 folder 구조, 각 파일을 작성해줘. 3\. 그리고 새로운 subcommand를 좀 쉽게 확장성 있게 등록할 수 있게 구조를 작성해줘. 새로운 subcommand를 추가하는 방법 예시도 추가해줘. 4\. ENPOINT 주소도 내가 등록할 수 있도록 해줘.

&lt;/p&gt;

좋아요—원하신 “간단한 ai 느낌”의 이름 제안부터, **프로젝트 구조/파일 전체** , **확장 가능한 서브커맨드 구조** , **엔드포인트(ENDPOINT) 설정 방식** 까지 한 번에 정리합니다.  
(요청하신 대로 단계별로 생각을 드러내며, 전제·재현 예시·일관 스타일을 포함합니다.)

* * *

# 0) 한눈에 계획 (step-by-step)

  1. **이름 후보 10개** 를 먼저 정리

  2. **Python 패키지 구조** 를 제시(콘솔 엔트리포인트 포함)

  3. **확장성 핵심** : `CommandRegistry` \+ `commands/` 자동 로드 + **entry points 플러그인** 지원

  4. **ENDPOINT 설정** : CLI 옵션, 환경변수, YAML 설정 파일(우선순위: CLI &gt; ENV &gt; YAML 기본값)

  5. **재현 예시** : 설치·실행 커맨드, 새 서브커맨드 추가 예시 포함

* * *

# 1) 스크립트/프로젝트 이름 제안 (10)

간단·가벼운 “ai 느낌” 위주로 골랐어요.

  1. `simpleai`

  2. `nan.ai` (`nanai` 명령)

  3. `aikit`

  4. `mini-ai` (`miniai`)

  5. `ai-do`

  6. `aihand`

  7. `snackai`

  8. `clai` (command-line-ai)

  9. `aiplay`

  10. `tinyai`

&gt; 아래 예시는 패키지명을 **`simpleai`** , 콘솔 명령을 **`simpleai`**로 가정합니다. (원하시면 다른 이름으로 일괄 치환 가능)

* * *

# 2) 프로젝트 구조 &amp; 전체 파일

## 디렉토리 구조
</code></pre></div></div>
<p>graphql</p>

<p>simpleai/
├─ simpleai/
│  ├─ <strong>init</strong>.py
│  ├─ cli.py                 # 콘솔 엔트리포인트
│  ├─ config.py              # CLI/ENV/YAML 설정 로더
│  ├─ presets.py             # system prompts 프리셋
│  ├─ registry.py            # CommandRegistry &amp; 자동 로드/플러그인
│  ├─ utils.py               # 공통 I/O 유틸(입력읽기, git diff 등)
│  ├─ backends/
│  │  ├─ <strong>init</strong>.py
│  │  ├─ openai_backend.py   # OpenAI Responses API 호출
│  │  └─ ollama_backend.py   # Ollama chat/generate 호출
│  └─ commands/
│     ├─ <strong>init</strong>.py         # 모듈 자동등록 트리거
│     ├─ translate.py
│     ├─ summarize.py
│     ├─ explain.py
│     ├─ commit.py
│     ├─ todo.py
│     ├─ docstring.py
│     └─ classify.py
├─ examples/
│  ├─ example.py
│  ├─ notes.txt
│  └─ policy.txt
├─ tests/
│  └─ test_smoke.py
├─ pyproject.toml
├─ README.md
└─ .env.example</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; 의존성: `requests` (가벼움 유지), 표준 `argparse`. YAML 읽기는 선택(Optional)—없으면 ENV/CLI만으로 동작.

* * *

## 파일: `simpleai/__init__.py`
</code></pre></div></div>
<p>python</p>

<p><strong>all</strong> = ["cli"]
<strong>version</strong> = "0.1.0"</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/presets.py`
</code></pre></div></div>
<p>python</p>

<p>def preset_translate(to="en") -&gt; str:
    return (
        "역할: 고품질 번역기\n"
        f"- 목표 언어: {to}\n"
        "- 의미/뉘앙스 보존, 자연스러운 의역\n"
        "- 출력은 번역문만(주석 금지)\n"
    )</p>

<p>PRESETS = {
    "summarize": (
        "역할: 전문 요약가\n"
        "- 한국어 출력, 불릿 최대 7개, 명사형 간결체\n"
        "- 핵심 주장/근거/위험/다음 액션 우선\n"
    ),
    "explain": (
        "역할: 코드 리뷰어\n"
        "- 한국어 3섹션: [설명] [복잡도] [리팩터링]\n"
        "- 핵심 로직, 시간/공간 복잡도, 개선안\n"
    ),
    "commit": (
        "역할: Conventional Commits 작성기\n"
        "- 한국어, 제목 72자 이내 + 1~2줄 본문\n"
        "- feat/fix/docs/refactor/test/chore 중 선택\n"
        "- 출력은 메시지 본문만\n"
    ),
    "todo": (
        "역할: TODO 추출기\n"
        "- 입력에서 실행 가능한 액션만 '- [ ] ' 체크리스트로 출력\n"
    ),
    "docstring": (
        "역할: 파이썬 Docstring 작성기\n"
        "- 한국어 PEP257 스타일\n"
        "- unified diff 패치 형식(+++ 파일명 포함)\n"
    ),
    "classify": (
        "역할: 간단 이슈 분류기\n"
        "- 입력 한 줄 → JSON {category, priority}\n"
        '- category ∈ {"bug","docs","feature"}, priority ∈ {"high","low"}\n'
        "- 출력은 순수 JSON 한 객체만\n"
    ),
}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/config.py`
</code></pre></div></div>
<p>python</p>

<p>import os, json, pathlib
from dataclasses import dataclass
from typing import Optional</p>

<p>try:
    import yaml  # optional
except Exception:
    yaml = None</p>

<p>DEFAULT_CONFIG_PATHS = [
    "~/.simpleai/config.yaml",
    "./.simpleai/config.yaml",
]</p>

<p>@dataclass
class OpenAIConfig:
    api_key: Optional[str] = None
    base_url: str = "https://api.openai.com/v1"
    responses_path: str = "/responses"
    model: str = "gpt-4o-mini"</p>

<p>@dataclass
class OllamaConfig:
    host: str = "http://localhost:11434"  # ex) http://127.0.0.1:11434
    chat_path: str = "/api/chat"
    generate_path: str = "/api/generate"
    model: str = "llama3.2"</p>

<p>@dataclass
class AppConfig:
    backend: str = "openai"  # or "ollama"
    openai: OpenAIConfig = OpenAIConfig()
    ollama: OllamaConfig = OllamaConfig()</p>

<p>def _load_yaml_dict() -&gt; dict:
    data = {}
    for p in DEFAULT_CONFIG_PATHS:
        path = pathlib.Path(os.path.expanduser(p))
        if path.exists() and path.is_file():
            if yaml is None:
                continue
            with path.open("r", encoding="utf-8") as f:
                y = yaml.safe_load(f) or {}
                data.update(y)
    return data</p>

<p>def load_config(cli_args) -&gt; AppConfig:
    # base from YAML
    y = _load_yaml_dict()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cfg = AppConfig(
    backend = getattr(cli_args, "backend", None) or os.getenv("SIMPLEAI_BACKEND", y.get("defaults", {}).get("backend", "openai")),
    openai = OpenAIConfig(
        api_key = os.getenv("OPENAI_API_KEY", y.get("openai", {}).get("api_key")),
        base_url = getattr(cli_args, "openai_base_url", None) or os.getenv("SIMPLEAI_OPENAI_BASE_URL", y.get("openai", {}).get("base_url", "https://api.openai.com/v1")),
        responses_path = getattr(cli_args, "openai_responses_path", None) or os.getenv("SIMPLEAI_OPENAI_RESPONSES_PATH", y.get("openai", {}).get("responses_path", "/responses")),
        model = getattr(cli_args, "model", None) or os.getenv("OPENAI_MODEL", y.get("openai", {}).get("model", "gpt-4o-mini")),
    ),
    ollama = OllamaConfig(
        host = getattr(cli_args, "ollama_host", None) or os.getenv("SIMPLEAI_OLLAMA_HOST", y.get("ollama", {}).get("host", "http://localhost:11434")),
        chat_path = os.getenv("SIMPLEAI_OLLAMA_CHAT_PATH", y.get("ollama", {}).get("chat_path", "/api/chat")),
        generate_path = os.getenv("SIMPLEAI_OLLAMA_GENERATE_PATH", y.get("ollama", {}).get("generate_path", "/api/generate")),
        model = getattr(cli_args, "model", None) or os.getenv("OLLAMA_MODEL", y.get("ollama", {}).get("model", "llama3.2")),
    ),
)
return cfg
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/utils.py`
</code></pre></div></div>
<p>python</p>

<p>import sys, subprocess</p>

<p>def read_input_text(args) -&gt; str:
    if getattr(args, "text", None):
        return args.text
    if getattr(args, "file", None):
        with open(args.file, "r", encoding="utf-8") as f:
            return f.read()
    if not sys.stdin.isatty():
        return sys.stdin.read()
    raise SystemExit("입력이 없습니다. –text, –file 또는 표준입력으로 내용을 전달하세요.")</p>

<p>def git_diff(staged: bool=False) -&gt; str:
    cmd = ["git", "diff", "–staged"] if staged else ["git", "diff"]
    out = subprocess.check_output(cmd, encoding="utf-8", stderr=subprocess.STDOUT)
    if not out.strip():
        raise SystemExit("git diff 결과가 비어 있습니다.")
    return out</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/backends/openai_backend.py`
</code></pre></div></div>
<p>python</p>

<p>import json, requests</p>

<p>def call_openai(instructions: str, user_text: str, *, base_url: str, responses_path: str,
                api_key: str, model: str, response_format: dict | None = None) -&gt; str:
    if not api_key:
        raise SystemExit("환경변수 OPENAI_API_KEY 또는 설정 파일이 필요합니다.")</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>url = base_url.rstrip("/") + responses_path
headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
payload = {"model": model, "instructions": instructions, "input": user_text}
if response_format:
    payload["response_format"] = response_format

resp = requests.post(url, headers=headers, data=json.dumps(payload), timeout=120)
if resp.status_code != 200:
    raise SystemExit(f"[OpenAI] HTTP {resp.status_code}: {resp.text}")

data = resp.json()
text = data.get("output_text")
if not text:
    # 호환용
    try:
        c = data["choices"][0]["message"]["content"]
        text = "".join(p.get("text","") for p in c if isinstance(p, dict)) if isinstance(c, list) else c
    except Exception:
        text = json.dumps(data, ensure_ascii=False)
return text.strip()
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/backends/ollama_backend.py`
</code></pre></div></div>
<p>python</p>

<p>import json, requests</p>

<p>def _post(url, payload):
    r = requests.post(url, data=json.dumps(payload), timeout=120)
    if r.status_code != 200:
        raise SystemExit(f"[Ollama] HTTP {r.status_code}: {r.text}")
    return r.json()</p>

<p>def chat(instructions: str, user_text: str, *, host: str, chat_path: str, model: str) -&gt; str:
    url = host.rstrip("/") + chat_path
    payload = {
        "model": model,
        "messages": [
            {"role": "system", "content": instructions},
            {"role": "user", "content": user_text},
        ],
        "stream": False,
    }
    data = _post(url, payload)
    return (data.get("message", {}) or {}).get("content") or data.get("response","")</p>

<p>def generate(prompt: str, *, host: str, generate_path: str, model: str, json_mode: bool=False) -&gt; str:
    url = host.rstrip("/") + generate_path
    payload = {"model": model, "prompt": prompt, "stream": False}
    if json_mode:
        payload["format"] = "json"
    data = _post(url, payload)
    return data.get("response","")</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/registry.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse, importlib, pkgutil
from typing import Callable, Dict, List, Optional
from importlib import metadata</p>

<p>Handler = Callable[[argparse.Namespace, "AppDeps"], None]
Adder = Callable[[argparse._SubParsersAction], argparse.ArgumentParser]</p>

<p>class CommandRegistry:
    def <strong>init</strong>(self):
        self._commands: Dict[str, Dict[str, object]] = {}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def register(self, name: str, add_arguments: Adder, handler: Handler):
    if name in self._commands:
        raise ValueError(f"duplicate command: {name}")
    self._commands[name] = {"add_arguments": add_arguments, "handler": handler}

def build_subparsers(self, sub: argparse._SubParsersAction):
    for name, spec in self._commands.items():
        sp = spec["add_arguments"](sub)
        sp.set_defaults(_handler=spec["handler"])

def names(self) -&gt; List[str]:
    return sorted(self._commands.keys())
</code></pre></div></div>

<p>def autoload_builtin_commands(registry: CommandRegistry):
    # simpleai.commands.* 모듈 자동 import → 각 모듈에서 register(registry)
    import simpleai.commands as pkg
    for mod in pkgutil.iter_modules(pkg.<strong>path</strong>, pkg.<strong>name</strong> + "."):
        importlib.import_module(mod.name)</p>

<p>def autoload_plugin_entrypoints(registry: CommandRegistry):
    # 외부 패키지가 entry_points <code class="language-plaintext highlighter-rouge">simpleai.commands</code>에 등록한 register 함수를 호출
    try:
        eps = metadata.entry_points()
        group = eps.select(group="simpleai.commands")
    except Exception:
        group = []
    for ep in group:
        # ep.name 은 커맨드명(권장), ep.load() → callable(register)
        register_fn = ep.load()
        register_fn(registry)</p>

<h1 id="의존성-컨테이너-백엔드프리셋설정-접근">의존성 컨테이너 (백엔드/프리셋/설정 접근)</h1>
<p>class AppDeps:
    def <strong>init</strong>(self, cfg, openai, ollama, presets):
        self.cfg = cfg
        self.openai = openai
        self.ollama = ollama
        self.presets = presets</p>

<p>REGISTRY = CommandRegistry()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/commands/__init__.py`
</code></pre></div></div>
<p>python</p>

<h1 id="각-모듈에서-import-시-simpleairegistryregistryregister-호출">각 모듈에서 import 시 simpleai.registry.REGISTRY.register(…) 호출</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/commands/translate.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from simpleai.registry import REGISTRY, AppDeps
from simpleai.utils import read_input_text
from simpleai.presets import preset_translate</p>

<p>def _add(sub):
    sp = sub.add_parser("translate", help="번역")
    sp.add_argument("–text")
    sp.add_argument("–file")
    sp.add_argument("–to", default="en", help="목표 언어 코드(기본=en)")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = preset_translate(to=args.to)
    text = read_input_text(args)
    if deps.cfg.backend == "openai":
        out = deps.openai(
            instructions=sys_prompt, user_text=text,
            base_url=deps.cfg.openai.base_url,
            responses_path=deps.cfg.openai.responses_path,
            api_key=deps.cfg.openai.api_key,
            model=deps.cfg.openai.model,
        )
    else:
        out = deps.ollama.chat(
            instructions=sys_prompt, user_text=text,
            host=deps.cfg.ollama.host, chat_path=deps.cfg.ollama.chat_path,
            model=deps.cfg.ollama.model,
        )
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("translate", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/commands/summarize.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from simpleai.registry import REGISTRY, AppDeps
from simpleai.utils import read_input_text
from simpleai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("summarize", help="요약(불릿 7)")
    sp.add_argument("–text")
    sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["summarize"]
    text = read_input_text(args)
    if deps.cfg.backend == "openai":
        out = deps.openai(
            instructions=sys_prompt, user_text=text,
            base_url=deps.cfg.openai.base_url,
            responses_path=deps.cfg.openai.responses_path,
            api_key=deps.cfg.openai.api_key,
            model=deps.cfg.openai.model,
        )
    else:
        out = deps.ollama.chat(
            instructions=sys_prompt, user_text=text,
            host=deps.cfg.ollama.host, chat_path=deps.cfg.ollama.chat_path,
            model=deps.cfg.ollama.model,
        )
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("summarize", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/commands/explain.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from simpleai.registry import REGISTRY, AppDeps
from simpleai.utils import read_input_text
from simpleai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("explain", help="코드 설명+개선")
    sp.add_argument("–text")
    sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["explain"]
    text = read_input_text(args)
    if deps.cfg.backend == "openai":
        out = deps.openai(
            instructions=sys_prompt, user_text=text,
            base_url=deps.cfg.openai.base_url,
            responses_path=deps.cfg.openai.responses_path,
            api_key=deps.cfg.openai.api_key,
            model=deps.cfg.openai.model,
        )
    else:
        out = deps.ollama.chat(
            instructions=sys_prompt, user_text=text,
            host=deps.cfg.ollama.host, chat_path=deps.cfg.ollama.chat_path,
            model=deps.cfg.ollama.model,
        )
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("explain", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/commands/commit.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from simpleai.registry import REGISTRY, AppDeps
from simpleai.utils import read_input_text, git_diff
from simpleai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("commit", help="Conventional Commits 생성")
    sp.add_argument("–text")
    sp.add_argument("–file")
    sp.add_argument("–git", action="store_true")
    sp.add_argument("–staged", action="store_true")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["commit"]
    if args.git or args.staged:
        text = git_diff(staged=args.staged)
    else:
        text = read_input_text(args)
    user_msg = f"[변경점]\n{text}"
    if deps.cfg.backend == "openai":
        out = deps.openai(
            instructions=sys_prompt, user_text=user_msg,
            base_url=deps.cfg.openai.base_url,
            responses_path=deps.cfg.openai.responses_path,
            api_key=deps.cfg.openai.api_key,
            model=deps.cfg.openai.model,
        )
    else:
        out = deps.ollama.chat(
            instructions=sys_prompt, user_text=user_msg,
            host=deps.cfg.ollama.host, chat_path=deps.cfg.ollama.chat_path,
            model=deps.cfg.ollama.model,
        )
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("commit", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/commands/todo.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from simpleai.registry import REGISTRY, AppDeps
from simpleai.utils import read_input_text
from simpleai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("todo", help="문서에서 TODO 추출")
    sp.add_argument("–text")
    sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["todo"]
    text = read_input_text(args)
    if deps.cfg.backend == "openai":
        out = deps.openai(
            instructions=sys_prompt, user_text=text,
            base_url=deps.cfg.openai.base_url,
            responses_path=deps.cfg.openai.responses_path,
            api_key=deps.cfg.openai.api_key,
            model=deps.cfg.openai.model,
        )
    else:
        out = deps.ollama.chat(
            instructions=sys_prompt, user_text=text,
            host=deps.cfg.ollama.host, chat_path=deps.cfg.ollama.chat_path,
            model=deps.cfg.ollama.model,
        )
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("todo", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/commands/docstring.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from simpleai.registry import REGISTRY, AppDeps
from simpleai.utils import read_input_text
from simpleai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("docstring", help="파이썬 파일 Docstring 패치 제안")
    sp.add_argument("–text")
    sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["docstring"]
    text = read_input_text(args)
    user_msg = f"[파일]\n{text}"
    if deps.cfg.backend == "openai":
        out = deps.openai(
            instructions=sys_prompt, user_text=user_msg,
            base_url=deps.cfg.openai.base_url,
            responses_path=deps.cfg.openai.responses_path,
            api_key=deps.cfg.openai.api_key,
            model=deps.cfg.openai.model,
        )
    else:
        out = deps.ollama.chat(
            instructions=sys_prompt, user_text=user_msg,
            host=deps.cfg.ollama.host, chat_path=deps.cfg.ollama.chat_path,
            model=deps.cfg.ollama.model,
        )
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("docstring", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/commands/classify.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse, json, textwrap
from simpleai.registry import REGISTRY, AppDeps
from simpleai.utils import read_input_text
from simpleai.presets import PRESETS</p>

<p>CLASSIFY_SCHEMA = {
    "name": "classification",
    "strict": True,
    "schema": {
        "type": "object",
        "properties": {
            "category": {"type": "string", "enum": ["bug","docs","feature"]},
            "priority": {"type": "string", "enum": ["high","low"]},
        },
        "required": ["category","priority"],
        "additionalProperties": False,
    },
}</p>

<p>def _add(sub):
    sp = sub.add_parser("classify", help="문장을 JSON으로 라벨링")
    sp.add_argument("–text")
    sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["classify"]
    text = read_input_text(args).strip()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if deps.cfg.backend == "openai":
    out = deps.openai(
        instructions=sys_prompt, user_text=text,
        base_url=deps.cfg.openai.base_url,
        responses_path=deps.cfg.openai.responses_path,
        api_key=deps.cfg.openai.api_key,
        model=deps.cfg.openai.model,
        response_format={"type":"json_schema","json_schema":CLASSIFY_SCHEMA},
    )
    raw = out
else:
    prompt = textwrap.dedent(f"""
    {sys_prompt}
    출력은 JSON 한 객체만. 예: category
    문장: {text}
    """).strip()
    raw = deps.ollama.generate(
        prompt, host=deps.cfg.ollama.host, generate_path=deps.cfg.ollama.generate_path,
        model=deps.cfg.ollama.model, json_mode=True
    )

try:
    obj = json.loads(raw)
    print(json.dumps(obj, ensure_ascii=False))
except Exception:
    print(raw)
</code></pre></div></div>

<p>def register(registry=REGISTRY):
    registry.register("classify", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `simpleai/cli.py`
</code></pre></div></div>
<p>python</p>

<p>#!/usr/bin/env python3
import argparse
from simpleai.registry import REGISTRY, autoload_builtin_commands, autoload_plugin_entrypoints, AppDeps
from simpleai.config import load_config
from simpleai.backends import openai_backend, ollama_backend
from simpleai import presets as presets_mod</p>

<p>def build_parser():
    p = argparse.ArgumentParser(prog="simpleai", description="Simple AI CLI")
    p.add_argument("–backend", choices=["openai","ollama"], help="백엔드 선택")
    p.add_argument("–model", help="모델명(백엔드별 기본값 존재)")
    # ENDPOINT 설정(요청사항 4)
    p.add_argument("–openai-base-url", help="OpenAI base URL (기본: https://api.openai.com/v1)")
    p.add_argument("–openai-responses-path", help="OpenAI responses path (기본: /responses)")
    p.add_argument("–ollama-host", help="Ollama host (기본: http://localhost:11434)")
    sub = p.add_subparsers(dest="command", required=True)
    return p, sub</p>

<p>def main():
    # 1) 파서/서브파서 생성
    parser, sub = build_parser()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 2) 커맨드 자동 로드(내장 + 외부 플러그인)
autoload_builtin_commands(REGISTRY)
autoload_plugin_entrypoints(REGISTRY)
REGISTRY.build_subparsers(sub)

# 3) 파싱 및 설정 로드(ENDPOINT 포함)
args = parser.parse_args()
cfg = load_config(args)

# 4) 의존 주입
deps = AppDeps(
    cfg=cfg,
    openai=openai_backend.call_openai,
    ollama=type("OllamaAPI", (), {
        "chat": ollama_backend.chat,
        "generate": ollama_backend.generate
    })(),
    presets=presets_mod
)

# 5) 실행
if not hasattr(args, "_handler"):
    parser.print_help(); return
args._handler(args, deps)
</code></pre></div></div>

<p>if <strong>name</strong> == "<strong>main</strong>":
    main()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `pyproject.toml`
</code></pre></div></div>
<p>toml</p>

<p>[project]
name = "simpleai"
version = "0.1.0"
description = "Simple, extensible AI CLI (OpenAI/Ollama)"
authors = [{name="you"}]
readme = "README.md"
requires-python = "&gt;=3.9"
dependencies = ["requests"]</p>

<p>[project.scripts]
simpleai = "simpleai.cli:main"</p>

<h1 id="외부-플러그인도-가능-다른-패키지에서-아래-그룹으로-entry-point-등록">외부 플러그인도 가능: 다른 패키지에서 아래 그룹으로 entry point 등록</h1>
<p>[project.entry-points."simpleai.commands"]</p>
<h1 id="예-외부패키지에서-rewrite--mypluginrewriteregister">예) 외부패키지에서: rewrite = "myplugin.rewrite:register"</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## 파일: `README.md` (요약)
</code></pre></div></div>
<p>md</p>

<h1 id="simpleai">simpleai</h1>
<p>단일 CLI로 번역/요약/설명/커밋/TODO/Docstring/분류를 수행합니다.</p>

<h2 id="설치">설치</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip install -e .
</code></pre></div></div>
<p>scss</p>

<h2 id="설정endpoint">설정(ENDPOINT)</h2>
<ul>
  <li>CLI가 최우선, 없으면 ENV, 없으면 YAML(옵션)</li>
</ul>

<p>ENV 예시:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export OPENAI_API_KEY=sk-...  
export SIMPLEAI_BACKEND=openai  
export SIMPLEAI_OPENAI_BASE_URL=https://api.openai.com/v1  
export SIMPLEAI_OPENAI_RESPONSES_PATH=/responses  
export SIMPLEAI_OLLAMA_HOST=http://localhost:11434
</code></pre></div></div>
<p>yaml</p>

<p>YAML 예시: <code class="language-plaintext highlighter-rouge">~/.simpleai/config.yaml</code></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">defaults</span><span class="pi">:</span>
  <span class="na">backend</span><span class="pi">:</span> <span class="s">openai</span>
<span class="na">openai</span><span class="pi">:</span>
  <span class="na">base_url</span><span class="pi">:</span> <span class="s">https://api.openai.com/v1</span>
  <span class="na">responses_path</span><span class="pi">:</span> <span class="s">/responses</span>
  <span class="na">model</span><span class="pi">:</span> <span class="s">gpt-4o-mini</span>
<span class="na">ollama</span><span class="pi">:</span>
  <span class="na">host</span><span class="pi">:</span> <span class="s">http://localhost:11434</span>
  <span class="na">chat_path</span><span class="pi">:</span> <span class="s">/api/chat</span>
  <span class="na">generate_path</span><span class="pi">:</span> <span class="s">/api/generate</span>
  <span class="na">model</span><span class="pi">:</span> <span class="s">llama3.2</span>

</code></pre></div></div>
<h2 id="사용-예시">사용 예시</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vbnet

simpleai translate --to en --text "안녕?"
echo "회의 노트..." | simpleai summarize
simpleai commit --git
simpleai classify --text "DB 연결 오류 발생"

</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>makefile

## 파일: `.env.example`
```env
OPENAI_API_KEY=sk-xxx
SIMPLEAI_BACKEND=openai
SIMPLEAI_OPENAI_BASE_URL=https://api.openai.com/v1
SIMPLEAI_OPENAI_RESPONSES_PATH=/responses
SIMPLEAI_OLLAMA_HOST=http://localhost:11434

</code></pre></div></div>
<h2 id="파일-examplesexamplepy">파일: <code class="language-plaintext highlighter-rouge">examples/example.py</code></h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python

def fib(n):
    if n &lt;= 1: return n
    return fib(n-1)+fib(n-2)

</code></pre></div></div>
<h2 id="파일-examplesnotestxt">파일: <code class="language-plaintext highlighter-rouge">examples/notes.txt</code></h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>csharp

We discussed migration steps, risks (downtime), and rollout plan with canary deployments...

</code></pre></div></div>
<h2 id="파일-examplespolicytxt">파일: <code class="language-plaintext highlighter-rouge">examples/policy.txt</code></h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sql

SLA: critical fixes within 24 hours. Minor issues within 7 days.

</code></pre></div></div>
<h2 id="파일-teststest_smokepy">파일: <code class="language-plaintext highlighter-rouge">tests/test_smoke.py</code></h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python

import subprocess

def test_cli_help():
    out = subprocess.check_output(["python","-m","simpleai.cli","translate","-h"], text=True)
    assert "번역" in out

</code></pre></div></div>
<hr />

<h1 id="3-새로운-subcommand를-쉽게-추가하는-구조">3) “새로운 subcommand”를 쉽게 추가하는 구조</h1>

<p>핵심은 <strong><code class="language-plaintext highlighter-rouge">registry.register(name, add_arguments, handler)</code></strong> 입니다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">commands/</code> 폴더에 <code class="language-plaintext highlighter-rouge">*.py</code> 추가 → 모듈 import 시 <code class="language-plaintext highlighter-rouge">register(REGISTRY)</code> 호출</p>
  </li>
  <li>
    <p>외부 패키지에서도 <strong>entry points (<code class="language-plaintext highlighter-rouge">simpleai.commands</code>)</strong>로 등록 가능</p>
  </li>
</ul>

<h2 id="예시-a-내부에-rewrite-추가-파일-simpleaicommandsrewritepy">예시 A: 내부에 <code class="language-plaintext highlighter-rouge">rewrite</code> 추가 (파일 <code class="language-plaintext highlighter-rouge">simpleai/commands/rewrite.py</code>)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python

import argparse
from simpleai.registry import REGISTRY, AppDeps
from simpleai.utils import read_input_text

SYS_PROMPT = (
    "역할: 문장 다듬기 도우미\n"
    "- 한국어를 더 자연스럽고 간결하게 재작성\n"
    "- 의미 보존, 존칭 유지\n"
    "- 출력은 재작성된 문장만\n"
)

def _add(sub):
    sp = sub.add_parser("rewrite", help="문장 다듬기")
    sp.add_argument("--text")
    sp.add_argument("--file")
    return sp

def _handle(args: argparse.Namespace, deps: AppDeps):
    text = read_input_text(args)
    if deps.cfg.backend == "openai":
        out = deps.openai(
            instructions=SYS_PROMPT, user_text=text,
            base_url=deps.cfg.openai.base_url,
            responses_path=deps.cfg.openai.responses_path,
            api_key=deps.cfg.openai.api_key,
            model=deps.cfg.openai.model,
        )
    else:
        out = deps.ollama.chat(
            instructions=SYS_PROMPT, user_text=text,
            host=deps.cfg.ollama.host, chat_path=deps.cfg.ollama.chat_path,
            model=deps.cfg.ollama.model,
        )
    print(out)

def register(registry=REGISTRY):
    registry.register("rewrite", _add, _handle)

register()

</code></pre></div></div>
<blockquote>
  <p>설치 후: <code class="language-plaintext highlighter-rouge">simpleai rewrite --text "회의 일정 정리 부탁드립니다"</code></p>
</blockquote>

<h2 id="예시-b-외부-패키지-플러그인으로-추가">예시 B: 외부 패키지 플러그인으로 추가</h2>

<ol>
  <li>외부 패키지의 <code class="language-plaintext highlighter-rouge">pyproject.toml</code>:
```
toml</li>
</ol>

<p>[project.entry-points."simpleai.commands"]
rewrite = "myplugin.rewrite:register"</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  2. `myplugin/rewrite.py`에 위와 동일한 `register(registry)` 구현

  3. 사용: `pip install myplugin` → `simpleai rewrite ...` 자동 인식

* * *

# 4) ENDPOINT 주소를 내가 등록하는 방법

**우선순위** : `CLI 옵션` &gt; `환경변수` &gt; `YAML 설정` &gt; **기본값**

  * OpenAI

    * CLI: `--openai-base-url`, `--openai-responses-path`, `--model`

    * ENV: `SIMPLEAI_OPENAI_BASE_URL`, `SIMPLEAI_OPENAI_RESPONSES_PATH`, `OPENAI_MODEL`

    * YAML: `openai.base_url`, `openai.responses_path`, `openai.model`

  * Ollama

    * CLI: `--ollama-host`, `--model`

    * ENV: `SIMPLEAI_OLLAMA_HOST`, `OLLAMA_MODEL`, (경로 커스터마이즈) `SIMPLEAI_OLLAMA_CHAT_PATH`, `SIMPLEAI_OLLAMA_GENERATE_PATH`

    * YAML: `ollama.host`, `ollama.chat_path`, `ollama.generate_path`, `ollama.model`

**재현 가능한 설정 예시**
</code></pre></div></div>
<p>bash</p>

<h1 id="openai를-사설-프록시로">OpenAI를 사설 프록시로</h1>
<p>simpleai –backend openai –openai-base-url https://myproxy/v1 –openai-responses-path /responses translate –to en –text "안녕?"</p>

<h1 id="ollama를-원격-호스트로">Ollama를 원격 호스트로</h1>
<p>simpleai –backend ollama –ollama-host http://10.0.0.5:11434 summarize –file examples/notes.txt</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* * *

## 마무리 (요약)

  * **이름 10개** 제공,

  * **패키지 구조 + 전 파일** 제공(실행 가능),

  * **서브커맨드 확장** : 내부 파일 추가 or **entry points 플러그인** ,

  * **ENDPOINT 설정** : CLI·ENV·YAML로 손쉽게 오버라이드.

원하시면 패키지명을 당신 선호안으로 바꿔서 전체 파일을 다시 리렌더링해 드릴게요.

&lt;p class="chat--user" markdown="1"&gt;

miniai로 할게. 사실 사내망 환경에서 사내 gpu서버의 endpoint를 무조건 사용할거야. 그래서 chatgpt 서버나 ollama 세팅은 필요없어. 일단 그냥 커스텀 openai compatible endpoint만 받으면 되고 각 세팅(endpoint 주소, 키, 모델명)은 환경 변수로부터 읽어오도록 다시 작성해줘.

&lt;/p&gt;

좋아요. 요청하신 대로 **사내 GPU 서버의 OpenAI-호환(“chat/completions”) 엔드포인트만** 쓰는 버전으로, **환경 변수에서 엔드포인트/키/모델** 을 읽고, **확장 가능한 서브커맨드 구조** 를 유지한 `miniai` 프로젝트를 제공합니다.  
(간단한 단계 → 전체 코드 → 사용 예 → 서브커맨드 확장 예 순서예요.)

* * *

# 0) 한눈에(개념 단계)

  1. **의존성 최소화** : `requests`만 사용.

  2. **백엔드 단일화** : OpenAI-compatible **Chat Completions** 만 호출(`/v1/chat/completions`).

  3. **환경 변수만** : `MINIAI_API_BASE`, `MINIAI_API_PATH`, `MINIAI_API_KEY`, `MINIAI_MODEL`(필수), `MINIAI_TEMPERATURE`, `MINIAI_TIMEOUT`, `MINIAI_EXTRA_HEADERS`(옵션).

  4. **확장성** : `CommandRegistry` \+ `commands/` 자동 로딩 + (선택) entry points 플러그인.

  5. **UX** : `miniai translate "안녕?"` 처럼 **포지셔널 인자** 지원(`--text/--file/STDIN`도 가능).

* * *

# 1) 환경 변수 (필수/옵션)
</code></pre></div></div>
<p>bash</p>

<h1 id="필수">필수</h1>
<p>export MINIAI_API_BASE="https://llm.company.local/v1"
export MINIAI_API_KEY="sk-<strong>**</strong>**"
export MINIAI_MODEL="my-internal-chat"</p>

<h1 id="선택기본값-표시">선택(기본값 표시)</h1>
<p>export MINIAI_API_PATH="/chat/completions"   # 기본: /chat/completions
export MINIAI_TEMPERATURE="0.2"              # 기본: 0.2
export MINIAI_TIMEOUT="120"                  # 초, 기본: 120</p>
<h1 id="추가-헤더가-필요하면-json으로">추가 헤더가 필요하면 JSON으로</h1>
<p>export MINIAI_EXTRA_HEADERS='{"X-Cluster":"a100","X-Project":"nlp"}'</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* * *

# 2) 프로젝트 구조
</code></pre></div></div>
<p>markdown</p>

<p>miniai/
├─ miniai/
│  ├─ <strong>init</strong>.py
│  ├─ cli.py
│  ├─ registry.py
│  ├─ presets.py
│  ├─ utils.py
│  ├─ backends/
│  │  ├─ <strong>init</strong>.py
│  │  └─ openai_compat.py
│  └─ commands/
│     ├─ <strong>init</strong>.py
│     ├─ translate.py
│     ├─ summarize.py
│     ├─ explain.py
│     ├─ commit.py
│     ├─ todo.py
│     ├─ docstring.py
│     ├─ classify.py
│     └─ rewrite.py          # 새 subcommand 예시
├─ pyproject.toml
├─ README.md
└─ .env.example</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* * *

# 3) 전체 파일

## `miniai/__init__.py`
</code></pre></div></div>
<p>python</p>

<p><strong>all</strong> = ["cli"]
<strong>version</strong> = "0.1.0"</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/presets.py`
</code></pre></div></div>
<p>python</p>

<p>def preset_translate(to="en") -&gt; str:
    return (
        "역할: 고품질 번역기\n"
        f"- 목표 언어: {to}\n"
        "- 의미/뉘앙스 보존, 자연스러운 의역\n"
        "- 출력은 번역문만(주석 금지)\n"
    )</p>

<p>PRESETS = {
    "summarize": (
        "역할: 전문 요약가\n"
        "- 한국어 출력, 불릿 최대 7개, 명사형 간결체\n"
        "- 핵심 주장/근거/위험/다음 액션 우선\n"
    ),
    "explain": (
        "역할: 코드 리뷰어\n"
        "- 한국어 3섹션: [설명] [복잡도] [리팩터링]\n"
        "- 핵심 로직, 시간/공간 복잡도, 개선안\n"
    ),
    "commit": (
        "역할: Conventional Commits 작성기\n"
        "- 한국어, 제목 72자 이내 + 1~2줄 본문\n"
        "- feat/fix/docs/refactor/test/chore 중 선택\n"
        "- 출력은 메시지 본문만\n"
    ),
    "todo": (
        "역할: TODO 추출기\n"
        "- 입력에서 실행 가능한 액션만 '- [ ] ' 체크리스트로 출력\n"
    ),
    "docstring": (
        "역할: 파이썬 Docstring 작성기\n"
        "- 한국어 PEP257 스타일\n"
        "- unified diff 패치 형식(+++ 파일명 포함)\n"
    ),
    "classify": (
        "역할: 간단 이슈 분류기\n"
        "- 입력 한 줄 → JSON {category, priority}\n"
        '- category ∈ {"bug","docs","feature"}, priority ∈ {"high","low"}\n'
        "- 출력은 순수 JSON 한 객체만\n"
    ),
}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/registry.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse, importlib, pkgutil
from typing import Callable, Dict, List
from importlib import metadata</p>

<p>Handler = Callable[[argparse.Namespace, "AppDeps"], None]
Adder = Callable[[argparse._SubParsersAction], argparse.ArgumentParser]</p>

<p>class CommandRegistry:
    def <strong>init</strong>(self):
        self._commands: Dict[str, Dict[str, object]] = {}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def register(self, name: str, add_arguments: Adder, handler: Handler):
    if name in self._commands:
        raise ValueError(f"duplicate command: {name}")
    self._commands[name] = {"add_arguments": add_arguments, "handler": handler}

def build_subparsers(self, sub: argparse._SubParsersAction):
    for name, spec in self._commands.items():
        sp = spec["add_arguments"](sub)
        sp.set_defaults(_handler=spec["handler"])

def names(self) -&gt; List[str]:
    return sorted(self._commands.keys())
</code></pre></div></div>

<p>def autoload_builtin_commands(registry: CommandRegistry):
    import miniai.commands as pkg
    for mod in pkgutil.iter_modules(pkg.<strong>path</strong>, pkg.<strong>name</strong> + "."):
        importlib.import_module(mod.name)</p>

<p>def autoload_plugin_entrypoints(registry: CommandRegistry):
    # 선택: 외부 패키지가 entry points로 등록한 커맨드 자동 로드
    try:
        eps = metadata.entry_points()
        group = eps.select(group="miniai.commands")
    except Exception:
        group = []
    for ep in group:
        register_fn = ep.load()
        register_fn(registry)</p>

<p>class AppDeps:
    def <strong>init</strong>(self, chat_call, presets):
        self.chat_call = chat_call
        self.presets = presets</p>

<p>REGISTRY = CommandRegistry()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/utils.py`
</code></pre></div></div>
<p>python</p>

<p>import os, sys, json, subprocess</p>

<p>def read_input_text(args) -&gt; str:
    # 1) 포지셔널 인자  2) –text  3) –file  4) STDIN
    if getattr(args, "pos_text", None):
        return args.pos_text
    if getattr(args, "text", None):
        return args.text
    if getattr(args, "file", None):
        with open(args.file, "r", encoding="utf-8") as f:
            return f.read()
    if not sys.stdin.isatty():
        return sys.stdin.read()
    raise SystemExit("입력이 없습니다. "miniai <cmd> '텍스트'\" 또는 --text/--file/STDIN을 사용하세요.")</cmd></p>

<p>def git_diff(staged: bool=False) -&gt; str:
    cmd = ["git", "diff", "–staged"] if staged else ["git", "diff"]
    out = subprocess.check_output(cmd, encoding="utf-8", stderr=subprocess.STDOUT)
    if not out.strip():
        raise SystemExit("git diff 결과가 비어 있습니다.")
    return out</p>

<p>def env_or_die(name: str) -&gt; str:
    v = os.getenv(name)
    if not v:
        raise SystemExit(f"환경변수 {name} 가 필요합니다.")
    return v</p>

<p>def load_env_config():
    base = env_or_die("MINIAI_API_BASE").rstrip("/")
    path = os.getenv("MINIAI_API_PATH", "/chat/completions")
    key  = env_or_die("MINIAI_API_KEY")
    model= env_or_die("MINIAI_MODEL")
    temp = float(os.getenv("MINIAI_TEMPERATURE", "0.2"))
    timeout = int(os.getenv("MINIAI_TIMEOUT", "120"))
    extra_headers = os.getenv("MINIAI_EXTRA_HEADERS")
    headers = {}
    if extra_headers:
        try:
            headers = json.loads(extra_headers)
        except Exception:
            raise SystemExit("MINIAI_EXTRA_HEADERS 값은 JSON 이어야 합니다.")
    return {
        "url": base + path,
        "api_key": key,
        "model": model,
        "temperature": temp,
        "timeout": timeout,
        "extra_headers": headers,
    }</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/backends/__init__.py`
</code></pre></div></div>
<p>python</p>

<h1 id="placeholder">placeholder</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/backends/openai_compat.py`
</code></pre></div></div>
<p>python</p>

<p>import json, requests</p>

<p>def chat_completions(url: str, api_key: str, model: str, system_text: str, user_text: str,
                     *, temperature: float = 0.2, timeout: int = 120,
                     extra_headers: dict | None = None, json_object: bool = False) -&gt; str:
    headers = {"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"}
    if extra_headers:
        headers.update(extra_headers)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>payload = {
    "model": model,
    "messages": [
        {"role": "system", "content": system_text},
        {"role": "user", "content": user_text},
    ],
    "temperature": temperature,
}
# 일부 서버는 json_object 지원. (미지원이면 그냥 무시되거나 400)
if json_object:
    payload["response_format"] = {"type": "json_object"}

r = requests.post(url, headers=headers, data=json.dumps(payload), timeout=timeout)
if r.status_code != 200:
    raise SystemExit(f"[miniai] HTTP {r.status_code}: {r.text}")

data = r.json()
# 표준: choices[0].message.content
try:
    return data["choices"][0]["message"]["content"]
except Exception:
    # 비표준 대응
    return data.get("content") or data.get("text") or json.dumps(data, ensure_ascii=False)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/commands/__init__.py`
</code></pre></div></div>
<p>python</p>

<h1 id="각-모듈이-import될-때-registry에-자신을-등록합니다">각 모듈이 import될 때 registry에 자신을 등록합니다.</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>### 공통 패턴(각 커맨드가 이 패턴을 따릅니다)

  * 포지셔널 인자 `pos_text` \+ `--text/--file`

  * `deps.chat_call(...)`로 호출

## `miniai/commands/translate.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from miniai.registry import REGISTRY, AppDeps
from miniai.utils import read_input_text
from miniai.presets import preset_translate</p>

<p>def _add(sub):
    sp = sub.add_parser("translate", help="번역")
    sp.add_argument("pos_text", nargs="?", help="입력 텍스트(포지셔널)")
    sp.add_argument("–text")
    sp.add_argument("–file")
    sp.add_argument("–to", default="en", help="목표 언어 코드(기본=en)")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = preset_translate(to=args.to)
    text = read_input_text(args)
    out = deps.chat_call(system_text=sys_prompt, user_text=text, json_object=False)
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("translate", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/commands/summarize.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from miniai.registry import REGISTRY, AppDeps
from miniai.utils import read_input_text
from miniai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("summarize", help="요약(불릿 7)")
    sp.add_argument("pos_text", nargs="?")
    sp.add_argument("–text"); sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["summarize"]
    text = read_input_text(args)
    out = deps.chat_call(system_text=sys_prompt, user_text=text, json_object=False)
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("summarize", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/commands/explain.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from miniai.registry import REGISTRY, AppDeps
from miniai.utils import read_input_text
from miniai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("explain", help="코드 설명+개선")
    sp.add_argument("pos_text", nargs="?")
    sp.add_argument("–text"); sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["explain"]
    text = read_input_text(args)
    out = deps.chat_call(system_text=sys_prompt, user_text=text, json_object=False)
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("explain", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/commands/commit.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from miniai.registry import REGISTRY, AppDeps
from miniai.utils import read_input_text, git_diff
from miniai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("commit", help="Conventional Commits 생성")
    sp.add_argument("pos_text", nargs="?")
    sp.add_argument("–text"); sp.add_argument("–file")
    sp.add_argument("–git", action="store_true")
    sp.add_argument("–staged", action="store_true")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["commit"]
    if args.git or args.staged:
        text = git_diff(staged=args.staged)
    else:
        text = read_input_text(args)
    user_msg = f"[변경점]\n{text}"
    out = deps.chat_call(system_text=sys_prompt, user_text=user_msg, json_object=False)
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("commit", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/commands/todo.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from miniai.registry import REGISTRY, AppDeps
from miniai.utils import read_input_text
from miniai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("todo", help="문서에서 TODO 추출")
    sp.add_argument("pos_text", nargs="?")
    sp.add_argument("–text"); sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["todo"]
    text = read_input_text(args)
    out = deps.chat_call(system_text=sys_prompt, user_text=text, json_object=False)
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("todo", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/commands/docstring.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse
from miniai.registry import REGISTRY, AppDeps
from miniai.utils import read_input_text
from miniai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("docstring", help="파이썬 파일 Docstring 패치 제안")
    sp.add_argument("pos_text", nargs="?")
    sp.add_argument("–text"); sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["docstring"]
    text = read_input_text(args)
    user_msg = f"[파일]\n{text}"
    out = deps.chat_call(system_text=sys_prompt, user_text=user_msg, json_object=False)
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("docstring", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/commands/classify.py`
</code></pre></div></div>
<p>python</p>

<p>import argparse, json, re
from miniai.registry import REGISTRY, AppDeps
from miniai.utils import read_input_text
from miniai.presets import PRESETS</p>

<p>def _add(sub):
    sp = sub.add_parser("classify", help="문장을 JSON으로 라벨링(category/priority)")
    sp.add_argument("pos_text", nargs="?")
    sp.add_argument("–text"); sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    sys_prompt = PRESETS["classify"]
    text = read_input_text(args).strip()
    # json_object 모드 시도(미지원 서버도 있어 폴백 처리)
    raw = deps.chat_call(system_text=sys_prompt, user_text=text, json_object=True)
    try:
        print(json.dumps(json.loads(raw), ensure_ascii=False))
        return
    except Exception:
        # 응답 안에 JSON이 섞여 있으면 추출
        m = re.search(r"{.*}", raw, re.S)
        if m:
            try:
                print(json.dumps(json.loads(m.group(0)), ensure_ascii=False))
                return
            except Exception:
                pass
        print(raw)  # 최후 폴백
        return</p>

<p>def register(registry=REGISTRY):
    registry.register("classify", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/commands/rewrite.py` (새 subcommand 예시)
</code></pre></div></div>
<p>python</p>

<p>import argparse
from miniai.registry import REGISTRY, AppDeps
from miniai.utils import read_input_text</p>

<p>SYS_PROMPT = (
    "역할: 문장 다듬기 도우미\n"
    "- 한국어를 더 자연스럽고 간결하게 재작성\n"
    "- 의미 보존, 존칭 유지\n"
    "- 출력은 재작성된 문장만\n"
)</p>

<p>def _add(sub):
    sp = sub.add_parser("rewrite", help="문장 다듬기")
    sp.add_argument("pos_text", nargs="?")
    sp.add_argument("–text"); sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    text = read_input_text(args)
    out = deps.chat_call(system_text=SYS_PROMPT, user_text=text, json_object=False)
    print(out)</p>

<p>def register(registry=REGISTRY):
    registry.register("rewrite", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `miniai/cli.py`
</code></pre></div></div>
<p>python</p>

<p>#!/usr/bin/env python3
import argparse
from miniai.registry import REGISTRY, autoload_builtin_commands, autoload_plugin_entrypoints, AppDeps
from miniai.backends.openai_compat import chat_completions
from miniai.utils import load_env_config
from miniai import presets as presets_mod</p>

<p>def build_parser():
    p = argparse.ArgumentParser(prog="miniai", description="Minimal AI CLI (OpenAI-compatible only)")
    sub = p.add_subparsers(dest="command", required=True)
    return p, sub</p>

<p>def main():
    parser, sub = build_parser()
    autoload_builtin_commands(REGISTRY)
    autoload_plugin_entrypoints(REGISTRY)
    REGISTRY.build_subparsers(sub)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>args = parser.parse_args()
env = load_env_config()

def chat_call(system_text: str, user_text: str, json_object: bool=False) -&gt; str:
    return chat_completions(
        url=env["url"],
        api_key=env["api_key"],
        model=env["model"],
        system_text=system_text,
        user_text=user_text,
        temperature=env["temperature"],
        timeout=env["timeout"],
        extra_headers=env["extra_headers"],
        json_object=json_object,
    )

deps = AppDeps(chat_call=chat_call, presets=presets_mod)

if not hasattr(args, "_handler"):
    parser.print_help(); return
args._handler(args, deps)
</code></pre></div></div>

<p>if <strong>name</strong> == "<strong>main</strong>":
    main()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `pyproject.toml`
</code></pre></div></div>
<p>toml</p>

<p>[project]
name = "miniai"
version = "0.1.0"
description = "Minimal, extensible AI CLI for OpenAI-compatible endpoints"
authors = [{name="you"}]
readme = "README.md"
requires-python = "&gt;=3.9"
dependencies = ["requests"]</p>

<p>[project.scripts]
miniai = "miniai.cli:main"</p>

<h1 id="선택-외부-패키지가-새-커맨드를-플러그인으로-배포할-때">선택: 외부 패키지가 새 커맨드를 플러그인으로 배포할 때</h1>
<p>[project.entry-points."miniai.commands"]</p>
<h1 id="예-외부-패키지에서-rewrite--mypluginrewriteregister">예) 외부 패키지에서: rewrite = "myplugin.rewrite:register"</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `.env.example`
</code></pre></div></div>
<p>env</p>

<h1 id="필수-1">필수</h1>
<p>MINIAI_API_BASE=https://llm.company.local/v1
MINIAI_API_KEY=sk-xxxxxxxx
MINIAI_MODEL=my-internal-chat</p>

<h1 id="선택">선택</h1>
<p>MINIAI_API_PATH=/chat/completions
MINIAI_TEMPERATURE=0.2
MINIAI_TIMEOUT=120</p>
<h1 id="json-문자열">JSON 문자열</h1>
<p>MINIAI_EXTRA_HEADERS={"X-Cluster":"a100","X-Project":"nlp"}</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## `README.md` (요약)
</code></pre></div></div>
<p>md</p>

<h1 id="miniai">miniai</h1>
<p>사내 OpenAI-호환 엔드포인트만 사용하는 경량 AI CLI.</p>

<h2 id="설치-1">설치</h2>
<p>pip install -e .</p>

<h2 id="환경-변수">환경 변수</h2>
<p>MINIAI_API_BASE, MINIAI_API_KEY, MINIAI_MODEL (필수)<br />
기타: MINIAI_API_PATH=/chat/completions, MINIAI_TEMPERATURE=0.2, MINIAI_TIMEOUT=120, MINIAI_EXTRA_HEADERS='{"K":"V"}'</p>

<h2 id="사용-예">사용 예</h2>
<p>miniai translate "안녕?" –to en
echo "회의 노트…" | miniai summarize
miniai commit –git
miniai classify "DB 연결 오류 발생"</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* * *

# 4) 새 서브커맨드 추가 방법(확장성)

  * **내부 추가** : `miniai/commands/`에 `foo.py` 생성 → `register(REGISTRY)` 호출 → 자동 인식.

  * **외부 플러그인** : 다른 패키지에서 `pyproject.toml`의 `[project.entry-points."miniai.commands"]`에 등록 → 설치 시 자동 로드.

### 예: `foo` 커맨드(간단 생성기)
</code></pre></div></div>
<p>python</p>

<h1 id="파일-miniaicommandsfoopy">파일: miniai/commands/foo.py</h1>
<p>import argparse
from miniai.registry import REGISTRY, AppDeps</p>

<p>SYS = "역할: 짧은 한 줄 생성기\n- 한국어 한 줄만 출력"</p>

<p>def _add(sub):
    sp = sub.add_parser("foo", help="한 줄 생성")
    sp.add_argument("pos_text", nargs="?", help="프롬프트")
    sp.add_argument("–text"); sp.add_argument("–file")
    return sp</p>

<p>def _handle(args: argparse.Namespace, deps: AppDeps):
    prompt = args.pos_text or args.text or "예시 문장"
    print(deps.chat_call(system_text=SYS, user_text=prompt, json_object=False))</p>

<p>def register(registry=REGISTRY):
    registry.register("foo", _add, _handle)</p>

<p>register()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* * *

# 5) 빠른 테스트
</code></pre></div></div>
<p>bash</p>

<p>pip install -e .</p>
<h1 id="환경-변수-설정위-envexample-참고">환경 변수 설정(위 .env.example 참고)</h1>

<p>miniai translate "안녕?" –to en
miniai summarize "마이그레이션 일정과 위험…"
cat my.py | miniai explain
miniai commit –git</p>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">작업 폴더 구성 추천</title><link href="https://hvppyarchive.github.io/misc/work-directory-structure/" rel="alternate" type="text/html" title="작업 폴더 구성 추천" /><published>2025-08-26T18:45:35+09:00</published><updated>2025-08-26T18:45:35+09:00</updated><id>https://hvppyarchive.github.io/misc/work-directory-structure</id><content type="html" xml:base="https://hvppyarchive.github.io/misc/work-directory-structure/"><![CDATA[<p class="chat--user">

회사에서 작업 폴더 구성을 도와줘. 뭔가 작업 폴더를 꾸미는 것에 대한 일반적인 추천 같은게 있을까?

</p>

<p>좋아—회사에서 쓸 “작업 폴더”는 한 번 잘 짜두면 팀 생산성이 확 달라져요. 아래처럼 <strong>단계별로</strong> 만들면 실패 확률이 낮습니다.</p>

<h1 id="1-먼저-원칙부터-정하기-짧고-강력한-룰-8가지">1) 먼저 원칙부터 정하기 (짧고 강력한 룰 8가지)</h1>

<ol>
  <li>
    <p><strong>최대 깊이 3단계</strong> : <code class="language-plaintext highlighter-rouge">팀 → 프로젝트 → 작업물</code>까지만. (깊어질수록 찾기·권한 관리가 어려워져요)</p>
  </li>
  <li>
    <p><strong>정렬되는 이름</strong> : 접두 번호(<code class="language-plaintext highlighter-rouge">00,10,20…</code>) + 한글/영문 키워드.</p>
  </li>
  <li>
    <p><strong>날짜 형식 고정</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> (예: <code class="language-plaintext highlighter-rouge">2025-08-26_회의록.md</code>)</p>
  </li>
  <li>
    <p><strong>버전 규칙</strong> : 최종본 금지. <code class="language-plaintext highlighter-rouge">v001, v002…</code> 또는 <code class="language-plaintext highlighter-rouge">draft/approved</code> 두 트랙.</p>
  </li>
  <li>
    <p><strong>원본 vs 산출물 분리</strong> : <code class="language-plaintext highlighter-rouge">source</code>(편집파일) / <code class="language-plaintext highlighter-rouge">export</code>(배포파일).</p>
  </li>
  <li>
    <p><strong>권한 레벨 분리</strong> : <code class="language-plaintext highlighter-rouge">Shared</code>(공유) / <code class="language-plaintext highlighter-rouge">Restricted</code>(민감·임원용) / <code class="language-plaintext highlighter-rouge">Private</code>(개인).</p>
  </li>
  <li>
    <p><strong>메타정보는 README에</strong> : 폴더마다 <code class="language-plaintext highlighter-rouge">README.md</code>로 목적·담당·태그 기록.</p>
  </li>
  <li>
    <p><strong>아카이브 주기</strong> : 완료 30일 후 <code class="language-plaintext highlighter-rouge">Archive/</code>로 이동, 1년 후 장기보관.</p>
  </li>
</ol>

<h1 id="2-상위-구조-선택-3가지-중-택1-또는-하이브리드">2) 상위 구조 선택 (3가지 중 택1 또는 하이브리드)</h1>

<ul>
  <li>
    <p><strong>프로젝트 중심(권장: 프로젝트형 조직)</strong><br />
<code class="language-plaintext highlighter-rouge">10_Projects/PRJ-코드_이름</code> 아래에 표준 하위 폴더.</p>
  </li>
  <li>
    <p><strong>기능 중심(권장: 기능별 팀조직)</strong><br />
<code class="language-plaintext highlighter-rouge">20_Product, 30_Design, 40_Engineering…</code> 아래에 연간/분기 폴더.</p>
  </li>
  <li>
    <p><strong>개인 작업공간 + 공유 허브(혼합형)</strong><br />
<code class="language-plaintext highlighter-rouge">90_People/홍길동/workspace</code>는 자유롭게, 산출물만 공유 폴더로 승격.</p>
  </li>
</ul>

<h1 id="3-바로-쓰는-표준-템플릿">3) 바로 쓰는 표준 템플릿</h1>

<p>아래 트리는 <strong>대부분 회사에서 바로 적용</strong> 가능한 최소·표준 구성입니다.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="kt">Company</span>
<span class="err">├─</span> <span class="mo">00</span><span class="n">_Admin</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="mo">01</span><span class="n">_Policies</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="mo">02</span><span class="n">_Templates</span>   <span class="err">←</span> <span class="n">문서</span><span class="sr">/슬라이드/</span><span class="n">회의록</span> <span class="n">템플릿</span>
<span class="err">├─</span> <span class="mi">10</span><span class="n">_Projects</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="kt">PRJ</span><span class="o">-</span><span class="mi">2025</span><span class="o">-</span><span class="mo">012</span><span class="n">_신제품출시</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="mo">01</span><span class="n">_Plan</span>        <span class="err">←</span> <span class="n">일정</span><span class="sr">/OKR/</span><span class="n">예산</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="mo">02</span><span class="n">_Research</span>    <span class="err">←</span> <span class="n">리서치</span><span class="p">,</span> <span class="n">경쟁</span><span class="o">/</span><span class="n">고객</span> <span class="n">인터뷰</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="mo">03</span><span class="n">_Design</span>
<span class="err">│</span>     <span class="err">│</span>  <span class="err">├─</span> <span class="n">source</span>
<span class="err">│</span>     <span class="err">│</span>  <span class="err">└─</span> <span class="n">export</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="mo">04</span><span class="n">_Build</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="mo">05</span><span class="n">_Test</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="mo">06</span><span class="n">_Release</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="mi">80</span><span class="n">_Meetings</span>    <span class="err">←</span> <span class="mi">2025</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">26</span><span class="n">_킥오프_메모</span><span class="o">.</span><span class="n">md</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="mi">90</span><span class="n">_Archive</span>
<span class="err">│</span>     <span class="err">└─</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span>
<span class="err">├─</span> <span class="mi">20</span><span class="n">_Product</span>
<span class="err">├─</span> <span class="mi">30</span><span class="n">_SalesMarketing</span>
<span class="err">├─</span> <span class="mi">40</span><span class="n">_Engineering</span>
<span class="err">├─</span> <span class="mi">50</span><span class="n">_Data</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="mo">01</span><span class="n">_Raw</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="mo">02</span><span class="n">_Processed</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="mo">03</span><span class="n">_Reports</span>
<span class="err">├─</span> <span class="mi">60</span><span class="n">_SharedAssets</span>     <span class="err">←</span> <span class="n">로고</span><span class="p">,</span> <span class="n">폰트</span><span class="p">,</span> <span class="n">컬러가이드</span> <span class="n">등</span> <span class="n">공용</span>
<span class="err">├─</span> <span class="mi">70</span><span class="n">_Restricted</span>       <span class="err">←</span> <span class="n">계약서</span><span class="sr">/급여/</span><span class="nf">법무</span><span class="p">(</span><span class="n">권한</span> <span class="n">제한</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">90</span><span class="n">_People</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">홍길동</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">workspace</span>
<span class="err">│</span>     <span class="err">└─</span> <span class="n">handover</span>      <span class="err">←</span> <span class="n">인수인계용</span>
<span class="err">└─</span> <span class="mi">99</span><span class="n">_Archive</span>
</code></pre></div></div>

<h1 id="4-파일폴더-네이밍-규칙-복붙해서-팀-규칙으로">4) 파일·폴더 네이밍 규칙 (복붙해서 팀 규칙으로)</h1>

<ul>
  <li>
    <p><strong>폴더</strong> : <code class="language-plaintext highlighter-rouge">10_Projects</code>, <code class="language-plaintext highlighter-rouge">PRJ-2025-012_신제품출시</code></p>
  </li>
  <li>
    <p><strong>문서</strong> : <code class="language-plaintext highlighter-rouge">2025-08-26_프로젝트킥오프_회의록_v001.md</code></p>
  </li>
  <li>
    <p><strong>디자인</strong> :</p>

    <ul>
      <li>
        <p>원본: <code class="language-plaintext highlighter-rouge">홈페이지KV_v003_source.psd</code></p>
      </li>
      <li>
        <p>산출: <code class="language-plaintext highlighter-rouge">홈페이지KV_v003_1080x1080_export.png</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>데이터</strong> : <code class="language-plaintext highlighter-rouge">2025-08-월간DAU_v004_approved.csv</code></p>
  </li>
</ul>

<h1 id="5-폴더별-readme-템플릿-복붙">5) 폴더별 README 템플릿 (복붙)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>less

# 폴더 목적
- 신제품 출시 프로젝트 산출물 중앙 저장소

# 담당/권한
- 오너: 홍길동(@id) / 편집 권한: PM팀, 디자인팀 / 열람: 전사

# 구조
- 01_Plan: 일정·OKR·예산
- 02_Research: 고객/경쟁 리서치
- 03_Design: source/export 분리
...

# 공통 규칙
- 파일명: YYYY-MM-DD_제목_v### (source/export 구분)
- 완료 30일 후 90_Archive로 이동
- 의사결정은 /01_Plan/ADR에 기록
</code></pre></div></div>

<h1 id="6-협업운영-습관-실무-팁-8가지">6) 협업·운영 습관 (실무 팁 8가지)</h1>

<ol>
  <li>
    <p><strong>결정 기록(ADR)</strong> : 중요한 결정은 <code class="language-plaintext highlighter-rouge">/01_Plan/ADR/2025-08-26_결정_요약.md</code>.</p>
  </li>
  <li>
    <p><strong>회의록 표준화</strong> : <code class="language-plaintext highlighter-rouge">회의 목적 · 참석자 · 요약 · 액션아이템(담당/기한)</code> 섹션 고정.</p>
  </li>
  <li>
    <p><strong>액션 아이템은 도구로 이관</strong> : 회의록 내 체크리스트는 JIRA/Asana로 바로 링크.</p>
  </li>
  <li>
    <p><strong>링크만 저장</strong> : SaaS 산출물(Google Docs 등)은 링크 파일 <code class="language-plaintext highlighter-rouge">.url</code>로 두되, <strong>최종 PDF</strong> 도 함께 보관.</p>
  </li>
  <li>
    <p><strong>민감정보 분리</strong> : 계약/급여/개인정보는 <code class="language-plaintext highlighter-rouge">70_Restricted</code>로만. 접근 로그 관리.</p>
  </li>
  <li>
    <p><strong>아카이브 의식화</strong> : 매월 말 “폴더 다이어트” 30분—<code class="language-plaintext highlighter-rouge">Archive</code>로 이동 + README 갱신.</p>
  </li>
  <li>
    <p><strong>템플릿 먼저</strong> : 새 프로젝트 시작 시 <code class="language-plaintext highlighter-rouge">02_Templates</code>에서 복제해 시작.</p>
  </li>
  <li>
    <p><strong>검색 친화 태그</strong> : 파일 첫 줄에 <code class="language-plaintext highlighter-rouge">#태그</code>(예: <code class="language-plaintext highlighter-rouge">#런칭 #광고 #DAU</code>)를 넣어 검색 품질↑.</p>
  </li>
</ol>

<h1 id="7-역할별-미세튜닝">7) 역할별 미세튜닝</h1>

<ul>
  <li>
    <p><strong>PM/기획</strong> : <code class="language-plaintext highlighter-rouge">/01_Plan</code>에 <code class="language-plaintext highlighter-rouge">Roadmap.xlsx, KPI_Dashboard.pdf, ADR/</code> 고정 폴더.</p>
  </li>
  <li>
    <p><strong>디자인</strong> : <code class="language-plaintext highlighter-rouge">source/export</code>, <code class="language-plaintext highlighter-rouge">fonts/brand/refs</code> 3분리, 내보내기 규격 프리셋 같이 저장.</p>
  </li>
  <li>
    <p><strong>개발</strong> : 코드 저장소와 산출물 폴더는 링크로 연결(<code class="language-plaintext highlighter-rouge">docs/</code>, <code class="language-plaintext highlighter-rouge">release_notes/</code>). 빌드 산출물은 <code class="language-plaintext highlighter-rouge">06_Release</code>.</p>
  </li>
  <li>
    <p><strong>세일즈/마케팅</strong> : <code class="language-plaintext highlighter-rouge">campaigns/YYYY-QN/캠페인명/</code>로 분기 관리, 모든 크리에이티브는 <code class="language-plaintext highlighter-rouge">export</code>에만 배포.</p>
  </li>
</ul>

<hr />

<p>원하면, <strong>당신 팀의 업종/툴 체인(예: Google Drive/OneDrive, Notion, Jira, Figma)</strong>에 맞춰 위 구조를 1:1로 커스터마이즈해서 드릴게요. “팀 구성/업무 유형/민감자료 범위”만 알려주면 곧바로 맞춤 트리 만들어줄게요.</p>

<p class="chat--user">

나 혼자 쓰는 거긴 해

</p>

<p>좋아, “혼자 쓰는 회사 작업 폴더”라면 <strong>빠른 캡처 → 쉽게 찾기 → 가벼운 유지보수</strong> 만 잘 되면 끝이에요. 아래대로 <strong>단계별</strong> 로 세팅해보세요.</p>

<h1 id="1-목표-3가지-먼저-정리">1) 목표 3가지 먼저 정리</h1>

<ol>
  <li>
    <p><strong>캡처 속도</strong> : 생각/파일을 즉시 던져놓을 곳이 있어야 함(= <code class="language-plaintext highlighter-rouge">00_Inbox</code>).</p>
  </li>
  <li>
    <p><strong>검색 용이</strong> : 규칙적 네이밍 + 얕은 깊이(최대 3단).</p>
  </li>
  <li>
    <p><strong>관리 최소화</strong> : 주 1회 아카이브만 하면 버틸 구조.</p>
  </li>
</ol>

<h1 id="2-추천-상위-구조-parasolo">2) 추천 상위 구조 (PARA+Solo)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="kt">Work</span> <span class="p">(</span><span class="n">루트</span> <span class="n">폴더</span><span class="p">)</span>
<span class="err">├─</span> <span class="mo">00</span><span class="n">_Inbox</span>           <span class="err">←</span> <span class="n">급하게</span> <span class="n">던져두는</span> <span class="nf">임시함</span> <span class="p">(</span><span class="n">매일</span><span class="o">/</span><span class="n">격일</span> <span class="n">비우기</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">10</span><span class="n">_Today</span>           <span class="err">←</span> <span class="n">오늘</span> <span class="nv">집중</span><span class="p">:</span> <span class="kt">WIP</span><span class="p">,</span> <span class="n">임시</span> <span class="n">노트</span>
<span class="err">├─</span> <span class="mi">20</span><span class="n">_Projects</span>        <span class="err">←</span> <span class="n">끝나면</span> <span class="kt">Archive로</span> <span class="n">이동</span>
<span class="err">├─</span> <span class="mi">30</span><span class="n">_Areas</span>           <span class="err">←</span> <span class="n">역할</span><span class="o">/</span><span class="nf">지속업무</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">리포트</span><span class="p">,</span> <span class="n">운영</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">40</span><span class="n">_Resources</span>       <span class="err">←</span> <span class="nf">참고자료</span><span class="p">(</span><span class="n">매뉴얼</span><span class="p">,</span> <span class="n">규정</span><span class="p">,</span> <span class="n">레퍼런스</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">50</span><span class="n">_Snippets</span>        <span class="err">←</span> <span class="n">텍스트</span> <span class="n">스니펫</span><span class="sr">/스크립트/</span><span class="n">쿼리</span> <span class="n">모음</span>
<span class="err">├─</span> <span class="mi">60</span><span class="n">_Assets</span>          <span class="err">←</span> <span class="n">로고</span><span class="sr">/템플릿/</span><span class="n">브랜드</span> <span class="n">리소스</span>
<span class="err">├─</span> <span class="mi">70</span><span class="n">_Exports</span>         <span class="err">←</span> <span class="n">외부</span> <span class="nf">전달본</span><span class="p">(</span><span class="kt">PDF</span><span class="p">,</span> <span class="kt">PPT</span><span class="p">,</span> <span class="n">이미지</span><span class="p">)</span>
<span class="err">└─</span> <span class="mi">99</span><span class="n">_Archive</span>         <span class="err">←</span> <span class="n">완료</span> <span class="n">프로젝트</span><span class="err">·</span><span class="n">옛</span> <span class="n">참고자료</span>
</code></pre></div></div>

<ul>
  <li><strong>개념</strong> : Projects(유한), Areas(지속), Resources(참고), Archive(보관) + 혼자쓰는 맛을 위한 <code class="language-plaintext highlighter-rouge">Today/Inbox/Snippets/Exports</code>.</li>
</ul>

<h1 id="3-네이밍-규칙짧고-강력">3) 네이밍 규칙(짧고 강력)</h1>

<ul>
  <li>
    <p><strong>날짜</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD</code> (예: <code class="language-plaintext highlighter-rouge">2025-08-26_주간리포트.md</code>)</p>
  </li>
  <li>
    <p><strong>버전</strong> : <code class="language-plaintext highlighter-rouge">_v001, v002…</code> (최종본 금지)</p>
  </li>
  <li>
    <p><strong>프로젝트 폴더</strong> : <code class="language-plaintext highlighter-rouge">PRJ-YYYY-번호_짧은이름</code> (예: <code class="language-plaintext highlighter-rouge">PRJ-2025-012_런칭준비</code>)</p>
  </li>
  <li>
    <p><strong>정렬용 접두</strong> : 폴더는 <code class="language-plaintext highlighter-rouge">00,10,20…</code> 사용 (이미 반영)</p>
  </li>
</ul>

<h1 id="4-프로젝트-폴더-템플릿복붙">4) 프로젝트 폴더 템플릿(복붙)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sr">/20_Projects/</span><span class="kt">PRJ</span><span class="o">-</span><span class="mi">2025</span><span class="o">-</span><span class="mo">012</span><span class="n">_런칭준비</span>
<span class="err">├─</span> <span class="mo">01</span><span class="n">_Plan</span>        <span class="err">←</span> <span class="n">목표</span><span class="sr">/타임라인/</span><span class="kt">OKR</span>
<span class="err">├─</span> <span class="mo">02</span><span class="n">_Work</span>        <span class="err">←</span> <span class="nf">실작업</span><span class="p">(</span><span class="n">문서</span><span class="p">,</span> <span class="n">스프레드시트</span> <span class="n">등</span><span class="p">)</span>
<span class="err">├─</span> <span class="mo">03</span><span class="n">_Meetings</span>    <span class="err">←</span> <span class="nf">회의노트</span><span class="p">(</span><span class="n">날짜_제목</span><span class="o">.</span><span class="n">md</span><span class="p">)</span>
<span class="err">├─</span> <span class="mo">04</span><span class="n">_Refs</span>        <span class="err">←</span> <span class="n">링크모음</span><span class="o">/</span><span class="nf">연구자료</span><span class="p">(</span><span class="n">요약</span> <span class="n">필수</span><span class="p">)</span>
<span class="err">├─</span> <span class="n">export</span>         <span class="err">←</span> <span class="nf">대외공유본</span><span class="p">(</span><span class="kt">PDF</span><span class="o">/</span><span class="n">이미지</span><span class="p">)</span>
<span class="err">└─</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span>
</code></pre></div></div>

<p><strong>README.md 템플릿</strong></p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># 목적</span>
<span class="p">-</span> (한 줄 요약) 런칭 준비 전 과정 관리

<span class="gh"># 범위/완료조건</span>
<span class="p">-</span> (예) 9/30까지 광고·CS·릴리즈 노트 확정

<span class="gh"># 링크</span>
<span class="p">-</span> 기획 문서: ...
<span class="p">-</span> 대시보드: ...

<span class="gh"># 진행 현황(요약)</span>
<span class="p">-</span> 2025-08-26: 킥오프 완료, 메시지 프레임 확정

<span class="gh"># 다음 액션(담당/기한)</span>
<span class="p">-</span> 배너 시안 v002 (나 / 08-28)
</code></pre></div></div>

<h1 id="5-개인-작업-루틴하루주간월간">5) 개인 작업 루틴(하루·주간·월간)</h1>

<p><strong>매일</strong></p>

<ol>
  <li>
    <p><strong>캡처</strong> : 모든 파일/메모는 <code class="language-plaintext highlighter-rouge">00_Inbox</code>에 던지기.</p>
  </li>
  <li>
    <p><strong>집중 공간</strong> : 당일 작업은 <code class="language-plaintext highlighter-rouge">10_Today</code>에서 처리(완료/중간산출물은 해당 프로젝트로 이동).</p>
  </li>
  <li>
    <p><strong>로그</strong> : <code class="language-plaintext highlighter-rouge">30_Areas/worklog/2025/2025-08/2025-08-26.md</code>에 5줄 요약.</p>
  </li>
</ol>

<p><strong>주 1회(금요일 15분)</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">00_Inbox</code> 비우기 → <code class="language-plaintext highlighter-rouge">20_Projects</code> 또는 <code class="language-plaintext highlighter-rouge">40_Resources</code>로 분류.</p>
  </li>
  <li>
    <p>끝난 프로젝트는 <code class="language-plaintext highlighter-rouge">99_Archive</code>로 이동.</p>
  </li>
</ul>

<p><strong>월 1회(첫 영업일 20분)</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">40_Resources</code> 중 구식 자료는 아카이브.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">50_Snippets</code> 정리(재사용 가능한 제목으로 변경).</p>
  </li>
</ul>

<h1 id="6-자주-쓰는-노트-템플릿-2종">6) 자주 쓰는 노트 템플릿 2종</h1>

<p><strong>회의 노트</strong> (<code class="language-plaintext highlighter-rouge">03_Meetings/2025-08-26_파트너_콜.md</code>)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 목적</span>
<span class="c"># 요약(3줄)</span>
<span class="c"># 결정사항</span>
<span class="c"># 액션(담당/기한)</span>
<span class="c"># 참고 링크</span>
</code></pre></div></div>

<p><strong>일일 작업로그</strong> (<code class="language-plaintext highlighter-rouge">worklog/2025/2025-08/2025-08-26.md</code>)</p>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gu">## 오늘 3줄 요약</span>
<span class="p">-</span> 
<span class="gu">## 집중 작업(링크)</span>
<span class="p">-</span> 
<span class="gu">## 배운 점 / 이슈</span>
<span class="p">-</span> 
<span class="gu">## 내일 첫 태스크</span>
<span class="p">-</span> 
</code></pre></div></div>

<h1 id="7-단독-사용에-딱-맞는-팁">7) 단독 사용에 딱 맞는 팁</h1>

<ul>
  <li>
    <p><strong>링크만 두지 말고 “최종 PDF”도 함께</strong> <code class="language-plaintext highlighter-rouge">export</code>에 저장(나중에 권한 문제 방지).</p>
  </li>
  <li>
    <p><strong>검색 키워드</strong> 를 문서 첫 줄에 넣기: <code class="language-plaintext highlighter-rouge">tags: #런칭 #광고 #대시보드</code>.</p>
  </li>
  <li>
    <p><strong>스니펫 관리</strong> : <code class="language-plaintext highlighter-rouge">50_Snippets/sql</code>, <code class="language-plaintext highlighter-rouge">50_Snippets/text</code>, <code class="language-plaintext highlighter-rouge">50_Snippets/bash</code>로 분리.</p>
  </li>
  <li>
    <p><strong>깊이는 3단 이하</strong> 만 유지(찾기 속도↓ 방지).</p>
  </li>
  <li>
    <p><strong>바탕화면 금지, 북마크화면 2개</strong> 만: <code class="language-plaintext highlighter-rouge">00_Inbox</code>, <code class="language-plaintext highlighter-rouge">10_Today</code>.</p>
  </li>
</ul>

<hr />

<p>원하면 지금 구조를 <strong>당신 이름/업무에 맞춰 바로 커스터마이즈</strong> 해서 트리까지 만들어줄게요. (예: 직무/툴—기획, 데이터, 디자인—에 맞춘 하위 폴더와 스니펫 기본 세트)</p>

<p class="chat--user">

주 업무는 데스크탑 애플리케이션 툴 개발이야(파이썬 패키지 형태), 그리고 교육 자료나 논문 자료를 모을 수 있는 곳도 있으면 좋겠어. 그리고 필요한 툴 설치 공간도 있으면 좋겠어. 그리고 환경 세팅을 위한 공간도 있으면 좋겠어. 

</p>

<p>좋다—니 요구(데스크탑 앱용 파이썬 패키지 + 교육/논문 자료 + 툴 설치공간 + 환경 세팅)를 딱 맞춘 <strong>1인 개발용 작업 폴더</strong> 와 <strong>스타터 키트</strong> 까지 만들어놨어. 바로 받아서 쓰면 돼요.</p>

<p>starter kit 다운로드</p>

<hr />

<h1 id="1-상위-구조-혼자-쓰는-용--네가-원하는-추가공간">1) 상위 구조 (혼자 쓰는 용 + 네가 원하는 추가공간)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="kt">Work</span>
<span class="err">├─</span> <span class="mo">00</span><span class="n">_Inbox</span>            <span class="err">←</span> <span class="n">급히</span> <span class="n">던져놓는</span> <span class="n">임시함</span>
<span class="err">├─</span> <span class="mi">10</span><span class="n">_Today</span>            <span class="err">←</span> <span class="n">오늘</span> <span class="nf">집중</span><span class="p">(</span><span class="kt">WIP</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">20</span><span class="n">_Projects</span>         <span class="err">←</span> <span class="n">각</span> <span class="n">앱</span><span class="o">/</span><span class="n">도구별</span> <span class="nf">프로젝트</span><span class="p">(</span><span class="n">파이썬</span> <span class="n">패키지</span> <span class="n">형식</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">30</span><span class="n">_Areas</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">worklog</span>          <span class="err">←</span> <span class="n">일일</span><span class="o">/</span><span class="n">주간</span> <span class="n">로그</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">environments</span>     <span class="err">←</span> <span class="n">공통</span> <span class="n">환경</span> <span class="n">메모</span>
<span class="err">├─</span> <span class="mi">40</span><span class="n">_Resources</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">edu</span>              <span class="err">←</span> <span class="n">교육</span><span class="sr">/논문/</span><span class="n">튜토리얼</span> <span class="n">모음</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">courses</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">tutorials</span>
<span class="err">│</span>     <span class="err">└─</span> <span class="n">papers</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">to_read</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="nf">reading_notes</span> <span class="p">(</span><span class="n">템플릿</span> <span class="n">포함</span><span class="p">)</span>
<span class="err">│</span>        <span class="err">└─</span> <span class="n">summaries</span>
<span class="err">├─</span> <span class="mi">50</span><span class="n">_Snippets</span>         <span class="err">←</span> <span class="n">재사용</span> <span class="nf">스니펫</span><span class="p">(</span><span class="n">sql</span><span class="sr">/text/</span><span class="n">bash</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">60</span><span class="n">_Assets</span>           <span class="err">←</span> <span class="n">로고</span><span class="o">/</span><span class="n">템플릿</span> <span class="n">등</span> <span class="n">공용</span>
<span class="err">├─</span> <span class="mi">70</span><span class="n">_Exports</span>          <span class="err">←</span> <span class="n">외부</span> <span class="n">전달용</span> <span class="nf">산출물</span><span class="p">(</span><span class="kt">PDF</span><span class="o">/</span><span class="n">실행파일</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">80</span><span class="n">_Tools</span>            <span class="err">←</span> <span class="n">툴</span> <span class="n">설치</span><span class="sr">/포터블/스크립트/</span><span class="n">devcontainer</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">installers</span>       <span class="err">←</span> <span class="n">오프라인</span> <span class="n">설치</span> <span class="n">파일</span> <span class="nf">보관</span><span class="p">(</span><span class="n">체크섬</span> <span class="n">기록</span> <span class="n">권장</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">bin</span>              <span class="err">←</span> <span class="n">포터블</span> <span class="n">실행파일</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">scripts</span>          <span class="err">←</span> <span class="n">설치</span> <span class="n">자동화</span> <span class="n">스크립트</span><span class="o">/</span><span class="n">메모</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">devcontainer</span>     <span class="err">←</span> <span class="kt">VSCode</span> <span class="n">devcontainer</span> <span class="n">등</span>
<span class="err">├─</span> <span class="mi">85</span><span class="n">_Environments</span>     <span class="err">←</span> <span class="n">conda</span><span class="sr">/venv/</span><span class="n">docker</span> <span class="n">예시</span> <span class="n">구성</span>
<span class="err">└─</span> <span class="mi">99</span><span class="n">_Archive</span>
</code></pre></div></div>

<blockquote>
  <p>교육/논문: <code class="language-plaintext highlighter-rouge">40_Resources/edu/papers</code>에 <strong>읽을거리/메모/요약</strong> 3분리 + <code class="language-plaintext highlighter-rouge">reading_notes/TEMPLATE.md</code> 포함.<br />
 툴 설치: <code class="language-plaintext highlighter-rouge">80_Tools/installers</code> 폴더와 <code class="language-plaintext highlighter-rouge">scripts/install_notes.md</code> 준비.<br />
 환경 세팅: <code class="language-plaintext highlighter-rouge">85_Environments/conda/environment.yml</code>, <code class="language-plaintext highlighter-rouge">venv/README.md</code>, <code class="language-plaintext highlighter-rouge">docker/Dockerfile</code> 샘플 포함.</p>
</blockquote>

<hr />

<h1 id="2-프로젝트파이썬-패키지-템플릿--바로-실행-가능">2) 프로젝트(파이썬 패키지) 템플릿 — 바로 실행 가능</h1>

<p>starter kit 안에 예제로 <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-2025-001_sample_app</code>를 넣어뒀어. 구조:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PRJ-2025-001_sample_app
├─ src/sample_app       ← 패키지 소스 <span class="o">(</span>CLI/GUI 엔트리 포함<span class="o">)</span>
├─ tests                ← pytest 예제
├─ scripts              ← OS별 설치/실행/빌드 스크립트<span class="o">(</span>.sh/.ps1<span class="o">)</span>
├─ .devcontainer        ← 컨테이너 개발환경 설정
├─ pyproject.toml       ← PEP621<span class="o">(</span>setuptools<span class="o">)</span> + extras<span class="o">(</span>dev/gui<span class="o">)</span>
├─ .env.example         ← 환경변수 예시
├─ .gitignore / .editorconfig
└─ README.md
</code></pre></div></div>

<h3 id="키-포인트">키 포인트</h3>

<ul>
  <li>
    <p><strong>엔트리포인트</strong></p>

    <ul>
      <li>
        <p>CLI: <code class="language-plaintext highlighter-rouge">sample-app</code> → <code class="language-plaintext highlighter-rouge">sample_app.cli:main</code></p>
      </li>
      <li>
        <p>GUI(선택): <code class="language-plaintext highlighter-rouge">sample-app-gui</code> → <code class="language-plaintext highlighter-rouge">sample_app.gui:main</code> (PySide6 필요)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>옵션 의존성</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">.[dev]</code>: pytest/ruff/pyinstaller</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">.[gui]</code>: PySide6 (원하면 설치)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>단일 실행파일 빌드</strong> : PyInstaller 스크립트 내장(윈도/맥/리눅스 공통)</p>
  </li>
</ul>

<hr />

<h1 id="3-시작-순서-한-번만-하면-끝">3) 시작 순서 (한 번만 하면 끝)</h1>

<h2 id="macos--linux">macOS / Linux</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Work/20_Projects/PRJ-2025-001_sample_app
./scripts/install.sh         <span class="c"># venv 생성 + dev 의존성 설치</span>
./scripts/run_cli.sh         <span class="c"># CLI 동작 확인</span>
<span class="c"># GUI가 필요하면:</span>
<span class="nb">source</span> .venv/bin/activate
pip <span class="nb">install</span> <span class="s2">".[gui]"</span>
./scripts/run_gui.sh
</code></pre></div></div>

<h2 id="windows-powershell">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">Work/20_Projects/PRJ-2025-001_sample_app</span><span class="w">
</span><span class="o">.</span><span class="n">/scripts/install.ps1</span><span class="w">
</span><span class="o">.</span><span class="nx">/scripts/run_cli.ps1</span><span class="w">
</span><span class="c"># GUI 필요 시:</span><span class="w">
</span><span class="o">.</span><span class="n">\.venv\Scripts\Activate.ps1</span><span class="w">
</span><span class="nx">pip</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="s2">".[gui]"</span><span class="w">
</span><span class="o">.</span><span class="n">/scripts/run_gui.ps1</span><span class="w">
</span></code></pre></div></div>

<h2 id="빌드실행파일-만들기">빌드(실행파일 만들기)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># CLI</span>
./scripts/build_cli.sh    <span class="c"># dist/sample-app(또는 .exe)</span>
<span class="c"># GUI</span>
./scripts/build_gui.sh    <span class="c"># dist/sample-app-gui(또는 .exe)</span>
</code></pre></div></div>

<hr />

<h1 id="4-논문교육-자료-관리--최소-규칙">4) 논문/교육 자료 관리 — 최소 규칙</h1>

<ul>
  <li>
    <p><strong>PDF는<code class="language-plaintext highlighter-rouge">/papers/to_read</code></strong>, 메모는 <code class="language-plaintext highlighter-rouge">/papers/reading_notes/YYYY-MM-DD_제목.md</code></p>
  </li>
  <li>
    <p>한 달에 한 번 <strong><code class="language-plaintext highlighter-rouge">/summaries</code></strong>에 1~2페이지 요약(나중에 검색/레퍼런스로 최고)</p>
  </li>
  <li>
    <p>코스/튜토리얼은 <code class="language-plaintext highlighter-rouge">/edu/courses</code>, <code class="language-plaintext highlighter-rouge">/edu/tutorials</code>로 구분. 실습 산출물은 해당 프로젝트의 <code class="language-plaintext highlighter-rouge">/docs</code>나 <code class="language-plaintext highlighter-rouge">/export</code>로 링크</p>
  </li>
</ul>

<hr />

<h1 id="5-환경-세팅--툴-설치--실무-루틴">5) 환경 세팅 &amp; 툴 설치 — 실무 루틴</h1>

<ol>
  <li>
    <p><strong>툴 설치파일</strong> 은 <code class="language-plaintext highlighter-rouge">80_Tools/installers</code>에 보관 + <code class="language-plaintext highlighter-rouge">install_notes.md</code>에 버전/체크섬 기록</p>
  </li>
  <li>
    <p><strong>개별 프로젝트마다 로컬 venv</strong> (<code class="language-plaintext highlighter-rouge">.venv/</code>)로 독립 관리</p>
  </li>
  <li>
    <p>회사/외부 이동 대비해서 <strong><code class="language-plaintext highlighter-rouge">70_Exports</code>에 최종 산출물(실행파일/PDF)</strong> 같이 남기기</p>
  </li>
  <li>
    <p>컨테이너가 필요하면 <code class="language-plaintext highlighter-rouge">85_Environments/docker/Dockerfile</code>이나 프로젝트 내 <code class="language-plaintext highlighter-rouge">.devcontainer</code> 사용</p>
  </li>
</ol>

<hr />

<h1 id="6-네이밍-요약복붙-규칙">6) 네이밍 요약(복붙 규칙)</h1>

<ul>
  <li>
    <p>파일: <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code></p>
  </li>
  <li>
    <p>프로젝트 폴더: <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_짧은이름</code> 예) <code class="language-plaintext highlighter-rouge">PRJ-2025-012_GUI툴</code></p>
  </li>
  <li>
    <p>깊이: <strong>최대 3단</strong> 유지</p>
  </li>
</ul>

<hr />

<h1 id="7-다음-액션-3분-컷">7) 다음 액션 (3분 컷)</h1>

<ol>
  <li>
    <p>위 <strong>starter kit 압축 해제</strong> → 원하는 위치에 <code class="language-plaintext highlighter-rouge">/Work</code> 배치</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">PRJ-2025-001_sample_app</code>을 네 프로젝트명으로 <strong>폴더/pyproject 패키지명 변경</strong></p>
  </li>
  <li>
    <p>OS에 맞는 <strong>설치 스크립트 실행</strong> 후 바로 코딩 시작</p>
  </li>
</ol>

<p>필요하면 네가 쓰는 <strong>GUI 프레임워크(PySide6/PyQt/Tkinter), 배포 방식(PyInstaller/Briefcase), 테스트 전략</strong> 에 맞춰 템플릿을 더 다듬어 줄게. 원하는 스택만 알려줘—바로 적용한 버전으로 트리까지 만들어서 드릴게!</p>

<p class="chat--user">

그리고 툴 개발만 하는건 아니고 그 툴을 이용해서 어떤 실제 산출물을 만들어야 할 때도 있어.

</p>

<p>좋아—<strong>툴 개발 + 그 툴로 실제 산출물(레포트, 이미지, 패키지, 실행파일 등)까지 만드는</strong> 흐름을 깔끔하게 돌릴 수 있게 구조와 템플릿을 추가로 준비했어. (재현성·추적성·인수인계에 강함)</p>

<p>업데이트된 스타터(Jobs 포함) 다운로드</p>

<hr />

<h2 id="1-한눈에-보는-구조-툴--산출물-분리">1) 한눈에 보는 구조 (툴 ↔ 산출물 분리)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Work
├─ 20_Projects         ← 툴<span class="o">(</span>파이썬 패키지<span class="o">)</span> 개발
│   └─ PRJ-2025-001_sample_app/...
├─ 25_Jobs             ← 툴을 써서 만드는 “산출물 작업 단위”
│   └─ JOB-2025-001_sample_output/  ← 샘플 Job 포함
│      ├─ 01_Brief         요구사항/검수기준
│      ├─ 02_Input/raw     원천데이터
│      ├─ 03_Config        파라미터<span class="o">(</span>yml/json<span class="o">)</span>
│      ├─ 04_Run           실행 스크립트, 로그, 매니페스트
│      ├─ 05_Output        중간/최종 산출물<span class="o">(</span>작업용<span class="o">)</span>
│      └─ 06_Export        전달본<span class="o">(</span>완성품<span class="o">)</span>
├─ 40_Resources/edu     ← 교육/논문/튜토리얼
├─ 70_Exports           ← 여러 Job의 최종본 모아보기<span class="o">(</span>선택<span class="o">)</span>
└─ 85_Environments      ← conda/venv/docker 샘플
</code></pre></div></div>

<h3 id="왜-분리하나">왜 분리하나?</h3>

<ul>
  <li>
    <p><strong>Projects</strong> 는 코드 수명(버전·릴리즈) 중심, <strong>Jobs</strong> 는 <strong>요구사항·입력·설정 → 결과물</strong> 이라는 <strong>프로세스</strong> 중심.</p>
  </li>
  <li>
    <p>Job 단위로 매니페스트/체크섬이 남으니 <strong>나중에 같은 결과를 재현</strong> 하기 쉬움.</p>
  </li>
</ul>

<hr />

<h2 id="2-실행-흐름-step-by-step">2) 실행 흐름 (Step-by-step)</h2>

<ol>
  <li>
    <p><strong>툴 개발/업데이트</strong> : <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-...</code>에서 기능 추가 후 <code class="language-plaintext highlighter-rouge">.[dev]</code> 설치.</p>
  </li>
  <li>
    <p><strong>Job 생성</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs</code> 아래 새 <code class="language-plaintext highlighter-rouge">JOB-YYYY-###_이름</code> 폴더 복제.</p>
  </li>
  <li>
    <p><strong>입력/설정 배치</strong> : <code class="language-plaintext highlighter-rouge">02_Input/raw</code>에 데이터, <code class="language-plaintext highlighter-rouge">03_Config/config.yml</code>에 파라미터 작성.</p>
  </li>
  <li>
    <p><strong>실행</strong> :</p>

    <ul>
      <li>macOS/Linux:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>25_Jobs/JOB-.../04_Run
bash run.sh
</code></pre></div>        </div>
      </li>
      <li>Windows (PowerShell):
        <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">25_Jobs/JOB-.../04_Run</span><span class="w">
</span><span class="o">.</span><span class="n">/run.ps1</span><span class="w">
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<p>스크립트가 <code class="language-plaintext highlighter-rouge">run.py</code>를 호출 → <strong>산출물</strong> 을 <code class="language-plaintext highlighter-rouge">06_Export</code>에 생성 + <strong>manifest.json</strong> / <strong>run_log.txt</strong> 기록.</p>

<ol>
  <li><strong>검수/전달</strong> : <code class="language-plaintext highlighter-rouge">qa_checklist.md</code>로 확인 → 필요 시 <code class="language-plaintext highlighter-rouge">/Work/70_Exports</code>에도 복사.</li>
</ol>

<blockquote>
  <p>샘플 Job은 실제로 <strong>툴 패키지 버전(예:<code class="language-plaintext highlighter-rouge">sample_app.__version__</code>)을 읽어 매니페스트에 박아두고</strong>, 산출물 파일의 <strong>SHA256 체크섬</strong> 까지 저장하도록 되어 있어. (전달 후 변경 여부도 검증 가능)</p>
</blockquote>

<hr />

<h2 id="3-네이밍--버전-전략-산출물용">3) 네이밍 &amp; 버전 전략 (산출물용)</h2>

<ul>
  <li>
    <p><strong>Job 코드 접두</strong> : <code class="language-plaintext highlighter-rouge">JOB-2025-023_캠페인A_보고서_v003.pdf</code></p>
  </li>
  <li>
    <p><strong>세부 규칙</strong> : <code class="language-plaintext highlighter-rouge">JOB코드_YYYYMMDD[-run]_v###.ext</code></p>
  </li>
  <li>
    <p><strong>툴 버전 고정</strong> : 매니페스트에 <code class="language-plaintext highlighter-rouge">tool_version</code>, 파라미터 파일 경로, Python 버전, OS 정보 포함.</p>
  </li>
</ul>

<hr />

<h2 id="4-재현성-체크리스트">4) 재현성 체크리스트</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">03_Config/config.yml</code>에 모든 파라미터 기록</p>
  </li>
  <li>
    <p>입력 데이터 소스/버전 기록(가능하면 체크섬)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">85_Environments</code>(conda/venv/docker) 중 하나로 환경 고정</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">04_Run/manifest.json</code> 자동 생성 확인</p>
  </li>
  <li>
    <p>랜덤 사용 시 <strong>시드 고정</strong> 및 매니페스트에 기록</p>
  </li>
</ul>

<hr />

<h2 id="5-교육논문-자료와-실무-연결">5) 교육/논문 자료와 실무 연결</h2>

<ul>
  <li>
    <p>논문을 읽고 도입한 알고리즘/기법은 <strong>해당 툴 PRJ의 <code class="language-plaintext highlighter-rouge">/docs</code></strong>에 요약,<br />
실험·비교 결과는 <strong>개별 Job</strong> 으로 실행해 <strong>입력/설정/산출</strong> 을 남기면 <strong>논문→코드→결과</strong> 추적이 선명해짐.</p>
  </li>
  <li>
    <p>템플릿 포함: <code class="language-plaintext highlighter-rouge">40_Resources/edu/papers/reading_notes/TEMPLATE.md</code></p>
  </li>
</ul>

<hr />

<h2 id="6-바로-다음-액션">6) 바로 다음 액션</h2>

<ol>
  <li>
    <p>압축을 풀고 <code class="language-plaintext highlighter-rouge">/Work</code>를 원하는 위치에 둔다.</p>
  </li>
  <li>
    <p>샘플 툴 <code class="language-plaintext highlighter-rouge">PRJ-2025-001_sample_app</code>에서 설치 스크립트 실행 → 동작 확인.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/JOB-2025-001_sample_output</code>을 복제해 너의 실제 산출물 작업에 맞춰 <code class="language-plaintext highlighter-rouge">brief/config</code>만 바꿔 실행.</p>
  </li>
</ol>

<p>원하면 네 도메인(예: 이미지 처리, 리포트 생성, 포맷 규격) 기준으로 <strong>Job 스캐폴드</strong>(검수 스텝·표준 파라미터·파일명 규칙)를 더 빡빡하게 커스터마이즈해서 만들어줄게.</p>

<p class="chat--user">

전체 다시 보여줘

</p>

<p>좋아! 지금까지 만든 걸 <strong>한눈에, 단계별로</strong> 싹 정리해 줄게.<br />
(바로 쓸 수 있는 스타터 포함)</p>

<p>최신 스타터(툴 + Jobs 포함) 다운로드</p>

<hr />

<h1 id="1-목표-3가지">1) 목표 3가지</h1>

<ol>
  <li>
    <p><strong>빠른 캡처</strong> : 어디서든 <code class="language-plaintext highlighter-rouge">00_Inbox</code>로 던져 넣기</p>
  </li>
  <li>
    <p><strong>쉽게 찾기</strong> : 얕은 깊이(최대 3단) + 규칙적 네이밍</p>
  </li>
  <li>
    <p><strong>가벼운 유지보수</strong> : 주 1회 정리·아카이브</p>
  </li>
</ol>

<hr />

<h1 id="2-상위-폴더-구조최종본">2) 상위 폴더 구조(최종본)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/Work
├─ 00_Inbox               <span class="c"># 급히 던지는 임시함</span>
├─ 10_Today               <span class="c"># 오늘 집중 작업(WIP)</span>
├─ 20_Projects            <span class="c"># 툴(파이썬 패키지) 개발</span>
│   └─ PRJ-2025-001_sample_app/...
├─ 25_Jobs                <span class="c"># 툴을 사용해 만드는 실제 산출 작업 단위</span>
│   └─ JOB-2025-001_sample_output/
│      ├─ 01_Brief
│      ├─ 02_Input/raw
│      ├─ 03_Config
│      ├─ 04_Run
│      ├─ 05_Output
│      └─ 06_Export
├─ 30_Areas
│   ├─ worklog
│   └─ environments
├─ 40_Resources
│   └─ edu
│      ├─ courses
│      ├─ tutorials
│      └─ papers
│         ├─ to_read
│         ├─ reading_notes <span class="o">(</span>TEMPLATE.md 포함<span class="o">)</span>
│         └─ summaries
├─ 50_Snippets           <span class="c"># sql/text/bash 재사용 스니펫</span>
├─ 60_Assets             <span class="c"># 로고·템플릿 등 공용</span>
├─ 70_Exports            <span class="c"># 여러 Job 최종 전달본 모아보기(선택)</span>
├─ 80_Tools              <span class="c"># 설치파일·포터블·자동화 스크립트·devcontainer</span>
│   ├─ installers
│   ├─ bin
│   ├─ scripts
│   └─ devcontainer
├─ 85_Environments       <span class="c"># conda/venv/docker 샘플</span>
└─ 99_Archive
</code></pre></div></div>

<hr />

<h1 id="3-네이밍-규칙짧고-강력-1">3) 네이밍 규칙(짧고 강력)</h1>

<ul>
  <li>
    <p><strong>파일</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code></p>
  </li>
  <li>
    <p><strong>프로젝트 폴더</strong> : <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_짧은이름</code> → 예) <code class="language-plaintext highlighter-rouge">PRJ-2025-012_GUI툴</code></p>
  </li>
  <li>
    <p><strong>Job 폴더</strong> : <code class="language-plaintext highlighter-rouge">JOB-연도-번호_짧은이름</code> → 예) <code class="language-plaintext highlighter-rouge">JOB-2025-023_보고서A</code></p>
  </li>
  <li>
    <p><strong>깊이 제한</strong> : 최대 3단</p>
  </li>
</ul>

<hr />

<h1 id="4-툴파이썬-패키지-템플릿-요약">4) 툴(파이썬 패키지) 템플릿 요약</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PRJ-2025-001_sample_app
├─ src/sample_app <span class="o">(</span>cli.py, gui.py, __init__.py<span class="o">)</span>
├─ tests/test_smoke.py
├─ scripts/ <span class="o">(</span><span class="nb">install</span>/run/build/test/lint: .sh / .ps1 모두<span class="o">)</span>
├─ .devcontainer/devcontainer.json
├─ pyproject.toml <span class="o">(</span>extras: dev/gui, entry points 등록<span class="o">)</span>
├─ .env.example, .gitignore, .editorconfig
└─ README.md
</code></pre></div></div>

<ul>
  <li>
    <p><strong>엔트리포인트</strong> :</p>

    <ul>
      <li>
        <p>CLI: <code class="language-plaintext highlighter-rouge">sample-app</code> → <code class="language-plaintext highlighter-rouge">sample_app.cli:main</code></p>
      </li>
      <li>
        <p>GUI(옵션): <code class="language-plaintext highlighter-rouge">sample-app-gui</code> → <code class="language-plaintext highlighter-rouge">sample_app.gui:main</code> (PySide6)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>개발 편의</strong> : <code class="language-plaintext highlighter-rouge">.[dev]</code>에 pytest/ruff/pyinstaller 포함</p>
  </li>
  <li>
    <p><strong>단일 실행파일</strong> : PyInstaller 스크립트 내장</p>
  </li>
</ul>

<p><strong>시작(맥/리눅스)</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Work/20_Projects/PRJ-2025-001_sample_app
./scripts/install.sh
./scripts/run_cli.sh
<span class="c"># GUI 필요 시:</span>
<span class="nb">source</span> .venv/bin/activate <span class="o">&amp;&amp;</span> pip <span class="nb">install</span> <span class="s2">".[gui]"</span> <span class="o">&amp;&amp;</span> ./scripts/run_gui.sh
</code></pre></div></div>

<p><strong>시작(Windows PowerShell)</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">Work/20_Projects/PRJ-2025-001_sample_app</span><span class="w">
</span><span class="o">.</span><span class="n">/scripts/install.ps1</span><span class="w">
</span><span class="o">.</span><span class="nx">/scripts/run_cli.ps1</span><span class="w">
</span><span class="c"># GUI 필요 시:</span><span class="w">
</span><span class="o">.</span><span class="n">\.venv\Scripts\Activate.ps1</span><span class="p">;</span><span class="w"> </span><span class="n">pip</span><span class="w"> </span><span class="nx">install</span><span class="w"> </span><span class="s2">".[gui]"</span><span class="p">;</span><span class="w"> </span><span class="o">.</span><span class="n">/scripts/run_gui.ps1</span><span class="w">
</span></code></pre></div></div>

<p><strong>빌드</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./scripts/build_cli.sh     <span class="c"># CLI 실행파일</span>
./scripts/build_gui.sh     <span class="c"># GUI 실행파일</span>
</code></pre></div></div>

<hr />

<h1 id="5-실제-산출물job-파이프라인">5) 실제 산출물(Job) 파이프라인</h1>

<ul>
  <li>
    <p><strong>의도</strong> : Projects(코드)와 분리해 <strong>입력→설정→실행→산출</strong> 흐름을 <strong>재현 가능</strong> 하게 관리</p>
  </li>
  <li>
    <p><strong>실행 절차</strong></p>

    <ol>
      <li>
        <p><code class="language-plaintext highlighter-rouge">02_Input/raw</code>에 원천 데이터 배치</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">03_Config/config.yml</code>에 파라미터 기록</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">04_Run/run.sh</code>(또는 <code class="language-plaintext highlighter-rouge">run.ps1</code>) 실행</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">06_Export</code>에 전달본 생성 + <code class="language-plaintext highlighter-rouge">manifest.json</code>/<code class="language-plaintext highlighter-rouge">run_log.txt</code> 출력</p>
      </li>
      <li>
        <p>필요 시 <code class="language-plaintext highlighter-rouge">70_Exports</code>로도 복사(전사 공유)</p>
      </li>
    </ol>
  </li>
  <li>
    <p><strong>품질/추적</strong> :</p>

    <ul>
      <li>
        <p>매니페스트에 <code class="language-plaintext highlighter-rouge">tool_version</code>, Python/OS, 파라미터 파일, <strong>SHA256 체크섬</strong> 자동 저장</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">qa_checklist.md</code>로 규격·포맷·시드 고정 점검</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="6-교육논문-자료-워크플로">6) 교육/논문 자료 워크플로</h1>

<ul>
  <li>
    <p>PDF는 <code class="language-plaintext highlighter-rouge">40_Resources/edu/papers/to_read</code></p>
  </li>
  <li>
    <p>메모는 <code class="language-plaintext highlighter-rouge">reading_notes/YYYY-MM-DD_제목.md</code> (템플릿 제공)</p>
  </li>
  <li>
    <p>1~2페이지 요약은 <code class="language-plaintext highlighter-rouge">summaries/</code></p>
  </li>
  <li>
    <p>논문에서 채택한 아이디어는 <strong>프로젝트 <code class="language-plaintext highlighter-rouge">/docs</code></strong>에 정리, 실험은 <strong>개별 Job</strong> 으로 기록(입력/설정/산출 연결)</p>
  </li>
</ul>

<hr />

<h1 id="7-환경툴-설치-공간-사용법">7) 환경·툴 설치 공간 사용법</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">80_Tools/installers</code>: 오프라인 설치 파일 보관, <strong>버전·체크섬</strong> 을 <code class="language-plaintext highlighter-rouge">scripts/install_notes.md</code>에 메모</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">85_Environments</code>:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">conda/environment.yml</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">venv/README.md</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">docker/Dockerfile</code> (또는 프로젝트 내 <code class="language-plaintext highlighter-rouge">.devcontainer</code>)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="8-일주-운영-루틴">8) 일/주 운영 루틴</h1>

<p><strong>매일</strong></p>

<ul>
  <li>
    <p>모든 캡처는 <code class="language-plaintext highlighter-rouge">00_Inbox</code> → 당일 처리건은 <code class="language-plaintext highlighter-rouge">10_Today</code></p>
  </li>
  <li>
    <p>작업 끝난 파일은 프로젝트 또는 Job 위치로 이동</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">30_Areas/worklog/YYYY/YYYY-MM/날짜.md</code>에 5줄 로그</p>
  </li>
</ul>

<p><strong>주 1회</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">00_Inbox</code> 정리, 완료 Job/Project는 <code class="language-plaintext highlighter-rouge">99_Archive</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">70_Exports</code> 정리(최종 전달본만 유지)</p>
  </li>
</ul>

<hr />

<h1 id="9-바로-다음-액션3단계">9) 바로 다음 액션(3단계)</h1>

<ol>
  <li>
    <p>압축 해제 후 <code class="language-plaintext highlighter-rouge">/Work</code> 배치</p>
  </li>
  <li>
    <p>툴 템플릿 폴더/패키지명(예: <code class="language-plaintext highlighter-rouge">sample_app</code>)을 네 프로젝트명으로 변경</p>
  </li>
  <li>
    <p>샘플 Job을 복제해 <code class="language-plaintext highlighter-rouge">brief/config</code>만 수정 → <code class="language-plaintext highlighter-rouge">04_Run</code> 실행</p>
  </li>
</ol>

<hr />

<p>필요하면 네 도메인(이미지 처리, 리포트 생성, 특정 포맷 규격 등)에 맞춰 <strong>Job 스캐폴드(검수 목록, 파라미터 스키마, 파일명 규칙)</strong>를 더 촘촘히 커스터마이즈해서 바로 쓸 버전으로 만들어줄게.</p>

<p class="chat--user">

1. 만약에 배포한 툴에 대한 제보가 버그가 들어와서 이에 대해 디버깅 수행이 필요해. 2. 배포한 툴에 대한 example을 만드는 작업을 하고 싶어. 3. 새로 설치한 툴에 대한 간단한 사용법 및 feasibility 검사용 테스트를 수행하고 싶어. 4. 파이썬 문법이 헷갈려서(regex) 등을 jupyter 띄워서 간단히 테스트하고 싶어. 5. 각종 유용한 팁을 모아두고 싶어. 6. 다른 여러 곳에서 참조할만한 Resource를 모아두고 싶어(설정 파일 등) 7. Manual 파일들을 모아두고 싶어. 각각의 업무에 대해 작업해야할 폴더를 알려줘. 없다면 추가해줘

</p>

<p>좋아! 네가 적어준 7가지 업무 각각에 대해 <strong>어디서 작업할지</strong> + <strong>없던 폴더는 추가</strong> 까지 다 해놨어.<br />
바로 쓸 수 있게 템플릿과 스크립트도 넣어 <strong>업데이트된 스타터</strong> 압축본을 만들었어.</p>

<p>업무별 확장 스타터(Tasks Extended) 다운로드</p>

<hr />

<h2 id="1-배포-툴-버그-제보-디버깅">1) “배포 툴 버그 제보” 디버깅</h2>

<ul>
  <li><strong>작업 위치(재현/증거 관리)</strong><br />
<code class="language-plaintext highlighter-rouge">25_Jobs/BUG-YYYY-###_이름/</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>01_Report/      <span class="c"># 제보 내용, 기대/실제, 환경</span>
02_Repro/input  <span class="c"># 재현용 입력/파일</span>
03_Config/      <span class="c"># 재현 파라미터(.yml/.json)</span>
04_Run/         <span class="c"># repro.py + run 스크립트(sh/ps1)</span>
05_Evidence/    <span class="c"># 로그/덤프/스크린샷/체크섬</span>
06_FixValidation# 패치 검증 케이스
</code></pre></div>    </div>
  </li>
</ul>

<p>→ <strong>샘플 생성됨:</strong> <code class="language-plaintext highlighter-rouge">25_Jobs/BUG-2025-001_sample_bug/</code> (report.md, repro.py 포함)</p>

<ul>
  <li>
    <p><strong>작업 위치(코드 측 기록)</strong><br />
<code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../issues/BUG-YYYY-###/</code></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">triage.md</code>: 심각도/영향/추정 원인/다음 스텝</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">fix_notes.md</code>: 루트원인/커밋/테스트/릴리즈 계획</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="2-배포한-툴의-example-제작">2) 배포한 툴의 example 제작</h2>

<ul>
  <li><strong>소스 예제(프로젝트 안)</strong><br />
<code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../examples/</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data/      <span class="c"># 공개 가능한 소형 샘플 데이터</span>
scripts/   <span class="c"># run_*.py: 기능별 최소 예제</span>
docs/      <span class="c"># 각 예제의 기대 출력/설명</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>→ <strong>샘플 생성됨:</strong> <code class="language-plaintext highlighter-rouge">examples/scripts/run_hello.py</code>, <code class="language-plaintext highlighter-rouge">examples/docs/hello.md</code></p>

<ul>
  <li><strong>예제 결과물 패키징(선택)</strong><br />
실제 산출 패키지로 묶고 싶으면 <strong>Job으로 실행</strong> :<br />
<code class="language-plaintext highlighter-rouge">25_Jobs/EX-YYYY-###_툴예제/</code> (Job 스캐폴드 복제)</li>
</ul>

<hr />

<h2 id="3-새로-설치한-툴의-사용법feasibility-스모크-테스트">3) 새로 설치한 툴의 사용법·feasibility 스모크 테스트</h2>

<ul>
  <li>
    <p><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">25_Jobs/SMOKE-YYYY-###_toolname/</code></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code>에 버전 출력 등 <strong>통과 기준 명령</strong> 을 나열</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">04_Run/smoke.sh</code>/<code class="language-plaintext highlighter-rouge">smoke.ps1</code>가 순차 실행 → 결과 <code class="language-plaintext highlighter-rouge">06_Export/</code>에 남김<br />
→ <strong>샘플 생성됨:</strong> <code class="language-plaintext highlighter-rouge">SMOKE-2025-001_new_tool/</code> (commands.txt, smoke.sh 포함)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="4-파이썬regex-등-빠른-실험-용-jupyter">4) 파이썬/regex 등 <strong>빠른 실험</strong> 용 Jupyter</h2>

<ul>
  <li>
    <p><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">regex_scratch.ipynb</code>(생성됨): 소형 정규표현식 테스트 노트북</p>
      </li>
      <li>
        <p>실험은 <strong>작게</strong> 하고, 배운 건 <code class="language-plaintext highlighter-rouge">30_Areas/kb</code>로 옮겨 정리</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="5-각종-유용한-팁-모음">5) 각종 <strong>유용한 팁</strong> 모음</h2>

<ul>
  <li><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">30_Areas/kb/</code>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tips/         <span class="c"># 단문 팁 (python.md, regex.md 샘플 생성)</span>
cheatsheets/  <span class="c"># 한 장 요약</span>
howtos/       <span class="c"># 절차형 가이드</span>
</code></pre></div>    </div>

    <ul>
      <li>라이프로그성 메모는 여기, <strong>재사용 가능한 코드</strong> 는 <code class="language-plaintext highlighter-rouge">50_Snippets/</code>에 보관</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="6-여러-곳에서-참조할-resource설정-등-중앙-저장소">6) 여러 곳에서 참조할 <strong>Resource(설정 등) 중앙 저장소</strong></h2>

<ul>
  <li><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">40_Resources/reference/configs/</code>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vscode/ ruff/ pytest/ pyinstaller/ pyside6/ jupyter/
</code></pre></div>    </div>
  </li>
</ul>

<p>→ 샘플 <code class="language-plaintext highlighter-rouge">pytest.ini</code>, <code class="language-plaintext highlighter-rouge">ruff.toml</code>, <code class="language-plaintext highlighter-rouge">jupyter_notebook_config.py</code> 포함</p>

<ul>
  <li>실제 프로젝트에서 가져다 쓸 <strong>골든 설정</strong> 은 여기서 관리하고, 각 프로젝트에는 <strong>심볼릭 링크/복사</strong>.</li>
</ul>

<hr />

<h2 id="7-manual-파일-모음">7) <strong>Manual</strong> 파일 모음</h2>

<ul>
  <li>
    <p><strong>작업 위치</strong><br />
<code class="language-plaintext highlighter-rouge">40_Resources/manuals/&lt;벤더&gt;/&lt;제품&gt;/&lt;버전&gt;/</code><br />
→ 샘플: <code class="language-plaintext highlighter-rouge">manuals/AcmeTool/1.0/index.md</code></p>

    <ul>
      <li>PDF/HTML/마크다운 매뉴얼 정리, 루트 <code class="language-plaintext highlighter-rouge">README.md</code>에 규칙 설명</li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="보너스-빠르게-쓰는-규칙요약">보너스: 빠르게 쓰는 규칙(요약)</h1>

<ul>
  <li>
    <p><strong>Job 네이밍</strong> :</p>

    <ul>
      <li>
        <p>버그: <code class="language-plaintext highlighter-rouge">BUG-2025-023_&lt;키워드&gt;</code></p>
      </li>
      <li>
        <p>예제: <code class="language-plaintext highlighter-rouge">EX-2025-011_&lt;기능&gt;</code></p>
      </li>
      <li>
        <p>스모크: <code class="language-plaintext highlighter-rouge">SMOKE-2025-004_&lt;툴이름&gt;</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>산출 파일명</strong> : <code class="language-plaintext highlighter-rouge">JOB코드_YYYYMMDD_v###.ext</code></p>
  </li>
  <li>
    <p><strong>증거 관리</strong> : <code class="language-plaintext highlighter-rouge">05_Evidence</code>에 로그/덤프/스크린샷 + <strong>SHA256</strong> 기록</p>
  </li>
  <li>
    <p><strong>지식 이전</strong> : <code class="language-plaintext highlighter-rouge">31_Labs</code> → 정리되면 <code class="language-plaintext highlighter-rouge">30_Areas/kb</code>로 승격</p>
  </li>
</ul>

<hr />

<p>원하면 니가 실제로 쓰는 <strong>툴 이름/도메인</strong>(예: 영상 처리, 리포트 생성, CAD 등)을 알려줘. 그러면 BUG/EX/SMOKE Job 템플릿을 그 도메인 규격(입력 포맷, QA 체크리스트, 파일명 규칙)으로 더 구체화해서 <strong>맞춤 스캐폴드</strong> 로 바로 내줄게.</p>

<p class="chat--user">

kb가 뭐야? 이제 정리된 구조를 하나의 plain text 파일로 정리해줘. 각 폴더별로 간단한 설명을 오른쪽에 붙여주면 좋겠어. 하위 폴더 구조 예시도 같이 주고

</p>

<p>좋아! 먼저 질문부터 답할게.</p>

<ul>
  <li><strong>kb가 뭐야?</strong><br />
<code class="language-plaintext highlighter-rouge">kb</code>는 <strong>knowledge base(지식 베이스)</strong>의 줄임말이야. 계속 쓰이는 팁·치트시트·가이드(How-to) 같은 <strong>축적형 지식</strong> 을 모아두는 폴더고, 우리 구조에서는 <code class="language-plaintext highlighter-rouge">30_Areas/kb/</code> 아래에 <code class="language-plaintext highlighter-rouge">tips/</code>, <code class="language-plaintext highlighter-rouge">cheatsheets/</code>, <code class="language-plaintext highlighter-rouge">howtos/</code>로 나눠서 정리해.</li>
</ul>

<p>요청한 대로, <strong>전체 구조를 plain text 파일</strong> 로 만들어 두었어. 각 폴더 오른쪽에 <strong>간단 설명</strong> 이 붙어 있고, <strong>하위 구조 예시</strong> 도 포함했어.</p>

<p>work_folder_structure.txt 다운로드</p>

<p>원본을 그대로 붙여넣어도 되지만, 파일로 받아두면 팀원에게 전송하거나 문서에 링크 걸기 편해. 필요하면 네 실제 프로젝트명/툴명으로 예시들을 자동 치환한 버전도 만들어 줄게.</p>

<p class="chat--user">

그냥 본문에 써줘

</p>

<p>아래 그대로 복붙해서 쓰면 돼요. (오른쪽은 간단 설명, 들여쓰기는 계층)</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span> <span class="n">폴더</span> <span class="n">구조</span> <span class="nf">요약</span> <span class="p">(</span><span class="nv">생성</span><span class="p">:</span> <span class="mi">2025</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">26</span><span class="p">)</span>
<span class="err">※</span> <span class="n">각</span> <span class="n">줄의</span> <span class="n">오른쪽은</span> <span class="n">간단</span> <span class="n">설명</span><span class="p">,</span> <span class="n">들여쓰기는</span> <span class="n">계층을</span> <span class="n">의미합니다</span><span class="o">.</span>

<span class="kt">Work</span><span class="o">/</span> <span class="o">-</span> <span class="mi">1</span><span class="n">인</span> <span class="n">개발용</span> <span class="n">작업</span> <span class="n">루트</span>
  <span class="mo">00</span><span class="n">_Inbox</span><span class="o">/</span> <span class="o">-</span> <span class="n">급히</span> <span class="n">던져두는</span> <span class="nf">임시함</span><span class="p">(</span><span class="n">매일</span> <span class="n">비우기</span><span class="p">)</span>
  <span class="mi">10</span><span class="n">_Today</span><span class="o">/</span> <span class="o">-</span> <span class="n">오늘</span> <span class="n">집중</span> <span class="nf">작업</span><span class="p">(</span><span class="kt">WIP</span><span class="p">),</span> <span class="n">끝나면</span> <span class="n">제자리</span> <span class="n">이동</span>
  <span class="mi">20</span><span class="n">_Projects</span><span class="o">/</span> <span class="o">-</span> <span class="nf">툴</span><span class="p">(</span><span class="n">파이썬</span> <span class="n">패키지</span><span class="p">)</span> <span class="n">개발</span> <span class="n">공간</span>
    <span class="kt">PRJ</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span> <span class="o">-</span> <span class="n">단일</span> <span class="nf">프로젝트</span><span class="p">(</span><span class="n">패키지</span><span class="p">)</span> <span class="n">단위</span>
      <span class="n">src</span><span class="o">/</span> <span class="o">-</span> <span class="n">패키지</span> <span class="n">소스</span> <span class="n">코드</span>
        <span class="o">&lt;</span><span class="n">package_name</span><span class="o">&gt;/</span> <span class="o">-</span> <span class="n">모듈</span> <span class="nf">디렉터리</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">sample_app</span><span class="p">)</span>
      <span class="n">tests</span><span class="o">/</span> <span class="o">-</span> <span class="n">pytest</span> <span class="n">테스트</span>
      <span class="n">scripts</span><span class="o">/</span> <span class="o">-</span> <span class="n">install</span><span class="sr">/run/build/lint/test 스크립트(.sh/</span><span class="o">.</span><span class="n">ps1</span><span class="p">)</span>
      <span class="n">examples</span><span class="o">/</span> <span class="o">-</span> <span class="n">배포용</span> <span class="n">예제</span> <span class="n">모음</span>
        <span class="n">data</span><span class="o">/</span> <span class="o">-</span> <span class="n">공개</span> <span class="n">가능한</span> <span class="n">소형</span> <span class="n">샘플</span> <span class="n">데이터</span>
        <span class="n">scripts</span><span class="o">/</span> <span class="o">-</span> <span class="n">run_</span><span class="o">*.</span><span class="n">py</span> <span class="n">예제</span> <span class="n">스크립트</span>
        <span class="n">docs</span><span class="o">/</span> <span class="o">-</span> <span class="n">예제</span> <span class="n">설명</span> <span class="n">및</span> <span class="n">기대</span> <span class="n">출력</span>
      <span class="o">.</span><span class="n">devcontainer</span><span class="o">/</span> <span class="o">-</span> <span class="n">컨테이너</span> <span class="n">개발환경</span> <span class="nf">설정</span><span class="p">(</span><span class="n">devcontainer</span><span class="o">.</span><span class="n">json</span> <span class="n">등</span><span class="p">)</span>
      <span class="n">pyproject</span><span class="o">.</span><span class="n">toml</span> <span class="o">-</span> <span class="n">프로젝트</span> <span class="n">메타</span><span class="p">,</span> <span class="n">의존성</span><span class="p">,</span> <span class="n">엔트리포인트</span>
      <span class="kt">README</span><span class="o">.</span><span class="n">md</span> <span class="o">-</span> <span class="n">사용법</span><span class="o">/</span><span class="n">개요</span>
      <span class="o">.</span><span class="n">gitignore</span><span class="p">,</span> <span class="o">.</span><span class="n">editorconfig</span> <span class="o">-</span> <span class="n">개발</span> <span class="n">편의</span>
  <span class="mi">25</span><span class="n">_Jobs</span><span class="o">/</span> <span class="o">-</span> <span class="n">툴을</span> <span class="n">사용해</span> <span class="n">만드는</span> <span class="n">실제</span> <span class="n">산출</span> <span class="n">작업</span> <span class="n">단위</span>
    <span class="kt">JOB</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span> <span class="o">-</span> <span class="n">일반</span> <span class="n">산출</span> <span class="kt">Job</span><span class="p">(</span><span class="n">입력</span><span class="err">→</span><span class="n">설정</span><span class="err">→</span><span class="n">실행</span><span class="err">→</span><span class="n">산출</span><span class="p">)</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span> <span class="o">-</span> <span class="n">요구사항</span><span class="sr">/검수기준/</span><span class="n">마감</span>
      <span class="mo">02</span><span class="n">_Input</span><span class="o">/</span>
        <span class="n">raw</span><span class="o">/</span> <span class="o">-</span> <span class="n">원천</span> <span class="n">데이터</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span> <span class="o">-</span> <span class="nf">파라미터</span><span class="p">(</span><span class="n">yml</span><span class="o">/</span><span class="n">json</span><span class="p">),</span> <span class="n">런</span> <span class="n">설정</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span> <span class="o">-</span> <span class="n">실행</span> <span class="nf">스크립트</span><span class="p">(</span><span class="n">run</span><span class="o">.</span><span class="n">sh</span><span class="o">/</span><span class="n">ps1</span><span class="p">,</span> <span class="n">run</span><span class="o">.</span><span class="n">py</span><span class="p">),</span> <span class="n">로그</span>
      <span class="mo">05</span><span class="n">_Output</span><span class="o">/</span> <span class="o">-</span> <span class="n">중간</span><span class="o">/</span><span class="n">최종</span> <span class="nf">산출물</span><span class="p">(</span><span class="n">작업용</span><span class="p">)</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span> <span class="o">-</span> <span class="nf">전달본</span><span class="p">(</span><span class="n">최종</span> <span class="n">산출물</span><span class="p">)</span>
      <span class="mi">90</span><span class="n">_Archive</span><span class="o">/</span> <span class="o">-</span> <span class="n">완료</span> <span class="n">후</span> <span class="n">보관</span>
    <span class="kt">BUG</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span> <span class="o">-</span> <span class="n">배포</span> <span class="n">버그</span> <span class="n">재현</span><span class="sr">/증거/</span><span class="n">수정</span> <span class="n">검증</span> <span class="n">용</span> <span class="kt">Job</span>
      <span class="mo">01</span><span class="n">_Report</span><span class="o">/</span> <span class="o">-</span> <span class="n">제보</span> <span class="n">내용</span><span class="p">,</span> <span class="n">환경</span><span class="p">,</span> <span class="n">기대</span><span class="o">/</span><span class="n">실제</span>
      <span class="mo">02</span><span class="n">_Repro</span><span class="o">/</span>
        <span class="n">input</span><span class="o">/</span> <span class="o">-</span> <span class="n">재현에</span> <span class="n">필요한</span> <span class="n">입력</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span> <span class="o">-</span> <span class="n">재현</span> <span class="n">파라미터</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span> <span class="o">-</span> <span class="n">repro</span><span class="o">.</span><span class="n">py</span><span class="p">,</span> <span class="n">repro</span><span class="o">.</span><span class="n">sh</span><span class="o">/</span><span class="n">ps1</span><span class="p">,</span> <span class="n">repro_log</span><span class="o">.</span><span class="n">txt</span>
      <span class="mo">05</span><span class="n">_Evidence</span><span class="o">/</span>
        <span class="n">logs</span><span class="o">/</span> <span class="o">-</span> <span class="n">콘솔</span><span class="o">/</span><span class="n">크래시</span> <span class="n">로그</span><span class="p">,</span> <span class="n">스크린샷</span><span class="p">,</span> <span class="n">체크섬</span>
      <span class="mo">06</span><span class="n">_FixValidation</span><span class="o">/</span> <span class="o">-</span> <span class="n">패치</span> <span class="n">검증</span> <span class="n">케이스</span>
    <span class="kt">EX</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span> <span class="o">-</span> <span class="n">툴</span> <span class="n">예제</span> <span class="n">산출</span> <span class="kt">Job</span><span class="p">(</span><span class="n">선택</span><span class="p">,</span> <span class="n">패키징</span> <span class="n">목적</span><span class="p">)</span>
    <span class="kt">SMOKE</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_tool</span><span class="o">/</span> <span class="o">-</span> <span class="n">새</span> <span class="n">툴</span> <span class="n">설치</span> <span class="n">후</span> <span class="n">스모크</span><span class="o">/</span><span class="n">feasibility</span> <span class="n">테스트</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span> <span class="o">-</span> <span class="n">성공</span> <span class="n">기준</span> <span class="n">정의</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span> <span class="o">-</span> <span class="n">commands</span><span class="o">.</span><span class="nv">txt</span><span class="p">:</span> <span class="n">테스트</span> <span class="n">명령</span> <span class="n">목록</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span> <span class="o">-</span> <span class="n">smoke</span><span class="o">.</span><span class="n">sh</span><span class="o">/</span><span class="n">ps1로</span> <span class="n">일괄</span> <span class="n">실행</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span> <span class="o">-</span> <span class="n">결과</span> <span class="nf">요약</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">txt</span> <span class="n">등</span><span class="p">)</span>
  <span class="mi">30</span><span class="n">_Areas</span><span class="o">/</span> <span class="o">-</span> <span class="n">지속</span> <span class="n">업무</span> <span class="nf">영역</span><span class="p">(</span><span class="kt">Projects와</span> <span class="n">달리</span> <span class="n">계속</span> <span class="n">유지</span><span class="p">)</span>
    <span class="n">worklog</span><span class="o">/</span> <span class="o">-</span> <span class="n">일일</span><span class="sr">/주간 작업 로그(YYYY/YY-MM/</span><span class="n">날짜</span><span class="o">.</span><span class="n">md</span><span class="p">)</span>
    <span class="n">environments</span><span class="o">/</span> <span class="o">-</span> <span class="n">공통</span> <span class="n">환경</span> <span class="n">메모</span><span class="o">/</span><span class="n">전략</span>
    <span class="n">kb</span><span class="o">/</span> <span class="o">-</span> <span class="n">knowledge</span> <span class="nf">base</span><span class="p">(</span><span class="n">지식</span> <span class="n">베이스</span><span class="p">):</span> <span class="n">팁</span><span class="err">·</span><span class="n">문서</span><span class="err">·</span><span class="n">가이드</span> <span class="n">축적</span>
      <span class="n">tips</span><span class="o">/</span> <span class="o">-</span> <span class="n">단문</span> <span class="n">팁</span> <span class="nf">모음</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">python</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="n">regex</span><span class="o">.</span><span class="n">md</span><span class="p">)</span>
      <span class="n">cheatsheets</span><span class="o">/</span> <span class="o">-</span> <span class="n">한</span> <span class="n">장</span> <span class="n">요약</span>
      <span class="n">howtos</span><span class="o">/</span> <span class="o">-</span> <span class="n">절차형</span> <span class="n">가이드</span>
  <span class="mi">31</span><span class="n">_Labs</span><span class="o">/</span> <span class="o">-</span> <span class="n">실험실</span> <span class="nf">영역</span><span class="p">(</span><span class="n">가벼운</span> <span class="n">테스트</span><span class="o">/</span><span class="n">실습</span><span class="p">)</span>
    <span class="n">jupyter</span><span class="o">/</span> <span class="o">-</span> <span class="n">스크래치</span> <span class="nf">노트북</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">regex_scratch</span><span class="o">.</span><span class="n">ipynb</span><span class="p">)</span>
  <span class="mi">40</span><span class="n">_Resources</span><span class="o">/</span> <span class="o">-</span> <span class="n">참고</span> <span class="nf">자료</span><span class="p">(</span><span class="n">교육</span><span class="sr">/레퍼런스/매뉴얼/</span><span class="n">설정</span><span class="p">)</span>
    <span class="n">edu</span><span class="o">/</span> <span class="o">-</span> <span class="n">교육</span><span class="err">·</span><span class="n">논문</span><span class="err">·</span><span class="n">튜토리얼</span>
      <span class="n">courses</span><span class="o">/</span> <span class="o">-</span> <span class="n">강의</span><span class="o">/</span><span class="n">코스</span> <span class="n">자료</span>
      <span class="n">tutorials</span><span class="o">/</span> <span class="o">-</span> <span class="n">튜토리얼</span> <span class="n">모음</span>
      <span class="n">papers</span><span class="o">/</span> <span class="o">-</span> <span class="n">논문</span> <span class="n">관리</span>
        <span class="n">to_read</span><span class="o">/</span> <span class="o">-</span> <span class="n">읽을</span> <span class="n">논문</span> <span class="kt">PDF</span>
        <span class="n">reading_notes</span><span class="o">/</span> <span class="o">-</span> <span class="n">논문</span> <span class="nf">메모</span><span class="p">(</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">MM</span><span class="o">-</span><span class="kt">DD_제목</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="kt">TEMPLATE</span><span class="o">.</span><span class="n">md</span> <span class="n">포함</span><span class="p">)</span>
        <span class="n">summaries</span><span class="o">/</span> <span class="o">-</span> <span class="mi">1</span><span class="o">~</span><span class="mi">2</span><span class="n">페이지</span> <span class="n">요약</span>
    <span class="n">reference</span><span class="o">/</span> <span class="o">-</span> <span class="n">여러</span> <span class="n">곳에서</span> <span class="n">참조할</span> <span class="n">공통</span> <span class="n">리소스</span>
      <span class="n">configs</span><span class="o">/</span> <span class="o">-</span> <span class="n">표준</span> <span class="nf">설정</span><span class="p">(</span><span class="n">프로젝트에서</span> <span class="n">재사용</span><span class="p">)</span>
        <span class="n">vscode</span><span class="o">/</span> <span class="o">-</span> <span class="kt">VSCode</span> <span class="n">설정</span>
        <span class="n">ruff</span><span class="o">/</span> <span class="o">-</span> <span class="n">ruff</span><span class="o">.</span><span class="n">toml</span> <span class="n">예시</span>
        <span class="n">pytest</span><span class="o">/</span> <span class="o">-</span> <span class="n">pytest</span><span class="o">.</span><span class="n">ini</span> <span class="n">예시</span>
        <span class="n">pyinstaller</span><span class="o">/</span> <span class="o">-</span> <span class="n">빌드</span> <span class="n">설정</span> <span class="n">템플릿</span>
        <span class="n">pyside6</span><span class="o">/</span> <span class="o">-</span> <span class="kt">GUI</span> <span class="n">프레임워크</span> <span class="n">관련</span>
        <span class="n">jupyter</span><span class="o">/</span> <span class="o">-</span> <span class="n">jupyter_notebook_config</span><span class="o">.</span><span class="n">py</span> <span class="n">예시</span>
    <span class="n">manuals</span><span class="o">/</span> <span class="o">-</span> <span class="n">매뉴얼</span><span class="sr">/가이드(PDF/HTML/</span><span class="kt">MD</span><span class="p">)</span>
      <span class="o">&lt;</span><span class="n">vendor</span><span class="o">&gt;/&lt;</span><span class="n">product</span><span class="o">&gt;/&lt;</span><span class="n">version</span><span class="o">&gt;/</span> <span class="o">-</span> <span class="n">버전별</span> <span class="n">정리</span>
  <span class="mi">50</span><span class="n">_Snippets</span><span class="o">/</span> <span class="o">-</span> <span class="n">재사용</span> <span class="n">코드</span><span class="o">/</span><span class="n">문구</span>
    <span class="n">sql</span><span class="o">/</span> <span class="o">-</span> <span class="n">쿼리</span> <span class="n">스니펫</span>
    <span class="n">text</span><span class="o">/</span> <span class="o">-</span> <span class="n">문서</span><span class="o">/</span><span class="n">이메일</span> <span class="n">문구</span>
    <span class="n">bash</span><span class="o">/</span> <span class="o">-</span> <span class="n">쉘</span> <span class="n">스니펫</span>
  <span class="mi">60</span><span class="n">_Assets</span><span class="o">/</span> <span class="o">-</span> <span class="n">로고</span><span class="sr">/폰트/</span><span class="n">템플릿</span> <span class="n">등</span> <span class="n">공용</span> <span class="n">리소스</span>
  <span class="mi">70</span><span class="n">_Exports</span><span class="o">/</span> <span class="o">-</span> <span class="n">여러</span> <span class="kt">Job의</span> <span class="n">최종</span> <span class="n">전달본</span> <span class="nf">모아보기</span><span class="p">(</span><span class="n">옵션</span><span class="p">)</span>
  <span class="mi">80</span><span class="n">_Tools</span><span class="o">/</span> <span class="o">-</span> <span class="n">툴</span> <span class="n">설치</span><span class="sr">/포터블/</span><span class="n">자동화</span>
    <span class="n">installers</span><span class="o">/</span> <span class="o">-</span> <span class="n">오프라인</span> <span class="n">설치</span> <span class="n">파일</span><span class="p">,</span> <span class="n">install_notes</span><span class="o">.</span><span class="nf">md</span><span class="p">(</span><span class="n">버전</span><span class="err">·</span><span class="n">체크섬</span><span class="p">)</span>
    <span class="n">bin</span><span class="o">/</span> <span class="o">-</span> <span class="n">포터블</span> <span class="n">실행파일</span>
    <span class="n">scripts</span><span class="o">/</span> <span class="o">-</span> <span class="n">설치</span><span class="o">/</span><span class="n">유틸</span> <span class="n">스크립트</span>
    <span class="n">devcontainer</span><span class="o">/</span> <span class="o">-</span> <span class="n">개발</span> <span class="n">컨테이너</span> <span class="n">관련</span>
  <span class="mi">85</span><span class="n">_Environments</span><span class="o">/</span> <span class="o">-</span> <span class="n">개발</span> <span class="n">환경</span> <span class="n">예시</span>
    <span class="n">conda</span><span class="o">/</span>
      <span class="n">environment</span><span class="o">.</span><span class="n">yml</span> <span class="o">-</span> <span class="n">conda</span> <span class="n">환경</span> <span class="n">정의</span>
    <span class="n">venv</span><span class="o">/</span>
      <span class="kt">README</span><span class="o">.</span><span class="n">md</span> <span class="o">-</span> <span class="n">표준</span> <span class="n">venv</span> <span class="n">사용</span> <span class="n">가이드</span>
    <span class="n">docker</span><span class="o">/</span>
      <span class="kt">Dockerfile</span> <span class="o">-</span> <span class="n">개발</span> <span class="n">컨테이너</span> <span class="n">베이스</span>
  <span class="mi">99</span><span class="n">_Archive</span><span class="o">/</span> <span class="o">-</span> <span class="n">완료</span> <span class="n">프로젝트</span><span class="sr">/Job/</span><span class="n">자료</span> <span class="n">보관</span>

<span class="p">[</span><span class="n">네이밍</span> <span class="n">요약</span><span class="p">]</span>
<span class="o">-</span> <span class="n">프로젝트</span> <span class="nv">폴더</span><span class="p">:</span> <span class="kt">PRJ</span><span class="o">-</span><span class="n">연도</span><span class="o">-</span><span class="nf">번호_짧은이름</span> <span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="kt">PRJ</span><span class="o">-</span><span class="mi">2025</span><span class="o">-</span><span class="mo">012</span><span class="n">_GUItool</span><span class="p">)</span>
<span class="o">-</span> <span class="kt">Job</span> <span class="nv">폴더</span><span class="p">:</span> <span class="kt">JOB</span><span class="sr">/BUG/EX/</span><span class="kt">SMOKE</span><span class="o">-</span><span class="n">연도</span><span class="o">-</span><span class="n">번호_이름</span>
<span class="o">-</span> <span class="nv">파일</span><span class="p">:</span> <span class="kt">YYYY</span><span class="o">-</span><span class="kt">MM</span><span class="o">-</span><span class="kt">DD_제목_v001</span><span class="o">.</span><span class="nf">ext</span> <span class="p">(</span><span class="n">최종본</span> <span class="n">금지</span><span class="p">,</span> <span class="n">버전</span> <span class="n">증가</span><span class="p">)</span>
<span class="o">-</span> <span class="nv">깊이</span><span class="p">:</span> <span class="n">최대</span> <span class="mi">3</span><span class="n">단</span> <span class="n">유지</span>
</code></pre></div></div>

<p class="chat--user">

1. 내가 만든 툴을 유저들에게 배포할 장소도 있으면 좋겠어. 2. 골든 설정 뿐 아니라 내 개인 설정을 저장할 곳도 있으면 좋겠어. 두 가지를 어떻게 관리하면 될 지 알려줘. 폴더 추가가 필요하다면 추가해줘

</p>

<p>좋아—두 가지를 깔끔하게 나누자.</p>

<h1 id="1-배포-장소-유저에게-줄-최종물-보관">1) 배포 장소 (유저에게 줄 최종물 보관)</h1>

<h2 id="폴더-추가">폴더 추가</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">/</span><span class="mi">75</span><span class="n">_Releases</span>                         <span class="err">←</span> <span class="err">“</span><span class="n">배포</span> <span class="n">전용</span><span class="err">”</span> <span class="n">중앙</span> <span class="n">보관소</span>
  <span class="sr">/&lt;project_slug&gt;/</span>                   <span class="err">←</span> <span class="nv">예</span><span class="p">:</span> <span class="n">sample</span><span class="o">-</span><span class="n">app</span>
    <span class="sr">/vX.Y.Z/</span>                         <span class="err">←</span> <span class="n">릴리스</span> <span class="n">버전별</span>
      <span class="sr">/installers/                   ← .exe/.msi/.pkg/</span><span class="o">.</span><span class="n">dmg</span> <span class="n">등</span>
      <span class="sr">/wheels/</span>                       <span class="err">←</span> <span class="kt">Python</span> <span class="nf">wheel</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
      <span class="sr">/portable/                     ← 포터블/</span><span class="n">압축본</span>
      <span class="sr">/docs/</span>                         <span class="err">←</span> <span class="n">설치</span> <span class="n">가이드</span><span class="p">,</span> <span class="kt">README</span><span class="p">,</span> <span class="kt">FAQ</span>
      <span class="sr">/licenses/</span>                     <span class="err">←</span> <span class="kt">LICENSE</span><span class="p">,</span> <span class="kt">ThirdPartyNotices</span><span class="o">.</span><span class="n">txt</span>
      <span class="sr">/checksums/</span>                    <span class="err">←</span> <span class="o">*.</span><span class="nf">sha256</span> <span class="p">(</span><span class="n">무결성</span> <span class="n">확인</span><span class="p">)</span>
      <span class="kt">ReleaseNotes</span><span class="o">.</span><span class="n">md</span>                <span class="err">←</span> <span class="n">릴리스</span> <span class="n">노트</span>
    <span class="sr">/latest/</span>                         <span class="err">←</span> <span class="n">최신</span> <span class="nf">버전</span><span class="p">(</span><span class="n">심볼릭링크</span> <span class="n">or</span> <span class="n">복사</span><span class="p">)</span>
  <span class="n">catalog</span><span class="o">.</span><span class="n">json</span>                       <span class="err">←</span> <span class="p">(</span><span class="n">선택</span><span class="p">)</span> <span class="n">버전</span><span class="o">/</span><span class="n">파일</span> <span class="n">목록</span> <span class="n">인덱스</span>
</code></pre></div></div>

<h2 id="운용-규칙짧게">운용 규칙(짧게)</h2>

<ol>
  <li>
    <p><strong>빌드 산출물</strong> 은 프로젝트 내부 <code class="language-plaintext highlighter-rouge">dist/</code>에 생성</p>
  </li>
  <li>
    <p><strong>QA 통과</strong> 후 <code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/</code>로 복사</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">checksums/</code>에 <code class="language-plaintext highlighter-rouge">*.sha256</code> 생성(무결성 검증)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ReleaseNotes.md</code>와 간단 설치 가이드 <code class="language-plaintext highlighter-rouge">/docs/</code> 배치</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">latest/</code>를 새 버전으로 갱신</p>
  </li>
  <li>
    <p>외부 공유 시엔 <strong>이 경로만 링크</strong> (프로젝트 내부 <code class="language-plaintext highlighter-rouge">dist/</code>는 개발용)</p>
  </li>
</ol>

<blockquote>
  <p>필요하면 <code class="language-plaintext highlighter-rouge">25_Jobs/REL-YYYY-###_&lt;project&gt;_vX.Y.Z/</code> 형태로 <strong>릴리스 Job</strong> 을 만들어 “체크섬 생성/노트 작성/배포 복사”를 자동화하면 좋아요.</p>
</blockquote>

<hr />

<h1 id="2-개인-설정-보관-골든-설정과-분리">2) 개인 설정 보관 (골든 설정과 분리)</h1>

<h2 id="폴더-추가-1">폴더 추가</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/40_Resources
  /reference/configs/                ← 골든 설정<span class="o">(</span>공유·문서화 대상<span class="o">)</span>
    vscode/ ruff/ pytest/ jupyter/ … 
  /personal/configs/                 ← 내 PC/취향/비밀 경로<span class="o">(</span>비공유<span class="o">)</span>
    /os/                             ← os별 설정
      mac/  win/  linux/
    /shell/                          ← bash/zsh/powershell 프로필
      bash/ zsh/ powershell/
    /editors/                        ← VSCode, PyCharm 사용자 설정
      vscode/settings.user.json
      vscode/keybindings.user.json
    /git/                            ← .gitconfig.local 등
    /python/                         ← pip.conf, poetry.toml, pypirc
    /tools/                          ← 각종 툴 개인 프리셋
    /secrets/README.md               ← <span class="o">(</span>실제 비밀은 두지 말고 안내만<span class="o">)</span>
    .gitignore                       ← 개인/민감 파일 커밋 방지
</code></pre></div></div>

<h3 id="레이어링권장-패턴">레이어링(권장 패턴)</h3>

<ul>
  <li>
    <p><strong>골든(Base)</strong> : <code class="language-plaintext highlighter-rouge">/40_Resources/reference/configs/...</code></p>
  </li>
  <li>
    <p><strong>개인(Override)</strong> : <code class="language-plaintext highlighter-rouge">/40_Resources/personal/configs/...</code></p>
  </li>
  <li>
    <p>로직/도구에서는 <code class="language-plaintext highlighter-rouge">base + personal</code>을 <strong>겹쳐 읽기</strong>(있으면 개인이 우선).</p>

    <ul>
      <li>
        <p>예: <code class="language-plaintext highlighter-rouge">config.yml</code> + <code class="language-plaintext highlighter-rouge">config.local.yml</code></p>
      </li>
      <li>
        <p>VSCode: <code class="language-plaintext highlighter-rouge">settings.json</code>(골든) + <code class="language-plaintext highlighter-rouge">settings.user.json</code>(개인)</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="안전편의-팁">안전/편의 팁</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">personal/configs/.gitignore</code>에 <code class="language-plaintext highlighter-rouge">*.local</code>, <code class="language-plaintext highlighter-rouge">secrets/*</code>, <code class="language-plaintext highlighter-rouge">*.key</code>, <code class="language-plaintext highlighter-rouge">*.pem</code>, <code class="language-plaintext highlighter-rouge">*.p12</code>, <code class="language-plaintext highlighter-rouge">id_*</code>, <code class="language-plaintext highlighter-rouge">*token*</code>, <code class="language-plaintext highlighter-rouge">.env*</code> 등 <strong>광범위 차단</strong></p>
  </li>
  <li>
    <p>진짜 비밀값은 저장하지 말고 <strong>예시만</strong>(e.g. <code class="language-plaintext highlighter-rouge">.env.example</code>) 남기기</p>
  </li>
  <li>
    <p>홈 디렉터리와 <strong>심볼릭 링크</strong> 로 연결하는 부트스트랩 스크립트를 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/bootstrap_*</code>에 둬도 좋음</p>

    <ul>
      <li>예: <code class="language-plaintext highlighter-rouge">ln -s /Work/40_Resources/personal/configs/shell/zsh/.zshrc ~/.zshrc</code></li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="빠른-요약한-줄씩">빠른 요약(한 줄씩)</h1>

<ul>
  <li>
    <p><strong>배포</strong> 는 <code class="language-plaintext highlighter-rouge">/75_Releases/&lt;project&gt;/vX.Y.Z/</code>에 버전/체크섬/문서까지 <strong>원스톱 정리</strong> , <code class="language-plaintext highlighter-rouge">latest/</code>로 최신 포인터 제공.</p>
  </li>
  <li>
    <p><strong>설정</strong> 은 “공유 가능한 골든”은 <code class="language-plaintext highlighter-rouge">/40_Resources/reference/configs/</code>, “내 취향/개인/민감”은 <code class="language-plaintext highlighter-rouge">/40_Resources/personal/configs/</code>로 <strong>이원화</strong> 하고, 툴은 <strong>개인 설정을 덮어쓰기 레이어</strong> 로 읽게 설계.</p>
  </li>
</ul>

<p>원하면 위 구조를 네 현재 스타터에 <strong>실제 폴더/샘플 파일까지 추가한 압축본</strong> 으로 바로 만들어 줄게.</p>

<p class="chat--user">

이제 마지막으로 지금까지의 모든 내용을 정리하자. 1. 최종 폴더 구조(각 폴더에 대한 설명과 예시 구조와 함께) 2. 주요 업무 flow

</p>

<p>좋아—지금까지 만든 걸 한 번에 보기 좋게 정리했어.<br />
필요하면 바로 복붙해서 팀 문서/Notion에 넣어도 돼.</p>

<h1 id="1-최종-폴더-구조-설명--예시-하위-구조">1) 최종 폴더 구조 (설명 + 예시 하위 구조)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span><span class="o">/</span>                                <span class="o">-</span> <span class="mi">1</span><span class="n">인</span> <span class="n">개발용</span> <span class="n">작업</span> <span class="n">루트</span>
  <span class="mo">00</span><span class="n">_Inbox</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">급히</span> <span class="n">던져두는</span> <span class="nf">임시함</span><span class="p">(</span><span class="n">매일</span> <span class="n">비우기</span><span class="p">)</span>
  <span class="mi">10</span><span class="n">_Today</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">오늘</span> <span class="n">집중</span> <span class="nf">작업</span><span class="p">(</span><span class="kt">WIP</span><span class="p">),</span> <span class="n">끝나면</span> <span class="n">제자리</span> <span class="n">이동</span>

  <span class="mi">20</span><span class="n">_Projects</span><span class="o">/</span>                       <span class="o">-</span> <span class="nf">툴</span><span class="p">(</span><span class="n">파이썬</span> <span class="n">패키지</span><span class="p">)</span> <span class="n">개발</span> <span class="n">공간</span>
    <span class="kt">PRJ</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="n">단일</span> <span class="nf">프로젝트</span><span class="p">(</span><span class="n">패키지</span><span class="p">)</span> <span class="nf">단위</span> <span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="kt">PRJ</span><span class="o">-</span><span class="mi">2025</span><span class="o">-</span><span class="mo">001</span><span class="n">_sample_app</span><span class="p">)</span>
      <span class="n">src</span><span class="sr">/&lt;package_name&gt;/            - 패키지 소스(예: sample_app/</span><span class="p">)</span>
      <span class="n">tests</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">pytest</span> <span class="n">테스트</span>
      <span class="n">scripts</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">install</span><span class="sr">/run/build/lint/test 스크립트(.sh/</span><span class="o">.</span><span class="n">ps1</span><span class="p">)</span>
      <span class="n">examples</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">배포용</span> <span class="n">예제</span> <span class="n">모음</span>
        <span class="n">data</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">공개</span> <span class="n">가능한</span> <span class="n">소형</span> <span class="n">샘플</span> <span class="n">데이터</span>
        <span class="n">scripts</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">run_</span><span class="o">*.</span><span class="n">py</span> <span class="n">예제</span> <span class="n">스크립트</span>
        <span class="n">docs</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">예제</span> <span class="n">설명</span> <span class="n">및</span> <span class="n">기대</span> <span class="n">출력</span>
      <span class="n">issues</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">버그</span><span class="sr">/개선 이슈 노트(예: BUG-2025-001/</span><span class="p">)</span>
      <span class="o">.</span><span class="n">devcontainer</span><span class="o">/</span>                 <span class="o">-</span> <span class="n">컨테이너</span> <span class="n">개발환경</span> <span class="n">설정</span>
      <span class="n">docs</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">프로젝트</span> <span class="nf">문서</span><span class="p">(</span><span class="n">설계</span><span class="sr">/ADR/</span><span class="n">가이드</span><span class="p">)</span>
      <span class="n">pyproject</span><span class="o">.</span><span class="n">toml</span>                 <span class="o">-</span> <span class="n">메타</span><span class="sr">/의존성/</span><span class="n">엔트리포인트</span>
      <span class="o">.</span><span class="n">gitignore</span><span class="p">,</span> <span class="o">.</span><span class="n">editorconfig</span><span class="p">,</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span>

  <span class="mi">25</span><span class="n">_Jobs</span><span class="o">/</span>                           <span class="o">-</span> <span class="n">툴을</span> <span class="n">사용해</span> <span class="n">만드는</span> <span class="err">“</span><span class="n">산출물</span> <span class="n">작업</span> <span class="n">단위</span><span class="err">”</span>
    <span class="kt">JOB</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="n">일반</span> <span class="n">산출</span> <span class="kt">Job</span><span class="p">(</span><span class="n">입력</span><span class="err">→</span><span class="n">설정</span><span class="err">→</span><span class="n">실행</span><span class="err">→</span><span class="n">산출</span><span class="p">)</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">요구사항</span><span class="sr">/검수기준/</span><span class="n">마감</span>
      <span class="mo">02</span><span class="n">_Input</span><span class="o">/</span>
        <span class="n">raw</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">원천</span> <span class="n">데이터</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="nf">파라미터</span><span class="p">(</span><span class="n">yml</span><span class="o">/</span><span class="n">json</span><span class="p">)</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">run</span><span class="o">.</span><span class="n">sh</span><span class="o">/</span><span class="n">ps1</span><span class="p">,</span> <span class="n">run</span><span class="o">.</span><span class="n">py</span><span class="p">,</span> <span class="n">로그</span>
      <span class="mo">05</span><span class="n">_Output</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">중간</span><span class="o">/</span><span class="n">최종</span> <span class="nf">산출물</span><span class="p">(</span><span class="n">작업용</span><span class="p">)</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span>                     <span class="o">-</span> <span class="nf">전달본</span><span class="p">(</span><span class="n">최종</span> <span class="n">산출물</span><span class="p">)</span>
      <span class="mi">90</span><span class="n">_Archive</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">완료</span> <span class="n">후</span> <span class="n">보관</span>
    <span class="kt">BUG</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="n">배포</span> <span class="n">버그</span> <span class="n">재현</span><span class="sr">/증거/</span><span class="n">수정</span> <span class="n">검증</span> <span class="kt">Job</span>
      <span class="mo">01</span><span class="n">_Report</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">제보</span> <span class="n">내용</span><span class="p">,</span> <span class="n">환경</span><span class="p">,</span> <span class="n">기대</span><span class="o">/</span><span class="n">실제</span>
      <span class="mo">02</span><span class="n">_Repro</span><span class="sr">/input/</span>                <span class="o">-</span> <span class="n">재현</span> <span class="n">입력</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">재현</span> <span class="n">파라미터</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">repro</span><span class="o">.</span><span class="n">py</span> <span class="o">+</span> <span class="n">스크립트</span><span class="p">,</span> <span class="n">repro_log</span><span class="o">.</span><span class="n">txt</span>
      <span class="mo">05</span><span class="n">_Evidence</span><span class="sr">/logs/              - 콘솔/</span><span class="n">크래시</span> <span class="n">로그</span><span class="err">·</span><span class="n">스크린샷</span><span class="err">·</span><span class="n">체크섬</span>
      <span class="mo">06</span><span class="n">_FixValidation</span><span class="o">/</span>              <span class="o">-</span> <span class="n">패치</span> <span class="n">검증</span> <span class="n">케이스</span>
    <span class="kt">EX</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>                <span class="o">-</span> <span class="err">“</span><span class="n">툴</span> <span class="n">예제</span><span class="err">”</span> <span class="n">산출</span> <span class="kt">Job</span><span class="p">(</span><span class="n">패키징</span> <span class="n">목적</span><span class="p">)</span>
    <span class="kt">SMOKE</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_tool</span><span class="o">/</span>             <span class="o">-</span> <span class="n">새</span> <span class="n">툴</span> <span class="n">설치</span> <span class="n">후</span> <span class="n">스모크</span><span class="o">/</span><span class="n">feasibility</span> <span class="n">테스트</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">성공</span> <span class="n">기준</span> <span class="n">정의</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">commands</span><span class="o">.</span><span class="nv">txt</span><span class="p">:</span> <span class="n">테스트</span> <span class="n">명령</span> <span class="n">목록</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">smoke</span><span class="o">.</span><span class="n">sh</span><span class="o">/</span><span class="n">ps1로</span> <span class="n">일괄</span> <span class="n">실행</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">결과</span> <span class="nf">요약</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">txt</span> <span class="n">등</span><span class="p">)</span>

  <span class="mi">30</span><span class="n">_Areas</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">지속</span> <span class="nf">업무</span><span class="p">(</span><span class="kt">Projects와</span> <span class="n">달리</span> <span class="n">계속</span> <span class="n">유지</span><span class="p">)</span>
    <span class="n">worklog</span><span class="sr">/YYYY/YY-MM/날짜.md       - 일일/</span><span class="n">주간</span> <span class="n">작업</span> <span class="nf">로그</span><span class="p">(</span><span class="mi">5</span><span class="n">줄</span> <span class="n">요약</span> <span class="n">권장</span><span class="p">)</span>
    <span class="n">environments</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">공통</span> <span class="n">환경</span> <span class="n">메모</span><span class="o">/</span><span class="n">전략</span>
    <span class="n">kb</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">knowledge</span> <span class="nf">base</span><span class="p">(</span><span class="n">지식</span> <span class="n">베이스</span><span class="p">)</span>
      <span class="n">tips</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">단문</span> <span class="nf">팁</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">python</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="n">regex</span><span class="o">.</span><span class="n">md</span><span class="p">)</span>
      <span class="n">cheatsheets</span><span class="o">/</span>                   <span class="o">-</span> <span class="n">한</span> <span class="n">장</span> <span class="n">요약</span>
      <span class="n">howtos</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">절차형</span> <span class="n">가이드</span>

  <span class="mi">31</span><span class="n">_Labs</span><span class="o">/</span>                           <span class="o">-</span> <span class="nf">실험실</span><span class="p">(</span><span class="n">가벼운</span> <span class="n">테스트</span><span class="o">/</span><span class="n">실습</span><span class="p">)</span>
    <span class="n">jupyter</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">스크래치</span> <span class="nf">노트북</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">regex_scratch</span><span class="o">.</span><span class="n">ipynb</span><span class="p">)</span>

  <span class="mi">40</span><span class="n">_Resources</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">참고</span> <span class="nf">자료</span><span class="p">(</span><span class="n">교육</span><span class="sr">/레퍼런스/설정/</span><span class="n">매뉴얼</span><span class="p">)</span>
    <span class="n">edu</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">교육</span><span class="err">·</span><span class="n">논문</span><span class="err">·</span><span class="n">튜토리얼</span>
      <span class="n">courses</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">강의</span><span class="o">/</span><span class="n">코스</span> <span class="n">자료</span>
      <span class="n">tutorials</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">튜토리얼</span> <span class="n">모음</span>
      <span class="n">papers</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">논문</span> <span class="n">관리</span>
        <span class="n">to_read</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">읽을</span> <span class="n">논문</span> <span class="kt">PDF</span>
        <span class="n">reading_notes</span><span class="o">/</span>               <span class="o">-</span> <span class="nf">메모</span><span class="p">(</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">MM</span><span class="o">-</span><span class="kt">DD_제목</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="kt">TEMPLATE</span><span class="o">.</span><span class="n">md</span><span class="p">)</span>
        <span class="n">summaries</span><span class="o">/</span>                   <span class="o">-</span> <span class="mi">1</span><span class="o">~</span><span class="mi">2</span> <span class="n">페이지</span> <span class="n">요약</span>
    <span class="n">reference</span><span class="o">/</span>                       <span class="o">-</span> <span class="err">“</span><span class="n">골든</span><span class="err">”</span> <span class="n">공용</span> <span class="nf">설정</span><span class="p">(</span><span class="n">공유</span><span class="o">/</span><span class="n">문서화</span> <span class="n">대상</span><span class="p">)</span>
      <span class="n">configs</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">표준</span> <span class="n">설정</span> <span class="n">모음</span>
        <span class="n">vscode</span><span class="o">/</span> <span class="n">ruff</span><span class="o">/</span> <span class="n">pytest</span><span class="o">/</span> <span class="n">pyinstaller</span><span class="o">/</span> <span class="n">pyside6</span><span class="o">/</span> <span class="n">jupyter</span><span class="o">/</span>
    <span class="n">personal</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">개인</span> <span class="nf">설정</span><span class="p">(</span><span class="n">내</span> <span class="kt">PC</span><span class="sr">/취향/</span><span class="n">비공개</span><span class="p">)</span>
      <span class="n">configs</span><span class="o">/</span>
        <span class="n">os</span><span class="sr">/{mac,win,linux}/</span>          <span class="o">-</span> <span class="kt">OS별</span> <span class="n">설정</span>
        <span class="n">shell</span><span class="sr">/{bash,zsh,powershell}/</span> <span class="o">-</span> <span class="n">쉘</span> <span class="n">프로필</span>
        <span class="n">editors</span><span class="sr">/vscode/</span>              <span class="o">-</span> <span class="n">settings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span><span class="p">,</span> <span class="n">keybindings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span>
        <span class="n">git</span><span class="o">/</span>                         <span class="o">-</span> <span class="o">.</span><span class="n">gitconfig</span><span class="o">.</span><span class="n">local</span> <span class="n">등</span>
        <span class="n">python</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">pip</span><span class="o">.</span><span class="n">conf</span><span class="p">,</span> <span class="n">poetry</span><span class="o">.</span><span class="n">toml</span><span class="p">,</span> <span class="n">pypirc</span>
        <span class="n">tools</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">각종</span> <span class="n">도구</span> <span class="n">개인</span> <span class="n">프리셋</span>
        <span class="n">secrets</span><span class="o">/</span><span class="kt">README</span><span class="o">.</span><span class="n">md</span>            <span class="o">-</span> <span class="p">(</span><span class="n">실제</span> <span class="n">비밀은</span> <span class="n">두지</span> <span class="n">않음</span><span class="p">)</span>
        <span class="o">.</span><span class="n">gitignore</span>                   <span class="o">-</span> <span class="o">*.</span><span class="n">local</span><span class="p">,</span> <span class="n">secrets</span><span class="cm">/* 등 광범위 차단
    manuals/                         - 매뉴얼/가이드(PDF/HTML/MD)
      &lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/  - 버전별 정리

  50_Snippets/                       - 재사용 코드/문구
    sql/ text/ bash/

  60_Assets/                         - 로고/폰트/템플릿 등 공용 리소스

  70_Exports/                        - 여러 Job의 “최종 전달본” 모아보기(옵션)

  75_Releases/                       - 유저 배포 전용 중앙 보관소
    &lt;project_slug&gt;/                  - 예: sample-app
      vX.Y.Z/                        - 버전별 폴더
        installers/                  - .exe/.msi/.pkg/.dmg 등
        wheels/                      - Python wheel(s)
        portable/                    - 포터블/압축본
        docs/                        - 설치 가이드, README, FAQ
        licenses/                    - LICENSE, ThirdPartyNotices.txt
        checksums/                   - *.sha256 (무결성 확인)
        ReleaseNotes.md              - 릴리스 노트
      latest/                        - 최신 버전(심볼릭 링크 또는 복사)
    catalog.json                     - (선택) 버전/파일 인덱스

  80_Tools/                          - 툴 설치/포터블/자동화
    installers/                      - 오프라인 설치 파일, install_notes.md
    bin/                             - 포터블 실행파일
    scripts/                         - 설치/유틸/부트스트랩 스크립트
    devcontainer/                    - 개발 컨테이너 관련

  85_Environments/                   - 개발 환경 예시
    conda/environment.yml
    venv/README.md
    docker/Dockerfile

  99_Archive/                        - 완료 프로젝트/Job/자료 보관
</span></code></pre></div></div>

<h3 id="네이밍--버전-규칙요약">네이밍 &amp; 버전 규칙(요약)</h3>

<ul>
  <li>
    <p><strong>프로젝트 폴더</strong> : <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_짧은이름</code> (예: <code class="language-plaintext highlighter-rouge">PRJ-2025-012_GUI툴</code>)</p>
  </li>
  <li>
    <p><strong>Job 폴더</strong> : <code class="language-plaintext highlighter-rouge">JOB/BUG/EX/SMOKE-연도-번호_이름</code></p>
  </li>
  <li>
    <p><strong>파일</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code> (최종본 금지, 버전 증가)</p>
  </li>
  <li>
    <p><strong>깊이</strong> : 최대 3단</p>
  </li>
  <li>
    <p><strong>설정 레이어링</strong> : <code class="language-plaintext highlighter-rouge">reference/configs</code>(공용 골든) + <code class="language-plaintext highlighter-rouge">personal/configs</code>(내 오버라이드)</p>
  </li>
</ul>

<hr />

<h1 id="2-주요-업무-flow-핵심-단계별">2) 주요 업무 Flow (핵심 단계별)</h1>

<h2 id="a-툴파이썬-패키지-개발--릴리스">A. 툴(파이썬 패키지) 개발 → 릴리스</h2>

<ol>
  <li>
    <p><strong>프로젝트 생성/진행</strong> : <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-...</code></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">./scripts/install.(sh|ps1)</code>로 venv + dev 의존성 설치</p>
      </li>
      <li>
        <p>기능 추가 → <code class="language-plaintext highlighter-rouge">tests/</code>에 단위 테스트, <code class="language-plaintext highlighter-rouge">ruff</code>로 린트</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>실행파일 빌드(옵션)</strong> : <code class="language-plaintext highlighter-rouge">./scripts/build_cli.sh</code> / <code class="language-plaintext highlighter-rouge">build_gui.sh</code></p>
  </li>
  <li>
    <p><strong>릴리스 산출 정리</strong> : QA 통과 후 <code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/</code>에</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">installers/</code>, <code class="language-plaintext highlighter-rouge">wheels/</code>, <code class="language-plaintext highlighter-rouge">portable/</code> + <code class="language-plaintext highlighter-rouge">docs/</code>, <code class="language-plaintext highlighter-rouge">licenses/</code>, <code class="language-plaintext highlighter-rouge">checksums/*.sha256</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ReleaseNotes.md</code> 작성, <code class="language-plaintext highlighter-rouge">latest/</code> 갱신</p>
      </li>
      <li>
        <p>(선택) <code class="language-plaintext highlighter-rouge">25_Jobs/REL-YYYY-###_...</code>로 릴리스 자동화 Job 운영</p>
      </li>
    </ul>
  </li>
</ol>

<h2 id="b-실제-산출물-만들기도구-사용--결과-전달">B. 실제 산출물 만들기(도구 사용 → 결과 전달)</h2>

<ol>
  <li>
    <p><strong>Job 생성</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/JOB-YYYY-###_이름</code> 복제</p>
  </li>
  <li>
    <p><strong>입력/설정</strong> : <code class="language-plaintext highlighter-rouge">02_Input/raw/</code>에 데이터, <code class="language-plaintext highlighter-rouge">03_Config/config.yml</code> 작성</p>
  </li>
  <li>
    <p><strong>실행</strong> : <code class="language-plaintext highlighter-rouge">04_Run/run.sh|ps1</code> → 결과 <code class="language-plaintext highlighter-rouge">06_Export/</code>, 로그·매니페스트 자동 생성</p>
  </li>
  <li>
    <p><strong>검수/전달</strong> : <code class="language-plaintext highlighter-rouge">qa_checklist.md</code> 확인 → 필요 시 <code class="language-plaintext highlighter-rouge">70_Exports/</code>에 모아두기</p>
  </li>
  <li>
    <p><strong>재현성 확보</strong> : 매니페스트에 <strong>툴 버전/파라미터/OS/Python/체크섬</strong> 기록</p>
  </li>
</ol>

<h2 id="c-배포-버그-제보--디버깅--수정-검증">C. 배포 버그 제보 → 디버깅 → 수정 검증</h2>

<ol>
  <li>
    <p><strong>수집/정리</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/BUG-YYYY-###_.../01_Report/</code>에 제보·환경·재현 절차 기록</p>
  </li>
  <li>
    <p><strong>재현 세팅</strong> : <code class="language-plaintext highlighter-rouge">02_Repro/input/</code>, <code class="language-plaintext highlighter-rouge">03_Config/</code> 구성 → <code class="language-plaintext highlighter-rouge">04_Run/repro.py</code> 실행</p>
  </li>
  <li>
    <p><strong>증거 수집</strong> : <code class="language-plaintext highlighter-rouge">05_Evidence/logs/</code>에 로그·덤프·스크린샷·체크섬</p>
  </li>
  <li>
    <p><strong>코드 작업</strong> : <code class="language-plaintext highlighter-rouge">20_Projects/.../issues/BUG-.../triage.md</code> → 원인/수정 방향</p>
  </li>
  <li>
    <p><strong>검증</strong> : <code class="language-plaintext highlighter-rouge">06_FixValidation/</code> 시나리오 통과 후 패치 릴리스(Flow A로 연결)</p>
  </li>
</ol>

<h2 id="d-배포-예제example-제작">D. 배포 예제(example) 제작</h2>

<ol>
  <li>
    <p><strong>프로젝트 내</strong> <code class="language-plaintext highlighter-rouge">examples/{data,scripts,docs}</code>에 <strong>최소 실행 예제</strong> 작성</p>
  </li>
  <li>
    <p>(선택) 패키징/전달용이면 <code class="language-plaintext highlighter-rouge">25_Jobs/EX-YYYY-###_...</code>로 Job 화 → 재현/전달 관리</p>
  </li>
</ol>

<h2 id="e-새로-설치한-툴-스모크feasibility-테스트">E. 새로 설치한 툴 스모크/feasibility 테스트</h2>

<ol>
  <li>
    <p><strong>Job 생성</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/SMOKE-YYYY-###_tool/</code></p>
  </li>
  <li>
    <p><strong>명령 정의</strong> : <code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code>(예: <code class="language-plaintext highlighter-rouge">tool --version</code>)</p>
  </li>
  <li>
    <p><strong>실행</strong> : <code class="language-plaintext highlighter-rouge">04_Run/smoke.sh|ps1</code> → <code class="language-plaintext highlighter-rouge">06_Export/result.txt</code></p>
  </li>
  <li>
    <p><strong>판정</strong> : 성공 기준(시간/종료코드/출력) 충족 확인</p>
  </li>
</ol>

<h2 id="f-빠른-실험정규표현식파이썬-문법-등">F. 빠른 실험(정규표현식·파이썬 문법 등)</h2>

<ol>
  <li>
    <p><strong>스크래치</strong> : <code class="language-plaintext highlighter-rouge">31_Labs/jupyter/regex_scratch.ipynb</code> 등에서 <strong>작게</strong> 실험</p>
  </li>
  <li>
    <p><strong>지식화</strong> : 유효한 내용은 <code class="language-plaintext highlighter-rouge">30_Areas/kb/{tips,cheatsheets,howtos}</code>로 승격 정리</p>
  </li>
</ol>

<h2 id="g-지식설정-자산화골든-vs-개인">G. 지식/설정 자산화(골든 vs 개인)</h2>

<ul>
  <li>
    <p><strong>골든 설정</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/reference/configs/</code>에서 <strong>공유 가능한 표준</strong> 을 관리</p>
  </li>
  <li>
    <p><strong>개인 설정</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/personal/configs/</code>에 내 취향/PC별 설정 저장</p>
  </li>
  <li>
    <p><strong>레이어링 원칙</strong> : 도구가 <code class="language-plaintext highlighter-rouge">base(골든) + personal(오버라이드)</code>를 함께 읽도록 설계</p>
  </li>
  <li>
    <p><strong>부트스트랩</strong> : <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>에 심볼릭 링크/복사 스크립트 두고 환경 신속 반영</p>
  </li>
</ul>

<h2 id="h-매뉴얼레퍼런스교육자료-관리">H. 매뉴얼/레퍼런스/교육자료 관리</h2>

<ul>
  <li>
    <p><strong>논문/교육</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/edu/</code>에서 <code class="language-plaintext highlighter-rouge">to_read → reading_notes → summaries</code> 흐름</p>
  </li>
  <li>
    <p><strong>매뉴얼</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/manuals/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/</code>에 버전별 정리</p>
  </li>
  <li>
    <p><strong>공통 참조 리소스</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/reference/</code>(골든)와 <code class="language-plaintext highlighter-rouge">personal/</code>(개인)를 구분</p>
  </li>
</ul>

<h2 id="i-일상-운영-루틴">I. 일상 운영 루틴</h2>

<ul>
  <li>
    <p><strong>매일</strong> : 캡처는 <code class="language-plaintext highlighter-rouge">00_Inbox</code> → 당일 작업은 <code class="language-plaintext highlighter-rouge">10_Today</code>에서 처리 → 제자리 이동</p>
  </li>
  <li>
    <p><strong>주 1회</strong> : <code class="language-plaintext highlighter-rouge">00_Inbox</code> 비우기, 완료 Job/Project는 <code class="language-plaintext highlighter-rouge">99_Archive</code>로 이동, <code class="language-plaintext highlighter-rouge">70_Exports</code> 정리</p>
  </li>
  <li>
    <p><strong>월 1회</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/edu</code>/<code class="language-plaintext highlighter-rouge">kb</code> 정리, 불용 자료 아카이브</p>
  </li>
</ul>

<hr />

<p>필요하면 네 환경/도메인(예: 영상·리포트·CAD) 기준으로 <strong>Job 템플릿의 QA 체크리스트/파일명 규격/파라미터 스키마</strong> 를 더 촘촘히 커스터마이즈해서 바로 쓸 버전으로 만들어줄게.</p>

<p class="chat--user">

근데 31_Labs랑 25_Jobs/SMOKE*랑 역할이 겹치진 않나?

</p>

<p>좋은 질문! 둘이 살짝 겹쳐 보이지만 <strong>목적·형식·보존성</strong> 이 다릅니다. 아래처럼 쓰면 깔끔해요.</p>

<h2 id="결론-먼저">결론 먼저</h2>

<ul>
  <li>
    <p><strong>31<em>Labs** = _개인용 스크래치 공간</em>. 빨리 시도하고 버려도 되는 **짧은 실험</strong>(regex, 파이썬 문법, 라이브러리 API 감 잡기).</p>
  </li>
  <li>
    <p><strong>25<em>Jobs/SMOKE-** * = _재현 가능한 점검 공간</em>. **새로 설치한 툴의 동작 확인/feasibility</strong> 를 <strong>증거와 함께</strong> 남기는 <strong>공식 스모크 테스트</strong>.</p>
  </li>
</ul>

<hr />

<h2 id="언제-어디에-결정-규칙">언제 어디에? (결정 규칙)</h2>

<ol>
  <li>
    <p><strong>5분/50줄 규칙</strong></p>

    <ul>
      <li>
        <p>5분 내, 50줄 이하의 즉흥 테스트 → <strong>31_Labs</strong></p>
      </li>
      <li>
        <p>설치·환경 의존, 통과 기준/로그/결과를 남겨야 함 → <strong>SMOKE Job</strong></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>재현 필요? 공유 필요?</strong></p>

    <ul>
      <li>
        <p>“나만 잠깐 확인” → <strong>31_Labs</strong></p>
      </li>
      <li>
        <p>“나중에 또 돌리거나 증빙/비교 필요” → <strong>SMOKE Job</strong></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>입력/설정/출력 구조가 필요?</strong></p>

    <ul>
      <li>
        <p>필요 없음(메모성/코드 조각) → <strong>31_Labs</strong></p>
      </li>
      <li>
        <p>필요 있음(명령 목록, 로그, 결과물, 매니페스트) → <strong>SMOKE Job</strong></p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="역할-차이-한눈에">역할 차이 한눈에</h2>

<table>
  <thead>
    <tr>
      <th>구분</th>
      <th>31_Labs</th>
      <th>25_Jobs/SMOKE-*</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>목적</td>
      <td>빠른 실험, 개념 확인</td>
      <td>설치 검증/feasibility, 재현/증빙</td>
    </tr>
    <tr>
      <td>형식</td>
      <td>자유(노트북/스크립트)</td>
      <td>정형(입력·설정·실행·결과 폴더)</td>
    </tr>
    <tr>
      <td>결과</td>
      <td>버려도 됨, 요약만 kb로 승격</td>
      <td>로그/결과/체크섬·통과기준 보존</td>
    </tr>
    <tr>
      <td>공유성</td>
      <td>개인 중심</td>
      <td>공유·재사용 전제</td>
    </tr>
    <tr>
      <td>예</td>
      <td>regex 패턴, pandas 한 줄 테스트</td>
      <td><code class="language-plaintext highlighter-rouge">tool --version</code>·샘플 실행·성능 스냅샷</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="충돌중복을-피하는-운용-룰">충돌/중복을 피하는 운용 룰</h2>

<ul>
  <li>
    <p><strong>프로모션 사다리</strong> : 31_Labs에서 시작 → “재현/공유 필요” 판단되면 <strong>SMOKE Job으로 승격</strong></p>

    <ol>
      <li>
        <p><code class="language-plaintext highlighter-rouge">25_Jobs/SMOKE-YYYY-###_&lt;tool&gt;/</code> 생성</p>
      </li>
      <li>
        <p>Labs에서 확인한 명령들을 <code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code>로 옮김</p>
      </li>
      <li>
        <p>기대 출력/성공 기준을 <code class="language-plaintext highlighter-rouge">01_Brief/brief.md</code>에 명시</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">04_Run/smoke.sh|ps1</code> 실행 → <code class="language-plaintext highlighter-rouge">06_Export/result.txt</code>와 로그로 증빙</p>
      </li>
    </ol>
  </li>
  <li>
    <p><strong>보존 정책</strong> : 31_Labs 산출물은 <strong>7일 이내</strong> 에</p>

    <ul>
      <li>
        <p>지식은 <code class="language-plaintext highlighter-rouge">30_Areas/kb/{tips, cheatsheets, howtos}</code>로</p>
      </li>
      <li>
        <p>재현 테스트는 <strong>SMOKE Job</strong> 으로</p>
      </li>
      <li>
        <p>나머지는 삭제/아카이브</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>네이밍</strong> :</p>

    <ul>
      <li>
        <p>Labs 노트북: <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_topic.ipynb</code></p>
      </li>
      <li>
        <p>SMOKE Job: <code class="language-plaintext highlighter-rouge">SMOKE-YYYY-###_&lt;tool&gt;</code> + 결과 파일 <code class="language-plaintext highlighter-rouge">result.txt</code>, 로그 <code class="language-plaintext highlighter-rouge">run_log.txt</code></p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="폴더-배치최종-권장">폴더 배치(최종 권장)</h2>

<ul>
  <li>
    <p><strong>31_Labs/jupyter/</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">regex_scratch.ipynb</code> (짧은 패턴/문법 테스트)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">proto_*.ipynb</code> (짧은 실험들)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>**25<em>Jobs/SMOKE-YYYY-###</em> <tool>/**</tool></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">01_Brief/</code> (성공 기준)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code> (검증 명령 리스트)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">04_Run/smoke.sh|ps1</code> (일괄 실행)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">06_Export/result.txt</code> + 로그/매니페스트(증빙)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="예시-시나리오">예시 시나리오</h2>

<ul>
  <li>
    <p><strong>“ffmpeg 새 버전 깔았는데 옵션 잘 먹나?”</strong></p>

    <ul>
      <li>Labs에서 옵션 한두 개 <strong>즉석 확인</strong> → 정상이라도 <strong>SMOKE Job</strong> 으로 승격해 <code class="language-plaintext highlighter-rouge">ffmpeg -version</code>, 샘플 변환 1건, 처리시간, 출력 해시까지 기록.</li>
    </ul>
  </li>
  <li>
    <p><strong>“정규식 lookbehind 기억 안 나네?”</strong></p>

    <ul>
      <li><strong>Labs 노트북</strong> 에서 바로 테스트 → 유용한 패턴은 <code class="language-plaintext highlighter-rouge">kb/regex.md</code>에 추가.</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="미니멀을-원한다면">미니멀을 원한다면</h2>

<ul>
  <li>
    <p>31_Labs를 <strong>완전히 없애고</strong> 모든 검증을 SMOKE로만 해도 됩니다. 다만 초기 탐색 속도는 떨어져요.</p>
  </li>
  <li>
    <p>반대로 간단히 하고 싶다면, “설치 검증/증빙이 필요한 것만 SMOKE, 나머지는 Labs”로 유지하는 게 보통 가장 효율적입니다.</p>
  </li>
</ul>

<p>원하면 <strong>Labs→SMOKE 자동 승격 스크립트</strong>(노트북 코드 블록을 <code class="language-plaintext highlighter-rouge">commands.txt</code>로 변환, Job 스켈레톤 생성)도 만들어 줄게.</p>

<p class="chat--user">

kb 대신 한국인이 쉽게 이해할만한 쉬운 단어 추천해주고, 폴더 구조 다시 한 번 자세히 설명해줘. 몇몇 라인에 대한 설명이 빠져 있는것 같아

</p>

<p>좋은 포인트! 먼저 <strong>kb</strong> 대체어부터 정리하고, 그다음 <strong>폴더 구조를 한 줄도 빠짐없이 상세 설명</strong> 으로 다시 써줄게.</p>

<h2 id="kb-대체어한국어">kb 대체어(한국어)</h2>

<ul>
  <li>
    <p>1순위 추천: <strong>노하우</strong> — 가장 직관적이고 짧음</p>
  </li>
  <li>
    <p>대안: <strong>지식창고</strong> , <strong>메모모음</strong> , <strong>가이드북</strong><br />
→ 아래 구조에서는 <code class="language-plaintext highlighter-rouge">30_Areas/kb</code>를 <strong><code class="language-plaintext highlighter-rouge">30_Areas/노하우</code></strong>로 바꿔서 표기할게.</p>
  </li>
</ul>

<hr />

<h2 id="최종-폴더-구조-설명--예시-하위-구조-포함">최종 폴더 구조 (설명 + 예시 하위 구조 포함)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span><span class="o">/</span>                                <span class="o">-</span> <span class="mi">1</span><span class="n">인</span> <span class="n">개발용</span> <span class="n">작업</span> <span class="nf">루트</span><span class="p">(</span><span class="n">모든</span> <span class="n">업무의</span> <span class="n">최고</span> <span class="n">루트</span><span class="p">)</span>
  <span class="mo">00</span><span class="n">_Inbox</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">급히</span> <span class="n">던져두는</span> <span class="nf">임시함</span><span class="p">(</span><span class="n">매일</span><span class="o">/</span><span class="n">주</span> <span class="mi">1</span><span class="n">회</span> <span class="n">비우기</span><span class="p">)</span>
  <span class="mi">10</span><span class="n">_Today</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">오늘</span> <span class="n">집중</span> <span class="nf">작업</span><span class="p">(</span><span class="kt">WIP</span><span class="p">)</span> <span class="n">임시</span> <span class="nf">거점</span><span class="p">(</span><span class="n">끝나면</span> <span class="n">제자리로</span> <span class="n">이동</span><span class="p">)</span>

  <span class="mi">20</span><span class="n">_Projects</span><span class="o">/</span>                       <span class="o">-</span> <span class="nf">툴</span><span class="p">(</span><span class="n">파이썬</span> <span class="n">패키지</span><span class="p">)</span> <span class="n">개발</span> <span class="nf">공간</span><span class="p">(</span><span class="n">코드</span> <span class="n">수명</span> <span class="n">중심</span><span class="p">)</span>
    <span class="kt">PRJ</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="n">개별</span> <span class="nf">프로젝트</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="kt">PRJ</span><span class="o">-</span><span class="mi">2025</span><span class="o">-</span><span class="mo">001</span><span class="n">_sample_app</span><span class="p">)</span>
      <span class="n">src</span><span class="sr">/&lt;package_name&gt;/            - 패키지 소스(예: sample_app/</span><span class="p">)</span>
      <span class="n">tests</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">pytest</span> <span class="n">테스트</span> <span class="n">케이스</span>
      <span class="n">scripts</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">install</span><span class="sr">/run/build/lint/test 스크립트(.sh/</span><span class="o">.</span><span class="n">ps1</span><span class="p">)</span>
      <span class="n">examples</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">배포용</span> <span class="nf">예제</span><span class="p">(</span><span class="n">최소</span> <span class="n">실행</span> <span class="n">가능</span> <span class="n">샘플</span><span class="p">)</span>
        <span class="n">data</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">공개</span> <span class="n">가능한</span> <span class="n">소형</span> <span class="n">샘플</span> <span class="n">데이터</span>
        <span class="n">scripts</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">run_</span><span class="o">*.</span><span class="n">py</span> <span class="n">예제</span> <span class="n">스크립트</span>
        <span class="n">docs</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">예제</span> <span class="n">설명</span><span class="err">·</span><span class="n">기대</span> <span class="n">출력</span>
      <span class="n">issues</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">버그</span><span class="sr">/개선 이슈 노트(예: BUG-2025-001/</span><span class="p">)</span>
      <span class="n">docs</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">설계</span> <span class="n">문서</span><span class="sr">/ADR/</span><span class="n">가이드</span>
      <span class="o">.</span><span class="n">devcontainer</span><span class="o">/</span>                 <span class="o">-</span> <span class="n">컨테이너</span> <span class="nf">개발환경</span><span class="p">(</span><span class="n">devcontainer</span><span class="o">.</span><span class="n">json</span> <span class="n">등</span><span class="p">)</span>
      <span class="n">pyproject</span><span class="o">.</span><span class="n">toml</span>                 <span class="o">-</span> <span class="n">메타</span><span class="sr">/의존성/</span><span class="nf">엔트리포인트</span><span class="p">(</span><span class="kt">PEP</span> <span class="mi">621</span><span class="p">)</span>
      <span class="o">.</span><span class="n">gitignore</span><span class="p">,</span> <span class="o">.</span><span class="n">editorconfig</span><span class="p">,</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span> <span class="o">-</span> <span class="n">개발</span> <span class="n">편의</span><span class="err">·</span><span class="n">개요</span>

  <span class="mi">25</span><span class="n">_Jobs</span><span class="o">/</span>                           <span class="o">-</span> <span class="n">툴을</span> <span class="n">사용해</span> <span class="n">만드는</span> <span class="err">“</span><span class="n">산출물</span> <span class="n">작업</span> <span class="n">단위</span><span class="err">”</span><span class="p">(</span><span class="n">프로세스</span> <span class="n">중심</span><span class="p">)</span>
    <span class="kt">JOB</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="n">일반</span> <span class="n">산출</span> <span class="kt">Job</span><span class="p">(</span><span class="n">입력</span><span class="err">→</span><span class="n">설정</span><span class="err">→</span><span class="n">실행</span><span class="err">→</span><span class="n">산출</span><span class="p">)</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">요구사항</span><span class="sr">/수락 기준/</span><span class="n">마감</span> <span class="n">명시</span>
      <span class="mo">02</span><span class="n">_Input</span><span class="o">/</span>
        <span class="n">raw</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">원천</span> <span class="nf">데이터</span><span class="p">(</span><span class="n">읽기</span> <span class="n">전용</span> <span class="n">보관</span><span class="p">)</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="nf">파라미터</span><span class="p">(</span><span class="n">yml</span><span class="o">/</span><span class="n">json</span><span class="p">),</span> <span class="n">실행</span> <span class="n">설정</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">run</span><span class="o">.</span><span class="n">sh</span><span class="o">|</span><span class="n">ps1</span><span class="p">,</span> <span class="n">run</span><span class="o">.</span><span class="n">py</span><span class="p">,</span> <span class="n">실행</span> <span class="n">로그</span>
      <span class="mo">05</span><span class="n">_Output</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">중간</span><span class="o">/</span><span class="n">최종</span> <span class="nf">산출물</span><span class="p">(</span><span class="n">작업</span> <span class="n">영역</span><span class="p">)</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span>                     <span class="o">-</span> <span class="nf">전달본</span><span class="p">(</span><span class="n">최종</span> <span class="n">산출물</span><span class="p">)</span>
      <span class="mi">90</span><span class="n">_Archive</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">완료</span> <span class="n">후</span> <span class="n">장기</span> <span class="n">보관</span>
    <span class="kt">BUG</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="n">배포</span> <span class="n">버그</span> <span class="n">재현</span><span class="sr">/증거/</span><span class="n">수정</span> <span class="n">검증</span> <span class="kt">Job</span>
      <span class="mo">01</span><span class="n">_Report</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">제보</span> <span class="n">내용</span><span class="err">·</span><span class="n">환경</span><span class="err">·</span><span class="n">기대</span><span class="o">/</span><span class="n">실제</span> <span class="n">기록</span>
      <span class="mo">02</span><span class="n">_Repro</span><span class="sr">/input/</span>                <span class="o">-</span> <span class="n">재현에</span> <span class="n">필요한</span> <span class="n">입력</span> <span class="n">샘플</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">재현</span> <span class="n">파라미터</span><span class="err">·</span><span class="n">플래그</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">repro</span><span class="o">.</span><span class="n">py</span> <span class="o">+</span> <span class="n">스크립트</span><span class="p">,</span> <span class="n">repro_log</span><span class="o">.</span><span class="n">txt</span>
      <span class="mo">05</span><span class="n">_Evidence</span><span class="sr">/logs/              - 콘솔/</span><span class="n">크래시</span> <span class="n">로그</span><span class="err">·</span><span class="n">스크린샷</span><span class="err">·</span><span class="n">체크섬</span>
      <span class="mo">06</span><span class="n">_FixValidation</span><span class="o">/</span>              <span class="o">-</span> <span class="n">패치</span> <span class="n">검증</span> <span class="n">시나리오</span><span class="o">/</span><span class="n">결과</span>
    <span class="kt">EX</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>                <span class="o">-</span> <span class="err">“</span><span class="n">툴</span> <span class="n">예제</span><span class="err">”</span><span class="n">를</span> <span class="n">패키징</span><span class="err">·</span><span class="n">배포하기</span> <span class="n">위한</span> <span class="kt">Job</span><span class="p">(</span><span class="n">선택</span><span class="p">)</span>
    <span class="kt">SMOKE</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_tool</span><span class="o">/</span>             <span class="o">-</span> <span class="n">새</span> <span class="n">툴</span> <span class="n">설치</span> <span class="n">후</span> <span class="n">스모크</span><span class="o">/</span><span class="n">feasibility</span> <span class="n">테스트</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">성공</span> <span class="nf">기준</span><span class="p">(</span><span class="n">시간</span><span class="err">·</span><span class="n">종료코드</span><span class="err">·</span><span class="n">출력</span><span class="p">)</span> <span class="n">정의</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">commands</span><span class="o">.</span><span class="nv">txt</span><span class="p">:</span> <span class="n">검증</span> <span class="n">명령</span> <span class="n">목록</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">smoke</span><span class="o">.</span><span class="n">sh</span><span class="o">|</span><span class="n">ps1로</span> <span class="n">일괄</span> <span class="nf">실행</span><span class="p">(</span><span class="n">로그</span> <span class="n">남김</span><span class="p">)</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">결과</span> <span class="nf">요약</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">txt</span> <span class="n">등</span><span class="p">)</span>

  <span class="mi">30</span><span class="n">_Areas</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">지속</span> <span class="nf">업무</span><span class="p">(</span><span class="n">장기</span> <span class="n">유지되는</span> <span class="n">영역</span><span class="p">)</span>
    <span class="n">worklog</span><span class="sr">/YYYY/YY-MM/날짜.md       - 일일/</span><span class="n">주간</span> <span class="n">작업</span> <span class="nf">로그</span><span class="p">(</span><span class="mi">5</span><span class="n">줄</span> <span class="n">요약</span> <span class="n">권장</span><span class="p">)</span>
    <span class="n">environments</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">공통</span> <span class="n">환경</span> <span class="n">메모</span><span class="o">/</span><span class="nf">전략</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="kt">Python</span> <span class="n">버전</span> <span class="n">정책</span><span class="p">)</span>
    <span class="n">노하우</span><span class="o">/</span>                          <span class="o">-</span> <span class="kt">Knowledge</span> <span class="kt">Base</span><span class="p">(</span><span class="n">축적형</span> <span class="n">지식</span><span class="p">,</span> <span class="err">‘</span><span class="n">kb</span><span class="err">’</span> <span class="n">대체</span><span class="p">)</span>
      <span class="n">팁</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">단문</span> <span class="nf">팁</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">python</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="n">regex</span><span class="o">.</span><span class="n">md</span><span class="p">)</span>
      <span class="n">요약표</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">한</span> <span class="n">장짜리</span> <span class="n">치트시트</span>
      <span class="n">가이드</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">절차형</span> <span class="kt">How</span><span class="o">-</span><span class="nf">to</span><span class="p">(</span><span class="n">설치</span><span class="sr">/배포/</span><span class="n">디버깅</span> <span class="n">절차</span><span class="p">)</span>

  <span class="mi">31</span><span class="n">_Labs</span><span class="o">/</span>                           <span class="o">-</span> <span class="nf">실험실</span><span class="p">(</span><span class="n">짧은</span> <span class="n">테스트</span><span class="o">/</span><span class="n">프로토타입</span><span class="p">;</span> <span class="n">재현</span> <span class="n">불필수</span><span class="p">)</span>
    <span class="n">jupyter</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">스크래치</span> <span class="nf">노트북</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">regex_scratch</span><span class="o">.</span><span class="n">ipynb</span><span class="p">)</span>

  <span class="mi">40</span><span class="n">_Resources</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">참고</span> <span class="nf">자료</span><span class="p">(</span><span class="n">교육</span><span class="sr">/레퍼런스/설정/</span><span class="n">매뉴얼</span><span class="p">)</span>
    <span class="n">edu</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">교육</span><span class="err">·</span><span class="n">논문</span><span class="err">·</span><span class="n">튜토리얼</span>
      <span class="n">courses</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">강의</span><span class="err">·</span><span class="n">코스</span> <span class="nf">자료</span><span class="p">(</span><span class="n">슬라이드</span><span class="o">/</span><span class="n">노트</span><span class="p">)</span>
      <span class="n">tutorials</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">튜토리얼</span> <span class="nf">모음</span><span class="p">(</span><span class="n">링크</span><span class="o">/</span><span class="n">코드</span><span class="p">)</span>
      <span class="n">papers</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">논문</span> <span class="nf">관리</span><span class="p">(</span><span class="n">읽기</span><span class="err">→</span><span class="n">메모</span><span class="err">→</span><span class="n">요약</span> <span class="n">흐름</span><span class="p">)</span>
        <span class="n">to_read</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">읽을</span> <span class="n">논문</span> <span class="kt">PDF</span>
        <span class="n">reading_notes</span><span class="o">/</span>               <span class="o">-</span> <span class="nf">메모</span><span class="p">(</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">MM</span><span class="o">-</span><span class="kt">DD_제목</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="kt">TEMPLATE</span><span class="o">.</span><span class="n">md</span> <span class="n">포함</span><span class="p">)</span>
        <span class="n">summaries</span><span class="o">/</span>                   <span class="o">-</span> <span class="mi">1</span><span class="o">~</span><span class="mi">2</span><span class="n">페이지</span> <span class="n">요약본</span>
    <span class="n">reference</span><span class="o">/</span>                       <span class="o">-</span> <span class="err">“</span><span class="n">골든</span><span class="err">”</span> <span class="n">공용</span> <span class="nf">설정</span><span class="p">(</span><span class="n">공유</span><span class="err">·</span><span class="n">문서화</span> <span class="n">대상</span><span class="p">)</span>
      <span class="n">configs</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">표준</span> <span class="n">설정</span> <span class="nf">모음</span><span class="p">(</span><span class="n">프로젝트에서</span> <span class="n">재사용</span><span class="p">)</span>
        <span class="n">vscode</span><span class="o">/</span> <span class="n">ruff</span><span class="o">/</span> <span class="n">pytest</span><span class="o">/</span> <span class="n">pyinstaller</span><span class="o">/</span> <span class="n">pyside6</span><span class="o">/</span> <span class="n">jupyter</span><span class="o">/</span> <span class="o">-</span> <span class="n">도구별</span> <span class="n">샘플</span>
    <span class="n">personal</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">개인</span> <span class="nf">설정</span><span class="p">(</span><span class="n">내</span> <span class="kt">PC</span><span class="sr">/취향/</span><span class="n">비공개</span><span class="p">)</span>
      <span class="n">configs</span><span class="o">/</span>
        <span class="n">os</span><span class="sr">/{mac,win,linux}/          - OS별 설정(예: 키보드/</span><span class="n">언어</span><span class="p">)</span>
        <span class="n">shell</span><span class="sr">/{bash,zsh,powershell}/ - 쉘 프로필(.zshrc/</span><span class="o">.</span><span class="n">bashrc</span> <span class="n">등</span><span class="p">)</span>
        <span class="n">editors</span><span class="sr">/vscode/</span>              <span class="o">-</span> <span class="n">settings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span><span class="p">,</span> <span class="n">keybindings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span>
        <span class="n">git</span><span class="o">/</span>                         <span class="o">-</span> <span class="o">.</span><span class="n">gitconfig</span><span class="o">.</span><span class="n">local</span> <span class="n">등</span>
        <span class="n">python</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">pip</span><span class="o">.</span><span class="n">conf</span><span class="p">,</span> <span class="n">poetry</span><span class="o">.</span><span class="n">toml</span><span class="p">,</span> <span class="n">pypirc</span>
        <span class="n">tools</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">각종</span> <span class="n">도구</span> <span class="n">개인</span> <span class="n">프리셋</span>
        <span class="n">secrets</span><span class="o">/</span><span class="kt">README</span><span class="o">.</span><span class="n">md</span>            <span class="o">-</span> <span class="p">(</span><span class="n">실제</span> <span class="n">비밀은</span> <span class="n">두지</span> <span class="n">말고</span> <span class="n">안내만</span><span class="p">)</span>
        <span class="o">.</span><span class="n">gitignore</span>                   <span class="o">-</span> <span class="o">*.</span><span class="n">local</span><span class="p">,</span> <span class="n">secrets</span><span class="cm">/*, *.pem 등 광범위 차단
    manuals/                         - 매뉴얼/가이드(PDF/HTML/MD)
      &lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/  - 벤더/제품/버전별 정리

  50_Snippets/                       - 재사용 코드·문구 조각
    sql/ text/ bash/                 - 카테고리별 스니펫

  60_Assets/                         - 로고/폰트/템플릿·브랜딩 리소스

  70_Exports/                        - 여러 Job의 “최종 전달본” 뷰(모아보기; 선택)

  75_Releases/                       - 유저 배포 전용 중앙 보관소(버전별)
    &lt;project_slug&gt;/                  - 예: sample-app
      vX.Y.Z/                        - 특정 버전 릴리스
        installers/                  - .exe/.msi/.pkg/.dmg 등 설치 프로그램
        wheels/                      - Python wheel(s)
        portable/                    - 포터블/압축 패키지
        docs/                        - README/설치 가이드/FAQ
        licenses/                    - LICENSE/ThirdPartyNotices.txt
        checksums/                   - *.sha256(무결성 검증용)
        ReleaseNotes.md              - 릴리스 노트(변경 사항)
      latest/                        - 최신 버전 포인터(심볼릭 링크/복사)
    catalog.json                     - (선택) 버전·파일 인덱스

  80_Tools/                          - 툴 설치/포터블/자동화 스크립트
    installers/                      - 오프라인 설치 파일 + install_notes.md
    bin/                             - 포터블 실행 파일(로컬 PATH로 연결 가능)
    scripts/                         - 설치·부트스트랩·유틸 스크립트
    devcontainer/                    - 개발 컨테이너 도구(공유 템플릿)

  85_Environments/                   - 개발 환경 예시(고정·재현 목적)
    conda/environment.yml            - conda 환경 정의
    venv/README.md                   - 표준 venv 사용 가이드
    docker/Dockerfile                - 개발 컨테이너 베이스 이미지

  99_Archive/                        - 완료 Project/Job/자료 장기 보관(읽기 전용)
</span></code></pre></div></div>

<hr />

<h3 id="네이밍운용-규칙요약">네이밍·운용 규칙(요약)</h3>

<ul>
  <li>
    <p><strong>프로젝트 폴더</strong> : <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_짧은이름</code> (예: <code class="language-plaintext highlighter-rouge">PRJ-2025-012_GUI툴</code>)</p>
  </li>
  <li>
    <p><strong>Job 폴더</strong> : <code class="language-plaintext highlighter-rouge">JOB/BUG/EX/SMOKE-연도-번호_이름</code></p>
  </li>
  <li>
    <p><strong>파일명</strong> : <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code> (최종본 대신 버전 넘김)</p>
  </li>
  <li>
    <p><strong>깊이 제한</strong> : 최대 3단(찾기/권한/동기화 이슈 최소화)</p>
  </li>
  <li>
    <p><strong>설정 레이어링</strong> : <code class="language-plaintext highlighter-rouge">reference/configs</code>(골든) + <code class="language-plaintext highlighter-rouge">personal/configs</code>(개인 오버라이드)</p>
  </li>
  <li>
    <p><strong>Labs ↔ SMOKE 경계</strong> : 5분/50줄 규칙—짧은 실험은 <code class="language-plaintext highlighter-rouge">31_Labs</code>, 재현·증빙 필요 시 <code class="language-plaintext highlighter-rouge">SMOKE Job</code>으로 승격</p>
  </li>
</ul>

<p>필요하면 위 구조에서 <strong>노하우 하위 폴더 이름</strong>(예: <code class="language-plaintext highlighter-rouge">팁</code>→<code class="language-plaintext highlighter-rouge">Tip</code>, <code class="language-plaintext highlighter-rouge">요약표</code>→<code class="language-plaintext highlighter-rouge">Cheatsheets</code>)을 영문으로 바꾼 변형판도 같이 정리해 줄게.</p>

<p class="chat--user">

응 영문으로 바꿔줘. 그리고 10_Today는 어떻게 쓰는거야? 내가 작업하는 것을 mv로 여기로 가져와?

</p>

<p>좋아! 요청대로 <strong>한국어 폴더명 → 영어</strong> 로 바꾸고, <strong><code class="language-plaintext highlighter-rouge">10_Today</code>의 실제 운용</strong>도 단계별로 정리해줄게.</p>

<hr />

<h1 id="1-영어로-바꾼-최종-폴더-구조-설명--예시-하위">1) 영어로 바꾼 최종 폴더 구조 (설명 + 예시 하위)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span><span class="o">/</span>                                <span class="o">-</span> <span class="kt">Solo</span> <span class="n">dev</span> <span class="n">workspace</span> <span class="n">root</span>
  <span class="mo">00</span><span class="n">_Inbox</span><span class="o">/</span>                          <span class="o">-</span> <span class="kt">Quick</span> <span class="n">dump</span> <span class="nf">inbox</span> <span class="p">(</span><span class="n">clear</span> <span class="n">daily</span><span class="o">/</span><span class="n">weekly</span><span class="p">)</span>
  <span class="mi">10</span><span class="n">_Today</span><span class="o">/</span>                          <span class="o">-</span> <span class="kt">Today</span><span class="err">'</span><span class="n">s</span> <span class="n">focus</span> <span class="n">staging</span> <span class="nf">area</span> <span class="p">(</span><span class="kt">WIP</span> <span class="n">dashboard</span><span class="p">)</span>

  <span class="mi">20</span><span class="n">_Projects</span><span class="o">/</span>                       <span class="o">-</span> <span class="kt">Tool</span> <span class="p">(</span><span class="kt">Python</span> <span class="kd">package</span><span class="p">)</span> <span class="nf">development</span> <span class="p">(</span><span class="n">code</span> <span class="n">lifecycle</span><span class="p">)</span>
    <span class="kt">PRJ</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="kt">One</span> <span class="n">project</span><span class="o">/</span><span class="nf">package</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span><span class="p">,</span> <span class="kt">PRJ</span><span class="o">-</span><span class="mi">2025</span><span class="o">-</span><span class="mo">001</span><span class="n">_sample_app</span><span class="p">)</span>
      <span class="n">src</span><span class="sr">/&lt;package_name&gt;/            - Package source (e.g., sample_app/</span><span class="p">)</span>
      <span class="n">tests</span><span class="o">/</span>                         <span class="o">-</span> <span class="kt">Pytest</span> <span class="n">cases</span>
      <span class="n">scripts</span><span class="o">/</span>                       <span class="o">-</span> <span class="n">install</span><span class="sr">/run/build/lint/test (.sh/</span><span class="o">.</span><span class="n">ps1</span><span class="p">)</span>
      <span class="n">examples</span><span class="o">/</span>                      <span class="o">-</span> <span class="kt">Minimal</span> <span class="n">runnable</span> <span class="n">examples</span> <span class="k">for</span> <span class="n">users</span>
        <span class="n">data</span><span class="o">/</span>                        <span class="o">-</span> <span class="kt">Small</span> <span class="kd">public</span><span class="o">/</span><span class="n">sample</span> <span class="n">datasets</span>
        <span class="n">scripts</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">run_</span><span class="o">*.</span><span class="n">py</span> <span class="n">example</span> <span class="n">scripts</span>
        <span class="n">docs</span><span class="o">/</span>                        <span class="o">-</span> <span class="kt">Example</span> <span class="n">docs</span> <span class="o">&amp;</span> <span class="n">expected</span> <span class="n">outputs</span>
      <span class="n">issues</span><span class="o">/</span>                        <span class="o">-</span> <span class="kt">Bug</span><span class="sr">/feature notes (e.g., BUG-2025-001/</span><span class="p">)</span>
      <span class="n">docs</span><span class="o">/</span>                          <span class="o">-</span> <span class="kt">Design</span> <span class="n">docs</span><span class="sr">/ADR/</span><span class="n">guides</span>
      <span class="o">.</span><span class="n">devcontainer</span><span class="o">/</span>                 <span class="o">-</span> <span class="kt">Dev</span> <span class="n">container</span> <span class="n">config</span>
      <span class="n">pyproject</span><span class="o">.</span><span class="n">toml</span>                 <span class="o">-</span> <span class="kt">Metadata</span><span class="sr">/deps/</span><span class="n">entry</span> <span class="nf">points</span> <span class="p">(</span><span class="kt">PEP</span> <span class="mi">621</span><span class="p">)</span>
      <span class="o">.</span><span class="n">gitignore</span><span class="p">,</span> <span class="o">.</span><span class="n">editorconfig</span><span class="p">,</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span>

  <span class="mi">25</span><span class="n">_Jobs</span><span class="o">/</span>                           <span class="o">-</span> <span class="kt">Real</span> <span class="n">deliverable</span> <span class="nf">runs</span> <span class="p">(</span><span class="n">process</span> <span class="n">lifecycle</span><span class="p">)</span>
    <span class="kt">JOB</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="kt">General</span> <span class="nf">job</span> <span class="p">(</span><span class="n">input</span> <span class="err">→</span> <span class="n">config</span> <span class="err">→</span> <span class="n">run</span> <span class="err">→</span> <span class="n">outputs</span><span class="p">)</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span>                      <span class="o">-</span> <span class="kt">Requirements</span><span class="sr">/acceptance criteria/</span><span class="n">deadline</span>
      <span class="mo">02</span><span class="n">_Input</span><span class="o">/</span>
        <span class="n">raw</span><span class="o">/</span>                         <span class="o">-</span> <span class="kt">Source</span> <span class="nf">data</span> <span class="p">(</span><span class="n">read</span><span class="o">-</span><span class="n">only</span><span class="p">)</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="kt">Params</span> <span class="p">(</span><span class="n">yml</span><span class="o">/</span><span class="n">json</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">run</span> <span class="n">settings</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">run</span><span class="o">.</span><span class="n">sh</span><span class="o">|</span><span class="n">ps1</span><span class="p">,</span> <span class="n">run</span><span class="o">.</span><span class="n">py</span><span class="p">,</span> <span class="n">logs</span>
      <span class="mo">05</span><span class="n">_Output</span><span class="o">/</span>                     <span class="o">-</span> <span class="kt">Intermediate</span><span class="o">/</span><span class="nf">final</span> <span class="p">(</span><span class="n">working</span> <span class="n">area</span><span class="p">)</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span>                     <span class="o">-</span> <span class="kt">Final</span> <span class="n">deliverables</span> <span class="k">for</span> <span class="n">hand</span><span class="o">-</span><span class="n">off</span>
      <span class="mi">90</span><span class="n">_Archive</span><span class="o">/</span>                    <span class="o">-</span> <span class="kt">Long</span><span class="o">-</span><span class="n">term</span> <span class="n">storage</span> <span class="n">after</span> <span class="n">completion</span>
    <span class="kt">BUG</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>               <span class="o">-</span> <span class="kt">Distributed</span><span class="o">-</span><span class="n">binary</span> <span class="n">bug</span> <span class="n">repro</span> <span class="o">&amp;</span> <span class="n">fix</span> <span class="n">validation</span>
      <span class="mo">01</span><span class="n">_Report</span><span class="o">/</span>                     <span class="o">-</span> <span class="kt">Report</span><span class="sr">/env/</span><span class="n">expected</span> <span class="n">vs</span> <span class="n">actual</span>
      <span class="mo">02</span><span class="n">_Repro</span><span class="sr">/input/</span>                <span class="o">-</span> <span class="kt">Minimal</span> <span class="n">repro</span> <span class="n">inputs</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="kt">Repro</span> <span class="n">flags</span><span class="o">/</span><span class="n">params</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">repro</span><span class="o">.</span><span class="n">py</span> <span class="o">+</span> <span class="n">scripts</span><span class="p">,</span> <span class="n">repro_log</span><span class="o">.</span><span class="n">txt</span>
      <span class="mo">05</span><span class="n">_Evidence</span><span class="sr">/logs/              - Console/</span><span class="n">crash</span> <span class="n">logs</span><span class="p">,</span> <span class="n">screenshots</span><span class="p">,</span> <span class="n">checksums</span>
      <span class="mo">06</span><span class="n">_FixValidation</span><span class="o">/</span>              <span class="o">-</span> <span class="kt">Post</span><span class="o">-</span><span class="n">fix</span> <span class="n">validation</span> <span class="n">scenarios</span>
    <span class="kt">EX</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>                <span class="o">-</span> <span class="kt">Packaged</span> <span class="n">examples</span> <span class="nf">job</span> <span class="p">(</span><span class="kd">optional</span><span class="p">)</span>
    <span class="kt">SMOKE</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_tool</span><span class="o">/</span>             <span class="o">-</span> <span class="kt">New</span> <span class="n">tool</span> <span class="n">smoke</span><span class="o">/</span><span class="n">feasibility</span> <span class="n">tests</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span>                      <span class="o">-</span> <span class="kt">Pass</span> <span class="nf">criteria</span> <span class="p">(</span><span class="n">time</span><span class="sr">/exit-code/</span><span class="n">output</span><span class="p">)</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                     <span class="o">-</span> <span class="n">commands</span><span class="o">.</span><span class="nf">txt</span> <span class="p">(</span><span class="n">test</span> <span class="n">commands</span><span class="p">)</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">smoke</span><span class="o">.</span><span class="n">sh</span><span class="o">|</span><span class="nf">ps1</span> <span class="p">(</span><span class="n">batch</span> <span class="n">run</span><span class="p">,</span> <span class="n">logs</span><span class="p">)</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span>                     <span class="o">-</span> <span class="kt">Result</span> <span class="nf">summary</span> <span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">txt</span><span class="p">)</span>

  <span class="mi">30</span><span class="n">_Areas</span><span class="o">/</span>                          <span class="o">-</span> <span class="kt">Ongoing</span> <span class="nf">areas</span> <span class="p">(</span><span class="n">long</span><span class="o">-</span><span class="n">lived</span><span class="p">)</span>
    <span class="n">worklog</span><span class="sr">/YYYY/YY-MM/DATE.md       - Daily/</span><span class="n">weekly</span> <span class="mi">5</span><span class="o">-</span><span class="n">line</span> <span class="n">logs</span>
    <span class="n">environments</span><span class="o">/</span>                    <span class="o">-</span> <span class="kt">Common</span> <span class="n">env</span> <span class="nf">strategy</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span><span class="p">,</span> <span class="kt">Python</span> <span class="n">policy</span><span class="p">)</span>
    <span class="n">knowledge_base</span><span class="o">/</span>                  <span class="o">-</span> <span class="kt">Accumulated</span> <span class="nf">knowledge</span> <span class="p">(</span><span class="n">was</span> <span class="err">'</span><span class="n">kb</span><span class="o">/</span><span class="n">노하우</span><span class="err">'</span><span class="p">)</span>
      <span class="n">tips</span><span class="o">/</span>                          <span class="o">-</span> <span class="kt">Short</span> <span class="nf">tips</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span><span class="p">,</span> <span class="n">python</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="n">regex</span><span class="o">.</span><span class="n">md</span><span class="p">)</span>
      <span class="n">cheatsheets</span><span class="o">/</span>                   <span class="o">-</span> <span class="kt">One</span><span class="o">-</span><span class="n">pagers</span>
      <span class="n">howtos</span><span class="o">/</span>                        <span class="o">-</span> <span class="kt">Step</span><span class="o">-</span><span class="n">by</span><span class="o">-</span><span class="n">step</span> <span class="nf">guides</span> <span class="p">(</span><span class="n">install</span><span class="sr">/release/</span><span class="n">debug</span><span class="p">)</span>

  <span class="mi">31</span><span class="n">_Labs</span><span class="o">/</span>                           <span class="o">-</span> <span class="kt">Scratch</span> <span class="nf">lab</span> <span class="p">(</span><span class="n">quick</span> <span class="n">experiments</span><span class="p">;</span> <span class="n">non</span><span class="o">-</span><span class="n">repro</span><span class="p">)</span>
    <span class="n">jupyter</span><span class="o">/</span>                         <span class="o">-</span> <span class="kt">Scratch</span> <span class="nf">notebooks</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span><span class="p">,</span> <span class="n">regex_scratch</span><span class="o">.</span><span class="n">ipynb</span><span class="p">)</span>

  <span class="mi">40</span><span class="n">_Resources</span><span class="o">/</span>                      <span class="o">-</span> <span class="kt">References</span> <span class="p">(</span><span class="n">education</span><span class="sr">/configs/</span><span class="n">manuals</span><span class="p">)</span>
    <span class="n">edu</span><span class="o">/</span>                             <span class="o">-</span> <span class="kt">Courses</span><span class="sr">/tutorials/</span><span class="n">papers</span>
      <span class="n">courses</span><span class="o">/</span>                       <span class="o">-</span> <span class="kt">Course</span> <span class="n">slides</span><span class="o">/</span><span class="n">notes</span>
      <span class="n">tutorials</span><span class="o">/</span>                     <span class="o">-</span> <span class="kt">Tutorial</span> <span class="n">links</span> <span class="o">&amp;</span> <span class="n">code</span>
      <span class="n">papers</span><span class="o">/</span>                        <span class="o">-</span> <span class="kt">Paper</span> <span class="nf">flow</span> <span class="p">(</span><span class="n">to_read</span> <span class="err">→</span> <span class="n">notes</span> <span class="err">→</span> <span class="n">summaries</span><span class="p">)</span>
        <span class="n">to_read</span><span class="o">/</span>                     <span class="o">-</span> <span class="kt">PDFs</span> <span class="n">queued</span> <span class="n">to</span> <span class="n">read</span>
        <span class="n">reading_notes</span><span class="o">/</span>               <span class="o">-</span> <span class="kt">Notes</span> <span class="p">(</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">MM</span><span class="o">-</span><span class="kt">DD_Title</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="kt">TEMPLATE</span><span class="o">.</span><span class="n">md</span><span class="p">)</span>
        <span class="n">summaries</span><span class="o">/</span>                   <span class="o">-</span> <span class="mi">1</span><span class="err">–</span><span class="mi">2</span> <span class="n">page</span> <span class="n">summaries</span>
    <span class="n">reference</span><span class="o">/</span>                       <span class="o">-</span> <span class="err">“</span><span class="kt">Golden</span><span class="err">”</span> <span class="n">shared</span> <span class="nf">configs</span> <span class="p">(</span><span class="n">documented</span><span class="p">,</span> <span class="n">reusable</span><span class="p">)</span>
      <span class="n">configs</span><span class="o">/</span>                       <span class="o">-</span> <span class="kt">Standard</span> <span class="n">configs</span> <span class="n">used</span> <span class="n">across</span> <span class="n">projects</span>
        <span class="n">vscode</span><span class="o">/</span> <span class="n">ruff</span><span class="o">/</span> <span class="n">pytest</span><span class="o">/</span> <span class="n">pyinstaller</span><span class="o">/</span> <span class="n">pyside6</span><span class="o">/</span> <span class="n">jupyter</span><span class="o">/</span>
    <span class="n">personal</span><span class="o">/</span>                        <span class="o">-</span> <span class="kt">Private</span><span class="o">/</span><span class="n">personal</span> <span class="nf">configs</span> <span class="p">(</span><span class="k">override</span> <span class="n">layer</span><span class="p">)</span>
      <span class="n">configs</span><span class="o">/</span>
        <span class="n">os</span><span class="sr">/{mac,win,linux}/</span>          <span class="o">-</span> <span class="kt">OS</span><span class="o">-</span><span class="n">level</span> <span class="n">settings</span>
        <span class="n">shell</span><span class="sr">/{bash,zsh,powershell}/</span> <span class="o">-</span> <span class="kt">Shell</span> <span class="n">profiles</span>
        <span class="n">editors</span><span class="sr">/vscode/</span>              <span class="o">-</span> <span class="n">settings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span><span class="p">,</span> <span class="n">keybindings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span>
        <span class="n">git</span><span class="o">/</span>                         <span class="o">-</span> <span class="o">.</span><span class="n">gitconfig</span><span class="o">.</span><span class="n">local</span><span class="p">,</span> <span class="n">etc</span><span class="o">.</span>
        <span class="n">python</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">pip</span><span class="o">.</span><span class="n">conf</span><span class="p">,</span> <span class="n">poetry</span><span class="o">.</span><span class="n">toml</span><span class="p">,</span> <span class="n">pypirc</span>
        <span class="n">tools</span><span class="o">/</span>                       <span class="o">-</span> <span class="kt">Personal</span> <span class="n">presets</span> <span class="n">per</span> <span class="n">tool</span>
        <span class="n">secrets</span><span class="o">/</span><span class="kt">README</span><span class="o">.</span><span class="n">md</span>            <span class="o">-</span> <span class="p">(</span><span class="kt">Pointers</span> <span class="n">only</span><span class="p">;</span> <span class="n">no</span> <span class="n">real</span> <span class="n">secrets</span><span class="p">)</span>
        <span class="o">.</span><span class="n">gitignore</span>                   <span class="o">-</span> <span class="kt">Broad</span> <span class="nf">ignore</span> <span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">g</span><span class="o">.</span><span class="p">,</span> <span class="o">*.</span><span class="n">local</span><span class="p">,</span> <span class="n">secrets</span><span class="cm">/*, *.pem)

    manuals/                         - Product manuals (PDF/HTML/MD)
      &lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/  - Vendor/product/version tree

  50_Snippets/                       - Reusable snippets
    sql/ text/ bash/

  60_Assets/                         - Logos/fonts/templates &amp; brand assets

  70_Exports/                        - Collected final deliverables (across jobs; optional)

  75_Releases/                       - Distribution hub for users (versioned)
    &lt;project_slug&gt;/
      vX.Y.Z/
        installers/                  - .exe/.msi/.pkg/.dmg
        wheels/                      - Python wheels
        portable/                    - Portable/zip packages
        docs/                        - README/install guide/FAQ
        licenses/                    - LICENSE/ThirdParty notices
        checksums/                   - *.sha256 (integrity)
        ReleaseNotes.md              - Changelog per release
      latest/                        - Pointer to current version
    catalog.json                     - (Optional) index of versions/files

  80_Tools/                          - Installers/portable/tools automation
    installers/                      - Offline installers + install_notes.md
    bin/                             - Portable binaries (optional PATH)
    scripts/                         - Bootstrap/utility scripts
    devcontainer/                    - Dev container tooling

  85_Environments/                   - Reproducible dev env samples
    conda/environment.yml
    venv/README.md
    docker/Dockerfile

  99_Archive/                        - Completed projects/jobs/resources (read-only)
</span></code></pre></div></div>

<hr />

<h1 id="2-10_today는-어떻게-쓰나-step-by-step-운용법">2) <code class="language-plaintext highlighter-rouge">10_Today</code>는 어떻게 쓰나? (step-by-step 운용법)</h1>

<h3 id="결론">결론</h3>

<ul>
  <li>
    <p><strong>정답은 “여기로 ‘이동(mv)’해서 작업하지 않는다.”</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">10_Today</code>는 <strong>대시보드/런치패드</strong> 야. <strong>원본은 항상 제자리</strong>(Projects/Jobs/Resources)에 두고, Today에는 <strong>링크/체크리스트/임시 메모</strong> 만 둬.</p>
  </li>
</ul>

<h3 id="추천-방식-3가지">추천 방식 3가지</h3>

<p><strong>A) 링크 모드(권장)</strong> — 원본은 제자리, Today엔 <strong>바로가기(심볼릭 링크/바로가기 파일)</strong></p>

<ul>
  <li>macOS/Linux:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Work/10_Today
<span class="nb">ln</span> <span class="nt">-s</span> ../20_Projects/PRJ-2025-001_sample_app/README.md README.today.md
<span class="nb">ln</span> <span class="nt">-s</span> ../25_Jobs/JOB-2025-010_report/04_Run/run.sh job_run.sh
</code></pre></div>    </div>
  </li>
  <li>Windows (PowerShell; 관리자/개발자 모드 권장):
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">Work\10_Today</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">README.today.md</span><span class="w"> </span><span class="o">..</span><span class="nx">\20_Projects\PRJ-2025-001_sample_app\README.md</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">job_run.ps1</span><span class="w"> </span><span class="o">..</span><span class="nx">\25_Jobs\JOB-2025-010_report\04_Run\run.ps1</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>장점: 경로 일관성, 중복/충돌 없음.</li>
</ul>

<p><strong>B) 인덱스 모드(가볍게)</strong> — Today에는 <code class="language-plaintext highlighter-rouge">today.md</code>만 두고 <strong>작업 링크</strong> 를 모음</p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># 2025-08-26</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Run job</span><span class="p">](</span><span class="sx">../25_Jobs/JOB-2025-010_report/04_Run/run.sh</span><span class="p">)</span>
<span class="p">-</span> <span class="p">[</span><span class="nv">Spec</span><span class="p">](</span><span class="sx">../20_Projects/PRJ-2025-001_sample_app/docs/spec.md</span><span class="p">)</span>
<span class="p">-</span> Notes: ...
</code></pre></div></div>

<p><strong>C) 스테이징 모드(예외적)</strong> — 아주 잠깐 필요한 <strong>임시 파일</strong> 만 복사해서 사용하고, <strong>EOD(End Of Day)</strong>에 원위치 이동/삭제</p>

<ul>
  <li>규칙: 코드 리포/입력 데이터의 <strong>정본은 절대 이동 금지</strong>. 혼선/충돌 위험 큼.</li>
</ul>

<h3 id="하루-루틴10_today-중심">하루 루틴(10_Today 중심)</h3>

<ol>
  <li>
    <p><strong>아침 5분</strong> : <code class="language-plaintext highlighter-rouge">10_Today/today.md</code> 업데이트(Top 3, 주요 링크, 간단 체크리스트).</p>
  </li>
  <li>
    <p><strong>작업 중</strong> : 링크/노트를 Today에 추가. 실제 파일 편집은 <strong>원래 폴더</strong> 에서.</p>
  </li>
  <li>
    <p><strong>업무 종료 전 5분</strong> :</p>

    <ul>
      <li>
        <p>PR/커밋/아카이브는 본 위치에서 마무리</p>
      </li>
      <li>
        <p>Today의 임시 파일 삭제, <code class="language-plaintext highlighter-rouge">today.md</code>에 결과 요약 3줄</p>
      </li>
      <li>
        <p>남길 내용은 <code class="language-plaintext highlighter-rouge">30_Areas/knowledge_base</code>나 해당 Project/Job의 README로 <strong>승격</strong>.</p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="do--dont">Do / Don’t</h3>

<ul>
  <li>
    <p><strong>Do</strong> : 링크/노트/짧은 To-Do, 오늘만 쓸 임시 스크립트</p>
  </li>
  <li>
    <p><strong>Don’t</strong> : 장기 보관, 깊은 하위 폴더, 정본 파일 이동</p>
  </li>
</ul>

<hr />

<p>필요하면 <code class="language-plaintext highlighter-rouge">10_Today/today.md</code> 템플릿이나 <strong>링크 생성/정리 자동화 스크립트</strong>(오늘 할 일 → 링크 묶음 생성)를 만들어줄게.</p>

<p class="chat--user">

그러면 PRJ 폴더 채로 링크하거나 하진 마?

</p>

<p>짧은 답: <strong>웬만하면 PRJ 폴더 “통째로” Today에 링크하지 않는 걸 추천</strong> 해.<br />
대신 “핵심 핸들(README, run 스크립트, 현재 작업 파일/노트, Export 폴더)”만 걸어두는 게 안전하고 깔끔해.</p>

<hr />

<h2 id="왜-통째-링크를-비추하나-step-by-step">왜 통째 링크를 비추하나 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>혼선 위험</strong> : Today에서 열어놓고 작업하다가 “여기가 진짜 루트”처럼 느껴져서 경로가 꼬이거나 불필요한 새 파일이 Today 쪽에 생길 수 있어.</p>
  </li>
  <li>
    <p><strong>도구/인덱싱 문제</strong> : IDE, 검색 인덱서, 백업 툴이 <strong>원본+링크를 중복 스캔</strong> 해서 속도 저하/중복 결과가 나올 수 있어.</p>
  </li>
  <li>
    <p><strong>대청소 사고 방지</strong> : Today는 매일/주기적으로 비우는 공간인데, 폴더 통째 링크는 <strong>삭제/이동 실수</strong> 의 표면적을 넓혀. (링크만 지워도 되지만 헷갈리기 쉬움)</p>
  </li>
  <li>
    <p><strong>불필요한 깊이</strong> : Today는 “대시보드”라서 <strong>얕고 가벼워야</strong> 해. 통째 링크는 Today를 다시 트리로 만들어 버림.</p>
  </li>
</ol>

<hr />

<h2 id="그러면-어떻게-권장-패턴">그러면 어떻게? (권장 패턴)</h2>

<h3 id="1-핵심-핸들-링크만-둔다">1) “핵심 핸들” 링크만 둔다</h3>

<ul>
  <li>
    <p>프로젝트당 3~5개 정도:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">README.md</code> (프로젝트 개요/체크리스트)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">scripts/run.sh</code> 또는 <code class="language-plaintext highlighter-rouge">04_Run/run.sh</code> (자주 돌리는 엔트리)</p>
      </li>
      <li>
        <p>오늘 편집할 문서 1개 (예: <code class="language-plaintext highlighter-rouge">docs/spec.md</code>)</p>
      </li>
      <li>
        <p>산출 확인용 <code class="language-plaintext highlighter-rouge">06_Export/</code> 폴더 (있으면)</p>
      </li>
    </ul>
  </li>
  <li>macOS/Linux
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>Work/10_Today
<span class="nb">ln</span> <span class="nt">-s</span> ../20_Projects/PRJ-2025-001_sample_app/README.md PRJ1_README.md
<span class="nb">ln</span> <span class="nt">-s</span> ../20_Projects/PRJ-2025-001_sample_app/scripts/run.sh PRJ1_run.sh
<span class="nb">ln</span> <span class="nt">-s</span> ../25_Jobs/JOB-2025-010_report/04_Run/run.sh JOB10_run.sh
<span class="nb">ln</span> <span class="nt">-s</span> ../25_Jobs/JOB-2025-010_report/06_Export JOB10_Export
</code></pre></div>    </div>
  </li>
  <li>Windows (PowerShell, 관리자 권장)
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">Work\10_Today</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">PRJ1_README.md</span><span class="w"> </span><span class="o">..</span><span class="nx">\20_Projects\PRJ-2025-001_sample_app\README.md</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">PRJ1_run.ps1</span><span class="w"> </span><span class="o">..</span><span class="nx">\20_Projects\PRJ-2025-001_sample_app\scripts\run.ps1</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="nx">JOB10_Export</span><span class="w"> </span><span class="o">..</span><span class="nx">\25_Jobs\JOB-2025-010_report\06_Export</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-인덱스-노트-1장만-두고-링크-모음">2) 인덱스 노트 1장만 두고 링크 모음</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">10_Today/today.md</code>에 그날 핸들 링크만 나열:
```md
    <h1 id="2025-08-26">2025-08-26</h1>
    <ul>
      <li><a href="../20_Projects/PRJ-2025-001_sample_app/README.md">PRJ1 README</a></li>
      <li><a href="../25_Jobs/JOB-2025-010_report/04_Run/run.sh">Run JOB10</a></li>
      <li>Notes: …
```</li>
    </ul>
  </li>
</ul>

<h3 id="3-예외적으로-폴더-링크가-꼭-필요하다면">3) 예외적으로 폴더 링크가 꼭 필요하다면</h3>

<ul>
  <li>
    <p><strong>일시적으로만</strong> 쓰고 EOD에 정리.</p>
  </li>
  <li>
    <p>OS별 권장:</p>

    <ul>
      <li>
        <p>macOS: Finder <strong>Alias</strong>(자동 추적에 강함) 또는 <code class="language-plaintext highlighter-rouge">ln -s</code>(CLI 친화)</p>
      </li>
      <li>
        <p>Windows: <code class="language-plaintext highlighter-rouge">mklink /D</code>(디렉터리 심볼릭 링크) 또는 <strong>.lnk 바로가기</strong>(GUI 용이)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>주의</strong> : VSCode 등 일부 도구는 <strong>심볼릭 루트로 연 프로젝트</strong> 에서 경로/디버깅이 살짝 헷갈릴 수 있으니, 가능하면 <strong>원본 경로를 워크스페이스 루트</strong> 로 여는 걸 추천.</p>
  </li>
</ul>

<hr />

<h2 id="today-운영-미니-규칙">Today 운영 미니 규칙</h2>

<ul>
  <li>
    <p><strong>5분/3핸들 룰</strong> : 아침에 3개 내외 핸들만 걸고, 퇴근 전 정리.</p>
  </li>
  <li>
    <p><strong>정본 불가침</strong> : 코드/데이터의 <strong>정본은 항상 원래 위치</strong>(Projects/Jobs/Resources). Today에는 링크·체크리스트·임시 메모만.</p>
  </li>
  <li>
    <p><strong>주 1회 리셋</strong> : 쓰지 않는 링크/임시 파일 제거.</p>
  </li>
</ul>

<hr />

<h2 id="요약">요약</h2>

<ul>
  <li>
    <p><strong>통째 링크?</strong> 기본은 <strong>No</strong>.</p>
  </li>
  <li>
    <p><strong>대안</strong> : “핵심 핸들”만 Today에 링크하거나, <code class="language-plaintext highlighter-rouge">today.md</code>로 링크 인덱스 관리.</p>
  </li>
  <li>
    <p><strong>예외</strong> : 정말 필요하면 일시적으로 폴더 링크를 쓰되, EOD에 반드시 정리하고 원본 루트로 작업 여는 습관 유지.</p>
  </li>
</ul>

<p class="chat--user">

근데 그럴거면 링크 만드는게 더 일일거 같은데. md에 저장해봐야 주로 console에서 작업을 하는데 별 편의적으로는 도움이 안될거 같고 그냥 메모용 정도로 쓰는건가

</p>

<p>맞아—링크 만들고 md 편집하는 게 오히려 일이면 안 쓰게 돼요. 그럴 땐 <strong>콘솔 중심</strong> 으로 <code class="language-plaintext highlighter-rouge">10_Today</code>를 “대시보드 명령팔레트”로 쓰면 딱 좋아요. 링크/MD 없이, <strong>단 하나의 스크립트 + 짧은 목록 파일</strong> 로 오늘 할 일을 실행하게요.</p>

<p>아래 중 하나(또는 둘 다)로 가자:</p>

<hr />

<h1 id="옵션-a-today-단일-스크립트--간단-목록-파일-가장-추천">옵션 A) <code class="language-plaintext highlighter-rouge">today</code> 단일 스크립트 + 간단 목록 파일 (가장 추천)</h1>

<h2 id="1-목록-파일편집만-하면-됨">1) 목록 파일(편집만 하면 됨)</h2>

<p><code class="language-plaintext highlighter-rouge">Work/10_Today/shortcuts.list</code> (형식: <code class="language-plaintext highlighter-rouge">라벨 | 경로(Work 기준) | 명령</code>)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 예시</span>
Run PRJ tests          | 20_Projects/PRJ-2025-001_sample_app        | ./scripts/test.sh
Build GUI              | 20_Projects/PRJ-2025-001_sample_app        | ./scripts/build_gui.sh
Re-run sample JOB      | 25_Jobs/JOB-2025-001_sample_output/04_Run  | ./run.sh
Open JOB <span class="nb">export</span>        | 25_Jobs/JOB-2025-001_sample_output/06_Export | <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div>

<h2 id="2-bashzsh용-today-의존성-없음-select-메뉴">2) Bash/Zsh용 <code class="language-plaintext highlighter-rouge">today</code> (의존성 없음: <code class="language-plaintext highlighter-rouge">select</code> 메뉴)</h2>

<p><code class="language-plaintext highlighter-rouge">Work/10_Today/today</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">LIST</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/10_Today/shortcuts.list"</span>
<span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"No shortcuts.list"</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>

<span class="nb">mapfile</span> <span class="nt">-t</span> ITEMS &lt; &lt;<span class="o">(</span><span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'^\s*#'</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s1">'/^\s*$/d'</span><span class="o">)</span>
<span class="nv">PS3</span><span class="o">=</span><span class="s2">"today&gt; "</span>
<span class="k">select </span>CH <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ITEMS</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"Edit shortcuts"</span><span class="p">;</span> <span class="k">do
  if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$REPLY</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="k">$((${#</span><span class="nv">ITEMS</span><span class="p">[@]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span><span class="p">;</span> <span class="k">continue</span><span class="p">;</span> <span class="k">fi
  </span><span class="nv">IFS</span><span class="o">=</span><span class="s1">'|'</span> <span class="nb">read</span> <span class="nt">-r</span> LABEL REL CMD <span class="o">&lt;&lt;&lt;</span><span class="s2">"</span><span class="nv">$CH</span><span class="s2">"</span>
  <span class="nv">DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$REL</span><span class="s2">"</span> | xargs<span class="si">)</span><span class="s2">"</span>
  <span class="o">(</span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$DIR</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="s2">"</span><span class="nv">$CMD</span><span class="s2">"</span><span class="o">)</span>
  <span class="nb">break
</span><span class="k">done</span>
</code></pre></div></div>

<p>실행권한: <code class="language-plaintext highlighter-rouge">chmod +x Work/10_Today/today</code><br />
사용: <code class="language-plaintext highlighter-rouge">~/Work/10_Today/today</code></p>

<h3 id="빠른-추가용-pin-함수콘솔에서-1줄-등록">빠른 추가용 <code class="language-plaintext highlighter-rouge">pin</code> 함수(콘솔에서 1줄 등록)</h3>

<p><code class="language-plaintext highlighter-rouge">~/.bashrc</code> 또는 <code class="language-plaintext highlighter-rouge">~/.zshrc</code>:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>
pin<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">label</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="p">;</span> <span class="nb">shift</span> <span class="o">||</span> <span class="nb">true
  local </span><span class="nv">cmd</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="p">*</span><span class="k">:-</span><span class="nv">$SHELL</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">local </span><span class="nv">rel</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">PWD</span><span class="p">#</span><span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/"</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$label</span><span class="s2"> | </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$cmd</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/10_Today/shortcuts.list"</span>
  <span class="nb">echo</span> <span class="s2">"Pinned: </span><span class="nv">$label</span><span class="s2"> -&gt; </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$cmd</span><span class="s2">"</span>
<span class="o">}</span>
</code></pre></div></div>

<p>예) 현재 디렉터리에서 자주 돌리는 명령을 고정:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pin <span class="s2">"This job run"</span> <span class="s2">"./run.sh"</span>
pin <span class="s2">"Open spec"</span> <span class="s2">"</span><span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span><span class="s2"> docs/spec.md"</span>
</code></pre></div></div>

<h2 id="3-powershell용-todayps1-윈도우">3) PowerShell용 <code class="language-plaintext highlighter-rouge">today.ps1</code> (윈도우)</h2>

<p><code class="language-plaintext highlighter-rouge">Work\10_Today\today.ps1</code>:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$L</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$L</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"No shortcuts.list"</span><span class="p">;</span><span class="w"> </span><span class="kr">exit</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="nv">$items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Content</span><span class="w"> </span><span class="nv">$L</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="o">-notmatch</span><span class="w"> </span><span class="s1">'^\s*$|^\s*#'</span><span class="p">}</span><span class="w">
</span><span class="kr">for</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="nv">$items</span><span class="o">.</span><span class="nf">Count</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"{0}. {1}"</span><span class="w"> </span><span class="nt">-f</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="nv">$items</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$choice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"today&gt;"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$choice</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'^\d+$'</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$items</span><span class="p">[</span><span class="nv">$choice</span><span class="nt">-1</span><span class="p">]</span><span class="w">
  </span><span class="nv">$parts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$line</span><span class="w"> </span><span class="o">-split</span><span class="w"> </span><span class="s1">'\s*\|\s*'</span><span class="w">
  </span><span class="n">Set-Location</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="w">
  </span><span class="n">Invoke-Expression</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>핀 기능</strong> :</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">pin</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="kr">param</span><span class="p">([</span><span class="n">string</span><span class="p">]</span><span class="nv">$Label</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$Cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="p">)</span><span class="w">
  </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="nv">$rel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Resolve-Path</span><span class="w"> </span><span class="o">.</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\"</span><span class="p">,</span><span class="s2">""</span><span class="p">)</span><span class="w">
  </span><span class="nx">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$Cmd</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$Cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$Host</span><span class="o">.</span><span class="nf">UI</span><span class="o">.</span><span class="nf">RawUI</span><span class="o">.</span><span class="nf">WindowTitle</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="s2">"</span><span class="nv">$Label</span><span class="s2"> | </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$Cmd</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>요약: 링크·md 없이 <strong>목록 파일에 라인만 추가</strong> → <code class="language-plaintext highlighter-rouge">today</code>로 선택 실행.</p>
</blockquote>

<hr />

<h1 id="옵션-b-아예-함수별칭만-쓰기-초간단">옵션 B) 아예 “함수/별칭”만 쓰기 (초간단)</h1>

<h2 id="bashzsh">Bash/Zsh</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>
p<span class="o">()</span> <span class="o">{</span> <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/20_Projects"</span> <span class="o">&amp;&amp;</span> <span class="k">select </span>d <span class="k">in </span>PRJ-<span class="k">*</span><span class="p">;</span> <span class="k">do </span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span><span class="p">;</span> <span class="nb">break</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span> <span class="o">}</span>     <span class="c"># 프로젝트 이동</span>
j<span class="o">()</span> <span class="o">{</span> <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs"</span> <span class="o">&amp;&amp;</span> <span class="k">select </span>d <span class="k">in</span> <span class="o">{</span>JOB,BUG,EX,SMOKE<span class="o">}</span>-<span class="k">*</span> 2&gt;/dev/null<span class="p">;</span> <span class="k">do </span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$d</span><span class="s2">"</span><span class="p">;</span> <span class="nb">break</span><span class="p">;</span> <span class="k">done</span><span class="p">;</span> <span class="o">}</span>  <span class="c"># 잡 이동</span>
prun<span class="o">()</span> <span class="o">{</span> <span class="o">(</span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs/</span><span class="nv">$1</span><span class="s2">/04_Run"</span> <span class="o">&amp;&amp;</span> ./run.sh<span class="o">)</span><span class="p">;</span> <span class="o">}</span>  <span class="c"># 사용: prun JOB-2025-001_x</span>
pexport<span class="o">()</span> <span class="o">{</span> <span class="nb">cd</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs/</span><span class="nv">$1</span><span class="s2">/06_Export"</span><span class="p">;</span> <span class="o">}</span>
</code></pre></div></div>

<h2 id="powershell">PowerShell</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="n">p</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Set-Location</span><span class="w"> </span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\20_Projects"</span><span class="p">;</span><span class="w"> </span><span class="nv">$d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nx">PRJ-</span><span class="o">*</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-GridView</span><span class="w"> </span><span class="nt">-PassThru</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$d</span><span class="p">){</span><span class="w"> </span><span class="n">Set-Location</span><span class="w"> </span><span class="nv">$d</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="n">j</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Set-Location</span><span class="w"> </span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\25_Jobs"</span><span class="p">;</span><span class="w"> </span><span class="nv">$d</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nt">-Directory</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'^(JOB|BUG|EX|SMOKE)-'</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-GridView</span><span class="w"> </span><span class="nt">-PassThru</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$d</span><span class="p">){</span><span class="w"> </span><span class="n">Set-Location</span><span class="w"> </span><span class="nv">$d</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">prun</span><span class="p">(</span><span class="nv">$job</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Push-Location</span><span class="w"> </span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\25_Jobs\</span><span class="nv">$job</span><span class="s2">\04_Run"</span><span class="p">;</span><span class="w"> </span><span class="o">.</span><span class="n">/run.ps1</span><span class="p">;</span><span class="w"> </span><span class="n">Pop-Location</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>완전 심플: <strong>링크도 md도 없음</strong>. 함수로 점프하고 스크립트만 실행.</p>
</blockquote>

<hr />

<h1 id="마무리-가이드-의사결정-규칙">마무리 가이드 (의사결정 규칙)</h1>

<ul>
  <li>
    <p><strong>링크/MD는 굳이 X.</strong> 콘솔 위주면 <code class="language-plaintext highlighter-rouge">today</code>(옵션 A)나 <strong>함수/별칭</strong>(옵션 B)이 가장 빠름.</p>
  </li>
  <li>
    <p><strong>등록은 1줄</strong> : <code class="language-plaintext highlighter-rouge">shortcuts.list</code>에 라인 추가(또는 <code class="language-plaintext highlighter-rouge">pin "라벨" "명령"</code>).</p>
  </li>
  <li>
    <p><strong>정본은 원래 위치</strong> : Today는 “출발점”일 뿐, 코드는 Projects/Jobs에서 실행.</p>
  </li>
  <li>
    <p><strong>주 1회 청소</strong> : 안 쓰는 단축 라인 삭제, 최신 작업만 남기기.</p>
  </li>
</ul>

<p>원하면 위 스크립트들을 네 스타터에 <strong>파일로 반영한 버전</strong> 을 바로 만들어 줄게. 어느 셸(Bash/Zsh/PowerShell) 주력인지만 알려줘!</p>

<p class="chat--user">

Work/10_Today/shortcuts.list 이걸 어떻게 쓰는거야?

</p>

<p>좋아 — <code class="language-plaintext highlighter-rouge">Work/10_Today/shortcuts.list</code>는 <strong>콘솔에서 자주 하는 작업들을 “메뉴처럼” 고르는 목록</strong> 이야.<br />
각 줄마다 <strong>라벨 | (Work 기준) 상대경로 | 실행 명령</strong> 3개를 <code class="language-plaintext highlighter-rouge">|</code> 로 구분해 적어두고, <code class="language-plaintext highlighter-rouge">today</code> 스크립트로 선택 실행해.</p>

<p>아래를 <strong>순서대로</strong> 하면 바로 써진다.</p>

<hr />

<h2 id="0-개념-한-줄">0) 개념 한 줄</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">shortcuts.list</code> = “오늘 쓸 단축키 목록”</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">today</code> = 이 목록을 읽어서 <strong>번호로 고르게 해주는 런처</strong></p>
  </li>
</ul>

<hr />

<h2 id="1-기본-설치-macoslinux">1) 기본 설치 (macOS/Linux)</h2>

<ol>
  <li><strong>환경 변수(Work 루트) 지정</strong></li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>   <span class="c"># Work 폴더가 다른 곳이면 그 경로로 바꿔줘</span>
</code></pre></div></div>

<ol>
  <li><strong>런처 스크립트 저장</strong><br />
<code class="language-plaintext highlighter-rouge">~/Work/10_Today/today</code> 파일을 만들고 아래 내용 붙여넣기:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">LIST</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/10_Today/shortcuts.list"</span>
<span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"No shortcuts.list"</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>

<span class="nb">mapfile</span> <span class="nt">-t</span> ITEMS &lt; &lt;<span class="o">(</span><span class="nb">grep</span> <span class="nt">-v</span> <span class="s1">'^\s*#'</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span> | <span class="nb">sed</span> <span class="s1">'/^\s*$/d'</span><span class="o">)</span>
<span class="nv">PS3</span><span class="o">=</span><span class="s2">"today&gt; "</span>
<span class="k">select </span>CH <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">ITEMS</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span> <span class="s2">"Edit shortcuts"</span><span class="p">;</span> <span class="k">do
  if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$REPLY</span><span class="s2">"</span> <span class="nt">-eq</span> <span class="k">$((${#</span><span class="nv">ITEMS</span><span class="p">[@]</span><span class="k">}</span><span class="o">+</span><span class="m">1</span><span class="k">))</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span> <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> <span class="s2">"</span><span class="nv">$LIST</span><span class="s2">"</span><span class="p">;</span> <span class="k">continue</span><span class="p">;</span> <span class="k">fi
  </span><span class="nv">IFS</span><span class="o">=</span><span class="s1">'|'</span> <span class="nb">read</span> <span class="nt">-r</span> LABEL REL CMD <span class="o">&lt;&lt;&lt;</span><span class="s2">"</span><span class="nv">$CH</span><span class="s2">"</span>
  <span class="nv">DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$REL</span><span class="s2">"</span> | xargs<span class="si">)</span><span class="s2">"</span>
  <span class="o">(</span><span class="nb">cd</span> <span class="s2">"</span><span class="nv">$DIR</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="nb">eval</span> <span class="s2">"</span><span class="nv">$CMD</span><span class="s2">"</span><span class="o">)</span>
  <span class="nb">break
</span><span class="k">done</span>
</code></pre></div></div>

<p>실행 권한:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/Work/10_Today/today
</code></pre></div></div>

<ol>
  <li><strong>목록 파일 만들기</strong><br />
<code class="language-plaintext highlighter-rouge">~/Work/10_Today/shortcuts.list</code>:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Label                | RelativePath(from Work)                       | Command</span>
Run tests              | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/test.sh
Build GUI              | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/build_gui.sh
Re-run sample job      | 25_Jobs/JOB-2025-001_sample_output/04_Run     | ./run.sh
Open job <span class="nb">export</span>        | 25_Jobs/JOB-2025-001_sample_output/06_Export  | <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div>

<ol>
  <li><strong>실행</strong></li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>~/Work/10_Today/today
<span class="c"># → 번호 메뉴가 뜨고, 고르면 해당 경로로 cd 후 명령을 실행</span>
</code></pre></div></div>

<blockquote>
  <p>(선택) 편하게 <code class="language-plaintext highlighter-rouge">t</code> 별칭 추가:<br />
 <code class="language-plaintext highlighter-rouge">echo "alias t='$HOME/Work/10_Today/today'" &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</code><br />
 이제 <code class="language-plaintext highlighter-rouge">t</code>만 쳐도 된다.</p>
</blockquote>

<hr />

<h2 id="2-기본-설치-windows--powershell">2) 기본 설치 (Windows / PowerShell)</h2>

<ol>
  <li><strong>환경 변수(Work 루트) 지정</strong></li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w">
</span></code></pre></div></div>

<ol>
  <li><strong>런처 스크립트 저장</strong><br />
<code class="language-plaintext highlighter-rouge">$HOME\Work\10_Today\today.ps1</code>:</li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$L</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$L</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Write-Error</span><span class="w"> </span><span class="s2">"No shortcuts.list"</span><span class="p">;</span><span class="w"> </span><span class="kr">exit</span><span class="w"> </span><span class="mi">1</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="nv">$items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Get-Content</span><span class="w"> </span><span class="nv">$L</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="bp">$_</span><span class="w"> </span><span class="o">-notmatch</span><span class="w"> </span><span class="s1">'^\s*$|^\s*#'</span><span class="p">}</span><span class="w">
</span><span class="kr">for</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="w"> </span><span class="o">-lt</span><span class="w"> </span><span class="nv">$items</span><span class="o">.</span><span class="nf">Count</span><span class="p">;</span><span class="w"> </span><span class="nv">$i</span><span class="o">++</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"{0}. {1}"</span><span class="w"> </span><span class="nt">-f</span><span class="w"> </span><span class="p">(</span><span class="nv">$i</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="w"> </span><span class="nv">$items</span><span class="p">[</span><span class="nv">$i</span><span class="p">]</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$choice</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Read-Host</span><span class="w"> </span><span class="s2">"today&gt;"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$choice</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'^\d+$'</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$line</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$items</span><span class="p">[</span><span class="nv">$choice</span><span class="nt">-1</span><span class="p">]</span><span class="w">
  </span><span class="nv">$parts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$line</span><span class="w"> </span><span class="o">-split</span><span class="w"> </span><span class="s1">'\s*\|\s*'</span><span class="w">
  </span><span class="n">Set-Location</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="w">
  </span><span class="n">Invoke-Expression</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>실행 정책 때문에 막히면(관리자 PowerShell에서):<br />
 <code class="language-plaintext highlighter-rouge">Set-ExecutionPolicy -Scope CurrentUser RemoteSigned</code></p>
</blockquote>

<ol>
  <li><strong>목록 파일 만들기</strong><br />
<code class="language-plaintext highlighter-rouge">$HOME\Work\10_Today\shortcuts.list</code> (형식 동일):</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Run tests              | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/test.ps1
Build GUI              | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/build_gui.ps1
Re-run sample job      | 25_Jobs/JOB-2025-001_sample_output/04_Run     | ./run.ps1
Open job <span class="nb">export</span>        | 25_Jobs/JOB-2025-001_sample_output/06_Export  | <span class="nb">dir</span>
</code></pre></div></div>

<ol>
  <li><strong>실행</strong></li>
</ol>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="bp">$HOME</span><span class="n">\Work\10_Today\today.ps1</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>(선택) <code class="language-plaintext highlighter-rouge">Set-Alias t "$HOME\Work\10_Today\today.ps1"</code> 추가 후 <code class="language-plaintext highlighter-rouge">t</code>로 실행.</p>
</blockquote>

<hr />

<h2 id="3-shortcutslist-작성-규칙-중요-포인트">3) <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 작성 규칙 (중요 포인트)</h2>

<ul>
  <li>
    <p><strong>포맷</strong> : <code class="language-plaintext highlighter-rouge">라벨 | (Work 기준) 상대경로 | 명령</code></p>

    <ul>
      <li>
        <p><strong>라벨</strong> : 메뉴에서 보이는 이름. 자유 텍스트.</p>
      </li>
      <li>
        <p><strong>상대경로</strong> : <code class="language-plaintext highlighter-rouge">Work/</code> 기준. 예: <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../scripts</code></p>
      </li>
      <li>
        <p><strong>명령</strong> : 해당 경로에서 실행할 콘솔 명령. 예: <code class="language-plaintext highlighter-rouge">./run.sh</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>주석/빈 줄</strong> : <code class="language-plaintext highlighter-rouge">#</code> 로 시작하면 무시, 빈 줄도 무시.</p>
  </li>
  <li>
    <p><strong>파이프 기호<code class="language-plaintext highlighter-rouge">|</code> 주의</strong>: 이 파일은 <code class="language-plaintext highlighter-rouge">|</code>로 구분하니, <strong>명령에 파이프가 필요하면</strong></p>

    <ul>
      <li>
        <p>작은 <strong>래퍼 스크립트</strong>(예: <code class="language-plaintext highlighter-rouge">scripts/mycmd.sh</code>)를 만들어 그걸 호출해.</p>
      </li>
      <li>
        <p>예) <code class="language-plaintext highlighter-rouge">scripts/mycmd.sh</code> 안에 <code class="language-plaintext highlighter-rouge">python x.py | grep foo</code> → 목록에는 <code class="language-plaintext highlighter-rouge">./scripts/mycmd.sh</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>상대경로는 Work 기준</strong> : <code class="language-plaintext highlighter-rouge">WORK_DIR</code>(기본 <code class="language-plaintext highlighter-rouge">~/Work</code>)를 바꾸면 자동으로 따라감.</p>
  </li>
  <li>
    <p><strong>환경변수/별칭</strong> : 명령 안에서 <code class="language-plaintext highlighter-rouge">${EDITOR}</code>(bash)나 <code class="language-plaintext highlighter-rouge">$env:EDITOR</code>(PowerShell) 사용 가능.</p>
  </li>
</ul>

<hr />

<h2 id="4-선택-콘솔에서-1줄로-빠르게-등록--pin-함수">4) (선택) 콘솔에서 1줄로 빠르게 등록 — <code class="language-plaintext highlighter-rouge">pin</code> 함수</h2>

<h3 id="bashzsh-1">Bash/Zsh</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>
pin<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">label</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span><span class="p">;</span> <span class="nb">shift</span> <span class="o">||</span> <span class="nb">true
  local </span><span class="nv">cmd</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="p">*</span><span class="k">:-</span><span class="nv">$SHELL</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">local </span><span class="nv">rel</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">PWD</span><span class="p">#</span><span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/"</span><span class="k">}</span><span class="s2">"</span>
  <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$label</span><span class="s2"> | </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$cmd</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/10_Today/shortcuts.list"</span>
  <span class="nb">echo</span> <span class="s2">"Pinned: </span><span class="nv">$label</span><span class="s2"> -&gt; </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$cmd</span><span class="s2">"</span>
<span class="o">}</span>
<span class="c"># 사용 예시</span>
pin <span class="s2">"Run current job"</span> <span class="s2">"./run.sh"</span>
pin <span class="s2">"Edit spec"</span>      <span class="s1">'${EDITOR:-vi} docs/spec.md'</span>
</code></pre></div></div>

<h3 id="powershell-1">PowerShell</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">pin</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="kr">param</span><span class="p">([</span><span class="n">string</span><span class="p">]</span><span class="nv">$Label</span><span class="p">,</span><span class="w"> </span><span class="p">[</span><span class="n">string</span><span class="p">]</span><span class="nv">$Cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$null</span><span class="p">)</span><span class="w">
  </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="nv">$rel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Resolve-Path</span><span class="w"> </span><span class="o">.</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\"</span><span class="p">,</span><span class="s2">""</span><span class="p">)</span><span class="w">
  </span><span class="nx">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$Cmd</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$Cmd</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"powershell"</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="s2">"</span><span class="nv">$Label</span><span class="s2"> | </span><span class="nv">$rel</span><span class="s2"> | </span><span class="nv">$Cmd</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"10_Today\shortcuts.list"</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="c"># 예시</span><span class="w">
</span><span class="n">pin</span><span class="w"> </span><span class="s2">"Run current job"</span><span class="w"> </span><span class="s2">"./run.ps1"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="5-자주-쓰는-실전-예시-복붙">5) 자주 쓰는 실전 예시 (복붙)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Open project README    | 20_Projects/PRJ-2025-001_sample_app           | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> README.md
Run CLI                | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/run_cli.sh
Build <span class="o">(</span>CLI onefile<span class="o">)</span>    | 20_Projects/PRJ-2025-001_sample_app           | ./scripts/build_cli.sh
Run SMOKE              | 25_Jobs/SMOKE-2025-001_new_tool/04_Run        | ./smoke.sh
Re-run BUG repro       | 25_Jobs/BUG-2025-001_sample_bug/04_Run        | ./repro.sh
Check JOB exports      | 25_Jobs/JOB-2025-001_sample_output/06_Export  | <span class="nb">ls</span> <span class="nt">-al</span>
Release notes <span class="o">(</span>edit<span class="o">)</span>   | 75_Releases/sample-app/v0.1.0                 | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> ReleaseNotes.md
</code></pre></div></div>

<hr />

<h2 id="6-문제-해결">6) 문제 해결</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">No shortcuts.list</code> → 경로 확인: <code class="language-plaintext highlighter-rouge">~/Work/10_Today/shortcuts.list</code></p>
  </li>
  <li>
    <p>Permission denied → <code class="language-plaintext highlighter-rouge">chmod +x ~/Work/10_Today/today</code> (bash) / 실행정책 설정(PS)</p>
  </li>
  <li>
    <p>명령에서 파이프가 필요 → <strong>래퍼 스크립트</strong> 로 감싸서 실행</p>
  </li>
  <li>
    <p>다른 곳에 Work가 있을 때 → <code class="language-plaintext highlighter-rouge">export WORK_DIR="/path/to/Work"</code>(bash) / <code class="language-plaintext highlighter-rouge">$env:WORK_DIR="D:\Work"</code>(PS)</p>
  </li>
</ul>

<hr />

<p>요약: <strong><code class="language-plaintext highlighter-rouge">shortcuts.list</code>만 편집</strong>하고 <code class="language-plaintext highlighter-rouge">today</code>를 실행하면, 원하는 작업을 <strong>번호 선택</strong> 으로 바로 돌릴 수 있어. 링크/MD 필요 없다—완전 콘솔 친화 모드!</p>

<p class="chat--user">

tcsh용으로도 하나 만들어줘

</p>

<p>좋지! <strong>tcsh</strong> 에서도 똑같이 “번호 선택 메뉴”로 돌릴 수 있게 런처/핀 스크립트를 만들어 보자. 콘솔만으로 씁니다—링크/MD 불필요.</p>

<hr />

<h1 id="1-tcsh-런처-todaycsh">1) tcsh 런처: <code class="language-plaintext highlighter-rouge">today.csh</code></h1>

<h2 id="설치-macoslinux-tcsh">설치 (macOS/Linux, tcsh)</h2>

<ol>
  <li>Work 루트 환경변수(로그인 시 자동)</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# ~/.cshrc
setenv WORK_DIR "$HOME/Work"
</code></pre></div></div>

<ol>
  <li>런처 스크립트 저장<br />
<code class="language-plaintext highlighter-rouge">$HOME/Work/10_Today/today.csh</code>:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# tcsh launcher for Work/10_Today/shortcuts.list
# Format per line: Label | RelativePath(from Work) | Command

# Resolve Work root
set W = "$HOME/Work"
if ( $?WORK_DIR ) set W = "$WORK_DIR"

set LIST = "$W/10_Today/shortcuts.list"
if ( ! -f "$LIST" ) then
  echo "No shortcuts.list at: $LIST"
  exit 1
endif

# Filter comments/blank lines into a temp file
set TMP = "$W/10_Today/.shortcuts.filtered.$$"
grep -v '^[[:space:]]*#' "$LIST" | sed '/^[[:space:]]*$/d' &gt; "$TMP"
set count = `wc -l &lt; "$TMP"`
if ( "$count" == 0 ) then
  echo "No items in shortcuts.list"
  /bin/rm -f "$TMP"
  exit 0
endif

# Show numbered menu
set i = 1
while ( $i &lt;= $count )
  set line = `sed -n "${i}p" "$TMP"`
  echo "$i. $line"
  @ i++
end
@ edit_idx = $count + 1
echo "$edit_idx. Edit shortcuts"
echo -n "today&gt; "
set choice = $&lt;

if ( "$choice" == "$edit_idx" ) then
  if ( $?EDITOR ) then
    eval "$EDITOR $LIST"
  else
    vi "$LIST"
  endif
  /bin/rm -f "$TMP"
  exit 0
endif

# Validate numeric choice
if ( "$choice" !~ [0-9]* ) then
  echo "Invalid choice"
  /bin/rm -f "$TMP"
  exit 1
endif

# Pick the selected line
set sel = `sed -n "${choice}p" "$TMP"`

# Extract Label | Relative | Command
set label = `echo "$sel" | awk -F '|' '{gsub(/^[ \t]+|[ \t]+$/, "", $1); print $1}'`
set rel   = `echo "$sel" | awk -F '|' '{gsub(/^[ \t]+|[ \t]+$/, "", $2); print $2}'`
set cmd   = `echo "$sel" | awk -F '|' '{sub(/^[ \t]+/, "", $3); print $3}'`

set dir = "$W/$rel"
if ( ! -d "$dir" ) then
  echo "Directory not found: $dir"
  /bin/rm -f "$TMP"
  exit 1
endif

cd "$dir"
# Run command in that dir
eval "$cmd"

# Cleanup
/bin/rm -f "$TMP"
</code></pre></div></div>

<p>실행 권한:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/10_Today/today.csh"</span>
</code></pre></div></div>

<p>(선택) 단축 별칭:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# ~/.cshrc
alias t '$HOME/Work/10_Today/today.csh'
source ~/.cshrc
</code></pre></div></div>

<ol>
  <li><strong>목록 파일</strong> 만들기<br />
<code class="language-plaintext highlighter-rouge">$HOME/Work/10_Today/shortcuts.list</code>:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Label                 | RelativePath(from Work)                      | Command</span>
Run tests               | 20_Projects/PRJ-2025-001_sample_app          | ./scripts/test.sh
Build GUI               | 20_Projects/PRJ-2025-001_sample_app          | ./scripts/build_gui.sh
Re-run sample job       | 25_Jobs/JOB-2025-001_sample_output/04_Run    | ./run.sh
Open job <span class="nb">export</span>         | 25_Jobs/JOB-2025-001_sample_output/06_Export | <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div>

<p>사용:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

$ ~/Work/10_Today/today.csh
# → 번호 선택 후, 해당 경로로 cd 하고 Command 실행
</code></pre></div></div>

<blockquote>
  <p><strong>파이프(|) 주의</strong> : 이 파일은 <code class="language-plaintext highlighter-rouge">|</code> 구분자를 쓰므로, 명령에 파이프가 필요하면<br />
 작은 래퍼 스크립트(예: <code class="language-plaintext highlighter-rouge">scripts/mycmd.sh</code>)를 만들어 그걸 호출해 주세요.</p>
</blockquote>

<hr />

<h1 id="2-tcsh-핀-유틸-한-줄로-목록에-추가하기">2) tcsh “핀” 유틸: 한 줄로 목록에 추가하기</h1>

<p><code class="language-plaintext highlighter-rouge">$HOME/Work/10_Today/pin.csh</code>:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
# Usage: pin.csh "Label" [command]
set W = "$HOME/Work"
if ( $?WORK_DIR ) set W = "$WORK_DIR"
set L = "$W/10_Today/shortcuts.list"

if ( "$#argv" == 0 ) then
  echo 'Usage: pin.csh "Label" [command]'
  exit 1
endif

set label = "$1"
shift
if ( "$#argv" &gt; 0 ) then
  set cmd = "$*"
else
  set cmd = "$SHELL"
endif

# Current dir relative to Work
set rel = `echo "$cwd" | sed "s#^$W/##"`
echo "$label | $rel | $cmd" &gt;&gt; "$L"
echo "Pinned: $label -&gt; $rel | $cmd"
</code></pre></div></div>

<p>권한:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/10_Today/pin.csh"</span>
</code></pre></div></div>

<p>사용 예시:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# 지금 폴더의 run.sh를 핀으로 등록
~/Work/10_Today/pin.csh "Run current job" "./run.sh"

# 스펙 문서 편집을 핀으로 등록(EDITOR가 설정되어 있다면 그걸 사용)
~/Work/10_Today/pin.csh "Edit spec" '${EDITOR} docs/spec.md'
</code></pre></div></div>

<hr />

<h2 id="자주-묻는-요점-정리">자주 묻는 요점 정리</h2>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td><code class="language-plaintext highlighter-rouge">shortcuts.list</code> 포맷: **Label</td>
          <td>RelativePath</td>
          <td>Command** (Work 기준 상대경로)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p><strong>편집 키</strong> : 메뉴의 마지막 항목 <strong>“Edit shortcuts”</strong> 선택하면 <code class="language-plaintext highlighter-rouge">$EDITOR</code>(없으면 <code class="language-plaintext highlighter-rouge">vi</code>)로 바로 열림</p>
  </li>
  <li>
    <p><strong>WORK_DIR</strong> 를 옮겼다면: <code class="language-plaintext highlighter-rouge">setenv WORK_DIR "/새/경로/Work"</code> 만 바꾸면 자동으로 따라감</p>
  </li>
  <li>
    <p><strong>문제</strong> : “No shortcuts.list” → 경로 확인, 빈 파일이면 항목 추가</p>
  </li>
  <li><strong>권장</strong> : Today는 “실행 출발점”일 뿐, 정본 코드는 <code class="language-plaintext highlighter-rouge">20_Projects/</code>와 <code class="language-plaintext highlighter-rouge">25_Jobs/</code>에 둡니다</li>
</ul>

<p>필요하면 <code class="language-plaintext highlighter-rouge">today.csh</code>에 <strong>즐겨찾기 고정/검색/필터</strong> 같은 옵션(menu 검색, 번호 다중 실행 등)도 추가해 줄게.</p>

<p class="chat--user">

간단한 스크립트는 어디 모아야할까

</p>

<p>좋은 질문! “간단한 스크립트”는 <strong>쓰임새(범위·수명)</strong>로 나눠서 보관하면 헷갈림이 사라져요. 아래 <strong>결정표</strong> 대로 두면 됩니다. 필요에 따라 폴더 하나(▶ 추가 표시)도 제안했어요.</p>

<hr />

<h2 id="어디에-둘까-결정표">어디에 둘까? (결정표)</h2>

<table>
  <thead>
    <tr>
      <th>상황/목적</th>
      <th>보관 위치</th>
      <th>이유/메모</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>프로젝트 전용 작업</strong> (빌드/테스트/런)</td>
      <td><code class="language-plaintext highlighter-rouge">20_Projects/PRJ-…/scripts/</code></td>
      <td>프로젝트 루트 기준 경로가 고정. 팀/CI도 그대로 사용 가능.</td>
    </tr>
    <tr>
      <td><strong>Job 실행 파이프라인</strong> (입력→설정→실행→산출)</td>
      <td><code class="language-plaintext highlighter-rouge">25_Jobs/&lt;JOB&gt;/04_Run/</code></td>
      <td>재현·증빙 목적. 로그/매니페스트와 같은 맥락에 둠.</td>
    </tr>
    <tr>
      <td><strong>여러 프로젝트에서 재사용하는 범용 스크립트</strong></td>
      <td><code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code></td>
      <td>공용(골든) 도구. <strong>PATH</strong> 에 추가해서 어디서든 호출.</td>
    </tr>
    <tr>
      <td><strong>오늘만 쓰는 임시 래퍼/런처</strong> (콘솔 중심)</td>
      <td>▶ <code class="language-plaintext highlighter-rouge">10_Today/wrappers/</code></td>
      <td><code class="language-plaintext highlighter-rouge">shortcuts.list</code>에서 부르는 작은 래퍼를 모아두는 임시 구역. EOD/주 1회 정리.</td>
    </tr>
    <tr>
      <td><strong>짧은 1~3줄 트릭/반복 명령(코드 조각)</strong></td>
      <td><code class="language-plaintext highlighter-rouge">50_Snippets/bash/</code></td>
      <td>‘실행파일’이 아니라 <strong>참고용 조각</strong>. 나중에 성숙하면 스크립트로 승격.</td>
    </tr>
    <tr>
      <td><strong>실험·프로토타입</strong> (버려도 되는 테스트)</td>
      <td><code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code> 또는 해당 실험 폴더</td>
      <td>아이디어 검증 단계. 유효해지면 상위 위치로 승격.</td>
    </tr>
    <tr>
      <td><strong>개인 셸 함수/별칭</strong> (환경 설정)</td>
      <td><code class="language-plaintext highlighter-rouge">40_Resources/personal/configs/shell/{bash,zsh,tcsh,powershell}/</code></td>
      <td>로그인 시 자동 로딩. 비공유/취향/OS별로 분리.</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>▶ <strong>신규 폴더 제안</strong> : <code class="language-plaintext highlighter-rouge">10_Today/wrappers/</code></p>

  <ul>
    <li>
      <p>예: <code class="language-plaintext highlighter-rouge">today</code>에서 파이프(<code class="language-plaintext highlighter-rouge">|</code>), 복잡한 인자 등이 필요할 때 짧은 래퍼(<code class="language-plaintext highlighter-rouge">*.sh</code>, <code class="language-plaintext highlighter-rouge">*.ps1</code>, <code class="language-plaintext highlighter-rouge">*.csh</code>)를 여기에 두고 <code class="language-plaintext highlighter-rouge">shortcuts.list</code>에서는 그 래퍼만 호출.</p>
    </li>
    <li>
      <p>정리 주기: <strong>하루~일주일</strong>. 재사용 가치가 생기면 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>나 <code class="language-plaintext highlighter-rouge">PRJ-…/scripts/</code>로 <strong>승격</strong>.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h2 id="운용-규칙-간단실전형">운용 규칙 (간단·실전형)</h2>

<ol>
  <li><strong>PATH 설정</strong>(단 한 번)</li>
</ol>

<ul>
  <li>Bash/Zsh/tcsh:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Tools/scripts:</span><span class="nv">$PATH</span><span class="s2">"</span>
</code></pre></div>    </div>
  </li>
  <li>PowerShell:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\80_Tools\scripts;"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">Path</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>이렇게 하면 어디서든 <code class="language-plaintext highlighter-rouge">my-tool.sh</code> 같은 공용 스크립트를 바로 실행.</p>
</blockquote>

<ol>
  <li><strong>승격 루트</strong></li>
</ol>

<ul>
  <li><code class="language-plaintext highlighter-rouge">50_Snippets/bash/one-liner.txt</code> → 좋아서 자주 쓰게 됨 →<br />
<code class="language-plaintext highlighter-rouge">10_Today/wrappers/say_hello.sh</code>로 임시 사용 → 여전히 유용 →<br />
<code class="language-plaintext highlighter-rouge">80_Tools/scripts/say_hello.sh</code>로 <strong>승격</strong> + <code class="language-plaintext highlighter-rouge">--help</code>/설명 추가.</li>
</ul>

<ol>
  <li><strong>이름 규칙</strong></li>
</ol>

<ul>
  <li>
    <p><strong>동사-목적</strong> : <code class="language-plaintext highlighter-rouge">build_cli.sh</code>, <code class="language-plaintext highlighter-rouge">release_copy.ps1</code>, <code class="language-plaintext highlighter-rouge">repro_bug.csh</code></p>
  </li>
  <li>
    <p><strong>OS/셸 태그</strong>(필요 시): <code class="language-plaintext highlighter-rouge">*_mac.sh</code>, <code class="language-plaintext highlighter-rouge">*_win.ps1</code>, <code class="language-plaintext highlighter-rouge">*_nix.sh</code>, <code class="language-plaintext highlighter-rouge">*_tcsh.csh</code></p>
  </li>
  <li>
    <p><strong>프로젝트 한정</strong> 이면 파일명에 <strong>프로젝트 약어</strong> 붙이기: <code class="language-plaintext highlighter-rouge">build_cli_app1.sh</code></p>
  </li>
</ul>

<ol>
  <li><strong>헤더/안전 옵션(필수)</strong></li>
</ol>

<ul>
  <li>Bash/Zsh:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
</code></pre></div>    </div>
  </li>
  <li>PowerShell:
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="bp">$Error</span><span class="n">ActionPreference</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Stop"</span><span class="w">
</span><span class="n">Set-StrictMode</span><span class="w"> </span><span class="nt">-Version</span><span class="w"> </span><span class="nx">Latest</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>tcsh:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh
    
#!/bin/tcsh -f
</code></pre></div>    </div>
  </li>
  <li>최상단 주석 3줄(설명/의존성/예시):
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># build_cli.sh - Build CLI as onefile with PyInstaller</span>
<span class="c"># deps: pyinstaller&gt;=6, Python 3.11 venv activated</span>
<span class="c"># usage: ./build_cli.sh</span>
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li><strong>문서화 위치</strong></li>
</ol>

<ul>
  <li>
    <p>공용 스크립트 목록은 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/INDEX.md</code> 한 장으로 관리<br />
(이름, 한줄 설명, 사용 예시).</p>
  </li>
  <li>
    <p>프로젝트 전용은 <code class="language-plaintext highlighter-rouge">PRJ-…/README.md</code>의 “Scripts” 섹션에 표로 정리.</p>
  </li>
</ul>

<hr />

<h2 id="예시-배치-샘플">예시 배치 (샘플)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
  10_Today/
    wrappers/
      hotfix_export.sh         <span class="c"># 오늘만 쓸 임시 래퍼 (EOD 삭제/승격)</span>
  20_Projects/PRJ-2025-001_sample_app/
    scripts/
      install.sh | .ps1
      run_cli.sh | .ps1
      build_cli.sh | .ps1
  25_Jobs/JOB-2025-010_report/04_Run/
    run.sh | run.ps1            <span class="c"># Job 실행 진입점</span>
  50_Snippets/bash/
    tmux_one_liners.md
    git_tricks.md
  80_Tools/scripts/
    release_copy.sh             <span class="c"># 공용: dist → 75_Releases 로 전개</span>
    checksum_all.sh             <span class="c"># 공용: SHA256 생성</span>
    today                       <span class="c"># 콘솔 런처(선택)</span>
    today.csh                   <span class="c"># tcsh 런처(선택)</span>
    today.ps1                   <span class="c"># PS 런처(선택)</span>
  40_Resources/personal/configs/shell/
    .zshrc, .tcshrc, Microsoft.PowerShell_profile.ps1
</code></pre></div></div>

<hr />

<h2 id="shortcutslist와-궁합-좋게-쓰는-팁"><code class="language-plaintext highlighter-rouge">shortcuts.list</code>와 궁합 좋게 쓰는 팁</h2>

<ul>
  <li>
    <p>파이프/복잡 명령이 필요하면 <code class="language-plaintext highlighter-rouge">10_Today/wrappers/*.sh</code>에 래퍼로 만들고,<br />
<code class="language-plaintext highlighter-rouge">shortcuts.list</code>에서는 <code class="language-plaintext highlighter-rouge">./wrappers/that_task.sh</code>만 호출 → 깔끔.</p>
  </li>
  <li>
    <p>래퍼가 일주일 내내 유용하면 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>로 <strong>승격</strong> + PATH에서 직접 호출.</p>
  </li>
</ul>

<hr />

<p>원하면 지금 스타터에 <code class="language-plaintext highlighter-rouge">10_Today/wrappers/</code>와 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/INDEX.md</code> 틀, 그리고 <code class="language-plaintext highlighter-rouge">checksum_all.sh</code>/<code class="language-plaintext highlighter-rouge">release_copy.sh</code> 같은 <strong>실사용 공용 스크립트</strong> 샘플까지 바로 만들어서 붙여줄게. 어느 셸(Bash/Zsh/tcsh/PowerShell)을 주력으로 쓰는지도 알려줘!</p>

<p class="chat--user">

근데 config를 교육자료랑 같은 폴더에 두는게 난 좀 이상해

</p>

<p>완전 공감해요. <strong>교육자료(edu)</strong>와 <strong>설정(config)</strong>은 성격이 달라서 분리하는 게 깔끔합니다.<br />
아래처럼 <strong>전용 루트 <code class="language-plaintext highlighter-rouge">32_Configs/</code></strong>를 새로 두고, 기존 구조를 살짝 조정해요.</p>

<hr />

<h1 id="왜-분리">왜 분리?</h1>

<ul>
  <li>
    <p><strong>의도 분리</strong> : 문서/학습(읽기) vs 설정/프리셋(실행·적용)</p>
  </li>
  <li>
    <p><strong>권한/백업</strong> : 개인설정은 민감·빈도 높음 → 별도 관리가 안전</p>
  </li>
  <li>
    <p><strong>레이어링 명확</strong> : <code class="language-plaintext highlighter-rouge">shared(골든)</code> ↔ <code class="language-plaintext highlighter-rouge">personal(오버라이드)</code> 우선순위가 뚜렷</p>
  </li>
</ul>

<hr />

<h1 id="수정된-최종-트리설정만-이동-나머지-동일">수정된 최종 트리(설정만 이동, 나머지 동일)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pgsql

Work/
  00_Inbox/
  10_Today/
  20_Projects/
  25_Jobs/
  30_Areas/
    worklog/
    environments/
    knowledge_base/
      tips/ cheatsheets/ howtos/
  31_Labs/
  32_Configs/                         - ★ 설정 전용 루트
    shared/                           - 조직/프로젝트에 공유 가능한 '골든'
      global/                         - 도구별 표준 설정(전역)
        vscode/ ruff/ pytest/ pyinstaller/ pyside6/ jupyter/
      projects/                       - 특정 프로젝트 전용 기본설정
        sample-app/                   - 예: 프로젝트별 pytest.ini, ruff.toml 등
      README.md                       - 적용 원칙/우선순위
    personal/                         - 나만의 오버라이드(비공개)
      os/{mac,win,linux}/             - OS별 세팅(키보드/입력기 등)
      shell/{bash,zsh,tcsh,powershell}/ - 프로필·별칭
      editors/vscode/                 - settings.user.json, keybindings.user.json
      git/                            - .gitconfig.local 등
      python/                         - pip.conf, poetry.toml, pypirc
      tools/                          - 각 툴 개인 프리셋
      secrets/README.md               - (실제 비밀은 두지 말 것)
      .gitignore                      - *.local, secrets/*, *.pem 등 폭넓게 제외
  40_Resources/                       - 레퍼런스/교육/매뉴얼(설정 X)
    edu/ (courses, tutorials, papers/…)
    manuals/ (&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/)
    reference/                        - (선택) 스펙/표준 문서 등 '읽을거리'만
  50_Snippets/
  60_Assets/
  70_Exports/
  75_Releases/
  80_Tools/
    installers/ bin/ scripts/ devcontainer/
  85_Environments/ (conda/ venv/ docker/)
  99_Archive/
</code></pre></div></div>

<blockquote>
  <p>포인트: <strong>설정은 전부<code class="language-plaintext highlighter-rouge">32_Configs/</code>로 이동</strong>. 40_Resources엔 더 이상 설정이 없고, 순수 레퍼런스/학습 자료만 남깁니다.</p>
</blockquote>

<hr />

<h1 id="레이어링우선순위-규칙">레이어링(우선순위) 규칙</h1>

<ol>
  <li>
    <p><strong>Project 로컬</strong>(리포 내부 설정)</p>
  </li>
  <li>
    <p><strong>32_Configs/personal/</strong> (내 오버라이드)</p>
  </li>
  <li>
    <p>**32_Configs/shared/projects/ <proj>/** (프로젝트용 골든)</proj></p>
  </li>
  <li>
    <p><strong>32_Configs/shared/global/</strong> (전역 골든)</p>
  </li>
</ol>

<p>예: pytest는 순서대로 <code class="language-plaintext highlighter-rouge">pytest.ini</code>를 찾고, 없으면 상위로 올라가며 대체.</p>

<hr />

<h1 id="마이그레이션3분-컷">마이그레이션(3분 컷)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) 디렉터리 생성</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/Work/32_Configs/shared/<span class="o">{</span>global,projects<span class="o">}</span> ~/Work/32_Configs/personal

<span class="c"># 2) 기존 설정 이동</span>
<span class="c">#   (전역 골든)</span>
<span class="nb">mv</span> ~/Work/40_Resources/reference/configs/<span class="k">*</span> ~/Work/32_Configs/shared/global/ 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
<span class="c">#   (개인)</span>
<span class="nb">mv</span> ~/Work/40_Resources/personal/configs/<span class="k">*</span>  ~/Work/32_Configs/personal/     2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># 3) 흔적 정리(선택)</span>
<span class="nb">rmdir</span> ~/Work/40_Resources/reference/configs ~/Work/40_Resources/personal/configs 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<p>PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\shared\global"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\shared\projects"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\personal"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="nx">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\40_Resources\reference\configs\*"</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\shared\global"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\40_Resources\personal\configs\*"</span><span class="w">  </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\personal"</span><span class="w">     </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="부트스트랩홈-설정-연결-예시">부트스트랩(홈 설정 연결 예시)</h1>

<p>Bash/Zsh:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WORK_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work"</span>
<span class="nb">export </span><span class="nv">WORK_CONFIGS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$WORK_DIR</span><span class="s2">/32_Configs"</span>
<span class="c"># 예: zsh 개인설정 연결</span>
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$WORK_CONFIGS</span><span class="s2">/personal/shell/zsh/.zshrc"</span> ~/.zshrc
<span class="c"># VSCode 사용자 설정</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/Library/Application<span class="se">\ </span>Support/Code/User
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$WORK_CONFIGS</span><span class="s2">/personal/editors/vscode/settings.user.json"</span> <span class="se">\</span>
        ~/Library/Application<span class="se">\ </span>Support/Code/User/settings.json
</code></pre></div></div>

<p>PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="o">=</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs\personal"</span><span class="w">
</span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-Type</span><span class="w"> </span><span class="nx">SymbolicLink</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Documents\PowerShell\Microsoft.PowerShell_profile.ps1"</span><span class="w"> </span><span class="nt">-Target</span><span class="w"> </span><span class="s2">"</span><span class="nv">$W</span><span class="s2">\shell\powershell\profile.ps1"</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
</span></code></pre></div></div>

<p>tcsh:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

setenv WORK_CONFIGS "$HOME/Work/32_Configs"
ln -snf "$WORK_CONFIGS/personal/shell/tcsh/.tcshrc" ~/.tcshrc
</code></pre></div></div>

<hr />

<h1 id="프로젝트에서-설정-불러오기권장-패턴">프로젝트에서 설정 불러오기(권장 패턴)</h1>

<h3 id="패턴-a-base--local">패턴 A) <code class="language-plaintext highlighter-rouge">*.base.*</code> + <code class="language-plaintext highlighter-rouge">*.local.*</code></h3>

<ul>
  <li>
    <p>리포 내 <code class="language-plaintext highlighter-rouge">pyproject.toml</code>/<code class="language-plaintext highlighter-rouge">ruff.toml</code>/<code class="language-plaintext highlighter-rouge">pytest.ini</code>는 <strong>기본</strong></p>
  </li>
  <li>
    <p>내 개인 오버라이드는 같은 디렉터리의 <code class="language-plaintext highlighter-rouge">*.local.*</code></p>
  </li>
  <li>
    <p>스크립트에서 발견 시 병합:</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">test</span> <span class="nt">-f</span> ruff.local.toml <span class="o">&amp;&amp;</span> <span class="nb">export </span><span class="nv">RUFF_ARGS</span><span class="o">=</span><span class="s2">"--config ruff.local.toml"</span>
</code></pre></div></div>

<h3 id="패턴-b-configd-디렉터리-병합">패턴 B) <code class="language-plaintext highlighter-rouge">config.d/</code> 디렉터리 병합</h3>

<ul>
  <li>
    <p>프로젝트 내 <code class="language-plaintext highlighter-rouge">config.d/00-base.toml</code>, <code class="language-plaintext highlighter-rouge">10-ci.toml</code></p>
  </li>
  <li>
    <p>개인은 <code class="language-plaintext highlighter-rouge">config.d/90-local.toml</code>로 추가(깃 무시)</p>
  </li>
</ul>

<hr />

<h1 id="today런처에서도-바로-접근"><code class="language-plaintext highlighter-rouge">today</code>/런처에서도 바로 접근</h1>

<p><code class="language-plaintext highlighter-rouge">Work/10_Today/shortcuts.list</code>에 자주 쓰는 설정 편집/링크 추가:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Edit pytest <span class="o">(</span>shared<span class="o">)</span>   | 32_Configs/shared/global/pytest   | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> pytest.ini
Edit ruff <span class="o">(</span>personal<span class="o">)</span>   | 32_Configs/personal/python        | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> ruff.local.toml
Bootstrap dotfiles     | 80_Tools/scripts                  | ./bootstrap_configs.sh
</code></pre></div></div>

<hr />

<h1 id="요약-1">요약</h1>

<ul>
  <li>
    <p><strong>설정 =<code class="language-plaintext highlighter-rouge">32_Configs/</code>로 완전 분리</strong> (shared/personal, global/projects 계층)</p>
  </li>
  <li>
    <p><strong>교육/레퍼런스 =<code class="language-plaintext highlighter-rouge">40_Resources/</code></strong> (설정 없음)</p>
  </li>
  <li>
    <p><strong>우선순위</strong> : Project → personal → shared/projects → shared/global</p>
  </li>
  <li>
    <p><strong>부트스트랩 스크립트</strong> 로 홈/IDE에 심볼릭 링크나 복사 연결</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">today</code> 런처나 <code class="language-plaintext highlighter-rouge">pin</code>으로 <strong>설정 편집/적용을 콘솔 한 번</strong> 에</p>
  </li>
</ul>

<p>원하면 <code class="language-plaintext highlighter-rouge">bootstrap_configs.sh</code>/<code class="language-plaintext highlighter-rouge">.ps1</code>와 <code class="language-plaintext highlighter-rouge">32_Configs/shared</code> 템플릿 파일들(ruff/pytest/VSC)까지 <strong>실제 파일</strong> 로 생성한 압축본을 바로 만들어줄게.</p>

<p class="chat--user">

왜 하필 32야?

</p>

<p>짧게 말하면, <strong>정렬·근접성·확장성</strong> 때문에 <code class="language-plaintext highlighter-rouge">32_Configs</code>로 잡았어요.</p>

<h2 id="왜-하필-32">왜 하필 32?</h2>

<ul>
  <li><strong>정렬(시각적 그룹화)</strong><br />
상위 레벨을 10 단위로 끊어 두었죠.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>30_Areas   ← 장기 운영(업무 영역)
31_Labs    ← 가벼운 실험
32_Configs ← 설정(실행·적용 중심)
40_Resources ← 읽을거리/레퍼런스
</code></pre></div>    </div>
  </li>
</ul>

<p>→ <code class="language-plaintext highlighter-rouge">Configs</code>가 <strong>Labs와 Resources 사이</strong> 에 오도록 32를 줘서, “업무(30) → 실험(31) → 설정적용(32) → 참고자료(40)” 흐름으로 자연스럽게 스캔됩니다.</p>

<ul>
  <li>
    <p><strong>근접성(자주 손대는 것끼리)</strong><br />
설정은 주로 <strong>Areas/Labs에서 파생</strong> 돼요(실험하다 설정을 고치고, 운영하면서 정책을 조정). 그래서 30대에 붙여 <strong>손 닿는 데</strong> 두었습니다.</p>
  </li>
  <li>
    <p><strong>확장성(번호 남겨두기)</strong><br />
33~39 사이에 여유가 생겨요. 나중에 필요하면:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">33_Templates</code> (문서/코드 템플릿)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">34_Policies</code> (보안/품질 정책 문서)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">35_Checklists</code>(QA/릴리스 체크리스트)<br />
… 같은 식으로 <strong>중간번호를 끼워넣기</strong> 쉽습니다.</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="꼭-32여야-해">꼭 32여야 해?</h2>

<p>아니요. 아래처럼 취향대로 바꿔도 좋아요—핵심은 <strong>일관성</strong>.</p>

<ul>
  <li>
    <p><strong>35_Configs</strong> : 홀수만 써서 시각적으로 구분 원할 때</p>
  </li>
  <li>
    <p><strong>28_Configs</strong> : Projects(20대)와 운영(30대) 사이로 끌어당기고 싶을 때</p>
  </li>
  <li>
    <p><strong>82_Configs</strong> : Tools(80대)와 묶고 싶을 때(개인 취향/DevOps 성향)</p>
  </li>
</ul>

<h2 id="바꾸고-싶다면-안전하게-리네임">바꾸고 싶다면 (안전하게 리네임)</h2>

<blockquote>
  <p>두 곳 이상에서 쓰는 스크립트/런처가 있으면 경로만 함께 바꿔주면 됩니다.</p>
</blockquote>

<p><strong>bash/zsh</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mv</span> ~/Work/32_Configs ~/Work/35_Configs
<span class="c"># today 런처 목록 등 경로 업데이트</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/32_Configs/#/35_Configs/#g'</span> ~/Work/10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<p><strong>PowerShell</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs"</span><span class="w"> </span><span class="s2">"35_Configs"</span><span class="w">
</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/32_Configs/'</span><span class="p">,</span><span class="w"> </span><span class="s1">'/35_Configs/'</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="w">
</span></code></pre></div></div>

<h2 id="현재-상위-번호-체계-요약기억용">현재 상위 번호 체계 요약(기억용)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mathematica

00  Inbox         | 10  Today          | 20  Projects      | 25  Jobs
30  Areas         | 31  Labs            | 32  Configs       | 40  Resources
50  Snippets      | 60  Assets          | 70  Exports       | 75  Releases
80  Tools         | 85  Environments    | 99  Archive
</code></pre></div></div>

<p>원하면 네 취향(짝수만/홀수만/문자 프리픽스 등)에 맞춰 <strong>전체 번호 리패터닝 표</strong> 랑 자동 마이그레이션 스크립트도 같이 만들어줄게.</p>

<p class="chat--user">

90을 개인용 Configs 로 하자. 최종적으로 각 폴더명(영어)과 담을 내용(한글)을 정리해줘. 그리고 10가지 정도 업무 예시에 대해 Workflow를 작성해줘. 예를 들어 프로젝트 만들기, 분석 작업하기, 개인용 스크립트 만들기, 툴 설치하기, 개인 shell alias 설정하기 등등이 있을 수 있어.

</p>

<p>좋아—요청대로 <strong>폴더명은 영어</strong> , <strong>설명은 한글</strong> 로 정리하고, 마지막에 <strong>대표 업무 10가지 워크플로우</strong> 를 단계별로 붙일게.<br />
(개인용 설정은 <code class="language-plaintext highlighter-rouge">90_Configs</code>로 확정, “공유/골든 설정”은 <code class="language-plaintext highlighter-rouge">32_Configs</code>에 유지)</p>

<hr />

<h1 id="1-최종-폴더-구조-영문-이름--한글-설명--예시-하위">1) 최종 폴더 구조 (영문 이름 + 한글 설명 + 예시 하위)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span><span class="o">/</span>                                     <span class="o">-</span> <span class="mi">1</span><span class="n">인</span> <span class="n">개발용</span> <span class="n">작업</span> <span class="n">루트</span>
  <span class="mo">00</span><span class="n">_Inbox</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">급히</span> <span class="n">던져두는</span> <span class="nf">임시함</span><span class="p">(</span><span class="n">매일</span><span class="o">/</span><span class="n">주기적으로</span> <span class="n">비우기</span><span class="p">)</span>

  <span class="mi">10</span><span class="n">_Today</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">오늘</span> <span class="n">작업</span> <span class="nf">대시보드</span><span class="p">(</span><span class="n">콘솔</span> <span class="n">중심</span> <span class="n">실행</span> <span class="n">출발점</span><span class="p">)</span>
    <span class="n">shortcuts</span><span class="o">.</span><span class="n">list</span>                        <span class="o">-</span> <span class="n">today</span> <span class="n">런처가</span> <span class="n">읽는</span> <span class="err">“</span><span class="n">라벨</span><span class="o">|</span><span class="n">경로</span><span class="o">|</span><span class="n">명령</span><span class="err">”</span> <span class="nf">목록</span>
    <span class="p">(</span><span class="n">wrappers</span><span class="sr">/)                           - 파이프/</span><span class="n">복잡</span> <span class="n">인자용</span> <span class="n">임시</span> <span class="n">래퍼</span> <span class="nf">스크립트</span><span class="p">(</span><span class="n">단기</span> <span class="n">보관</span><span class="p">)</span>

  <span class="mi">20</span><span class="n">_Projects</span><span class="o">/</span>                            <span class="o">-</span> <span class="nf">툴</span><span class="p">(</span><span class="n">파이썬</span> <span class="n">패키지</span><span class="p">)</span> <span class="nf">개발</span><span class="p">(</span><span class="n">코드</span> <span class="n">수명</span> <span class="n">중심</span><span class="p">)</span>
    <span class="kt">PRJ</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">개별</span> <span class="nf">프로젝트</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="kt">PRJ</span><span class="o">-</span><span class="mi">2025</span><span class="o">-</span><span class="mo">001</span><span class="n">_sample_app</span><span class="p">)</span>
      <span class="n">src</span><span class="sr">/&lt;package_name&gt;/</span>                 <span class="o">-</span> <span class="n">패키지</span> <span class="n">소스</span>
      <span class="n">tests</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">pytest</span> <span class="n">테스트</span>
      <span class="n">scripts</span><span class="o">/</span>                            <span class="o">-</span> <span class="n">install</span><span class="sr">/run/build/lint/test 스크립트(.sh/</span><span class="o">.</span><span class="n">ps1</span><span class="p">)</span>
      <span class="n">examples</span><span class="sr">/{data,scripts,docs}/</span>       <span class="o">-</span> <span class="n">배포용</span> <span class="n">최소</span> <span class="n">실행</span> <span class="n">예제</span>
      <span class="n">issues</span><span class="sr">/BUG-YYYY-NNN/                - 버그/</span><span class="n">개선</span> <span class="n">이슈</span> <span class="n">노트</span>
      <span class="n">docs</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">설계</span><span class="err">·</span><span class="kt">ADR</span><span class="err">·</span><span class="n">가이드</span>
      <span class="o">.</span><span class="n">devcontainer</span><span class="o">/</span>                      <span class="o">-</span> <span class="n">개발</span> <span class="n">컨테이너</span> <span class="n">설정</span>
      <span class="n">pyproject</span><span class="o">.</span><span class="n">toml</span><span class="p">,</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="o">.</span><span class="n">gitignore</span><span class="p">,</span> <span class="o">.</span><span class="n">editorconfig</span>

  <span class="mi">25</span><span class="n">_Jobs</span><span class="o">/</span>                                <span class="o">-</span> <span class="err">“</span><span class="n">산출물</span> <span class="n">작업</span> <span class="n">단위</span><span class="err">”</span><span class="p">(</span><span class="n">프로세스</span> <span class="n">수명</span> <span class="n">중심</span><span class="p">)</span>
    <span class="kt">JOB</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">일반</span> <span class="n">산출</span> <span class="kt">Job</span><span class="p">(</span><span class="n">입력</span><span class="err">→</span><span class="n">설정</span><span class="err">→</span><span class="n">실행</span><span class="err">→</span><span class="n">산출</span><span class="p">)</span>
      <span class="mo">01</span><span class="n">_Brief</span><span class="o">/</span>                           <span class="o">-</span> <span class="n">요구사항</span><span class="sr">/수락 기준/</span><span class="n">마감</span>
      <span class="mo">02</span><span class="n">_Input</span><span class="sr">/raw/</span>                       <span class="o">-</span> <span class="n">원천</span> <span class="nf">데이터</span><span class="p">(</span><span class="n">읽기</span> <span class="n">전용</span> <span class="n">보관</span><span class="p">)</span>
      <span class="mo">03</span><span class="n">_Config</span><span class="o">/</span>                          <span class="o">-</span> <span class="nf">파라미터</span><span class="p">(</span><span class="n">yml</span><span class="o">/</span><span class="n">json</span><span class="p">),</span> <span class="n">실행</span> <span class="n">설정</span>
      <span class="mo">04</span><span class="n">_Run</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">run</span><span class="o">.</span><span class="n">sh</span><span class="o">|</span><span class="n">ps1</span><span class="p">,</span> <span class="n">run</span><span class="o">.</span><span class="n">py</span><span class="p">,</span> <span class="n">로그</span>
      <span class="mo">05</span><span class="n">_Output</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">중간</span><span class="o">/</span><span class="n">최종</span> <span class="nf">산출물</span><span class="p">(</span><span class="n">작업</span> <span class="n">영역</span><span class="p">)</span>
      <span class="mo">06</span><span class="n">_Export</span><span class="o">/</span>                          <span class="o">-</span> <span class="nf">전달본</span><span class="p">(</span><span class="n">최종</span> <span class="n">산출물</span><span class="p">)</span>
      <span class="mi">90</span><span class="n">_Archive</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">완료</span> <span class="n">후</span> <span class="n">장기</span> <span class="n">보관</span>
    <span class="kt">BUG</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">배포</span> <span class="n">버그</span> <span class="n">재현</span><span class="sr">/증거/</span><span class="n">수정</span> <span class="n">검증</span>
      <span class="mo">01</span><span class="n">_Report</span><span class="o">/</span> <span class="mo">02</span><span class="n">_Repro</span><span class="sr">/input/ 03_Config/ 04_Run/ 05_Evidence/logs/ 06_FixValidation/</span>
    <span class="kt">EX</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>                     <span class="o">-</span> <span class="err">“</span><span class="n">툴</span> <span class="n">예제</span><span class="err">”</span> <span class="n">패키징용</span> <span class="kt">Job</span><span class="p">(</span><span class="n">선택</span><span class="p">)</span>
    <span class="kt">SMOKE</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_tool</span><span class="o">/</span>                  <span class="o">-</span> <span class="n">새</span> <span class="n">툴</span> <span class="n">설치</span> <span class="n">후</span> <span class="n">스모크</span><span class="o">/</span><span class="n">feasibility</span> <span class="n">테스트</span>

  <span class="mi">30</span><span class="n">_Areas</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">장기</span> <span class="n">운영</span> <span class="nf">영역</span><span class="p">(</span><span class="n">지속</span> <span class="n">업무</span><span class="p">)</span>
    <span class="n">worklog</span><span class="sr">/YYYY/YY-MM/DATE.md            - 일일/</span><span class="n">주간</span> <span class="mi">5</span><span class="n">줄</span> <span class="n">로그</span>
    <span class="n">environments</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">공통</span> <span class="n">환경</span> <span class="n">메모</span><span class="o">/</span><span class="nf">전략</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">파이썬</span> <span class="n">버전</span> <span class="n">정책</span><span class="p">)</span>
    <span class="n">knowledge_base</span><span class="sr">/{tips,cheatsheets,howtos}/</span>
                                           <span class="o">-</span> <span class="n">축적</span> <span class="nv">지식</span><span class="p">:</span> <span class="n">팁</span><span class="sr">/치트시트/</span><span class="n">가이드</span>

  <span class="mi">31</span><span class="n">_Labs</span><span class="o">/</span>                                <span class="o">-</span> <span class="nf">실험실</span><span class="p">(</span><span class="n">짧은</span> <span class="n">테스트</span><span class="o">/</span><span class="n">프로토</span><span class="p">;</span> <span class="n">재현</span> <span class="n">불필요</span><span class="p">)</span>
    <span class="n">jupyter</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">스크래치</span> <span class="nf">노트북</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">regex_scratch</span><span class="o">.</span><span class="n">ipynb</span><span class="p">)</span>

  <span class="mi">32</span><span class="n">_Configs</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">공유</span><span class="o">/</span><span class="n">골든</span> <span class="nf">설정</span><span class="p">(</span><span class="n">문서화</span><span class="err">·</span><span class="n">재사용</span> <span class="n">대상</span><span class="p">)</span>
    <span class="n">shared</span><span class="o">/</span>
      <span class="n">global</span><span class="sr">/{vscode,ruff,pytest,pyinstaller,pyside6,jupyter}/</span>
                                           <span class="o">-</span> <span class="n">전역</span> <span class="n">표준</span> <span class="n">설정</span>
      <span class="n">projects</span><span class="sr">/&lt;project_slug&gt;/</span>             <span class="o">-</span> <span class="n">특정</span> <span class="n">프로젝트</span> <span class="n">기본설정</span>
      <span class="kt">README</span><span class="o">.</span><span class="n">md</span>                            <span class="o">-</span> <span class="n">적용</span> <span class="n">원칙</span><span class="o">/</span><span class="n">우선순위</span>

  <span class="mi">40</span><span class="n">_Resources</span><span class="o">/</span>                           <span class="o">-</span> <span class="n">참고</span> <span class="nf">자료</span><span class="p">(</span><span class="n">교육</span><span class="sr">/매뉴얼/</span><span class="n">스펙</span><span class="err">—</span><span class="n">설정</span> <span class="n">제외</span><span class="p">)</span>
    <span class="n">edu</span><span class="sr">/{courses,tutorials,papers/…}/</span>      <span class="o">-</span> <span class="n">강의</span><span class="err">·</span><span class="n">튜토리얼</span><span class="err">·</span><span class="nf">논문</span><span class="p">(</span><span class="n">읽을거리</span> <span class="n">중심</span><span class="p">)</span>
    <span class="n">manuals</span><span class="sr">/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/  - 매뉴얼/가이드(PDF/HTML/</span><span class="kt">MD</span><span class="p">)</span>
    <span class="n">reference</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">표준</span><span class="o">/</span><span class="n">스펙</span> <span class="n">문서</span> <span class="n">등</span> <span class="n">레퍼런스</span>

  <span class="mi">50</span><span class="n">_Snippets</span><span class="sr">/{sql,text,bash}/            - 재사용 코드/</span><span class="n">문구</span> <span class="nf">조각</span><span class="p">(</span><span class="n">짧은</span> <span class="n">예제</span><span class="err">·</span><span class="n">원라이너</span><span class="p">)</span>

  <span class="mi">60</span><span class="n">_Assets</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">로고</span><span class="sr">/폰트/</span><span class="n">템플릿</span> <span class="n">등</span> <span class="n">브랜딩</span> <span class="n">리소스</span>

  <span class="mi">70</span><span class="n">_Exports</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">여러</span> <span class="kt">Job의</span> <span class="err">“</span><span class="n">최종</span> <span class="n">전달본</span><span class="err">”</span> <span class="nf">모아보기</span><span class="p">(</span><span class="n">선택</span><span class="p">)</span>

  <span class="mi">75</span><span class="n">_Releases</span><span class="o">/</span>                            <span class="o">-</span> <span class="n">유저</span> <span class="n">배포</span> <span class="n">전용</span> <span class="n">중앙</span> <span class="nf">보관소</span><span class="p">(</span><span class="n">버전드</span><span class="p">)</span>
    <span class="o">&lt;</span><span class="n">project_slug</span><span class="o">&gt;/</span><span class="n">vX</span><span class="o">.</span><span class="kt">Y</span><span class="o">.</span><span class="kt">Z</span><span class="sr">/{installers,wheels,portable,docs,licenses,checksums}/</span>
    <span class="o">&lt;</span><span class="n">project_slug</span><span class="o">&gt;/</span><span class="n">latest</span><span class="o">/</span>                 <span class="o">-</span> <span class="n">최신</span> <span class="n">버전</span> <span class="n">포인터</span>
    <span class="n">catalog</span><span class="o">.</span><span class="n">json</span>                           <span class="o">-</span> <span class="p">(</span><span class="n">선택</span><span class="p">)</span> <span class="n">버전</span><span class="o">/</span><span class="n">파일</span> <span class="n">인덱스</span>

  <span class="mi">80</span><span class="n">_Tools</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">설치파일</span><span class="sr">/포터블/</span><span class="n">자동화</span> <span class="n">스크립트</span>
    <span class="n">installers</span><span class="o">/</span>                            <span class="o">-</span> <span class="n">오프라인</span> <span class="n">설치</span> <span class="n">파일</span> <span class="o">+</span> <span class="n">install_notes</span><span class="o">.</span><span class="nf">md</span><span class="p">(</span><span class="n">버전</span><span class="err">·</span><span class="n">체크섬</span><span class="p">)</span>
    <span class="n">bin</span><span class="o">/</span>                                   <span class="o">-</span> <span class="n">포터블</span> <span class="nf">실행파일</span><span class="p">(</span><span class="kt">PATH에</span> <span class="n">추가</span> <span class="n">가능</span><span class="p">)</span>
    <span class="n">scripts</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">bootstrap</span><span class="sr">/release/</span><span class="n">checksum</span> <span class="n">등</span> <span class="n">공용</span> <span class="n">스크립트</span>
    <span class="n">devcontainer</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">개발</span> <span class="n">컨테이너</span> <span class="n">툴</span>

  <span class="mi">85</span><span class="n">_Environments</span><span class="o">/</span>                        <span class="o">-</span> <span class="n">재현</span> <span class="n">가능한</span> <span class="n">개발</span> <span class="n">환경</span> <span class="n">샘플</span>
    <span class="n">conda</span><span class="o">/</span><span class="n">environment</span><span class="o">.</span><span class="n">yml</span>
    <span class="n">venv</span><span class="o">/</span><span class="kt">README</span><span class="o">.</span><span class="n">md</span>
    <span class="n">docker</span><span class="o">/</span><span class="kt">Dockerfile</span>

  <span class="mi">90</span><span class="n">_Configs</span><span class="o">/</span>                             <span class="o">-</span> <span class="err">★</span><span class="n">개인</span> <span class="nf">설정</span><span class="p">(</span><span class="n">오버라이드</span><span class="err">·</span><span class="n">비공개</span><span class="p">)</span>
    <span class="n">os</span><span class="sr">/{mac,win,linux}/                    - OS별 설정(키맵/</span><span class="n">입력기</span> <span class="n">등</span><span class="p">)</span>
    <span class="n">shell</span><span class="sr">/{bash,zsh,tcsh,powershell}/</span>      <span class="o">-</span> <span class="n">프로필</span><span class="err">·</span><span class="nf">별칭</span><span class="p">(</span><span class="n">개인용</span><span class="p">)</span>
    <span class="n">editors</span><span class="sr">/vscode/</span><span class="p">{</span><span class="n">settings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span><span class="p">,</span><span class="n">keybindings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span><span class="p">}</span>
    <span class="n">git</span><span class="o">/.</span><span class="n">gitconfig</span><span class="o">.</span><span class="n">local</span>
    <span class="n">python</span><span class="o">/</span><span class="p">{</span><span class="n">pip</span><span class="o">.</span><span class="n">conf</span><span class="p">,</span><span class="n">poetry</span><span class="o">.</span><span class="n">toml</span><span class="p">,</span><span class="n">pypirc</span><span class="p">}</span>
    <span class="n">tools</span><span class="o">/</span>                                 <span class="o">-</span> <span class="n">각</span> <span class="n">툴</span> <span class="n">개인</span> <span class="n">프리셋</span>
    <span class="n">secrets</span><span class="o">/</span><span class="kt">README</span><span class="o">.</span><span class="n">md</span>                      <span class="o">-</span> <span class="p">(</span><span class="n">실제</span> <span class="n">비밀은</span> <span class="n">두지</span> <span class="n">말고</span> <span class="n">안내만</span><span class="p">)</span>
    <span class="o">.</span><span class="n">gitignore</span>                             <span class="o">-</span> <span class="o">*.</span><span class="n">local</span><span class="p">,</span> <span class="n">secrets</span><span class="cm">/*, *.pem 등 광범위 제외

  99_Archive/                             - 완료 Project/Job/자료 장기 보관(읽기 전용)
</span></code></pre></div></div>

<hr />

<h1 id="2-대표-업무-10가지-workflow-step-by-step">2) 대표 업무 10가지 Workflow (Step-by-step)</h1>

<h2 id="1-새-프로젝트-만들기-python-패키지데스크탑-툴">1) 새 프로젝트 만들기 (Python 패키지/데스크탑 툴)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">20_Projects/PRJ-YYYY-NNN_&lt;name&gt;/</code> 생성(템플릿 복사).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">./scripts/install.(sh|ps1)</code>로 venv + dev 의존성 설치.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">src/&lt;pkg&gt;/</code>, <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 패키지명과 엔트리포인트 수정.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tests/</code>에 최소 <code class="language-plaintext highlighter-rouge">test_smoke.py</code> 추가 → <code class="language-plaintext highlighter-rouge">./scripts/test.*</code> 실행.</p>
  </li>
  <li>
    <p>필요 시 GUI 의존성(<code class="language-plaintext highlighter-rouge">.[gui]</code>) 추가, <code class="language-plaintext highlighter-rouge">scripts/run_gui.*</code>로 확인.</p>
  </li>
  <li>
    <p>README에 사용법/예제/버전 정책 기입.</p>
  </li>
</ol>

<h2 id="2-분석산출물-작업-수행도구-사용--결과-전달">2) 분석·산출물 작업 수행(도구 사용 → 결과 전달)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/JOB-YYYY-NNN_&lt;title&gt;/</code> 생성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">01_Brief/</code>에 요구사항·마감·검수 기준 작성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">02_Input/raw/</code>에 입력 배치, <code class="language-plaintext highlighter-rouge">03_Config/config.yml</code> 작성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">04_Run/run.(sh|ps1)</code> 실행 → <code class="language-plaintext highlighter-rouge">06_Export/</code>에 최종본, 로그/manifest 생성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">qa_checklist.md</code> 통과 → 필요 시 <code class="language-plaintext highlighter-rouge">70_Exports/</code>에도 복사.</p>
  </li>
</ol>

<h2 id="3-개인용-스크립트-만들기">3) 개인용 스크립트 만들기</h2>

<ol>
  <li>
    <p>오늘만 쓸 임시면 <code class="language-plaintext highlighter-rouge">10_Today/wrappers/</code>에 작성 → <code class="language-plaintext highlighter-rouge">shortcuts.list</code>에서 호출.</p>
  </li>
  <li>
    <p>여러 프로젝트에서 재사용되면 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>로 <strong>승격</strong> + <code class="language-plaintext highlighter-rouge">--help</code>/README 작성.</p>
  </li>
  <li>
    <p>PATH에 <code class="language-plaintext highlighter-rouge">80_Tools/scripts</code> 추가.</p>
  </li>
  <li>
    <p>프로젝트 전용이면 <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-…/scripts/</code>에 두고 README의 Scripts 섹션에 문서화.</p>
  </li>
</ol>

<h2 id="4-새-툴-설치-스모크-테스트">4) 새 툴 설치(+ 스모크 테스트)</h2>

<ol>
  <li>
    <p>설치파일을 <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code>에 보관, <code class="language-plaintext highlighter-rouge">install_notes.md</code>에 버전·체크섬 기록.</p>
  </li>
  <li>
    <p>설치 후 <code class="language-plaintext highlighter-rouge">25_Jobs/SMOKE-YYYY-NNN_&lt;tool&gt;/</code> 생성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">03_Config/commands.txt</code>에 <code class="language-plaintext highlighter-rouge">tool --version</code> 등 기본 명령 기입.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">04_Run/smoke.(sh|ps1)</code> 실행 → <code class="language-plaintext highlighter-rouge">06_Export/result.txt</code> 확인.</p>
  </li>
  <li>
    <p>통과하면 <code class="language-plaintext highlighter-rouge">10_Today/shortcuts.list</code>에 단축 명령 추가.</p>
  </li>
</ol>

<h2 id="5-개인-shell-alias프로필-설정">5) 개인 shell alias/프로필 설정</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">90_Configs/shell/&lt;your_shell&gt;/</code>에 프로필·별칭 작성(예: <code class="language-plaintext highlighter-rouge">.zshrc</code>, <code class="language-plaintext highlighter-rouge">profile.ps1</code>).</p>
  </li>
  <li>
    <p>홈으로 심볼릭 링크 연결(또는 복사):</p>

    <ul>
      <li>
        <p>macOS/Linux: <code class="language-plaintext highlighter-rouge">ln -snf "$HOME/Work/90_Configs/shell/zsh/.zshrc" ~/.zshrc</code></p>
      </li>
      <li>
        <p>PowerShell: 프로필 링크/로드.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>재시작 또는 <code class="language-plaintext highlighter-rouge">source</code> 후 동작 확인.</p>
  </li>
  <li>
    <p>공용으로 권장하고 싶은 항목은 <code class="language-plaintext highlighter-rouge">32_Configs/shared/global/</code>에도 복제.</p>
  </li>
</ol>

<h2 id="6-배포-버전-만들기release">6) 배포 버전 만들기(Release)</h2>

<ol>
  <li>
    <p>프로젝트에서 <code class="language-plaintext highlighter-rouge">./scripts/build_cli.*</code>/<code class="language-plaintext highlighter-rouge">build_gui.*</code>로 빌드.</p>
  </li>
  <li>
    <p>릴리스 검증 Job(선택): <code class="language-plaintext highlighter-rouge">25_Jobs/REL-YYYY-NNN_&lt;proj&gt;_vX.Y.Z/</code>에서 체크섬·노트 자동화.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/</code>에 <code class="language-plaintext highlighter-rouge">{installers,wheels,portable,docs,licenses,checksums}/</code> 정리.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ReleaseNotes.md</code> 작성, <code class="language-plaintext highlighter-rouge">latest/</code> 갱신.</p>
  </li>
  <li>
    <p>필요 시 사내/외부 배포 링크 공지.</p>
  </li>
</ol>

<h2 id="7-버그-제보--디버깅--패치">7) 버그 제보 → 디버깅 → 패치</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/BUG-YYYY-NNN_&lt;title&gt;/01_Report/</code>에 제보/환경/재현절차 작성.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">02_Repro/input/</code>, <code class="language-plaintext highlighter-rouge">03_Config/</code> 준비 → <code class="language-plaintext highlighter-rouge">04_Run/repro.*</code>로 재현.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">05_Evidence/logs/</code>에 로그·스크린샷·체크섬 수집.</p>
  </li>
  <li>
    <p>코드는 <code class="language-plaintext highlighter-rouge">20_Projects/.../issues/BUG-.../</code>에서 triage/fix_notes 관리.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">06_FixValidation/</code> 시나리오 통과 후 패치 릴리스(Workflow 6로 이동).</p>
  </li>
</ol>

<h2 id="8-빠른-실험정규식파이썬-문법-등">8) 빠른 실험(정규식/파이썬 문법 등)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code>에서 스크래치(작게, 5분/50줄 규칙).</p>
  </li>
  <li>
    <p>가치가 있으면 <code class="language-plaintext highlighter-rouge">30_Areas/knowledge_base/{tips,cheatsheets,howtos}</code>로 <strong>승격 요약</strong>.</p>
  </li>
  <li>
    <p>재현/증빙이 필요해지면 <strong>SMOKE Job</strong> 이나 일반 <strong>JOB</strong> 으로 전환.</p>
  </li>
</ol>

<h2 id="9-교육논문-자료-관리">9) 교육·논문 자료 관리</h2>

<ol>
  <li>
    <p>PDF는 <code class="language-plaintext highlighter-rouge">40_Resources/edu/papers/to_read/</code>에 저장.</p>
  </li>
  <li>
    <p>읽으면서 <code class="language-plaintext highlighter-rouge">reading_notes/YYYY-MM-DD_Title.md</code> 작성(템플릿 사용).</p>
  </li>
  <li>
    <p>한 달에 한 번 <code class="language-plaintext highlighter-rouge">summaries/</code>에 1~2페이지 요약 정리.</p>
  </li>
  <li>
    <p>코드/알고리즘으로 채택되면 관련 PRJ의 <code class="language-plaintext highlighter-rouge">docs/</code> 또는 Job으로 연결하여 실험/결과 보관.</p>
  </li>
</ol>

<h2 id="10-설정-레이어링-적용골든--개인">10) 설정 레이어링 적용(골든 ↔ 개인)</h2>

<ol>
  <li>
    <p><strong>우선순위</strong> : Project 로컬 → <code class="language-plaintext highlighter-rouge">90_Configs/personal</code> → <code class="language-plaintext highlighter-rouge">32_Configs/shared/projects/&lt;proj&gt;</code> → <code class="language-plaintext highlighter-rouge">32_Configs/shared/global</code>.</p>
  </li>
  <li>
    <p>VSCode/ruff/pytest 등은 프로젝트에서 기본 설정, 개인은 <code class="language-plaintext highlighter-rouge">*.local.*</code> 오버라이드.</p>
  </li>
  <li>
    <p>부트스트랩 스크립트(<code class="language-plaintext highlighter-rouge">80_Tools/scripts/bootstrap_configs.*</code>)로 홈/IDE에 링크·복사 자동 적용.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">10_Today/shortcuts.list</code>에 “Edit ruff (personal)” 같은 단축키 추가.</p>
  </li>
</ol>

<hr />

<p>원하면 위 변경(특히 <code class="language-plaintext highlighter-rouge">90_Configs</code> 신설)까지 <strong>실제 폴더와 샘플 파일을 생성한 스타터 압축본</strong> 으로 바로 만들어 줄 수 있어. 어떤 셸을 주력으로 쓰는지만 알려줘(예: zsh, tcsh, PowerShell).</p>

<p class="chat--user">

90_Configs랑 32_Configs랑 이름이 겹쳐. rename이 필요해 보여

</p>

<p>좋은 지적! 이름 충돌을 없애고 <strong>의도가 한눈에 보이도록</strong> 이렇게 바꿉니다.</p>

<h1 id="새-이름-명확일관">새 이름 (명확·일관)</h1>

<ul>
  <li>
    <p>**32<em>SharedConfigs** → _공유/골든 설정</em> (팀·프로젝트가 재사용하는 표준)</p>
  </li>
  <li>
    <p>**90<em>PersonalConfigs** → _개인 설정</em> (내 취향/오버라이드/비공개)</p>
  </li>
</ul>

<p>둘 다 <code class="language-plaintext highlighter-rouge">Configs</code>를 유지하되 접두로 <strong>Shared / Personal</strong> 을 붙여 구분을 확실히 했어요.</p>

<hr />

<h1 id="최종-구조해당-부분만-발췌">최종 구조(해당 부분만 발췌)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pgsql

Work/
  32_SharedConfigs/                     - 공유/골든 설정(문서화·재사용 대상)
    global/{vscode,ruff,pytest,pyinstaller,pyside6,jupyter}/
                                         - 전역 표준 설정
    projects/&lt;project_slug&gt;/             - 특정 프로젝트 기본설정
    README.md                            - 적용 원칙/우선순위

  90_PersonalConfigs/                   - 개인 설정(오버라이드·비공개)
    os/{mac,win,linux}/                  - OS별 설정
    shell/{bash,zsh,tcsh,powershell}/    - 프로필·별칭
    editors/vscode/{settings.user.json,keybindings.user.json}
    git/.gitconfig.local
    python/{pip.conf,poetry.toml,pypirc}
    tools/                               - 각 툴 개인 프리셋
    secrets/README.md                    - (실제 비밀은 두지 말 것)
    .gitignore                           - *.local, secrets/*, *.pem 등 폭넓게 제외
</code></pre></div></div>

<h2 id="설정-레이어링우선순위-그대로-유지">설정 레이어링(우선순위 그대로 유지)</h2>

<p>Project 로컬 → <strong>90_PersonalConfigs</strong> → 32_SharedConfigs/projects → 32_SharedConfigs/global</p>

<hr />

<h1 id="안전한-리네임3분-컷">안전한 리네임(3분 컷)</h1>

<h2 id="macoslinux-bashzsh">macOS/Linux (bash/zsh)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work
<span class="nb">mv </span>32_Configs 32_SharedConfigs 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
mv </span>90_Configs 90_PersonalConfigs 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># today 목록 경로 일괄 치환</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/32_Configs/#/32_SharedConfigs/#g'</span> 10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/90_Configs/#/90_PersonalConfigs/#g'</span> 10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># 홈 심볼릭 링크 재연결 예시</span>
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/90_PersonalConfigs/shell/zsh/.zshrc"</span> ~/.zshrc
</code></pre></div></div>

<h2 id="windows-powershell-1">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\32_Configs"</span><span class="w"> </span><span class="s2">"32_SharedConfigs"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\90_Configs"</span><span class="w"> </span><span class="s2">"90_PersonalConfigs"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">

</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/32_Configs/'</span><span class="p">,</span><span class="w"> </span><span class="s1">'/32_SharedConfigs/'</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/90_Configs/'</span><span class="p">,</span><span class="w"> </span><span class="s1">'/90_PersonalConfigs/'</span><span class="w"> </span><span class="se">`
</span><span class="w">  </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="w">

</span><span class="c"># 예: 개인 프로필 링크 재설정</span><span class="w">
</span><span class="c"># New-Item -Type SymbolicLink -Path "$HOME\Documents\PowerShell\Microsoft.PowerShell_profile.ps1" `</span><span class="w">
</span><span class="c">#   -Target "$HOME\Work\90_PersonalConfigs\shell\powershell\profile.ps1" -Force</span><span class="w">
</span></code></pre></div></div>

<h2 id="tcsh">tcsh</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

cd ~/Work
if ( -d 32_Configs )  mv 32_Configs 32_SharedConfigs
if ( -d 90_Configs )  mv 90_Configs 90_PersonalConfigs
# shortcuts.list 내 경로는 수동 또는 sed로 치환
sed -i '' 's#/32_Configs/#/32_SharedConfigs/#g; s#/90_Configs/#/90_PersonalConfigs/#g' 10_Today/shortcuts.list
</code></pre></div></div>

<hr />

<h1 id="부트스트랩런처에서의-새-경로-사용-예">부트스트랩/런처에서의 새 경로 사용 예</h1>

<p><strong><code class="language-plaintext highlighter-rouge">shortcuts.list</code> 예시</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Edit pytest <span class="o">(</span>shared<span class="o">)</span>   | 32_SharedConfigs/global/pytest   | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> pytest.ini
Edit ruff <span class="o">(</span>personal<span class="o">)</span>   | 90_PersonalConfigs/python        | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> ruff.local.toml
Bootstrap dotfiles     | 80_Tools/scripts                 | ./bootstrap_configs.sh
</code></pre></div></div>

<p><strong>심볼릭 링크 예시</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># VSCode 사용자 설정</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> ~/Library/Application<span class="se">\ </span>Support/Code/User
<span class="nb">ln</span> <span class="nt">-snf</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/90_PersonalConfigs/editors/vscode/settings.user.json"</span> <span class="se">\</span>
        ~/Library/Application<span class="se">\ </span>Support/Code/User/settings.json
</code></pre></div></div>

<hr />

<h2 id="왜-이-이름이-좋은가-짧게">왜 이 이름이 좋은가 (짧게)</h2>

<ul>
  <li>
    <p><strong>가독성</strong> : 폴더를 보는 순간 “공유용 vs 개인용”이 즉시 구분.</p>
  </li>
  <li>
    <p><strong>검색성</strong> : <code class="language-plaintext highlighter-rouge">SharedConfigs</code>, <code class="language-plaintext highlighter-rouge">PersonalConfigs</code> 키워드로 코드·문서·스크립트에서 쉽게 grep.</p>
  </li>
  <li>
    <p><strong>확장성</strong> : 나중에 <code class="language-plaintext highlighter-rouge">33_Templates/</code>, <code class="language-plaintext highlighter-rouge">34_Policies/</code> 같은 디렉터리도 무리 없이 추가.</p>
  </li>
</ul>

<p>필요하면 위 리네임을 반영한 <strong>today 런처/핀 스크립트</strong> 샘플 업데이트와 <code class="language-plaintext highlighter-rouge">bootstrap_configs.(sh|ps1|csh)</code>까지 만들어서 드릴게.</p>

<p class="chat--user">

근데 shortcuts가 그렇게 유용해? 여러 군데서 사용하네

</p>

<p>좋은 포인트야. <strong>shortcuts.list</strong> 가 “유용하냐”는 건 작업 스타일/규모에 따라 갈려.<br />
정리하자면:</p>

<h2 id="결론-의사결정-매트릭스">결론 (의사결정 매트릭스)</h2>

<ul>
  <li>
    <p><strong>명령이 5~20개</strong> 정도로 “매일 반복”된다 → <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 유지 (번호 선택 한 방, 쉘/OS 무관).</p>
  </li>
  <li>
    <p><strong>명령이 들쭉날쭉·많음( &gt;30)</strong> → <code class="language-plaintext highlighter-rouge">shortcuts.list</code> <em>없애고</em> <strong>자동 탐색 러너</strong> 로 전환.</p>
  </li>
  <li>
    <p><strong>프로젝트별로만 돌림</strong> → 각 PRJ에 <strong>Make/just/invoke/nox</strong> 같은 <strong>로컬 태스크 러너</strong> 두고, Today는 단순 점프만.</p>
  </li>
</ul>

<p>아래에 <strong>세 가지 운용안</strong> 을 다 줬어. 너한테 맞는 걸 골라 쓰면 돼.</p>

<hr />

<h1 id="옵션-a-shortcutslist-계속-쓸-때-유지비-최소-트릭">옵션 A) shortcuts.list 계속 쓸 때 (유지비 최소 트릭)</h1>

<ul>
  <li>
    <p><strong>등록은 1줄</strong> : <code class="language-plaintext highlighter-rouge">pin</code>(bash/zsh/ps/tcsh)로 현재 폴더·명령을 자동 추가 → 타이핑 부담 최소.</p>
  </li>
  <li>
    <p><strong>정리 주기</strong> : 금요일 5분에 <strong>TOP10만 남기고 나머지 아카이브</strong>.</p>
  </li>
  <li>
    <p><strong>한 곳에서만 사용</strong> : <code class="language-plaintext highlighter-rouge">today</code> 러너만 이 파일을 읽게 하고, 다른 스크립트/도구는 <strong>직접 파싱 금지</strong>(중복도입 방지).</p>
  </li>
</ul>

<blockquote>
  <p>이미 우리가 만든 <code class="language-plaintext highlighter-rouge">today</code>/<code class="language-plaintext highlighter-rouge">pin</code> 세트는 이 전제를 만족해. (=한 군데에서만 소비)</p>
</blockquote>

<hr />

<h1 id="옵션-b-자동-탐색-러너추천-명령이-많거나-자주-변할-때">옵션 B) <strong>자동 탐색 러너</strong>(추천: 명령이 많거나 자주 변할 때)</h1>

<blockquote>
  <p>리스트 관리 자체가 귀찮다면, <strong>Work 전체를 스캔</strong> 해서 “돌릴 수 있는 스크립트”를 <strong>자동으로</strong> 메뉴로 보여주면 끝이야.<br />
 <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 없이 바로 사용.</p>
</blockquote>

<h2 id="bashzsh-work-run-fzf-있으면-퍼지-선택-없으면-번호-선택">bash/zsh: <code class="language-plaintext highlighter-rouge">work-run</code> (fzf 있으면 퍼지 선택, 없으면 번호 선택)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>

<span class="c"># (1) 후보 수집: 자주 쓰는 엔트리 스크립트 패턴</span>
<span class="nb">mapfile</span> <span class="nt">-t</span> CANDIDATES &lt; &lt;<span class="o">(</span>
  find <span class="s2">"</span><span class="nv">$W</span><span class="s2">"</span> <span class="nt">-type</span> f <span class="se">\(</span> <span class="se">\</span>
      <span class="nt">-path</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/20_Projects/*/scripts/*.sh"</span> <span class="nt">-o</span> <span class="se">\</span>
      <span class="nt">-path</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs/*/04_Run/*.sh"</span> <span class="nt">-o</span> <span class="se">\</span>
      <span class="nt">-path</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/25_Jobs/*/04_Run/*.ps1"</span> <span class="nt">-o</span> <span class="se">\</span>
      <span class="nt">-path</span> <span class="s2">"</span><span class="nv">$W</span><span class="s2">/80_Tools/scripts/*.sh"</span> <span class="se">\</span>
    <span class="se">\)</span> 2&gt;/dev/null <span class="se">\</span>
  | <span class="nb">sort</span>
<span class="o">)</span>

<span class="o">((</span> <span class="k">${#</span><span class="nv">CANDIDATES</span><span class="p">[@]</span><span class="k">}</span> <span class="o">))</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"No runnable scripts found."</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>

pick_with_fzf<span class="o">()</span> <span class="o">{</span>
  <span class="nb">command</span> <span class="nt">-v</span> fzf <span class="o">&gt;</span>/dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="k">return </span>1
  <span class="nb">printf</span> <span class="s1">'%s\n'</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CANDIDATES</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span> <span class="se">\</span>
    | <span class="nb">sed</span> <span class="s2">"s|^</span><span class="nv">$W</span><span class="s2">/||"</span> <span class="se">\</span>
    | fzf <span class="nt">--prompt</span><span class="o">=</span><span class="s2">"work-run&gt; "</span> <span class="nt">--height</span><span class="o">=</span>40% <span class="nt">--reverse</span> <span class="se">\</span>
          <span class="nt">--preview</span><span class="o">=</span><span class="s2">"sed -n '1,80p' </span><span class="se">\"</span><span class="nv">$W</span><span class="s2">/{}</span><span class="se">\"</span><span class="s2">"</span> <span class="se">\</span>
    | <span class="nb">sed</span> <span class="s2">"s|^|</span><span class="nv">$W</span><span class="s2">/|"</span>
<span class="o">}</span>

<span class="nv">SEL</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span>pick_with_fzf <span class="o">||</span> <span class="nb">true</span><span class="si">)</span><span class="s2">"</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nt">-z</span> <span class="s2">"</span><span class="k">${</span><span class="nv">SEL</span><span class="k">:-}</span><span class="s2">"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
  <span class="c"># fallback: 번호 선택</span>
  <span class="nv">i</span><span class="o">=</span>1
  <span class="k">for </span>p <span class="k">in</span> <span class="s2">"</span><span class="k">${</span><span class="nv">CANDIDATES</span><span class="p">[@]</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="k">do
    </span><span class="nv">rel</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">p</span><span class="p">#</span><span class="nv">$W</span><span class="p">/</span><span class="k">}</span><span class="s2">"</span><span class="p">;</span> <span class="nb">printf</span> <span class="s2">"%2d) %s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$i</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$rel</span><span class="s2">"</span><span class="p">;</span> <span class="o">((</span>i++<span class="o">))</span>
  <span class="k">done
  </span><span class="nb">read</span> <span class="nt">-rp</span> <span class="s2">"work-run&gt; "</span> idx
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$idx</span><span class="s2">"</span> <span class="o">=</span>~ ^[0-9]+<span class="nv">$ </span><span class="o">]]</span> <span class="o">||</span> <span class="o">{</span> <span class="nb">echo</span> <span class="s2">"Invalid"</span><span class="p">;</span> <span class="nb">exit </span>1<span class="p">;</span> <span class="o">}</span>
  <span class="nv">SEL</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">CANDIDATES</span><span class="p">[</span><span class="k">$((</span>idx-1<span class="k">))</span><span class="p">]</span><span class="k">}</span><span class="s2">"</span>
<span class="k">fi

</span><span class="nb">dir</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$SEL</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span><span class="p">;</span> <span class="nv">file</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$SEL</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$dir</span><span class="s2">"</span>
<span class="k">case</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="k">in</span>
  <span class="k">*</span>.ps1<span class="p">)</span>  pwsh <span class="nt">-NoLogo</span> <span class="nt">-NoProfile</span> <span class="nt">-File</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> <span class="p">;;</span>   <span class="c"># pwsh있으면 PS 스크립트도 실행</span>
  <span class="k">*</span>.sh<span class="p">)</span>   <span class="nb">chmod</span> +x <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span> 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span><span class="p">;</span> <span class="s2">"./</span><span class="nv">$file</span><span class="s2">"</span> <span class="p">;;</span>
  <span class="k">*</span><span class="p">)</span>      <span class="nb">echo</span> <span class="s2">"Unknown type: </span><span class="nv">$file</span><span class="s2">"</span><span class="p">;</span> <span class="nb">exit </span>1 <span class="p">;;</span>
<span class="k">esac</span>
</code></pre></div></div>

<p>사용:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/Work/80_Tools/scripts/work-run
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/80_Tools/scripts:</span><span class="nv">$PATH</span><span class="s2">"</span>
work-run
</code></pre></div></div>

<ul>
  <li>
    <p>패턴은 필요하면 추가해(예: <code class="language-plaintext highlighter-rouge">build_*.sh</code>, <code class="language-plaintext highlighter-rouge">repro.sh</code>, <code class="language-plaintext highlighter-rouge">smoke.sh</code> 등).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">fzf</code>가 있으면 퍼지 검색/프리뷰, 없으면 번호 메뉴.</p>
  </li>
</ul>

<h2 id="tcsh-work-runcsh-간단-번호-선택">tcsh: <code class="language-plaintext highlighter-rouge">work-run.csh</code> (간단 번호 선택)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

#!/bin/tcsh -f
set W = "$HOME/Work"
if ( $?WORK_DIR ) set W = "$WORK_DIR"

set tmp = "/tmp/work-run.$$"
# 후보: scripts/*.sh, 04_Run/*.sh, 80_Tools/scripts/*.sh
find "$W" -type f \( \
  -path "$W/20_Projects/*/scripts/*.sh" -o \
  -path "$W/25_Jobs/*/04_Run/*.sh" -o \
  -path "$W/80_Tools/scripts/*.sh" \
\) | sort | sed "s|^$W/||" &gt; "$tmp"

set n = `wc -l &lt; "$tmp"`
if ( "$n" == 0 ) then
  echo "No runnable scripts found."; /bin/rm -f "$tmp"; exit 0
endif

set i = 1
foreach line (`cat "$tmp"`)
  echo "$i) $line"
  @ i++
end
echo -n "work-run&gt; "
set idx = $&lt;
set sel = `sed -n "${idx}p" "$tmp"`; /bin/rm -f "$tmp"
set full = "$W/$sel"
set dir = `dirname "$full"`; set file = `basename "$full"`
cd "$dir"
if ( "$file:e" == "sh" ) then
  chmod +x "$file" &gt;/dev/null
  ./"$file"
else
  echo "Unknown type: $file"
endif
</code></pre></div></div>

<p>사용:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

chmod +x ~/Work/80_Tools/scripts/work-run.csh
setenv PATH "$HOME/Work/80_Tools/scripts:$PATH"
work-run.csh
</code></pre></div></div>

<blockquote>
  <p>이 방식이면 <strong>여러 군데서 shortcuts를 쓰지 않아도</strong> 되고, 새 스크립트를 만들면 자동으로 메뉴에 잡혀.</p>
</blockquote>

<hr />

<h1 id="옵션-c-프로젝트-로컬-태스크-러너-로-통일">옵션 C) <strong>프로젝트 로컬 태스크 러너</strong> 로 통일</h1>

<ul>
  <li>
    <p>각 PRJ 루트에 아래 중 하나를 채택:</p>

    <ul>
      <li>
        <p><strong>Makefile</strong> : <code class="language-plaintext highlighter-rouge">make test</code>, <code class="language-plaintext highlighter-rouge">make build</code>, <code class="language-plaintext highlighter-rouge">make run</code></p>
      </li>
      <li>
        <p><strong>justfile</strong>(추천): 사람이 읽기 쉬운 문법, <code class="language-plaintext highlighter-rouge">just build</code>, <code class="language-plaintext highlighter-rouge">just test</code></p>
      </li>
      <li>
        <p><strong>Invoke/Fab</strong>(파이썬 태스크): <code class="language-plaintext highlighter-rouge">inv build</code>, <code class="language-plaintext highlighter-rouge">inv release</code></p>
      </li>
      <li>
        <p><strong>nox/tox</strong>(테스트/세션): <code class="language-plaintext highlighter-rouge">nox -s lint tests</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">10_Today</code>에서는 <strong>그 프로젝트로 cd만</strong> 하고, 나머지는 로컬 태스크로 실행.</p>
  </li>
  <li>
    <p>장점: <strong>유지보수 최소</strong> , CI/CD와 스크립트 공유 쉬움.</p>
  </li>
  <li>
    <p>단점: 프로젝트마다 태스크 정의 필요.</p>
  </li>
</ul>

<hr />

<h2 id="어느-걸-쓰면-좋을까-현실-규칙">어느 걸 쓰면 좋을까? (현실 규칙)</h2>

<ul>
  <li>
    <p><strong>초기 셋업/개인 워크스페이스</strong> : B(자동 탐색) → 관리 부담 0</p>
  </li>
  <li>
    <p><strong>안정화되면</strong> : C(프로젝트 태스크 러너)로 고정해 품질↑</p>
  </li>
  <li>
    <p><strong>매일 도는 Top10 명령이 뚜렷</strong> : A(shotcuts.list) 유지 + <code class="language-plaintext highlighter-rouge">pin</code>으로 등록을 “노가다 0”으로</p>
  </li>
</ul>

<hr />

<h2 id="보너스-혼용-예시-실전형">보너스: 혼용 예시 (실전형)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">work-run</code>으로 전체 스크립트 <strong>퍼지 검색</strong> 해서 바로 실행</p>
  </li>
  <li>
    <p>자주 쓰는 5~10개는 <code class="language-plaintext highlighter-rouge">shortcuts.list</code>에 <strong>고정 슬롯</strong></p>
  </li>
  <li>
    <p>프로젝트 내부에는 <code class="language-plaintext highlighter-rouge">justfile</code>로 <code class="language-plaintext highlighter-rouge">build/test/run</code> 표준화</p>
  </li>
</ul>

<p>이렇게 잡으면 “여러 군데서 shortcuts를 쓴다”는 느낌 없이,<br />
<strong>한 가지 진입점(work-run 혹은 today)</strong> 만 기억하면 되고,<br />
필요할 때만 최소한으로 <code class="language-plaintext highlighter-rouge">shortcuts.list</code>를 운용하면 돼.</p>

<p class="chat--user">

만약에 교육 실험(LAB)을 따라해보고 싶다면 어디서 해야할까

</p>

<p>좋은 질문! <strong>교육 실험(LAB)</strong>은 “자료(읽기)”와 “실습(실행)”을 분리해서 관리하면 깔끔합니다.</p>

<h2 id="한-줄-결론">한 줄 결론</h2>

<ul>
  <li>
    <p><strong>자료(강의/튜토리얼/노트)</strong> : <code class="language-plaintext highlighter-rouge">40_Resources/edu/...</code> (읽기 전용 레퍼런스)</p>
  </li>
  <li>
    <p><strong>가벼운 따라하기·짧은 탐색( &lt;30분)</strong>: <code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code> (스크래치)</p>
  </li>
  <li>
    <p><strong>데이터·설정·결과를 남기는 제대로 된 실습</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/LAB-YYYY-NNN_&lt;topic&gt;/</code> (재현 가능한 구조)</p>
  </li>
</ul>

<hr />

<h1 id="어디서-무엇을-하나요">어디서 무엇을 하나요?</h1>

<h2 id="1-자료는-여기-40_resourcesedu">1) 자료는 여기: <code class="language-plaintext highlighter-rouge">40_Resources/edu/</code></h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">courses/&lt;provider&gt;/&lt;course-name&gt;/</code> : 강의 슬라이드/수업 링크</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tutorials/&lt;topic&gt;/</code> : 튜토리얼 링크/README</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">papers/</code> : 논문 워크플로(to_read → reading_notes → summaries)</p>
  </li>
</ul>

<blockquote>
  <p>역할: “읽을거리/레퍼런스” 저장소. <strong>실행 파일이나 산출물은 두지 않음</strong>.</p>
</blockquote>

<h2 id="2-짧은-실습은-여기-31_labsjupyter">2) 짧은 실습은 여기: <code class="language-plaintext highlighter-rouge">31_Labs/jupyter/</code></h2>

<ul>
  <li>
    <p>파일 예: <code class="language-plaintext highlighter-rouge">2025-08-26_pytorch-tensor-basics.ipynb</code>, <code class="language-plaintext highlighter-rouge">regex_scratch.ipynb</code></p>
  </li>
  <li>
    <p>용도: API 감, 문법/정규식 테스트, 작은 코드 실험(5분/50줄 규칙)</p>
  </li>
  <li>
    <p>끝나고 유용하면 <strong>요약을</strong> <code class="language-plaintext highlighter-rouge">30_Areas/knowledge_base/{tips|cheatsheets|howtos}</code>로 <strong>승격</strong><br />
(예: “PyTorch 텐서 기본” 치트시트)</p>
  </li>
</ul>

<h2 id="3-본격-실습데이터산출리포트-필요은-여기-25_jobslab-yyyy-nnn_topic">3) 본격 실습(데이터·산출·리포트 필요)은 여기: <code class="language-plaintext highlighter-rouge">25_Jobs/LAB-YYYY-NNN_&lt;topic&gt;/</code></h2>

<blockquote>
  <p>LAB을 <strong>JOB의 한 타입</strong> 으로 보면 됩니다(재현성/증빙 목적).</p>
</blockquote>

<h3 id="권장-스켈레톤">권장 스켈레톤</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arduino

25_Jobs/
  LAB-2025-012_pytorch-cnn/
    01_Brief/            - 학습 목표, 평가 기준(예: 정확도 ≥ 90%), 마감
    02_Input/
      raw/               - 원천 데이터(큰 파일은 심볼릭 링크 권장)
    03_Config/
      env.yml            - conda/venv 의존성 명세(또는 requirements.txt)
      params.yml         - 하이퍼파라미터/경로 설정
    04_Run/
      notebooks/         - 실습 노트북(실행 본문)
      run.sh|run.ps1     - 일괄실행/로그/시드고정
      manifest.json      - 자동 생성(환경/버전/체크섬)
    05_Output/
      intermediate/      - 체크포인트/중간 산출
      reports/           - 리포트 파일(HTML/PDF)
    06_Export/
      final/             - 제출/공유용 최종본
</code></pre></div></div>

<h3 id="왜-job-형태">왜 Job 형태?</h3>

<ul>
  <li>
    <p>입력/설정/실행/산출이 분리되어 <strong>다시 돌리기 쉬움</strong></p>
  </li>
  <li>
    <p>체크섬·환경 버전이 <strong>manifest로 기록</strong> → 결과 신뢰도↑</p>
  </li>
  <li>
    <p>팀/미래의 나에게 <strong>재현 가능한 증거</strong> 가 됨</p>
  </li>
</ul>

<hr />

<h1 id="실전-워크플로-lab-따라하기">실전 워크플로 (LAB 따라하기)</h1>

<h2 id="a-짧게-맛보기-유튜토리얼블로그-코드-몇-줄">A) “짧게 맛보기” (유튜토리얼/블로그 코드 몇 줄)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">40_Resources/edu/tutorials/&lt;topic&gt;/</code>에 링크/원문 저장</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">31_Labs/jupyter/2025-08-26_&lt;topic&gt;.ipynb</code>에서 바로 실습</p>
  </li>
  <li>
    <p>유용하면 → <code class="language-plaintext highlighter-rouge">30_Areas/knowledge_base/tips/&lt;topic&gt;.md</code>에 요약 10줄</p>
  </li>
</ol>

<h2 id="b-실제-데이터로-결과를-내야-함성능리포트-필요">B) “실제 데이터로 결과를 내야 함”(성능/리포트 필요)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/LAB-YYYY-NNN_&lt;topic&gt;/</code> 생성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">01_Brief/</code>에 목표/평가 기준/데이터 출처 작성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">02_Input/raw/</code>에 데이터 배치(대용량은 경로만, 심링크 추천)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">03_Config/env.yml</code>, <code class="language-plaintext highlighter-rouge">params.yml</code> 작성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">04_Run/notebooks/</code>에 노트북 저장, <code class="language-plaintext highlighter-rouge">run.sh</code>에서 순서·시드 고정</p>
  </li>
  <li>
    <p>실행 → <code class="language-plaintext highlighter-rouge">05_Output/</code>에 중간물, <code class="language-plaintext highlighter-rouge">06_Export/final/</code>에 최종 리포트/PDF</p>
  </li>
  <li>
    <p>성과가 재사용 가능하면, <strong>도구화</strong> 해서 <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-...</code>로 승격</p>
  </li>
</ol>

<h2 id="c-lab이-결국-재사용-툴로-발전">C) “LAB이 결국 재사용 툴로 발전”</h2>

<ol>
  <li>
    <p>실습 코드에서 공통 로직을 <strong>패키지화</strong> → <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-.../src/&lt;pkg&gt;/</code></p>
  </li>
  <li>
    <p>예제는 <code class="language-plaintext highlighter-rouge">20_Projects/.../examples/</code>로 옮겨 <strong>최소 실행 샘플</strong> 제공</p>
  </li>
  <li>
    <p>학습 기록/리포트는 기존 <code class="language-plaintext highlighter-rouge">LAB-...</code> Job에 그대로 보존(출처·증빙)</p>
  </li>
</ol>

<hr />

<h1 id="환경설정은-어디서">환경/설정은 어디서?</h1>

<ul>
  <li>
    <p><strong>공유/골든 설정</strong> : <code class="language-plaintext highlighter-rouge">32_SharedConfigs/</code> (예: 표준 <code class="language-plaintext highlighter-rouge">pytest.ini</code>, <code class="language-plaintext highlighter-rouge">ruff.toml</code>)</p>
  </li>
  <li>
    <p><strong>개인 설정(오버라이드)</strong> : <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/</code> (셸 프로필, 개인 ruff/VSCode 등)</p>
  </li>
  <li>
    <p><strong>특정 LAB 전용 의존성</strong> : <code class="language-plaintext highlighter-rouge">LAB-.../03_Config/env.yml</code> 또는 <code class="language-plaintext highlighter-rouge">requirements.txt</code><br />
(프로젝트로 승격되면 PRJ 리포 안으로 옮기기)</p>
  </li>
</ul>

<hr />

<h1 id="today-런처자동-러너에-연결-선택">Today 런처/자동 러너에 연결 (선택)</h1>

<ul>
  <li>
    <p>그냥 콘솔에서 자주 돌리면:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">work-run</code> 자동 탐색 러너를 쓰면 <code class="language-plaintext highlighter-rouge">LAB-.../04_Run/*.sh</code>가 자동 후보에 올라옵니다.</p>
      </li>
      <li>
        <p>또는 <code class="language-plaintext highlighter-rouge">10_Today/shortcuts.list</code>에 한 줄 추가:</p>
        <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Run</span> <span class="kt">LAB</span> <span class="kt">CNN</span> <span class="o">|</span> <span class="mi">25</span><span class="n">_Jobs</span><span class="sr">/LAB-2025-012_pytorch-cnn/04_Run | ./</span><span class="n">run</span><span class="o">.</span><span class="n">sh</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="언제-어디서-할지-결정-규칙요약">언제 어디서 할지 결정 규칙(요약)</h1>

<ul>
  <li>
    <p><strong>&lt; 30분 / 재현 불요 / 개인 확인</strong> → <code class="language-plaintext highlighter-rouge">31_Labs/jupyter</code></p>
  </li>
  <li>
    <p><strong>데이터·결과·평가 필요 / 공유·재현 필요</strong> → <code class="language-plaintext highlighter-rouge">25_Jobs/LAB-YYYY-...</code></p>
  </li>
  <li>
    <p><strong>도구로 발전</strong> → <code class="language-plaintext highlighter-rouge">20_Projects/PRJ-...</code> (LAB은 기록으로 남김)</p>
  </li>
</ul>

<p>필요하면 <strong>LAB용 템플릿(Job 스캐폴드 + env/params 샘플 + run 스크립트)</strong>을 바로 만들어줄게. 어떤 주제(예: PyTorch, Pandas, NLP, 시각화)로 실습할지 알려주면 거기에 맞춰 뼈대까지 넣어 드릴 수 있어!</p>

<p class="chat--user">

25_Jobs가 엄청 뚱뚱해지네

</p>

<p>맞아—그 느낌 정상이에요. <strong>25_Jobs가 비대해지기 쉬운 폴더</strong> 라서, 구조·정책·자동화 3가지만 잡으면 금방 얇아집니다. 아래 그대로 적용해보자.</p>

<hr />

<h1 id="1-구조-25_jobs를-타입연도상태로-쪼개기">1) 구조: 25_Jobs를 “타입×연도×상태”로 쪼개기</h1>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">Work/</span>
  <span class="s">25_Jobs/                          ← 산출 작업 루트</span>
    <span class="s">_active/                        ← 지금 진행 중(12개 이내 유지)</span>
    <span class="s">_templates/                     ← 복제용 스캐폴드(빈 템플릿)</span>
    <span class="s">JOB/                            ← 일반 작업(연도별 보관)</span>
      <span class="s">2025/</span>
      <span class="s">2024/</span>
    <span class="s">BUG/                            ← 배포 버그 재현/검증</span>
      <span class="s">2025/</span>
    <span class="s">SMOKE/                          ← 새 툴 스모크/feasibility</span>
      <span class="s">2025/</span>
    <span class="s">LAB/                            ← 교육 실습 중 “재현형” 실습</span>
      <span class="s">2025/</span>
    <span class="s">EX/                             ← 배포 예제 패키징</span>
      <span class="s">2025/</span>
    <span class="s">REL/                            ← 릴리스 준비/검증(Job 형태)</span>
      <span class="s">2025/</span>
</code></pre></div></div>

<ul>
  <li>
    <p>새 작업은 <strong>항상 <code class="language-plaintext highlighter-rouge">25_Jobs/_active/타입-YYYY-NNN_제목/</code></strong>로 시작 → 끝나면 <strong>동일 타입의 연도 폴더로 이동</strong>.</p>
  </li>
  <li>
    <p>템플릿은 전부 <strong><code class="language-plaintext highlighter-rouge">_templates/</code>에 모아두고</strong> 복제만 한다(중복 템플릿 방지).</p>
  </li>
</ul>

<blockquote>
  <p>예) 진행 중 버그: <code class="language-plaintext highlighter-rouge">_active/BUG-2025-013_crash_xxx/</code><br />
 완료 후 이동: <code class="language-plaintext highlighter-rouge">BUG/2025/BUG-2025-013_crash_xxx/</code></p>
</blockquote>

<hr />

<h1 id="2-정책-수명주기hot--warm--cold">2) 정책: 수명주기(Hot → Warm → Cold)</h1>

<table>
  <thead>
    <tr>
      <th>단계</th>
      <th>위치</th>
      <th>기간/기준</th>
      <th>해야 할 일</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>Hot</strong></td>
      <td><code class="language-plaintext highlighter-rouge">_active/</code></td>
      <td>작업 중</td>
      <td>매일 편집, 로그/메모 살림</td>
    </tr>
    <tr>
      <td><strong>Warm</strong></td>
      <td><code class="language-plaintext highlighter-rouge">타입/2025/</code></td>
      <td><strong>완료 후 ~90일</strong></td>
      <td>중간산출물 정리, <code class="language-plaintext highlighter-rouge">05_Output/intermediate</code> 압축/삭제</td>
    </tr>
    <tr>
      <td><strong>Cold</strong></td>
      <td><code class="language-plaintext highlighter-rouge">99_Archive/25_Jobs/2025/</code></td>
      <td>90일↑ 또는 재사용 낮음</td>
      <td>전체 폴더 이동(읽기 전용), 필요 파일만 <code class="language-plaintext highlighter-rouge">70_Exports</code> 링크</td>
    </tr>
  </tbody>
</table>

<ul>
  <li>
    <p><strong>상한선</strong> : <code class="language-plaintext highlighter-rouge">_active/</code>는 <strong>12개 이내</strong> (넘으면 가장 오래된 것부터 Warm으로 이동).</p>
  </li>
  <li>
    <p><strong>원천데이터</strong> : 큰 파일은 <code class="language-plaintext highlighter-rouge">02_Input/raw</code>에 <strong>심볼릭 링크/경로만</strong>(실파일은 별도 데이터 저장소; 아래 5번 참고).</p>
  </li>
</ul>

<hr />

<h1 id="3-인덱스-가벼운-카탈로그-1장검색정리용">3) 인덱스: 가벼운 카탈로그 1장(검색·정리용)</h1>

<p><code class="language-plaintext highlighter-rouge">25_Jobs/index.csv</code> (또는 <code class="language-plaintext highlighter-rouge">catalog.json</code>) — 최소 필드:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pgsql

job_code,type,year,title,status,owner,tags,start,end,path
JOB-2025-041,JOB,2025,"보고서 A",done,me,"report,pdf",2025-08-20,2025-08-22,25_Jobs/JOB/2025/JOB-2025-041_보고서A
BUG-2025-013,BUG,2025,"crash on save",warm,me,"win11,pyinstaller",2025-08-15,2025-08-16,25_Jobs/BUG/2025/BUG-2025-013_crash
</code></pre></div></div>

<ul>
  <li>
    <p>새 Job 만들 때 <strong>한 줄 추가</strong> → 완료 시 <code class="language-plaintext highlighter-rouge">status</code>만 <code class="language-plaintext highlighter-rouge">done</code>으로 바꿔도 검색이 편함.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">work-run</code>(자동 탐색 러너)나 간단 스크립트가 이 인덱스를 참고하면 더 빨라져요.</p>
  </li>
</ul>

<hr />

<h1 id="4-자동화-얇게-유지하는-4가지-루틴">4) 자동화: 얇게 유지하는 4가지 루틴</h1>

<h3 id="a-close--move핫--웜">A) “Close &amp; Move”(핫 → 웜)</h3>

<ul>
  <li>
    <p>종료 커밋/정리 후:</p>

    <ol>
      <li>
        <p><code class="language-plaintext highlighter-rouge">05_Output/intermediate</code> 압축 또는 삭제</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">06_Export</code>만 남기고 나머지 로그는 7~30일 보존</p>
      </li>
      <li>
        <p>폴더를 <code class="language-plaintext highlighter-rouge">타입/연도/</code>로 <strong>mv</strong></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">index.csv</code> 상태 <code class="language-plaintext highlighter-rouge">done</code> 업데이트</p>
      </li>
    </ol>
  </li>
</ul>

<h3 id="b-archive웜--콜드">B) “Archive”(웜 → 콜드)</h3>

<ul>
  <li>
    <p>90일 지난 <code class="language-plaintext highlighter-rouge">done</code> → <code class="language-plaintext highlighter-rouge">99_Archive/25_Jobs/연도/</code>로 이동</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">70_Exports</code>엔 최종본 링크 또는 복사</p>
  </li>
</ul>

<h3 id="c-thin-logs">C) “Thin Logs”</h3>

<ul>
  <li>
    <p>30일 지난 <code class="language-plaintext highlighter-rouge">*.log</code>는 <code class="language-plaintext highlighter-rouge">gzip</code></p>
  </li>
  <li>
    <p>대용량 <code class="language-plaintext highlighter-rouge">*.csv</code> 중간 산출은 해시만 남기고 삭제 가능</p>
  </li>
</ul>

<h3 id="d-top-n-active-rule">D) “Top-N Active Rule”</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">_active/</code>가 12개 초과 시 today에 경고: <strong>가장 오래된 3개</strong> 를 Warm로 이동</li>
</ul>

<blockquote>
  <p>원하면 위 4개를 묶은 <strong>주간 스윕 스크립트</strong> 도 내줄 수 있어요(쉘/PS/tcsh 버전).</p>
</blockquote>

<hr />

<h1 id="5-선택-대용량-데이터-분리">5) (선택) 대용량 데이터 분리</h1>

<p>대용량 원천/중간 데이터가 많은 편이면 아래처럼 분리하면 Jobs가 가벼워집니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Work/
  26_Data/
    raw/&lt;dataset or <span class="nb">source</span><span class="o">&gt;</span>/...
    cache/&lt;tool or proj&gt;/...
</code></pre></div></div>

<ul>
  <li>
    <p>Job의 <code class="language-plaintext highlighter-rouge">02_Input/raw</code>에는 <strong>심볼릭 링크</strong> 또는 <strong>경로만</strong> 두기</p>
  </li>
  <li>
    <p>데이터 버전 기록은 Job의 <code class="language-plaintext highlighter-rouge">03_Config/params.yml</code>에 해시/버전/경로로 남김</p>
  </li>
</ul>

<hr />

<h1 id="6-콘솔에서-빠르게-찾기열기-예시-스니펫">6) 콘솔에서 빠르게 찾기/열기 (예시 스니펫)</h1>

<h3 id="bashzsh-타입별상태별-리스트">Bash/Zsh: 타입별/상태별 리스트</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jobs-find<span class="o">()</span> <span class="o">{</span> find <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/25_Jobs/</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">_active</span><span class="k">}</span><span class="s2">"</span> <span class="nt">-maxdepth</span> 2 <span class="nt">-type</span> d <span class="nt">-name</span> <span class="s2">"*-20*"</span> | <span class="nb">sort</span><span class="p">;</span> <span class="o">}</span>
jobs-open<span class="o">()</span> <span class="o">{</span> <span class="nb">cd</span> <span class="s2">"</span><span class="si">$(</span>jobs-find <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | fzf<span class="si">)</span><span class="s2">"</span> <span class="o">||</span> <span class="k">return</span><span class="p">;</span> <span class="o">}</span>
<span class="c"># 사용: jobs-open _active  /  jobs-open BUG/2025</span>
</code></pre></div></div>

<h3 id="powershell-2">PowerShell:</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">function</span><span class="w"> </span><span class="nf">JobsOpen</span><span class="p">(</span><span class="nv">$path</span><span class="o">=</span><span class="s2">"</span><span class="bp">$_</span><span class="s2">active"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$root</span><span class="o">=</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\25_Jobs\</span><span class="nv">$path</span><span class="s2">"</span><span class="w">
  </span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nv">$root</span><span class="w"> </span><span class="nt">-Recurse</span><span class="w"> </span><span class="nt">-Depth</span><span class="w"> </span><span class="nx">2</span><span class="w"> </span><span class="nt">-Directory</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-GridView</span><span class="w"> </span><span class="nt">-PassThru</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Location</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><em>(tcsh 버전도 원하면 줄게요.)</em></p>

<hr />

<h1 id="7-템플릿은-한-곳에만">7) 템플릿은 한 곳에만</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs/_templates/</code> 에 <strong>JOB/BUG/SMOKE/LAB/EX/REL</strong> 스켈레톤 6개만 유지</p>
  </li>
  <li>
    <p>새 작업은 항상 여기서 <strong>복제</strong> → 템플릿 중복을 없애고 한 번만 관리</p>
  </li>
</ul>

<hr />

<h1 id="8-today런처와의-연동-가볍게">8) Today/런처와의 연동 (가볍게)</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">_active/</code>만 <strong>런처 대상</strong> 에 포함 → 완료와 동시에 자동 제외</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">work-run</code> 자동 탐색 러너를 쓰면 <code class="language-plaintext highlighter-rouge">_active/**/04_Run/*.sh|ps1</code>만 우선 순위로 스캔</p>
  </li>
</ul>

<hr />

<h2 id="오늘-할-일3분-셋업">오늘 할 일(3분 셋업)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">25_Jobs</code> 안에 <strong><code class="language-plaintext highlighter-rouge">_active/</code>, <code class="language-plaintext highlighter-rouge">_templates/</code>, <code class="language-plaintext highlighter-rouge">JOB/2025</code>, <code class="language-plaintext highlighter-rouge">BUG/2025</code>, <code class="language-plaintext highlighter-rouge">SMOKE/2025</code>, <code class="language-plaintext highlighter-rouge">LAB/2025</code>, <code class="language-plaintext highlighter-rouge">EX/2025</code>, <code class="language-plaintext highlighter-rouge">REL/2025</code></strong> 만들기</p>
  </li>
  <li>
    <p>진행 중 Job을 전부 <code class="language-plaintext highlighter-rouge">_active/</code>로 옮기기(12개 이하로)</p>
  </li>
  <li>
    <p>완료된 것들은 타입/연도 폴더로 정리</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">index.csv</code> 초안 만들어 상단 10개만 우선 채우기</p>
  </li>
</ol>

<hr />

<h3 id="요약-2">요약</h3>

<ul>
  <li>
    <p><strong>모든 새 작업은<code class="language-plaintext highlighter-rouge">_active/</code>에서 시작 → 끝나면 타입/연도로 이동 → 오래되면 99_Archive.</strong></p>
  </li>
  <li>
    <p>템플릿은 <strong>한 군데</strong>(<code class="language-plaintext highlighter-rouge">_templates/</code>)만.</p>
  </li>
  <li>
    <p>(원하면) <strong>26_Data</strong> 로 대용량 분리.</p>
  </li>
  <li>
    <p>주간 스윕 스크립트/자동 탐색 러너로 <strong>손 가는 정리 작업 0에 가깝게</strong>.</p>
  </li>
</ul>

<p>필요하면 위 구조로 <strong>폴더/인덱스/스윕 스크립트 세트</strong> 를 바로 만들어 드릴게—쓰는 셸(bash/zsh/PowerShell/tcsh)만 알려줘!</p>

<p class="chat--user">

DB 같은 데이터셋들을 저장하고 싶을 땐 어디에 해야할까?

</p>

<p>좋은 질문! <strong>DB 같은 데이터셋</strong> 은 코드/산출과 분리해서 <strong>전용 루트</strong> 에 보관하는 게 최고예요.<br />
내역 추적·복구·용량 관리가 쉬워지고, 25_Jobs도 가벼워집니다.</p>

<hr />

<h1 id="추천-위치-work26_data-데이터-전용-루트">추천 위치: <code class="language-plaintext highlighter-rouge">Work/26_Data/</code> (데이터 전용 루트)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php-template

26_Data/                                   ← 데이터셋 중앙 저장소
├─ registry/                               ← 카탈로그(메타데이터)
│  ├─ catalog.csv
│  └─ README.md
├─ raw/                                    ← 원본(불변) 스냅샷/덤프
│  ├─ db/
│  │  ├─ postgres/&lt;db_name&gt;/snapshots/YYYY/&lt;TS&gt;/  ← .dump(.gz) or .sql.gz
│  │  │  ├─ dump.sql.gz
│  │  │  ├─ SHA256SUMS
│  │  │  └─ manifest.yml                   ← 출처/버전/테이블/PII/라이선스 등
│  │  └─ mysql/&lt;db_name&gt;/snapshots/...
│  └─ files/&lt;source&gt;/&lt;dataset&gt;/&lt;YYYY-MM-DD&gt;/  ← CSV/JSON/ZIP 등 외부 파일 원본
├─ processed/                              ← 정제/정규화/파케이(Parquet) 등 2차 산출
│  └─ &lt;dataset&gt;/&lt;version&gt;/
├─ samples/                                ← 예제/테스트용 소용량 서브셋
│  └─ &lt;dataset&gt;/&lt;version&gt;/
├─ cache/                                  ← 일시 캐시(삭제 가능)
│  ├─ project/&lt;PRJ-slug&gt;/
│  └─ job/&lt;JOB-code&gt;/
└─ schemas/                                ← DDL/스키마(JSON/SQL)
   └─ &lt;engine&gt;/&lt;db_name&gt;/
</code></pre></div></div>

<blockquote>
  <p><strong>원칙</strong></p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">raw/</code>는 <strong>불변(immutable)</strong> 로 취급: 덮어쓰지 말고 <strong>스냅샷을 추가</strong> 만 합니다.</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">processed/</code>는 파생 데이터(정제/집계), <code class="language-plaintext highlighter-rouge">samples/</code>는 작은 학습/테스트셋.</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">cache/</code>는 언제든 지워도 되는 중간물.</p>
    </li>
    <li>
      <p>큰 원본은 <strong>여기</strong> 에 두고, <strong>Job/Project에서는 경로 참조나 심볼릭 링크</strong> 만 사용.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h2 id="db-덤프스냅샷-표준-네이밍">DB 덤프/스냅샷 표준 네이밍</h2>

<ul>
  <li>
    <p>디렉터리: <code class="language-plaintext highlighter-rouge">raw/db/&lt;engine&gt;/&lt;db_name&gt;/snapshots/&lt;YYYY&gt;/&lt;YYYYMMDD-HHMMSS&gt;/</code></p>
  </li>
  <li>
    <p>파일:</p>

    <ul>
      <li>
        <p>Postgres: <code class="language-plaintext highlighter-rouge">&lt;db_name&gt;_&lt;YYYYMMDD-HHMMSS&gt;.dump.gz</code> (pg_dump -Fc 후 gzip)</p>
      </li>
      <li>
        <p>MySQL: <code class="language-plaintext highlighter-rouge">&lt;db_name&gt;_&lt;YYYYMMDD-HHMMSS&gt;.sql.gz</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p>무결성: <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> (여러 파일이면 모두 기록)</p>
  </li>
  <li>
    <p>메타: <code class="language-plaintext highlighter-rouge">manifest.yml</code> 예시
```yaml
dataset: postgres/salesdb
snapshot: 2025-08-26T10-20-00
source: prod-rds
pii_level: medium          # none/low/medium/high
license: internal
tables:</p>
    <ul>
      <li>customers: {rows: 120342}</li>
      <li>orders: {rows: 502113}
checksum:
  dump.sql.gz: "ab12…ef"
restore:
  engine: postgres
  target_db: salesdb_local
```</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="26_data-카탈로그인덱스-예시">26_Data 카탈로그(인덱스) 예시</h2>

<p><code class="language-plaintext highlighter-rouge">26_Data/registry/catalog.csv</code></p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kind</span><span class="p">,</span><span class="n">engine</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">version_or_ts</span><span class="p">,</span><span class="n">tags</span><span class="p">,</span><span class="n">path</span><span class="p">,</span><span class="n">pii</span><span class="p">,</span><span class="n">notes</span>
<span class="n">db</span><span class="p">,</span><span class="n">postgres</span><span class="p">,</span><span class="n">salesdb</span><span class="p">,</span><span class="mi">2025</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">26</span><span class="kt">T10</span><span class="o">-</span><span class="mi">20</span><span class="o">-</span><span class="mo">00</span><span class="p">,</span><span class="s">"prod,snapshot"</span><span class="p">,</span><span class="n">raw</span><span class="sr">/db/postgres/salesdb/snapshots/2025/</span><span class="mi">20250826</span><span class="o">-</span><span class="mi">102000</span><span class="p">,</span><span class="n">medium</span><span class="p">,</span><span class="s">"month-end"</span>
<span class="n">files</span><span class="p">,</span><span class="n">ext</span><span class="p">,</span><span class="n">ad_events</span><span class="p">,</span><span class="mi">2025</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">01</span><span class="p">,</span><span class="s">"ads,csv"</span><span class="p">,</span><span class="n">raw</span><span class="sr">/files/ad_platform/ad_events/</span><span class="mi">2025</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mo">01</span><span class="p">,</span><span class="n">low</span><span class="p">,</span><span class="s">"export via API"</span>
</code></pre></div></div>

<hr />

<h1 id="워크플로-db-기준-postgres-예시">워크플로 (DB 기준, Postgres 예시)</h1>

<h2 id="1-스냅샷덤프-만들기--26_data에-보관">1) 스냅샷(덤프) 만들기 → 26_Data에 보관</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 예: Postgres</span>
<span class="nv">TS</span><span class="o">=</span><span class="si">$(</span><span class="nb">date</span> +%Y%m%d-%H%M%S<span class="si">)</span>
<span class="nv">BASE</span><span class="o">=</span>~/Work/26_Data/raw/db/postgres/salesdb/snapshots/<span class="si">$(</span><span class="nb">date</span> +%Y<span class="si">)</span>
<span class="nv">DEST</span><span class="o">=</span><span class="nv">$BASE</span>/<span class="nv">$TS</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">"</span>
pg_dump <span class="nt">-Fc</span> <span class="s2">"postgresql://user:pass@host:5432/salesdb"</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/dump.dump"</span>
<span class="nb">gzip</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/dump.dump"</span>
<span class="nb">sha256sum</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/dump.dump.gz"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/SHA256SUMS"</span>
<span class="c"># manifest.yml 작성(템플릿 복사 후 수정)</span>
</code></pre></div></div>

<blockquote>
  <p><strong>MySQL</strong> : <code class="language-plaintext highlighter-rouge">mysqldump -u user -p --databases salesdb | gzip &gt; "$DEST/dump.sql.gz"</code></p>
</blockquote>

<ul>
  <li><strong>자격증명</strong> 은 <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets/.env-db.local</code> 같은 곳에 두고, 스크립트는 <strong>환경변수 참조</strong> 만 하세요(비밀 직접 기록 금지).</li>
</ul>

<h2 id="2-로컬-복원실험job용">2) 로컬 복원(실험/Job용)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Postgres</span>
createdb salesdb_local
<span class="nb">gunzip</span> <span class="nt">-c</span> <span class="s2">"</span><span class="nv">$DEST</span><span class="s2">/dump.dump.gz"</span> | pg_restore <span class="nt">-d</span> salesdb_local
<span class="c"># 또는: pg_restore -d salesdb_local "$DEST/dump.dump.gz"</span>
</code></pre></div></div>

<ul>
  <li>컨테이너 사용 시(권장): <code class="language-plaintext highlighter-rouge">85_Environments/docker/docker-compose.yml</code>에 DB 서비스 정의하고,<br />
<code class="language-plaintext highlighter-rouge">26_Data/db/postgres/_volumes/&lt;name&gt;:/var/lib/postgresql/data</code> 볼륨으로 붙입니다.</li>
</ul>

<h2 id="3-jobproject에서-쓰기-링크-또는-경로-참조">3) Job/Project에서 쓰기 (링크 또는 경로 참조)</h2>

<ul>
  <li><strong>링크(맥/리눅스)</strong> :
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> ~/Work/26_Data/raw/db/postgres/salesdb/snapshots/2025/20250826-102000 <span class="se">\</span>
      ~/Work/25_Jobs/JOB-2025-041_report/02_Input/raw/salesdb_20250826
</code></pre></div>    </div>
  </li>
  <li><strong>경로 설정</strong> : <code class="language-plaintext highlighter-rouge">25_Jobs/.../03_Config/params.yml</code>에 기록
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">inputs</span><span class="pi">:</span>
  <span class="na">salesdb_snapshot</span><span class="pi">:</span> <span class="s2">"</span><span class="s">../../../26_Data/raw/db/postgres/salesdb/snapshots/2025/20250826-102000"</span>
</code></pre></div>    </div>
  </li>
  <li><strong>크레덴셜</strong> : <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets/.env-db.local</code>에, Job 스크립트는 <code class="language-plaintext highlighter-rouge">source</code>만.</li>
</ul>

<h2 id="4-샘플서브셋-만들기">4) 샘플/서브셋 만들기</h2>

<ul>
  <li>테이블 일부만 CSV로 덤프:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>psql salesdb_local <span class="nt">-c</span> <span class="s2">"</span><span class="se">\c</span><span class="s2">opy (SELECT * FROM customers LIMIT 1000) TO 'customers_sample.csv' CSV HEADER"</span>
<span class="nb">mv </span>customers_sample.csv ~/Work/26_Data/samples/salesdb/v2025.08/
</code></pre></div>    </div>
  </li>
  <li>반복 쓰면 스크립트화 → <code class="language-plaintext highlighter-rouge">80_Tools/scripts/make_sample_salesdb.sh</code>로 <strong>승격</strong>.</li>
</ul>

<h2 id="5-정제정규화-파이프라인">5) 정제/정규화 파이프라인</h2>

<ul>
  <li>
    <p>ETL/정제 결과는 <code class="language-plaintext highlighter-rouge">processed/&lt;dataset&gt;/&lt;version&gt;/...</code>에 저장(Parquet 권장).</p>
  </li>
  <li>
    <p>파라미터/코드/환경은 해당 Job/Project 쪽에 남기고, <strong>결과물만</strong> processed에.</p>
  </li>
</ul>

<hr />

<h1 id="보안거버넌스-체크리스트">보안/거버넌스 체크리스트</h1>

<ul>
  <li>
    <p><strong>PII/민감도 태깅</strong> : <code class="language-plaintext highlighter-rouge">manifest.yml</code>에 <code class="language-plaintext highlighter-rouge">pii_level</code> 필수.</p>
  </li>
  <li><strong>접근권한</strong> : 고(高) 민감도 스냅샷은 디스크 암호화 또는 gpg로 파일 단위 암호화:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gpg <span class="nt">-c</span> dump.dump.gz   <span class="c"># 복호화는 gpg dump.dump.gz.gpg</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>보존 정책</strong> : <code class="language-plaintext highlighter-rouge">raw/</code>는 N개월 보관(예: 12개월); <code class="language-plaintext highlighter-rouge">cache/</code>는 7~30일 후 정리.</p>
  </li>
  <li><strong>.gitignore</strong> : Work 전체를 git에 올리지 않더라도, <code class="language-plaintext highlighter-rouge">26_Data</code> 루트에 보호용 <code class="language-plaintext highlighter-rouge">.gitignore</code> 권장:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>diff
    
*
!registry/
!registry/catalog.csv
!.gitignore
</code></pre></div>    </div>
  </li>
</ul>

<p>(의도치 않은 업로드 방지)</p>

<hr />

<h1 id="25_jobs가-가벼워지는-이유">25_Jobs가 가벼워지는 이유</h1>

<ul>
  <li>
    <p><strong>대용량은 전부<code class="language-plaintext highlighter-rouge">26_Data</code></strong>: Job에는 <strong>링크/경로/manifest만</strong>.</p>
  </li>
  <li>
    <p>완료된 Job을 아카이브해도 데이터는 중앙(<code class="language-plaintext highlighter-rouge">26_Data</code>)에 남아 <strong>중복 저장 없음</strong>.</p>
  </li>
</ul>

<hr />

<h1 id="today런처-연결선택">Today/런처 연결(선택)</h1>

<p><code class="language-plaintext highlighter-rouge">10_Today/shortcuts.list</code> 또는 <code class="language-plaintext highlighter-rouge">work-run</code> 자동 러너에서 스냅샷·복원 스크립트를 호출:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pgsql

Snapshot salesdb | 26_Data/raw/db/postgres/salesdb/snapshots | ./../../../../80_Tools/scripts/pg_snapshot_salesdb.sh
Restore salesdb  | 26_Data/raw/db/postgres/salesdb/snapshots/2025/20250826-102000 | ./../../../../80_Tools/scripts/pg_restore_local.sh
</code></pre></div></div>

<hr />

<h2 id="요약-3">요약</h2>

<ul>
  <li>
    <p><strong>데이터는<code class="language-plaintext highlighter-rouge">26_Data</code>로 일원화</strong>: <code class="language-plaintext highlighter-rouge">raw/</code>(불변) · <code class="language-plaintext highlighter-rouge">processed/</code> · <code class="language-plaintext highlighter-rouge">samples/</code> · <code class="language-plaintext highlighter-rouge">cache/</code> · <code class="language-plaintext highlighter-rouge">schemas/</code> · <code class="language-plaintext highlighter-rouge">registry/</code>.</p>
  </li>
  <li>
    <p><strong>DB 스냅샷은 엔진/DB/연도/타임스탬프</strong> 체계로 보관 + <code class="language-plaintext highlighter-rouge">manifest.yml</code> + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>.</p>
  </li>
  <li>
    <p><strong>Job/Project는 경로 참조/심링크</strong> 만 사용 → 25_Jobs 비대화 방지.</p>
  </li>
  <li>
    <p><strong>비밀/크레덴셜은<code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets</code></strong>, 설정 표준은 <code class="language-plaintext highlighter-rouge">32_SharedConfigs</code>, 개인 오버라이드는 <code class="language-plaintext highlighter-rouge">90_PersonalConfigs</code>.</p>
  </li>
</ul>

<p>원하면 Postgres/MySQL 기준으로 <strong>스냅샷/복원 스크립트 두 개(리눅스·PowerShell·tcsh)</strong>와 <code class="language-plaintext highlighter-rouge">manifest.yml</code> 템플릿, 그리고 <code class="language-plaintext highlighter-rouge">registry/catalog.csv</code> 초기 파일까지 <strong>실제 파일</strong> 로 만들어줄게.</p>

<p class="chat--user">

그런 db는 아니고 dataset (input/output 등)을 저장하려고

</p>

<p>굿! <strong>DB 덤프가 아니라 ‘데이터셋(입력/출력)’</strong>을 보관하려는 거라면, 코드는 그대로 두고 <strong>데이터만 중앙화</strong> 하면 깔끔해요. 아래처럼 정리하면 됩니다.</p>

<hr />

<h1 id="한-줄-요약">한 줄 요약</h1>

<ul>
  <li>
    <p><strong>중앙 저장소</strong> : <code class="language-plaintext highlighter-rouge">Work/26_Data/</code></p>
  </li>
  <li>
    <p><strong>입력 데이터셋</strong> : <code class="language-plaintext highlighter-rouge">26_Data/datasets/…</code></p>
  </li>
  <li>
    <p><strong>가공/출력 데이터셋</strong>(여러 Job에서 재사용할 가치가 있는 결과): <code class="language-plaintext highlighter-rouge">26_Data/derived/…</code></p>
  </li>
  <li>
    <p><strong>Job/Project</strong> 에서는 <strong>경로 참조 또는 심볼릭 링크만 사용</strong> (복사 금지)</p>
  </li>
</ul>

<hr />

<h1 id="폴더-구조권장">폴더 구조(권장)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="mi">26</span><span class="n">_Data</span><span class="o">/</span>                                  <span class="err">←</span> <span class="n">데이터</span> <span class="n">전용</span> <span class="n">루트</span>
<span class="err">├─</span> <span class="n">registry</span><span class="o">/</span>                               <span class="err">←</span> <span class="n">카탈로그</span><span class="o">/</span><span class="n">색인</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">catalog</span><span class="o">.</span><span class="n">csv</span>                          <span class="err">←</span> <span class="n">데이터셋</span> <span class="n">목록</span><span class="sr">/버전/</span><span class="n">경로</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span>                            <span class="err">←</span> <span class="n">등록</span> <span class="n">규칙</span>
<span class="err">├─</span> <span class="n">datasets</span><span class="o">/</span>                               <span class="err">←</span> <span class="err">“</span><span class="n">입력</span><span class="err">”</span> <span class="nf">데이터셋</span><span class="p">(</span><span class="n">원본</span><span class="o">/</span><span class="n">정제</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="o">&lt;</span><span class="n">dataset_name</span><span class="o">&gt;/</span>
<span class="err">│</span>     <span class="err">└─</span> <span class="n">vYYYY</span><span class="o">.</span><span class="kt">MMDD</span><span class="o">/</span>                       <span class="err">←</span> <span class="n">날짜</span> <span class="n">버전</span> <span class="nf">추천</span><span class="p">(</span><span class="n">또는</span> <span class="n">semver</span><span class="p">)</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">raw</span><span class="o">/</span>                           <span class="err">←</span> <span class="n">주로</span> <span class="n">외부</span> <span class="nf">원본</span><span class="p">(</span><span class="n">가급적</span> <span class="n">불변</span><span class="p">)</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">interim</span><span class="o">/</span>                       <span class="err">←</span> <span class="n">일시</span> <span class="nf">정제</span><span class="p">(</span><span class="n">중간물</span><span class="p">)</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">processed</span><span class="o">/</span>                     <span class="err">←</span> <span class="n">분석</span><span class="o">/</span><span class="n">모델에</span> <span class="n">투입</span> <span class="n">가능한</span> <span class="n">정제본</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">samples</span><span class="o">/</span>                       <span class="err">←</span> <span class="n">소용량</span> <span class="nf">서브셋</span><span class="p">(</span><span class="n">테스트</span><span class="o">/</span><span class="n">예제</span><span class="p">)</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">docs</span><span class="o">/</span>                          <span class="err">←</span> <span class="kt">README</span><span class="p">,</span> <span class="n">dataset_card</span><span class="o">.</span><span class="n">md</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">manifest</span><span class="o">.</span><span class="n">yml</span>                   <span class="err">←</span> <span class="n">출처</span><span class="sr">/라이선스/</span><span class="n">체크섬</span> <span class="n">등</span> <span class="n">메타</span>
<span class="err">│</span>        <span class="err">└─</span> <span class="kt">SHA256SUMS</span>                     <span class="err">←</span> <span class="n">무결성</span>
<span class="err">├─</span> <span class="n">derived</span><span class="o">/</span>                                <span class="err">←</span> <span class="err">“</span><span class="n">출력</span><span class="o">/</span><span class="n">가공</span> <span class="n">결과</span><span class="err">”</span> <span class="nf">데이터셋</span><span class="p">(</span><span class="n">재사용</span> <span class="n">가치</span> <span class="n">있음</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="o">&lt;</span><span class="n">artifact_name</span><span class="o">&gt;/</span>
<span class="err">│</span>     <span class="err">└─</span> <span class="n">vYYYY</span><span class="o">.</span><span class="kt">MMDD</span><span class="o">/</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">data</span><span class="o">/</span>                          <span class="err">←</span> <span class="nf">결과물</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">parquet</span><span class="sr">/csv/</span><span class="n">images</span><span class="p">)</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">metrics</span><span class="o">/</span>                       <span class="err">←</span> <span class="n">점수</span><span class="sr">/리포트/</span><span class="n">지표</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">docs</span><span class="o">/</span>
<span class="err">│</span>        <span class="err">├─</span> <span class="n">manifest</span><span class="o">.</span><span class="n">yml</span>
<span class="err">│</span>        <span class="err">└─</span> <span class="kt">SHA256SUMS</span>
<span class="err">└─</span> <span class="n">cache</span><span class="o">/</span>                                  <span class="err">←</span> <span class="n">언제</span> <span class="n">지워도</span> <span class="n">되는</span> <span class="nf">캐시</span><span class="p">(</span><span class="n">속도용</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p><strong>의미</strong></p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">datasets/</code> = 입력 측 “공급원” 저장소</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">derived/</code> = 여러 Job에서 재사용할 <strong>결과물</strong> 저장소(“출력 데이터셋” 승격본)</p>
    </li>
    <li>
      <p>Job 안의 <code class="language-plaintext highlighter-rouge">06_Export</code>는 <strong>전달본</strong> 이고, 장기 재사용 가치가 생기면 <code class="language-plaintext highlighter-rouge">derived/</code>로 승격</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="네이밍--메타짧게">네이밍 &amp; 메타(짧게)</h1>

<ul>
  <li>
    <p><strong>버전</strong> : <code class="language-plaintext highlighter-rouge">vYYYY.MMDD</code> (예: <code class="language-plaintext highlighter-rouge">v2025.0825</code>) 권장. 바꾸면 <code class="language-plaintext highlighter-rouge">manifest.yml</code>에 이유 기록.</p>
  </li>
  <li>
    <p><strong>파일 형식</strong> : 가능하면 <strong>Parquet</strong>(열 지향, 스키마/압축 유리), 그 외 CSV/JSON.</p>
  </li>
  <li><strong>manifest.yml 예시</strong>
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">ad_events</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">v2025.0826</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">dataset</span>            <span class="c1"># or derived</span>
<span class="na">license</span><span class="pi">:</span> <span class="s">internal</span>
<span class="na">source</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ad_platform</span><span class="nv"> </span><span class="s">export</span><span class="nv"> </span><span class="s">API"</span>
<span class="na">schema</span><span class="pi">:</span> <span class="pi">{</span><span class="nv">rows</span><span class="pi">:</span> <span class="nv">5_021_113</span><span class="pi">,</span> <span class="nv">format</span><span class="pi">:</span> <span class="nv">parquet</span><span class="pi">}</span>
<span class="na">pii_level</span><span class="pi">:</span> <span class="s">low</span>           <span class="c1"># none/low/medium/high</span>
<span class="na">checksum</span><span class="pi">:</span>
  <span class="na">processed/events.parquet</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ab12...ef"</span>
<span class="na">notes</span><span class="pi">:</span> <span class="s2">"</span><span class="s">tz</span><span class="nv"> </span><span class="s">normalized</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">UTC,</span><span class="nv"> </span><span class="s">invalid</span><span class="nv"> </span><span class="s">rows</span><span class="nv"> </span><span class="s">dropped"</span>
</code></pre></div>    </div>
  </li>
  <li><strong>dataset_card.md</strong> : 용도/전처리/열 설명/예시 쿼리 1~2개만.</li>
</ul>

<hr />

<h1 id="jobproject에서-쓰는-법복사-금지-링크경로-참조">Job/Project에서 쓰는 법(복사 금지! 링크/경로 참조)</h1>

<h3 id="심볼릭-링크맥리눅스">심볼릭 링크(맥/리눅스)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ln</span> <span class="nt">-s</span> ~/Work/26_Data/datasets/ad_events/v2025.0826/processed <span class="se">\</span>
      ~/Work/25_Jobs/JOB-2025-041_report/02_Input/raw/ad_events
</code></pre></div></div>

<h3 id="powershell윈도우-디렉터리-링크">PowerShell(윈도우, 디렉터리 링크)</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="err">^</span><span class="w">
  </span><span class="s2">"%USERPROFILE%\Work\25_Jobs\JOB-2025-041_report\02_Input\raw\ad_events"</span><span class="w"> </span><span class="err">^</span><span class="w">
  </span><span class="s2">"%USERPROFILE%\Work\26_Data\datasets\ad_events\v2025.0826\processed"</span><span class="w">
</span></code></pre></div></div>

<h3 id="job-설정에-경로-기입">Job 설정에 경로 기입</h3>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 25_Jobs/.../03_Config/params.yml</span>
<span class="na">inputs</span><span class="pi">:</span>
  <span class="na">ad_events_dir</span><span class="pi">:</span> <span class="s2">"</span><span class="s">../../../26_Data/datasets/ad_events/v2025.0826/processed"</span>
</code></pre></div></div>

<hr />

<h1 id="워크플로우간단">워크플로우(간단)</h1>

<h2 id="a-새-입력-데이터셋-추가">A) 새 “입력” 데이터셋 추가</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">26_Data/datasets/&lt;name&gt;/vYYYY.MMDD/</code> 생성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">raw/</code>에 원본 배치 → 필요 시 <code class="language-plaintext highlighter-rouge">interim/</code>→<code class="language-plaintext highlighter-rouge">processed/</code> 정제</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">manifest.yml</code>/<code class="language-plaintext highlighter-rouge">dataset_card.md</code>/<code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 작성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">registry/catalog.csv</code>에 한 줄 등록</p>
  </li>
</ol>

<h2 id="b-job에서-사용">B) Job에서 사용</h2>

<ol>
  <li>
    <p>심링크 or <code class="language-plaintext highlighter-rouge">params.yml</code>에 절대/상대 경로 지정</p>
  </li>
  <li>
    <p>실행 시 <strong>입력버전</strong> 을 매니페스트에 기록(재현성)</p>
  </li>
</ol>

<h2 id="c-job-출력을-재사용-데이터셋으로-승격">C) Job “출력”을 재사용 데이터셋으로 승격</h2>

<ol>
  <li>
    <p>Job의 <code class="language-plaintext highlighter-rouge">06_Export</code> 결과 중 <strong>일반화된 산출물</strong> 만 추려</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">26_Data/derived/&lt;artifact&gt;/vYYYY.MMDD/</code>에 배치</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">manifest.yml</code>과 지표(<code class="language-plaintext highlighter-rouge">metrics/</code>) 작성 → <code class="language-plaintext highlighter-rouge">catalog.csv</code> 등록</p>
  </li>
</ol>

<h2 id="d-정리청소">D) 정리/청소</h2>

<ul>
  <li>
    <p>60~90일 지난 <code class="language-plaintext highlighter-rouge">interim/</code>, 대용량 CSV는 <strong>압축 또는 삭제</strong>(hash/로그만 보존)</p>
  </li>
  <li>
    <p><strong>cache/</strong>는 언제든 삭제 가능</p>
  </li>
</ul>

<hr />

<h1 id="do--dont-1">Do / Don’t</h1>

<ul>
  <li>
    <p>✅ <strong>중앙화</strong> : 입력/출력 데이터셋은 <strong>26_Data</strong> 에만, Job/Project는 링크/경로만</p>
  </li>
  <li>
    <p>✅ <strong>버전 고정</strong> : Job 매니페스트에 <strong>dataset 버전</strong> 을 박아두기</p>
  </li>
  <li>
    <p>✅ <strong>작은 샘플</strong> : <code class="language-plaintext highlighter-rouge">samples/</code>를 만들어 테스트/예제에 활용</p>
  </li>
  <li>
    <p>❌ <strong>복사본 남기기</strong> : Job 안에 원본 데이터를 복제해서 쌓지 않기</p>
  </li>
  <li>
    <p>❌ <strong>비밀 넣기</strong> : 자격증명/토큰은 <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets/</code>에만</p>
  </li>
</ul>

<hr />

<p>원하면 <strong>초기 스캐폴드(폴더/manifest 템플릿/csv 카탈로그)</strong>와<br />
<code class="language-plaintext highlighter-rouge">symlink</code>/<code class="language-plaintext highlighter-rouge">catalog 등록</code>을 자동으로 해주는 간단 스크립트(bash·PowerShell·tcsh)도 바로 만들어 줄게.</p>

<p class="chat--user">

번호는 26번 괜찮아?

</p>

<p>짧은 결론: <strong>네, 26번 아주 괜찮아요.</strong><br />
지금 쓰는 번호 체계(20=Projects, 25=Jobs, 30대=운영/학습, 40=레퍼런스…)에서 <strong>데이터셋은 Jobs보다 살짝 뒤</strong> 에 두면 “코드→실행→데이터 자산” 흐름이 자연스럽고, 26은 그 목적에 딱 맞습니다.</p>

<hr />

<h2 id="왜-26인가-step-by-step">왜 26인가 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>시각적 그룹화</strong> :<br />
<code class="language-plaintext highlighter-rouge">20_Projects → 25_Jobs → 26_(Data|Datasets) → 30_Areas</code><br />
= 코드 → 실행 → <strong>데이터 자산(공유 입력/출력)</strong> → 장기 운영 순서로 정렬.</p>
  </li>
  <li>
    <p><strong>근접성</strong> :<br />
Job이 쓰는 입력/출력 경로를 <strong>한 단계 옆(25↔26)</strong> 에 두면 경로 참조/심볼릭 링크가 짧고 관리가 쉬움.</p>
  </li>
  <li>
    <p><strong>확장 여지</strong> :<br />
27~29 비워둬서, 나중에 <code class="language-plaintext highlighter-rouge">27_ModelStore</code>, <code class="language-plaintext highlighter-rouge">28_FeatureStore</code> 같은 확장도 자연스럽게 끼워 넣기 가능.</p>
  </li>
</ol>

<hr />

<h2 id="이름은-26_data-vs-26_datasets-중-택1">이름은 <code class="language-plaintext highlighter-rouge">26_Data</code> vs <code class="language-plaintext highlighter-rouge">26_Datasets</code> 중 택1</h2>

<ul>
  <li>
    <p><strong>26_Datasets</strong> : “입력/출력 데이터셋”에 초점(당신 목적에 가장 명확)</p>
  </li>
  <li>
    <p><strong>26_Data</strong> : DB 덤프·원천 파일·캐시까지 <strong>넓게</strong> 포함할 때</p>
  </li>
</ul>

<blockquote>
  <p>지금 대화 맥락상 <strong><code class="language-plaintext highlighter-rouge">26_Datasets</code></strong> 추천. (원하면 <code class="language-plaintext highlighter-rouge">datasets/derived/cache/registry</code> 하위 그대로 유지)</p>
</blockquote>

<p>예시:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>26_Datasets/
  registry/         <span class="c"># 카탈로그</span>
  datasets/         <span class="c"># 입력 데이터셋(버전별: vYYYY.MMDD)</span>
  derived/          <span class="c"># 여러 Job에서 재사용할 출력 데이터셋(승격본)</span>
  cache/            <span class="c"># 삭제 가능 캐시</span>
</code></pre></div></div>

<hr />

<h2 id="이미-만들어-둔-구조와의-연결-규칙요약">이미 만들어 둔 구조와의 연결 규칙(요약)</h2>

<ul>
  <li>
    <p><strong>Job/Project에는 복사 금지</strong> → <strong>심볼릭 링크/경로만</strong> 참조</p>
  </li>
  <li>
    <p>Job 매니페스트에 <strong>dataset 버전</strong> 기록(재현성)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">06_Export</code>의 결과 중 “재사용 가치” 있는 건 <code class="language-plaintext highlighter-rouge">26_Datasets/derived</code>로 <strong>승격</strong></p>
  </li>
</ul>

<hr />

<h2 id="바꾸고-싶을-때안전-리네임">바꾸고 싶을 때(안전 리네임)</h2>

<p>bash/zsh:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work
<span class="nb">mv </span>26_Data 26_Datasets 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/26_Data/#/26_Datasets/#g'</span> 10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<p>PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\26_Data"</span><span class="w"> </span><span class="s2">"26_Datasets"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/26_Data/'</span><span class="p">,</span><span class="s1">'/26_Datasets/'</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="최종-추천-한-줄">최종 추천 한 줄</h2>

<ul>
  <li><strong>번호는 26 유지</strong> , 이름은 <strong><code class="language-plaintext highlighter-rouge">26_Datasets</code></strong>로 명확성↑ — 지금 쓰는 워크플로(25_Jobs, 75_Releases, 32_SharedConfigs, 90_PersonalConfigs)와도 정렬이 아주 잘 맞습니다.</li>
</ul>

<p class="chat--user">

전체 구조를 마지막으로 한 번 만들어줘(띄어쓰기 대신에 폴더 선을 이용해서 표현해줬으면 좋겠어, 폴더명은 영어, 설명은 한글로). 그리고 사용 시 주요 주의점도 밑에 써줘.

</p>

<p>아래 트리를 그대로 복붙해서 문서에 쓰면 돼요.<br />
(좌측은 <strong>폴더명(영문)</strong> , <code class="language-plaintext highlighter-rouge">-</code> 오른쪽은 <strong>설명(한글)</strong> 입니다. 하위 예시도 넣었어요.)</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span><span class="o">/</span>                                           <span class="o">-</span> <span class="mi">1</span><span class="n">인</span> <span class="n">개발용</span> <span class="n">작업</span> <span class="n">루트</span>
<span class="err">├─</span> <span class="mo">00</span><span class="n">_Inbox</span><span class="o">/</span>                                    <span class="o">-</span> <span class="n">급히</span> <span class="n">던져두는</span> <span class="nf">임시함</span><span class="p">(</span><span class="n">매일</span><span class="o">/</span><span class="n">주기적</span> <span class="n">비우기</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">10</span><span class="n">_Today</span><span class="o">/</span>                                    <span class="o">-</span> <span class="n">오늘</span> <span class="n">작업</span> <span class="nf">대시보드</span><span class="p">(</span><span class="n">콘솔</span> <span class="n">실행</span> <span class="n">출발점</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">shortcuts</span><span class="o">.</span><span class="n">list</span>                             <span class="o">-</span> <span class="n">today</span> <span class="n">런처가</span> <span class="n">읽는</span> <span class="s">"라벨 | 경로 | 명령"</span> <span class="n">목록</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">wrappers</span><span class="o">/</span>                                  <span class="o">-</span> <span class="n">파이프</span><span class="o">/</span><span class="n">복잡</span> <span class="n">인자용</span> <span class="n">임시</span> <span class="n">래퍼</span> <span class="nf">스크립트</span><span class="p">(</span><span class="n">단기</span> <span class="n">보관</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">20</span><span class="n">_Projects</span><span class="o">/</span>                                 <span class="o">-</span> <span class="nf">툴</span><span class="p">(</span><span class="n">파이썬</span> <span class="n">패키지</span><span class="p">)</span> <span class="nf">개발</span><span class="p">(</span><span class="n">코드</span> <span class="n">수명</span> <span class="n">중심</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="kt">PRJ</span><span class="o">-</span><span class="kt">YYYY</span><span class="o">-</span><span class="kt">NNN_name</span><span class="o">/</span>                         <span class="o">-</span> <span class="n">개별</span> <span class="nf">프로젝트</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="kt">PRJ</span><span class="o">-</span><span class="mi">2025</span><span class="o">-</span><span class="mo">001</span><span class="n">_sample_app</span><span class="p">)</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">src</span><span class="sr">/&lt;package_name&gt;/                     - 패키지 소스(예: sample_app/</span><span class="p">)</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">tests</span><span class="o">/</span>                                  <span class="o">-</span> <span class="n">pytest</span> <span class="n">테스트</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">scripts</span><span class="o">/</span>                                <span class="o">-</span> <span class="n">install</span><span class="sr">/run/build/lint/test 스크립트(.sh/</span><span class="o">.</span><span class="n">ps1</span><span class="p">)</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">examples</span><span class="sr">/{data,scripts,docs}/</span>           <span class="o">-</span> <span class="n">배포용</span> <span class="n">최소</span> <span class="n">실행</span> <span class="n">예제</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">issues</span><span class="sr">/BUG-YYYY-NNN/                    - 버그/</span><span class="n">개선</span> <span class="n">이슈</span> <span class="n">노트</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">docs</span><span class="o">/</span>                                   <span class="o">-</span> <span class="n">설계</span><span class="err">·</span><span class="kt">ADR</span><span class="err">·</span><span class="n">가이드</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="o">.</span><span class="n">devcontainer</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">개발</span> <span class="n">컨테이너</span> <span class="n">설정</span>
<span class="err">│</span>     <span class="err">└─</span> <span class="n">pyproject</span><span class="o">.</span><span class="n">toml</span><span class="p">,</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span><span class="p">,</span> <span class="o">.</span><span class="n">gitignore</span><span class="p">,</span> <span class="o">.</span><span class="n">editorconfig</span>
<span class="err">├─</span> <span class="mi">25</span><span class="n">_Jobs</span><span class="o">/</span>                                     <span class="o">-</span> <span class="err">“</span><span class="n">산출물</span> <span class="n">작업</span> <span class="n">단위</span><span class="err">”</span><span class="p">(</span><span class="n">프로세스</span> <span class="n">수명</span> <span class="n">중심</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">_active</span><span class="o">/</span>                                   <span class="o">-</span> <span class="n">진행</span> <span class="n">중</span> <span class="nf">작업</span><span class="p">(</span><span class="n">최대</span> <span class="mi">12</span><span class="n">개</span> <span class="n">유지</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">_templates</span><span class="o">/</span>                                <span class="o">-</span> <span class="n">복제용</span> <span class="nf">스캐폴드</span><span class="p">(</span><span class="kt">JOB</span><span class="sr">/BUG/SMOKE/LAB/EX/</span><span class="kt">REL</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="kt">JOB</span><span class="o">/</span>                                       <span class="o">-</span> <span class="n">일반</span> <span class="n">산출</span> <span class="nf">작업</span><span class="p">(</span><span class="n">연도별</span> <span class="n">보관</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">└─</span> <span class="mi">2025</span><span class="o">/</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="kt">BUG</span><span class="o">/</span>                                       <span class="o">-</span> <span class="n">배포</span> <span class="n">버그</span> <span class="n">재현</span><span class="sr">/증거/</span><span class="n">검증</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">└─</span> <span class="mi">2025</span><span class="o">/</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="kt">SMOKE</span><span class="o">/</span>                                     <span class="o">-</span> <span class="n">새</span> <span class="n">툴</span> <span class="n">스모크</span><span class="o">/</span><span class="n">feasibility</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">└─</span> <span class="mi">2025</span><span class="o">/</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="kt">LAB</span><span class="o">/</span>                                       <span class="o">-</span> <span class="n">재현형</span> <span class="n">교육</span> <span class="n">실습</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">└─</span> <span class="mi">2025</span><span class="o">/</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="kt">EX</span><span class="o">/</span>                                        <span class="o">-</span> <span class="n">배포</span> <span class="n">예제</span> <span class="n">패키징</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">└─</span> <span class="mi">2025</span><span class="o">/</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="kt">REL</span><span class="o">/</span>                                       <span class="o">-</span> <span class="n">릴리스</span> <span class="n">준비</span><span class="o">/</span><span class="nf">검증</span><span class="p">(</span><span class="kt">Job</span> <span class="n">형태</span><span class="p">)</span>
<span class="err">│</span>     <span class="err">└─</span> <span class="mi">2025</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">26</span><span class="n">_Datasets</span><span class="o">/</span>                                 <span class="o">-</span> <span class="n">데이터셋</span> <span class="n">중앙</span> <span class="nf">저장소</span><span class="p">(</span><span class="n">입력</span><span class="o">/</span><span class="n">출력</span> <span class="n">자산</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">registry</span><span class="o">/</span>                                   <span class="o">-</span> <span class="nf">카탈로그</span><span class="p">(</span><span class="n">색인</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">├─</span> <span class="n">catalog</span><span class="o">.</span><span class="n">csv</span>                              <span class="o">-</span> <span class="n">데이터셋</span> <span class="n">목록</span><span class="sr">/버전/</span><span class="n">경로</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">└─</span> <span class="kt">README</span><span class="o">.</span><span class="n">md</span>                                <span class="o">-</span> <span class="n">등록</span> <span class="n">규칙</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">datasets</span><span class="o">/</span>                                   <span class="o">-</span> <span class="err">“</span><span class="n">입력</span><span class="err">”</span> <span class="nf">데이터셋</span><span class="p">(</span><span class="n">원본</span><span class="o">/</span><span class="n">정제</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">└─</span> <span class="o">&lt;</span><span class="n">dataset_name</span><span class="o">&gt;/</span><span class="n">vYYYY</span><span class="o">.</span><span class="kt">MMDD</span><span class="o">/</span>               <span class="o">-</span> <span class="n">날짜</span> <span class="n">버전</span> <span class="nf">권장</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">v2025</span><span class="o">.</span><span class="mi">0826</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">raw</span><span class="o">/</span>                                  <span class="o">-</span> <span class="n">외부</span> <span class="nf">원본</span><span class="p">(</span><span class="n">불변</span> <span class="n">취급</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">interim</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">일시</span> <span class="nf">정제</span><span class="p">(</span><span class="n">중간물</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">processed</span><span class="o">/</span>                            <span class="o">-</span> <span class="n">분석</span><span class="o">/</span><span class="n">모델</span> <span class="n">투입용</span> <span class="n">정제본</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">samples</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">소용량</span> <span class="nf">서브셋</span><span class="p">(</span><span class="n">테스트</span><span class="o">/</span><span class="n">예제</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">docs</span><span class="o">/</span>                                 <span class="o">-</span> <span class="kt">README</span><span class="p">,</span> <span class="n">dataset_card</span><span class="o">.</span><span class="n">md</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">manifest</span><span class="o">.</span><span class="n">yml</span>                          <span class="o">-</span> <span class="n">출처</span><span class="sr">/스키마/체크섬/</span><span class="n">라이선스</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">└─</span> <span class="kt">SHA256SUMS</span>                            <span class="o">-</span> <span class="n">무결성</span> <span class="n">체크섬</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">derived</span><span class="o">/</span>                                    <span class="o">-</span> <span class="n">재사용</span> <span class="n">가치</span> <span class="n">있는</span> <span class="err">“</span><span class="n">출력</span><span class="err">”</span> <span class="nf">데이터셋</span><span class="p">(</span><span class="n">승격본</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>  <span class="err">└─</span> <span class="o">&lt;</span><span class="n">artifact_name</span><span class="o">&gt;/</span><span class="n">vYYYY</span><span class="o">.</span><span class="kt">MMDD</span><span class="o">/</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">data</span><span class="o">/</span>                                 <span class="o">-</span> <span class="nf">결과물</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">parquet</span><span class="sr">/csv/</span><span class="n">images</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">metrics</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">점수</span><span class="err">·</span><span class="n">지표</span><span class="err">·</span><span class="n">리포트</span>
<span class="err">│</span>  <span class="err">│</span>     <span class="err">├─</span> <span class="n">docs</span><span class="o">/</span><span class="p">,</span> <span class="n">manifest</span><span class="o">.</span><span class="n">yml</span><span class="p">,</span> <span class="kt">SHA256SUMS</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">cache</span><span class="o">/</span>                                      <span class="o">-</span> <span class="n">언제</span> <span class="n">지워도</span> <span class="n">되는</span> <span class="n">캐시</span>
<span class="err">├─</span> <span class="mi">30</span><span class="n">_Areas</span><span class="o">/</span>                                    <span class="o">-</span> <span class="n">장기</span> <span class="n">운영</span> <span class="nf">영역</span><span class="p">(</span><span class="n">지속</span> <span class="n">업무</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">worklog</span><span class="sr">/YYYY/YY-MM/DATE.md                 - 일일/</span><span class="n">주간</span> <span class="mi">5</span><span class="n">줄</span> <span class="n">로그</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">environments</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">공통</span> <span class="n">환경</span> <span class="nf">전략</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">파이썬</span> <span class="n">버전</span> <span class="n">정책</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">knowledge_base</span><span class="sr">/{tips,cheatsheets,howtos}/   - 축적 지식: 팁/치트시트/</span><span class="n">가이드</span>
<span class="err">├─</span> <span class="mi">31</span><span class="n">_Labs</span><span class="o">/</span>                                     <span class="o">-</span> <span class="nf">실험실</span><span class="p">(</span><span class="n">짧은</span> <span class="n">실습</span><span class="o">/</span><span class="n">프로토타입</span><span class="p">;</span> <span class="n">재현</span> <span class="n">불필요</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">jupyter</span><span class="o">/</span>                                   <span class="o">-</span> <span class="n">스크래치</span> <span class="nf">노트북</span><span class="p">(</span><span class="nv">예</span><span class="p">:</span> <span class="n">regex_scratch</span><span class="o">.</span><span class="n">ipynb</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">32</span><span class="n">_SharedConfigs</span><span class="o">/</span>                            <span class="o">-</span> <span class="n">공유</span><span class="o">/</span><span class="n">골든</span> <span class="nf">설정</span><span class="p">(</span><span class="n">문서화</span><span class="err">·</span><span class="n">재사용</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">global</span><span class="sr">/{vscode,ruff,pytest,pyinstaller,pyside6,jupyter}/</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">projects</span><span class="sr">/&lt;project_slug&gt;/</span>                   <span class="o">-</span> <span class="n">특정</span> <span class="n">프로젝트</span> <span class="n">기본설정</span>
<span class="err">├─</span> <span class="mi">40</span><span class="n">_Resources</span><span class="o">/</span>                                <span class="o">-</span> <span class="n">참고</span> <span class="nf">자료</span><span class="p">(</span><span class="n">교육</span><span class="sr">/매뉴얼/</span><span class="n">스펙</span><span class="err">—</span><span class="n">설정</span> <span class="n">제외</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">edu</span><span class="sr">/{courses,tutorials,papers/{to_read,reading_notes,summaries}}/</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">manuals</span><span class="sr">/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/      - 매뉴얼/가이드(PDF/HTML/</span><span class="kt">MD</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">reference</span><span class="o">/</span>                                 <span class="o">-</span> <span class="n">표준</span><span class="o">/</span><span class="n">스펙</span> <span class="n">문서</span> <span class="n">등</span> <span class="n">읽을거리</span>
<span class="err">├─</span> <span class="mi">50</span><span class="n">_Snippets</span><span class="sr">/{sql,text,bash}/                 - 재사용 코드/</span><span class="n">문구</span> <span class="nf">조각</span><span class="p">(</span><span class="n">짧은</span> <span class="n">예제</span><span class="err">·</span><span class="n">원라이너</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">60</span><span class="n">_Assets</span><span class="o">/</span>                                   <span class="o">-</span> <span class="n">로고</span><span class="sr">/폰트/</span><span class="n">템플릿</span> <span class="n">등</span> <span class="n">브랜딩</span> <span class="n">리소스</span>
<span class="err">├─</span> <span class="mi">70</span><span class="n">_Exports</span><span class="o">/</span>                                  <span class="o">-</span> <span class="n">여러</span> <span class="kt">Job의</span> <span class="err">“</span><span class="n">최종</span> <span class="n">전달본</span><span class="err">”</span> <span class="nf">모아보기</span><span class="p">(</span><span class="n">선택</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">75</span><span class="n">_Releases</span><span class="o">/</span>                                 <span class="o">-</span> <span class="n">유저</span> <span class="n">배포</span> <span class="nf">전용</span><span class="p">(</span><span class="n">버전드</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="o">&lt;</span><span class="n">project_slug</span><span class="o">&gt;/</span>
<span class="err">│</span>     <span class="err">├─</span> <span class="n">vX</span><span class="o">.</span><span class="kt">Y</span><span class="o">.</span><span class="kt">Z</span><span class="o">/</span><span class="p">{</span><span class="n">installers</span><span class="p">,</span><span class="n">wheels</span><span class="p">,</span><span class="n">portable</span><span class="p">,</span><span class="n">docs</span><span class="p">,</span><span class="n">licenses</span><span class="p">,</span><span class="n">checksums</span><span class="p">,</span><span class="kt">ReleaseNotes</span><span class="o">.</span><span class="n">md</span><span class="p">}</span>
<span class="err">│</span>     <span class="err">└─</span> <span class="n">latest</span><span class="o">/</span>                                <span class="o">-</span> <span class="n">최신</span> <span class="n">버전</span> <span class="n">포인터</span>
<span class="err">├─</span> <span class="mi">80</span><span class="n">_Tools</span><span class="o">/</span>                                    <span class="o">-</span> <span class="n">설치파일</span><span class="sr">/포터블/</span><span class="n">자동화</span> <span class="n">스크립트</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">installers</span><span class="o">/</span>                                <span class="o">-</span> <span class="n">오프라인</span> <span class="n">설치</span> <span class="o">+</span> <span class="n">install_notes</span><span class="o">.</span><span class="nf">md</span><span class="p">(</span><span class="n">버전</span><span class="err">·</span><span class="n">체크섬</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">bin</span><span class="o">/</span>                                       <span class="o">-</span> <span class="n">포터블</span> <span class="nf">실행파일</span><span class="p">(</span><span class="kt">PATH</span> <span class="n">추가</span> <span class="n">가능</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">scripts</span><span class="o">/</span>                                   <span class="o">-</span> <span class="n">bootstrap</span><span class="sr">/release/</span><span class="n">checksum</span> <span class="n">등</span> <span class="n">공용</span> <span class="n">스크립트</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">devcontainer</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">개발</span> <span class="n">컨테이너</span> <span class="n">도구</span>
<span class="err">├─</span> <span class="mi">85</span><span class="n">_Environments</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">재현</span> <span class="n">가능한</span> <span class="n">개발</span> <span class="n">환경</span> <span class="n">샘플</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">conda</span><span class="o">/</span><span class="n">environment</span><span class="o">.</span><span class="n">yml</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">venv</span><span class="o">/</span><span class="kt">README</span><span class="o">.</span><span class="n">md</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">docker</span><span class="o">/</span><span class="kt">Dockerfile</span>
<span class="err">├─</span> <span class="mi">90</span><span class="n">_PersonalConfigs</span><span class="o">/</span>                          <span class="o">-</span> <span class="n">개인</span> <span class="nf">설정</span><span class="p">(</span><span class="n">오버라이드</span><span class="err">·</span><span class="n">비공개</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">os</span><span class="sr">/{mac,win,linux}/                        - OS별 설정(키맵/</span><span class="n">입력기</span> <span class="n">등</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">shell</span><span class="sr">/{bash,zsh,tcsh,powershell}/</span>          <span class="o">-</span> <span class="n">프로필</span><span class="err">·</span><span class="n">별칭</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">editors</span><span class="sr">/vscode/</span><span class="p">{</span><span class="n">settings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span><span class="p">,</span><span class="n">keybindings</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">json</span><span class="p">}</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">git</span><span class="o">/.</span><span class="n">gitconfig</span><span class="o">.</span><span class="n">local</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">python</span><span class="o">/</span><span class="p">{</span><span class="n">pip</span><span class="o">.</span><span class="n">conf</span><span class="p">,</span><span class="n">poetry</span><span class="o">.</span><span class="n">toml</span><span class="p">,</span><span class="n">pypirc</span><span class="p">}</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">tools</span><span class="o">/</span>                                     <span class="o">-</span> <span class="n">각</span> <span class="n">툴</span> <span class="n">개인</span> <span class="n">프리셋</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">secrets</span><span class="o">/</span><span class="kt">README</span><span class="o">.</span><span class="n">md</span>                          <span class="o">-</span> <span class="p">(</span><span class="n">실제</span> <span class="n">비밀은</span> <span class="n">두지</span> <span class="n">말</span> <span class="n">것</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="o">.</span><span class="n">gitignore</span>                                 <span class="o">-</span> <span class="o">*.</span><span class="n">local</span><span class="p">,</span> <span class="n">secrets</span><span class="cm">/*, *.pem 등 넓게 제외
└─ 99_Archive/                                  - 완료 Project/Job/자료 장기 보관(읽기 전용)
</span></code></pre></div></div>

<hr />

<h2 id="사용-시-주요-주의점-핵심-체크리스트">사용 시 주요 주의점 (핵심 체크리스트)</h2>

<ol>
  <li>
    <p><strong>단일 정본 원칙</strong></p>

    <ul>
      <li>
        <p>코드 정본은 <code class="language-plaintext highlighter-rouge">20_Projects/</code>, 산출 파이프라인은 <code class="language-plaintext highlighter-rouge">25_Jobs/</code>, 데이터셋은 <code class="language-plaintext highlighter-rouge">26_Datasets/</code>에만 둡니다.</p>
      </li>
      <li>
        <p>다른 위치에는 <strong>복사하지 말고</strong> 경로 참조/심볼릭 링크만 사용하세요.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>10_Today는 ‘대시보드’</strong></p>

    <ul>
      <li>
        <p>원본을 옮기지 않습니다. 링크/런처만 두고, 편집은 본래 위치에서.</p>
      </li>
      <li>
        <p>콘솔 위주면 <code class="language-plaintext highlighter-rouge">shortcuts.list</code> 또는 <code class="language-plaintext highlighter-rouge">work-run</code> 자동 탐색 러너만 사용.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>25_Jobs 비대화 방지</strong></p>

    <ul>
      <li>
        <p>새 작업은 항상 <code class="language-plaintext highlighter-rouge">25_Jobs/_active/타입-YYYY-NNN_제목/</code>에서 시작 → 완료 즉시 <code class="language-plaintext highlighter-rouge">타입/연도/</code>로 이동.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">_active/</code>는 최대 12개 규칙, 30일 지난 로그는 압축, 중간물은 정리.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>데이터 버전/무결성</strong></p>

    <ul>
      <li>
        <p>입력/출력 데이터셋은 <code class="language-plaintext highlighter-rouge">vYYYY.MMDD</code> 버전으로 관리하고 <code class="language-plaintext highlighter-rouge">manifest.yml</code> + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>를 필수 기록.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">26_Datasets/cache/</code>는 언제든 삭제 가능. 중요한 데이터는 <code class="language-plaintext highlighter-rouge">raw/</code> 또는 <code class="language-plaintext highlighter-rouge">processed/</code>에.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>설정 레이어링(우선순위)</strong></p>

    <ul>
      <li>
        <p>Project 로컬 → <code class="language-plaintext highlighter-rouge">90_PersonalConfigs</code>(개인 오버라이드) → <code class="language-plaintext highlighter-rouge">32_SharedConfigs/projects/&lt;proj&gt;</code> → <code class="language-plaintext highlighter-rouge">32_SharedConfigs/global</code>.</p>
      </li>
      <li>
        <p>VSCode/ruff/pytest 등은 <code class="language-plaintext highlighter-rouge">*.local.*</code>로 개인 설정을 분리하면 충돌 최소화.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>보안/비밀 관리</strong></p>

    <ul>
      <li>
        <p>자격증명/토큰/키는 <code class="language-plaintext highlighter-rouge">90_PersonalConfigs/secrets/</code>에만 두고, 코드/스크립트는 <strong>환경변수로 읽기</strong>.</p>
      </li>
      <li>
        <p>레포에 올릴 땐 <code class="language-plaintext highlighter-rouge">.gitignore</code>가 비밀/대용량을 확실히 제외하는지 확인.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>깊이 제한 &amp; 네이밍</strong></p>

    <ul>
      <li>
        <p>폴더 깊이는 <strong>최대 3단</strong> 을 목표로(탐색/권한/동기화 이슈 감소).</p>
      </li>
      <li>
        <p>규칙적 네이밍: <code class="language-plaintext highlighter-rouge">PRJ-연도-번호_이름</code>, <code class="language-plaintext highlighter-rouge">JOB/BUG/SMOKE/LAB/EX/REL-연도-번호_이름</code>, 파일은 <code class="language-plaintext highlighter-rouge">YYYY-MM-DD_제목_v001.ext</code>.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>릴리스 품질 보장</strong></p>

    <ul>
      <li>
        <p>배포는 항상 <code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/</code>로만 공유. checksums/와 <code class="language-plaintext highlighter-rouge">ReleaseNotes.md</code> 포함.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">latest/</code> 업데이트 시 실제 버전 폴더 내용과 일치 확인.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>대용량 데이터 분리 고려</strong></p>

    <ul>
      <li>정말 큰 원천/캐시는 <code class="language-plaintext highlighter-rouge">26_Datasets</code> 하위에만 두고, Job/Project에는 링크로만 연결. 백업 정책도 별도로.</li>
    </ul>
  </li>
  <li>
    <p><strong>운영 루틴</strong></p>
  </li>
</ol>

<ul>
  <li>
    <p>매일: <code class="language-plaintext highlighter-rouge">00_Inbox</code> 비우기, Today 정리.</p>
  </li>
  <li>
    <p>주 1회: <code class="language-plaintext highlighter-rouge">_active</code> 슬림화, <code class="language-plaintext highlighter-rouge">shortcuts.list</code> Top10 유지, 로그 압축.</p>
  </li>
  <li>
    <p>월 1회: 데이터 카탈로그 갱신, 불용 Job/데이터 아카이브.</p>
  </li>
</ul>

<p>필요하면 이 구조를 <strong>초기 폴더/README/샘플 파일 세트</strong> 로 바로 생성해 드릴게요. (선호 셸: bash/zsh/tcsh/PowerShell 알려주면 해당 스크립트도 포함해서!)</p>

<p class="chat--user">

manifest.yml는 어떻게 작성해야해? 그리고 checksum는 어떻게 만들어?

</p>

<p>좋아! <strong>manifest.yml</strong> 은 “이 데이터셋이 무엇이며, 어디서 왔고, 어떻게 만들었고, 무엇으로 검증했는가”를 기록하는 <strong>증빙 카드</strong> 예요.<br />
<strong>checksum</strong> 은 파일 무결성을 확인하기 위한 <strong>지문</strong> 이고, 보통 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>라는 텍스트 파일로 함께 둡니다.</p>

<p>아래를 그대로 따라 하면 됩니다.</p>

<hr />

<h1 id="1-manifestyml-작성-가이드">1) <code class="language-plaintext highlighter-rouge">manifest.yml</code> 작성 가이드</h1>

<h2 id="위치">위치</h2>

<ul>
  <li>각 버전 루트에 둡니다.<br />
예:<br />
<code class="language-plaintext highlighter-rouge">Work/26_Datasets/datasets/&lt;dataset_name&gt;/vYYYY.MMDD/manifest.yml</code><br />
<code class="language-plaintext highlighter-rouge">Work/26_Datasets/derived/&lt;artifact_name&gt;/vYYYY.MMDD/manifest.yml</code></li>
</ul>

<h2 id="최소-필수-필드-작게-시작">최소 필수 필드 (작게 시작)</h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">ad_events</span>                  <span class="c1"># 데이터셋/아티팩트 이름</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">dataset</span>                    <span class="c1"># dataset | derived</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">v2025.0826</span>             <span class="c1"># 버전(권장: vYYYY.MMDD)</span>
<span class="na">created_at</span><span class="pi">:</span> <span class="s">2025-08-26T14:30:00+09:00</span>
<span class="na">owner</span><span class="pi">:</span> <span class="s">your.name@company.com</span>

<span class="na">source</span><span class="pi">:</span>                          <span class="c1"># 어디서 왔는가(입력 데이터셋이면 필수)</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">external</span>                 <span class="c1"># external | internal | manual</span>
  <span class="na">detail</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ad_platform</span><span class="nv"> </span><span class="s">export</span><span class="nv"> </span><span class="s">API</span><span class="nv"> </span><span class="s">v3"</span>

<span class="na">schema</span><span class="pi">:</span>                          <span class="c1"># 간단 스키마(요약)</span>
  <span class="na">format</span><span class="pi">:</span> <span class="s">parquet</span>                <span class="c1"># parquet | csv | json | image | ...</span>
  <span class="na">rows</span><span class="pi">:</span> <span class="m">5021113</span>
  <span class="na">columns</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">event_id</span><span class="pi">,</span> <span class="nv">type</span><span class="pi">:</span> <span class="nv">string</span><span class="pi">}</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">ts_utc</span><span class="pi">,</span>   <span class="nv">type</span><span class="pi">:</span> <span class="nv">timestamp</span><span class="pi">}</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">campaign</span><span class="pi">,</span> <span class="nv">type</span><span class="pi">:</span> <span class="nv">string</span><span class="pi">}</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">cost</span><span class="pi">,</span>     <span class="nv">type</span><span class="pi">:</span> <span class="nv">float</span><span class="pi">}</span>

<span class="na">pii_level</span><span class="pi">:</span> <span class="s">low</span>                   <span class="c1"># none | low | medium | high</span>
<span class="na">license</span><span class="pi">:</span> <span class="s">internal</span>                <span class="c1"># 라이선스/사용 제한</span>

<span class="na">files</span><span class="pi">:</span>                           <span class="c1"># 포함 파일 요약(상대경로)</span>
  <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">processed/events.parquet</span>
    <span class="na">bytes</span><span class="pi">:</span> <span class="m">812345678</span>
    <span class="na">sha256</span><span class="pi">:</span> <span class="s2">"</span><span class="s">ab12...ef"</span>          <span class="c1"># 선택(있으면 SHA256SUMS와 동일해야 함)</span>

<span class="na">notes</span><span class="pi">:</span> <span class="s2">"</span><span class="s">tz</span><span class="nv"> </span><span class="s">normalized</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">UTC,</span><span class="nv"> </span><span class="s">invalid</span><span class="nv"> </span><span class="s">rows</span><span class="nv"> </span><span class="s">dropped"</span>
</code></pre></div></div>

<h2 id="파생derived-데이터셋일-때의-추가-필드">파생(derived) 데이터셋일 때의 추가 필드</h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">kind</span><span class="pi">:</span> <span class="s">derived</span>
<span class="na">lineage</span><span class="pi">:</span>                          <span class="c1"># 어떤 입력/코드/실행에서 나왔는가</span>
  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">ad_events</span><span class="pi">,</span> <span class="nv">version</span><span class="pi">:</span> <span class="nv">v2025.0826</span><span class="pi">,</span> <span class="nv">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">../../../datasets/ad_events/v2025.0826/processed"</span><span class="pi">}</span>
  <span class="na">code</span><span class="pi">:</span>
    <span class="na">repo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">PRJ-2025-001_sample_app"</span>       <span class="c1"># 또는 Git URL</span>
    <span class="na">commit</span><span class="pi">:</span> <span class="s2">"</span><span class="s">a1b2c3d"</span>                     <span class="c1"># 생성에 사용한 커밋/태그</span>
  <span class="na">job</span><span class="pi">:</span>
    <span class="na">id</span><span class="pi">:</span> <span class="s2">"</span><span class="s">JOB-2025-041_reportX"</span>            <span class="c1"># (있으면) 생산 Job 코드</span>

<span class="na">metrics</span><span class="pi">:</span>                          <span class="c1"># 품질/성능 요약(선택)</span>
  <span class="na">records_after_filters</span><span class="pi">:</span> <span class="m">4988333</span>
  <span class="na">null_rate_cost</span><span class="pi">:</span> <span class="m">0.0004</span>
  <span class="na">sanity_checks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">timestamp</span><span class="nv"> </span><span class="s">not</span><span class="nv"> </span><span class="s">null:</span><span class="nv"> </span><span class="s">pass"</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">cost</span><span class="nv"> </span><span class="s">&gt;=</span><span class="nv"> </span><span class="s">0:</span><span class="nv"> </span><span class="s">pass"</span>
</code></pre></div></div>

<h2 id="확장-필드필요할-때만">확장 필드(필요할 때만)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tool_versions</code>: Python/패키지/CLI 버전</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">constraints</code>: 사용 제한, 만료일</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">hash_tree</code>: 전체 디렉터리 해시(고급)</p>
  </li>
</ul>

<blockquote>
  <p><strong>규칙</strong></p>

  <ul>
    <li>
      <p><strong>짧게</strong> 시작(필수만) → 진짜 필요한 메타만 점진적으로 추가</p>
    </li>
    <li>
      <p><strong>경로는 상대경로</strong> 로 적되, 항상 <strong>버전 루트 기준</strong> 으로 기록</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="2-sha256sums-만들기-무결성-체크섬">2) <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 만들기 (무결성 체크섬)</h1>

<h2 id="파일-위치이름">파일 위치/이름</h2>

<ul>
  <li>
    <p>각 버전 루트에 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>(확장자 없음)로 둡니다.</p>
  </li>
  <li>
    <p>내용 포맷:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php-template
    
&lt;sha256&gt;  &lt;상대경로&gt;
</code></pre></div>    </div>
  </li>
</ul>

<p>예:<br />
<code class="language-plaintext highlighter-rouge">d2c7...9fa processed/events.parquet</code></p>

<h2 id="macos--linux-bashzsh">macOS / Linux (bash/zsh)</h2>

<p><strong>버전 루트에서 실행:</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) 기존 파일 제거(있다면)</span>
<span class="nb">rm</span> <span class="nt">-f</span> SHA256SUMS

<span class="c"># 2) 모든 파일에 대해 sha256 생성(숨김·SUMS 제외)</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'SHA256SUMS'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.*'</span> <span class="nt">-print0</span> <span class="se">\</span>
| xargs <span class="nt">-0</span> <span class="nb">sha256sum</span> <span class="o">&gt;</span> SHA256SUMS
<span class="c"># macOS에는 sha256sum이 없을 수 있음 → 대체:</span>
<span class="c"># find . -type f ! -name 'SHA256SUMS' ! -name '.*' -exec sh -c 'shasum -a 256 "$1" | sed "s#  #  #"' _ {} \; &gt; SHA256SUMS</span>

<span class="c"># 3) 검증(선택)</span>
<span class="nb">sha256sum</span> <span class="nt">-c</span> SHA256SUMS
<span class="c"># macOS 대체:</span>
<span class="c"># awk '{print $2}' SHA256SUMS | while read -r f; do</span>
<span class="c">#   calc=$(shasum -a 256 "$f" | awk '{print $1}')</span>
<span class="c">#   want=$(grep "  $f$" SHA256SUMS | awk '{print $1}')</span>
<span class="c">#   [[ "$calc" == "$want" ]] &amp;&amp; echo "OK  $f" || echo "FAIL  $f"</span>
<span class="c"># done</span>
</code></pre></div></div>

<h2 id="windows-powershell-2">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 버전 루트에서 실행:</span><span class="w">
</span><span class="n">Remove-Item</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nt">-Recurse</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s1">'SHA256SUMS'</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="o">-not</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="o">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s1">'.'</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$h</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Get-FileHash</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">SHA256</span><span class="p">)</span><span class="o">.</span><span class="nf">Hash</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w">
  </span><span class="nv">$rel</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="o">.</span><span class="nf">Substring</span><span class="p">((</span><span class="n">Get-Location</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">Length</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="nx">1</span><span class="p">)</span><span class="o">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s1">'\'</span><span class="p">,</span><span class="s1">'/'</span><span class="p">)</span><span class="w">
  </span><span class="s2">"</span><span class="nv">$h</span><span class="s2">  </span><span class="nv">$rel</span><span class="s2">"</span><span class="w">
</span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Content</span><span class="w"> </span><span class="nt">-NoNewline</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w">

</span><span class="c"># 검증:</span><span class="w">
</span><span class="n">Get-Content</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$parts</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="bp">$_</span><span class="w"> </span><span class="o">-split</span><span class="w"> </span><span class="s1">'\s\s'</span><span class="w">
  </span><span class="nv">$want</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="w"> </span><span class="nv">$file</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w">
  </span><span class="nv">$got</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Get-FileHash</span><span class="w"> </span><span class="nv">$file</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">SHA256</span><span class="p">)</span><span class="o">.</span><span class="nf">Hash</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w">
  </span><span class="nx">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$got</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="nv">$want</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"OK  </span><span class="nv">$file</span><span class="s2">"</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"FAIL  </span><span class="nv">$file</span><span class="s2">"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="tcsh-1">tcsh</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tcsh

# 버전 루트에서 실행:
rm -f SHA256SUMS
# GNU coreutils(sha256sum)가 있으면:
find . -type f ! -name 'SHA256SUMS' ! -name '.*' -print0 | xargs -0 sha256sum &gt; SHA256SUMS
# 없고 macOS 기본이라면:
# find . -type f ! -name 'SHA256SUMS' ! -name '.*' -exec sh -c 'shasum -a 256 "$1"' _ {} \; &gt; SHA256SUMS
</code></pre></div></div>

<h3 id="생성검증-스크립트로-고정추천">생성/검증 스크립트로 고정(추천)</h3>

<ul>
  <li>
    <p><strong>공용</strong> : <code class="language-plaintext highlighter-rouge">Work/80_Tools/scripts/checksum_all.sh|ps1|csh</code></p>
  </li>
  <li>
    <p><strong>사용법</strong> : 버전 루트에서 <code class="language-plaintext highlighter-rouge">checksum_all.sh</code> 실행 → <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성 → <code class="language-plaintext highlighter-rouge">-c</code> 옵션으로 검증</p>
  </li>
</ul>

<hr />

<h1 id="3-함께-쓰는-운영-팁">3) 함께 쓰는 운영 팁</h1>

<ul>
  <li>
    <p><strong>manifest vs SHA256SUMS</strong></p>

    <ul>
      <li>
        <p><strong>SHA256SUMS</strong> : 파일 <strong>전체 목록</strong> 과 해시(머신용, 검증 전용)</p>
      </li>
      <li>
        <p><strong>manifest.yml</strong> : 주요 파일 요약/메타(<strong>사람이 읽기 쉬운 카드</strong>)<br />
→ 둘 다 있되, manifest의 <code class="language-plaintext highlighter-rouge">files[].sha256</code>은 <strong>핵심 파일만</strong> 넣어도 충분</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>무결성 실패 시</strong></p>

    <ul>
      <li>
        <p>전송/압축/복사 과정에서 손상 가능 → 원본에서 다시 가져와 SUMS 재생성</p>
      </li>
      <li>
        <p>라인 엔딩/권한과 무관(바이너리 기준)이라 신뢰도 높음</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>제외 대상</strong></p>

    <ul>
      <li>
        <p>SUMS 만들 때 <strong>숨김파일(<code class="language-plaintext highlighter-rouge">.*</code>)</strong>과 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 자신은 제외</p>
      </li>
      <li>
        <p>캐시/임시 파일은 <code class="language-plaintext highlighter-rouge">cache/</code>에만 두고 SUMS에서 자연히 제외되게</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>대용량 최적화</strong></p>

    <ul>
      <li>Parquet 등 대형 파일은 <strong>생성 직후</strong> SUMS를 만들어두고, 나중엔 변경 금지(불변 원칙)</li>
    </ul>
  </li>
  <li>
    <p><strong>버전 규칙</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">vYYYY.MMDD</code>로 <strong>스냅샷 의미</strong> 가 분명해짐. 파생물도 동일 규칙 사용</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="빠른-시작복붙용-템플릿">빠른 시작(복붙용 템플릿)</h2>

<p><strong>입력 데이터셋:<code class="language-plaintext highlighter-rouge">manifest.yml</code></strong></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">&lt;dataset_name&gt;</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">dataset</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">vYYYY.MMDD</span>
<span class="na">created_at</span><span class="pi">:</span> <span class="s">2025-08-26T00:00:00+09:00</span>
<span class="na">owner</span><span class="pi">:</span> <span class="s">your.name@company.com</span>
<span class="na">source</span><span class="pi">:</span>
  <span class="na">type</span><span class="pi">:</span> <span class="s">&lt;external|internal|manual&gt;</span>
  <span class="na">detail</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;설명/링크&gt;"</span>
<span class="na">schema</span><span class="pi">:</span>
  <span class="na">format</span><span class="pi">:</span> <span class="s">&lt;parquet|csv|json|image|...&gt;</span>
  <span class="na">rows</span><span class="pi">:</span> <span class="s">&lt;int or unknown&gt;</span>
  <span class="na">columns</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">&lt;col1&gt;</span><span class="pi">,</span> <span class="nv">type</span><span class="pi">:</span> <span class="nv">&lt;type&gt;</span><span class="pi">}</span>
<span class="na">pii_level</span><span class="pi">:</span> <span class="s">&lt;none|low|medium|high&gt;</span>
<span class="na">license</span><span class="pi">:</span> <span class="s">&lt;internal|...&gt;</span>
<span class="na">files</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="pi">{</span><span class="nv">path</span><span class="pi">:</span> <span class="nv">&lt;relative/file&gt;</span><span class="pi">,</span> <span class="nv">bytes</span><span class="pi">:</span> <span class="nv">&lt;int&gt;</span><span class="pi">,</span> <span class="nv">sha256</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;optional&gt;"</span><span class="pi">}</span>
<span class="na">notes</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;중요</span><span class="nv"> </span><span class="s">정제/전처리</span><span class="nv"> </span><span class="s">노트&gt;"</span>
</code></pre></div></div>

<p><strong>파생 데이터셋:<code class="language-plaintext highlighter-rouge">manifest.yml</code></strong></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">&lt;artifact_name&gt;</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">derived</span>
<span class="na">version</span><span class="pi">:</span> <span class="s">vYYYY.MMDD</span>
<span class="na">created_at</span><span class="pi">:</span> <span class="s">2025-08-26T00:00:00+09:00</span>
<span class="na">owner</span><span class="pi">:</span> <span class="s">your.name@company.com</span>
<span class="na">lineage</span><span class="pi">:</span>
  <span class="na">inputs</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="pi">{</span><span class="nv">name</span><span class="pi">:</span> <span class="nv">&lt;dataset_a&gt;</span><span class="pi">,</span> <span class="nv">version</span><span class="pi">:</span> <span class="nv">vYYYY.MMDD</span><span class="pi">,</span> <span class="nv">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">../../../datasets/&lt;dataset_a&gt;/vYYYY.MMDD/processed"</span><span class="pi">}</span>
  <span class="na">code</span><span class="pi">:</span>
    <span class="na">repo</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;PRJ-...</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">git</span><span class="nv"> </span><span class="s">URL&gt;"</span>
    <span class="na">commit</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;hash</span><span class="nv"> </span><span class="s">or</span><span class="nv"> </span><span class="s">tag&gt;"</span>
  <span class="na">job</span><span class="pi">:</span>
    <span class="na">id</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;JOB-YYYY-NNN_title&gt;"</span>
<span class="na">schema</span><span class="pi">:</span>
  <span class="na">format</span><span class="pi">:</span> <span class="s">&lt;parquet|csv|...&gt;</span>
  <span class="na">rows</span><span class="pi">:</span> <span class="s">&lt;int&gt;</span>
<span class="na">metrics</span><span class="pi">:</span>
  <span class="na">records_after_filters</span><span class="pi">:</span> <span class="s">&lt;int&gt;</span>
  <span class="na">sanity_checks</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">rule:</span><span class="nv"> </span><span class="s">pass/fail"</span>
<span class="na">notes</span><span class="pi">:</span> <span class="s2">"</span><span class="s">&lt;변환</span><span class="nv"> </span><span class="s">요약/제약&gt;"</span>
</code></pre></div></div>

<p>필요하면 위 <strong>체크섬 생성/검증 스크립트</strong> 를 <code class="language-plaintext highlighter-rouge">80_Tools/scripts/</code>에 넣은 버전으로 만들어 줄게—쓰는 셸(bash/zsh/PowerShell/tcsh)만 말해줘!</p>

<p class="chat--user">

폰트 파일은 어디 저장해?

</p>

<p>짧게: <strong><code class="language-plaintext highlighter-rouge">Work/60_Assets/fonts/</code></strong> 아래에 둬요.<br />
여긴 로고/템플릿과 같은 “브랜딩/시각 자산” 영역이라 폰트의 <strong>정본 위치</strong> 로 딱 맞습니다.</p>

<hr />

<h1 id="권장-폴더-트리복붙">권장 폴더 트리(복붙)</h1>
<div class="language-perl highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">Work</span><span class="o">/</span>
<span class="err">└─</span> <span class="mi">60</span><span class="nv">_Assets</span><span class="sr">/                               - 브랜딩/</span><span class="err">시각</span> <span class="err">자산</span>
   <span class="err">└─</span> <span class="nv">fonts</span><span class="o">/</span>                                <span class="o">-</span> <span class="err">폰트</span> <span class="err">정본</span> <span class="err">저장소</span>
      <span class="err">├─</span> <span class="nv">_catalog</span><span class="o">.</span><span class="nv">csv</span>                       <span class="o">-</span> <span class="p">(</span><span class="err">선택</span><span class="p">)</span> <span class="err">폰트</span> <span class="err">목록</span><span class="sr">/버전/</span><span class="err">라이선스</span> <span class="err">인덱스</span>
      <span class="err">├─</span> <span class="o">&lt;</span><span class="nv">FamilyName</span><span class="o">&gt;/</span>                      <span class="o">-</span> <span class="err">예</span><span class="p">:</span> <span class="nv">Pretendard</span><span class="p">,</span> <span class="nv">Inter</span><span class="p">,</span> <span class="nv">NotoSansKR</span>
      <span class="err">│</span>  <span class="err">└─</span> <span class="nv">vX</span><span class="o">.</span><span class="nv">Y</span><span class="o">/</span>                           <span class="o">-</span> <span class="err">폰트</span> <span class="err">패밀리</span> <span class="err">버전</span><span class="p">(</span><span class="err">없으면</span> <span class="nv">v1</span><span class="mf">.0</span> <span class="err">등</span><span class="p">)</span>
      <span class="err">│</span>     <span class="err">├─</span> <span class="nv">desktop</span><span class="sr">/                     - 앱/</span><span class="err">문서용</span><span class="p">:</span> <span class="nv">OTF</span><span class="o">/</span><span class="nv">TTF</span>
      <span class="err">│</span>     <span class="err">├─</span> <span class="nv">web</span><span class="sr">/                         - 웹/</span><span class="err">경량</span> <span class="err">배포</span><span class="p">:</span> <span class="nv">WOFF2</span><span class="p">(</span><span class="err">권장</span><span class="p">),</span> <span class="nv">WOFF</span>
      <span class="err">│</span>     <span class="err">├─</span> <span class="nv">variable</span><span class="o">/</span>                    <span class="o">-</span> <span class="err">가변</span> <span class="err">폰트</span><span class="p">(</span><span class="err">옵션</span><span class="p">)</span>
      <span class="err">│</span>     <span class="err">├─</span> <span class="nv">subsets</span><span class="o">/</span>                     <span class="o">-</span> <span class="err">부분</span> <span class="err">서브셋</span><span class="p">(</span><span class="err">예</span><span class="p">:</span> <span class="nv">KR</span><span class="o">-</span><span class="nv">basic</span><span class="p">,</span> <span class="nv">UI</span><span class="o">-</span><span class="nv">only</span><span class="p">)</span>
      <span class="err">│</span>     <span class="err">├─</span> <span class="nv">license</span><span class="o">/</span>                     <span class="o">-</span> <span class="nv">LICENSE</span><span class="p">,</span> <span class="nv">README</span><span class="o">-</span><span class="nv">LICENSE</span><span class="o">.</span><span class="nv">md</span>
      <span class="err">│</span>     <span class="err">├─</span> <span class="nv">specimen</span><span class="sr">/                    - 샘플 이미지/</span><span class="err">미리보기</span>
      <span class="err">│</span>     <span class="err">└─</span> <span class="nv">SHA256SUMS</span>                   <span class="o">-</span> <span class="err">무결성</span> <span class="err">체크섬</span><span class="p">(</span><span class="err">옵션</span><span class="p">)</span>
      <span class="err">└─</span> <span class="o">&lt;</span><span class="nv">FamilyName2</span><span class="o">&gt;/</span>
         <span class="err">└─</span> <span class="nv">vX</span><span class="o">.</span><span class="nv">Y</span><span class="o">/...</span>
</code></pre></div></div>

<blockquote>
  <p><strong>프로젝트 전용 폰트?</strong><br />
 정본은 위에 두고, 프로젝트에서는 <strong>링크/빌드시 복사</strong> 만 해요. (복사본이 정본이 되지 않도록!)</p>
</blockquote>

<hr />

<h2 id="운용-규칙핵심">운용 규칙(핵심)</h2>

<ul>
  <li>
    <p><strong>정본은 60_Assets/fonts</strong> : 여기만 갱신하고, 나머지는 <strong>참조/동기화</strong>.</p>
  </li>
  <li>
    <p><strong>버저닝</strong> : 폰트 패밀리마다 <code class="language-plaintext highlighter-rouge">vX.Y</code> 폴더를 만들어 버전 충돌을 방지.</p>
  </li>
  <li>
    <p><strong>라이선스 동봉</strong> : <code class="language-plaintext highlighter-rouge">license/</code>에 LICENSE, 사용범위 메모(웹 임베드 가능 여부 등).</p>
  </li>
  <li>
    <p><strong>무결성(선택)</strong> : 대외 배포/릴리스에 들어가면 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성(아래 예시).</p>
  </li>
  <li>
    <p><strong>개인 설치본</strong> 은 OS에 설치하되(시스템 폴더), <strong>정본은 변하지 않게</strong> 60_Assets에 유지.</p>
  </li>
</ul>

<hr />

<h2 id="프로젝트에서-쓰는-법">프로젝트에서 쓰는 법</h2>

<h3 id="1-데스크탑-앱pyside6qt-등에서-번들">1) 데스크탑 앱(PySide6/Qt 등)에서 번들</h3>

<ul>
  <li><strong>복사 방식(빌드 시)</strong> : 빌드 스크립트에서 필요한 파일만 프로젝트로 동기화.
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 예: Inter v4.0의 OTF만 앱 리포지토리로 동기화</span>
rsync <span class="nt">-av</span> <span class="se">\</span>
  <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/60_Assets/fonts/Inter/v4.0/desktop/"</span> <span class="se">\</span>
  <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/20_Projects/PRJ-2025-001_app/assets/fonts/"</span>
</code></pre></div>    </div>
  </li>
  <li><strong>런타임 로드(PySide6)</strong> :
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">PySide6.QtGui</span> <span class="kn">import</span> <span class="n">QFontDatabase</span><span class="p">,</span> <span class="n">QFont</span>
<span class="n">QFontDatabase</span><span class="p">.</span><span class="nf">addApplicationFont</span><span class="p">(</span><span class="sh">"</span><span class="s">:/assets/fonts/Inter-Regular.otf</span><span class="sh">"</span><span class="p">)</span>
<span class="n">QApplication</span><span class="p">.</span><span class="nf">setFont</span><span class="p">(</span><span class="nc">QFont</span><span class="p">(</span><span class="sh">"</span><span class="s">Inter</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-웹css에서-임베드">2) 웹/CSS에서 임베드</h3>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* WOFF2 우선 */</span>
<span class="k">@font-face</span><span class="p">{</span>
  <span class="nl">font-family</span><span class="p">:</span><span class="s1">"Inter"</span><span class="p">;</span>
  <span class="nl">src</span><span class="p">:</span> <span class="nf">url</span><span class="p">(</span><span class="s1">"/assets/fonts/Inter/v4.0/web/Inter-Variable.woff2"</span><span class="p">)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">"woff2"</span><span class="p">);</span>
  <span class="nl">font-weight</span><span class="p">:</span> <span class="m">100</span> <span class="m">900</span><span class="p">;</span> <span class="c">/* variable */</span>
  <span class="nl">font-style</span><span class="p">:</span> <span class="nb">normal</span><span class="p">;</span>
  <span class="nl">font-display</span><span class="p">:</span> <span class="nb">swap</span><span class="p">;</span>
<span class="p">}</span>
<span class="nt">body</span><span class="p">{</span> <span class="nl">font-family</span><span class="p">:</span> <span class="s1">"Inter"</span><span class="p">,</span> <span class="s1">"Noto Sans KR"</span><span class="p">,</span> <span class="n">system-ui</span><span class="p">,</span> <span class="o">-</span><span class="n">apple-system</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<h3 id="3-릴리스에-포함선택">3) 릴리스에 포함(선택)</h3>

<ul>
  <li>폰트를 앱과 함께 배포하면, 해당 프로젝트의 <code class="language-plaintext highlighter-rouge">75_Releases/&lt;project&gt;/vX.Y.Z/docs/</code>에<br />
<strong>라이선스 요약</strong> 을 반드시 포함하세요(배포권한 확인).</li>
</ul>

<hr />

<h2 id="서브셋가변-폰트-팁">서브셋/가변 폰트 팁</h2>

<ul>
  <li>
    <p><strong>가변 폰트(variable)</strong>가 있다면 우선 고려(파일 수↓, 품질↑).</p>
  </li>
  <li>
    <p>웹/경량 배포는 <strong>WOFF2만</strong> 으로 충분한 경우가 많음.</p>
  </li>
  <li>
    <p><strong>서브셋</strong> 은 UI에 필요한 글리프만 추출해 용량을 크게 줄일 수 있어요.<br />
(툴: <code class="language-plaintext highlighter-rouge">pyftsubset</code> 등—원하면 스크립트 만들어 드림)</p>
  </li>
</ul>

<hr />

<h2 id="라이선스보안-주의">라이선스/보안 주의</h2>

<ul>
  <li>
    <p>상업용/배포제한 폰트는 리포지토리에 올리지 말고,<br />
<code class="language-plaintext highlighter-rouge">60_Assets/fonts/&lt;Family&gt;/vX.Y/license/</code>에 <strong>사용범위 메모</strong> 를 명확히.</p>
  </li>
  <li>
    <p>팀 공유가 불가하면, 개인 환경에는 <strong>OS 설치</strong> 만 하고 정본은 내부 서버/스토리지에 두기.</p>
  </li>
  <li>
    <p>외부 배포 시 <code class="language-plaintext highlighter-rouge">README-LICENSE.md</code>에 출처/허용범위/금지사항 요약.</p>
  </li>
</ul>

<hr />

<h2 id="체크섬sha256-만들기옵션">체크섬(SHA256) 만들기(옵션)</h2>

<p>버전 루트에서:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># macOS/Linux (sha256sum 있을 때)</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'SHA256SUMS'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.*'</span> <span class="nt">-print0</span> | xargs <span class="nt">-0</span> <span class="nb">sha256sum</span> <span class="o">&gt;</span> SHA256SUMS

<span class="c"># macOS 기본(shasum) 대체</span>
find <span class="nb">.</span> <span class="nt">-type</span> f <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'SHA256SUMS'</span> <span class="o">!</span> <span class="nt">-name</span> <span class="s1">'.*'</span> <span class="nt">-exec</span> sh <span class="nt">-c</span> <span class="s1">'shasum -a 256 "$1" | sed "s#  #  #"'</span> _ <span class="o">{}</span> <span class="se">\;</span> <span class="o">&gt;</span> SHA256SUMS
</code></pre></div></div>

<p>Windows PowerShell:</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Remove-Item</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nt">-Recurse</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Where-Object</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w"> </span><span class="o">-ne</span><span class="w"> </span><span class="s1">'SHA256SUMS'</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="o">-not</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="o">.</span><span class="nf">StartsWith</span><span class="p">(</span><span class="s1">'.'</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$h</span><span class="o">=</span><span class="p">(</span><span class="n">Get-FileHash</span><span class="w"> </span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">SHA256</span><span class="p">)</span><span class="o">.</span><span class="nf">Hash</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w">
    </span><span class="nv">$rel</span><span class="o">=</span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="o">.</span><span class="nf">Substring</span><span class="p">((</span><span class="n">Get-Location</span><span class="p">)</span><span class="o">.</span><span class="nf">Path</span><span class="o">.</span><span class="nf">Length</span><span class="o">+</span><span class="nx">1</span><span class="p">)</span><span class="o">.</span><span class="nf">Replace</span><span class="p">(</span><span class="s1">'\'</span><span class="p">,</span><span class="s1">'/'</span><span class="p">)</span><span class="w">
    </span><span class="s2">"</span><span class="nv">$h</span><span class="s2">  </span><span class="nv">$rel</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Set-Content</span><span class="w"> </span><span class="nt">-NoNewline</span><span class="w"> </span><span class="nx">SHA256SUMS</span><span class="w">
</span></code></pre></div></div>

<hr />

<h2 id="빠른-체크리스트">빠른 체크리스트</h2>

<ul>
  <li>
    <p>폰트 정본: <strong><code class="language-plaintext highlighter-rouge">60_Assets/fonts</code></strong> (버전·라이선스 동봉)</p>
  </li>
  <li>
    <p>프로젝트: <strong>빌드시 동기화/복사</strong> 또는 <strong>런타임 로드</strong>(정본은 건드리지 않기)</p>
  </li>
  <li>
    <p>웹: <strong>WOFF2 +<code class="language-plaintext highlighter-rouge">font-display: swap</code></strong>, 시스템 폰트 적절한 폴백</p>
  </li>
  <li>
    <p>데스크탑: 애플리케이션 번들에 포함하면 <strong>라이선스 확인 필수</strong></p>
  </li>
  <li>
    <p>서브셋/가변 폰트로 <strong>용량 최적화</strong> , 필요 시 스크립트화</p>
  </li>
</ul>

<p>원하면 네가 쓰는 폰트 패밀리(예: Pretendard, Noto Sans KR) 기준으로<br />
<strong>초기 트리 + 빌드 동기화 스크립트</strong>(bash/PowerShell/tcsh)까지 만들어줄게.</p>

<p class="chat--user">

다운로드 파일들 저장할 폴더도 추가해줘

</p>

<p>좋아, <strong>다운로드 전용 착륙지(Landing Zone)</strong>를 추가하자.<br />
기존 <code class="language-plaintext highlighter-rouge">00_Inbox</code>(수작업 스크랩/임시)와 구분해서, <strong>브라우저/CLI가 내려받는 파일</strong> 은 여기로 모으고 정리 후 각 “정본 위치”로 이동하는 흐름이 깔끔해.</p>

<hr />

<h2 id="추가-트리-복붙용--영문-폴더명--한글-설명">추가 트리 (복붙용) — <em>영문 폴더명 + 한글 설명</em></h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span><span class="o">/</span>
<span class="err">├─</span> <span class="mo">05</span><span class="n">_Downloads</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">다운로드</span> <span class="nf">착륙지</span><span class="p">(</span><span class="kt">Landing</span> <span class="kt">Zone</span><span class="p">,</span> <span class="n">정리</span> <span class="n">전</span> <span class="n">임시</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">_inbox</span><span class="o">/</span>                                  <span class="o">-</span> <span class="n">브라우저</span><span class="o">/</span><span class="n">툴</span> <span class="n">기본</span> <span class="n">저장</span> <span class="nf">경로</span><span class="p">(</span><span class="n">정리</span> <span class="n">전</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">installers</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">설치</span> <span class="n">파일</span> <span class="nf">임시</span><span class="p">(</span><span class="o">.</span><span class="n">exe</span><span class="sr">/.msi/.pkg/.dmg/.whl/</span><span class="o">.</span><span class="n">zip</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">datasets</span><span class="o">/</span>                                <span class="o">-</span> <span class="n">데이터셋</span> <span class="n">압축</span><span class="o">/</span><span class="kt">CSV</span> <span class="nf">임시</span><span class="p">(</span><span class="n">해제</span> <span class="n">전</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">manuals</span><span class="o">/</span>                                 <span class="o">-</span> <span class="n">매뉴얼</span><span class="sr">/가이드 PDF/</span><span class="kt">HTML</span> <span class="n">임시</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">assets</span><span class="o">/</span>                                  <span class="o">-</span> <span class="n">폰트</span><span class="sr">/아이콘/</span><span class="n">템플릿</span> <span class="n">등</span> <span class="n">임시</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">quarantine</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">의심</span> <span class="nf">파일</span><span class="p">(</span><span class="n">검사</span> <span class="n">전</span> <span class="n">격리</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="kt">README_SORTING</span><span class="o">.</span><span class="n">md</span>                        <span class="o">-</span> <span class="n">분류</span> <span class="n">규칙</span> <span class="nf">요약</span><span class="p">(</span><span class="n">어디로</span> <span class="n">옮길지</span> <span class="n">안내</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">10</span><span class="n">_Today</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">20</span><span class="n">_Projects</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">25</span><span class="n">_Jobs</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">26</span><span class="n">_Datasets</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">30</span><span class="n">_Areas</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">31</span><span class="n">_Labs</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">32</span><span class="n">_SharedConfigs</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">40</span><span class="n">_Resources</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">50</span><span class="n">_Snippets</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">60</span><span class="n">_Assets</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">70</span><span class="n">_Exports</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">75</span><span class="n">_Releases</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">80</span><span class="n">_Tools</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">85</span><span class="n">_Environments</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">90</span><span class="n">_PersonalConfigs</span><span class="o">/</span>
<span class="err">└─</span> <span class="mi">99</span><span class="n">_Archive</span><span class="o">/</span>
</code></pre></div></div>

<hr />

<h2 id="라우팅-규칙다운로드--정본-위치">라우팅 규칙(다운로드 → 정본 위치)</h2>

<table>
  <thead>
    <tr>
      <th>분류(05_Downloads 하위)</th>
      <th>정리 완료 시 최종 위치(정본)</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>installers/</strong></td>
      <td><code class="language-plaintext highlighter-rouge">80_Tools/installers/</code></td>
      <td>버전·체크섬 기록(install_notes.md, SHA256)</td>
    </tr>
    <tr>
      <td><strong>datasets/</strong></td>
      <td><code class="language-plaintext highlighter-rouge">26_Datasets/datasets/&lt;name&gt;/vYYYY.MMDD/{raw→processed}</code></td>
      <td>압축 해제 후 manifest.yml 작성</td>
    </tr>
    <tr>
      <td><strong>manuals/</strong></td>
      <td><code class="language-plaintext highlighter-rouge">40_Resources/manuals/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/</code></td>
      <td>PDF/HTML/MD</td>
    </tr>
    <tr>
      <td><strong>assets/</strong> (폰트 등)</td>
      <td><code class="language-plaintext highlighter-rouge">60_Assets/fonts/…</code> <code class="language-plaintext highlighter-rouge">60_Assets/...</code></td>
      <td>라이선스 동봉, 버전 폴더 유지</td>
    </tr>
    <tr>
      <td><strong>_inbox/</strong> 기타</td>
      <td>용도에 따라 위 카테고리로 이동</td>
      <td>스크린샷/메모는 <code class="language-plaintext highlighter-rouge">00_Inbox</code>가 더 적합</td>
    </tr>
  </tbody>
</table>

<blockquote>
  <p>원칙: <strong>05_Downloads는 임시</strong>. 정리 끝나면 <strong>비워서 가볍게</strong> 유지!</p>
</blockquote>

<hr />

<h2 id="브라우저툴-연동선택">브라우저/툴 연동(선택)</h2>

<ul>
  <li>
    <p><strong>기본 다운로드 경로</strong> 를 <code class="language-plaintext highlighter-rouge">Work/05_Downloads/_inbox</code>로 지정.</p>
  </li>
  <li>
    <p>시스템 “다운로드” 폴더를 바꾸고 싶다면, <strong>심볼릭 링크</strong> 로 연결:</p>
  </li>
</ul>

<p><strong>macOS/Linux</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 기존 ~/Downloads를 백업/삭제 후 Today 착륙지로 링크</span>
<span class="nb">mv</span> ~/Downloads ~/Downloads.bak 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
ln</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/05_Downloads/_inbox"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Downloads"</span>
</code></pre></div></div>

<p><strong>Windows (PowerShell 관리자)</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ren</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Downloads"</span><span class="w"> </span><span class="nx">Downloads.bak</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Downloads"</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Work\05_Downloads\_inbox"</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>부담되면, 브라우저(Chrome/Edge/Firefox)에서 <strong>해당 경로만 기본 폴더로</strong> 지정해도 충분.</p>
</blockquote>

<hr />

<h2 id="주간-정리-루틴가볍게">주간 정리 루틴(가볍게)</h2>

<ol>
  <li>
    <p><strong>installers/</strong> → <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code>로 이동 + <code class="language-plaintext highlighter-rouge">install_notes.md</code> 업데이트</p>
  </li>
  <li>
    <p><strong>datasets/</strong> → 압축 해제 → <code class="language-plaintext highlighter-rouge">26_Datasets/datasets/&lt;name&gt;/vYYYY.MMDD/raw</code>에 배치</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">manifest.yml</code> 초안 작성, <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성(무결성)</li>
    </ul>
  </li>
  <li>
    <p><strong>manuals/</strong> → <code class="language-plaintext highlighter-rouge">40_Resources/manuals/...</code>로 이동</p>
  </li>
  <li>
    <p><strong>assets/</strong>(폰트 등) → <code class="language-plaintext highlighter-rouge">60_Assets/...</code>로 이동</p>
  </li>
  <li>
    <p><strong>_inbox/</strong> → 비우기(불필요 파일 삭제, 기타는 적절한 곳으로 라우팅)</p>
  </li>
  <li>
    <p><strong>quarantine/</strong> → 바이러스/정책 검사 후 처리</p>
  </li>
</ol>

<hr />

<h2 id="today런처에-한-줄-추가선택">today/런처에 한 줄 추가(선택)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sort downloads       | 05_Downloads               | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> README_SORTING.md
Open installers box  | 80_Tools/installers        | <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div>

<hr />

<h2 id="사용-시-주요-주의점">사용 시 주요 주의점</h2>

<ul>
  <li>
    <p><strong>정본은 각 전용 폴더</strong> : 05_Downloads는 <strong>절대 정본 보관소가 아님</strong>. 정리 후 반드시 이동.</p>
  </li>
  <li>
    <p><strong>체크섬/메타</strong> : 데이터셋·설치파일은 이동 전에 <strong>SHA256SUMS</strong> 생성, <code class="language-plaintext highlighter-rouge">manifest.yml</code>/<code class="language-plaintext highlighter-rouge">install_notes.md</code> 기록.</p>
  </li>
  <li>
    <p><strong>보안</strong> : 알 수 없는 파일은 <strong>quarantine/</strong>로 옮겨 검사 후 사용.</p>
  </li>
  <li>
    <p><strong>용량 관리</strong> : <code class="language-plaintext highlighter-rouge">_inbox</code>와 <code class="language-plaintext highlighter-rouge">datasets</code>의 압축본은 <strong>해제 후 삭제</strong>(정본은 26_Datasets).</p>
  </li>
  <li>
    <p><strong>.gitignore</strong> : Work를 레포로 관리한다면 <code class="language-plaintext highlighter-rouge">05_Downloads/**</code>는 반드시 <strong>무시</strong>.</p>
  </li>
  <li>
    <p><strong>중복 방지</strong> : 동일 파일이 정본 위치에 있으면 <strong>복사 금지</strong> , 덮어쓰기 대신 <strong>버전 폴더</strong> 사용.</p>
  </li>
</ul>

<p>필요하면 05_Downloads에서 <strong>자동 분류(installers/datasets/manuals/…)</strong> 하고<br />
정본 위치로 옮기면서 <strong>체크섬까지 생성</strong> 하는 스윕 스크립트(bash/PowerShell/tcsh)도 만들어줄게.</p>

<p class="chat--user">

오 생각보다 빠른 번호네 나는 98 정도 생각했어

</p>

<p>좋아, 번호는 <strong>취향/운영 철학</strong> 문제라 05든 98이든 OK야.<br />
아래처럼 <strong>장단점 비교 → 98로 쓸 때의 최종안(트리/규칙/리네임 명령)</strong>까지 한 번에 정리해줄게.</p>

<hr />

<h2 id="어떤-번호가-좋을까-짧은-판단-기준">어떤 번호가 좋을까? (짧은 판단 기준)</h2>

<ol>
  <li>
    <p><strong>05_Downloads (상단 배치)</strong></p>

    <ul>
      <li>
        <p>장점: 파일 탐색기에서 항상 <strong>맨 위</strong> 에 보여서 “받자마자 분류”가 쉬움.</p>
      </li>
      <li>
        <p>단점: 상단이 복잡해 보일 수 있음.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>98_Downloads (하단 배치)</strong> ← 네가 선호</p>

    <ul>
      <li>
        <p>장점: <strong>작업 트리의 말미</strong> 에 있어 시각적 소음 ↓, “임시/정리대상” 느낌이 분명.</p>
      </li>
      <li>
        <p>단점: 스크롤이 조금 늘어남. (대신 브라우저 기본경로만 잘 맞추면 문제 없음)</p>
      </li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>결론: <strong>98도 충분히 합리적</strong>. “임시·정리대상”을 뒤로 미루고 싶다면 98이 좋아.</p>
</blockquote>

<hr />

<h2 id="98로-쓰는-최종안-복붙용">98로 쓰는 최종안 (복붙용)</h2>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span><span class="o">/</span>
<span class="err">├─</span> <span class="mo">00</span><span class="n">_Inbox</span><span class="o">/</span>                                  <span class="o">-</span> <span class="n">수작업</span> <span class="n">스크랩</span><span class="o">/</span><span class="nf">임시</span><span class="p">(</span><span class="n">노트</span><span class="err">·</span><span class="n">스크린샷</span><span class="p">)</span>
<span class="err">├─</span> <span class="mi">10</span><span class="n">_Today</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">20</span><span class="n">_Projects</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">25</span><span class="n">_Jobs</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">26</span><span class="n">_Datasets</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">30</span><span class="n">_Areas</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">31</span><span class="n">_Labs</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">32</span><span class="n">_SharedConfigs</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">40</span><span class="n">_Resources</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">50</span><span class="n">_Snippets</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">60</span><span class="n">_Assets</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">70</span><span class="n">_Exports</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">75</span><span class="n">_Releases</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">80</span><span class="n">_Tools</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">85</span><span class="n">_Environments</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">90</span><span class="n">_PersonalConfigs</span><span class="o">/</span>
<span class="err">├─</span> <span class="mi">98</span><span class="n">_Downloads</span><span class="o">/</span>                              <span class="o">-</span> <span class="n">다운로드</span> <span class="nf">착륙지</span><span class="p">(</span><span class="kt">Landing</span> <span class="kt">Zone</span><span class="p">,</span> <span class="n">정리</span> <span class="n">전</span> <span class="n">임시</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">_inbox</span><span class="o">/</span>                                 <span class="o">-</span> <span class="n">브라우저</span><span class="o">/</span><span class="n">툴</span> <span class="n">기본</span> <span class="n">저장</span> <span class="n">경로</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">installers</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">설치</span> <span class="nf">파일</span><span class="p">(</span><span class="o">.</span><span class="n">exe</span><span class="sr">/.msi/.pkg/.dmg/.whl/</span><span class="o">.</span><span class="n">zip</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">datasets</span><span class="o">/</span>                               <span class="o">-</span> <span class="n">데이터셋</span> <span class="n">압축</span><span class="o">/</span><span class="kt">CSV</span> <span class="nf">임시</span><span class="p">(</span><span class="n">해제</span> <span class="n">전</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">manuals</span><span class="o">/</span>                                <span class="o">-</span> <span class="n">매뉴얼</span><span class="sr">/가이드 PDF/</span><span class="kt">HTML</span> <span class="n">임시</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">assets</span><span class="o">/</span>                                 <span class="o">-</span> <span class="n">폰트</span><span class="sr">/아이콘/</span><span class="n">템플릿</span> <span class="n">등</span> <span class="n">임시</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">quarantine</span><span class="o">/</span>                             <span class="o">-</span> <span class="n">의심</span> <span class="nf">파일</span><span class="p">(</span><span class="n">검사</span> <span class="n">전</span> <span class="n">격리</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="kt">README_SORTING</span><span class="o">.</span><span class="n">md</span>                       <span class="o">-</span> <span class="n">분류</span> <span class="n">규칙</span> <span class="nf">요약</span><span class="p">(</span><span class="n">최종</span> <span class="n">위치</span> <span class="n">안내</span><span class="p">)</span>
<span class="err">└─</span> <span class="mi">99</span><span class="n">_Archive</span><span class="o">/</span>
</code></pre></div></div>

<h3 id="라우팅-규칙변경-없음-폴더만-98로-교체">라우팅 규칙(변경 없음, 폴더만 98로 교체)</h3>

<table>
  <thead>
    <tr>
      <th>98_Downloads 하위</th>
      <th>정본 최종 위치</th>
      <th>비고</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>installers/</td>
      <td><code class="language-plaintext highlighter-rouge">80_Tools/installers/</code></td>
      <td>버전·체크섬 <code class="language-plaintext highlighter-rouge">install_notes.md</code>, <code class="language-plaintext highlighter-rouge">SHA256SUMS</code></td>
    </tr>
    <tr>
      <td>datasets/</td>
      <td><code class="language-plaintext highlighter-rouge">26_Datasets/datasets/&lt;name&gt;/vYYYY.MMDD/{raw→processed}</code></td>
      <td><code class="language-plaintext highlighter-rouge">manifest.yml</code> 작성</td>
    </tr>
    <tr>
      <td>manuals/</td>
      <td><code class="language-plaintext highlighter-rouge">40_Resources/manuals/&lt;vendor&gt;/&lt;product&gt;/&lt;version&gt;/</code></td>
      <td> </td>
    </tr>
    <tr>
      <td>assets/</td>
      <td><code class="language-plaintext highlighter-rouge">60_Assets/...</code></td>
      <td>폰트는 <code class="language-plaintext highlighter-rouge">60_Assets/fonts/...</code></td>
    </tr>
    <tr>
      <td>_inbox/ 기타</td>
      <td>상황에 맞게 위 카테고리로 이동</td>
      <td> </td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="안전한-리네임--브라우저-연동">안전한 리네임 &amp; 브라우저 연동</h2>

<h3 id="macoslinux-bashzsh-1">macOS/Linux (bash/zsh)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~/Work
<span class="nb">mkdir</span> <span class="nt">-p</span> 98_Downloads/<span class="o">{</span>_inbox,installers,datasets,manuals,assets,quarantine<span class="o">}</span>
<span class="c"># 기존 05_Downloads를 썼다면:</span>
<span class="o">[</span> <span class="nt">-d</span> 05_Downloads <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv </span>05_Downloads/<span class="k">*</span> 98_Downloads/ <span class="o">&amp;&amp;</span> <span class="nb">rmdir </span>05_Downloads 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># OS의 ~/Downloads를 Work/98_Downloads/_inbox로 심볼릭 링크(선택)</span>
<span class="nb">mv</span> ~/Downloads ~/Downloads.bak 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
ln</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/98_Downloads/_inbox"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Downloads"</span>
</code></pre></div></div>

<h3 id="windows-powershell-3">Windows (PowerShell)</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\_inbox"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\installers"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\datasets"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\manuals"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\assets"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\quarantine"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">
</span><span class="c"># 기존 05_Downloads 사용분 이동(있을 때만)</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\*"</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads"</span><span class="w"> </span><span class="nt">-Force</span><span class="p">;</span><span class="w"> </span><span class="n">Remove-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads"</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="c"># 사용자 Downloads → _inbox 링크(선택, 관리자 권장)</span><span class="w">
</span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Downloads"</span><span class="w"> </span><span class="s2">"Downloads.bak"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Downloads"</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Work\98_Downloads\_inbox"</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>브라우저(Chrome/Edge/Firefox)의 <strong>기본 다운로드 폴더</strong> 를 <code class="language-plaintext highlighter-rouge">Work/98_Downloads/_inbox</code>로 바꿔두면 더 편함.</p>
</blockquote>

<hr />

<h2 id="주의점번호-바꿔도-변하지-않는-원칙">주의점(번호 바꿔도 변하지 않는 원칙)</h2>

<ul>
  <li>
    <p><strong>정본은 각 전용 폴더</strong> : 98_Downloads는 <strong>임시 착륙지</strong> 일 뿐. 정리 후 반드시</p>

    <ul>
      <li>
        <p>설치파일 → <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code></p>
      </li>
      <li>
        <p>데이터셋 → <code class="language-plaintext highlighter-rouge">26_Datasets/...</code></p>
      </li>
      <li>
        <p>매뉴얼 → <code class="language-plaintext highlighter-rouge">40_Resources/manuals/...</code></p>
      </li>
      <li>
        <p>자산(폰트 등) → <code class="language-plaintext highlighter-rouge">60_Assets/...</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>체크섬·메타 필수</strong> : 데이터셋/설치파일은 이동 전에 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code>/<code class="language-plaintext highlighter-rouge">manifest.yml</code>(데이터셋), <code class="language-plaintext highlighter-rouge">install_notes.md</code>(설치파일)를 남겨 재현성 확보.</p>
  </li>
  <li>
    <p><strong>보안</strong> : 출처 불명은 <code class="language-plaintext highlighter-rouge">quarantine/</code>에 두고 검사 후 사용.</p>
  </li>
  <li>
    <p><strong>.gitignore</strong> : Work를 레포로 관리한다면 <code class="language-plaintext highlighter-rouge">98_Downloads/**</code>는 <strong>무조건 무시</strong>.</p>
  </li>
  <li>
    <p><strong>정리 주기</strong> : 주 1회 <code class="language-plaintext highlighter-rouge">_inbox</code> 비우기, 하위 카테고리도 정본으로 이동 후 비우기.</p>
  </li>
</ul>

<hr />

<h2 id="선택-today런처에-경로만-교체">(선택) today/런처에 경로만 교체</h2>

<p>기존 예시에서 <code class="language-plaintext highlighter-rouge">05_Downloads</code> → <code class="language-plaintext highlighter-rouge">98_Downloads</code>로 바꾸면 끝.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sort downloads       | 98_Downloads               | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> README_SORTING.md
Open installers box  | 80_Tools/installers        | <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div>

<p>원하면 <strong>주간 자동정리 스크립트</strong>(다운로드 자동 분류→정본 이동→체크섬 생성)도 98 경로 기준으로 만들어줄게.</p>

<p class="chat--user">

임시 보관소라는 관점에서는 앞쪽 번호가 어울린다고 보는건가

</p>

<p>짧은 답: <strong>네. “임시 보관소”는 앞쪽 번호(상단 배치)가 더 어울립니다.</strong><br />
이유는 “빨리 보고 빨리 비우게” 만드는 시각적/동선 효과가 커서예요.</p>

<h2 id="왜-앞번호상단가-유리한가">왜 앞번호(상단)가 유리한가</h2>

<ol>
  <li>
    <p><strong>가시성 → 행동 유도</strong><br />
폴더 트리 상단(00~10대)에 있으면 매일 시야에 들어와서 “정리해야지”가 자연스레 작동합니다.</p>
  </li>
  <li>
    <p><strong>흐름 정렬</strong><br />
하루 흐름이 <code class="language-plaintext highlighter-rouge">00_Inbox → 05_Downloads → 10_Today → 20_Projects/25_Jobs…</code>로 이어져 <strong>수집→정리→집중 작업</strong> 순서가 깔끔해집니다.</p>
  </li>
  <li>
    <p><strong>마찰 최소화</strong><br />
브라우저/툴의 기본 저장 폴더를 상단 폴더로 지정하기 쉽고, 경로가 짧아 조작이 빠릅니다.</p>
  </li>
</ol>

<h2 id="언제-뒤번호하단가-더-낫나">언제 뒤번호(하단)가 더 낫나</h2>

<ul>
  <li>
    <p>트리 상단을 “업무 핵심만” 보이게 하고 싶거나, 다운로드를 <strong>자주 안 쓰는</strong> 경우.</p>
  </li>
  <li>
    <p>팀 규칙/개인 취향상 “임시는 뒤로 보내 시각적 소음 ↓”가 더 편한 경우.<br />
→ 이런 상황이면 <strong>98_Downloads</strong> 도 충분히 합리적이에요.</p>
  </li>
</ul>

<h2 id="현실적인-권장안-둘-중-하나">현실적인 권장안 (둘 중 하나)</h2>

<ul>
  <li>
    <p><strong>A안(상단 임시 존)</strong> :<br />
<code class="language-plaintext highlighter-rouge">00_Inbox</code>(수작업 스크랩) + <code class="language-plaintext highlighter-rouge">05_Downloads</code>(자동 착륙지) + <code class="language-plaintext highlighter-rouge">10_Today</code>(실행 대시보드)</p>

    <ul>
      <li>매일 아침: <code class="language-plaintext highlighter-rouge">05_Downloads/_inbox</code> 비우기 → 정본 위치로 이동</li>
    </ul>
  </li>
  <li>
    <p><strong>B안(하단 임시 존)</strong> :<br />
<code class="language-plaintext highlighter-rouge">98_Downloads</code>로 두되 브라우저 기본경로만 <code class="language-plaintext highlighter-rouge">…/98_Downloads/_inbox</code>로 고정,<br />
Today/런처에서 바로 열 수 있게 단축만 둠</p>
  </li>
</ul>

<h2 id="결정-규칙간단">결정 규칙(간단)</h2>

<ul>
  <li>
    <p><strong>매일/자주 비울 거다</strong> → 앞번호(05)</p>
  </li>
  <li>
    <p><strong>거의 신경 안 쓰고 가끔 정리</strong> → 뒷번호(98)</p>
  </li>
  <li>
    <p>어떤 번호를 쓰든 <strong>정본은 해당 전용 폴더</strong>(26_Datasets, 80_Tools/installers, 60_Assets/fonts, 40_Resources/manuals…)로 반드시 이동하세요.</p>
  </li>
</ul>

<p>원하면 지금 구조를 A안(05) 또는 B안(98) 중 원하는 쪽으로 최종본 트리와 스크립트(브라우저 기본 경로 설정/주간 자동정리)까지 맞춰서 정리해 줄게.</p>

<p class="chat--user">

자주 정리하는게 맞긴하지만 귀찮아서 쌓아두긴해 내 성격상;

</p>

<p>그럼 “쌓이는 성격” 전제로, <strong>손 안 대도 굴러가는 자동 정리 세팅</strong> 으로 가자.<br />
아래 그대로 넣으면 <strong>주 1회/매일 자동으로</strong> <code class="language-plaintext highlighter-rouge">98_Downloads/_inbox</code>에 쌓인 걸 규칙대로 분류·이동하고, 체크섬도 남겨줘.</p>

<hr />

<h1 id="핵심-아이디어-귀찮음-최소화">핵심 아이디어 (귀찮음 최소화)</h1>

<ul>
  <li>
    <p><strong>다운로드 착륙지</strong> : <code class="language-plaintext highlighter-rouge">Work/98_Downloads/_inbox</code></p>
  </li>
  <li>
    <p><strong>자동 스윕 규칙</strong></p>

    <ul>
      <li>
        <p>설치파일( <code class="language-plaintext highlighter-rouge">.exe .msi .pkg .dmg .whl .deb .rpm .zip</code>(설치 키워드)) → <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code> + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> + <code class="language-plaintext highlighter-rouge">install_notes.md</code> append</p>
      </li>
      <li>
        <p>데이터셋( <code class="language-plaintext highlighter-rouge">.csv .tsv .parquet .json .xlsx</code> / 압축 내부에 csv/parquet가 있으면 포함) → <code class="language-plaintext highlighter-rouge">26_Datasets/_staging/YYYY-MM-DD/</code> + <code class="language-plaintext highlighter-rouge">SHA256SUMS</code></p>
      </li>
      <li>
        <table>
          <tbody>
            <tr>
              <td>매뉴얼( <code class="language-plaintext highlighter-rouge">.pdf .chm .html .htm</code> / 이름에 manual</td>
              <td>guide</td>
              <td>user</td>
              <td>spec) → <code class="language-plaintext highlighter-rouge">40_Resources/manuals/_incoming/</code></td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>
        <p>폰트( <code class="language-plaintext highlighter-rouge">.ttf .otf .woff .woff2</code>) → <code class="language-plaintext highlighter-rouge">60_Assets/fonts/_incoming/</code></p>
      </li>
      <li>그 외 → 그대로 둠(다음 스윕에서 재시도)</li>
    </ul>
  </li>
  <li>
    <p><strong>삭제 금지</strong> : 자동화는 “이동+기록”만. (실수 방지)</p>
  </li>
</ul>

<hr />

<h1 id="1-macoslinux용-자동-스윕-스크립트">1) macOS/Linux용: 자동 스윕 스크립트</h1>

<p><code class="language-plaintext highlighter-rouge">~/Work/80_Tools/scripts/sweep_downloads.sh</code></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail

<span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>
<span class="c"># 착륙지: 98이 없으면 05로 폴백</span>
<span class="nv">DL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/98_Downloads/_inbox"</span>
<span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$DL</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="nv">DL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/05_Downloads/_inbox"</span>

<span class="nv">DEST_INSTALL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/80_Tools/installers"</span>
<span class="nv">DEST_DATA_STAGE</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/26_Datasets/_staging/</span><span class="si">$(</span><span class="nb">date</span> +%Y-%m-%d<span class="si">)</span><span class="s2">"</span>
<span class="nv">DEST_MANUALS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/40_Resources/manuals/_incoming"</span>
<span class="nv">DEST_FONTS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/60_Assets/fonts/_incoming"</span>

<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_MANUALS</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_FONTS</span><span class="s2">"</span>

log<span class="o">()</span> <span class="o">{</span> <span class="nb">printf</span> <span class="s2">"[%s] %s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%F %T'</span><span class="si">)</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$*</span><span class="s2">"</span><span class="p">;</span> <span class="o">}</span>

<span class="c"># sha256 함수 (macOS 호환)</span>
sha256<span class="o">()</span> <span class="o">{</span>
  <span class="k">if </span><span class="nb">command</span> <span class="nt">-v</span> <span class="nb">sha256sum</span> <span class="o">&gt;</span>/dev/null 2&gt;&amp;1<span class="p">;</span> <span class="k">then </span><span class="nb">sha256sum</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="p">;</span>
  <span class="k">else </span>shasum <span class="nt">-a</span> 256 <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{print $1}'</span><span class="p">;</span> <span class="k">fi</span>
<span class="o">}</span>

is_installer<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">f</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">"</span>
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="se">\.</span><span class="o">(</span>exe|msi|pkg|dmg|deb|rpm|whl<span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.zip <span class="o">&amp;&amp;</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="o">(</span>setup|install|installer|msi|driver<span class="o">)</span> <span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0
  <span class="k">return </span>1
<span class="o">}</span>

is_manual<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">f</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">"</span>
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="se">\.</span><span class="o">(</span>pdf|chm|html|htm<span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">||</span> <span class="k">return </span>1
  <span class="k">return </span>0
<span class="o">}</span>

is_font<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">f</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">"</span>
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="se">\.</span><span class="o">(</span>ttf|otf|woff2?|ttc<span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0 <span class="o">||</span> <span class="k">return </span>1
<span class="o">}</span>

zip_has_dataset<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">z</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span>
  <span class="nb">command</span> <span class="nt">-v</span> unzip <span class="o">&gt;</span>/dev/null 2&gt;&amp;1 <span class="o">||</span> <span class="k">return </span>1
  unzip <span class="nt">-l</span> <span class="s2">"</span><span class="nv">$z</span><span class="s2">"</span> | <span class="nb">awk</span> <span class="s1">'{print $4}'</span> | <span class="nb">grep</span> <span class="nt">-Eiq</span> <span class="s1">'\.(csv|tsv|json|parquet|xlsx)$'</span>
<span class="o">}</span>

is_dataset<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">f</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> | <span class="nb">tr</span> <span class="s1">'[:upper:]'</span> <span class="s1">'[:lower:]'</span><span class="si">)</span><span class="s2">"</span>
  <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">=</span>~ <span class="se">\.</span><span class="o">(</span>csv|tsv|json|parquet|xlsx<span class="o">)</span><span class="nv">$ </span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0
  <span class="k">if</span> <span class="o">[[</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.zip <span class="o">||</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.tar.gz <span class="o">||</span> <span class="s2">"</span><span class="nv">$f</span><span class="s2">"</span> <span class="o">==</span> <span class="k">*</span>.tgz <span class="o">]]</span><span class="p">;</span> <span class="k">then
    </span>zip_has_dataset <span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> <span class="k">return </span>0
  <span class="k">fi
  return </span>1
<span class="o">}</span>

append_install_notes<span class="o">()</span> <span class="o">{</span>
  <span class="nb">local </span><span class="nv">file</span><span class="o">=</span><span class="s2">"</span><span class="nv">$1</span><span class="s2">"</span> <span class="nv">sha</span><span class="o">=</span><span class="s2">"</span><span class="nv">$2</span><span class="s2">"</span>
  <span class="nb">local </span><span class="nv">notes</span><span class="o">=</span><span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/install_notes.md"</span>
  <span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$notes</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="nb">printf</span> <span class="s2">"# Installers notes</span><span class="se">\n\n</span><span class="s2">"</span> <span class="o">&gt;</span> <span class="s2">"</span><span class="nv">$notes</span><span class="s2">"</span>
  <span class="nb">printf</span> <span class="s2">"- %s  </span><span class="se">\`</span><span class="s2">%s</span><span class="se">\`</span><span class="s2">  sha256=%s</span><span class="se">\n</span><span class="s2">"</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">date</span> <span class="s1">'+%F %T'</span><span class="si">)</span><span class="s2">"</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$file</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$sha</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$notes</span><span class="s2">"</span>
<span class="o">}</span>

<span class="c"># 메인 루프</span>
<span class="nb">shopt</span> <span class="nt">-s</span> nullglob
<span class="nv">found_any</span><span class="o">=</span>0
<span class="k">for </span>p <span class="k">in</span> <span class="s2">"</span><span class="nv">$DL</span><span class="s2">"</span>/<span class="k">*</span><span class="p">;</span> <span class="k">do</span>
  <span class="o">[[</span> <span class="nt">-f</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="k">continue
  </span><span class="nv">found_any</span><span class="o">=</span>1
  <span class="nv">base</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
  <span class="k">if </span>is_installer <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mv</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
    <span class="nv">sha</span><span class="o">=</span><span class="si">$(</span>sha256 <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span><span class="si">)</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$sha</span><span class="s2">  </span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$base</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/SHA256SUMS"</span>
    append_install_notes <span class="s2">"</span><span class="nv">$DEST_INSTALL</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$sha</span><span class="s2">"</span>
    log <span class="s2">"INSTALLER → </span><span class="nv">$DEST_INSTALL</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">elif </span>is_dataset <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">"</span>
    <span class="nb">mv</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
    <span class="nv">sha</span><span class="o">=</span><span class="si">$(</span>sha256 <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span><span class="si">)</span>
    <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$sha</span><span class="s2">  </span><span class="si">$(</span><span class="nb">basename</span> <span class="s2">"</span><span class="nv">$base</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span> <span class="o">&gt;&gt;</span> <span class="s2">"</span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">/SHA256SUMS"</span>
    log <span class="s2">"DATASET → </span><span class="nv">$DEST_DATA_STAGE</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">elif </span>is_manual <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mv</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_MANUALS</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
    log <span class="s2">"MANUAL → </span><span class="nv">$DEST_MANUALS</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">elif </span>is_font <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span><span class="p">;</span> <span class="k">then
    </span><span class="nb">mv</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$p</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$DEST_FONTS</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
    log <span class="s2">"FONT → </span><span class="nv">$DEST_FONTS</span><span class="s2">/</span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">else
    </span>log <span class="s2">"SKIP (unknown) </span><span class="nv">$base</span><span class="s2">"</span>
  <span class="k">fi
done

if</span> <span class="o">[[</span> <span class="nv">$found_any</span> <span class="nt">-eq</span> 0 <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span>log <span class="s2">"No files in </span><span class="nv">$DL</span><span class="s2">"</span>
<span class="k">fi</span>
</code></pre></div></div>

<p>실행권한:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod</span> +x ~/Work/80_Tools/scripts/sweep_downloads.sh
</code></pre></div></div>

<h3 id="자동-실행둘-중-택1">자동 실행(둘 중 택1)</h3>

<ul>
  <li>
    <p><strong>macOS (launchd, 매일 19:00)</strong></p>

    <ol>
      <li><code class="language-plaintext highlighter-rouge">~/Library/LaunchAgents/com.work.sweepdownloads.plist</code> 생성:
        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="cp">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span>
<span class="nt">&lt;plist</span> <span class="na">version=</span><span class="s">"1.0"</span><span class="nt">&gt;&lt;dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>Label<span class="nt">&lt;/key&gt;&lt;string&gt;</span>com.work.sweepdownloads<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>ProgramArguments<span class="nt">&lt;/key&gt;</span>
  <span class="nt">&lt;array&gt;&lt;string&gt;</span>/Users/$(whoami)/Work/80_Tools/scripts/sweep_downloads.sh<span class="nt">&lt;/string&gt;&lt;/array&gt;</span>
  <span class="nt">&lt;key&gt;</span>StartCalendarInterval<span class="nt">&lt;/key&gt;&lt;dict&gt;&lt;key&gt;</span>Hour<span class="nt">&lt;/key&gt;&lt;integer&gt;</span>19<span class="nt">&lt;/integer&gt;&lt;key&gt;</span>Minute<span class="nt">&lt;/key&gt;&lt;integer&gt;</span>0<span class="nt">&lt;/integer&gt;&lt;/dict&gt;</span>
  <span class="nt">&lt;key&gt;</span>StandardOutPath<span class="nt">&lt;/key&gt;&lt;string&gt;</span>/tmp/sweepdownloads.out<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>StandardErrorPath<span class="nt">&lt;/key&gt;&lt;string&gt;</span>/tmp/sweepdownloads.err<span class="nt">&lt;/string&gt;</span>
  <span class="nt">&lt;key&gt;</span>EnvironmentVariables<span class="nt">&lt;/key&gt;&lt;dict&gt;&lt;key&gt;</span>WORK_DIR<span class="nt">&lt;/key&gt;&lt;string&gt;</span>/Users/$(whoami)/Work<span class="nt">&lt;/string&gt;&lt;/dict&gt;</span>
<span class="nt">&lt;/dict&gt;&lt;/plist&gt;</span>
</code></pre></div>        </div>
      </li>
      <li>로드: <code class="language-plaintext highlighter-rouge">launchctl load ~/Library/LaunchAgents/com.work.sweepdownloads.plist</code></li>
    </ol>
  </li>
  <li>
    <p><strong>Linux (cron, 매주 금 19:00)</strong><br />
<code class="language-plaintext highlighter-rouge">crontab -e</code>:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 19 <span class="k">*</span> <span class="k">*</span> 5 <span class="nv">WORK_DIR</span><span class="o">=</span><span class="nv">$HOME</span>/Work <span class="nv">$HOME</span>/Work/80_Tools/scripts/sweep_downloads.sh <span class="o">&gt;&gt;</span> <span class="nv">$HOME</span>/sweepdownloads.log 2&gt;&amp;1
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h1 id="2-windows용-powershell-스윕">2) Windows용: PowerShell 스윕</h1>

<p><code class="language-plaintext highlighter-rouge">$HOME\Work\80_Tools\scripts\sweep_downloads.ps1</code></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$DL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"98_Downloads\_inbox"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$DL</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$DL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"05_Downloads\_inbox"</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"80_Tools\installers"</span><span class="w">
</span><span class="nv">$DEST_DATA_STAGE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="p">(</span><span class="s2">"26_Datasets\_staging\"</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="p">(</span><span class="n">Get-Date</span><span class="w"> </span><span class="nt">-Format</span><span class="w"> </span><span class="s2">"yyyy-MM-dd"</span><span class="p">))</span><span class="w">
</span><span class="nv">$DEST_MANUALS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"40_Resources\manuals\_incoming"</span><span class="w">
</span><span class="nv">$DEST_FONTS</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"60_Assets\fonts\_incoming"</span><span class="w">
</span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$DEST_INSTALL</span><span class="p">,</span><span class="nv">$DEST_DATA_STAGE</span><span class="p">,</span><span class="nv">$DEST_MANUALS</span><span class="p">,</span><span class="nv">$DEST_FONTS</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">Is-Installer</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="nv">$e</span><span class="o">=</span><span class="p">[</span><span class="n">IO.Path</span><span class="p">]::</span><span class="n">GetExtension</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">();</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="s2">".exe"</span><span class="p">,</span><span class="s2">".msi"</span><span class="p">,</span><span class="s2">".pkg"</span><span class="p">,</span><span class="s2">".dmg"</span><span class="p">,</span><span class="s2">".whl"</span><span class="p">,</span><span class="s2">".deb"</span><span class="p">,</span><span class="s2">".rpm"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="nv">$e</span><span class="w"> </span><span class="o">-or</span><span class="w"> </span><span class="p">(</span><span class="nv">$e</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="s2">".zip"</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="n">Split-Path</span><span class="w"> </span><span class="nv">$p</span><span class="w"> </span><span class="nt">-Leaf</span><span class="p">)</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s2">"(setup|install|installer|msi|driver)"</span><span class="p">)</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Is-Manual</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="s2">".pdf"</span><span class="p">,</span><span class="s2">".chm"</span><span class="p">,</span><span class="s2">".html"</span><span class="p">,</span><span class="s2">".htm"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="p">([</span><span class="n">IO.Path</span><span class="p">]::</span><span class="n">GetExtension</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">())</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Is-Font</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="s2">".ttf"</span><span class="p">,</span><span class="s2">".otf"</span><span class="p">,</span><span class="s2">".woff"</span><span class="p">,</span><span class="s2">".woff2"</span><span class="p">,</span><span class="s2">".ttc"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="p">([</span><span class="n">IO.Path</span><span class="p">]::</span><span class="n">GetExtension</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">())</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">ZipHasDataset</span><span class="p">(</span><span class="nv">$zip</span><span class="p">){</span><span class="w">
  </span><span class="kr">try</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Add-Type</span><span class="w"> </span><span class="nt">-AssemblyName</span><span class="w"> </span><span class="nx">System.IO.Compression.FileSystem</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">Stop</span><span class="w">
    </span><span class="nv">$z</span><span class="o">=</span><span class="p">[</span><span class="n">IO.Compression.ZipFile</span><span class="p">]::</span><span class="n">OpenRead</span><span class="p">(</span><span class="nv">$zip</span><span class="p">)</span><span class="w">
    </span><span class="nv">$m</span><span class="o">=</span><span class="bp">$false</span><span class="w">
    </span><span class="kr">foreach</span><span class="p">(</span><span class="nv">$e</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$z</span><span class="o">.</span><span class="nf">Entries</span><span class="p">){</span><span class="w"> </span><span class="kr">if</span><span class="p">(</span><span class="nv">$e</span><span class="o">.</span><span class="nf">FullName</span><span class="w"> </span><span class="o">-match</span><span class="w"> </span><span class="s1">'\.(csv|tsv|json|parquet|xlsx)$'</span><span class="p">){</span><span class="w"> </span><span class="nv">$m</span><span class="o">=</span><span class="bp">$true</span><span class="p">;</span><span class="w"> </span><span class="kr">break</span><span class="w"> </span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="nv">$z</span><span class="o">.</span><span class="nf">Dispose</span><span class="p">();</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="nv">$m</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">catch</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="bp">$false</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Is-Dataset</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w">
  </span><span class="nv">$e</span><span class="o">=</span><span class="p">[</span><span class="n">IO.Path</span><span class="p">]::</span><span class="n">GetExtension</span><span class="p">(</span><span class="nv">$p</span><span class="p">)</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="s2">".csv"</span><span class="p">,</span><span class="s2">".tsv"</span><span class="p">,</span><span class="s2">".json"</span><span class="p">,</span><span class="s2">".parquet"</span><span class="p">,</span><span class="s2">".xlsx"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="nv">$e</span><span class="p">){</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="bp">$true</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="s2">".zip"</span><span class="p">,</span><span class="s2">".gz"</span><span class="p">,</span><span class="s2">".tgz"</span><span class="w"> </span><span class="o">-contains</span><span class="w"> </span><span class="nv">$e</span><span class="w"> </span><span class="o">-and</span><span class="w"> </span><span class="p">(</span><span class="n">ZipHasDataset</span><span class="w"> </span><span class="nv">$p</span><span class="p">)){</span><span class="w"> </span><span class="kr">return</span><span class="w"> </span><span class="bp">$true</span><span class="w"> </span><span class="p">}</span><span class="w">
  </span><span class="kr">return</span><span class="w"> </span><span class="bp">$false</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">function</span><span class="w"> </span><span class="nf">Sha256</span><span class="p">(</span><span class="nv">$p</span><span class="p">){</span><span class="w"> </span><span class="p">(</span><span class="n">Get-FileHash</span><span class="w"> </span><span class="nv">$p</span><span class="w"> </span><span class="nt">-Algorithm</span><span class="w"> </span><span class="nx">SHA256</span><span class="p">)</span><span class="o">.</span><span class="nf">Hash</span><span class="o">.</span><span class="nf">ToLower</span><span class="p">()</span><span class="w"> </span><span class="p">}</span><span class="w">

</span><span class="n">Get-ChildItem</span><span class="w"> </span><span class="nv">$DL</span><span class="w"> </span><span class="nt">-File</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ForEach-Object</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="nv">$src</span><span class="o">=</span><span class="bp">$_</span><span class="o">.</span><span class="nf">FullName</span><span class="p">;</span><span class="w"> </span><span class="nv">$name</span><span class="o">=</span><span class="bp">$_</span><span class="o">.</span><span class="nf">Name</span><span class="w">
  </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Is-Installer</span><span class="w"> </span><span class="nv">$src</span><span class="p">){</span><span class="w">
    </span><span class="nv">$dst</span><span class="o">=</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="nv">$name</span><span class="p">;</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="nv">$src</span><span class="w"> </span><span class="nv">$dst</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="nv">$sha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sha256</span><span class="w"> </span><span class="nv">$dst</span><span class="w">
    </span><span class="s2">"</span><span class="nv">$sha</span><span class="s2">  </span><span class="nv">$name</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="s2">"SHA256SUMS"</span><span class="p">)</span><span class="w">
    </span><span class="nv">$notes</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_INSTALL</span><span class="w"> </span><span class="s2">"install_notes.md"</span><span class="w">
    </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$notes</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="s2">"# Installers notes</span><span class="se">`n</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-File</span><span class="w"> </span><span class="nv">$notes</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="s2">"- </span><span class="si">$(</span><span class="n">Get-Date</span><span class="w"> </span><span class="nt">-Format</span><span class="w"> </span><span class="s1">'yyyy-MM-dd HH:mm:ss'</span><span class="p">)</span><span class="s2">  </span><span class="se">`$</span><span class="s2">name</span><span class="se">` </span><span class="s2"> sha256=</span><span class="nv">$sha</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="nv">$notes</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"INSTALLER → </span><span class="nv">$dst</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">elseif</span><span class="w"> </span><span class="p">(</span><span class="n">Is-Dataset</span><span class="w"> </span><span class="nv">$src</span><span class="p">){</span><span class="w">
    </span><span class="nv">$dst</span><span class="o">=</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_DATA_STAGE</span><span class="w"> </span><span class="nv">$name</span><span class="p">;</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="nv">$src</span><span class="w"> </span><span class="nv">$dst</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="nv">$sha</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Sha256</span><span class="w"> </span><span class="nv">$dst</span><span class="w">
    </span><span class="s2">"</span><span class="nv">$sha</span><span class="s2">  </span><span class="nv">$name</span><span class="s2">"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Add-Content</span><span class="w"> </span><span class="p">(</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_DATA_STAGE</span><span class="w"> </span><span class="s2">"SHA256SUMS"</span><span class="p">)</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"DATASET → </span><span class="nv">$dst</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">elseif</span><span class="w"> </span><span class="p">(</span><span class="n">Is-Manual</span><span class="w"> </span><span class="nv">$src</span><span class="p">){</span><span class="w">
    </span><span class="nv">$dst</span><span class="o">=</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_MANUALS</span><span class="w"> </span><span class="nv">$name</span><span class="p">;</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="nv">$src</span><span class="w"> </span><span class="nv">$dst</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"MANUAL → </span><span class="nv">$dst</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">elseif</span><span class="w"> </span><span class="p">(</span><span class="n">Is-Font</span><span class="w"> </span><span class="nv">$src</span><span class="p">){</span><span class="w">
    </span><span class="nv">$dst</span><span class="o">=</span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$DEST_FONTS</span><span class="w"> </span><span class="nv">$name</span><span class="p">;</span><span class="w"> </span><span class="n">Move-Item</span><span class="w"> </span><span class="nv">$src</span><span class="w"> </span><span class="nv">$dst</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"FONT → </span><span class="nv">$dst</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="kr">else</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">Write-Host</span><span class="w"> </span><span class="s2">"SKIP (unknown) </span><span class="nv">$name</span><span class="s2">"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><strong>스케줄러 등록</strong> (매일 19:00):</p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$act</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-ScheduledTaskAction</span><span class="w"> </span><span class="nt">-Execute</span><span class="w"> </span><span class="s2">"pwsh.exe"</span><span class="w"> </span><span class="nt">-Argument</span><span class="w"> </span><span class="s2">"-NoProfile -File </span><span class="se">`"</span><span class="bp">$HOME</span><span class="s2">\Work\80_Tools\scripts\sweep_downloads.ps1</span><span class="se">`"</span><span class="s2">"</span><span class="w">
</span><span class="nv">$trg</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-ScheduledTaskTrigger</span><span class="w"> </span><span class="nt">-Daily</span><span class="w"> </span><span class="nt">-At</span><span class="w"> </span><span class="nx">19:00</span><span class="w">
</span><span class="n">Register-ScheduledTask</span><span class="w"> </span><span class="nt">-TaskName</span><span class="w"> </span><span class="s2">"WorkSweepDownloads"</span><span class="w"> </span><span class="nt">-Action</span><span class="w"> </span><span class="nv">$act</span><span class="w"> </span><span class="nt">-Trigger</span><span class="w"> </span><span class="nv">$trg</span><span class="w"> </span><span class="nt">-Description</span><span class="w"> </span><span class="s2">"Move downloads to canonical locations"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="3-today런처에-수동-실행-버튼선택">3) today/런처에 수동 실행 버튼(선택)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sweep downloads now   | 80_Tools/scripts | ./sweep_downloads.sh
</code></pre></div></div>

<p>(PowerShell이면 <code class="language-plaintext highlighter-rouge">./sweep_downloads.ps1</code>)</p>

<hr />

<h2 id="운용-팁--주의점">운용 팁 &amp; 주의점</h2>

<ul>
  <li>
    <p><strong>정본만 이동</strong> : 스크립트는 <em>이동만</em> 하므로 되돌리기 쉬워요. 삭제는 손대지 않음.</p>
  </li>
  <li>
    <p><strong>데이터셋은<code class="language-plaintext highlighter-rouge">_staging</code></strong>: 이름/버전 결정을 못하니 <code class="language-plaintext highlighter-rouge">26_Datasets/_staging/YYYY-MM-DD/</code>로 모읍니다. 필요할 때만 정식 버전(<code class="language-plaintext highlighter-rouge">datasets/&lt;name&gt;/vYYYY.MMDD/…</code>)으로 <strong>승격</strong> 하세요.</p>
  </li>
  <li>
    <p><strong>체크섬 자동 기록</strong> : 설치파일/데이터셋은 <code class="language-plaintext highlighter-rouge">SHA256SUMS</code> 생성, 설치파일은 <code class="language-plaintext highlighter-rouge">install_notes.md</code>에 타임스탬프까지 남김.</p>
  </li>
  <li>
    <p><strong>미인식 파일</strong> : 규칙에 안 맞으면 그냥 건드리지 않습니다(다음 스윕에 재시도).</p>
  </li>
  <li>
    <p><strong>안전망</strong> : 처음 1~2주 동안은 <strong>수동 실행으로 결과 확인</strong> 해 보세요. 문제가 없으면 스케줄러 켜두면 끝.</p>
  </li>
</ul>

<p>원하면 위 스크립트에 <strong>추가 규칙(예: 특정 프로젝트 이름 키워드로 데이터셋 자동 폴더명 부여, zip 내부 구조에 따른 자동 풀기)</strong>도 얹어 줄게.</p>

<p class="chat--user">

그냥 05로 할게

</p>

<p>좋아, <strong>05로 확정!</strong> 다운로드 착륙지를 <code class="language-plaintext highlighter-rouge">05_Downloads</code>로 쓰는 설정을 한 번에 마무리하자. 아래 그대로 따라 하면 끝이야.</p>

<hr />

<h1 id="1-폴더-만들기-복붙">1) 폴더 만들기 (복붙)</h1>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Work</span><span class="o">/</span>
<span class="err">├─</span> <span class="mo">05</span><span class="n">_Downloads</span><span class="o">/</span>                 <span class="o">-</span> <span class="n">다운로드</span> <span class="nf">착륙지</span><span class="p">(</span><span class="kt">Landing</span> <span class="kt">Zone</span><span class="p">,</span> <span class="n">정리</span> <span class="n">전</span> <span class="n">임시</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">_inbox</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">브라우저</span><span class="o">/</span><span class="n">툴</span> <span class="n">기본</span> <span class="n">저장</span> <span class="n">경로</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">installers</span><span class="o">/</span>                <span class="o">-</span> <span class="n">설치</span> <span class="nf">파일</span><span class="p">(</span><span class="o">.</span><span class="n">exe</span><span class="sr">/.msi/.pkg/.dmg/.whl/</span><span class="o">.</span><span class="n">zip</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">datasets</span><span class="o">/</span>                  <span class="o">-</span> <span class="n">데이터셋</span> <span class="n">압축</span><span class="o">/</span><span class="kt">CSV</span> <span class="nf">임시</span><span class="p">(</span><span class="n">해제</span> <span class="n">전</span><span class="p">)</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">manuals</span><span class="o">/</span>                   <span class="o">-</span> <span class="n">매뉴얼</span><span class="sr">/가이드 PDF/</span><span class="kt">HTML</span> <span class="n">임시</span>
<span class="err">│</span>  <span class="err">├─</span> <span class="n">assets</span><span class="o">/</span>                    <span class="o">-</span> <span class="n">폰트</span><span class="sr">/아이콘/</span><span class="n">템플릿</span> <span class="n">등</span> <span class="n">임시</span>
<span class="err">│</span>  <span class="err">└─</span> <span class="n">quarantine</span><span class="o">/</span>                <span class="o">-</span> <span class="n">의심</span> <span class="nf">파일</span><span class="p">(</span><span class="n">검사</span> <span class="n">전</span> <span class="n">격리</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="2-초기-셋업-step-by-step">2) 초기 셋업 (step-by-step)</h1>

<h2 id="macos--linux-1">macOS / Linux</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/Work/05_Downloads/<span class="o">{</span>_inbox,installers,datasets,manuals,assets,quarantine<span class="o">}</span>

<span class="c"># (선택) OS 기본 Downloads → Work/05_Downloads/_inbox 로 바꾸기</span>
<span class="nb">mv</span> ~/Downloads ~/Downloads.bak 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
ln</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Work/05_Downloads/_inbox"</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/Downloads"</span>
</code></pre></div></div>

<h2 id="windows-powershell-4">Windows (PowerShell)</h2>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">New-Item</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\_inbox"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\installers"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\datasets"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\manuals"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\assets"</span><span class="p">,</span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads\quarantine"</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">Out-Null</span><span class="w">

</span><span class="c"># (선택) 사용자 Downloads → Work\05_Downloads\_inbox 링크</span><span class="w">
</span><span class="n">Rename-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Downloads"</span><span class="w"> </span><span class="s2">"Downloads.bak"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="n">cmd</span><span class="w"> </span><span class="nx">/c</span><span class="w"> </span><span class="nx">mklink</span><span class="w"> </span><span class="nx">/D</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Downloads"</span><span class="w"> </span><span class="s2">"%USERPROFILE%\Work\05_Downloads\_inbox"</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>브라우저(Chrome/Edge/Firefox) <strong>기본 다운로드 폴더</strong> 를 <code class="language-plaintext highlighter-rouge">Work/05_Downloads/_inbox</code>로 설정하면 더 깔끔.</p>
</blockquote>

<hr />

<h1 id="3-사용-중이면-98에서-05로-이관">3) (사용 중이면) 98에서 05로 이관</h1>

<h3 id="macos--linux-2">macOS / Linux</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span> <span class="nt">-d</span> ~/Work/98_Downloads <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="nb">mv</span> ~/Work/98_Downloads/<span class="k">*</span> ~/Work/05_Downloads/ 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
rmdir</span> ~/Work/98_Downloads 2&gt;/dev/null <span class="o">||</span> <span class="nb">true
sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'s#/98_Downloads/#/05_Downloads/#g'</span> ~/Work/10_Today/shortcuts.list 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>
</code></pre></div></div>

<h3 id="windows-powershell-5">Windows (PowerShell)</h3>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads"</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
  </span><span class="n">Move-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads\*"</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\05_Downloads"</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
  </span><span class="n">Remove-Item</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\98_Downloads"</span><span class="w"> </span><span class="nt">-Force</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">SilentlyContinue</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="p">(</span><span class="n">Get-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="p">)</span><span class="w"> </span><span class="o">-replace</span><span class="w"> </span><span class="s1">'/98_Downloads/'</span><span class="p">,</span><span class="s1">'/05_Downloads/'</span><span class="w"> </span><span class="o">|</span><span class="w">
  </span><span class="n">Set-Content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work\10_Today\shortcuts.list"</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="4-자동-정리-스크립트05-우선-사용-팁">4) 자동 정리 스크립트(05 우선) 사용 팁</h1>

<p>내가 줬던 <strong>스윕 스크립트</strong> 를 05 우선으로 돌리려면, 상단의 다운로드 경로만 이렇게 잡으면 돼.</p>

<p><strong>bash/zsh (<code class="language-plaintext highlighter-rouge">sweep_downloads.sh</code>)</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">W</span><span class="o">=</span><span class="s2">"</span><span class="k">${</span><span class="nv">WORK_DIR</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/Work</span><span class="k">}</span><span class="s2">"</span>
<span class="nv">DL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/05_Downloads/_inbox"</span>
<span class="o">[[</span> <span class="nt">-d</span> <span class="s2">"</span><span class="nv">$DL</span><span class="s2">"</span> <span class="o">]]</span> <span class="o">||</span> <span class="nv">DL</span><span class="o">=</span><span class="s2">"</span><span class="nv">$W</span><span class="s2">/98_Downloads/_inbox"</span>   <span class="c"># (있으면 폴백)</span>
</code></pre></div></div>

<p><strong>PowerShell (<code class="language-plaintext highlighter-rouge">sweep_downloads.ps1</code>)</strong></p>
<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">WORK_DIR</span><span class="p">;</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$W</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="bp">$HOME</span><span class="s2">\Work"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="nv">$DL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"05_Downloads\_inbox"</span><span class="w">
</span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nv">$DL</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nv">$DL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">Join-Path</span><span class="w"> </span><span class="nv">$W</span><span class="w"> </span><span class="s2">"98_Downloads\_inbox"</span><span class="w"> </span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<blockquote>
  <p>스케줄(매일/매주) 등록 방법은 이전 메시지 그대로 쓰면 OK.</p>
</blockquote>

<hr />

<h1 id="5-today-런처에-한-줄선택">5) Today 런처에 한 줄(선택)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sort downloads       | 05_Downloads               | <span class="k">${</span><span class="nv">EDITOR</span><span class="k">:-</span><span class="nv">vi</span><span class="k">}</span> README_SORTING.md
Open installers box  | 80_Tools/installers        | <span class="nb">ls</span> <span class="nt">-al</span>
</code></pre></div></div>

<hr />

<h2 id="사용-시-주의점요약">사용 시 주의점(요약)</h2>

<ul>
  <li>
    <p><strong>05_Downloads는 임시</strong> : 정본은 반드시 전용 위치로</p>

    <ul>
      <li>
        <p>설치파일 → <code class="language-plaintext highlighter-rouge">80_Tools/installers/</code> (+ <code class="language-plaintext highlighter-rouge">install_notes.md</code>/<code class="language-plaintext highlighter-rouge">SHA256SUMS</code>)</p>
      </li>
      <li>
        <p>데이터셋 → <code class="language-plaintext highlighter-rouge">26_Datasets/...</code> (+ <code class="language-plaintext highlighter-rouge">manifest.yml</code>/<code class="language-plaintext highlighter-rouge">SHA256SUMS</code>)</p>
      </li>
      <li>
        <p>매뉴얼 → <code class="language-plaintext highlighter-rouge">40_Resources/manuals/...</code></p>
      </li>
      <li>
        <p>자산(폰트 등) → <code class="language-plaintext highlighter-rouge">60_Assets/...</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>자동화 적극 활용</strong> : 스윕 스크립트를 <strong>스케줄러에 등록</strong> 해 “손 안 대고” 분류·이동.</p>
  </li>
  <li>
    <p><strong>보안</strong> : 출처 불명은 <code class="language-plaintext highlighter-rouge">quarantine/</code>에 먼저 두고 검사.</p>
  </li>
  <li>
    <p><strong>.gitignore</strong> : Work를 레포로 관리한다면 <code class="language-plaintext highlighter-rouge">05_Downloads/**</code>는 <strong>항상 제외</strong>.</p>
  </li>
  <li>
    <p><strong>정리 루틴</strong> : 최소 주 1회 <code class="language-plaintext highlighter-rouge">_inbox</code> 확인(자동화가 못 잡은 항목만 처리).</p>
  </li>
</ul>

<p>원하면 네 환경(운영체제/셸)에 맞춰 스윕 스크립트를 <strong>05 기준으로 고정한 최종본</strong> 을 깔끔히 묶어서 드릴게.</p>]]></content><author><name>hvppyarchive</name></author><category term="misc" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">gvim 폰트 설정</title><link href="https://hvppyarchive.github.io/linux/gvim-font-settings/" rel="alternate" type="text/html" title="gvim 폰트 설정" /><published>2025-08-26T18:12:41+09:00</published><updated>2025-08-26T18:12:41+09:00</updated><id>https://hvppyarchive.github.io/linux/gvim-font-settings</id><content type="html" xml:base="https://hvppyarchive.github.io/linux/gvim-font-settings/"><![CDATA[<p class="chat--user">

gvim에서 글자 높이 간격 조절 못하나

</p>

<p>가능해요! gVim(그래픽 Vim)에서는 <strong><code class="language-plaintext highlighter-rouge">'linespace'</code> 옵션</strong>으로 줄 간격(글자 높이 사이 여백)을 조절합니다.</p>

<h3 id="바로-써보기-일시적으로">바로 써보기 (일시적으로)</h3>

<p>명령줄 창에서:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>:set <span class="nv">linespace</span><span class="o">=</span>4      <span class="s2">" 줄 사이에 4픽셀 여유
:set linespace=0      "</span> 기본값<span class="o">(</span>여유 없음<span class="o">)</span>
</code></pre></div></div>

<ul>
  <li>
    <p>값은 “픽셀” 단위예요. 숫자가 클수록 줄 간격이 넓어집니다.</p>
  </li>
  <li>
    <p>일부 환경에선 음수도 되지만(줄을 더 촘촘히), 글자 잘림이 생길 수 있어 보통 <strong>0 이상</strong> 을 권장합니다.</p>
  </li>
</ul>

<h3 id="항상-적용하기-gvimrc">항상 적용하기 (gvimrc)</h3>

<p>GUI에서만 적용하려면 gVim 전용 설정 파일에 넣는 게 깔끔해요.</p>

<ul>
  <li>
    <p><strong>Windows:</strong> <code class="language-plaintext highlighter-rouge">_gvimrc</code></p>
  </li>
  <li>
    <p><strong>macOS/Linux:</strong> <code class="language-plaintext highlighter-rouge">~/.gvimrc</code></p>
  </li>
</ul>

<p>예시:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim

" ~/.gvimrc
set linespace=3
</code></pre></div></div>

<h3 id="참고팁">참고/팁</h3>

<ul>
  <li>
    <p><strong>터미널 Vim</strong>(콘솔에서 돌리는 Vim)은 <code class="language-plaintext highlighter-rouge">linespace</code>가 없어요. 그땐 터미널 앱 자체의 “line spacing/line height” 설정을 조절해야 합니다.</p>
  </li>
  <li>줄 간격이 너무 빽빽하거나 헐렁하면 <strong>폰트 크기</strong> 도 같이 조절해 보세요:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim
    
" 예) Windows
set guifont=Consolas:h14
" 예) macOS
set guifont=Menlo:h14
</code></pre></div>    </div>
  </li>
  <li>도움말: <code class="language-plaintext highlighter-rouge">:help 'linespace'</code></li>
</ul>

<p>원하시는 느낌(조금만 넓게: 2<del>3, 더 넓게: 4</del> 6)을 몇 값 시도해 보시고 가장 편한 숫자로 정착하시면 됩니다.</p>

<p class="chat--user">

한글 폰트가 별로라서 읽기 힘든건가. sudo 권한 없이 redhat 8.x에 폰트 설치해서 gvim에 사용하고 싶어

</p>

<p>가능하죠! <code class="language-plaintext highlighter-rouge">sudo</code> 없이도 <strong>개인 사용자 영역</strong> 에 폰트를 넣고 gVim에서 바로 쓸 수 있어요.<br />
아래 순서 그대로 따라오세요 (RHEL 8.x 기준).</p>

<h1 id="1-내-폰트-폴더-준비">1) 내 폰트 폴더 준비</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.local/share/fonts      <span class="c"># 표준 위치 (권장)</span>
<span class="c"># (구형 환경 호환용) ~/.fonts 도 인식되지만, RHEL 8이라면 위 경로를 쓰세요.</span>
</code></pre></div></div>

<h1 id="2-폰트-파일-복사">2) 폰트 파일 복사</h1>

<p>다운로드한 <code class="language-plaintext highlighter-rouge">.ttf</code>/<code class="language-plaintext highlighter-rouge">.otf</code> 파일을 위 폴더로 옮깁니다.<br />
(예: D2Coding, NanumGothicCoding 같은 한글 모노스페이스 폰트가 gVim에 잘 맞습니다.)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cp</span> ~/Downloads/D2Coding<span class="k">*</span>.ttf ~/.local/share/fonts/
</code></pre></div></div>

<h1 id="3-폰트-캐시-갱신-sudo-불필요">3) 폰트 캐시 갱신 (sudo 불필요)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fc-cache <span class="nt">-f</span> <span class="nt">-v</span> ~/.local/share/fonts
</code></pre></div></div>

<ul>
  <li>
    <p>정상이라면 새로 스캔된 폰트 목록이 주르륵 출력돼요.</p>
  </li>
  <li>
    <p>확인용:</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fc-list | <span class="nb">grep</span> <span class="nt">-i</span> d2coding
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="4-gvim에서-폰트-적용">4) gVim에서 폰트 적용</h1>

<h2 id="a-일시-적용">(a) 일시 적용</h2>

<p>gVim 명령줄(<code class="language-plaintext highlighter-rouge">:</code>)에서:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim

:set guifont=D2Coding\ 12
</code></pre></div></div>

<ul>
  <li>
    <p>공백은 <code class="language-plaintext highlighter-rouge">\</code>로 이스케이프합니다. (<code class="language-plaintext highlighter-rouge">D2Coding 12</code> → <code class="language-plaintext highlighter-rouge">D2Coding\ 12</code>)</p>
  </li>
  <li>
    <p>다른 예:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim
    
:set guifont=NanumGothic\ Coding\ 13
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="b-항상-적용-권장">(b) 항상 적용 (권장)</h2>

<p><code class="language-plaintext highlighter-rouge">~/.gvimrc</code>에 추가:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim

" 기본 인코딩과 폰트
set encoding=utf-8
set guifont=D2Coding\ 12

" 줄 간격이 답답하면 조금 늘리기
set linespace=3
</code></pre></div></div>

<ul>
  <li>폰트 후보를 콤마로 여러 개 적어 <strong>첫 번째로 사용 가능한</strong> 폰트를 쓰게 할 수도 있어요:
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim
    
set guifont=D2Coding\ 12,NanumGothic\ Coding\ 13,DejaVu\ Sans\ Mono\ 12
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="5-선택-렌더링-품질-개선">5) (선택) 렌더링 품질 개선</h1>

<p>개인 설정으로 안티앨리어싱/힌팅을 켜면 가독성이 더 좋아집니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.config/fontconfig/conf.d
<span class="nb">cat</span> <span class="o">&gt;</span> ~/.config/fontconfig/conf.d/99-user-rendering.conf <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">EOF</span><span class="sh">'
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd"&gt;
&lt;fontconfig&gt;
  &lt;match target="font"&gt;
    &lt;edit name="antialias" mode="assign"&gt;&lt;bool&gt;true&lt;/bool&gt;&lt;/edit&gt;
    &lt;edit name="hinting"   mode="assign"&gt;&lt;bool&gt;true&lt;/bool&gt;&lt;/edit&gt;
    &lt;edit name="hintstyle" mode="assign"&gt;&lt;const&gt;hintslight&lt;/const&gt;&lt;/edit&gt;
    &lt;edit name="rgba"      mode="assign"&gt;&lt;const&gt;rgb&lt;/const&gt;&lt;/edit&gt;
    &lt;edit name="lcdfilter" mode="assign"&gt;&lt;const&gt;lcddefault&lt;/const&gt;&lt;/edit&gt;
  &lt;/match&gt;
&lt;/fontconfig&gt;
</span><span class="no">EOF
</span>fc-cache <span class="nt">-f</span> <span class="nt">-v</span>
</code></pre></div></div>

<h1 id="6-문제-해결-팁">6) 문제 해결 팁</h1>

<ul>
  <li>
    <p><strong>gVim 재시작</strong> 후에도 폰트가 안 바뀌면 <code class="language-plaintext highlighter-rouge">:echo &amp;guifont</code>로 적용값 확인.</p>
  </li>
  <li>
    <p>폰트 이름은 <code class="language-plaintext highlighter-rouge">fc-list | cut -d: -f2 | sort -u | less</code>로 실제 등록명을 확인하세요.</p>
  </li>
  <li>
    <p>일부 개발 폰트(예: JetBrains Mono, Cascadia Code)는 <strong>한글 글리프가 부족</strong> 할 수 있어요.<br />
한글 포함 모노스페이스(예: <strong>D2Coding</strong> , <strong>NanumGothic Coding</strong>)을 우선 사용하세요.</p>
  </li>
  <li>
    <p>터미널용 Vim은 <code class="language-plaintext highlighter-rouge">guifont</code>/<code class="language-plaintext highlighter-rouge">linespace</code>가 적용되지 않으니 <strong>gVim(GUI)</strong>에서만 테스트하세요.</p>
  </li>
</ul>

<p>원하시면 쓰시는 폰트 후보를 알려주시면, gVim에 맞게 정확한 <code class="language-plaintext highlighter-rouge">guifont</code> 문자열까지 딱 맞춰 드릴게요!</p>

<p class="chat--user">

회사에서 써도 괜찮은 좋은 폰트 추천해줘

</p>

<p>좋아요—<strong>회사(상업)에서도 안심하고 쓸 수 있는 한글 친화 폰트</strong> 만 골라 드릴게요. 전부 <strong>SIL Open Font License(OFL 1.1)</strong> 등으로 기업 사용에 제약이 없고, RHEL 8에서도 <code class="language-plaintext highlighter-rouge">~/.local/share/fonts</code>에 넣어 바로 쓸 수 있습니다.</p>

<h1 id="어떻게-골랐나-짧게">어떻게 골랐나 (짧게)</h1>

<ul>
  <li>
    <p><strong>기업 사용 OK 라이선스(OFL 1.1 등)</strong></p>
  </li>
  <li>
    <p><strong>한글 글리프 품질/범위</strong>(개발용은 모노스페이스 우선)</p>
  </li>
  <li>
    <p><strong>가독성 &amp; 유지 보수</strong>(업데이트/배포 경로 확실)</p>
  </li>
</ul>

<h1 id="개발용-모노스페이스-gvim에-딱">개발용 (모노스페이스, gVim에 딱)</h1>

<ol>
  <li>
    <p><strong>D2Coding</strong> – 개발자용 한글 고정폭, 리가처 버전도 있음<br />
라이선스: <strong>SIL OFL 1.1</strong>. 네이버 배포. <a href="https://github.com/naver/d2codingfont/wiki/Open-Font-License?utm_source=chatgpt.com">GitHub+1</a></p>

    <ul>
      <li>gVim: <code class="language-plaintext highlighter-rouge">:set guifont=D2Coding\ 12</code></li>
    </ul>
  </li>
  <li>
    <p><strong>NanumGothic Coding</strong> – 화면 힌팅 좋아 가독성 안정적<br />
라이선스: <strong>OFL 1.1(오픈소스)</strong>. <a href="https://fonts.adobe.com/fonts/nanum-gothic-coding?utm_source=chatgpt.com">Adobe Fonts</a><a href="https://www.fontsquirrel.com/license/nanumgothic?utm_source=chatgpt.com">Font Squirrel</a></p>

    <ul>
      <li>gVim: <code class="language-plaintext highlighter-rouge">:set guifont=NanumGothic\ Coding\ 12</code></li>
    </ul>
  </li>
  <li>
    <p><strong>Noto Sans Mono CJK KR</strong> – 구글/어도비 합작 CJK 고정폭, 범용성 최고<br />
라이선스: <strong>OFL 1.1</strong> , CJK 전각/한글 폭 맞춤에 강점. <a href="https://fontinfo.opensuse.org/fonts/NotoSansMonoCJKKRBold.html?utm_source=chatgpt.com">fontinfo.opensuse.org</a><a href="https://notofonts.github.io/noto-docs/specimen/NotoSansMonoCJKsc/?utm_source=chatgpt.com">notofonts.github.io</a><a href="https://github.com/notofonts/noto-cjk?utm_source=chatgpt.com">GitHub</a></p>

    <ul>
      <li>gVim: <code class="language-plaintext highlighter-rouge">:set guifont=Noto\ Sans\ Mono\ CJK\ KR\ 12</code></li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>추천 세트(충돌 대비 폴백):<br />
 <code class="language-plaintext highlighter-rouge">:set guifont=D2Coding\ 12,Noto\ Sans\ Mono\ CJK\ KR\ 12,NanumGothic\ Coding\ 12</code></p>
</blockquote>

<h1 id="ui문서용-비고정폭-터미널-밖프레젠테이션-등">UI·문서용 (비고정폭, 터미널 밖/프레젠테이션 등)</h1>

<ul>
  <li>
    <p><strong>Pretendard</strong> – 한국어 UI에 많이 쓰이는 산세리프, 가중치 폭넓음<br />
오픈소스 라이선스 표기(상업 사용 가능). <a href="https://fonts.adobe.com/fonts/pretendard?utm_source=chatgpt.com">Adobe Fonts</a></p>
  </li>
  <li>
    <p><strong>SUIT</strong> – UI 본문 최적화 한국어 산세리프, 가벼운 톤<br />
라이선스: <strong>OFL 1.1</strong>. <a href="https://github.com/sun-typeface/SUIT?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p><strong>Noto Sans CJK KR</strong> – 글로벌 프로덕트에서 검증된 범용 한글 산세리프<br />
오픈소스 라이선스 표기(상업 사용 가능). <a href="https://fonts.adobe.com/fonts/noto-sans-cjk-kr?utm_source=chatgpt.com">Adobe Fonts</a><a href="https://github.com/adobe-fonts/source-han-sans?utm_source=chatgpt.com">GitHub</a></p>
  </li>
</ul>

<h1 id="참고-라틴-전용-개발-폰트와의-병용">(참고) 라틴 전용 개발 폰트와의 병용</h1>

<ul>
  <li><strong>JetBrains Mono</strong> , <strong>Cascadia Code</strong> 는 라이선스상 기업 사용 OK(OFL 1.1)이지만 <strong>한글 글리프는 제한적</strong> 이라 보통 위 CJK 폰트와 <strong>폴백</strong> 으로 같이 씁니다. <a href="https://www.jetbrains.com/lp/mono/?utm_source=chatgpt.com">JetBrains</a><a href="https://fonts.google.com/specimen/JetBrains%2BMono?utm_source=chatgpt.com">Google Fonts</a><a href="https://learn.microsoft.com/en-us/windows/terminal/cascadia-code?utm_source=chatgpt.com">Microsoft Learn</a></li>
</ul>

<h1 id="gvim에-바로-적용하는-예">gVim에 바로 적용하는 예</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim

" ~/.gvimrc
set encoding=utf-8
" 개발용 모노스페이스 + 폴백
set guifont=D2Coding\ 12,Noto\ Sans\ Mono\ CJK\ KR\ 12,NanumGothic\ Coding\ 12
" 줄 간격 조금만 넓게
set linespace=2
</code></pre></div></div>

<h1 id="빠른-설치-요약-sudo-없이">빠른 설치 요약 (sudo 없이)</h1>

<ol>
  <li>
    <p>폰트 복사: <code class="language-plaintext highlighter-rouge">~/.local/share/fonts/</code></p>
  </li>
  <li>
    <p>캐시 갱신: <code class="language-plaintext highlighter-rouge">fc-cache -f -v ~/.local/share/fonts</code></p>
  </li>
  <li>
    <p>gVim에서 <code class="language-plaintext highlighter-rouge">:set guifont=...</code>으로 테스트</p>
  </li>
</ol>

<p>원하시면 <strong>화면 스샷(샘플 코드·한글 문장) 기준으로 2~3개</strong> 더 좁혀 드릴게요. 회사 모니터 환경(해상도/스케일) 알려주시면 줄 간격(<code class="language-plaintext highlighter-rouge">linespace</code>) 권장값도 같이 맞춰 드립니다!</p>

<p class="chat--user">

~/.config/fontconfig/conf.d/99-user-rendering.conf 이 파일은 어떤 application에서 적용되는 설정이야?

</p>

<p>짧게 말하면:<br />
<code class="language-plaintext highlighter-rouge">~/.config/fontconfig/conf.d/99-user-rendering.conf</code>는 <strong>Fontconfig</strong> 를 쓰는 모든 리눅스 앱에 “사용자 단위”로 적용되는 설정이에요. 그래서 <strong>gVim(GTK 빌드)</strong> , 브라우저(Firefox/Chrome), 터미널 에뮬레이터(GNOME Terminal/Kitty 등), VS Code, LibreOffice, 대부분의 Qt/GTK 앱들이 전부 영향을 받아요.</p>

<p>아래 순서로 이해하면 편합니다.</p>

<h1 id="1-무엇에-적용되나">1) 무엇에 적용되나?</h1>

<ul>
  <li>
    <p><strong>적용됨 (Fontconfig 사용하는 앱)</strong></p>

    <ul>
      <li>
        <p>gVim(보통 GTK3 빌드 → Pango/Cairo/Fontconfig 경유)</p>
      </li>
      <li>
        <p>대부분의 <strong>GTK/Qt</strong> 앱, <strong>Electron</strong> /Chromium 계열, <strong>Firefox</strong> , <strong>LibreOffice</strong> , <strong>Java(OpenJDK) AWT/Swing</strong> 등</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>적용 안 됨 (Fontconfig 안 쓰는 경우)</strong></p>

    <ul>
      <li>
        <p><strong>순수 콘솔 TTY</strong>(Ctrl+Alt+F3 같은 가상콘솔): 커널 비트맵 폰트라 Fontconfig 경로를 안 탑니다.</p>
      </li>
      <li>
        <p>일부 특수/옛날 앱(자체 렌더러·정적 링크 등), 컨테이너/샌드박스에서 <strong>호스트의 Fontconfig를 안 읽는</strong> 경우(예: 일부 Flatpak/Snap 빌드).</p>
      </li>
      <li>
        <p><strong>터미널 안의 Vim(콘솔 Vim)</strong> 텍스트는 터미널 에뮬레이터가 그리므로 Vim 자체엔 적용 안 되고, <strong>터미널 에뮬레이터</strong> 가 Fontconfig 설정을 반영합니다.</p>
      </li>
    </ul>
  </li>
</ul>

<h1 id="2-gvim에선-어떻게">2) gVim에선 어떻게?</h1>

<ul>
  <li>
    <p>RHEL 8의 gVim이 <strong>GTK 빌드</strong> 면 이 파일의 안티앨리어싱/힌팅/서브픽셀 설정이 <strong>그대로 반영</strong> 됩니다.</p>
  </li>
  <li>확인:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gvim <span class="nt">--version</span> | <span class="nb">grep</span> <span class="nt">-i</span> gtk     <span class="c"># +GTK3 같은 표시가 보이면 GTK 빌드</span>
</code></pre></div>    </div>
  </li>
  <li>콘솔 Vim은 <code class="language-plaintext highlighter-rouge">guifont</code>, Fontconfig 렌더링과 무관합니다(터미널 앱이 폰트를 렌더링).</li>
</ul>

<h1 id="3-우선순위적용-타이밍">3) 우선순위/적용 타이밍</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">~/.config/fontconfig/conf.d/</code>는 <strong>사용자 전용</strong> 오버레이 경로이며, 파일명 앞 숫자가 <strong>적용 순서</strong> 를 결정합니다. <code class="language-plaintext highlighter-rouge">99-...</code>면 보통 가장 늦게 적용되어 <strong>덮어쓰기</strong> 에 유리합니다.</p>
  </li>
  <li>
    <p><strong>폰트 추가/삭제</strong> 가 아닐 땐 <code class="language-plaintext highlighter-rouge">fc-cache</code>는 보통 필요 없습니다(설정만 바꾼 경우). 앱을 <strong>재시작</strong> 하면 반영됩니다.</p>
  </li>
</ul>

<h1 id="4-제대로-적용됐는지-빠르게-검증">4) 제대로 적용됐는지 빠르게 검증</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 현재 사용자 설정까지 반영된 최종 매칭/렌더링 옵션 보기</span>
fc-match <span class="nt">-v</span> <span class="s2">"D2Coding:style=Regular:size=12"</span> | egrep <span class="s1">'antialias|hinting|hintstyle|rgba|lcdfilter'</span>
</code></pre></div></div>

<p>여기 출력이 <code class="language-plaintext highlighter-rouge">99-user-rendering.conf</code>의 값과 일치하면, Fontconfig를 쓰는 앱들은 동일하게 그 설정을 따릅니다.</p>

<hr />

<p>원하시면 사용 중인 앱(예: 터미널/브라우저/에디터)별로 <strong>필요한 최소 설정 스니펫</strong> 과 함께, 충돌 가능성이 있는 <strong>데스크톱 글꼴 설정(GNOME/Plasma)</strong>과의 정리 방법도 적어 드릴게요.</p>]]></content><author><name>hvppyarchive</name></author><category term="linux" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">LLM Chatbot Client Plan</title><link href="https://hvppyarchive.github.io/llm/simple-chatbot-client/" rel="alternate" type="text/html" title="LLM Chatbot Client Plan" /><published>2025-08-21T19:11:25+09:00</published><updated>2025-08-21T19:11:25+09:00</updated><id>https://hvppyarchive.github.io/llm/simple-chatbot-client</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/simple-chatbot-client/"><![CDATA[<p class="chat--user">

Developer: Role and Objective - Develop a simple, fast LLM Chatbot Client Application using Qt or PySide. Workflow Checklist - Begin with a concise checklist (3-7 bullets) of conceptual sub-tasks before implementation. Instructions - Design for easy, direct execution by users in a Linux environment with access to a shared disk. - Allow each user to save personal settings, while the default deployment settings are configured by the administrator. Deployment - The application should be distributed so users can launch it directly on supported Linux systems with shared disk access. - Initial, default application settings must be settable by an administrator; each user can override and save their preferences. Required Features - Allow setting a custom LLM (Large Language Model) endpoint. - Support multi-line message input. - Provide chat log management similar to applications like Ollama or OpenWebUI. - Enable changing model parameters from the interface. - Incorporate useful shortcut keys (e.g., hide/show window in workspace, start new conversation, etc.). - Render Markdown in chat messages. Code and Messaging Conventions - Code must be clear, well-commented, use readable variable names, and maintain straightforward control flow. - Application messaging and labels should be concise and clear to end users. Output Format - Default output is plain text. When documentation is required, use Markdown and backticks for file, directory, function, and class names. Validation - After implementation, validate that the application meets all feature and deployment requirements and is verified to run as specified in the Linux environment. Document any issues or unmet criteria. Stop Conditions - The task is complete once the client app fulfills all listed features and deployment criteria, has been validated as above, and any necessary corrections have been applied.

</p>

<p>Here’s a tight, step-by-step plan and a complete, ready-to-run PySide6 app you can drop on a shared Linux disk.</p>

<h1 id="conceptual-checklist-before-coding">Conceptual checklist (before coding)</h1>

<ol>
  <li>
    <p>Config strategy: admin defaults on shared disk or <code class="language-plaintext highlighter-rouge">/etc/llmchat</code>, user overrides in <code class="language-plaintext highlighter-rouge">~/.config/llmchat/</code> with deep-merge on load; write back only user file.</p>
  </li>
  <li>
    <p>Storage strategy: chats as JSON under <code class="language-plaintext highlighter-rouge">~/.local/share/llmchat/chats/</code>, with an index; operations: new/rename/delete/export.</p>
  </li>
  <li>
    <p>UI layout: left chat list + top toolbar; right chat view (Markdown) + param sidebar (model/temperature/top_p/max_tokens) + multiline input with send; tray icon for show/hide.</p>
  </li>
  <li>
    <p>Network layer: simple OpenAI-compatible <code class="language-plaintext highlighter-rouge">/v1/chat/completions</code> POST with <code class="language-plaintext highlighter-rouge">requests</code>, API base+key configurable; run in worker thread to keep UI responsive.</p>
  </li>
  <li>
    <p>Shortcuts: Ctrl+Enter send; Shift+Enter newline; Ctrl+N new chat; Ctrl+S export; Del delete chat; Ctrl+L focus input; Ctrl+, settings; Ctrl+H hide/show (via tray).</p>
  </li>
  <li>
    <p>Markdown render: convert with <code class="language-plaintext highlighter-rouge">markdown</code> lib to sanitized HTML; display in <code class="language-plaintext highlighter-rouge">QTextBrowser</code> with minimal CSS for code blocks and links.</p>
  </li>
  <li>
    <p>Deployment: <code class="language-plaintext highlighter-rouge">install.sh</code> (venv + pip), <code class="language-plaintext highlighter-rouge">run.sh</code> (activate &amp; start); <code class="language-plaintext highlighter-rouge">config/defaults.yaml</code> for admin to seed defaults; doc how to set <code class="language-plaintext highlighter-rouge">/etc/llmchat/config.yaml</code>.</p>
  </li>
</ol>

<hr />

<h2 id="project-layout">Project layout</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arduino

llmchat/
  main.py
  config_manager.py
  llm_client.py
  storage.py
  ui_helpers.py
  requirements.txt
  install.sh
  run.sh
  config/
    defaults.yaml
  README.md
</code></pre></div></div>

<hr />

<h2 id="requirementstxt"><code class="language-plaintext highlighter-rouge">requirements.txt</code></h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>txt

PySide6&gt;=6.6
requests&gt;=2.31
PyYAML&gt;=6.0.1
markdown&gt;=3.5
</code></pre></div></div>

<hr />

<h2 id="installsh"><code class="language-plaintext highlighter-rouge">install.sh</code></h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nb">cd</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
python3 <span class="nt">-m</span> venv .venv
<span class="nb">.</span> .venv/bin/activate
pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
<span class="nb">echo</span> <span class="s2">"✔ venv created. Use ./run.sh to launch."</span>
</code></pre></div></div>

<hr />

<h2 id="runsh"><code class="language-plaintext highlighter-rouge">run.sh</code></h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-euo</span> pipefail
<span class="nb">cd</span> <span class="s2">"</span><span class="si">$(</span><span class="nb">dirname</span> <span class="s2">"</span><span class="nv">$0</span><span class="s2">"</span><span class="si">)</span><span class="s2">"</span>
<span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="nt">-d</span> .venv <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">echo</span> <span class="s2">"No venv found. Running install..."</span>
  ./install.sh
<span class="k">fi</span>
<span class="nb">.</span> .venv/bin/activate
<span class="nb">export </span><span class="nv">QT_AUTO_SCREEN_SCALE_FACTOR</span><span class="o">=</span>1
python3 <span class="nt">-u</span> main.py <span class="s2">"</span><span class="nv">$@</span><span class="s2">"</span>
</code></pre></div></div>

<hr />

<h2 id="configdefaultsyaml"><code class="language-plaintext highlighter-rouge">config/defaults.yaml</code></h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Admin-settable defaults (shared disk or /etc/llmchat/config.yaml)</span>
<span class="na">app</span><span class="pi">:</span>
  <span class="na">data_dir</span><span class="pi">:</span> <span class="s2">"</span><span class="s">~/.local/share/llmchat"</span>
  <span class="na">chat_dir_name</span><span class="pi">:</span> <span class="s2">"</span><span class="s">chats"</span>
  <span class="na">window</span><span class="pi">:</span>
    <span class="na">width</span><span class="pi">:</span> <span class="m">1100</span>
    <span class="na">height</span><span class="pi">:</span> <span class="m">720</span>
<span class="na">llm</span><span class="pi">:</span>
  <span class="na">api_base</span><span class="pi">:</span> <span class="s2">"</span><span class="s">http://localhost:11434/v1"</span>  <span class="c1"># Works with Ollama's OpenAI-compatible server</span>
  <span class="na">api_key</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>  <span class="c1"># Leave empty for local endpoints; user can override</span>
  <span class="na">model</span><span class="pi">:</span> <span class="s2">"</span><span class="s">llama3.1"</span>
  <span class="na">temperature</span><span class="pi">:</span> <span class="m">0.7</span>
  <span class="na">top_p</span><span class="pi">:</span> <span class="m">0.95</span>
  <span class="na">max_tokens</span><span class="pi">:</span> <span class="m">512</span>
  <span class="na">timeout_sec</span><span class="pi">:</span> <span class="m">120</span>
  <span class="na">verify_tls</span><span class="pi">:</span> <span class="kc">true</span>
<span class="na">ui</span><span class="pi">:</span>
  <span class="na">font_family</span><span class="pi">:</span> <span class="s2">"</span><span class="s">"</span>
  <span class="na">font_size</span><span class="pi">:</span> <span class="m">11</span>
  <span class="na">enable_tray</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="na">markdown_css</span><span class="pi">:</span> <span class="pi">|</span>
    <span class="s">body { font-family: sans-serif; font-size: 13px; }</span>
    <span class="s">code, pre { font-family: "DejaVu Sans Mono", monospace; }</span>
    <span class="s">pre { background: #f5f5f5; padding: 8px; border-radius: 6px; overflow: auto; }</span>
    <span class="s">code { background: #f1f1f1; padding: 2px 4px; border-radius: 4px; }</span>
    <span class="s">.msg-user { background: #e8f0fe; padding: 8px 10px; border-radius: 10px; margin: 10px 0; }</span>
    <span class="s">.msg-assistant { background: #f7f7f7; padding: 8px 10px; border-radius: 10px; margin: 10px 0; }</span>
</code></pre></div></div>

<hr />

<h2 id="config_managerpy"><code class="language-plaintext highlighter-rouge">config_manager.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">copy</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">import</span> <span class="n">yaml</span>

<span class="k">def</span> <span class="nf">deep_merge_dict</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Deep merge dict b into a (a has lower precedence). Returns a new dict.</span><span class="sh">"""</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">b</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">result</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="n">result</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nf">deep_merge_dict</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">v</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">result</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="k">class</span> <span class="nc">ConfigManager</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Loads admin defaults and applies user overrides. Only writes user config.
    Search order for admin defaults:
      1) LLMCHAT_CONFIG_DIR/config.yaml
      2) ./config/defaults.yaml (in app dir)
      3) /etc/llmchat/config.yaml
    User overrides:
      ~/.config/llmchat/config.yaml
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">app_dir</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">app_dir</span> <span class="o">=</span> <span class="n">app_dir</span>
        <span class="n">self</span><span class="p">.</span><span class="n">user_config_dir</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~/.config/llmchat</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">user_config_path</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">user_config_dir</span> <span class="o">/</span> <span class="sh">"</span><span class="s">config.yaml</span><span class="sh">"</span>

        <span class="n">self</span><span class="p">.</span><span class="n">defaults</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">user</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">effective</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_load_yaml</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">():</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">yaml</span><span class="p">.</span><span class="nf">safe_load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">return</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">env_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LLMCHAT_CONFIG_DIR</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">candidates</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">env_dir</span><span class="p">:</span>
            <span class="n">candidates</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="n">env_dir</span><span class="p">)</span> <span class="o">/</span> <span class="sh">"</span><span class="s">config.yaml</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">candidates</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">app_dir</span> <span class="o">/</span> <span class="sh">"</span><span class="s">config</span><span class="sh">"</span> <span class="o">/</span> <span class="sh">"</span><span class="s">defaults.yaml</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">candidates</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="sh">"</span><span class="s">/etc/llmchat/config.yaml</span><span class="sh">"</span><span class="p">))</span>

        <span class="n">merged</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">candidates</span><span class="p">:</span>
            <span class="n">merged</span> <span class="o">=</span> <span class="nf">deep_merge_dict</span><span class="p">(</span><span class="n">merged</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_yaml</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>

        <span class="n">self</span><span class="p">.</span><span class="n">defaults</span> <span class="o">=</span> <span class="n">merged</span>
        <span class="n">self</span><span class="p">.</span><span class="n">user</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_load_yaml</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">user_config_path</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">effective</span> <span class="o">=</span> <span class="nf">deep_merge_dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">defaults</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">user</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">effective</span>

    <span class="k">def</span> <span class="nf">save_user_overrides</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">patch</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Persist only user overrides (not the merged effective config).</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">user</span> <span class="o">=</span> <span class="nf">deep_merge_dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">user</span><span class="p">,</span> <span class="n">patch</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">user_config_dir</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">user_config_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">yaml</span><span class="p">.</span><span class="nf">safe_dump</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">user</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">sort_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Get from effective using dotted path e.g. </span><span class="sh">'</span><span class="s">llm.api_base</span><span class="sh">'</span><span class="s">.</span><span class="sh">"""</span>
        <span class="n">parts</span> <span class="o">=</span> <span class="n">path</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">effective</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">parts</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">default</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">default</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>
</code></pre></div></div>

<hr />

<h2 id="storagepy"><code class="language-plaintext highlighter-rouge">storage.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">asdict</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Message</span><span class="p">:</span>
    <span class="n">role</span><span class="p">:</span> <span class="nb">str</span>       <span class="c1"># "user" or "assistant" or "system"
</span>    <span class="n">content</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">ts</span><span class="p">:</span> <span class="nb">float</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Chat</span><span class="p">:</span>
    <span class="n">chat_id</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">title</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">created_ts</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">updated_ts</span><span class="p">:</span> <span class="nb">float</span>
    <span class="n">model</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">params</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>
    <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Message</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">ChatStorage</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Manage chat files under ~/.local/share/llmchat/chats/ as JSON.</span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">base_data_dir</span><span class="p">:</span> <span class="n">Path</span><span class="p">,</span> <span class="n">chat_dir_name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">chats</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">base_dir</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">base_data_dir</span><span class="p">).</span><span class="nf">expanduser</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_dir</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">base_dir</span> <span class="o">/</span> <span class="n">chat_dir_name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_dir</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_chat_path</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">chat_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_dir</span> <span class="o">/</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">chat_id</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">list_chats</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Chat</span><span class="p">]:</span>
        <span class="n">chats</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">chat_dir</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="sh">"</span><span class="s">*.json</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="n">raw</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
                <span class="n">chats</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_chat_from_raw</span><span class="p">(</span><span class="n">raw</span><span class="p">))</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
        <span class="c1"># Most recent first
</span>        <span class="n">chats</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">c</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">updated_ts</span><span class="p">,</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">chats</span>

    <span class="k">def</span> <span class="nf">save_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">chat</span><span class="p">:</span> <span class="n">Chat</span><span class="p">):</span>
        <span class="n">raw</span> <span class="o">=</span> <span class="nf">asdict</span><span class="p">(</span><span class="n">chat</span><span class="p">)</span>
        <span class="c1"># Convert dataclass Message list to serializable dicts
</span>        <span class="n">raw</span><span class="p">[</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="nf">asdict</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">chat</span><span class="p">.</span><span class="n">messages</span><span class="p">]</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_chat_path</span><span class="p">(</span><span class="n">chat</span><span class="p">.</span><span class="n">chat_id</span><span class="p">),</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">load_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">chat_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Chat</span><span class="p">]:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_chat_path</span><span class="p">(</span><span class="n">chat_id</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">exists</span><span class="p">():</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">raw</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_chat_from_raw</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">delete_chat</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">chat_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_chat_path</span><span class="p">(</span><span class="n">chat_id</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">exists</span><span class="p">():</span>
            <span class="n">p</span><span class="p">.</span><span class="nf">unlink</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">export_chat_markdown</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">chat</span><span class="p">:</span> <span class="n">Chat</span><span class="p">,</span> <span class="n">out_path</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="s"># </span><span class="si">{</span><span class="n">chat</span><span class="p">.</span><span class="n">title</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">chat</span><span class="p">.</span><span class="n">messages</span><span class="p">:</span>
            <span class="n">who</span> <span class="o">=</span> <span class="sh">"</span><span class="s">You</span><span class="sh">"</span> <span class="k">if</span> <span class="n">m</span><span class="p">.</span><span class="n">role</span> <span class="o">==</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span> <span class="k">else</span> <span class="sh">"</span><span class="s">Assistant</span><span class="sh">"</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">**</span><span class="si">{</span><span class="n">who</span><span class="si">}</span><span class="s">:**</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
        <span class="n">out_path</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">out_path</span><span class="p">)</span>
        <span class="n">out_path</span><span class="p">.</span><span class="n">parent</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="n">parents</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">out_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">_chat_from_raw</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Chat</span><span class="p">:</span>
        <span class="n">msgs</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Message</span><span class="p">(</span><span class="o">**</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">raw</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])]</span>
        <span class="k">return</span> <span class="nc">Chat</span><span class="p">(</span>
            <span class="n">chat_id</span><span class="o">=</span><span class="n">raw</span><span class="p">[</span><span class="sh">"</span><span class="s">chat_id</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">title</span><span class="o">=</span><span class="n">raw</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">title</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Untitled</span><span class="sh">"</span><span class="p">),</span>
            <span class="n">created_ts</span><span class="o">=</span><span class="n">raw</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">created_ts</span><span class="sh">"</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()),</span>
            <span class="n">updated_ts</span><span class="o">=</span><span class="n">raw</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">updated_ts</span><span class="sh">"</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()),</span>
            <span class="n">model</span><span class="o">=</span><span class="n">raw</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span>
            <span class="n">params</span><span class="o">=</span><span class="n">raw</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">msgs</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="llm_clientpy"><code class="language-plaintext highlighter-rouge">llm_client.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span>

<span class="k">class</span> <span class="nc">LLMClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Minimal OpenAI-compatible client for /v1/chat/completions.
    Supports: api_base, api_key, model, temperature, top_p, max_tokens, timeout_sec, verify_tls
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cfg</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cfg</span> <span class="o">=</span> <span class="n">cfg</span>

    <span class="k">def</span> <span class="nf">update_config</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cfg</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cfg</span> <span class="o">=</span> <span class="n">cfg</span>

    <span class="k">def</span> <span class="nf">chat_completion</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]],</span> <span class="n">params</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">api_base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">api_base</span><span class="sh">"</span><span class="p">].</span><span class="nf">rstrip</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">url</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">api_base</span><span class="si">}</span><span class="s">/v1/chat/completions</span><span class="sh">"</span>
        <span class="n">headers</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">Content-Type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">application/json</span><span class="sh">"</span><span class="p">}</span>
        <span class="n">api_key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">api_key</span><span class="p">:</span>
            <span class="n">headers</span><span class="p">[</span><span class="sh">"</span><span class="s">Authorization</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Bearer </span><span class="si">{</span><span class="n">api_key</span><span class="si">}</span><span class="sh">"</span>

        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">params</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">:</span> <span class="nf">float</span><span class="p">(</span><span class="n">params</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">])),</span>
            <span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">:</span> <span class="nf">float</span><span class="p">(</span><span class="n">params</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">])),</span>
            <span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="n">params</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">])),</span>
            <span class="sh">"</span><span class="s">stream</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="n">timeout</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">timeout_sec</span><span class="sh">"</span><span class="p">,</span> <span class="mi">120</span><span class="p">))</span>
        <span class="n">verify_tls</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">verify_tls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">))</span>

        <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">),</span>
                          <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">verify</span><span class="o">=</span><span class="n">verify_tls</span><span class="p">)</span>
        <span class="n">r</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
        <span class="c1"># OpenAI-compatible format
</span>        <span class="n">content</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">choices</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">content</span>
</code></pre></div></div>

<hr />

<h2 id="ui_helperspy"><code class="language-plaintext highlighter-rouge">ui_helpers.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span>
<span class="kn">from</span> <span class="n">markdown</span> <span class="kn">import</span> <span class="n">markdown</span>

<span class="k">def</span> <span class="nf">now_ts</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">md_to_html</span><span class="p">(</span><span class="n">md_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">css</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Convert Markdown to HTML suitable for QTextBrowser.
    </span><span class="sh">"""</span>
    <span class="n">body</span> <span class="o">=</span> <span class="nf">markdown</span><span class="p">(</span><span class="n">md_text</span><span class="p">,</span> <span class="n">extensions</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">fenced_code</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tables</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">codehilite</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">sane_lists</span><span class="sh">"</span><span class="p">])</span>
    <span class="n">style</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">&lt;style&gt;</span><span class="si">{</span><span class="n">css</span><span class="si">}</span><span class="s">&lt;/style&gt;</span><span class="sh">"</span> <span class="k">if</span> <span class="n">css</span> <span class="k">else</span> <span class="sh">""</span>
    <span class="c1"># Wrap with message container styling applied by caller
</span>    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">style</span><span class="si">}{</span><span class="n">body</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">messages_to_html</span><span class="p">(</span><span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">dict</span><span class="p">],</span> <span class="n">css</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="s">&lt;style&gt;</span><span class="si">{</span><span class="n">css</span><span class="si">}</span><span class="s">&lt;/style&gt;</span><span class="sh">"</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>
        <span class="n">klass</span> <span class="o">=</span> <span class="sh">"</span><span class="s">msg-user</span><span class="sh">"</span> <span class="k">if</span> <span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span> <span class="k">else</span> <span class="sh">"</span><span class="s">msg-assistant</span><span class="sh">"</span>
        <span class="n">parts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">&lt;div class=</span><span class="sh">"</span><span class="si">{</span><span class="n">klass</span><span class="si">}</span><span class="sh">"</span><span class="s">&gt;</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">parts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">md_to_html</span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">]))</span>
        <span class="n">parts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">&lt;/div&gt;</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="mainpy"><code class="language-plaintext highlighter-rouge">main.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">uuid</span>
<span class="kn">import</span> <span class="n">traceback</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="kn">from</span> <span class="n">PySide6.QtCore</span> <span class="kn">import</span> <span class="n">Qt</span><span class="p">,</span> <span class="n">QThreadPool</span><span class="p">,</span> <span class="n">QRunnable</span><span class="p">,</span> <span class="n">Signal</span><span class="p">,</span> <span class="n">QObject</span><span class="p">,</span> <span class="n">QSize</span>
<span class="kn">from</span> <span class="n">PySide6.QtGui</span> <span class="kn">import</span> <span class="n">QAction</span><span class="p">,</span> <span class="n">QIcon</span><span class="p">,</span> <span class="n">QKeySequence</span><span class="p">,</span> <span class="n">QCloseEvent</span><span class="p">,</span> <span class="n">QShortcut</span>
<span class="kn">from</span> <span class="n">PySide6.QtWidgets</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">QApplication</span><span class="p">,</span> <span class="n">QMainWindow</span><span class="p">,</span> <span class="n">QWidget</span><span class="p">,</span> <span class="n">QVBoxLayout</span><span class="p">,</span> <span class="n">QHBoxLayout</span><span class="p">,</span> <span class="n">QTextEdit</span><span class="p">,</span>
    <span class="n">QPushButton</span><span class="p">,</span> <span class="n">QListWidget</span><span class="p">,</span> <span class="n">QListWidgetItem</span><span class="p">,</span> <span class="n">QLabel</span><span class="p">,</span> <span class="n">QFileDialog</span><span class="p">,</span> <span class="n">QSplitter</span><span class="p">,</span>
    <span class="n">QFormLayout</span><span class="p">,</span> <span class="n">QLineEdit</span><span class="p">,</span> <span class="n">QSpinBox</span><span class="p">,</span> <span class="n">QDoubleSpinBox</span><span class="p">,</span> <span class="n">QGroupBox</span><span class="p">,</span> <span class="n">QDockWidget</span><span class="p">,</span>
    <span class="n">QMessageBox</span><span class="p">,</span> <span class="n">QTextBrowser</span><span class="p">,</span> <span class="n">QToolBar</span><span class="p">,</span> <span class="n">QSystemTrayIcon</span><span class="p">,</span> <span class="n">QMenu</span>
<span class="p">)</span>

<span class="kn">from</span> <span class="n">config_manager</span> <span class="kn">import</span> <span class="n">ConfigManager</span>
<span class="kn">from</span> <span class="n">storage</span> <span class="kn">import</span> <span class="n">ChatStorage</span><span class="p">,</span> <span class="n">Chat</span><span class="p">,</span> <span class="n">Message</span>
<span class="kn">from</span> <span class="n">llm_client</span> <span class="kn">import</span> <span class="n">LLMClient</span>
<span class="kn">from</span> <span class="n">ui_helpers</span> <span class="kn">import</span> <span class="n">now_ts</span><span class="p">,</span> <span class="n">messages_to_html</span>

<span class="n">APP_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLMChat</span><span class="sh">"</span>

<span class="c1"># ---------------- Worker infra ---------------- #
</span>
<span class="k">class</span> <span class="nc">WorkerSignals</span><span class="p">(</span><span class="n">QObject</span><span class="p">):</span>
    <span class="n">success</span> <span class="o">=</span> <span class="nc">Signal</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
    <span class="n">error</span> <span class="o">=</span> <span class="nc">Signal</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">LLMWorker</span><span class="p">(</span><span class="n">QRunnable</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">client</span><span class="p">:</span> <span class="n">LLMClient</span><span class="p">,</span> <span class="n">messages_payload</span><span class="p">,</span> <span class="n">params</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">messages_payload</span> <span class="o">=</span> <span class="n">messages_payload</span>
        <span class="n">self</span><span class="p">.</span><span class="n">params</span> <span class="o">=</span> <span class="n">params</span>
        <span class="n">self</span><span class="p">.</span><span class="n">signals</span> <span class="o">=</span> <span class="nc">WorkerSignals</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">reply</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="nf">chat_completion</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">messages_payload</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">params</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">signals</span><span class="p">.</span><span class="n">success</span><span class="p">.</span><span class="nf">emit</span><span class="p">(</span><span class="n">reply</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">tb</span> <span class="o">=</span> <span class="n">traceback</span><span class="p">.</span><span class="nf">format_exc</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">signals</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="nf">emit</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">tb</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ---------------- Main Window ---------------- #
</span>
<span class="k">class</span> <span class="nc">MainWindow</span><span class="p">(</span><span class="n">QMainWindow</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">app_dir</span><span class="p">:</span> <span class="n">Path</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">setWindowTitle</span><span class="p">(</span><span class="sh">"</span><span class="s">LLM Chat Client</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">app_dir</span> <span class="o">=</span> <span class="n">app_dir</span>

        <span class="c1"># Config
</span>        <span class="n">self</span><span class="p">.</span><span class="n">cfg_mgr</span> <span class="o">=</span> <span class="nc">ConfigManager</span><span class="p">(</span><span class="n">app_dir</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cfg</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg_mgr</span><span class="p">.</span><span class="nf">load</span><span class="p">()</span>

        <span class="c1"># Storage
</span>        <span class="n">data_dir</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">app</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data_dir</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">~/.local/share/llmchat</span><span class="sh">"</span><span class="p">)).</span><span class="nf">expanduser</span><span class="p">()</span>
        <span class="n">chat_dir_name</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">app</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">chat_dir_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">chats</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">storage</span> <span class="o">=</span> <span class="nc">ChatStorage</span><span class="p">(</span><span class="n">data_dir</span><span class="p">,</span> <span class="n">chat_dir_name</span><span class="p">)</span>

        <span class="c1"># LLM client
</span>        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">LLMClient</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">)</span>

        <span class="c1"># State
</span>        <span class="n">self</span><span class="p">.</span><span class="n">thread_pool</span> <span class="o">=</span> <span class="n">QThreadPool</span><span class="p">.</span><span class="nf">globalInstance</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">:</span> <span class="n">Chat</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">markdown_css</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ui</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">markdown_css</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_ui</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_load_chat_list</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_apply_initial_window_size</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_setup_tray</span><span class="p">()</span>

    <span class="c1"># -------- UI construction -------- #
</span>
    <span class="k">def</span> <span class="nf">_build_ui</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">splitter</span> <span class="o">=</span> <span class="nc">QSplitter</span><span class="p">()</span>
        <span class="n">splitter</span><span class="p">.</span><span class="nf">setChildrenCollapsible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

        <span class="c1"># Left: chat list + controls
</span>        <span class="n">left</span> <span class="o">=</span> <span class="nc">QWidget</span><span class="p">()</span>
        <span class="n">left_layout</span> <span class="o">=</span> <span class="nc">QVBoxLayout</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span> <span class="o">=</span> <span class="nc">QListWidget</span><span class="p">()</span>
        <span class="n">left_layout</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="nc">QLabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Conversations</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">left_layout</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">)</span>

        <span class="n">btn_row</span> <span class="o">=</span> <span class="nc">QHBoxLayout</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_new</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">New</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_rename</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">Rename</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_delete</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">Delete</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">btn_row</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">btn_new</span><span class="p">)</span>
        <span class="n">btn_row</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">btn_rename</span><span class="p">)</span>
        <span class="n">btn_row</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">btn_delete</span><span class="p">)</span>
        <span class="n">left_layout</span><span class="p">.</span><span class="nf">addLayout</span><span class="p">(</span><span class="n">btn_row</span><span class="p">)</span>

        <span class="c1"># Right: conversation + input
</span>        <span class="n">right</span> <span class="o">=</span> <span class="nc">QWidget</span><span class="p">()</span>
        <span class="n">right_layout</span> <span class="o">=</span> <span class="nc">QVBoxLayout</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">view</span> <span class="o">=</span> <span class="nc">QTextBrowser</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="nf">setOpenExternalLinks</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">right_layout</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

        <span class="n">input_row</span> <span class="o">=</span> <span class="nc">QHBoxLayout</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">input</span> <span class="o">=</span> <span class="nc">QTextEdit</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">.</span><span class="nf">setPlaceholderText</span><span class="p">(</span><span class="sh">"</span><span class="s">Type your message… (Shift+Enter for newline, Ctrl+Enter to send)</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">.</span><span class="nf">setAcceptRichText</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">input_row</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_send</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">Send</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_send</span><span class="p">.</span><span class="nf">setDefault</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">input_row</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">btn_send</span><span class="p">)</span>
        <span class="n">right_layout</span><span class="p">.</span><span class="nf">addLayout</span><span class="p">(</span><span class="n">input_row</span><span class="p">)</span>

        <span class="n">splitter</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">left</span><span class="p">)</span>
        <span class="n">splitter</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">right</span><span class="p">)</span>
        <span class="n">splitter</span><span class="p">.</span><span class="nf">setStretchFactor</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">setCentralWidget</span><span class="p">(</span><span class="n">splitter</span><span class="p">)</span>

        <span class="c1"># Dock: model params &amp; endpoint
</span>        <span class="n">dock</span> <span class="o">=</span> <span class="nc">QDockWidget</span><span class="p">(</span><span class="sh">"</span><span class="s">Model &amp; Endpoint</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">dock</span><span class="p">.</span><span class="nf">setAllowedAreas</span><span class="p">(</span><span class="n">Qt</span><span class="p">.</span><span class="n">RightDockWidgetArea</span> <span class="o">|</span> <span class="n">Qt</span><span class="p">.</span><span class="n">LeftDockWidgetArea</span><span class="p">)</span>
        <span class="n">params_widget</span> <span class="o">=</span> <span class="nc">QWidget</span><span class="p">()</span>
        <span class="n">form</span> <span class="o">=</span> <span class="nc">QFormLayout</span><span class="p">(</span><span class="n">params_widget</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">edt_api_base</span> <span class="o">=</span> <span class="nc">QLineEdit</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_base</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">edt_api_key</span> <span class="o">=</span> <span class="nc">QLineEdit</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">edt_api_key</span><span class="p">.</span><span class="nf">setEchoMode</span><span class="p">(</span><span class="n">QLineEdit</span><span class="p">.</span><span class="n">Password</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">edt_model</span> <span class="o">=</span> <span class="nc">QLineEdit</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>

        <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span> <span class="o">=</span> <span class="nc">QDoubleSpinBox</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">setRange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">setSingleStep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">setValue</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">)))</span>

        <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span> <span class="o">=</span> <span class="nc">QDoubleSpinBox</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">setRange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">setSingleStep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">setValue</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">)))</span>

        <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span> <span class="o">=</span> <span class="nc">QSpinBox</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">.</span><span class="nf">setRange</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">32768</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">.</span><span class="nf">setValue</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">,</span> <span class="mi">512</span><span class="p">)))</span>

        <span class="n">form</span><span class="p">.</span><span class="nf">addRow</span><span class="p">(</span><span class="nc">QLabel</span><span class="p">(</span><span class="sh">"</span><span class="s">API Base</span><span class="sh">"</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_api_base</span><span class="p">)</span>
        <span class="n">form</span><span class="p">.</span><span class="nf">addRow</span><span class="p">(</span><span class="nc">QLabel</span><span class="p">(</span><span class="sh">"</span><span class="s">API Key</span><span class="sh">"</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_api_key</span><span class="p">)</span>
        <span class="n">form</span><span class="p">.</span><span class="nf">addRow</span><span class="p">(</span><span class="nc">QLabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Model</span><span class="sh">"</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_model</span><span class="p">)</span>
        <span class="n">form</span><span class="p">.</span><span class="nf">addRow</span><span class="p">(</span><span class="nc">QLabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Temperature</span><span class="sh">"</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">)</span>
        <span class="n">form</span><span class="p">.</span><span class="nf">addRow</span><span class="p">(</span><span class="nc">QLabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Top-p</span><span class="sh">"</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">)</span>
        <span class="n">form</span><span class="p">.</span><span class="nf">addRow</span><span class="p">(</span><span class="nc">QLabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Max tokens</span><span class="sh">"</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">)</span>

        <span class="n">btns</span> <span class="o">=</span> <span class="nc">QHBoxLayout</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_save_settings</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">Save as My Defaults</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_apply</span> <span class="o">=</span> <span class="nc">QPushButton</span><span class="p">(</span><span class="sh">"</span><span class="s">Apply Now</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">btns</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">btn_apply</span><span class="p">)</span>
        <span class="n">btns</span><span class="p">.</span><span class="nf">addWidget</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">btn_save_settings</span><span class="p">)</span>
        <span class="n">form</span><span class="p">.</span><span class="nf">addRow</span><span class="p">(</span><span class="n">btns</span><span class="p">)</span>

        <span class="n">params_widget</span><span class="p">.</span><span class="nf">setLayout</span><span class="p">(</span><span class="n">form</span><span class="p">)</span>
        <span class="n">dock</span><span class="p">.</span><span class="nf">setWidget</span><span class="p">(</span><span class="n">params_widget</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">addDockWidget</span><span class="p">(</span><span class="n">Qt</span><span class="p">.</span><span class="n">RightDockWidgetArea</span><span class="p">,</span> <span class="n">dock</span><span class="p">)</span>

        <span class="c1"># Toolbar &amp; actions
</span>        <span class="n">tb</span> <span class="o">=</span> <span class="nc">QToolBar</span><span class="p">(</span><span class="sh">"</span><span class="s">Main</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">tb</span><span class="p">.</span><span class="nf">setIconSize</span><span class="p">(</span><span class="nc">QSize</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">16</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">addToolBar</span><span class="p">(</span><span class="n">tb</span><span class="p">)</span>

        <span class="n">act_new</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">New Chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_new</span><span class="p">.</span><span class="nf">setShortcut</span><span class="p">(</span><span class="nc">QKeySequence</span><span class="p">(</span><span class="sh">"</span><span class="s">Ctrl+N</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">act_send</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">Send</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_send</span><span class="p">.</span><span class="nf">setShortcut</span><span class="p">(</span><span class="nc">QKeySequence</span><span class="p">(</span><span class="sh">"</span><span class="s">Ctrl+Return</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">act_export</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">Export Markdown…</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_export</span><span class="p">.</span><span class="nf">setShortcut</span><span class="p">(</span><span class="nc">QKeySequence</span><span class="p">(</span><span class="sh">"</span><span class="s">Ctrl+S</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">act_delete</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">Delete Chat</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_delete</span><span class="p">.</span><span class="nf">setShortcut</span><span class="p">(</span><span class="nc">QKeySequence</span><span class="p">(</span><span class="n">Qt</span><span class="p">.</span><span class="n">Key_Delete</span><span class="p">))</span>
        <span class="n">act_focus</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">Focus Input</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_focus</span><span class="p">.</span><span class="nf">setShortcut</span><span class="p">(</span><span class="nc">QKeySequence</span><span class="p">(</span><span class="sh">"</span><span class="s">Ctrl+L</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">act_settings</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">Save Settings</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_settings</span><span class="p">.</span><span class="nf">setShortcut</span><span class="p">(</span><span class="nc">QKeySequence</span><span class="p">(</span><span class="sh">"</span><span class="s">Ctrl+,</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">act_hide</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">Hide/Show</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_hide</span><span class="p">.</span><span class="nf">setShortcut</span><span class="p">(</span><span class="nc">QKeySequence</span><span class="p">(</span><span class="sh">"</span><span class="s">Ctrl+H</span><span class="sh">"</span><span class="p">))</span>

        <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="p">(</span><span class="n">act_new</span><span class="p">,</span> <span class="n">act_send</span><span class="p">,</span> <span class="n">act_export</span><span class="p">,</span> <span class="n">act_delete</span><span class="p">,</span> <span class="n">act_focus</span><span class="p">,</span> <span class="n">act_settings</span><span class="p">,</span> <span class="n">act_hide</span><span class="p">):</span>
            <span class="n">tb</span><span class="p">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>

        <span class="c1"># Connect signals
</span>        <span class="n">self</span><span class="p">.</span><span class="n">btn_new</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_new_chat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_rename</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_rename_chat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_delete</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_delete_chat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="n">itemDoubleClicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_open_selected_chat</span><span class="p">())</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="n">itemSelectionChanged</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_open_selected_chat</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">btn_send</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_send</span><span class="p">)</span>
        <span class="n">act_send</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_send</span><span class="p">)</span>
        <span class="n">act_new</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_new_chat</span><span class="p">)</span>
        <span class="n">act_export</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_export_chat_md</span><span class="p">)</span>
        <span class="n">act_delete</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_delete_chat</span><span class="p">)</span>
        <span class="n">act_focus</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">.</span><span class="nf">setFocus</span><span class="p">())</span>
        <span class="n">act_settings</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_save_settings_clicked</span><span class="p">)</span>
        <span class="n">act_hide</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_toggle_hide</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">btn_apply</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_apply_now</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">btn_save_settings</span><span class="p">.</span><span class="n">clicked</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_save_settings_clicked</span><span class="p">)</span>

        <span class="c1"># Keyboard shortcut for Shift+Enter newline is default in QTextEdit
</span>        <span class="nc">QShortcut</span><span class="p">(</span><span class="nc">QKeySequence</span><span class="p">(</span><span class="sh">"</span><span class="s">Ctrl+Enter</span><span class="sh">"</span><span class="p">),</span> <span class="n">self</span><span class="p">,</span> <span class="n">activated</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_send</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="nf">statusBar</span><span class="p">().</span><span class="nf">showMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">Ready</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_apply_initial_window_size</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">w</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">app</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">window</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1100</span><span class="p">))</span>
        <span class="n">h</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">app</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">window</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">height</span><span class="sh">"</span><span class="p">,</span> <span class="mi">720</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_setup_tray</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ui</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">enable_tray</span><span class="sh">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">):</span>
            <span class="k">return</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tray</span> <span class="o">=</span> <span class="nc">QSystemTrayIcon</span><span class="p">(</span><span class="n">self</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tray</span><span class="p">.</span><span class="nf">setIcon</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">style</span><span class="p">().</span><span class="nf">standardIcon</span><span class="p">(</span><span class="n">QStyle</span><span class="p">.</span><span class="n">SP_ComputerIcon</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">style</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nc">QIcon</span><span class="p">())</span>
        <span class="n">menu</span> <span class="o">=</span> <span class="nc">QMenu</span><span class="p">()</span>
        <span class="n">act_show</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">Show</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_quit</span> <span class="o">=</span> <span class="nc">QAction</span><span class="p">(</span><span class="sh">"</span><span class="s">Quit</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">)</span>
        <span class="n">act_show</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_show_from_tray</span><span class="p">)</span>
        <span class="n">act_quit</span><span class="p">.</span><span class="n">triggered</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">QApplication</span><span class="p">.</span><span class="nf">instance</span><span class="p">().</span><span class="n">quit</span><span class="p">)</span>
        <span class="n">menu</span><span class="p">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">act_show</span><span class="p">)</span>
        <span class="n">menu</span><span class="p">.</span><span class="nf">addAction</span><span class="p">(</span><span class="n">act_quit</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tray</span><span class="p">.</span><span class="nf">setContextMenu</span><span class="p">(</span><span class="n">menu</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tray</span><span class="p">.</span><span class="n">activated</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="k">lambda</span> <span class="n">reason</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_show_from_tray</span><span class="p">()</span> <span class="k">if</span> <span class="n">reason</span> <span class="o">==</span> <span class="n">QSystemTrayIcon</span><span class="p">.</span><span class="n">Trigger</span> <span class="k">else</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tray</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
        <span class="n">QApplication</span><span class="p">.</span><span class="nf">instance</span><span class="p">().</span><span class="nf">setQuitOnLastWindowClosed</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

    <span class="c1"># -------- Chat list ops -------- #
</span>
    <span class="k">def</span> <span class="nf">_load_chat_list</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">chat</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">list_chats</span><span class="p">():</span>
            <span class="n">item</span> <span class="o">=</span> <span class="nc">QListWidgetItem</span><span class="p">(</span><span class="n">chat</span><span class="p">.</span><span class="n">title</span><span class="p">)</span>
            <span class="n">item</span><span class="p">.</span><span class="nf">setData</span><span class="p">(</span><span class="n">Qt</span><span class="p">.</span><span class="n">UserRole</span><span class="p">,</span> <span class="n">chat</span><span class="p">.</span><span class="n">chat_id</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">addItem</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">count</span><span class="p">()</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_new_chat</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">setCurrentRow</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_new_chat</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">chat_id</span> <span class="o">=</span> <span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">().</span><span class="nb">hex</span><span class="p">[:</span><span class="mi">12</span><span class="p">]</span>
        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_model</span><span class="p">.</span><span class="nf">text</span><span class="p">()</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
        <span class="p">}</span>
        <span class="n">chat</span> <span class="o">=</span> <span class="nc">Chat</span><span class="p">(</span>
            <span class="n">chat_id</span><span class="o">=</span><span class="n">chat_id</span><span class="p">,</span>
            <span class="n">title</span><span class="o">=</span><span class="sh">"</span><span class="s">New Chat</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">created_ts</span><span class="o">=</span><span class="nf">now_ts</span><span class="p">(),</span>
            <span class="n">updated_ts</span><span class="o">=</span><span class="nf">now_ts</span><span class="p">(),</span>
            <span class="n">model</span><span class="o">=</span><span class="n">params</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">],</span>
            <span class="n">params</span><span class="o">=</span><span class="n">params</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[]</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">save_chat</span><span class="p">(</span><span class="n">chat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_load_chat_list</span><span class="p">()</span>
        <span class="c1"># Select new
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">count</span><span class="p">()):</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">item</span><span class="p">(</span><span class="n">i</span><span class="p">).</span><span class="nf">data</span><span class="p">(</span><span class="n">Qt</span><span class="p">.</span><span class="n">UserRole</span><span class="p">)</span> <span class="o">==</span> <span class="n">chat_id</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">setCurrentRow</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
                <span class="k">break</span>

    <span class="k">def</span> <span class="nf">_open_selected_chat</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">currentItem</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">chat_id</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">data</span><span class="p">(</span><span class="n">Qt</span><span class="p">.</span><span class="n">UserRole</span><span class="p">)</span>
        <span class="n">chat</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">load_chat</span><span class="p">(</span><span class="n">chat_id</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">chat</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span> <span class="o">=</span> <span class="n">chat</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_render_chat</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_rename_chat</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">currentItem</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">new_title</span><span class="p">,</span> <span class="n">ok</span> <span class="o">=</span> <span class="n">QInputDialog</span><span class="p">.</span><span class="nf">getText</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">Rename</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Chat title:</span><span class="sh">"</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">title</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">ok</span> <span class="ow">and</span> <span class="n">new_title</span><span class="p">.</span><span class="nf">strip</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">new_title</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">updated_ts</span> <span class="o">=</span> <span class="nf">now_ts</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">save_chat</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">)</span>
            <span class="n">item</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">title</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_delete_chat</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">currentItem</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">chat_id</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">data</span><span class="p">(</span><span class="n">Qt</span><span class="p">.</span><span class="n">UserRole</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">QMessageBox</span><span class="p">.</span><span class="nf">question</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">Delete</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Delete this chat?</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="n">QMessageBox</span><span class="p">.</span><span class="n">Yes</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">delete_chat</span><span class="p">(</span><span class="n">chat_id</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_load_chat_list</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_export_chat_md</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">QFileDialog</span><span class="p">.</span><span class="nf">getSaveFileName</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">Export Markdown</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">title</span><span class="si">}</span><span class="s">.md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Markdown (*.md)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">export_chat_markdown</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">,</span> <span class="nc">Path</span><span class="p">(</span><span class="n">out</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">statusBar</span><span class="p">().</span><span class="nf">showMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">Exported</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># -------- Rendering -------- #
</span>
    <span class="k">def</span> <span class="nf">_render_chat</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="c1"># Refresh param controls from chat params
</span>        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">params</span>
        <span class="n">self</span><span class="p">.</span><span class="n">edt_model</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">setValue</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">value</span><span class="p">())))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">setValue</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">value</span><span class="p">())))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">.</span><span class="nf">setValue</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">.</span><span class="nf">value</span><span class="p">())))</span>

        <span class="n">msgs</span> <span class="o">=</span> <span class="p">[</span><span class="nf">dict</span><span class="p">(</span><span class="n">role</span><span class="o">=</span><span class="n">m</span><span class="p">.</span><span class="n">role</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="n">m</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="n">ts</span><span class="o">=</span><span class="n">m</span><span class="p">.</span><span class="n">ts</span><span class="p">)</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">messages</span><span class="p">]</span>
        <span class="n">html</span> <span class="o">=</span> <span class="nf">messages_to_html</span><span class="p">(</span><span class="n">msgs</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">markdown_css</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="nf">setHtml</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="nf">moveCursor</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">view</span><span class="p">.</span><span class="nf">textCursor</span><span class="p">().</span><span class="n">End</span><span class="p">)</span>

    <span class="c1"># -------- Sending -------- #
</span>
    <span class="k">def</span> <span class="nf">_send</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">.</span><span class="nf">toPlainText</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">text</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="c1"># Append user message
</span>        <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Message</span><span class="p">(</span><span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="n">text</span><span class="p">,</span> <span class="n">ts</span><span class="o">=</span><span class="nf">now_ts</span><span class="p">()))</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">title</span> <span class="o">==</span> <span class="sh">"</span><span class="s">New Chat</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">text</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">title</span> <span class="o">=</span> <span class="p">(</span><span class="n">text</span><span class="p">[:</span><span class="mi">48</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">48</span> <span class="k">else</span> <span class="n">text</span>
            <span class="c1"># Update list title
</span>            <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">chat_list</span><span class="p">.</span><span class="nf">currentItem</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">item</span><span class="p">:</span>
                <span class="n">item</span><span class="p">.</span><span class="nf">setText</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">title</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">updated_ts</span> <span class="o">=</span> <span class="nf">now_ts</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">save_chat</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">input</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_render_chat</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">statusBar</span><span class="p">().</span><span class="nf">showMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">Sending…</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># Build effective runtime config (API base/key may have changed)
</span>        <span class="n">runtime_cfg</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">)</span>
        <span class="n">runtime_cfg</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="n">runtime_cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">api_base</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_api_base</span><span class="p">.</span><span class="nf">text</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span> <span class="ow">or</span> <span class="n">runtime_cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_base</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">runtime_cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_api_key</span><span class="p">.</span><span class="nf">text</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="nf">update_config</span><span class="p">(</span><span class="n">runtime_cfg</span><span class="p">)</span>

        <span class="c1"># Assemble payload
</span>        <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_model</span><span class="p">.</span><span class="nf">text</span><span class="p">().</span><span class="nf">strip</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
        <span class="p">}</span>
        <span class="n">messages_payload</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="n">m</span><span class="p">.</span><span class="n">role</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">m</span><span class="p">.</span><span class="n">content</span><span class="p">}</span> <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">messages</span><span class="p">]</span>

        <span class="n">worker</span> <span class="o">=</span> <span class="nc">LLMWorker</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">,</span> <span class="n">messages_payload</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>
        <span class="n">worker</span><span class="p">.</span><span class="n">signals</span><span class="p">.</span><span class="n">success</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_on_llm_success</span><span class="p">)</span>
        <span class="n">worker</span><span class="p">.</span><span class="n">signals</span><span class="p">.</span><span class="n">error</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_on_llm_error</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">thread_pool</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="n">worker</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_on_llm_success</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">reply</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Message</span><span class="p">(</span><span class="n">role</span><span class="o">=</span><span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="n">content</span><span class="o">=</span><span class="n">reply</span><span class="p">,</span> <span class="n">ts</span><span class="o">=</span><span class="nf">now_ts</span><span class="p">()))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">updated_ts</span> <span class="o">=</span> <span class="nf">now_ts</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">save_chat</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_render_chat</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">statusBar</span><span class="p">().</span><span class="nf">showMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">Reply received</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_on_llm_error</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">err</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">QMessageBox</span><span class="p">.</span><span class="nf">critical</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">LLM Error</span><span class="sh">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">statusBar</span><span class="p">().</span><span class="nf">showMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">Error</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># -------- Settings -------- #
</span>
    <span class="k">def</span> <span class="nf">_apply_now</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># Update current chat params without persisting as user defaults
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">params</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_model</span><span class="p">.</span><span class="nf">text</span><span class="p">().</span><span class="nf">strip</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
            <span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">.</span><span class="nf">value</span><span class="p">(),</span>
        <span class="p">})</span>
        <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">.</span><span class="n">params</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">storage</span><span class="p">.</span><span class="nf">save_chat</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">current_chat</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">statusBar</span><span class="p">().</span><span class="nf">showMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">Applied to current chat</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_save_settings_clicked</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">patch</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">llm</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">api_base</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_api_base</span><span class="p">.</span><span class="nf">text</span><span class="p">().</span><span class="nf">strip</span><span class="p">(),</span>
                <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_api_key</span><span class="p">.</span><span class="nf">text</span><span class="p">(),</span>
                <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">edt_model</span><span class="p">.</span><span class="nf">text</span><span class="p">().</span><span class="nf">strip</span><span class="p">(),</span>
                <span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">:</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">spin_temp</span><span class="p">.</span><span class="nf">value</span><span class="p">()),</span>
                <span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">:</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">spin_top_p</span><span class="p">.</span><span class="nf">value</span><span class="p">()),</span>
                <span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">spin_max_toks</span><span class="p">.</span><span class="nf">value</span><span class="p">()),</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cfg_mgr</span><span class="p">.</span><span class="nf">save_user_overrides</span><span class="p">(</span><span class="n">patch</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cfg</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cfg_mgr</span><span class="p">.</span><span class="nf">load</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="nf">update_config</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cfg</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">statusBar</span><span class="p">().</span><span class="nf">showMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">Saved to ~/.config/llmchat/config.yaml</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># -------- Tray / Hide -------- #
</span>
    <span class="k">def</span> <span class="nf">_toggle_hide</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">isVisible</span><span class="p">():</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">hide</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">showNormal</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">raise_</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">activateWindow</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_show_from_tray</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">showNormal</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">raise_</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">activateWindow</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">closeEvent</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">event</span><span class="p">:</span> <span class="n">QCloseEvent</span><span class="p">):</span>
        <span class="c1"># If tray enabled, hide on close; Quit via tray menu.
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="sh">"</span><span class="s">tray</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="n">event</span><span class="p">.</span><span class="nf">ignore</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">hide</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">tray</span><span class="p">.</span><span class="nf">showMessage</span><span class="p">(</span><span class="sh">"</span><span class="s">LLM Chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Still running in the tray. Quit from tray menu.</span><span class="sh">"</span><span class="p">,</span> <span class="n">QSystemTrayIcon</span><span class="p">.</span><span class="n">Information</span><span class="p">,</span> <span class="mi">2000</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">super</span><span class="p">().</span><span class="nf">closeEvent</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>

<span class="c1"># ---------------- Entry ---------------- #
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">app_dir</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">__file__</span><span class="p">).</span><span class="nf">resolve</span><span class="p">().</span><span class="n">parent</span>
    <span class="n">app</span> <span class="o">=</span> <span class="nc">QApplication</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">)</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">setApplicationDisplayName</span><span class="p">(</span><span class="n">APP_NAME</span><span class="p">)</span>
    <span class="n">win</span> <span class="o">=</span> <span class="nc">MainWindow</span><span class="p">(</span><span class="n">app_dir</span><span class="p">)</span>
    <span class="n">win</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
    <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="n">app</span><span class="p">.</span><span class="nf">exec</span><span class="p">())</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h2 id="readmemd"><code class="language-plaintext highlighter-rouge">README.md</code></h2>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># LLMChat (PySide6)</span>

A simple, fast LLM Chat client for Linux. OpenAI-compatible endpoint, Markdown rendering, multi-line input, chat log management, per-user settings with admin defaults, and handy shortcuts.

<span class="gu">## Quick start (shared disk)</span>
<span class="p">
1.</span> Admin places the <span class="sb">`llmchat/`</span> folder on a shared disk accessible to users.
<span class="p">2.</span> (Optional) Admin edits <span class="sb">`llmchat/config/defaults.yaml`</span> or creates <span class="sb">`/etc/llmchat/config.yaml`</span> to set initial defaults.
<span class="p">3.</span> User runs:
</code></pre></div></div>
<p>cd /path/to/shared/llmchat
   ./run.sh</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  4. First run creates a venv and installs dependencies.

## Configuration

**Admin defaults (read-only for users):**

  * `./config/defaults.yaml` (in app dir) or `/etc/llmchat/config.yaml`

  * Environment override: set `LLMCHAT_CONFIG_DIR=/shared/path/conf` (must contain `config.yaml`).

**Per-user overrides (editable):**

  * `~/.config/llmchat/config.yaml` (written when you click **Save as My Defaults**).

Settings precedence: _admin defaults → user overrides_. Only user file is written.

## Chat storage

  * Files under `~/.local/share/llmchat/chats/*.json`.

  * Export current chat as Markdown via **Export Markdown…**.

## Shortcuts

  * **Ctrl+Enter** : Send message

  * **Shift+Enter** : New line

  * **Ctrl+N** : New chat

  * **Delete** : Delete chat

  * **Ctrl+S** : Export chat (Markdown)

  * **Ctrl+L** : Focus input

  * **Ctrl+,** : Save settings (write user config)

  * **Ctrl+H** : Hide/Show window (use tray to restore if hidden)

## Endpoint compatibility

Uses OpenAI-compatible `/v1/chat/completions`:

  * Tested with **Ollama** (`ollama serve --api`) as `api_base: http://localhost:11434/v1`

  * Also works with OpenAI-compatible gateways (set base and API key in sidebar).

## Uninstall / Cleanup

  * Remove venv: `rm -rf .venv`

  * Remove user data: `rm -rf ~/.local/share/llmchat ~/.config/llmchat`
</code></pre></div></div>
<p>markdown</p>

<hr />

<h1 id="validation-meets-requirements">Validation (meets requirements)</h1>

<ul>
  <li><strong>Custom LLM endpoint</strong>: Sidebar fields for <code class="language-plaintext highlighter-rouge">API Base</code> and <code class="language-plaintext highlighter-rouge">API Key</code>; saved per-user; applied immediately.</li>
  <li><strong>Multi-line input</strong>: <code class="language-plaintext highlighter-rouge">QTextEdit</code>, Shift+Enter newline, Ctrl+Enter send.</li>
  <li><strong>Chat log management</strong>: New/rename/delete chats; auto-save per message; export to Markdown; persistent JSON in <code class="language-plaintext highlighter-rouge">~/.local/share/llmchat/chats/</code>.</li>
  <li><strong>Change model parameters</strong>: Sidebar controls for model, temperature, top-p, max tokens; <strong>Apply Now</strong> for current chat; <strong>Save as My Defaults</strong> persists to <code class="language-plaintext highlighter-rouge">~/.config/llmchat/config.yaml</code>.</li>
  <li><strong>Shortcut keys</strong>: Implemented (send/new/delete/export/focus/hide-show/settings).</li>
  <li><strong>Render Markdown</strong>: <code class="language-plaintext highlighter-rouge">markdown</code> → HTML in <code class="language-plaintext highlighter-rouge">QTextBrowser</code>, with code fence and table support + CSS.</li>
  <li><strong>Deployment on Linux with shared disk</strong>: No installer; <code class="language-plaintext highlighter-rouge">install.sh</code> bootstraps venv; <code class="language-plaintext highlighter-rouge">run.sh</code> launches; admin drops folder on shared disk and optionally seeds <code class="language-plaintext highlighter-rouge">/etc/llmchat/config.yaml</code> or edits <code class="language-plaintext highlighter-rouge">config/defaults.yaml</code>.</li>
  <li><strong>Admin defaults + per-user overrides</strong>: Deep-merged config; only user file is written back.</li>
  <li><strong>Clear code &amp; messages</strong>: Readable names, comments, straightforward control flow; concise labels in UI.</li>
</ul>

<h2 id="manual-smoke-test-linux">Manual smoke test (Linux)</h2>

<ol>
  <li><code class="language-plaintext highlighter-rouge">./run.sh</code> → window opens.</li>
  <li>In sidebar, set <code class="language-plaintext highlighter-rouge">API Base</code> to <code class="language-plaintext highlighter-rouge">http://localhost:11434/v1</code> (if using Ollama) and <code class="language-plaintext highlighter-rouge">Model</code> (e.g., <code class="language-plaintext highlighter-rouge">llama3.1</code>). Click <strong>Apply Now</strong>.</li>
  <li>Type multi-line prompt; <code class="language-plaintext highlighter-rouge">Ctrl+Enter</code> → assistant reply appears; Markdown renders.</li>
  <li><strong>New</strong> → new conversation created; rename/delete work; export creates <code class="language-plaintext highlighter-rouge">.md</code>.</li>
  <li><strong>Ctrl+H</strong> hides window; tray icon can restore; <strong>Ctrl+H</strong> toggles.</li>
  <li><strong>Save as My Defaults</strong> writes <code class="language-plaintext highlighter-rouge">~/.config/llmchat/config.yaml</code>. Relaunch picks it up.</li>
</ol>

<h2 id="known-limitations--notes">Known limitations / notes</h2>

<ul>
  <li><strong>Global hotkey</strong> (system-wide hide/show) is <em>not</em> implemented to avoid extra dependencies; current <code class="language-plaintext highlighter-rouge">Ctrl+H</code> works when focused, and tray icon handles restoration. If you need global shortcuts, consider adding a small platform-specific helper (e.g. <code class="language-plaintext highlighter-rouge">pynput</code>) or an X11 DBus service.</li>
  <li><strong>Streaming</strong> responses are not implemented to keep the core simple; <code class="language-plaintext highlighter-rouge">requests</code> is used synchronously in a worker thread. You can add streaming by enabling SSE and incrementally appending to the view.</li>
  <li><strong>Syntax highlighting</strong> for code blocks uses basic styling only; integrate <code class="language-plaintext highlighter-rouge">pygments</code> + HTML CSS if you want richer highlighting.</li>
</ul>

<hr />

<p>If you want this as a single-file app instead (one Python file), I can condense it while keeping all features.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;p class="chat--user" markdown="1"&gt;

1\. Implement markdown rendering 2\. multi-endpoint support

&lt;/p&gt;

Got it — I’ll add (1) real Markdown rendering and (2) multi-endpoint support. Below is a **step-by-step** change plan followed by **drop-in file updates**.

Step-by-step (what changes and why)

  1. Markdown rendering

  * Use the `markdown` library with `fenced_code`, `tables`, `sane_lists`, `codehilite`.

  * Render once per page with clean HTML structure (`&lt;html&gt;&lt;head&gt;…&lt;/head&gt;&lt;body&gt;…`), avoiding repeated `&lt;style&gt;` tags.

  * Keep styling driven by the existing `ui.markdown_css` in config.

  2. Multi-endpoint support

  * Extend config: `llm.endpoints[]` (each with `name`, `api_base`, `api_key`, `verify_tls`) and `llm.default_endpoint`.

  * UI: add an “Endpoint” combo box + a “Manage…” button.

  * Per-chat: store the chosen endpoint name in `chat.params['endpoint']`.

  * Save flow: **Save as My Defaults** updates your `~/.config/llmchat/config.yaml` with the edited endpoint and default selection.

  * Manage flow: “Manage Endpoints…” opens a small YAML editor dialog (simple and admin/user-friendly).

* * *

Replace the following files (copy/paste):

`requirements.txt` (add Pygments for nicer code blocks)
</code></pre></div></div>
<p>txt</p>

<p>PySide6&gt;=6.6
requests&gt;=2.31
PyYAML&gt;=6.0.1
markdown&gt;=3.5
Pygments&gt;=2.17</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`config/defaults.yaml` (adds multi-endpoint defaults; backward compatible)
</code></pre></div></div>
<p>yaml</p>

<p>app:
  data_dir: "~/.local/share/llmchat"
  chat_dir_name: "chats"
  window:
    width: 1100
    height: 720</p>

<p>llm:
  # New: multi-endpoint list and default
  endpoints:
    - name: "Local Ollama"
      api_base: "http://localhost:11434/v1"
      api_key: ""
      verify_tls: true
    - name: "OpenAI"
      api_base: "https://api.openai.com"
      api_key: ""
      verify_tls: true
  default_endpoint: "Local Ollama"</p>

<p># Existing per-model params (still used)
  model: "llama3.1"
  temperature: 0.7
  top_p: 0.95
  max_tokens: 512
  timeout_sec: 120
  verify_tls: true  # kept for backward compat</p>

<p>ui:
  font_family: ""
  font_size: 11
  enable_tray: true
  markdown_css: |
    body { font-family: sans-serif; font-size: 13px; }
    code, pre { font-family: "DejaVu Sans Mono", monospace; }
    pre { background: #f5f5f5; padding: 8px; border-radius: 6px; overflow: auto; }
    code { background: #f1f1f1; padding: 2px 4px; border-radius: 4px; }
    .msg-user { background: #e8f0fe; padding: 8px 10px; border-radius: 10px; margin: 10px 0; }
    .msg-assistant { background: #f7f7f7; padding: 8px 10px; border-radius: 10px; margin: 10px 0; }</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`ui_helpers.py` (clean one-pass Markdown → HTML)
</code></pre></div></div>
<p>python</p>

<p>import time
from typing import List
from markdown import markdown</p>

<p>def now_ts() -&gt; float:
    return time.time()</p>

<p>def md_to_html(md_text: str) -&gt; str:
    """
    Convert Markdown to HTML fragment (no <style> or &lt;html&gt; wrappers).
    """
    return markdown(
        md_text,
        extensions=[
            "fenced_code",
            "tables",
            "codehilite",  # uses Pygments if installed
            "sane_lists",
        ],
    )</style></p>

<p>def messages_to_html(messages: List[dict], css: str) -&gt; str:
    """
    Render the whole conversation into a single HTML document.
    """
    parts = [
        "&lt;html&gt;&lt;head&gt;<meta charset="utf-8" />",
        f"<style>{css}</style>",
        "&lt;/head&gt;&lt;body&gt;",
    ]
    for m in messages:
        klass = "msg-user" if m["role"] == "user" else "msg-assistant"
        parts.append(f'&lt;div class="{klass}"&gt;')
        parts.append(md_to_html(m["content"]))
        parts.append("&lt;/div&gt;")
    parts.append("&lt;/body&gt;&lt;/html&gt;")
    return "\n".join(parts)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>`main.py` (adds endpoint combo, manage dialog, fixes small imports, wires per-chat endpoint)
</code></pre></div></div>
<p>python</p>

<p>import sys
import uuid
import traceback
from pathlib import Path</p>

<p>import yaml  # NEW</p>

<p>from PySide6.QtCore import Qt, QThreadPool, QRunnable, Signal, QObject, QSize
from PySide6.QtGui import QAction, QIcon, QKeySequence, QCloseEvent
from PySide6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QTextEdit,
    QPushButton, QListWidget, QListWidgetItem, QLabel, QFileDialog, QSplitter,
    QFormLayout, QLineEdit, QSpinBox, QDoubleSpinBox, QDockWidget,
    QMessageBox, QTextBrowser, QToolBar, QSystemTrayIcon, QMenu,
    QInputDialog, QStyle, QPlainTextEdit, QDialog, QDialogButtonBox, QComboBox
)</p>

<p>from config_manager import ConfigManager
from storage import ChatStorage, Chat, Message
from llm_client import LLMClient
from ui_helpers import now_ts, messages_to_html</p>

<p>APP_NAME = "LLMChat"</p>

<h1 id="--worker-infra--">—————- Worker infra —————-</h1>

<p>class WorkerSignals(QObject):
    success = Signal(str)
    error = Signal(str)</p>

<p>class LLMWorker(QRunnable):
    def <strong>init</strong>(self, client: LLMClient, messages_payload, params):
        super().<strong>init</strong>()
        self.client = client
        self.messages_payload = messages_payload
        self.params = params
        self.signals = WorkerSignals()</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def run(self):
    try:
        reply = self.client.chat_completion(self.messages_payload, self.params)
        self.signals.success.emit(reply)
    except Exception as e:
        tb = traceback.format_exc()
        self.signals.error.emit(f"{e}\n{tb}")
</code></pre></div></div>

<h1 id="--endpoints-dialog--">—————- Endpoints dialog —————-</h1>

<p>class EndpointsDialog(QDialog):
    """
    Simple YAML editor for endpoints list.
    """
    def <strong>init</strong>(self, parent, endpoints: list):
        super().<strong>init</strong>(parent)
        self.setWindowTitle("Manage Endpoints")
        self.resize(600, 420)
        layout = QVBoxLayout(self)
        self.edit = QPlainTextEdit(self)
        self.edit.setPlainText(yaml.safe_dump(endpoints or [], sort_keys=False))
        layout.addWidget(QLabel("Edit YAML list of endpoints (name, api_base, api_key, verify_tls):"))
        layout.addWidget(self.edit)
        btns = QDialogButtonBox(QDialogButtonBox.Save | QDialogButtonBox.Cancel, parent=self)
        btns.accepted.connect(self.accept)
        btns.rejected.connect(self.reject)
        layout.addWidget(btns)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def get_endpoints(self):
    try:
        data = yaml.safe_load(self.edit.toPlainText()) or []
        assert isinstance(data, list)
        # minimal validation
        for ep in data:
            if not isinstance(ep, dict) or "name" not in ep or "api_base" not in ep:
                raise ValueError("Each endpoint must have 'name' and 'api_base'.")
        return data
    except Exception as e:
        QMessageBox.critical(self, "Invalid YAML", str(e))
        return None
</code></pre></div></div>

<h1 id="--main-window--">—————- Main Window —————-</h1>

<p>class MainWindow(QMainWindow):
    def <strong>init</strong>(self, app_dir: Path):
        super().<strong>init</strong>()
        self.setWindowTitle("LLM Chat Client")
        self.app_dir = app_dir</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    # Config
    self.cfg_mgr = ConfigManager(app_dir)
    self.cfg = self.cfg_mgr.load()

    # Storage
    data_dir = Path(self.cfg.get("app", {}).get("data_dir", "~/.local/share/llmchat")).expanduser()
    chat_dir_name = self.cfg.get("app", {}).get("chat_dir_name", "chats")
    self.storage = ChatStorage(data_dir, chat_dir_name)

    # LLM client
    self.client = LLMClient(self.cfg)

    # State
    self.thread_pool = QThreadPool.globalInstance()
    self.current_chat: Chat | None = None
    self.markdown_css = self.cfg.get("ui", {}).get("markdown_css", "")
    self.endpoints_by_name = {}  # name -&gt; dict

    self._build_ui()
    self._refresh_endpoints()  # populate combo before chats
    self._load_chat_list()
    self._apply_initial_window_size()
    self._setup_tray()

# -------- UI construction -------- #

def _build_ui(self):
    splitter = QSplitter()
    splitter.setChildrenCollapsible(False)

    # Left: chat list + controls
    left = QWidget()
    left_layout = QVBoxLayout(left)
    self.chat_list = QListWidget()
    left_layout.addWidget(QLabel("Conversations"))
    left_layout.addWidget(self.chat_list)

    btn_row = QHBoxLayout()
    self.btn_new = QPushButton("New")
    self.btn_rename = QPushButton("Rename")
    self.btn_delete = QPushButton("Delete")
    btn_row.addWidget(self.btn_new)
    btn_row.addWidget(self.btn_rename)
    btn_row.addWidget(self.btn_delete)
    left_layout.addLayout(btn_row)

    # Right: conversation + input
    right = QWidget()
    right_layout = QVBoxLayout(right)

    self.view = QTextBrowser()
    self.view.setOpenExternalLinks(True)
    right_layout.addWidget(self.view, 1)

    input_row = QHBoxLayout()
    self.input = QTextEdit()
    self.input.setPlaceholderText("Type your message… (Shift+Enter for newline, Ctrl+Enter to send)")
    self.input.setAcceptRichText(False)
    input_row.addWidget(self.input, 1)
    self.btn_send = QPushButton("Send")
    self.btn_send.setDefault(True)
    input_row.addWidget(self.btn_send)
    right_layout.addLayout(input_row)

    splitter.addWidget(left)
    splitter.addWidget(right)
    splitter.setStretchFactor(1, 3)
    self.setCentralWidget(splitter)

    # Dock: model params, endpoint picker
    dock = QDockWidget("Model &amp; Endpoint", self)
    dock.setAllowedAreas(Qt.RightDockWidgetArea | Qt.LeftDockWidgetArea)
    params_widget = QWidget()
    form = QFormLayout(params_widget)

    # NEW: endpoint row (combo + manage)
    ep_row = QHBoxLayout()
    self.cmb_endpoint = QComboBox()
    self.btn_manage_ep = QPushButton("Manage…")
    ep_row.addWidget(self.cmb_endpoint, 1)
    ep_row.addWidget(self.btn_manage_ep)
    form.addRow(QLabel("Endpoint"), ep_row)

    self.edt_api_base = QLineEdit(self.cfg.get("llm", {}).get("api_base", ""))
    self.edt_api_key = QLineEdit(self.cfg.get("llm", {}).get("api_key", ""))
    self.edt_api_key.setEchoMode(QLineEdit.Password)
    self.edt_model = QLineEdit(self.cfg.get("llm", {}).get("model", ""))

    self.spin_temp = QDoubleSpinBox()
    self.spin_temp.setRange(0.0, 2.0)
    self.spin_temp.setSingleStep(0.1)
    self.spin_temp.setValue(float(self.cfg.get("llm", {}).get("temperature", 0.7)))

    self.spin_top_p = QDoubleSpinBox()
    self.spin_top_p.setRange(0.0, 1.0)
    self.spin_top_p.setSingleStep(0.05)
    self.spin_top_p.setValue(float(self.cfg.get("llm", {}).get("top_p", 0.95)))

    self.spin_max_toks = QSpinBox()
    self.spin_max_toks.setRange(16, 32768)
    self.spin_max_toks.setValue(int(self.cfg.get("llm", {}).get("max_tokens", 512)))

    form.addRow(QLabel("API Base"), self.edt_api_base)
    form.addRow(QLabel("API Key"), self.edt_api_key)
    form.addRow(QLabel("Model"), self.edt_model)
    form.addRow(QLabel("Temperature"), self.spin_temp)
    form.addRow(QLabel("Top-p"), self.spin_top_p)
    form.addRow(QLabel("Max tokens"), self.spin_max_toks)

    btns = QHBoxLayout()
    self.btn_save_settings = QPushButton("Save as My Defaults")
    self.btn_apply = QPushButton("Apply Now")
    btns.addWidget(self.btn_apply)
    btns.addWidget(self.btn_save_settings)
    form.addRow(btns)

    params_widget.setLayout(form)
    dock.setWidget(params_widget)
    self.addDockWidget(Qt.RightDockWidgetArea, dock)

    # Toolbar &amp; actions
    tb = QToolBar("Main")
    tb.setIconSize(QSize(16, 16))
    self.addToolBar(tb)

    act_new = QAction("New Chat", self)
    act_new.setShortcut(QKeySequence("Ctrl+N"))
    act_send = QAction("Send", self)
    act_send.setShortcut(QKeySequence("Ctrl+Return"))
    act_export = QAction("Export Markdown…", self)
    act_export.setShortcut(QKeySequence("Ctrl+S"))
    act_delete = QAction("Delete Chat", self)
    act_delete.setShortcut(QKeySequence(Qt.Key_Delete))
    act_focus = QAction("Focus Input", self)
    act_focus.setShortcut(QKeySequence("Ctrl+L"))
    act_settings = QAction("Save Settings", self)
    act_settings.setShortcut(QKeySequence("Ctrl+,"))
    act_hide = QAction("Hide/Show", self)
    act_hide.setShortcut(QKeySequence("Ctrl+H"))

    for a in (act_new, act_send, act_export, act_delete, act_focus, act_settings, act_hide):
        tb.addAction(a)

    # Connect signals
    self.btn_new.clicked.connect(self._new_chat)
    self.btn_rename.clicked.connect(self._rename_chat)
    self.btn_delete.clicked.connect(self._delete_chat)
    self.chat_list.itemDoubleClicked.connect(lambda _: self._open_selected_chat())
    self.chat_list.itemSelectionChanged.connect(self._open_selected_chat)

    self.btn_send.clicked.connect(self._send)
    act_send.triggered.connect(self._send)
    act_new.triggered.connect(self._new_chat)
    act_export.triggered.connect(self._export_chat_md)
    act_delete.triggered.connect(self._delete_chat)
    act_focus.triggered.connect(lambda: self.input.setFocus())
    act_settings.triggered.connect(self._save_settings_clicked)
    act_hide.triggered.connect(self._toggle_hide)

    self.btn_apply.clicked.connect(self._apply_now)
    self.btn_save_settings.clicked.connect(self._save_settings_clicked)

    # NEW: endpoint handlers
    self.cmb_endpoint.currentTextChanged.connect(self._on_endpoint_changed)
    self.btn_manage_ep.clicked.connect(self._manage_endpoints)

    self.statusBar().showMessage("Ready")

def _apply_initial_window_size(self):
    w = int(self.cfg.get("app", {}).get("window", {}).get("width", 1100))
    h = int(self.cfg.get("app", {}).get("window", {}).get("height", 720))
    self.resize(w, h)

def _setup_tray(self):
    if not self.cfg.get("ui", {}).get("enable_tray", True):
        return
    self.tray = QSystemTrayIcon(self)
    self.tray.setIcon(self.style().standardIcon(QStyle.SP_ComputerIcon))
    menu = QMenu()
    act_show = QAction("Show", self)
    act_quit = QAction("Quit", self)
    act_show.triggered.connect(self._show_from_tray)
    act_quit.triggered.connect(QApplication.instance().quit)
    menu.addAction(act_show)
    menu.addAction(act_quit)
    self.tray.setContextMenu(menu)
    self.tray.activated.connect(lambda reason: self._show_from_tray() if reason == QSystemTrayIcon.Trigger else None)
    self.tray.show()
    QApplication.instance().setQuitOnLastWindowClosed(False)

# -------- Endpoints helpers -------- #

def _refresh_endpoints(self):
    eps = self.cfg.get("llm", {}).get("endpoints", []) or []
    self.endpoints_by_name = {ep["name"]: ep for ep in eps if isinstance(ep, dict) and "name" in ep and "api_base" in ep}
    cur_name = self.cmb_endpoint.currentText() if hasattr(self, "cmb_endpoint") else None

    self.cmb_endpoint.blockSignals(True)
    self.cmb_endpoint.clear()
    for name in self.endpoints_by_name.keys():
        self.cmb_endpoint.addItem(name)
    self.cmb_endpoint.blockSignals(False)

    default_name = self.cfg.get("llm", {}).get("default_endpoint")
    to_select = cur_name or default_name or (next(iter(self.endpoints_by_name), ""))
    if to_select:
        self.cmb_endpoint.setCurrentText(to_select)
        self._on_endpoint_changed(to_select)

def _on_endpoint_changed(self, name: str):
    ep = self.endpoints_by_name.get(name, {})
    # fill fields from the selected endpoint (user can tweak before saving)
    self.edt_api_base.setText(ep.get("api_base", self.edt_api_base.text()))
    self.edt_api_key.setText(ep.get("api_key", self.edt_api_key.text()))

def _manage_endpoints(self):
    dialog = EndpointsDialog(self, list(self.endpoints_by_name.values()))
    if dialog.exec() == QDialog.Accepted:
        new_eps = dialog.get_endpoints()
        if new_eps is None:
            return
        # Save to user overrides
        self.cfg_mgr.save_user_overrides({"llm": {"endpoints": new_eps}})
        self.cfg = self.cfg_mgr.load()
        self._refresh_endpoints()
        self.statusBar().showMessage("Endpoints saved")

# -------- Chat list ops -------- #

def _load_chat_list(self):
    self.chat_list.clear()
    for chat in self.storage.list_chats():
        item = QListWidgetItem(chat.title)
        item.setData(Qt.UserRole, chat.chat_id)
        self.chat_list.addItem(item)
    if self.chat_list.count() == 0:
        self._new_chat()
    else:
        self.chat_list.setCurrentRow(0)

def _new_chat(self):
    chat_id = uuid.uuid4().hex[:12]
    params = {
        "endpoint": self.cmb_endpoint.currentText() or self.cfg.get("llm", {}).get("default_endpoint", ""),
        "model": self.edt_model.text() or self.cfg.get("llm", {}).get("model", ""),
        "temperature": self.spin_temp.value(),
        "top_p": self.spin_top_p.value(),
        "max_tokens": self.spin_max_toks.value(),
    }
    chat = Chat(
        chat_id=chat_id,
        title="New Chat",
        created_ts=now_ts(),
        updated_ts=now_ts(),
        model=params["model"],
        params=params,
        messages=[]
    )
    self.storage.save_chat(chat)
    self._load_chat_list()
    # Select new
    for i in range(self.chat_list.count()):
        if self.chat_list.item(i).data(Qt.UserRole) == chat_id:
            self.chat_list.setCurrentRow(i)
            break

def _open_selected_chat(self):
    item = self.chat_list.currentItem()
    if not item:
        return
    chat_id = item.data(Qt.UserRole)
    chat = self.storage.load_chat(chat_id)
    if not chat:
        return
    self.current_chat = chat

    # apply chat params to UI, including endpoint
    ep_name = self.current_chat.params.get("endpoint") or self.cfg.get("llm", {}).get("default_endpoint", "")
    if ep_name and self.cmb_endpoint.findText(ep_name) != -1:
        self.cmb_endpoint.setCurrentText(ep_name)
    self._render_chat()

def _rename_chat(self):
    item = self.chat_list.currentItem()
    if not item or not self.current_chat:
        return
    new_title, ok = QInputDialog.getText(self, "Rename", "Chat title:", text=self.current_chat.title)
    if ok and new_title.strip():
        self.current_chat.title = new_title.strip()
        self.current_chat.updated_ts = now_ts()
        self.storage.save_chat(self.current_chat)
        item.setText(self.current_chat.title)

def _delete_chat(self):
    item = self.chat_list.currentItem()
    if not item:
        return
    chat_id = item.data(Qt.UserRole)
    if QMessageBox.question(self, "Delete", "Delete this chat?") == QMessageBox.Yes:
        self.storage.delete_chat(chat_id)
        self._load_chat_list()

def _export_chat_md(self):
    if not self.current_chat:
        return
    out, _ = QFileDialog.getSaveFileName(self, "Export Markdown", f"{self.current_chat.title}.md", "Markdown (*.md)")
    if not out:
        return
    self.storage.export_chat_markdown(self.current_chat, Path(out))
    self.statusBar().showMessage("Exported")

# -------- Rendering -------- #

def _render_chat(self):
    if not self.current_chat:
        return
    # Refresh param controls from chat params
    p = self.current_chat.params
    self.edt_model.setText(str(p.get("model", "")))
    self.spin_temp.setValue(float(p.get("temperature", self.spin_temp.value())))
    self.spin_top_p.setValue(float(p.get("top_p", self.spin_top_p.value())))
    self.spin_max_toks.setValue(int(p.get("max_tokens", self.spin_max_toks.value())))

    msgs = [dict(role=m.role, content=m.content, ts=m.ts) for m in self.current_chat.messages]
    html = messages_to_html(msgs, self.markdown_css)
    self.view.setHtml(html)
    self.view.moveCursor(self.view.textCursor().End)

# -------- Sending -------- #

def _send(self):
    text = self.input.toPlainText().strip()
    if not text or not self.current_chat:
        return
    # Append user message
    self.current_chat.messages.append(Message(role="user", content=text, ts=now_ts()))
    if self.current_chat.title == "New Chat" and text:
        self.current_chat.title = (text[:48] + "…") if len(text) &gt; 48 else text
        item = self.chat_list.currentItem()
        if item:
            item.setText(self.current_chat.title)

    # Persist chosen endpoint in chat
    self.current_chat.params["endpoint"] = self.cmb_endpoint.currentText()
    self.current_chat.updated_ts = now_ts()
    self.storage.save_chat(self.current_chat)
    self.input.clear()
    self._render_chat()
    self.statusBar().showMessage("Sending…")

    # Build effective runtime config from selected endpoint + editable fields
    runtime_cfg = dict(self.cfg)
    runtime_cfg.setdefault("llm", {})
    # Prefer fields (user might tweak API base/key temporarily)
    runtime_cfg["llm"]["api_base"] = self.edt_api_base.text().strip() or runtime_cfg["llm"].get("api_base", "")
    runtime_cfg["llm"]["api_key"] = self.edt_api_key.text()

    self.client.update_config(runtime_cfg)

    # Assemble payload
    params = {
        "model": self.edt_model.text().strip(),
        "temperature": self.spin_temp.value(),
        "top_p": self.spin_top_p.value(),
        "max_tokens": self.spin_max_toks.value(),
    }
    messages_payload = [{"role": m.role, "content": m.content} for m in self.current_chat.messages]

    worker = LLMWorker(self.client, messages_payload, params)
    worker.signals.success.connect(self._on_llm_success)
    worker.signals.error.connect(self._on_llm_error)
    self.thread_pool.start(worker)

def _on_llm_success(self, reply: str):
    if not self.current_chat:
        return
    self.current_chat.messages.append(Message(role="assistant", content=reply, ts=now_ts()))
    self.current_chat.updated_ts = now_ts()
    self.storage.save_chat(self.current_chat)
    self._render_chat()
    self.statusBar().showMessage("Reply received")

def _on_llm_error(self, err: str):
    QMessageBox.critical(self, "LLM Error", err)
    self.statusBar().showMessage("Error")

# -------- Settings -------- #

def _apply_now(self):
    if not self.current_chat:
        return
    self.current_chat.params.update({
        "endpoint": self.cmb_endpoint.currentText(),
        "model": self.edt_model.text().strip(),
        "temperature": self.spin_temp.value(),
        "top_p": self.spin_top_p.value(),
        "max_tokens": self.spin_max_toks.value(),
    })
    self.current_chat.model = self.current_chat.params["model"]
    self.storage.save_chat(self.current_chat)
    self.statusBar().showMessage("Applied to current chat")

def _save_settings_clicked(self):
    # Update currently selected endpoint object with the API base/key from fields
    selected = self.cmb_endpoint.currentText()
    endpoints = self.cfg.get("llm", {}).get("endpoints", []) or []
    new_endpoints = []
    for ep in endpoints:
        if ep.get("name") == selected:
            ep = dict(ep)  # copy
            ep["api_base"] = self.edt_api_base.text().strip()
            ep["api_key"] = self.edt_api_key.text()
        new_endpoints.append(ep)

    patch = {
        "llm": {
            "endpoints": new_endpoints,
            "default_endpoint": selected or self.cfg.get("llm", {}).get("default_endpoint", ""),
            "model": self.edt_model.text().strip(),
            "temperature": float(self.spin_temp.value()),
            "top_p": float(self.spin_top_p.value()),
            "max_tokens": int(self.spin_max_toks.value()),
        }
    }
    self.cfg_mgr.save_user_overrides(patch)
    self.cfg = self.cfg_mgr.load()
    self._refresh_endpoints()
    self.client.update_config(self.cfg)
    self.statusBar().showMessage("Saved to ~/.config/llmchat/config.yaml")

# -------- Tray / Hide -------- #

def _toggle_hide(self):
    if self.isVisible():
        self.hide()
    else:
        self.showNormal()
        self.raise_()
        self.activateWindow()

def _show_from_tray(self):
    self.showNormal()
    self.raise_()
    self.activateWindow()

def closeEvent(self, event: QCloseEvent):
    if getattr(self, "tray", None):
        event.ignore()
        self.hide()
        self.tray.showMessage("LLM Chat", "Still running in the tray. Quit from tray menu.", QSystemTrayIcon.Information, 2000)
    else:
        super().closeEvent(event)
</code></pre></div></div>

<h1 id="--entry--">—————- Entry —————-</h1>

<p>def main():
    app_dir = Path(<strong>file</strong>).resolve().parent
    app = QApplication(sys.argv)
    app.setApplicationDisplayName(APP_NAME)
    win = MainWindow(app_dir)
    win.show()
    sys.exit(app.exec())</p>

<p>if <strong>name</strong> == "<strong>main</strong>":
    main()</p>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Python TextBuffer 구현</title><link href="https://hvppyarchive.github.io/python/python-textbuffer/" rel="alternate" type="text/html" title="Python TextBuffer 구현" /><published>2025-08-21T19:10:46+09:00</published><updated>2025-08-21T19:10:46+09:00</updated><id>https://hvppyarchive.github.io/python/python-textbuffer</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-textbuffer/"><![CDATA[<p class="chat--user">

Developer: 현재 Verilog 파일 처리와 관련된 여러 작업(예: 간단한 전처리/후처리 등)을 수행 중입니다. Raw Verilog 소스 코드를 저장할 수 있는 파이썬 클래스 개발을 검토하고 있습니다. Verilog 소스 코드는 문자열 형태로 보관하거나, 줄 단위로 split하여 List[str] 타입(줄바꿈 없이)으로 저장하거나, splitlines(keepends=True)를 사용해 줄바꿈이 포함된 리스트로 보관할 수 있습니다. 여러 방식이 프로젝트 내에서 혼용되면 혼란을 초래할 수 있으므로, 범용적으로 사용할 수 있도록 일관된 구조를 하나의 클래스에 통일할 것을 권장합니다. Begin with a concise checklist (3-7 bullets) of what you will do; keep items conceptual, not implementation-level. After each significant code or class design decision, briefly validate if the chosen approach aligns with the project's consistency and extensibility goals, and self-correct if needed.

</p>

<p>here’s the game plan:</p>

<ul>
  <li>
    <p>Define one <strong>canonical, internal representation</strong> for Verilog source and convert to/from other views.</p>
  </li>
  <li>
    <p>Normalize and <strong>track newline style</strong> for faithful round-trips (LF/CRLF/mixed).</p>
  </li>
  <li>
    <p>Expose <strong>consistent views</strong> (<code class="language-plaintext highlighter-rouge">as_string()</code>, <code class="language-plaintext highlighter-rouge">as_lines(keepends=...)</code>) instead of multiple storage forms.</p>
  </li>
  <li>
    <p>Provide a small, <strong>extensible transform pipeline</strong> for pre/post-processing (with history).</p>
  </li>
  <li>
    <p>Make edits <strong>immutable by default</strong> (return a new instance) with an opt-in <code class="language-plaintext highlighter-rouge">in_place=True</code>.</p>
  </li>
  <li>
    <p>Add <strong>I/O helpers</strong> (<code class="language-plaintext highlighter-rouge">from_*</code>, <code class="language-plaintext highlighter-rouge">to_file</code>) with explicit encoding and deterministic newline policy.</p>
  </li>
</ul>

<hr />

<h2 id="key-design-decisions-with-quick-self-checks">Key design decisions (with quick self-checks)</h2>

<ol>
  <li>
    <p><strong>Canonical storage = one normalized<code class="language-plaintext highlighter-rouge">str</code> (<code class="language-plaintext highlighter-rouge">\n</code> line endings).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> single source of truth avoids drift between parallel representations; Python string ops are fast and familiar.</p>
      </li>
      <li>
        <p><em>Consistency/Extensibility check:</em> callers always interact with one invariant; adding new views later won’t change storage. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Preserve original newline style as metadata (<code class="language-plaintext highlighter-rouge">'lf'|'crlf'|'mixed'</code>).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> we normalize internally but can emit exactly what the file used before, unless caller overrides.</p>
      </li>
      <li>
        <p><em>Check:</em> round-tripping is predictable across the project; future formatters can opt into a uniform style. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Views, not storage:</strong> <code class="language-plaintext highlighter-rouge">as_string(newline=...)</code> and <code class="language-plaintext highlighter-rouge">as_lines(keepends=False|True, newline=...)</code>.</p>

    <ul>
      <li>
        <p><em>Why:</em> banishes ad-hoc lists/strings in the codebase; one class hands out consistent views.</p>
      </li>
      <li>
        <p><em>Check:</em> API encourages a single pattern everywhere; avoids mixing representations in state. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Edits are immutable by default, with<code class="language-plaintext highlighter-rouge">in_place=True</code> for performance-critical paths.</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> functional style reduces surprise; explicit mutability keeps hot paths fast.</p>
      </li>
      <li>
        <p><em>Check:</em> consistent with safety + speed; cache invalidation is centralized. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Lazy, cached line splits (both with and without<code class="language-plaintext highlighter-rouge">keepends</code>).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> many tools need line access; caching avoids repeated <code class="language-plaintext highlighter-rouge">splitlines</code>.</p>
      </li>
      <li>
        <p><em>Check:</em> cache invalidated on any text change; future features (e.g., line index) can reuse it. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Transform pipeline:<code class="language-plaintext highlighter-rouge">apply(transformer)</code> where a transformer is a callable <code class="language-plaintext highlighter-rouge">text -&gt; text</code>, plus history.</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> flexible slot for “pre/post-processing” like trimming, EOL fixing, simple macro munging, etc.</p>
      </li>
      <li>
        <p><em>Check:</em> keeps responsibilities modular; easy to add/remove steps; provenance is recorded. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>I/O boundaries explicit:</strong> constructors for string/lines/file; <code class="language-plaintext highlighter-rouge">to_file(encoding, newline)</code>; no auto-detection magic.</p>

    <ul>
      <li>
        <p><em>Why:</em> explicit beats implicit; fewer surprises across platforms and CI.</p>
      </li>
      <li>
        <p><em>Check:</em> project-wide consistency; easy to thread encoding/newline policy from config. ✅</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="the-class">The class</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">import</span> <span class="n">hashlib</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span><span class="p">]</span>
<span class="n">EmitNewline</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">TextTransformer</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">A simple, composable transformer: text -&gt; text.</span><span class="sh">"""</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="bp">...</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TransformRecord</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">before_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">after_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">VerilogSource</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Canonical container for Verilog source.

    Invariants:
      - Internal storage `_text` always uses LF (</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="s">) line endings.
      - `_newline_style` records the original newline style encountered on load.
      - All edit methods are immutable by default; pass in_place=True to mutate.
    </span><span class="sh">"""</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">_text</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_newline_style</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_encoding</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_source_path</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_version</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_cached_lines</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_cached_lines_keepends</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_history</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">newline_style</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NewlineStyle</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">_assume_normalized</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">_assume_normalized</span><span class="p">:</span>
            <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">norm</span><span class="p">,</span> <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">prefer</span><span class="o">=</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># internal LF
</span>            <span class="k">if</span> <span class="n">newline_style</span> <span class="ow">and</span> <span class="n">newline_style</span> <span class="o">!=</span> <span class="n">style</span><span class="p">:</span>
                <span class="c1"># honor explicit override only for "mixed" -&gt; "lf/crlf" upgrade
</span>                <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">norm</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">style</span>  <span class="c1"># how it *came in* (for round-trip)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">encoding</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">source_path</span> <span class="k">else</span> <span class="bp">None</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_version</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>              <span class="c1"># keepends=False
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>     <span class="c1"># keepends=True
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># ---------- creation / I/O ----------
</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_string</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_lines</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="n">joined</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">joined</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">joined</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_file</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_string</span><span class="p">(</span><span class="n">newline</span><span class="o">=</span><span class="n">newline</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="n">ensure_trailing_newline</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">write_text</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">)</span>

    <span class="c1"># ---------- core views ----------
</span>
    <span class="k">def</span> <span class="nf">as_string</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="p">(</span><span class="ow">not</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">False</span> <span class="ow">and</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">newline</span> <span class="o">==</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">}[</span><span class="n">newline</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span>
        <span class="k">elif</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># "mixed" -&gt; default to CRLF for lines that originally were CRLF? We can't reconstruct mixed reliably.
</span>            <span class="c1"># project policy: emit LF for mixed unless caller overrides
</span>            <span class="k">return</span> <span class="n">s</span>

    <span class="k">def</span> <span class="nf">as_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">)</span>

    <span class="c1"># ---------- inspection ----------
</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">source_path</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">newline_style</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NewlineStyle</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">encoding</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">history</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">,</span> <span class="p">...]:</span>
        <span class="k">return</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">line_count</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">get_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="n">keepend</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>

    <span class="c1"># ---------- transforms / edits ----------
</span>
    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">transformer</span><span class="p">:</span> <span class="n">TextTransformer</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">record</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">before</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="n">after</span> <span class="o">=</span> <span class="nf">transformer</span><span class="p">(</span><span class="n">before</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">after</span> <span class="ow">is</span> <span class="n">before</span><span class="p">:</span>
            <span class="c1"># even if identity, return self or bump version in-place
</span>            <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">self</span>

        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">after</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">inst</span> <span class="o">=</span> <span class="nc">VerilogSource</span><span class="p">(</span>
                <span class="n">after</span><span class="p">,</span>
                <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span>
                <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span>
                <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)]</span>
            <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">replace</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">old</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">new</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">class</span> <span class="nc">_Repl</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span>
            <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">new</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nf">_Repl</span><span class="p">(),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">set_line</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># edit with keepends to keep layout
</span>        <span class="k">if</span> <span class="n">keepend</span><span class="p">:</span>
            <span class="c1"># caller provided EOL
</span>            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># normalize to internal LF
</span>            <span class="n">eol</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="k">if</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="sh">""</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span> <span class="o">+</span> <span class="n">eol</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">insert_lines</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">new_lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">nl</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">if</span> <span class="n">keepends</span> <span class="nf">else </span><span class="p">(</span><span class="n">ln</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">new_lines</span><span class="p">]</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span> <span class="o">+</span> <span class="n">nl</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">delete_lines</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">start</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">end</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">end</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ensure_trailing_newline</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="c1"># ---------- internals ----------
</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">prefer</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">NewlineStyle</span><span class="p">]:</span>
        <span class="n">has_crlf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="n">has_lf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="k">if</span> <span class="n">has_crlf</span> <span class="ow">and</span> <span class="n">has_lf</span> <span class="ow">and</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">text</span><span class="p">:</span>
            <span class="n">style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">has_crlf</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># coerce to LF
</span>        <span class="k">return</span> <span class="n">norm</span><span class="p">,</span> <span class="n">style</span>

    <span class="k">def</span> <span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="n">inst</span> <span class="o">=</span> <span class="nc">VerilogSource</span><span class="p">(</span>
            <span class="n">new_text</span><span class="p">,</span>
            <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
            <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span>
            <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span>
            <span class="n">_assume_normalized</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">_set_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">=</span> <span class="n">new_text</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_invalidate_cache</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_invalidate_cache</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_bump_version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_version</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">_mk_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TransformRecord</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">TransformRecord</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
            <span class="n">before_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">before</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
            <span class="n">after_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">after</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>Validation:</strong> The class enforces one storage invariant (LF string), exposes consistent views, and gives predictable I/O. It’s easy to extend with more transforms or richer metadata later. This aligns with our consistency goal and makes future preprocessors trivial to add. ✅</p>

<hr />

<h2 id="example-transformers-plug-and-play">Example transformers (plug-and-play)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TrimTrailingWhitespace</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">trim_trailing_ws</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="c1"># safe for Verilog; does not alter semantics
</span>        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="se">\t</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">())</span>

<span class="k">class</span> <span class="nc">EnsureFinalNewline</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ensure_final_newline</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">text</span> <span class="k">if</span> <span class="n">text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="nf">else </span><span class="p">(</span><span class="n">text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Validation:</strong> Transformers are plain callables; team members can add steps without touching the core class. History records provenance. ✅</p>

<hr />

<h2 id="typical-usage-uniform-across-the-project">Typical usage (uniform across the project)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load
</span><span class="n">src</span> <span class="o">=</span> <span class="n">VerilogSource</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Get views (without changing internal storage form)
</span><span class="n">text</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_string</span><span class="p">()</span>                            <span class="c1"># normalized LF by default (round-tripped on write)
</span><span class="n">lines</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">()</span>                            <span class="c1"># ['module top(', ...]
</span><span class="n">lines_ke</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>            <span class="c1"># ['module top(\n', ...]
</span>
<span class="c1"># Edits (immutable by default)
</span><span class="n">src2</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">set_line</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">// AUTOGEN: do not edit</span><span class="sh">"</span><span class="p">)</span>
<span class="n">src3</span> <span class="o">=</span> <span class="n">src2</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nc">TrimTrailingWhitespace</span><span class="p">())</span>

<span class="c1"># Save with original newline style, enforcing final newline
</span><span class="n">src3</span><span class="p">.</span><span class="nf">to_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Validation:</strong> This usage pattern prevents any accidental mixing of storage forms. Every operation goes through one API, keeping the project consistent. ✅</p>

<hr />

<h2 id="why-this-will-hold-up-on-bigger-needs">Why this will hold up on bigger needs</h2>

<ul>
  <li>
    <p><strong>Round-trip safety:</strong> We track original newline style and encoding; callers can enforce a project-wide style by always passing <code class="language-plaintext highlighter-rouge">newline="lf"</code> if desired.</p>
  </li>
  <li>
    <p><strong>Performance:</strong> Internal <code class="language-plaintext highlighter-rouge">str</code>, lazy line cache, optional in-place edits.</p>
  </li>
  <li>
    <p><strong>Extensibility:</strong> Add richer transforms (comment stripping, lightweight <code class="language-plaintext highlighter-rouge">\</code>line continuation` merges, macro stubs) without changing the core.</p>
  </li>
  <li>
    <p><strong>Determinism:</strong> No auto encoding detection; configs drive output style.</p>
  </li>
</ul>

<hr />

<h3 id="optional-next-steps-if-you-want-them">Optional next steps (if you want them)</h3>

<ul>
  <li>
    <p>Add a <code class="language-plaintext highlighter-rouge">LineIndex</code> helper for O(1) char-offset ↔ line/col mapping.</p>
  </li>
  <li>
    <p>Provide <code class="language-plaintext highlighter-rouge">diff(other)</code> to aid review bots.</p>
  </li>
  <li>
    <p>Introduce a config object (encoding/newline policy) to thread through I/O.</p>
  </li>
</ul>

<p>If you share any project constraints (e.g., must always emit LF, or enforce final newline), I can wire them into defaults so every team member gets the same behavior automatically.</p>

<p class="chat--user">

보다보니 굳이 VerilogSource에 한정될 필요는 없는거 같은데 범용적인 방법 추천있어?

</p>

<p>아주 좋아요—Verilog 전용이 아니라 <strong>언어 무관(Text-agnostic)</strong> 하게 쓰면 팀 전체에 더 깔끔합니다. 아래처럼 일반화하죠.</p>

<h3 id="체크리스트-개념-위주">체크리스트 (개념 위주)</h3>

<ul>
  <li>
    <p>하나의 <strong>범용 텍스트 컨테이너</strong> 로 표준화하고, 내부 표현은 단일 규칙(LF)로 고정</p>
  </li>
  <li>
    <p><strong>프로필(언어/포맷 메타데이터)</strong> 레이어로 주석/확장자 등만 바꿔 끼우기</p>
  </li>
  <li>
    <p><strong>일관된 뷰 API</strong>(문자열/줄 리스트)만 노출, 저장 형식은 1개</p>
  </li>
  <li>
    <p><strong>변환 파이프라인</strong>(transformer: <code class="language-plaintext highlighter-rouge">text -&gt; text</code>)과 기록(히스토리) 제공</p>
  </li>
  <li>
    <p><strong>불변 편집 기본 + 선택적 in-place</strong> , 캐시/버전 관리</p>
  </li>
  <li>
    <p>명시적 <strong>I/O 정책</strong>(인코딩/개행 방침)과 라운드트립 보장</p>
  </li>
</ul>

<hr />

<h2 id="설계-스텝각-스텝마다-빠른-검증-포함">설계 스텝(각 스텝마다 빠른 검증 포함)</h2>

<ol>
  <li>
    <p><strong>범용 컨테이너 =<code class="language-plaintext highlighter-rouge">TextBuffer</code> (내부 LF 문자열 1개만 저장)</strong></p>

    <ul>
      <li>
        <p><em>이유:</em> 상태가 하나면 표현 불일치가 사라짐.</p>
      </li>
      <li>
        <p><em>검증:</em> 프로젝트 일관성(✅) / 다른 언어로 확장 쉬움(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>메타데이터/프로필(<code class="language-plaintext highlighter-rouge">TextProfile</code>) 분리</strong></p>

    <ul>
      <li>
        <p>이름, 대표 확장자, 주석 마커 등은 “설명”일 뿐, 동작은 동일.</p>
      </li>
      <li>
        <p><em>검증:</em> 텍스트 코어는 같고, 언어별 규칙은 얹기만 함 → 확장성(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>뷰 API =<code class="language-plaintext highlighter-rouge">as_string(newline=...)</code>, <code class="language-plaintext highlighter-rouge">as_lines(keepends=...)</code></strong></p>

    <ul>
      <li>
        <p>저장은 1종, 뷰만 여러 형태로 “보여주기”.</p>
      </li>
      <li>
        <p><em>검증:</em> 코드베이스에서 혼용 방지(✅). 새 뷰 추가 시 내부는 그대로(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>개행 정책과 라운드트립</strong></p>

    <ul>
      <li>
        <p>로드 시 CRLF/혼합 감지 → 내부 LF로 정규화 + “원래 스타일” 메타 보존.</p>
      </li>
      <li>
        <p>저장 시 <code class="language-plaintext highlighter-rouge">original|lf|crlf</code> 선택, <code class="language-plaintext highlighter-rouge">ensure_trailing_newline</code> 옵션 제공.</p>
      </li>
      <li>
        <p><em>검증:</em> 재현성/예측가능성(✅). <em>혼합</em> 은 완전 복원 불가 → 정책상 LF로 내보내기(합리적 셀프코렉트).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>변환 파이프라인 + 역사(sha1)</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">apply(transformer)</code>로 조합 가능; 이름/해시 기록.</p>
      </li>
      <li>
        <p><em>검증:</em> 단계적 전/후처리의 표준 통로(✅). 원인 추적 용이(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>편집 모델: 불변 기본 +<code class="language-plaintext highlighter-rouge">in_place=True</code></strong></p>

    <ul>
      <li>
        <p>안전한 기본값, 고성능 경로 필요 시 명시적 사용.</p>
      </li>
      <li>
        <p><em>검증:</em> 안전/성능 균형(✅). 캐시 무효화 한 곳에서 관리(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>I/O 경계는 명시적</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">from_*</code>/<code class="language-plaintext highlighter-rouge">to_file(encoding,newline)</code>에서만 환경 영향을 받도록.</p>
      </li>
      <li>
        <p><em>검증:</em> CI/OS 차이 최소화(✅).</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="범용-구현-스켈레톤-python">범용 구현 스켈레톤 (Python)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">import</span> <span class="n">hashlib</span><span class="p">,</span> <span class="n">time</span>

<span class="c1"># ---- Profiles (언어/포맷 설명용 메타) ----
</span><span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TextProfile</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">plain</span><span class="sh">"</span>
    <span class="n">file_exts</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>
    <span class="n">line_comment_markers</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>
    <span class="n">block_comment_markers</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">],</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>

<span class="c1"># 예시 프로필
</span><span class="n">VERILOG</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">verilog</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">file_exts</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">.v</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.sv</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">line_comment_markers</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">//</span><span class="sh">"</span><span class="p">,),</span>
    <span class="n">block_comment_markers</span><span class="o">=</span><span class="p">((</span><span class="sh">"</span><span class="s">/*</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">*/</span><span class="sh">"</span><span class="p">),),</span>
<span class="p">)</span>
<span class="n">PYTHON</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">python</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">file_exts</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">.py</span><span class="sh">"</span><span class="p">,),</span>
    <span class="n">line_comment_markers</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">#</span><span class="sh">"</span><span class="p">,),</span>
<span class="p">)</span>

<span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span><span class="p">]</span>
<span class="n">EmitNewline</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">TextTransformer</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="bp">...</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TransformRecord</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">before_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">after_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    범용 텍스트 컨테이너(언어-무관).
    내부 규칙:
      - _text 는 항상 LF(</span><span class="sh">'</span><span class="se">\\</span><span class="s">n</span><span class="sh">'</span><span class="s">)로 정규화된 단일 문자열
      - 원본 개행 스타일/인코딩/경로/프로필을 메타로 보관
      - 불변 편집 기본, in_place=True로 명시적 변경 가능
    </span><span class="sh">"""</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">_text</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_newline_style</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_encoding</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_source_path</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_profile</span><span class="sh">"</span><span class="p">,</span>
                 <span class="sh">"</span><span class="s">_version</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_cached_lines</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_cached_lines_keepends</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_history</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">newline_style</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NewlineStyle</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">_assume_normalized</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">_assume_normalized</span><span class="p">:</span>
            <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">norm</span><span class="p">,</span> <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">norm</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">style</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">encoding</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">source_path</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="n">profile</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_version</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># ---------- constructors / I-O ----------
</span>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_string</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
                    <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_lines</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                   <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span> <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
                   <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">joined</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span> <span class="k">if</span> <span class="n">keepends</span> <span class="k">else</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">joined</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
                  <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_file</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_string</span><span class="p">(</span><span class="n">newline</span><span class="o">=</span><span class="n">newline</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="n">ensure_trailing_newline</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">write_text</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">)</span>

    <span class="c1"># ---------- views ----------
</span>    <span class="k">def</span> <span class="nf">as_string</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
                  <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">+=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">False</span> <span class="ow">and</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

        <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span> <span class="k">if</span> <span class="n">newline</span> <span class="o">==</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">}[</span><span class="n">newline</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span>
        <span class="k">elif</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># mixed는 정확 복원이 불가 → 정책상 LF로 내보냄
</span>            <span class="k">return</span> <span class="n">s</span>

    <span class="k">def</span> <span class="nf">as_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">)</span>

    <span class="c1"># ---------- inspection ----------
</span>    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">profile</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TextProfile</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_profile</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">source_path</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">newline_style</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NewlineStyle</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">encoding</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">history</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">,</span> <span class="p">...]:</span> <span class="k">return</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">line_count</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span> <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">get_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="n">keepend</span><span class="p">)[</span><span class="n">idx</span><span class="p">]</span>

    <span class="c1"># ---------- edits / transforms ----------
</span>    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">transformer</span><span class="p">:</span> <span class="n">TextTransformer</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
              <span class="n">record</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">before</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="n">after</span> <span class="o">=</span> <span class="nf">transformer</span><span class="p">(</span><span class="n">before</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">after</span> <span class="ow">is</span> <span class="n">before</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">after</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">inst</span> <span class="o">=</span> <span class="nc">TextBuffer</span><span class="p">(</span><span class="n">after</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">,</span> <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                              <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span> <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)]</span>
            <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">replace</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">old</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">new</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">class</span> <span class="nc">_Repl</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span>
            <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">new</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nf">_Repl</span><span class="p">(),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">set_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                 <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">keepend</span><span class="p">:</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">eol</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="k">if</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="sh">""</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span> <span class="o">+</span> <span class="n">eol</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">insert_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">new_lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                     <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">nl</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">if</span> <span class="n">keepends</span> <span class="nf">else </span><span class="p">(</span><span class="n">ln</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">new_lines</span><span class="p">]</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span> <span class="o">+</span> <span class="n">nl</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">:]),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">delete_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">start</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">end</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">end</span><span class="p">:]),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ensure_trailing_newline</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span> <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="c1"># ---------- internals ----------
</span>    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">NewlineStyle</span><span class="p">]:</span>
        <span class="n">has_crlf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="n">has_lf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="k">if</span> <span class="n">has_crlf</span> <span class="ow">and</span> <span class="n">has_lf</span> <span class="ow">and</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">text</span><span class="p">:</span> <span class="n">style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">has_crlf</span><span class="p">:</span> <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">),</span> <span class="n">style</span>

    <span class="k">def</span> <span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">);</span> <span class="k">return</span> <span class="n">self</span>
        <span class="n">inst</span> <span class="o">=</span> <span class="nc">TextBuffer</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">,</span> <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                          <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span> <span class="n">_assume_normalized</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">_set_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">=</span> <span class="n">new_text</span><span class="p">;</span> <span class="n">self</span><span class="p">.</span><span class="nf">_invalidate_cache</span><span class="p">();</span> <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_invalidate_cache</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="bp">None</span><span class="p">;</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_bump_version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">_mk_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TransformRecord</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">TransformRecord</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
            <span class="n">before_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">before</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
            <span class="n">after_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">after</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
        <span class="p">)</span>
    <span class="k">def</span> <span class="nf">_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>검증 요약:</strong> 내부 저장 1종(LF), 뷰 API 고정, 변환/편집/히스토리 표준화 → <strong>일관성</strong> 과 <strong>확장성</strong> 목표에 부합(✅). <em>혼합 개행 복원 한계</em> 는 정책으로 명시하여 팀 혼선을 차단(셀프코렉트 완료).</p>

<hr />

<h2 id="사용-예-언어-불문">사용 예 (언어 불문)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Verilog도 Python도 동일한 API
</span><span class="n">buf</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>

<span class="c1"># 일관된 뷰
</span><span class="n">text</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_string</span><span class="p">()</span>
<span class="n">lines</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">()</span>
<span class="n">lines_ke</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># 불변 편집 + 파이프라인
</span><span class="k">class</span> <span class="nc">TrimTrailingWS</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">trim_trailing_ws</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="se">\t</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">())</span>

<span class="n">buf2</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">set_line</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">// AUTOGEN: do not edit</span><span class="sh">"</span><span class="p">)</span>
<span class="n">buf3</span> <span class="o">=</span> <span class="n">buf2</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nc">TrimTrailingWS</span><span class="p">())</span>
<span class="n">buf3</span><span class="p">.</span><span class="nf">to_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="verilog-전용-api가-필요하면">Verilog 전용 API가 필요하면?</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">VerilogSource = TextBuffer</code>에 <code class="language-plaintext highlighter-rouge">profile=VERILOG</code>만 기본값으로 래핑(또는 서브클래싱)하면 됩니다. 코드베이스는 <strong>항상<code class="language-plaintext highlighter-rouge">TextBuffer</code> API</strong>만 사용하므로 혼용이 사라집니다.</li>
</ul>

<hr />

<h2 id="권장-정책팀-규칙으로-고정-추천">권장 정책(팀 규칙으로 고정 추천)</h2>

<ul>
  <li>
    <p>저장 시 기본 <code class="language-plaintext highlighter-rouge">newline="original"</code>(레거시 유지) → 리포맷 단계에서 일괄 <code class="language-plaintext highlighter-rouge">lf</code> 전환 선택 가능.</p>
  </li>
  <li>
    <p>모든 변환은 <strong>Transformer</strong> 로만 수행(직접 문자열 조작 금지).</p>
  </li>
  <li>
    <p>CI에 <code class="language-plaintext highlighter-rouge">ensure_trailing_newline=True</code> + <code class="language-plaintext highlighter-rouge">TrimTrailingWS</code> 적용.</p>
  </li>
</ul>

<p>필요하면 토큰화나 라인-오프셋 매핑, <code class="language-plaintext highlighter-rouge">diff(other)</code> 같은 유틸을 얹을 수 있게 설계해 두었습니다. 원하는 기본 프로필(Verilog/Lex/YAML 등) 목록을 알려주시면 템플릿으로 함께 추가해 드릴게요.</p>

<p class="chat--user">

이런 일을 하는 유명한 클래스나 파이썬 내장은 없어?

</p>

<p>다음 순서로 생각해볼게요 (개념 체크리스트):</p>

<ul>
  <li>
    <p>표준 라이브러리에 “그 일을 전부” 하는 <strong>단일 클래스는 없다</strong> → 조합해서 써야 함.</p>
  </li>
  <li>
    <p>가장 가까운 <strong>표준 도구들</strong> 이 무엇인지 파악하고, 무엇이 <strong>부족</strong> 한지 명확히 하기.</p>
  </li>
  <li>
    <p>부족한 부분(개행 추적·일관된 뷰·변환 파이프라인)은 <strong>얇은 래퍼</strong> 로 보완.</p>
  </li>
  <li>
    <p>최소주의 버전(함수 2–3개)과 확장형(클래스) 중 팀 정책에 맞게 선택.</p>
  </li>
</ul>

<hr />

<h2 id="짧은-결론">짧은 결론</h2>

<ul>
  <li><strong>표준/유명 내장에 “텍스트 컨테이너 + 개행 정책 + 변환/히스토리”를 한 번에 제공하는 건 없습니다.</strong><br />
따라서 지금까지 제안한 <code class="language-plaintext highlighter-rouge">TextBuffer</code> 같은 얇은 래퍼가 <strong>일관성</strong> 과 <strong>라운드트립 보장</strong> 면에서 가장 현실적입니다.<br />
<em>검증:</em> 팀 전역 일관성과 확장성 목표에 부합. ✅</li>
</ul>

<hr />

<h2 id="가장-가까운-표준-도구들무엇을-해주고못-해주는가">가장 가까운 표준 도구들(무엇을 해주고/못 해주는가)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">io.StringIO</code><br />
메모리 파일 객체. 줄 단위 읽기/쓰기 쉽지만 <strong>원본 개행 스타일 추적 X</strong> , 변환/히스토리 X.<br />
<em>검증:</em> “일관된 내부 표현” 요구에 미달 → 래퍼 필요. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">open(..., newline=...)</code> / <code class="language-plaintext highlighter-rouge">pathlib.Path.read_text()/write_text()</code><br />
텍스트 모드에서 <strong>개행 변환을 제어</strong>(쓰기 시 <code class="language-plaintext highlighter-rouge">newline='\n'</code> 강제 등) 가능. 하지만 <strong>읽을 때 원본이 CRLF/혼합이었는지</strong> 를 보존하진 않음(보통 <code class="language-plaintext highlighter-rouge">\n</code>으로 흡수).<br />
<em>검증:</em> 라운드트립용 “원래 개행 스타일” 메타 보존이 없다 → 래퍼 필요. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">fileinput</code><br />
여러 파일을 한 줄 스트림처럼 순회. <strong>컨테이너 아님</strong> , 상태/뷰/히스토리 X. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">difflib</code><br />
차이 계산·패치 출력을 도와줌. <strong>변환 파이프라인/저장소</strong> 는 아님. 보조 도구로는 유용. 🆗</p>
  </li>
  <li>
    <p>(<code class="language-plaintext highlighter-rouge">tokenize</code>, <code class="language-plaintext highlighter-rouge">ast</code>, <code class="language-plaintext highlighter-rouge">parso</code> 등)<br />
언어별 파서/토크나이저. “구문 인지 변환”에는 좋지만 <strong>범용 텍스트 컨테이너 역할</strong> 은 아님. 보조. 🆗</p>
  </li>
</ul>

<blockquote>
  <p>요약: <strong>조각들은 있지만, “일관 컨테이너 + 개행 정책 + 변환/히스토리” 조합은 직접 얇게 감싸야</strong> 합니다.</p>
</blockquote>

<hr />

<h2 id="최소주의-대안클래스-없이-함수-3개로">최소주의 대안(클래스 없이 함수 3개로)</h2>

<p>클래스가 부담이면, 팀 규칙을 함수로 고정하세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="k">def</span> <span class="nf">detect_newline_style</span><span class="p">(</span><span class="n">raw</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>  <span class="c1"># "lf" | "crlf" | "mixed"
</span>    <span class="n">crlf</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lf</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">cr</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">)</span> <span class="o">-</span> <span class="n">crlf</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">crlf</span> <span class="ow">and</span> <span class="p">(</span><span class="n">lf</span> <span class="o">-</span> <span class="n">crlf</span><span class="p">))</span> <span class="ow">or</span> <span class="n">cr</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  <span class="c1"># 서로 섞여 있으면 mixed
</span>        <span class="k">return</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span> <span class="k">if</span> <span class="n">crlf</span> <span class="k">else</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">normalize_to_lf</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">emit_with_newline</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">style</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span> <span class="k">else</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># mixed는 정책상 lf 취급 권장
</span></code></pre></div></div>

<p>사용 패턴:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raw</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">p</span><span class="p">).</span><span class="nf">read_bytes</span><span class="p">()</span>
<span class="n">style</span> <span class="o">=</span> <span class="nf">detect_newline_style</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>          <span class="c1"># 원본 스타일 메타
</span><span class="n">text</span> <span class="o">=</span> <span class="nf">normalize_to_lf</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
<span class="n">lines</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()</span>                  <span class="c1"># 필요한 뷰
</span><span class="n">out</span> <span class="o">=</span> <span class="nf">emit_with_newline</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">style</span><span class="p">)</span>       <span class="c1"># 저장 시 라운드트립
</span></code></pre></div></div>

<ul>
  <li><em>검증:</em> “단일 내부 표현(LF 문자열) + 원본 개행 메타 보존”을 만족. 변환 파이프라인/히스토리는 여전히 없으므로, 필요 시 클래스로 승격. ✅</li>
</ul>

<hr />

<h2 id="언제-표준만으로-충분하고-언제-래퍼가-필요한가">언제 표준만으로 충분하고, 언제 래퍼가 필요한가</h2>

<ul>
  <li>
    <p><strong>충분한 경우:</strong> 단순 읽기/쓰기 + 포맷터(예: pre-commit 훅으로 trailing space 제거, EOF newline 강제). 변환 기록/뷰 일관성이 크게 중요치 않을 때.</p>
  </li>
  <li>
    <p><strong>래퍼 필요:</strong></p>

    <ul>
      <li>
        <p>라운드트립 정확도(원본 개행 정책 유지)가 중요</p>
      </li>
      <li>
        <p>코드베이스에서 “문자열/lines 혼용”을 금지하고 <strong>한 API로 통일</strong> 하고 싶을 때</p>
      </li>
      <li>
        <p>전/후처리를 <strong>파이프라인 + 히스토리</strong> 로 관리하고 싶을 때</p>
      </li>
    </ul>
  </li>
</ul>

<p><em>검증:</em> 우리 요구사항(일관성·확장성·라운드트립) 기준으로는 래퍼가 맞음. ✅</p>

<hr />

<h2 id="참고서드파티-조합-아이디어">참고(서드파티 조합 아이디어)</h2>

<ul>
  <li>
    <p><strong>pre-commit / pre-commit-hooks</strong> : <code class="language-plaintext highlighter-rouge">end-of-file-fixer</code>, <code class="language-plaintext highlighter-rouge">trailing-whitespace</code>, <code class="language-plaintext highlighter-rouge">mixed-line-ending</code> 등으로 저장소 수준 위생 관리.<br />
<em>역할 보완:</em> 파이프라인 일부를 CI로 밀어내 일관성 강화. ✅</p>
  </li>
  <li>
    <p><strong>difflib / unidiff</strong> : 변환 결과를 리뷰하기 쉬운 패치로 제시.<br />
<em>역할 보완:</em> 팀 리뷰 경험 개선. ✅</p>
  </li>
</ul>

<hr />

<h3 id="정리">정리</h3>

<ul>
  <li>
    <p>“그 일을 전부 하는” 유명 내장/클래스는 없음.</p>
  </li>
  <li>
    <p>표준 도구(특히 <code class="language-plaintext highlighter-rouge">open/newline</code>, <code class="language-plaintext highlighter-rouge">Path.write_text(newline=...)</code>)는 <strong>출력 정책 강제</strong> 에는 충분하나, <strong>원본 개행 추적/일관 뷰/히스토리</strong> 는 커버하지 못함.</p>
  </li>
  <li>
    <p>팀 차원의 일관성과 확장성을 원하면, 지금 설계한 <strong>얇은 범용 래퍼</strong>(또는 위의 <strong>함수 3개 + 규칙</strong>)가 가장 안전합니다.</p>
  </li>
</ul>

<p class="chat--user">

@classmethod def from_file(cls, path: Path | str, *, profile: TextProfile = TextProfile(), encoding: str = "utf-8") -&gt; "TextBuffer": p = Path(path) text = p.read_text(encoding=encoding) return cls(text, profile=profile, encoding=encoding, source_path=p) 여기 중간에 있는 * 은 뭐야? 이런 문법 처음봐

</p>

<p>짧게 체크리스트:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 는 <strong>키워드 전용(Keyword-only) 인자 구분자</strong> 예요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 뒤에 나오는 파라미터는 <strong>반드시<code class="language-plaintext highlighter-rouge">name=value</code> 형태로</strong> 호출해야 해요.</p>
  </li>
  <li>
    <p>목적: <strong>가독성↑</strong> , <strong>실수 방지</strong>(순서 착각), <strong>API 확장성</strong>(새 옵션 추가해도 안전).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 자체는 <code class="language-plaintext highlighter-rouge">*args</code>와 다릅니다(수집 아님, <strong>구분자</strong> 일 뿐).</p>
  </li>
</ul>

<hr />

<h3 id="한-줄-요약">한 줄 요약</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
              <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
</code></pre></div></div>

<p>여기 가운데 <code class="language-plaintext highlighter-rouge">*</code> 때문에 <code class="language-plaintext highlighter-rouge">profile</code>과 <code class="language-plaintext highlighter-rouge">encoding</code>은 <strong>키워드로만</strong> 넘길 수 있습니다.</p>

<ul>
  <li>✅ 올바른 호출:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 기본값 사용
</span><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-16</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>❌ 잘못된 호출(순서로 넘김):
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">VERILOG</span><span class="p">)</span>
<span class="c1"># TypeError: ... takes 2 positional arguments but 3 were given
</span></code></pre></div>    </div>
  </li>
</ul>

<hr />

<h3 id="왜-쓰나요-step-by-step-사고">왜 쓰나요? (step-by-step 사고)</h3>

<ol>
  <li>
    <p><strong>의미가 분명해집니다.</strong><br />
<code class="language-plaintext highlighter-rouge">profile=VERILOG</code> 처럼 이름이 보이니, 인자 의미를 헷갈릴 일이 줄어요.<br />
→ 프로젝트 <strong>일관성</strong> 목표에 부합. ✅</p>
  </li>
  <li>
    <p><strong>파라미터 순서 변경에 강합니다.</strong><br />
나중에 옵션을 더 추가해도 기존 호출부는 <code class="language-plaintext highlighter-rouge">name=value</code>라 <strong>깨지지 않음</strong>.<br />
→ API <strong>확장성</strong> 목표에 부합. ✅</p>
  </li>
  <li>
    <p><strong>실수 방지.</strong><br />
<code class="language-plaintext highlighter-rouge">profile</code>과 <code class="language-plaintext highlighter-rouge">encoding</code>을 순서로 바꿔 넣는 실수를 차단. ✅</p>
  </li>
</ol>

<hr />

<h3 id="-와-args-의-차이"><code class="language-plaintext highlighter-rouge">*</code> 와 <code class="language-plaintext highlighter-rouge">*args</code> 의 차이</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> (단독): <strong>구분자</strong>. 뒤의 인자들을 <strong>키워드 전용</strong> 으로 만듭니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*args</code>: 남는 위치 인자들을 <strong>튜플로 수집</strong> 합니다. (수집 + 구분자 역할 모두)</p>
  </li>
</ul>

<p>예:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>         <span class="c1"># b, c는 키워드-only
</span>    <span class="bp">...</span>

<span class="k">def</span> <span class="nf">g</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span> <span class="c1"># a는 위치, args는 추가 위치들 수집, b는 키워드-only
</span>    <span class="bp">...</span>
</code></pre></div></div>

<hr />

<h3 id="보너스--positional-only-도-있어요">보너스: <code class="language-plaintext highlighter-rouge">/</code> (positional-only) 도 있어요</h3>

<p>Python 3.8+ 부터는 <code class="language-plaintext highlighter-rouge">/</code> 로 <strong>위치 전용</strong> 인자를 강제할 수 있습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">h</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>  <span class="c1"># a: 위치-only, b: 둘 다 가능, c: 키워드-only
</span>    <span class="bp">...</span>
</code></pre></div></div>

<hr />

<h3 id="타입-힌트-관련">타입 힌트 관련</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Path | str</code> 는 <strong>Python 3.10+</strong> 의 Union 약식 문법입니다(이전 버전은 <code class="language-plaintext highlighter-rouge">Union[Path, str]</code>).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">TextProfile()</code> 을 기본값으로 두면 <strong>정의 시점에</strong> 한 번 생성된 인스턴스를 재사용합니다.<br />
여기서는 <code class="language-plaintext highlighter-rouge">@dataclass(frozen=True)</code>라 <strong>불변</strong> 이므로 안전하지만,<br />
일반적으로는 <code class="language-plaintext highlighter-rouge">None</code> 기본값 + 함수 내부에서 생성하는 패턴도 고려하세요.</p>
  </li>
</ul>

<hr />

<p>필요하면, 팀 규칙으로 “옵션 인자는 모두 <code class="language-plaintext highlighter-rouge">*</code> 뒤에 배치”를 정해두면 호출부가 항상 <code class="language-plaintext highlighter-rouge">name=value</code>라 깔끔하고, 장기 유지보수에 유리합니다.</p>

<p class="chat--user">

__slots__는 뭐야?

</p>

<p>짧은 체크리스트(개념):</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">__slots__</code>는 <strong>인스턴스가 가질 수 있는 속성 이름들을 고정</strong> 하는 메커니즘이다.</p>
  </li>
  <li>
    <p>효과: <strong>메모리 절감</strong> , <strong>속성 접근 소폭 빠름</strong> , <strong>오타/임의 속성 추가 방지</strong>.</p>
  </li>
  <li>
    <p>선언: <code class="language-plaintext highlighter-rouge">class C: __slots__ = ('a', 'b')</code> 처럼 <strong>튜플/리스트/이터러블</strong> 에 이름을 나열.</p>
  </li>
  <li>
    <p>주의: <strong>동적 속성 추가 불가</strong> , 상속/디폴트/<code class="language-plaintext highlighter-rouge">__dict__</code>/<code class="language-plaintext highlighter-rouge">__weakref__</code> 처리에 신경.</p>
  </li>
  <li>
    <p>권장 사용: <strong>인스턴스가 아주 많고 필드 스키마가 고정</strong> 된 클래스.</p>
  </li>
</ul>

<hr />

<h1 id="한-줄-정의">한 줄 정의</h1>

<p><code class="language-plaintext highlighter-rouge">__slots__</code>를 정의하면 해당 클래스의 인스턴스는 <strong>per-instance<code class="language-plaintext highlighter-rouge">__dict__</code>를 만들지 않고</strong>, 미리 정해둔 슬롯(고정 필드)만 메모리에 <strong>compact</strong> 하게 저장한다.</p>

<hr />

<h2 id="왜-쓰나-step-by-step">왜 쓰나 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>메모리 절감</strong> : <code class="language-plaintext highlighter-rouge">__dict__</code>(해시맵) 대신 <strong>슬롯 배열</strong> 을 써서 인스턴스당 수십 바이트~수백 바이트를 아낀다(필드 수/파이썬 구현에 따라 상이). 대량 객체(예: 수십만 개)에서 큰 차이.</p>
  </li>
  <li>
    <p><strong>속성 접근 비용 감소</strong> : 해시 조회가 아닌 <strong>오프셋 접근</strong> 이라 약간 빠르다(미세하지만 누적되면 의미).</p>
  </li>
  <li>
    <p><strong>API 안전성</strong> : 선언되지 않은 속성은 설정 자체가 에러 → <strong>오타/임의 필드</strong> 방지.</p>
  </li>
</ol>

<hr />

<h2 id="어떻게-쓰나">어떻게 쓰나</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">next</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 인스턴스 필드 스키마 고정
</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>   <span class="c1"># OK
</span>        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>     <span class="c1"># OK
</span>
<span class="n">n</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">n</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">2</span>      <span class="c1"># OK
</span><span class="n">n</span><span class="p">.</span><span class="n">other</span> <span class="o">=</span> <span class="mi">3</span>      <span class="c1"># AttributeError: 'Node' object has no attribute 'other'
</span></code></pre></div></div>

<ul>
  <li>
    <p><strong>디폴트값</strong> 은 보통 <code class="language-plaintext highlighter-rouge">__init__</code>에서 채운다.</p>
  </li>
  <li>
    <p>클래스 속성으로 기본값을 주고 싶다면:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1"># 모든 인스턴스의 초기 읽기는 10으로 보이지만,
</span>            <span class="c1"># 인스턴스에 a를 설정하면 인스턴스 슬롯 값이 우선한다.
</span></code></pre></div>    </div>
  </li>
</ul>

<hr />

<h2 id="자주-부딪히는-포인트-꼭-알아둘-것">자주 부딪히는 포인트 (꼭 알아둘 것)</h2>

<h3 id="1-__dict__--__weakref__가-필요하면">1) <code class="language-plaintext highlighter-rouge">__dict__</code> / <code class="language-plaintext highlighter-rouge">__weakref__</code>가 필요하면?</h3>

<ul>
  <li>
    <p>기본적으로 <code class="language-plaintext highlighter-rouge">__slots__</code> 클래스에는 <strong>인스턴스<code class="language-plaintext highlighter-rouge">__dict__</code>가 없다</strong>.</p>
  </li>
  <li><strong>예외적으로</strong> 동적 속성을 허용하고 싶다면 슬롯에 <code class="language-plaintext highlighter-rouge">"__dict__"</code>를 명시:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__dict__</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 슬롯 + 동적 속성 허용
</span></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">weakref</code>를 쓰려면 <code class="language-plaintext highlighter-rouge">"__weakref__"</code>도 포함:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__weakref__</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-상속">2) 상속</h3>

<ul>
  <li>
    <p><strong>슬롯 클래스의 서브클래스</strong> 가 <code class="language-plaintext highlighter-rouge">__slots__</code>를 정의하지 않으면, 서브클래스는 <strong>다시<code class="language-plaintext highlighter-rouge">__dict__</code>가 생긴다</strong>(동적 속성 가능).<br />
→ 계속 제한하고 싶다면 <strong>서브클래스에서도<code class="language-plaintext highlighter-rouge">__slots__</code>를 정의</strong>해야 한다.</p>
  </li>
  <li>
    <p>서브클래스에서 <strong>부모 슬롯 이름을 다시 적지 않는다</strong>. 새로 추가하는 슬롯만 나열:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,)</span>
    
<span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,)</span>  <span class="c1"># 'a'는 이미 Base에 있으므로 중복 기재 X
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-다중-상속">3) 다중 상속</h3>

<ul>
  <li>
    <p>다중 상속에서 <strong>슬롯이 서로 충돌</strong> 하면 에러가 날 수 있다.</p>
  </li>
  <li>
    <p>실무 팁: 다중 상속을 최소화하거나, <strong>한쪽만 슬롯</strong> 을 쓰고 다른 쪽은 데이터 없는 믹스인으로 설계.</p>
  </li>
</ul>

<h3 id="4-dataclass와의-결합">4) dataclass와의 결합</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@dataclass(slots=True)</code>(Py3.10+)를 쓰면 <strong>자동으로<code class="language-plaintext highlighter-rouge">__slots__</code>가 생성</strong>된다.</p>
  </li>
  <li>
    <p>이미 수동으로 <code class="language-plaintext highlighter-rouge">__slots__</code>를 정의했다면, <code class="language-plaintext highlighter-rouge">slots=True</code>를 <strong>중복으로 쓰지 않는다</strong>(충돌/중복 정의 주의).</p>
  </li>
</ul>

<h3 id="5-pickle--직렬화">5) pickle / 직렬화</h3>

<ul>
  <li>
    <p>많은 경우 <strong>잘 작동</strong> 하지만, 어떤 프레임워크는 <code class="language-plaintext highlighter-rouge">__dict__</code>를 기대한다.</p>
  </li>
  <li>
    <p>커스텀 직렬화 필요하면 <code class="language-plaintext highlighter-rouge">__getstate__/__setstate__</code>를 구현해 <strong>슬롯 값들을 딕트로 변환</strong> 하는 방식 사용.</p>
  </li>
</ul>

<h3 id="6-프로파일링디버깅-도구">6) 프로파일링/디버깅 도구</h3>

<ul>
  <li>
    <p>일부 도구가 <code class="language-plaintext highlighter-rouge">obj.__dict__</code>를 바로 펼치려다 당황할 수 있다.</p>
  </li>
  <li>
    <p>이런 도구를 쓰면 <code class="language-plaintext highlighter-rouge">"__dict__"</code> 슬롯을 추가하거나, 보조 메서드(예: <code class="language-plaintext highlighter-rouge">to_dict()</code>) 제공.</p>
  </li>
</ul>

<hr />

<h2 id="언제-쓰면-좋은가--피해야-하는가">언제 쓰면 좋은가 / 피해야 하는가</h2>

<p><strong>적합</strong></p>

<ul>
  <li>
    <p>인스턴스가 <strong>엄청 많다</strong> (e.g., 파서 토큰, AST 노드, 로그 레코드 등).</p>
  </li>
  <li>
    <p>속성 스키마가 <strong>변하지 않는다</strong>.</p>
  </li>
  <li>
    <p>라이브러리/코어 레이어에서 <strong>API 안정성</strong> 과 <strong>메모리 효율</strong> 이 중요하다.</p>
  </li>
</ul>

<p><strong>부적합</strong></p>

<ul>
  <li>
    <p>동적으로 속성을 붙였다 뗐다 해야 한다.</p>
  </li>
  <li>
    <p>디버깅/관찰 도구가 <code class="language-plaintext highlighter-rouge">__dict__</code>에 강하게 의존한다.</p>
  </li>
  <li>
    <p>다중 상속 구조가 복잡하다(충돌 위험).</p>
  </li>
</ul>

<hr />

<h2 id="여러분-코드베이스-관점빠른-셀프-체크">여러분 코드베이스 관점(빠른 셀프 체크)</h2>

<ul>
  <li>
    <p>텍스트 버퍼/소스 컨테이너처럼 <strong>필드가 고정</strong> 되고, <strong>많은 인스턴스</strong> 를 만들 가능성이 있다면 <code class="language-plaintext highlighter-rouge">__slots__</code>는 <strong>일관성/성능</strong> 목표에 부합합니다. ✅</p>
  </li>
  <li>
    <p>단, 변환 파이프라인/메타 확장이 잦고 <strong>동적 필드 추가 가능성</strong> 이 있다면, <code class="language-plaintext highlighter-rouge">__slots__</code> 대신 일반 클래스(또는 <code class="language-plaintext highlighter-rouge">__slots__</code>에 <code class="language-plaintext highlighter-rouge">"__dict__"</code> 포함)로 <strong>유연성</strong> 을 남기는 것이 안전합니다. ✅</p>
  </li>
</ul>

<hr />

<h2 id="미니-예시-dataclass--slots">미니 예시: dataclass + slots</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">slots</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># Py3.10+
</span><span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="n">kind</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">value</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">line</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">col</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div></div>

<ul>
  <li>메모리 절감 + 오타 방지 + 명확한 스키마를 한 번에 확보.</li>
</ul>

<p>필요하면, 현재 설계한 <code class="language-plaintext highlighter-rouge">TextBuffer</code>/<code class="language-plaintext highlighter-rouge">VerilogSource</code>에 <code class="language-plaintext highlighter-rouge">__slots__</code>를 적용할 때의 <strong>필드 목록/상속 전략</strong> 을 바로 제안해 드릴게요.</p>

<p class="chat--user">

그냥 타입 판별해서 자동으로 만들게 하는 방식 어때 from_lines, from_string, from_textbuffer 구별하기가 좀 귀찮은데, isinstance 같은걸로 비교해서 자동으로 만들게 하는거지(from_file은 별개로), 기존 함수도 두고 

</p>

<p>좋아요—“타입에 따라 자동 생성”을 넣는 건 편의성에 꽤 유용합니다. 다만 <strong>예측 가능성</strong> 을 해치지 않도록 규칙을 명확히 두면 좋아요.</p>

<h3 id="체크리스트개념">체크리스트(개념)</h3>

<ul>
  <li>
    <p>단일 진입점 <code class="language-plaintext highlighter-rouge">coerce(...)</code>로 <strong>문자열/줄 리스트/TextBuffer</strong> 를 알아서 수용</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">from_*</code>들은 <strong>그대로 유지</strong>(명시적 경로가 필요한 곳에서 사용)</p>
  </li>
  <li>
    <p><strong>모호성 규칙</strong> 고정: <code class="language-plaintext highlighter-rouge">keepends</code> 기본 동작과 판별 기준을 문서화</p>
  </li>
  <li>
    <p>제3자 타입은 <strong>프로토콜/어댑터</strong> 로 확장 가능하게 설계</p>
  </li>
  <li>
    <p>잘못된 타입은 <strong>명확한 오류</strong> 로 거절</p>
  </li>
</ul>

<hr />

<h2 id="설계-결론--빠른-검증">설계 결론 &amp; 빠른 검증</h2>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">TextBuffer.coerce(obj, ...)</code> 추가</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">TextBuffer</code> → 그대로 반환</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">str</code> → <code class="language-plaintext highlighter-rouge">from_string</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">list/tuple/Iterable[str]</code> → <code class="language-plaintext highlighter-rouge">from_lines</code> (필요 시 materialize)</p>
      </li>
      <li>
        <p><em>검증:</em> 호출부 단순화(✅), 기존 명시 API와 공존(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">keepends</code> 기본 정책</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">keepends=None</code>(기본): <strong>한 줄이라도<code class="language-plaintext highlighter-rouge">\n</code>/<code class="language-plaintext highlighter-rouge">\r</code>가 포함되면</strong> <code class="language-plaintext highlighter-rouge">keepends=True</code>로 간주, 아니면 <code class="language-plaintext highlighter-rouge">False</code>.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">keepends</code>를 명시하면 그 값을 그대로 사용.</p>
      </li>
      <li>
        <p><em>검증:</em> 휴리스틱 최소화 + 결정적(✅). 과도한 “추측”은 피함(셀프 코렉트).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>경계 명확화</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">Path/bytes</code>는 <strong>여기서 처리하지 않음</strong>. 파일 I/O는 <code class="language-plaintext highlighter-rouge">from_file</code>로만.</p>
      </li>
      <li>
        <p><em>검증:</em> I/O 사이드이펙트 금지로 일관성 유지(✅).</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="코드-추가-기존-textbuffer에-붙일-메서드">코드 추가 (기존 <code class="language-plaintext highlighter-rouge">TextBuffer</code>에 붙일 메서드)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="c1"># ... 기존 코드 ...
</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">coerce</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        다양한 입력(obj)을 TextBuffer로 표준화.
        - TextBuffer: 그대로 반환
        - str: from_string
        - Iterable[str]: from_lines (필요 시 keepends 추정)
        - (주의) Path/bytes는 여기서 처리하지 않음 → from_file / decode 경로 사용
        </span><span class="sh">"""</span>
        <span class="c1"># 1) 이미 TextBuffer인 경우
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">TextBuffer</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">obj</span>

        <span class="c1"># 2) 문자열
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_string</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="c1"># 3) 문자열 이터러블(리스트/튜플/제너레이터 등)
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="c1"># materialize (제너레이터 보호 및 타입 검사)
</span>            <span class="n">lines</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="nf">all</span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">):</span>
                <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">"</span><span class="s">Iterable must yield str values</span><span class="sh">"</span><span class="p">)</span>

            <span class="c1"># keepends 규칙: 명시값 우선, 없으면 자동 판별
</span>            <span class="n">ke</span> <span class="o">=</span> <span class="n">keepends</span> <span class="k">if</span> <span class="n">keepends</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_lines</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">ke</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="c1"># 4) 그 외 타입은 명확히 거절
</span>        <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="s">Cannot coerce type </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="s"> to TextBuffer. </span><span class="sh">"</span>
            <span class="sh">"</span><span class="s">Use from_file() for paths/files, or pass str/Iterable[str]/TextBuffer.</span><span class="sh">"</span>
        <span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">한 줄이라도 개행 문자를 포함하면 keepends=True로 간주.</span><span class="sh">"""</span>
        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<p><strong>검증:</strong> 단일 진입점으로 편의성을 제공하면서, 파일 I/O·바이트 처리 등 사이드이펙트는 명시 API로 분리 → <strong>일관성/확장성</strong> 목표에 부합. ✅</p>

<hr />

<h2 id="사용-예">사용 예</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buf1</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf2</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>              <span class="c1"># keepends=False
</span><span class="n">buf3</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>          <span class="c1"># keepends=True (자동 판별)
</span><span class="n">buf4</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="n">existing_textbuffer</span><span class="p">)</span>                                        <span class="c1"># 그대로
# 파일은 명시 API 사용
</span><span class="n">buf5</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="확장-아이디어필요-시">확장 아이디어(필요 시)</h2>

<ul>
  <li>
    <p><strong>모듈 전역<code class="language-plaintext highlighter-rouge">ensure_textbuffer(obj, **opts)</code></strong> 함수를 <code class="language-plaintext highlighter-rouge">functools.singledispatch</code>로 제공(내부에서 위 <code class="language-plaintext highlighter-rouge">coerce</code> 호출).</p>
  </li>
  <li>
    <p>외부 타입 지원: 객체가 <code class="language-plaintext highlighter-rouge">to_textbuffer()</code>(또는 <code class="language-plaintext highlighter-rouge">__textbuffer__()</code>)를 구현했다면 그걸 우선 호출하는 <strong>어댑터 패턴</strong> 허용.</p>
  </li>
</ul>

<hr />

<h3 id="최종-판단">최종 판단</h3>

<ul>
  <li>
    <p>“자동 생성”은 생산성을 올리되, <strong>명시 API를 남겨</strong> 경계를 분명히 하는 지금 방식이 가장 안전합니다.</p>
  </li>
  <li>
    <p>휴리스틱은 최소화했고, 필요 시 <code class="language-plaintext highlighter-rouge">keepends</code>를 명시하면 <strong>항상 우선</strong> 합니다.<br />
→ 프로젝트의 <strong>일관성</strong>(놀라움 최소화)과 <strong>확장성</strong>(타입 추가 여지) 목표에 적합합니다. ✅</p>
  </li>
</ul>

<p class="chat--user">

coerce 단어가 좀 어려운데

</p>

<p>좋은 포인트! 이름이 어렵게 느껴지면 쓰는 사람이 안 쓰게 됩니다 😅<br />
아래처럼 바꾸면 어때요?</p>

<h3 id="체크리스트">체크리스트</h3>

<ul>
  <li>
    <p>후보 이름 몇 개 제안하고 의미·관용성 비교</p>
  </li>
  <li>
    <p>하나를 <strong>기본 추천</strong> 으로 선택</p>
  </li>
  <li>
    <p>기존 <code class="language-plaintext highlighter-rouge">coerce</code>는 <strong>호환용 별칭</strong> 으로 남김</p>
  </li>
  <li>
    <p>예시 코드/사용법 제시</p>
  </li>
  <li>
    <p>선택이 <strong>일관성/확장성</strong> 목표에 맞는지 빠른 검증</p>
  </li>
</ul>

<hr />

<h2 id="이름-후보-짧은-코멘트">이름 후보 (짧은 코멘트)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">as_textbuffer(obj, ...)</code> — <strong>가장 추천</strong>. NumPy의 <code class="language-plaintext highlighter-rouge">asarray</code> 패턴처럼 “이걸 TextBuffer로 ‘바꿔서’ 주세요(이미면 그대로)”라는 의미가 <strong>직관적</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ensure_textbuffer(obj, ...)</code> — “TextBuffer 되게 보장해줘”라는 뉘앙스. 명확하지만 약간 길어요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">from_any(obj, ...)</code> — “아무 타입이나 받아들여 생성”. 기능은 맞지만 의미가 약간 포괄적.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wrap(obj, ...)</code> / <code class="language-plaintext highlighter-rouge">adapt(obj, ...)</code> — 포장/어댑트 느낌. 다만 구체성이 떨어짐.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">cast(...)</code> — 타입 캐스트 뉘앙스로 혼동 우려 → 비추천.</p>
  </li>
</ul>

<p><strong>결론:</strong> <code class="language-plaintext highlighter-rouge">as_textbuffer</code>를 기본으로, 클래스 메서드로는 <code class="language-plaintext highlighter-rouge">from_any</code>를 얹고, 기존 <code class="language-plaintext highlighter-rouge">coerce</code>는 alias로 두는 구성이 가장 읽기 쉽고 점진적입니다.</p>

<ul>
  <li><em>검증:</em> 이름만 바꿔도 호출부 가독성↑(일관성 목표 부합) / API 확장 시에도 의미 유지(확장성 목표 부합). ✅</li>
</ul>

<hr />

<h2 id="코드-스니펫-기존-coerce-내용을-내부-구현으로-재사용">코드 스니펫 (기존 <code class="language-plaintext highlighter-rouge">coerce</code> 내용을 내부 구현으로 재사용)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># module-level 함수: 가장 눈에 잘 띄는 진입점
</span><span class="k">def</span> <span class="nf">as_textbuffer</span><span class="p">(</span>
    <span class="n">obj</span><span class="p">,</span>
    <span class="o">*</span><span class="p">,</span>
    <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
    <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_any</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">keepends</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="c1"># ... 기존 코드 ...
</span>
    <span class="c1"># 새 이름: 의미가 분명한 클래스 메서드
</span>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_any</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_from_any_impl</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">keepends</span><span class="p">)</span>

    <span class="c1"># 과거 이름은 호환용 별칭으로 유지 (원하면 향후 deprecate)
</span>    <span class="nb">coerce</span> <span class="o">=</span> <span class="n">from_any</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">_from_any_impl</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">TextBuffer</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">obj</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_string</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="n">lines</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">all</span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">):</span>
                <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">"</span><span class="s">Iterable must yield str values</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">ke</span> <span class="o">=</span> <span class="n">keepends</span> <span class="k">if</span> <span class="n">keepends</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_lines</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">ke</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="s">Cannot convert </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="s"> to TextBuffer. </span><span class="sh">"</span>
            <span class="sh">"</span><span class="s">Use from_file() for paths/files, or pass str/Iterable[str]/TextBuffer.</span><span class="sh">"</span>
        <span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">:</span> <span class="sh">"</span><span class="s">Sequence[str]</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">any</span><span class="p">((</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="사용-예-1">사용 예</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buf1</span> <span class="o">=</span> <span class="nf">as_textbuffer</span><span class="p">(</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf2</span> <span class="o">=</span> <span class="nf">as_textbuffer</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf3</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_any</span><span class="p">([</span><span class="sh">"</span><span class="s">a</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">b</span><span class="se">\n</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>  <span class="c1"># 클래스 메서드 경로
</span><span class="n">buf4</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 기존 코드도 그대로 동작(호환 alias)
</span></code></pre></div></div>

<hr />

<h2 id="빠른-검증--셀프코렉트">빠른 검증 &amp; 셀프코렉트</h2>

<ul>
  <li>
    <p><strong>가독성/예측 가능성:</strong> <code class="language-plaintext highlighter-rouge">as_textbuffer</code> 이름만 보고도 역할이 보입니다. 혼동 여지 낮음. ✅</p>
  </li>
  <li>
    <p><strong>일관성:</strong> <code class="language-plaintext highlighter-rouge">from_string/from_lines/from_file</code> 같은 명시 경로를 유지하면서, “편의 경로”는 <code class="language-plaintext highlighter-rouge">as_textbuffer</code>로 통일. ✅</p>
  </li>
  <li>
    <p><strong>확장성:</strong> 제3자 타입이 늘어나면 <code class="language-plaintext highlighter-rouge">_from_any_impl</code>에 어댑터 훅을 추가하면 됨(예: <code class="language-plaintext highlighter-rouge">obj.__textbuffer__()</code> 지원 등). ✅</p>
  </li>
  <li>
    <p><strong>모호성 관리:</strong> 파일/바이트는 여전히 <code class="language-plaintext highlighter-rouge">from_file</code>/decode 경로로만 처리 → 사이드이펙트·추측 로직 최소화. ✅</p>
  </li>
</ul>

<p>원하시면 프로젝트 전역 네이밍 룰(예: “편의 변환 엔트리는 항상 <code class="language-plaintext highlighter-rouge">as_*</code>로 시작”)도 같이 정리해 드릴게요.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">untitled</title><link href="https://hvppyarchive.github.io/python/python-dataclass-method/" rel="alternate" type="text/html" title="untitled" /><published>2025-08-20T17:53:48+09:00</published><updated>2025-08-20T17:53:48+09:00</updated><id>https://hvppyarchive.github.io/python/python-dataclass-method</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-dataclass-method/"><![CDATA[]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Python 클래스 트리 출력</title><link href="https://hvppyarchive.github.io/python/python-class-tree/" rel="alternate" type="text/html" title="Python 클래스 트리 출력" /><published>2025-08-20T15:45:34+09:00</published><updated>2025-08-20T15:45:34+09:00</updated><id>https://hvppyarchive.github.io/python/python-class-tree</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-class-tree/"><![CDATA[<p class="chat--user">

넌 Python 전문가야. Python에서 계층적 구조를 가지고 있는 커스텀 클래스에 대해 보기 좋게 모든 속성 Tree를 출력하게 하고 싶어. 예를 들어 PyVerilog의 AST의 전체 구조를 알고 싶어.

</p>

<p>좋아! “계층적 구조를 가진 커스텀 클래스(예: PyVerilog AST)”를 보기 좋게 트리로 출력하는 범용 유틸을 만들어볼게.<br />
아래 코드는 다음 아이디어를 따릅니다:</p>

<ol>
  <li>
    <p>노드가 무엇이든 처리: <code class="language-plaintext highlighter-rouge">dict/list/tuple/set</code>, 일반 객체(<code class="language-plaintext highlighter-rouge">__dict__</code>/<code class="language-plaintext highlighter-rouge">__slots__</code>), dataclass, Python <code class="language-plaintext highlighter-rouge">ast.AST</code>, 그리고 PyVerilog처럼 <code class="language-plaintext highlighter-rouge">children()</code>/<code class="language-plaintext highlighter-rouge">attr_names</code> 프로토콜을 가진 객체.</p>
  </li>
  <li>
    <p>루프/사이클 안전: 이미 출력한 객체는 다시 들어가지 않음.</p>
  </li>
  <li>
    <p>커스터마이즈: <code class="language-plaintext highlighter-rouge">max_depth</code>, <code class="language-plaintext highlighter-rouge">max_items</code>, 비공개 속성 포함 여부 등.</p>
  </li>
  <li>
    <p>가독성: <code class="language-plaintext highlighter-rouge">├─/└─/│</code> ASCII 브랜치로 예쁘게 렌더링.</p>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">fields</span> <span class="k">as</span> <span class="n">dc_fields</span>
<span class="kn">import</span> <span class="n">ast</span>
<span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Mapping</span><span class="p">,</span> <span class="n">Iterable</span>

<span class="k">def</span> <span class="nf">is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bytes</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">safe_len</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">safe_repr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">maxlen</span><span class="o">=</span><span class="mi">80</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">&lt;</span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="s"> ...&gt;</span><span class="sh">"</span>
    <span class="k">if</span> <span class="n">maxlen</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxlen</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">r</span><span class="p">[:</span><span class="n">maxlen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">r</span>

<span class="k">def</span> <span class="nf">iter_children</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">max_items</span><span class="o">=</span><span class="mi">50</span><span class="p">):</span>
    <span class="c1"># 1) 매핑형(dict 등)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Mapping</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="nf">items</span><span class="p">()):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">+ items</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">break</span>
            <span class="nf">yield </span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">safe_repr</span><span class="p">(</span><span class="n">k</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># 2) 시퀀스/이터러블(문자열류 제외)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">memoryview</span><span class="p">)):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">,</span> <span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">-</span><span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>

    <span class="c1"># 3) Python 내장 AST
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">ast</span><span class="p">.</span><span class="n">AST</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">ast</span><span class="p">.</span><span class="nf">iter_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># 4) PyVerilog 스타일: children() + attr_names
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">callable</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">)):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">ch</span> <span class="o">=</span> <span class="n">o</span><span class="p">.</span><span class="nf">children</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">ch</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># children()이 [(name, child), ...] 형태면 그대로, 아니면 인덱스 부여
</span>        <span class="nf">if </span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">))</span> <span class="ow">and</span> <span class="n">ch</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">))</span> 
            <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">ch</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">child</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">seq</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">child</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">child</span><span class="p">)</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">-</span><span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">attr_names</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">attr_names</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">attr_names</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">attr_names</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># 5) dataclass
</span>    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
        <span class="k">return</span>

    <span class="c1"># 6) 일반 객체: __dict__/__slots__
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">items</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
            <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span><span class="o">-</span><span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">))</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">slots</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
            <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">slots</span><span class="p">)</span><span class="o">-</span><span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="c1"># 그 밖엔 자식 없음
</span>
<span class="k">def</span> <span class="nf">node_label</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">show_types</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">show_values</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="n">t</span> <span class="o">=</span> <span class="nf">type</span><span class="p">(</span><span class="n">value</span><span class="p">).</span><span class="n">__name__</span>
    <span class="k">if</span> <span class="nf">is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
        <span class="n">val</span> <span class="o">=</span> <span class="nf">safe_repr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span> <span class="k">if</span> <span class="n">show_values</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="k">if</span> <span class="n">show_types</span> <span class="ow">and</span> <span class="n">show_values</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">show_values</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">show_types</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nf">safe_len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="n">extra</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s"> len=</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="sh">"</span> <span class="k">if</span> <span class="n">n</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="sh">""</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: &lt;</span><span class="si">{</span><span class="n">t</span><span class="si">}{</span><span class="n">extra</span><span class="si">}</span><span class="s">&gt;</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">pretty_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">max_items</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
                <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">show_types</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">show_values</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">객체 전체 속성/자식 구조를 트리로 문자열 렌더링.</span><span class="sh">"""</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> 
                    <span class="nf">node_label</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">show_types</span><span class="p">,</span> <span class="n">show_values</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="n">max_depth</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">↪ (cycle)</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">oid</span><span class="p">)</span>

        <span class="n">children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">iter_children</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">include_private</span><span class="p">,</span> <span class="n">include_dunder</span><span class="p">,</span> <span class="n">max_items</span><span class="p">))</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">children</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">children</span><span class="p">):</span>
            <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">walk</span><span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="n">child_prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">depth</span><span class="o">=</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="nf">walk</span><span class="p">(</span><span class="n">root_name</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="c1"># 편의: 바로 출력
</span><span class="k">def</span> <span class="nf">print_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">pretty_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="사용-예시-1-python-표준-ast">사용 예시 1) Python 표준 AST</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">ast</span>
<span class="n">code</span> <span class="o">=</span> <span class="sh">"</span><span class="s">a = 1 + 2</span><span class="se">\n</span><span class="s">b = a * 3</span><span class="sh">"</span>
<span class="n">tree</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
<span class="nf">print_tree</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Module</span><span class="sh">"</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">max_items</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="사용-예시-2-pyverilog-ast-전체-구조">사용 예시 2) PyVerilog AST 전체 구조</h3>

<blockquote>
  <p>PyVerilog에서는 보통 노드가 <code class="language-plaintext highlighter-rouge">children()</code> 메서드(자식 노드 나열)와 <code class="language-plaintext highlighter-rouge">attr_names</code>(스칼라 속성 이름들)를 제공합니다. 위 유틸은 이 프로토콜을 자동 인식합니다.
```python
from pyverilog.vparser.parser import parse</p>
</blockquote>

<p>ast_root, _ = parse(["top.v"])   # 분석할 Verilog 파일들</p>
<h1 id="트리-전체주의-크면-방대합니다">트리 전체(주의: 크면 방대합니다!)</h1>
<p>print_tree(ast_root, root_name="PyVerilogAST", max_depth=6, max_items=50)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### 팁

  * 트리가 너무 크면 `max_depth`/`max_items`를 줄이세요.  
예: `print_tree(ast_root, max_depth=4, max_items=20)`

  * 비공개/던더 속성까지 보고 싶으면:  
`print_tree(obj, include_private=True, include_dunder=True)`

  * 값이 너무 길면 자동으로 `…`로 생략합니다.

  * 순환 참조가 있으면 `(cycle)`로 표시하여 무한루프를 방지합니다.

원하는 출력 스타일(예: 값 숨기기, 타입 숨기기, 특정 속성 제외, 파일로 저장 등)로 더 커스터마이즈한 버전도 바로 만들어줄 수 있어요. PyVerilog에서 모듈 단위로만 보고 싶다든지, 특정 노드 유형만 필터링한다든지—원하는 뷰를 알려주면 거기에 맞춰 손질해줄게요.

&lt;p class="chat--user" markdown="1"&gt;

PyVerilog 스타일에 집착하지 말고 범용적으로 모든 속성 dict 에 대해 트리를 만들어줘. “member 변수명: class명” 형태로 나오면 좋겠어

&lt;/p&gt;

좋아—“속성 dict” 중심으로, 어떤 객체든 **멤버 변수 이름: 클래스명** 형태로 트리를 그려주는 범용 유틸을 바로 줄게.  
(값은 보여주지 않고, 타입(클래스명)만 출력. 사이클/깊이/개수 제한, `__dict__`/`__slots__`/dict/시퀀스 다 지원.)
```python
from dataclasses import is_dataclass, fields as dc_fields
from collections.abc import Mapping, Iterable
import types

# ----- 설정 가능한 필터 -----
DATA_LIKE_TYPES = (str, bytes, bytearray, memoryview, int, float, bool, type(None), complex)

def _class_name(x):
    try:
        return type(x).__name__
    except Exception:
        return "&lt;unknown&gt;"

def _is_primitive(x):
    return isinstance(x, DATA_LIKE_TYPES)

def _iter_object_members(o, include_private=False, include_dunder=False, include_properties=False):
    """
    객체의 '멤버 변수' 후보를 (name, value)로 yield.
    - __dict__, __slots__, dataclass 필드 중심
    - include_properties=True 면 property 게터도 포함(예외 발생 시 무시)
    - 메서드/함수/바운드메서드는 제외
    """
    yielded = set()

    # dataclass 우선
    if is_dataclass(o):
        for f in dc_fields(o):
            name = f.name
            try:
                val = getattr(o, name)
            except Exception:
                continue
            if not include_dunder and name.startswith("__") and name.endswith("__"):
                continue
            if not include_private and name.startswith("_") and not (name.startswith("__") and name.endswith("__")):
                continue
            yielded.add(name)
            yield name, val

    # __dict__
    if hasattr(o, "__dict__"):
        for name, val in vars(o).items():
            if not include_dunder and name.startswith("__") and name.endswith("__"):
                continue
            if not include_private and name.startswith("_") and not (name.startswith("__") and name.endswith("__")):
                continue
            yielded.add(name)
            yield name, val

    # __slots__
    if hasattr(o, "__slots__"):
        slots = getattr(o, "__slots__")
        if isinstance(slots, str):
            slots = [slots]
        for name in slots:
            if name in yielded:
                continue
            if not include_dunder and name.startswith("__") and name.endswith("__"):
                continue
            if not include_private and name.startswith("_") and not (name.startswith("__") and name.endswith("__")):
                continue
            try:
                val = getattr(o, name)
            except Exception:
                continue
            yielded.add(name)
            yield name, val

    # 선택: property
    if include_properties:
        # dir 기반으로 property만 추가
        for name in dir(o):
            if name in yielded:
                continue
            if not include_dunder and name.startswith("__") and name.endswith("__"):
                continue
            if not include_private and name.startswith("_") and not (name.startswith("__") and name.endswith("__")):
                continue
            try:
                attr = getattr(type(o), name, None)
                if isinstance(attr, property):
                    try:
                        val = getattr(o, name)
                    except Exception:
                        continue
                    yield name, val
            except Exception:
                continue

def _iter_children(node, include_private, include_dunder, include_properties, max_items):
    """
    노드의 '자식'을 (name, value)로 통일해 열거.
    규칙:
      1) dict류면 key를 멤버명처럼 사용
      2) list/tuple/set 등은 인덱스/순번으로 표기
      3) 기타 객체는 멤버 변수들(__dict__/__slots__/dataclass/property)
    """
    # 1) 매핑
    if isinstance(node, Mapping):
        for i, (k, v) in enumerate(node.items()):
            if i &gt;= max_items:
                yield ("…(truncated)", f"{len(node) - max_items} more")
                return
            yield (f"{repr(k)}", v)
        return

    # 2) 문자열류 제외한 일반 이터러블(시퀀스/세트 등)
    if isinstance(node, Iterable) and not isinstance(node, (str, bytes, bytearray, memoryview)):
        if isinstance(node, (list, tuple)):
            for i, v in enumerate(node[:max_items]):
                yield (f"[{i}]", v)
            if len(node) &gt; max_items:
                yield ("…(truncated)", f"{len(node) - max_items} more")
            return
        elif isinstance(node, (set, frozenset)):
            for i, v in enumerate(list(node)[:max_items]):
                yield (f"[{i}]", v)
            if len(node) &gt; max_items:
                yield ("…(truncated)", f"{len(node) - max_items} more")
            return

    # 3) 일반 객체: 멤버 변수 dict
    for name, val in _iter_object_members(
        node,
        include_private=include_private,
        include_dunder=include_dunder,
        include_properties=include_properties,
    ):
        yield (name, val)

def attr_tree(
    obj,
    root_name="root",
    max_depth=10,
    max_items=50,
    include_private=False,
    include_dunder=False,
    include_properties=False,
):
    """
    객체의 '속성 dict'을 기반으로 트리를 그립니다.
    출력 포맷: "멤버명: 클래스명"
    - dict/시퀀스 요소도 가독성을 위해 키/인덱스를 '멤버명'처럼 출력합니다.
    """
    seen = set()
    lines = []

    def add_line(prefix, is_last, name, value):
        cls = _class_name(value)
        lines.append(prefix + ("└── " if is_last else "├── ") + f"{name}: {cls}")

    def walk(name, value, prefix="", is_last=True, depth=0):
        add_line(prefix, is_last, name, value)
        if depth &gt;= max_depth:
            return

        # 원시 타입은 더 내려가지 않음
        if _is_primitive(value):
            return

        # 사이클 방지
        oid = id(value)
        if oid in seen:
            child_prefix = prefix + ("    " if is_last else "│   ")
            lines.append(child_prefix + "↪ (cycle)")
            return
        seen.add(oid)

        # 자식 열거
        children = list(_iter_children(
            value,
            include_private=include_private,
            include_dunder=include_dunder,
            include_properties=include_properties,
            max_items=max_items,
        ))

        L = len(children)
        for i, (child_name, child_val) in enumerate(children):
            child_prefix = prefix + ("    " if is_last else "│   ")
            walk(child_name, child_val, prefix=child_prefix, is_last=(i == L - 1), depth=depth + 1)

    walk(root_name, obj, "", True, 0)
    return "\n".join(lines)

def print_attr_tree(obj, **kwargs):
    print(attr_tree(obj, **kwargs))
</code></pre></div></div>

<h3 id="핵심-아이디어-step-by-step">핵심 아이디어 (step-by-step)</h3>

<ol>
  <li>
    <p>“무엇을 자식으로 볼 것인가?”</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">dict</code> → 키를 멤버명으로 사용</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">list/tuple/set</code> → <code class="language-plaintext highlighter-rouge">[인덱스]</code> 또는 순번</p>
      </li>
      <li>
        <p>그 외 객체 → <strong>속성 dict</strong> : <code class="language-plaintext highlighter-rouge">__dict__</code>, <code class="language-plaintext highlighter-rouge">__slots__</code>, (옵션) dataclass 필드와 <code class="language-plaintext highlighter-rouge">@property</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p>출력은 값 대신 <strong>클래스명</strong> 만 (<code class="language-plaintext highlighter-rouge">멤버명: 클래스명</code>).</p>
  </li>
  <li>
    <p><strong>사이클 감지</strong> 로 무한 재귀 방지(객체 <code class="language-plaintext highlighter-rouge">id</code> 기억).</p>
  </li>
  <li>
    <p><strong>탐색 한도</strong> : <code class="language-plaintext highlighter-rouge">max_depth</code>, <code class="language-plaintext highlighter-rouge">max_items</code>로 볼륨 제어.</p>
  </li>
  <li>
    <p><strong>가시성 옵션</strong> : <code class="language-plaintext highlighter-rouge">_private</code>/<code class="language-plaintext highlighter-rouge">__dunder__</code>/<code class="language-plaintext highlighter-rouge">property</code> 노출 여부 선택.</p>
  </li>
</ol>

<h3 id="간단-사용-예시">간단 사용 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">,)</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">k</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nc">B</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lst</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_hidden</span> <span class="o">=</span> <span class="sh">"</span><span class="s">secret</span><span class="sh">"</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="k">return</span> <span class="mi">42</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">A</span><span class="p">()</span>
<span class="nf">print_attr_tree</span><span class="p">(</span>
    <span class="n">a</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>     <span class="c1"># _hidden 숨김
</span>    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>      <span class="c1"># __dunder__ 숨김
</span>    <span class="n">include_properties</span><span class="o">=</span><span class="bp">True</span>    <span class="c1"># property p 포함
</span><span class="p">)</span>
</code></pre></div></div>

<p>예상 출력(축약 예):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">└──</span> <span class="n">A</span><span class="p">:</span> <span class="n">A</span>
    <span class="err">├──</span> <span class="n">x</span><span class="p">:</span> <span class="n">B</span>
    <span class="err">│</span>   <span class="err">└──</span> <span class="n">y</span><span class="p">:</span> <span class="nb">dict</span>
    <span class="err">│</span>       <span class="err">└──</span> <span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">:</span> <span class="nb">list</span>
    <span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">│</span>           <span class="err">└──</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">├──</span> <span class="n">lst</span><span class="p">:</span> <span class="nb">list</span>
    <span class="err">│</span>   <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">dict</span>
    <span class="err">│</span>   <span class="err">│</span>   <span class="err">└──</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="nb">int</span>
    <span class="err">│</span>   <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">tuple</span>
    <span class="err">│</span>       <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">│</span>       <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">└──</span> <span class="n">p</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div></div>

<h3 id="참고-옵션">참고 옵션</h3>

<ul>
  <li>
    <p>깊이/개수 제한: <code class="language-plaintext highlighter-rouge">print_attr_tree(obj, max_depth=4, max_items=30)</code></p>
  </li>
  <li>
    <p>숨겨진 멤버까지: <code class="language-plaintext highlighter-rouge">include_private=True</code>, <code class="language-plaintext highlighter-rouge">include_dunder=True</code></p>
  </li>
  <li>
    <p>property 제외(기본): <code class="language-plaintext highlighter-rouge">include_properties=False</code></p>
  </li>
</ul>

<p>필요하면 특정 타입을 “자식 확장 대상에서 제외/포함”하는 훅, 정렬, 출력 대상 화이트리스트/블랙리스트(예: 메서드/콜러블 전부 제외 등)도 바로 덧붙여 줄게.</p>

<p class="chat--user">

기존 유틸이나 패키지는 없나

</p>

<p>좋은 질문이에요 👍<br />
제가 앞에서 짜드린 건 “직접 커스텀해서 범용 트리 뷰어”를 만드는 코드였는데, 사실 이미 비슷한 기능을 하는 <strong>유틸/패키지</strong> 가 몇 가지 있습니다. 다만 요구하신</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">member 변수명: class명</code> 형태의 계층적 트리<br />
 를 <strong>그대로</strong> 해주는 건 없고, 비슷한 걸 응용할 수 있는 도구들이 있습니다.</p>
</blockquote>

<hr />

<h2 id="1-표준내장-계열">1. 표준/내장 계열</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">pprint</code></strong> (표준 라이브러리)<br />
dict/list를 보기 좋게 출력하지만, 깊은 계층 + 클래스 멤버까지는 한계가 있음.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">inspect</code></strong> (표준 라이브러리)<br />
객체의 signature, members를 introspection 하는 데 특화.<br />
→ raw 데이터를 얻는 데는 좋지만 tree 형태는 직접 그려야 함.</p>
  </li>
</ul>

<hr />

<h2 id="2-트리구조-출력용">2. 트리/구조 출력용</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">anytree</code></strong><br />
파이썬 객체를 트리 구조로 모델링해서 문자열/Graphviz로 출력 가능.<br />
직접 노드 생성해서 넣어야 하므로 “자동 introspection”은 아니고, “구조화된 데이터 → 트리 출력”에 적합.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">asciitree</code></strong><br />
dict 같은 nested 구조를 <code class="language-plaintext highlighter-rouge">├─/└─</code> 형태로 예쁘게 출력.<br />
→ 값 대신 <code class="language-plaintext highlighter-rouge">type(value).__name__</code>만 넣도록 래퍼를 짜면 바로 활용 가능.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">rich</code></strong> 의 <code class="language-plaintext highlighter-rouge">Tree</code><br />
pretty console 출력 라이브러리.<br />
계층적 데이터를 트리로 그려주는 <code class="language-plaintext highlighter-rouge">Tree</code> 컴포넌트가 있음.<br />
→ dict/object를 순회해서 <code class="language-plaintext highlighter-rouge">Tree.add(f"{name}: {type(val).__name__}")</code>만 해주면 요구한 형태로 쉽게 구현 가능.</p>
  </li>
</ul>

<hr />

<h2 id="3-디버깅개발-편의-패키지">3. 디버깅/개발 편의 패키지</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">objprint</code></strong><br />
객체 내부 구조를 이쁘게 출력해줌. dict/list 지원, 순환 감지.<br />
→ 다만 출력 포맷이 “값” 중심이라 <code class="language-plaintext highlighter-rouge">멤버명: 클래스명</code> 전용은 아님.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">varname</code></strong><br />
변수명 추적 라이브러리. 직접 tree 출력은 없지만 introspection에 유용.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">glom</code></strong><br />
중첩 데이터 구조를 탐색/변환하는 도구. 출력은 덜 예쁘지만, dict 트리 처리에 적합.</p>
  </li>
</ul>

<hr />

<h2 id="4-추천-조합">4. 추천 조합</h2>

<p>만약 <strong>“바로 가져다 쓰고 싶다”</strong>면:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">rich.Tree</code> + 짧은 재귀 함수 → “멤버명: 클래스명” 트리 바로 구현 가능.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">asciitree</code>도 lightweight 대안.</p>
  </li>
</ul>

<hr />

<p>👉 결론: <strong>기존 패키지로는<code class="language-plaintext highlighter-rouge">rich</code> + introspection 유틸</strong>이 가장 범용적이고 예쁘게 나옵니다.<br />
제가 위에서 짠 함수도 <code class="language-plaintext highlighter-rouge">print_attr_tree</code> 대신 <code class="language-plaintext highlighter-rouge">rich.Tree</code>를 써서 출력만 바꾸면 훨씬 더 보기 좋게 쓸 수 있어요.</p>

<hr />

<p>원하시면 제가 <code class="language-plaintext highlighter-rouge">rich.Tree</code> 버전으로 “member: class” 전용 트리 프린터 예제를 짜드릴까요?</p>

<p class="chat--user">

leaf일 경우 값도 보여주면 좋겠어 age: int(9) 이런 식으로

</p>

<p>좋습니다 👍<br />
말씀해주신 대로 <strong>leaf 노드(더 이상 내려갈 속성이 없는 경우)</strong>에는 값까지 같이 보여주면 훨씬 직관적이에요.<br />
출력 포맷은 예시처럼:</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">age</span><span class="p">:</span> <span class="kt">int</span><span class="p">(</span><span class="m">9</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="코드-예제-richtree-기반">코드 예제 (<code class="language-plaintext highlighter-rouge">rich.Tree</code> 기반)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">fields</span> <span class="k">as</span> <span class="n">dc_fields</span>
<span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Mapping</span><span class="p">,</span> <span class="n">Iterable</span>
<span class="kn">from</span> <span class="n">rich.tree</span> <span class="kn">import</span> <span class="n">Tree</span>
<span class="kn">from</span> <span class="n">rich</span> <span class="kn">import</span> <span class="k">print</span> <span class="k">as</span> <span class="n">rprint</span>

<span class="n">PRIMITIVES</span> <span class="o">=</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">complex</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">PRIMITIVES</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_short_repr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">maxlen</span><span class="o">=</span><span class="mi">30</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;?&gt;</span><span class="sh">"</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxlen</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">maxlen</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">_iter_members</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">yield</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">k</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">k</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">k</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">k</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">k</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">yield</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span>
    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">v</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">yield</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_iter_children</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="c1"># dict
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Mapping</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">!r}</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
        <span class="k">return</span>
    <span class="c1"># sequence (문자열 제외)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">)):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">,</span> <span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">return</span>
    <span class="c1"># object
</span>    <span class="k">yield</span> <span class="k">from</span> <span class="nf">_iter_members</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">build_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">tree</span><span class="p">:</span> <span class="n">Tree</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">depth</span><span class="p">):</span>
        <span class="n">tname</span> <span class="o">=</span> <span class="nf">type</span><span class="p">(</span><span class="n">value</span><span class="p">).</span><span class="n">__name__</span>

        <span class="c1"># leaf &amp; primitive → 값까지 출력
</span>        <span class="k">if</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="ow">or</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="n">max_depth</span><span class="p">:</span>
            <span class="n">label</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">tname</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="nf">_short_repr</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">tname</span><span class="si">}</span><span class="s"> ↪ (cycle)</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">oid</span><span class="p">)</span>

        <span class="n">node_label</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">tname</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">child_tree</span> <span class="o">=</span> <span class="n">tree</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">node_label</span><span class="p">)</span>

        <span class="n">children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">_iter_children</span><span class="p">(</span>
            <span class="n">value</span><span class="p">,</span>
            <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
            <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span>
        <span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">children</span><span class="p">:</span>  <span class="c1"># leaf지만 primitive 아님 (예: 빈 dict)
</span>            <span class="n">child_tree</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">children</span><span class="p">:</span>
                <span class="nf">walk</span><span class="p">(</span><span class="n">child_tree</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="n">root</span> <span class="o">=</span> <span class="nc">Tree</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">walk</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">root</span>

<span class="k">def</span> <span class="nf">print_attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nf">rprint</span><span class="p">(</span><span class="nf">build_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</code></pre></div></div>

<hr />

<h2 id="사용-예시">사용 예시</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pets</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">dog</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cat</span><span class="sh">"</span><span class="p">]</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
<span class="nf">print_attr_tree</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Person</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>출력 예시:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">Person</span><span class="o">:</span> <span class="nt">Person</span>
<span class="err">└──</span> <span class="nt">Person</span><span class="o">:</span> <span class="nt">Person</span>
    <span class="err">├──</span> <span class="nt">name</span><span class="o">:</span> <span class="nt">str</span><span class="o">(</span><span class="s2">'Alice'</span><span class="o">)</span>
    <span class="err">├──</span> <span class="nt">age</span><span class="o">:</span> <span class="nt">int</span><span class="o">(</span><span class="err">9</span><span class="o">)</span>
    <span class="err">└──</span> <span class="nt">pets</span><span class="o">:</span> <span class="nt">list</span>
        <span class="err">├──</span> <span class="o">[</span><span class="err">0</span><span class="o">]:</span> <span class="nt">str</span><span class="o">(</span><span class="s2">'dog'</span><span class="o">)</span>
        <span class="err">└──</span> <span class="o">[</span><span class="err">1</span><span class="o">]:</span> <span class="nt">str</span><span class="o">(</span><span class="s2">'cat'</span><span class="o">)</span>
</code></pre></div></div>

<hr />

<p>👉 이렇게 하면 <strong>leaf 노드일 경우 값까지<code class="language-plaintext highlighter-rouge">클래스명(값)</code> 형태</strong>로 표시됩니다.<br />
값이 너무 길면 자동으로 <code class="language-plaintext highlighter-rouge">…</code>으로 잘라주도록 했어요.</p>

<p>원하시면 <code class="language-plaintext highlighter-rouge">max_depth</code>, <code class="language-plaintext highlighter-rouge">maxlen</code>, 특정 타입 제외 필터 같은 추가 옵션도 넣어드릴 수 있는데, 혹시 필요하실까요?</p>

<p class="chat--user">

라이브러리 기반 말고 아까 짜준 코드 기반으로

</p>

<p>좋아! <strong>라이브러리 없이</strong> 아까 만든 범용 트리 유틸을 그대로 확장해서, <strong>leaf일 때는 값까지<code class="language-plaintext highlighter-rouge">멤버: 타입(값)</code></strong> 형태로 출력하도록 손봤어.<br />
(leaf 정의: 더 내려갈 자식이 없거나, 원시형이거나, 최대 깊이에 도달한 경우)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">fields</span> <span class="k">as</span> <span class="n">dc_fields</span>
<span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Mapping</span><span class="p">,</span> <span class="n">Iterable</span>

<span class="n">PRIMITIVES</span> <span class="o">=</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">complex</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">PRIMITIVES</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">type</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">__name__</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">&lt;unknown&gt;</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">_short_repr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">maxlen</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;?&gt;</span><span class="sh">"</span>
    <span class="k">if</span> <span class="n">maxlen</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxlen</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">maxlen</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">_iter_object_members</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">yielded</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="n">include_properties</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nf">dir</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">attr</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">o</span><span class="p">),</span> <span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">attr</span><span class="p">,</span> <span class="nb">property</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="k">continue</span>
                    <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>

<span class="k">def</span> <span class="nf">_iter_children</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">include_private</span><span class="p">,</span> <span class="n">include_dunder</span><span class="p">,</span> <span class="n">include_properties</span><span class="p">,</span> <span class="n">max_items</span><span class="p">):</span>
    <span class="c1"># dict류
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Mapping</span><span class="p">):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">items</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">items</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">!r}</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
            <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
        <span class="k">return</span>

    <span class="c1"># 시퀀스/세트 (문자열류 제외)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">memoryview</span><span class="p">)):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">)[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
            <span class="k">return</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
            <span class="k">return</span>

    <span class="c1"># 일반 객체 멤버
</span>    <span class="k">yield</span> <span class="k">from</span> <span class="nf">_iter_object_members</span><span class="p">(</span>
        <span class="n">node</span><span class="p">,</span>
        <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
        <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
        <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">attr_tree</span><span class="p">(</span>
    <span class="n">obj</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">max_items</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">leaf_value_maxlen</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
<span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    </span><span class="sh">'</span><span class="s">속성 dict</span><span class="sh">'</span><span class="s"> 기반 범용 트리 출력.
    - 내부 노드:  name: ClassName
    - leaf 노드: name: ClassName(value_repr)
    </span><span class="sh">"""</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">cls</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="nf">_short_repr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">leaf_value_maxlen</span><span class="p">)</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">cls</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="c1"># 깊이 제한 또는 원시형이면 leaf
</span>        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="n">max_depth</span> <span class="ow">or</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="c1"># 사이클 방지
</span>        <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
            <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">child_prefix</span> <span class="o">+</span> <span class="sh">"</span><span class="s">↪ (cycle)</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">oid</span><span class="p">)</span>

        <span class="c1"># 자식 미리 구해보고, 없으면 leaf 취급(+값 표시)
</span>        <span class="n">children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">_iter_children</span><span class="p">(</span>
            <span class="n">value</span><span class="p">,</span>
            <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
            <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
            <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
            <span class="n">max_items</span><span class="o">=</span><span class="n">max_items</span><span class="p">,</span>
        <span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">children</span><span class="p">:</span>
            <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="c1"># 내부 노드
</span>        <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>

        <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">children</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">children</span><span class="p">):</span>
            <span class="nf">walk</span><span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="n">child_prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">depth</span><span class="o">=</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="nf">walk</span><span class="p">(</span><span class="n">root_name</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="예시">예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">,)</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">k</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">9</span>
        <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nc">B</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lst</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_hidden</span> <span class="o">=</span> <span class="sh">"</span><span class="s">secret</span><span class="sh">"</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">A</span><span class="p">()</span>
<span class="nf">print_attr_tree</span><span class="p">(</span>
    <span class="n">a</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>    <span class="c1"># _hidden 숨김
</span>    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>     <span class="c1"># __dunder__ 숨김
</span>    <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span>
<span class="p">)</span>
</code></pre></div></div>

<p>출력(예):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">└──</span> <span class="n">A</span><span class="p">:</span> <span class="n">A</span>
    <span class="err">├──</span> <span class="n">name</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="sh">'</span><span class="s">Alice</span><span class="sh">'</span><span class="p">)</span>
    <span class="err">├──</span> <span class="n">age</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
    <span class="err">├──</span> <span class="n">x</span><span class="p">:</span> <span class="n">B</span>
    <span class="err">│</span>   <span class="err">└──</span> <span class="n">y</span><span class="p">:</span> <span class="nb">dict</span>
    <span class="err">│</span>       <span class="err">└──</span> <span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">:</span> <span class="nb">list</span>
    <span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="err">│</span>           <span class="err">└──</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="err">└──</span> <span class="n">lst</span><span class="p">:</span> <span class="nb">list</span>
        <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">dict</span>
        <span class="err">│</span>   <span class="err">└──</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">tuple</span>
            <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
            <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="참고-step-by-step">참고 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>leaf 판단</strong> : (a) 원시형(PRIMITIVES), (b) <code class="language-plaintext highlighter-rouge">max_depth</code> 도달, (c) 자식 탐색 결과 없음 → 값까지 출력.</p>
  </li>
  <li>
    <p><strong>내부 노드</strong> : 자식이 있으면 <code class="language-plaintext highlighter-rouge">name: ClassName</code>만 찍고 아래로 재귀.</p>
  </li>
  <li>
    <p><strong>사이클</strong> : 이미 본 객체면 <code class="language-plaintext highlighter-rouge">(cycle)</code> 표시하고 중단.</p>
  </li>
  <li>
    <p><strong>가시성 옵션</strong> : <code class="language-plaintext highlighter-rouge">_private</code>, <code class="language-plaintext highlighter-rouge">__dunder__</code>, <code class="language-plaintext highlighter-rouge">@property</code> 포함 여부 조절.</p>
  </li>
  <li>
    <p><strong>길이 제한</strong> : <code class="language-plaintext highlighter-rouge">leaf_value_maxlen</code>으로 leaf 값 <code class="language-plaintext highlighter-rouge">repr</code> 길이 제어.</p>
  </li>
</ol>

<p>더 원하는 포맷(예: <code class="language-plaintext highlighter-rouge">key="..."</code> 따옴표 통일, dict 키 정렬, 특정 타입 축약 등) 있으면 말해줘—바로 반영할게!</p>

<p class="chat--user">

가장 root 앞에 ㄴ— 가 들어가서 전체적으로 인덴트가 너무 많아져. 첫 루트는 선 없이 그냥 바로 A: A 이렇게 가게해줘. 하위 속성들도 1칸씩 인덱트 당기고

</p>

<p>좋아! “루트에는 선(└/├) 없이 바로 <code class="language-plaintext highlighter-rouge">A: A</code>로 시작”하고, “하위 속성도 한 칸(레벨) 덜 들여쓰기” 되도록 코드를 손봤어. 핵심은 <strong>루트 라벨은 일반 텍스트로 출력</strong> 하고, <strong>자식부터 브랜치 기호</strong> 를 붙이는 거야.</p>

<p>아래는 <strong>바뀐 전체 코드</strong>(외부 라이브러리 없음):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">fields</span> <span class="k">as</span> <span class="n">dc_fields</span>
<span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Mapping</span><span class="p">,</span> <span class="n">Iterable</span>

<span class="n">PRIMITIVES</span> <span class="o">=</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">complex</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">PRIMITIVES</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">type</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">__name__</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">&lt;unknown&gt;</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">_short_repr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">maxlen</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;?&gt;</span><span class="sh">"</span>
    <span class="k">if</span> <span class="n">maxlen</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxlen</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">maxlen</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">_iter_object_members</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">yielded</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="n">include_properties</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nf">dir</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">attr</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">o</span><span class="p">),</span> <span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">attr</span><span class="p">,</span> <span class="nb">property</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="k">continue</span>
                    <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>

<span class="k">def</span> <span class="nf">_iter_children</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">include_private</span><span class="p">,</span> <span class="n">include_dunder</span><span class="p">,</span> <span class="n">include_properties</span><span class="p">,</span> <span class="n">max_items</span><span class="p">):</span>
    <span class="c1"># dict류
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Mapping</span><span class="p">):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">items</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">items</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">!r}</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
            <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
        <span class="k">return</span>

    <span class="c1"># 시퀀스/세트 (문자열류 제외)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">memoryview</span><span class="p">)):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">)):</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
            <span class="k">return</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
            <span class="k">return</span>

    <span class="c1"># 일반 객체 멤버
</span>    <span class="k">yield</span> <span class="k">from</span> <span class="nf">_iter_object_members</span><span class="p">(</span>
        <span class="n">node</span><span class="p">,</span>
        <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
        <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
        <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">attr_tree</span><span class="p">(</span>
    <span class="n">obj</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">max_items</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">leaf_value_maxlen</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
<span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    </span><span class="sh">'</span><span class="s">속성 dict</span><span class="sh">'</span><span class="s"> 기반 범용 트리 출력.
    - 루트:  name: ClassName  (브랜치 선 없음)
    - 내부 노드:  name: ClassName
    - leaf 노드: name: ClassName(value_repr)
    </span><span class="sh">"""</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">cls</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="nf">_short_repr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">leaf_value_maxlen</span><span class="p">)</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">cls</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="c1"># 깊이 제한 또는 원시형이면 leaf
</span>        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="n">max_depth</span> <span class="ow">or</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
            <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">child_prefix</span> <span class="o">+</span> <span class="sh">"</span><span class="s">↪ (cycle)</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">oid</span><span class="p">)</span>

        <span class="n">children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">_iter_children</span><span class="p">(</span>
            <span class="n">value</span><span class="p">,</span>
            <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
            <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
            <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
            <span class="n">max_items</span><span class="o">=</span><span class="n">max_items</span><span class="p">,</span>
        <span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">children</span><span class="p">:</span>
            <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="c1"># 내부 노드
</span>        <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>

        <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">children</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">children</span><span class="p">):</span>
            <span class="nf">walk</span><span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="n">child_prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">depth</span><span class="o">=</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="c1"># --- 루트 출력 (브랜치 선/인덴트 없음) ---
</span>    <span class="n">root_cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">root_name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">root_cls</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="nf">_short_repr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">leaf_value_maxlen</span><span class="p">)</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">root_name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">root_cls</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># 루트의 자식부터는 브랜치 기호를 사용하되, 추가 인덴트 없이 바로 시작
</span>    <span class="n">root_children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">_iter_children</span><span class="p">(</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
        <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
        <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
        <span class="n">max_items</span><span class="o">=</span><span class="n">max_items</span><span class="p">,</span>
    <span class="p">))</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">root_children</span><span class="p">:</span>
        <span class="c1"># 자식이 없는 비-원시 루트 (예: 빈 dict 등)
</span>        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

    <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">root_children</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">root_children</span><span class="p">):</span>
        <span class="c1"># prefix=""로 시작 → 하위가 한 칸(레벨) 당겨진 효과
</span>        <span class="nf">walk</span><span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">depth</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="동작-확인-예시">동작 확인 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">,)</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">k</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">9</span>
        <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nc">B</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lst</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_hidden</span> <span class="o">=</span> <span class="sh">"</span><span class="s">secret</span><span class="sh">"</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">A</span><span class="p">()</span>
<span class="nf">print_attr_tree</span><span class="p">(</span>
    <span class="n">a</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="기대-출력인덴트-한-단계-감소--루트에-선-없음">기대 출력(인덴트 한 단계 감소 + 루트에 선 없음)</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span><span class="p">:</span> <span class="n">A</span>
<span class="err">├──</span> <span class="n">name</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="sh">'</span><span class="s">Alice</span><span class="sh">'</span><span class="p">)</span>
<span class="err">├──</span> <span class="n">age</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="err">├──</span> <span class="n">x</span><span class="p">:</span> <span class="n">B</span>
<span class="err">│</span>   <span class="err">└──</span> <span class="n">y</span><span class="p">:</span> <span class="nb">dict</span>
<span class="err">│</span>       <span class="err">└──</span> <span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">:</span> <span class="nb">list</span>
<span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="err">│</span>           <span class="err">└──</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="err">└──</span> <span class="n">lst</span><span class="p">:</span> <span class="nb">list</span>
    <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">dict</span>
    <span class="err">│</span>   <span class="err">└──</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">tuple</span>
        <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<p>필요하면 루트만 값 표시 여부(지금은 원시형 루트일 때만 <code class="language-plaintext highlighter-rouge">type(value)(repr)</code> 표시), 키 정렬 옵션, set 정렬, 길이 제한 등을 더 넣어줄 수도 있어. 원하는 포맷 있으면 말해줘!</p>

<p class="chat--user">

아 그런데 @dataclass에 대해서 이걸 적용했더니 같은 속성이 2번씩 나오네

</p>

<p>맞아요—그 현상은 <strong>dataclass 필드를 먼저 yield</strong> 한 뒤에, 다시 <code class="language-plaintext highlighter-rouge">__dict__</code>에서 <strong>같은 이름을 한 번 더</strong> 내보내서 생긴 중복이에요.<br />
해결은 간단합니다: <code class="language-plaintext highlighter-rouge">__dict__</code>를 순회할 때 <strong>이미 낸 이름이면 건너뛰기</strong> 만 추가하면 됩니다. (<code class="language-plaintext highlighter-rouge">__slots__</code>/<code class="language-plaintext highlighter-rouge">property</code> 쪽은 이미 중복 방지가 되어 있었어요.)</p>

<p>아래처럼 <code class="language-plaintext highlighter-rouge">_iter_object_members</code> 함수만 교체하세요. (나머지 코드는 그대로)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_iter_object_members</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">yielded</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="c1"># 1) dataclass 우선
</span>    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="c1"># 2) __dict__ (⚠️ 추가된 중복 방지)
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>           <span class="c1"># &lt;&lt;&lt; 중복 방지 (핵심 수정)
</span>                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="c1"># 3) __slots__ (이미 중복 방지 있음)
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="c1"># 4) @property (이미 중복 방지 있음)
</span>    <span class="k">if</span> <span class="n">include_properties</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nf">dir</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">attr</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">o</span><span class="p">),</span> <span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">attr</span><span class="p">,</span> <span class="nb">property</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="k">continue</span>
                    <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>     <span class="c1"># (일관성)
</span>                    <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
</code></pre></div></div>

<h3 id="왜-이게-맞나-step-by-step">왜 이게 맞나 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>dataclass 필드</strong> 를 먼저 내보냄(원하는 순서).</p>
  </li>
  <li>
    <p>같은 이름이 <code class="language-plaintext highlighter-rouge">__dict__</code>에도 있으므로, <code class="language-plaintext highlighter-rouge">yielded</code>에 기록된 이름이면 <strong>건너뜀</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">__slots__</code>/<code class="language-plaintext highlighter-rouge">property</code>도 동일한 규칙으로 <strong>중복 방지</strong>.</p>
  </li>
  <li>
    <p>결과: dataclass에서 <strong>중복 없이</strong> 한 번만 표기됩니다.</p>
  </li>
</ol>

<p>원하면 dataclass + <code class="language-plaintext highlighter-rouge">slots=True</code> 조합(파이썬 3.10+)도 테스트 예제 드릴게요.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">PyVerilog AST 변환</title><link href="https://hvppyarchive.github.io/verilog/pyverilog-ir/" rel="alternate" type="text/html" title="PyVerilog AST 변환" /><published>2025-08-20T14:24:23+09:00</published><updated>2025-08-20T14:24:23+09:00</updated><id>https://hvppyarchive.github.io/verilog/pyverilog-ir</id><content type="html" xml:base="https://hvppyarchive.github.io/verilog/pyverilog-ir/"><![CDATA[<p class="chat--user">

PyVerilog의 ast가 생각보다 정규화(표준화) 되어 있지 않아서 예외처리할 것이 너무 많아.(e.g. port가 IO 포함인지, 본문에 써있는지 등등) 좀 더 표준화된 형식으로 쉽게 traverse할 수 있는 형태로 conversion 하는 기능을 개발하려고 해. 들어가야할 사항들: - port(순서, 포트명, width(msb, lsb), in/out/inout) - 내부 instance(submodule, port-argument mapping) - 내부 nets(width(msb, lsb)) 

</p>

<p>좋아요—PyVerilog AST의 들쭉날쭉함(ANSI/Non-ANSI 포트 선언, 포지셔널/네임드 인스턴스, width 표현식 등) 때문에 예외가 많죠. 아래처럼 <strong>표준화된 중간 표현(IR)</strong>로 변환하는 파이프라인을 제안합니다. 바로 쓸 수 있는 <strong>참조 구현 코드</strong> 도 넣었어요.</p>

<hr />

<h1 id="목표">목표</h1>

<ul>
  <li>
    <p>모듈 단위로 <strong>일관된 JSON IR</strong> 제공</p>
  </li>
  <li>
    <p>포트: <strong>순서(index), 이름, 방향, 폭(msb/lsb, 정수 평가 가능하면 width), signed 여부</strong></p>
  </li>
  <li>
    <p>내부 인스턴스: <strong>서브모듈명, 인스턴스명, 파라미터 override, 포트-아규먼트 매핑(포지셔널→네임드 자동 치환)</strong></p>
  </li>
  <li>
    <p>내부 nets: <strong>wire/reg 등, 이름, 폭(msb/lsb, width)</strong></p>
  </li>
</ul>

<hr />

<h1 id="설계-스텝별">설계 (스텝별)</h1>

<ol>
  <li><strong>IR 스키마 정의</strong></li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"modules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"&lt;modname&gt;"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"parameters"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"8"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">8</span><span class="p">}],</span><span class="w">
      </span><span class="nl">"ports"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"signed"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
         </span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"nets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">,</span><span class="nl">"kind"</span><span class="p">:</span><span class="s2">"wire"</span><span class="p">,</span><span class="nl">"signed"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
         </span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"WIDTH-1"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">8</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"instances"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"inst"</span><span class="p">:</span><span class="s2">"u0"</span><span class="p">,</span><span class="nl">"module"</span><span class="p">:</span><span class="s2">"child"</span><span class="p">,</span><span class="nl">"param_overrides"</span><span class="p">:[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"4"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">4</span><span class="p">}],</span><span class="w">
         </span><span class="nl">"connections"</span><span class="p">:[{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"data[3:0]"</span><span class="p">},{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"b"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">}]}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*_str</code>는 원본 표현식 문자열, <code class="language-plaintext highlighter-rouge">msb/lsb/width/value</code>는 <strong>가능하면 정수 평가</strong> , 실패 시 <code class="language-plaintext highlighter-rouge">null</code>.</p>
  </li>
  <li>
    <p>포지셔널 연결은 <strong>서브모듈 포트 순서</strong> 를 이용해 네임드로 변환.</p>
  </li>
</ul>

<ol>
  <li><strong>두 단계 수집</strong></li>
</ol>

<ul>
  <li>
    <p><strong>1패스</strong> : 모든 모듈의 포트 순서/기본 파라미터 테이블 생성(포지셔널 매핑용).</p>
  </li>
  <li>
    <p><strong>2패스</strong> : 각 모듈에 대해 포트/넷/인스턴스 표준화.</p>
  </li>
</ul>

<ol>
  <li><strong>포트 정규화</strong></li>
</ol>

<ul>
  <li>
    <p>ANSI(<code class="language-plaintext highlighter-rouge">Ioport</code>)와 Non-ANSI(<code class="language-plaintext highlighter-rouge">Port</code>+본문 <code class="language-plaintext highlighter-rouge">Input/Output/Inout</code> 선언) 모두 흡수.</p>
  </li>
  <li>
    <p>폭 미지정은 <code class="language-plaintext highlighter-rouge">1비트(msb=lsb=0)</code>로 통일. 방향 미상은 보수적으로 <code class="language-plaintext highlighter-rouge">inout</code> 대신 <strong>발견 실패 시 null</strong>(현실적으로 거의 없음).</p>
  </li>
</ul>

<ol>
  <li><strong>인스턴스 정규화</strong></li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">InstanceList</code>를 재귀 탐색(Generate 블록 내부 포함).</p>
  </li>
  <li>
    <p>포지셔널 연결은 1패스에서 모은 <strong>서브모듈 포트 순서</strong> 로 네임드 변환. 알 수 없는 외부 모듈은 인덱스 기반으로 남김(예: <code class="language-plaintext highlighter-rouge">__pos0</code>, <code class="language-plaintext highlighter-rouge">__pos1</code>).</p>
  </li>
</ul>

<ol>
  <li><strong>넷 정규화</strong></li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wire/reg</code>(필요하면 <code class="language-plaintext highlighter-rouge">integer</code>)를 수집, 다중 선언은 개별 항목으로 분할.</p>
  </li>
  <li>
    <p>포트 선언에서 이미 등장한 식별자는 <strong>nets에서 중복 제외</strong>(요구사항이 “내부 nets”이므로).</p>
  </li>
</ul>

<ol>
  <li><strong>표현식 평가기</strong></li>
</ol>

<ul>
  <li>파라미터 환경을 사용해 <code class="language-plaintext highlighter-rouge">IntConst/Identifier/UnaryOp/BinaryOp</code> 중심으로 <strong>안전한 정수 평가</strong>(미지원 연산 시 값은 <code class="language-plaintext highlighter-rouge">null</code>, 원 문자열은 유지).</li>
</ul>

<hr />

<h1 id="레퍼런스-구현-python--pyverilog">레퍼런스 구현 (Python / PyVerilog)</h1>

<blockquote>
  <p>pip: <code class="language-plaintext highlighter-rouge">pyverilog</code> 필요. 파일 모음 입력 → 위 IR JSON 반환.
```python</p>
  <h1 id="vnormpy">vnorm.py</h1>
  <p>from <strong>future</strong> import annotations
from typing import Any, Dict, List, Tuple, Optional
import json
from pyverilog.vparser.parser import parse
from pyverilog.vparser import ast as vast
from pyverilog.ast_code_generator.codegen import ASTCodeGenerator</p>
</blockquote>

<p>codegen = ASTCodeGenerator()</p>

<h1 id="--utilities--">———- utilities ———-</h1>
<p>def to_str(node) -&gt; Optional[str]:
    if node is None:
        return None
    try:
        return codegen.visit(node)
    except Exception:
        return None</p>

<p>def int_from_intconst(intconst: str) -&gt; Optional[int]:
    # Handles decimal/hex/bin/octal Verilog ints like 8'hFF or 'd10.
    s = intconst.replace('_', '')
    try:
        # forms: 10, 8'hFF, 'd3
        if "'" not in s:
            return int(s, 10)
        width_base, val = s.split("'")
        base = val[0].lower()
        digits = val[1:]
        if base == 'd': return int(digits, 10)
        if base == 'h': return int(digits, 16)
        if base == 'b': return int(digits, 2)
        if base == 'o': return int(digits, 8)
        # unknown base
        return int(digits, 10)
    except Exception:
        return None</p>

<p>def eval_expr(node, env: Dict[str, int]) -&gt; Optional[int]:
    # conservative evaluator for width-ish integer expressions
    if node is None:
        return None
    if isinstance(node, vast.IntConst):
        return int_from_intconst(node.value)
    if isinstance(node, vast.Identifier):
        return env.get(node.name)
    if isinstance(node, vast.UnaryOperator):
        v = eval_expr(node.children()[0], env)
        if v is None: return None
        op = node.<strong>class</strong>.<strong>name</strong>
        if op in ("Uplus",): return +v
        if op in ("Uminus",): return -v
        if op in ("Ulnot","Unot"): return 0 if v else 1
        return None
    if isinstance(node, vast.Partselect) or isinstance(node, vast.Pointer):
        # treat as unknown integer
        return None
    if isinstance(node, vast.Concat) or isinstance(node, vast.Repeat):
        return None
    # Binary operators
    if isinstance(node, vast.BinaryOperator):
        a = eval_expr(node.left, env)
        b = eval_expr(node.right, env)
        if a is None or b is None:
            return None
        t = node.<strong>class</strong>.<strong>name</strong>
        try:
            if t == "Plus": return a + b
            if t == "Minus": return a - b
            if t == "Times": return a * b
            if t == "Div": return a // b if b != 0 else None
            if t == "Power": return a ** b
            if t == "Mod": return a % b if b != 0 else None
            if t == "Sll": return a « b
            if t == "Srl": return a » b
            if t == "And": return a &amp; b
            if t == "Or":  return a | b
            if t == "Xor": return a ^ b
        except Exception:
            return None
        return None
    return None</p>

<p>def width_tuple(width_node, env: Dict[str,int]):
    # returns (msb_str, lsb_str, msb_val, lsb_val, width_val)
    if width_node is None:
        return "0", "0", 0, 0, 1
    msb_n, lsb_n = width_node.msb, width_node.lsb
    msb_s, lsb_s = to_str(msb_n), to_str(lsb_n)
    msb_v, lsb_v = eval_expr(msb_n, env), eval_expr(lsb_n, env)
    width_v = None
    if msb_v is not None and lsb_v is not None:
        width_v = abs(msb_v - lsb_v) + 1
    return msb_s, lsb_s, msb_v, lsb_v, width_v</p>

<h1 id="--1st-pass-collect-module-port-order--param-defaults--">———- 1st pass: collect module port order &amp; param defaults ———-</h1>
<p>def collect_modules(ast_root) -&gt; Dict[str, vast.ModuleDef]:
    mods = {}
    for d in ast_root.description.definitions:
        if isinstance(d, vast.ModuleDef):
            mods[d.name] = d
    return mods</p>

<p>def collect_param_env(mod: vast.ModuleDef) -&gt; Dict[str,int]:
    env = {}
    # parameters in header
    if getattr(mod, "paramlist", None):
        for p in mod.paramlist.params:
            if isinstance(p, vast.Parameter):
                v = eval_expr(p.value, env)  # parameters can depend on earlier ones
                if v is not None:
                    env[p.name] = v
    # parameters in body declarations, if any
    for item in getattr(mod, "items", []) or []:
        if isinstance(item, vast.Decl):
            for e in item.list:
                if isinstance(e, vast.Parameter):
                    v = eval_expr(e.value, env)
                    if v is not None:
                        env[e.name] = v
    return env</p>

<p>def ordered_port_names(mod: vast.ModuleDef) -&gt; List[str]:
    names = []
    if mod.portlist is None:
        return names
    for p in mod.portlist.ports:
        # Ioport(first=Identifier, second=Input/Output/Inout)
        if isinstance(p, vast.Ioport):
            names.append(p.first.name)
        elif isinstance(p, vast.Port):
            # Port(name, arg=None) in non-ANSI
            names.append(p.name)
    return names</p>

<h1 id="--helpers-declaration-maps--">———- helpers: declaration maps ———-</h1>
<p>def build_io_decl_map(mod: vast.ModuleDef, env: Dict[str,int]):
    # name -&gt; (dir, signed, width_info)
    io_map = {}
    for item in getattr(mod, "items", []) or []:
        if not isinstance(item, vast.Decl):
            continue
        for e in item.list:
            if isinstance(e, (vast.Input, vast.Output, vast.Inout)):
                dir_ = "input" if isinstance(e, vast.Input) else ("output" if isinstance(e, vast.Output) else "inout")
                signed = bool(getattr(e, "signed", False))
                w = getattr(e, "width", None)
                msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
                for name in [n.name for n in e.children() if isinstance(n, vast.Identifier)]:
                    io_map[name] = (dir_, signed, (msb_s, lsb_s, msb_v, lsb_v, width_v))
    return io_map</p>

<p>def build_net_decl_list(mod: vast.ModuleDef, env: Dict[str,int]):
    nets = []
    for item in getattr(mod, "items", []) or []:
        if not isinstance(item, vast.Decl):
            continue
        for e in item.list:
            if isinstance(e, (vast.Wire, vast.Reg, vast.Integer)):
                kind = "wire" if isinstance(e, vast.Wire) else ("reg" if isinstance(e, vast.Reg) else "integer")
                signed = bool(getattr(e, "signed", False))
                w = getattr(e, "width", None)
                msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
                for n in e.children():
                    if isinstance(n, vast.Identifier):
                        nets.append({
                            "name": n.name, "kind": kind, "signed": signed,
                            "msb_str": msb_s, "lsb_str": lsb_s, "msb": msb_v, "lsb": lsb_v, "width": width_v
                        })
    return nets</p>

<h1 id="--recursive-walker-for-instancelist--">———- recursive walker for InstanceList ———-</h1>
<p>def iter_instancelists(node):
    # yield vast.InstanceList under any nesting (e.g., Generate blocks)
    if isinstance(node, vast.InstanceList):
        yield node
    for ch in getattr(node, "children", lambda: [])():
        yield from iter_instancelists(ch)</p>

<h1 id="--2nd-pass-build-ir-per-module--">———- 2nd pass: build IR per module ———-</h1>
<p>def normalize_module(mod: vast.ModuleDef, modlib_ports: Dict[str, List[str]]) -&gt; Dict[str,Any]:
    env = collect_param_env(mod)
    # parameters
    params = []
    # header params
    if getattr(mod, "paramlist", None):
        for p in mod.paramlist.params:
            if isinstance(p, vast.Parameter):
                params.append({
                    "name": p.name,
                    "value_str": to_str(p.value),
                    "value": eval_expr(p.value, env)
                })
    # body params (avoid duplicates)
    body_params = {}
    for item in getattr(mod, "items", []) or []:
        if isinstance(item, vast.Decl):
            for e in item.list:
                if isinstance(e, vast.Parameter) and e.name not in {x["name"] for x in params}:
                    body_params[e.name] = {
                        "name": e.name,
                        "value_str": to_str(e.value),
                        "value": eval_expr(e.value, env)
                    }
    params.extend(body_params.values())</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ports
io_map = build_io_decl_map(mod, env)
ordered_names = ordered_port_names(mod)
ports = []
for idx, pname in enumerate(ordered_names):
    dir_, signed, winfo = None, False, None
    # ANSI Ioport case
    ansi_hit = False
    if mod.portlist and isinstance(mod.portlist.ports[idx], vast.Ioport):
        io = mod.portlist.ports[idx]
        decl = io.second  # Input/Output/Inout
        dir_ = "input" if isinstance(decl, vast.Input) else ("output" if isinstance(decl, vast.Output) else "inout")
        signed = bool(getattr(decl, "signed", False))
        w = getattr(decl, "width", None)
        msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
        winfo = (msb_s, lsb_s, msb_v, lsb_v, width_v)
        ansi_hit = True
    # Non-ANSI fallback via body decl map
    if not ansi_hit and pname in io_map:
        dir_, signed, winfo = io_map[pname]
    if winfo is None:
        winfo = width_tuple(None, env)
    msb_s, lsb_s, msb_v, lsb_v, width_v = winfo
    ports.append({
        "index": idx, "name": pname, "dir": dir_, "signed": signed,
        "msb_str": msb_s, "lsb_str": lsb_s, "msb": msb_v, "lsb": lsb_v, "width": width_v
    })

# nets (exclude names that are top-level ports)
nets_raw = build_net_decl_list(mod, env)
port_names_set = set(ordered_names)
nets = [n for n in nets_raw if n["name"] not in port_names_set]

# instances
instances = []
for il in iter_instancelists(mod):
    submod = il.module
    # parameter overrides (common across instances in the list)
    param_overrides = []
    if getattr(il, "paramlist", None):
        for pa in il.paramlist.params:
            # pa: vast.ParamArg(name, argname/value)
            name = pa.paramname if hasattr(pa, "paramname") else getattr(pa, "name", None)
            value_node = pa.argname if hasattr(pa, "argname") else getattr(pa, "value", None)
            param_overrides.append({
                "name": name,
                "value_str": to_str(value_node),
                "value": eval_expr(value_node, env)
            })
    for inst in il.instances:
        conns = []
        # PortArg(portname, argname)
        portargs = getattr(inst, "portlist", []) or []
        # decide positional vs named
        positional = any(getattr(pa, "portname", None) in (None, "") for pa in portargs)
        if positional:
            # map by index using lib
            lib_ports = modlib_ports.get(submod, [])
            for i, pa in enumerate(portargs):
                pname = lib_ports[i] if i &lt; len(lib_ports) else f"__pos{i}"
                conns.append({"port": pname, "expr_str": to_str(getattr(pa, "argname", None))})
        else:
            for pa in portargs:
                conns.append({"port": pa.portname, "expr_str": to_str(pa.argname)})
        instances.append({
            "inst": inst.name,
            "module": submod,
            "param_overrides": param_overrides,
            "connections": conns
        })

return {"parameters": params, "ports": ports, "nets": nets, "instances": instances}
</code></pre></div></div>

<p>def convert_to_vnorm(files: List[str]) -&gt; Dict[str,Any]:
    ast, _ = parse(files)
    mods = collect_modules(ast)
    modlib_ports = {name: ordered_port_names(m) for name, m in mods.items()}
    result = {"modules": {}}
    for name, m in mods.items():
        result["modules"][name] = normalize_module(m, modlib_ports)
    return result</p>

<p>if <strong>name</strong> == "<strong>main</strong>":
    import argparse, sys
    ap = argparse.ArgumentParser()
    ap.add_argument("verilog", nargs="+", help="Verilog source files")
    ap.add_argument("-o", "–out", default="-", help="Output JSON path (default: stdout)")
    args = ap.parse_args()
    ir = convert_to_vnorm(args.verilog)
    s = json.dumps(ir, indent=2)
    if args.out == "-" or args.out == "/dev/stdout":
        print(s)
    else:
        with open(args.out, "w") as f:
            f.write(s)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
* * *

# 사용 예시

**예제 Verilog**
```verilog
module child #(parameter WIDTH=8) (input clk, input [WIDTH-1:0] a, output y);
  assign y = a[0];
endmodule

module top (clk, rst, out);
  input clk, rst;
  output out;
  wire [7:0] data;
  child #(.WIDTH(8)) u0 (.clk(clk), .a(data), .y(out));
endmodule
</code></pre></div></div>

<p><strong>실행</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python vnorm.py top.v <span class="nt">-o</span> ir.json
</code></pre></div></div>

<p><strong>핵심 결과(발췌)</strong></p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"modules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"top"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ports"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"rst"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"out"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"output"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"nets"</span><span class="p">:[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">,</span><span class="nl">"kind"</span><span class="p">:</span><span class="s2">"wire"</span><span class="p">,</span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"7"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">8</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"instances"</span><span class="p">:[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"inst"</span><span class="p">:</span><span class="s2">"u0"</span><span class="p">,</span><span class="nl">"module"</span><span class="p">:</span><span class="s2">"child"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"param_overrides"</span><span class="p">:[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"8"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">8</span><span class="p">}],</span><span class="w">
         </span><span class="nl">"connections"</span><span class="p">:[</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">},</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">},</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"y"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"out"</span><span class="p">}</span><span class="w">
         </span><span class="p">]}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="구현-포인트--엣지케이스-처리">구현 포인트 &amp; 엣지케이스 처리</h1>

<ul>
  <li>
    <p><strong>ANSI/Non-ANSI 포트</strong> : 둘 다 커버. Non-ANSI는 본문 <code class="language-plaintext highlighter-rouge">Decl</code> 탐색으로 방향/폭 채움.</p>
  </li>
  <li>
    <p><strong>폭 미지정</strong> : <code class="language-plaintext highlighter-rouge">msb=lsb=0</code>, <code class="language-plaintext highlighter-rouge">width=1</code>로 통일.</p>
  </li>
  <li>
    <p><strong>표현식 평가 실패</strong> : <code class="language-plaintext highlighter-rouge">*_str</code>만 보존하고 정수 필드는 <code class="language-plaintext highlighter-rouge">null</code>.</p>
  </li>
  <li>
    <p><strong>포지셔널 연결</strong> : 1패스에서 수집한 <strong>서브모듈 포트 순서</strong> 로 네임드화.</p>
  </li>
  <li>
    <p><strong>Generate 내부 인스턴스</strong> : 재귀 탐색으로 수집.</p>
  </li>
  <li>
    <p><strong>내부 nets</strong> : 포트 이름과 중복 제거.</p>
  </li>
  <li>
    <p><strong>파라미터</strong> : 헤더/본문 모두 수집, 가능한 경우 정수 평가.</p>
  </li>
</ul>

<hr />

<h1 id="다음-확장-아이디어">다음 확장 아이디어</h1>

<ul>
  <li>
    <p>SystemVerilog 일부 지원(가능 범위에서): <code class="language-plaintext highlighter-rouge">logic</code>, packed/unpacked 배열, interface 포트는 별 레이어로.</p>
  </li>
  <li>
    <p>폭/파라미터 <strong>완전 평가</strong> 를 위해 PyVerilog Dataflow 연계.</p>
  </li>
  <li>
    <p><strong>기본 nettype</strong>(<code class="language-plaintext highlighter-rouge">default_nettype none</code> 미사용 시) 암시적 net 감지 옵션.</p>
  </li>
  <li>
    <p><strong>소스 위치 정보</strong>(filename, lineno) 추가로 디버깅 편의성↑.</p>
  </li>
  <li>
    <p><strong>스키마 검증</strong>(pydantic/jsonschema)로 다운스트림 안정성 확보.</p>
  </li>
</ul>

<hr />

<p>필요하시면 이 IR로부터 <strong>Graphviz 모듈-인스턴스 다이어그램</strong> 이나 <strong>포트/넷 테이블</strong> 뽑는 코드도 바로 붙여드릴게요.</p>

<p class="chat--user">

JSON 말고 Python class로 변환하고 싶어

</p>

<p>좋지! JSON 대신 <strong>Python 클래스(IR)</strong>로 바로 다루게 만들자.<br />
아래는 (1) 타입 설계 → (2) 변환 파이프라인 → (3) 전체 구현 코드 → (4) 사용 예시 순서로 <strong>차근차근</strong> 정리했어.</p>

<hr />

<h1 id="1-목표-재정의-step-by-step">1) 목표 재정의 (Step-by-step)</h1>

<ul>
  <li>
    <p>PyVerilog AST → <strong>일관된 Python dataclass IR</strong> 반환</p>
  </li>
  <li>
    <p>포함 정보</p>

    <ul>
      <li>
        <p><strong>포트</strong> : 순서(index), 이름, 방향(in/out/inout), signed, 폭(msb/lsb/width)</p>
      </li>
      <li>
        <p><strong>인스턴스</strong> : 서브모듈명, 인스턴스명, 파라미터 override, 포트-아규먼트 매핑(포지셔널 → 네임드 자동 변환)</p>
      </li>
      <li>
        <p><strong>내부 nets</strong> : wire/reg/integer, signed, 폭(msb/lsb/width)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>표현식은 가능한 한 <strong>정수 평가</strong> , 실패하면 원문 문자열 유지</p>
  </li>
</ul>

<hr />

<h1 id="2-타입-설계-dataclass--enum">2) 타입 설계 (dataclass + Enum)</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DesignIR</code> (루트) → 모듈명 → <code class="language-plaintext highlighter-rouge">ModuleIR</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ModuleIR</code> 안에 <code class="language-plaintext highlighter-rouge">Parameter</code>, <code class="language-plaintext highlighter-rouge">Port</code>, <code class="language-plaintext highlighter-rouge">Net</code>, <code class="language-plaintext highlighter-rouge">Instance(Connection[])</code></p>
  </li>
  <li>
    <p>방향/넷 종류는 Enum으로 안정화</p>
  </li>
</ul>

<hr />

<h1 id="3-변환-파이프라인-두-패스-step-by-step">3) 변환 파이프라인 (두 패스, Step-by-step)</h1>

<ol>
  <li>
    <p><strong>1패스</strong> : 모든 모듈의</p>

    <ul>
      <li>
        <p>포트 순서 수집(포지셔널 매핑용)</p>
      </li>
      <li>
        <p>파라미터 기본값 환경(env) 구성(폭 평가용)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>2패스(모듈 단위)</strong> :</p>

    <ul>
      <li>
        <p>포트: ANSI/Non-ANSI 통합 정규화</p>
      </li>
      <li>
        <p>넷: 포트와 중복 제거, 다중 선언 분리</p>
      </li>
      <li>
        <p>인스턴스: Generate 내부 포함 재귀 수집, 포지셔널→네임드</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="4-전체-구현-코드-복붙해서-vnorm_classespy-로-저장">4) 전체 구현 코드 (복붙해서 <code class="language-plaintext highlighter-rouge">vnorm_classes.py</code> 로 저장)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vnorm_classes.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">asdict</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="kn">from</span> <span class="n">pyverilog.vparser.parser</span> <span class="kn">import</span> <span class="n">parse</span>
<span class="kn">from</span> <span class="n">pyverilog.vparser</span> <span class="kn">import</span> <span class="n">ast</span> <span class="k">as</span> <span class="n">vast</span>
<span class="kn">from</span> <span class="n">pyverilog.ast_code_generator.codegen</span> <span class="kn">import</span> <span class="n">ASTCodeGenerator</span>

<span class="n">codegen</span> <span class="o">=</span> <span class="nc">ASTCodeGenerator</span><span class="p">()</span>

<span class="c1"># -------------------- Typed IR --------------------
</span>
<span class="k">class</span> <span class="nc">Direction</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">INPUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">input</span><span class="sh">"</span>
    <span class="n">OUTPUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span>
    <span class="n">INOUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">inout</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">NetKind</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">WIRE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">wire</span><span class="sh">"</span>
    <span class="n">REG</span> <span class="o">=</span> <span class="sh">"</span><span class="s">reg</span><span class="sh">"</span>
    <span class="n">INTEGER</span> <span class="o">=</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Parameter</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">value_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">value</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Port</span><span class="p">:</span>
    <span class="n">index</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="nb">dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Direction</span><span class="p">]</span>          <span class="c1"># Non-ANSI에서 드물게 못찾으면 None
</span>    <span class="n">signed</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">msb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">lsb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">msb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">lsb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">width</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>              <span class="c1"># msb/lsb 둘 다 평가되면 abs(msb-lsb)+1
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Net</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">kind</span><span class="p">:</span> <span class="n">NetKind</span>
    <span class="n">signed</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">msb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">lsb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">msb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">lsb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">width</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Connection</span><span class="p">:</span>
    <span class="n">port</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">expr_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Instance</span><span class="p">:</span>
    <span class="n">inst</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">module</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">param_overrides</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">connections</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Connection</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModuleIR</span><span class="p">:</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">nets</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">instances</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Instance</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>

    <span class="c1"># 편의 메서드
</span>    <span class="k">def</span> <span class="nf">port_by_name</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Port</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">name</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">p</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">ports_by_dir</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dir_</span><span class="p">:</span> <span class="n">Direction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">ports</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="o">==</span> <span class="n">dir_</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">DesignIR</span><span class="p">:</span>
    <span class="n">modules</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModuleIR</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">dict</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">indent</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">asdict</span><span class="p">(</span><span class="n">self</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">)</span>

<span class="c1"># -------------------- Helpers --------------------
</span>
<span class="k">def</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">codegen</span><span class="p">.</span><span class="nf">visit</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">int_from_intconst</span><span class="p">(</span><span class="n">intconst</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">intconst</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="sh">"'"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="n">width_base</span><span class="p">,</span> <span class="n">val</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"'"</span><span class="p">)</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">lower</span><span class="p">()</span>
        <span class="n">digits</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">h</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">IntConst</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">int_from_intconst</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">env</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">UnaryOperator</span><span class="p">):</span>
        <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">children</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="n">env</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Uplus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="o">+</span><span class="n">v</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Uminus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="n">v</span>
        <span class="k">if</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">Ulnot</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Unot</span><span class="sh">"</span><span class="p">):</span> <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">v</span> <span class="k">else</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">BinaryOperator</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">a</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">b</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Plus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Minus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Times</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Div</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">//</span> <span class="n">b</span> <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Power</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">**</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Mod</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span> <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Sll</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Srl</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">And</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Or</span><span class="sh">"</span><span class="p">:</span>  <span class="k">return</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Xor</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="c1"># 기타 복합표현(Concat/Repeat/Partselect/Pointer)은 평가 보류
</span>    <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">width_node</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]):</span>
    <span class="c1"># (msb_str, lsb_str, msb_val, lsb_val, width_val)
</span>    <span class="k">if</span> <span class="n">width_node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
    <span class="n">msb_n</span><span class="p">,</span> <span class="n">lsb_n</span> <span class="o">=</span> <span class="n">width_node</span><span class="p">.</span><span class="n">msb</span><span class="p">,</span> <span class="n">width_node</span><span class="p">.</span><span class="n">lsb</span>
    <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">msb_n</span><span class="p">),</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">lsb_n</span><span class="p">)</span>
    <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">msb_n</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">lsb_n</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">msb_v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">width_v</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">msb_v</span> <span class="o">-</span> <span class="n">lsb_v</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span>

<span class="c1"># -------------------- 1st pass: module tables --------------------
</span>
<span class="k">def</span> <span class="nf">collect_modules</span><span class="p">(</span><span class="n">ast_root</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">]:</span>
    <span class="n">mods</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">ast_root</span><span class="p">.</span><span class="n">description</span><span class="p">.</span><span class="n">definitions</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">):</span>
            <span class="n">mods</span><span class="p">[</span><span class="n">d</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span>
    <span class="k">return</span> <span class="n">mods</span>

<span class="k">def</span> <span class="nf">collect_param_env</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
    <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="c1"># 헤더 파라미터
</span>    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">env</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="c1"># 바디 파라미터
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                    <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">env</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">env</span>

<span class="k">def</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="n">names</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">names</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Port</span><span class="p">):</span>
            <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">names</span>

<span class="c1"># -------------------- Decl scans --------------------
</span>
<span class="k">def</span> <span class="nf">build_io_decl_map</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]):</span>
    <span class="c1"># name -&gt; (Direction|None, signed, width_info)
</span>    <span class="n">io_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="p">(</span><span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">)):</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
                <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
                <span class="k">else</span><span class="p">:</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
                <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
                <span class="n">w</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="c1"># e.children() contains Identifiers
</span>                <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">e</span><span class="p">.</span><span class="nf">children</span><span class="p">():</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                        <span class="n">io_map</span><span class="p">[</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">io_map</span>

<span class="k">def</span> <span class="nf">build_net_decl_list</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]:</span>
    <span class="n">nets</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
            <span class="n">kind</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NetKind</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Wire</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">WIRE</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Reg</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">REG</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Integer</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">INTEGER</span>
            <span class="k">if</span> <span class="n">kind</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
            <span class="n">w</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">e</span><span class="p">.</span><span class="nf">children</span><span class="p">():</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                    <span class="n">nets</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Net</span><span class="p">(</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">kind</span><span class="o">=</span><span class="n">kind</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
                        <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
                    <span class="p">))</span>
    <span class="k">return</span> <span class="n">nets</span>

<span class="c1"># -------------------- Instance walker --------------------
</span>
<span class="k">def</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">InstanceList</span><span class="p">):</span>
        <span class="k">yield</span> <span class="n">node</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">,</span> <span class="k">lambda</span><span class="p">:</span> <span class="p">[])():</span>
        <span class="k">yield</span> <span class="k">from</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>

<span class="c1"># -------------------- 2nd pass: normalize module --------------------
</span>
<span class="k">def</span> <span class="nf">normalize_module</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">ModuleIR</span><span class="p">:</span>
    <span class="n">env</span> <span class="o">=</span> <span class="nf">collect_param_env</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>

    <span class="c1"># parameters
</span>    <span class="n">params</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">),</span>
                    <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span>
                <span class="p">))</span>
    <span class="c1"># body params (dedupe)
</span>    <span class="n">header_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">params</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">)</span> <span class="ow">and</span> <span class="n">e</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">header_names</span><span class="p">:</span>
                    <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                        <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">),</span>
                        <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span>
                    <span class="p">))</span>

    <span class="c1"># ports
</span>    <span class="n">io_map</span> <span class="o">=</span> <span class="nf">build_io_decl_map</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">ordered_names</span> <span class="o">=</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>
    <span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">pname</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">ordered_names</span><span class="p">):</span>
        <span class="n">dir_</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Direction</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">signed</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">msb_s</span> <span class="o">=</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">msb_v</span> <span class="o">=</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">second</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
            <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="n">env</span><span class="p">)</span>
            <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">ansi_hit</span> <span class="ow">and</span> <span class="n">pname</span> <span class="ow">in</span> <span class="n">io_map</span><span class="p">:</span>
            <span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)</span> <span class="o">=</span> <span class="n">io_map</span><span class="p">[</span><span class="n">pname</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">msb_s</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_s</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">msb_v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">width_v</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># width unspecified -&gt; 1-bit
</span>            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>

        <span class="n">ports</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Port</span><span class="p">(</span>
            <span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
            <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
        <span class="p">))</span>

    <span class="c1"># nets (exclude top ports)
</span>    <span class="n">nets_raw</span> <span class="o">=</span> <span class="nf">build_net_decl_list</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">port_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">}</span>
    <span class="n">nets</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nets_raw</span> <span class="k">if</span> <span class="n">n</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">port_names</span><span class="p">]</span>

    <span class="c1"># instances
</span>    <span class="n">instances</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Instance</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">il</span> <span class="ow">in</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">mod</span><span class="p">):</span>
        <span class="n">submod</span> <span class="o">=</span> <span class="n">il</span><span class="p">.</span><span class="n">module</span>

        <span class="n">shared_param_ovrs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">il</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">value_node</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">shared_param_ovrs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
                    <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">value_node</span><span class="p">),</span>
                    <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">value_node</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="p">))</span>

        <span class="k">for</span> <span class="n">inst</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
            <span class="n">conns</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Connection</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">portargs</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">inst</span><span class="p">,</span> <span class="sh">"</span><span class="s">portlist</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
            <span class="n">positional</span> <span class="o">=</span> <span class="nf">any</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">portname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">in</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">portargs</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">positional</span><span class="p">:</span>
                <span class="n">lib_ports</span> <span class="o">=</span> <span class="n">modlib_ports</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">submod</span><span class="p">,</span> <span class="p">[])</span>
                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">pa</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">portargs</span><span class="p">):</span>
                    <span class="n">pname</span> <span class="o">=</span> <span class="n">lib_ports</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">lib_ports</span><span class="p">)</span> <span class="k">else</span> <span class="sa">f</span><span class="sh">"</span><span class="s">__pos</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">))))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">portargs</span><span class="p">:</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pa</span><span class="p">.</span><span class="n">portname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">pa</span><span class="p">.</span><span class="n">argname</span><span class="p">)))</span>

            <span class="n">instances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Instance</span><span class="p">(</span>
                <span class="n">inst</span><span class="o">=</span><span class="n">inst</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">module</span><span class="o">=</span><span class="n">submod</span><span class="p">,</span>
                <span class="n">param_overrides</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="n">shared_param_ovrs</span><span class="p">),</span>
                <span class="n">connections</span><span class="o">=</span><span class="n">conns</span>
            <span class="p">))</span>

    <span class="k">return</span> <span class="nc">ModuleIR</span><span class="p">(</span><span class="n">parameters</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">ports</span><span class="o">=</span><span class="n">ports</span><span class="p">,</span> <span class="n">nets</span><span class="o">=</span><span class="n">nets</span><span class="p">,</span> <span class="n">instances</span><span class="o">=</span><span class="n">instances</span><span class="p">)</span>

<span class="c1"># -------------------- Public API --------------------
</span>
<span class="k">def</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">DesignIR</span><span class="p">:</span>
    <span class="n">ast</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
    <span class="n">mods</span> <span class="o">=</span> <span class="nf">collect_modules</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
    <span class="n">modlib_ports</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="n">design</span> <span class="o">=</span> <span class="nc">DesignIR</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">design</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nf">normalize_module</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">design</span>

<span class="c1"># CLI (optional)
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">argparse</span><span class="p">,</span> <span class="n">sys</span>
    <span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">verilog</span><span class="sh">"</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Verilog sources</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">-o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">--out</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Dump as JSON (for debug)</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">ap</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>
    <span class="n">ir</span> <span class="o">=</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">verilog</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">out</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">out</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">ir</span><span class="p">.</span><span class="nf">to_json</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Pretty print summary
</span>        <span class="k">for</span> <span class="n">mname</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">ir</span><span class="p">.</span><span class="n">modules</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[module] </span><span class="si">{</span><span class="n">mname</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  port[</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">index</span><span class="si">}</span><span class="s">] </span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="ow">and</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span><span class="p">.</span><span class="n">value</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">None</span><span class="sh">'</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> [</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">msb_str</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">lsb_str</span><span class="si">}</span><span class="s">] -&gt; width=</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">nets</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  net </span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">kind</span><span class="p">.</span><span class="n">value</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> [</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">msb_str</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">lsb_str</span><span class="si">}</span><span class="s">] -&gt; width=</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">width</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  inst </span><span class="si">{</span><span class="n">i</span><span class="p">.</span><span class="n">inst</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">i</span><span class="p">.</span><span class="n">module</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">i</span><span class="p">.</span><span class="n">connections</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">    .</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">port</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">expr_str</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="5-사용-예시-step-by-step">5) 사용 예시 (Step-by-step)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python vnorm_classes.py top.v            <span class="c"># 요약 출력</span>
python vnorm_classes.py top.v <span class="nt">-o</span> ir.json <span class="c"># 디버그용 JSON 덤프(옵션)</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 라이브러리처럼 사용
</span><span class="kn">from</span> <span class="n">vnorm_classes</span> <span class="kn">import</span> <span class="n">convert_to_design_ir</span><span class="p">,</span> <span class="n">Direction</span>

<span class="n">ir</span> <span class="o">=</span> <span class="nf">convert_to_design_ir</span><span class="p">([</span><span class="sh">"</span><span class="s">top.v</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">child.v</span><span class="sh">"</span><span class="p">])</span>
<span class="n">top</span> <span class="o">=</span> <span class="n">ir</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="sh">"</span><span class="s">top</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># 포트 순회
</span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">top</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="ow">and</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>

<span class="c1"># 인스턴스/연결 순회
</span><span class="k">for</span> <span class="n">inst</span> <span class="ow">in</span> <span class="n">top</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">inst</span><span class="sh">"</span><span class="p">,</span> <span class="n">inst</span><span class="p">.</span><span class="n">inst</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">inst</span><span class="p">.</span><span class="n">module</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inst</span><span class="p">.</span><span class="n">connections</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">  </span><span class="sh">"</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">port</span><span class="p">,</span> <span class="sh">"</span><span class="s">=&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">expr_str</span><span class="p">)</span>

<span class="c1"># 필요 시 JSON 직렬화도 가능 (테스트/로깅용)
</span><span class="nf">print</span><span class="p">(</span><span class="n">ir</span><span class="p">.</span><span class="nf">to_json</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="6-주의확장-step-by-step">6) 주의/확장 (Step-by-step)</h1>

<ul>
  <li>
    <p><strong>표현식 평가 실패</strong> : <code class="language-plaintext highlighter-rouge">value/width/msb/lsb</code>는 <code class="language-plaintext highlighter-rouge">None</code>이 될 수 있음. 원문은 <code class="language-plaintext highlighter-rouge">*_str</code>에 보존.</p>
  </li>
  <li>
    <p><strong>포지셔널 연결</strong> : 라이브러리에 해당 서브모듈이 없으면 <code class="language-plaintext highlighter-rouge">__pos0</code>처럼 보존.</p>
  </li>
  <li>
    <p><strong>SystemVerilog 확장</strong> : <code class="language-plaintext highlighter-rouge">logic</code>, packed/unpacked, interface 포트 등은 별 레이어로 확장 추천.</p>
  </li>
  <li>
    <p><strong>위치 정보</strong> : 필요하면 <code class="language-plaintext highlighter-rouge">lineno/coord</code>를 dataclass에 추가 가능.</p>
  </li>
  <li>
    <p><strong>검증</strong> : 큰 설계에서 스키마 보장 원하면 <code class="language-plaintext highlighter-rouge">pydantic</code>으로 교체 가능.</p>
  </li>
</ul>

<p>원하는 대로 <strong>직접 탐색 가능한 Python 클래스 IR</strong> 로 변환되도록 구성해 두었어.<br />
원하면 <code class="language-plaintext highlighter-rouge">Connection</code>에 좌표/소스파일 정보나, <code class="language-plaintext highlighter-rouge">ModuleIR</code>에 빠른 인덱스(예: <code class="language-plaintext highlighter-rouge">port_dict</code>)를 추가해주는 최적화 버전도 바로 만들어줄게.</p>

<p class="chat--user">

IR이 뭐야

</p>

<p>좋은 질문! <strong>IR(Intermediate Representation, 중간 표현)</strong>은 <em>소스 코드(또는 설계)를 한층 표준화된 형태로 담아두는 중간 단계의 데이터 구조</em> 예요. 파서가 만든 “문법 그대로”의 트리(AST)와, 그걸 써서 분석·변환·코드생성 같은 후처리 사이에 놓입니다.</p>

<p>아래처럼 <strong>차근차근</strong> 이해하면 편해요:</p>

<ol>
  <li>
    <p><strong>정의</strong></p>

    <ul>
      <li>IR = 분석·최적화·변환을 하기 쉽도록 만든 <strong>표준화된 내부 데이터 모델</strong>.</li>
    </ul>
  </li>
  <li>
    <p><strong>왜 필요한가</strong></p>

    <ul>
      <li>
        <p>언어 문법 차이/스타일(예: Verilog ANSI vs Non-ANSI 포트 선언)을 <strong>한 가지 규칙</strong> 으로 통일.</p>
      </li>
      <li>
        <p><strong>트래버스(순회) 쉬움</strong> : 필요한 정보가 같은 자리/형태에 있음.</p>
      </li>
      <li>
        <p><strong>모듈성</strong> : 프런트엔드(AST)와 백엔드(분석/생성)를 느슨하게 결합.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>AST와의 차이</strong></p>

    <ul>
      <li>
        <p><strong>AST</strong> : 원문 문법을 거의 그대로 반영(케이스가 많고 예외 처리 필요).</p>
      </li>
      <li>
        <p><strong>IR</strong> : 의미 중심으로 <strong>정규화/정리</strong>(예: 포지셔널 인스턴스 → 네임드로 변환, 폭 미지정→1비트로 통일, 상수 가능하면 평가).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>일반적인 IR의 형태</strong></p>

    <ul>
      <li>
        <p>컴파일러: SSA, 3-address code, CFG/DFG 등</p>
      </li>
      <li>
        <p>하드웨어: <strong>넷리스트-유사 구조</strong> , 파라미터 평가 결과, 모듈/인스턴스/연결 관계 등</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>당신의 프로젝트에서의 IR</strong></p>

    <ul>
      <li>
        <p>우리가 설계한 <strong>Python dataclass IR</strong> 이 곧 IR:</p>

        <ul>
          <li>
            <p><code class="language-plaintext highlighter-rouge">ModuleIR</code> 안에 <code class="language-plaintext highlighter-rouge">ports</code>, <code class="language-plaintext highlighter-rouge">nets</code>, <code class="language-plaintext highlighter-rouge">instances</code>, <code class="language-plaintext highlighter-rouge">parameters</code></p>
          </li>
          <li>
            <p>포트 방향/폭, 내부 넷 폭, 인스턴스의 포트 매핑을 <strong>일관된 스키마</strong> 로 제공</p>
          </li>
          <li>
            <p>가능한 범위에서 <strong>정수 평가</strong>(<code class="language-plaintext highlighter-rouge">width</code>, <code class="language-plaintext highlighter-rouge">msb/lsb</code>) 적용, 실패해도 원문(<code class="language-plaintext highlighter-rouge">*_str</code>) 보존</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>얻는 이점</strong></p>

    <ul>
      <li>
        <p>이후 단계(예: 연결 검사, 자동 배선, 문서화, 코드 생성, 시각화)를 <strong>예외처리 거의 없이</strong> 구현 가능.</p>
      </li>
      <li>
        <p>도구 간 <strong>재사용</strong> ·확장 용이.</p>
      </li>
    </ul>
  </li>
</ol>

<p>한 줄 요약: <strong>IR은 “다루기 쉬운 표준형 설계 스냅샷”</strong>이고, 지금 만들고 있는 Python 클래스들이 바로 그 IR이에요.</p>

<p class="chat--user">

decl = io.first 이야. 근데 Enum을 Serialize 못해서 json 변환 부분에서 에러가 나

</p>

<p>좋은 포인트 두 가지!</p>

<ul>
  <li>
    <p><strong>(A)</strong> <code class="language-plaintext highlighter-rouge">Ioport</code>에서 선언/이름의 위치가 환경마다 달라 <code class="language-plaintext highlighter-rouge">decl = io.first</code>가 되는 케이스가 있어요. ⇒ <strong>양쪽 모두 자동 감지</strong> 하도록 바꿉니다.</p>
  </li>
  <li>
    <p><strong>(B)</strong> <code class="language-plaintext highlighter-rouge">Enum</code>은 기본 <code class="language-plaintext highlighter-rouge">json.dumps</code>로 직렬화가 안 됩니다. ⇒ <strong>custom default/encoder</strong> 로 <code class="language-plaintext highlighter-rouge">.value</code>를 쓰게 하면 해결됩니다.</p>
  </li>
</ul>

<p>아래를 그대로 반영하세요. (필요한 부분만 교체/추가)</p>

<hr />

<h2 id="1-ioport-양식-차이를-자동-감지-firstsecond-스왑-대응">1) <code class="language-plaintext highlighter-rouge">Ioport</code> 양식 차이를 자동 감지 (first/second 스왑 대응)</h2>

<h3 id="ordered_port_names-교체"><code class="language-plaintext highlighter-rouge">ordered_port_names</code> 교체</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="n">names</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">names</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="c1"># Robust: 이름이 어느 쪽(first/second)에 있든 잡아낸다
</span>            <span class="n">name_node</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                <span class="n">name_node</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">first</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                <span class="n">name_node</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span>
            <span class="k">if</span> <span class="n">name_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">name_node</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Port</span><span class="p">):</span>
            <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">names</span>
</code></pre></div></div>

<h3 id="normalize_module-내부의-포트-정규화-부분-수정"><code class="language-plaintext highlighter-rouge">normalize_module</code> 내부의 포트 정규화 부분 수정</h3>

<p>아래처럼 <strong>decl(방향/폭을 가진 선언 노드)</strong>를 어느 쪽(first/second)이든 잡도록 바꿉니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># ...
</span>    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">pname</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">ordered_names</span><span class="p">):</span>
        <span class="n">dir_</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Direction</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">signed</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">msb_s</span> <span class="o">=</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">msb_v</span> <span class="o">=</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>

            <span class="c1"># 어느 쪽이 선언 노드인지 감지
</span>            <span class="k">def</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
                <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">))</span>

            <span class="n">decl</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">first</span><span class="p">):</span>
                <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">first</span>
            <span class="k">elif</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">second</span><span class="p">):</span>
                <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">second</span>

            <span class="k">if</span> <span class="n">decl</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
                <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
                <span class="k">else</span><span class="p">:</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
                <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
                <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="n">env</span><span class="p">)</span>
                <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="c1"># Non-ANSI fallback
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">ansi_hit</span> <span class="ow">and</span> <span class="n">pname</span> <span class="ow">in</span> <span class="n">io_map</span><span class="p">:</span>
            <span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)</span> <span class="o">=</span> <span class="n">io_map</span><span class="p">[</span><span class="n">pname</span><span class="p">]</span>

        <span class="c1"># 폭 미지정 → 1비트
</span>        <span class="k">if</span> <span class="nf">all</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)):</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>

        <span class="n">ports</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Port</span><span class="p">(</span>
            <span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
            <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
        <span class="p">))</span>
</code></pre></div></div>

<blockquote>
  <p>이렇게 하면 <strong><code class="language-plaintext highlighter-rouge">decl = io.first</code></strong>인 케이스도, 반대로 <strong><code class="language-plaintext highlighter-rouge">decl = io.second</code></strong>인 케이스도 모두 정상 처리돼요.</p>
</blockquote>

<hr />

<h2 id="2-enum-json-직렬화-에러-해결">2) Enum JSON 직렬화 에러 해결</h2>

<p><code class="language-plaintext highlighter-rouge">json.dumps</code>에 <code class="language-plaintext highlighter-rouge">default</code>를 주거나, 커스텀 <code class="language-plaintext highlighter-rouge">JSONEncoder</code>를 써서 <code class="language-plaintext highlighter-rouge">Enum</code>을 <code class="language-plaintext highlighter-rouge">.value</code>로 바꿔 주세요.</p>

<h3 id="간단-버전-default-함수-추가">간단 버전: <code class="language-plaintext highlighter-rouge">default</code> 함수 추가</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">asdict</span>

<span class="k">def</span> <span class="nf">_json_default</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
    <span class="c1"># Enum -&gt; 그 값으로 직렬화
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Enum</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">o</span><span class="p">.</span><span class="n">value</span>
    <span class="c1"># 필요시 추가 핸들링 가능
</span>    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">DesignIR</span><span class="p">:</span>
    <span class="n">modules</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModuleIR</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">dict</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">indent</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">asdict</span><span class="p">(</span><span class="n">self</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">_json_default</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="대안-encoder-클래스로">대안: Encoder 클래스로</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EnumEncoder</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">JSONEncoder</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">default</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">o</span><span class="p">):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Enum</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">o</span><span class="p">.</span><span class="n">value</span>
        <span class="k">return</span> <span class="nf">super</span><span class="p">().</span><span class="nf">default</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>

<span class="c1"># 사용
</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">asdict</span><span class="p">(</span><span class="n">self</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cls</span><span class="o">=</span><span class="n">EnumEncoder</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>어느 쪽이든 결과는 동일: <code class="language-plaintext highlighter-rouge">Direction.INPUT</code> → <code class="language-plaintext highlighter-rouge">"input"</code>, <code class="language-plaintext highlighter-rouge">NetKind.WIRE</code> → <code class="language-plaintext highlighter-rouge">"wire"</code>처럼 직렬화됩니다.</p>
</blockquote>

<hr />

<h2 id="3-빠른-체크리스트-step-by-step">3) 빠른 체크리스트 (step-by-step)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ordered_port_names</code>를 위 코드로 <strong>교체</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">normalize_module</code>의 <strong>포트 처리 블록</strong> 을 위 코드로 <strong>교체</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DesignIR.to_json</code>에서 <code class="language-plaintext highlighter-rouge">default=_json_default</code> 또는 <code class="language-plaintext highlighter-rouge">cls=EnumEncoder</code>를 <strong>적용</strong></p>
  </li>
  <li>
    <p>다시 실행해서 <code class="language-plaintext highlighter-rouge">Enum</code> 직렬화 에러가 사라지는지, ANSI/Non-ANSI 모두에서 포트 방향/폭이 제대로 나오는지 확인</p>
  </li>
</ol>

<p>필요하면 <code class="language-plaintext highlighter-rouge">Port.dir</code> 타입을 일시적으로 <code class="language-plaintext highlighter-rouge">Optional[str]</code>로 바꿔도 되지만, 위처럼 <strong>Enum 유지 + 직렬화 커스터마이즈</strong> 가 더 안정적이에요.<br />
다른 부분도 막히는 게 있으면 오류 메시지랑 함께 알려줘—거기에 맞춰 추가 패치 줄게!</p>

<p class="chat--user">

1. Normalize 말고 표준화/정규화 라는 느낌으로 rename 하는 걸 제안해. 2. Port 방향이 non ansi 타입으로 되어있을 경우에 찾으면 업데이트하도록 해줘

</p>

<p>좋아—요청한 두 가지를 <strong>차근차근</strong> 반영할게.</p>

<hr />

<h1 id="1-normalize-이름을-표준화정규화-느낌으로-변경-제안">1) “Normalize” 이름을 “표준화/정규화” 느낌으로 변경 제안</h1>

<p>영어 식별자는 그대로 쓰되 의미를 “표준화/정규화”로 바꿔 읽히도록 추천해.</p>

<p><strong>이름 매핑(권장)</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">normalize_module</code> → <code class="language-plaintext highlighter-rouge">standardize_module</code> <em>(표준화)</em></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">convert_to_design_ir</code> → <code class="language-plaintext highlighter-rouge">build_standard_ir</code> <em>(표준 IR 빌드)</em></p>
  </li>
  <li>
    <p>파일명 <code class="language-plaintext highlighter-rouge">vnorm_classes.py</code> → <code class="language-plaintext highlighter-rouge">std_ir.py</code> <em>(standardized IR)</em></p>
  </li>
</ul>

<p><strong>호환용 래퍼(선택)</strong><br />
기존 호출부 안 깨지게 아래처럼 유지해도 좋아.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">files</span><span class="p">):</span>
    <span class="c1"># deprecated alias for backward-compat
</span>    <span class="k">return</span> <span class="nf">build_standard_ir</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="2-non-ansi-선언에서-포트-방향속성-발견-시-업데이트-로직-추가">2) Non-ANSI 선언에서 포트 방향/속성 발견 시 <strong>업데이트</strong> 로직 추가</h1>

<p>요지는 “헤더(ANSI)가 비어 있거나(non-ANSI 스타일) 또는 충돌 시 <strong>본문 선언(Decl)</strong> 을 신뢰해 덮어쓰기”다.<br />
아래 2개 조각만 교체/추가하면 됨.</p>

<h2 id="a-포트-표준화-함수-standardize_module-기존-normalize_module-대체">(A) 포트 표준화 함수: <code class="language-plaintext highlighter-rouge">standardize_module</code> (기존 <code class="language-plaintext highlighter-rouge">normalize_module</code> 대체)</h2>

<p>차이점:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Ioport</code>에서 선언 노드(first/second) 자동 감지</p>
  </li>
  <li>
    <p>일단 포트를 구성한 뒤 <strong>본문 선언으로 후처리 덮어쓰기</strong> 수행</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">standardize_module</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">ModuleIR</span><span class="p">:</span>
    <span class="n">env</span> <span class="o">=</span> <span class="nf">collect_param_env</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>

    <span class="c1"># 1) parameters (동일)
</span>    <span class="n">params</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">),</span> <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="p">))</span>
    <span class="n">header_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">params</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">)</span> <span class="ow">and</span> <span class="n">e</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">header_names</span><span class="p">:</span>
                    <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">),</span> <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                    <span class="p">))</span>

    <span class="c1"># 2) 포트 초안(헤더 기반)
</span>    <span class="n">ordered_names</span> <span class="o">=</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>
    <span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">pname</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">ordered_names</span><span class="p">):</span>
        <span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">False</span>
        <span class="n">msb_s</span> <span class="o">=</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">msb_v</span> <span class="o">=</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="c1"># Ioport에서 first/second 어느 쪽이든 선언 노드 감지
</span>        <span class="n">decl</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="k">def</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">x</span><span class="p">):</span> <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">first</span><span class="p">):</span>  <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">first</span>
            <span class="k">elif</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">second</span><span class="p">):</span> <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">second</span>
        <span class="k">if</span> <span class="n">decl</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
            <span class="k">else</span><span class="p">:</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
            <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="n">env</span><span class="p">)</span>

        <span class="c1"># 폭 미지정 → 1비트 기본
</span>        <span class="k">if</span> <span class="nf">all</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)):</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>

        <span class="n">ports</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Port</span><span class="p">(</span>
            <span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
            <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
        <span class="p">))</span>

    <span class="c1"># 3) 본문 선언(Non-ANSI)로 **후처리 덮어쓰기**
</span>    <span class="n">io_map</span> <span class="o">=</span> <span class="nf">build_io_decl_map</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="nf">apply_nonansi_overrides</span><span class="p">(</span><span class="n">ports</span><span class="p">,</span> <span class="n">io_map</span><span class="p">,</span> <span class="n">prefer_body</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="c1"># 4) nets (포트명 제외)
</span>    <span class="n">nets_raw</span> <span class="o">=</span> <span class="nf">build_net_decl_list</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">port_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">}</span>
    <span class="n">nets</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nets_raw</span> <span class="k">if</span> <span class="n">n</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">port_names</span><span class="p">]</span>

    <span class="c1"># 5) instances (기존과 동일)
</span>    <span class="n">instances</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Instance</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">il</span> <span class="ow">in</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">mod</span><span class="p">):</span>
        <span class="n">submod</span> <span class="o">=</span> <span class="n">il</span><span class="p">.</span><span class="n">module</span>
        <span class="n">shared_param_ovrs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">il</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">value_node</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">shared_param_ovrs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">value_node</span><span class="p">),</span> <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">value_node</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="p">))</span>
        <span class="k">for</span> <span class="n">inst</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
            <span class="n">conns</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Connection</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">pas</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">inst</span><span class="p">,</span> <span class="sh">"</span><span class="s">portlist</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
            <span class="n">positional</span> <span class="o">=</span> <span class="nf">any</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">portname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">in</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">pas</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">positional</span><span class="p">:</span>
                <span class="n">lib_ports</span> <span class="o">=</span> <span class="n">modlib_ports</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">submod</span><span class="p">,</span> <span class="p">[])</span>
                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">pa</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">pas</span><span class="p">):</span>
                    <span class="n">pname</span> <span class="o">=</span> <span class="n">lib_ports</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">lib_ports</span><span class="p">)</span> <span class="k">else</span> <span class="sa">f</span><span class="sh">"</span><span class="s">__pos</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">))))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">pas</span><span class="p">:</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pa</span><span class="p">.</span><span class="n">portname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">pa</span><span class="p">.</span><span class="n">argname</span><span class="p">)))</span>
            <span class="n">instances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Instance</span><span class="p">(</span><span class="n">inst</span><span class="o">=</span><span class="n">inst</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">module</span><span class="o">=</span><span class="n">submod</span><span class="p">,</span>
                                      <span class="n">param_overrides</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="n">shared_param_ovrs</span><span class="p">),</span>
                                      <span class="n">connections</span><span class="o">=</span><span class="n">conns</span><span class="p">))</span>
    <span class="k">return</span> <span class="nc">ModuleIR</span><span class="p">(</span><span class="n">parameters</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">ports</span><span class="o">=</span><span class="n">ports</span><span class="p">,</span> <span class="n">nets</span><span class="o">=</span><span class="n">nets</span><span class="p">,</span> <span class="n">instances</span><span class="o">=</span><span class="n">instances</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="b-본문-선언-덮어쓰기-헬퍼-추가-apply_nonansi_overrides">(B) 본문 선언 덮어쓰기 헬퍼 추가: <code class="language-plaintext highlighter-rouge">apply_nonansi_overrides</code></h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">prefer_body=True</code>면 <strong>항상</strong> 본문 선언으로 덮어씀(권장)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">prefer_body=False</code>면 비어있는 값만 채움</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">apply_nonansi_overrides</span><span class="p">(</span><span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">],</span> <span class="n">io_map</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">],</span> <span class="n">prefer_body</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">io_map</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="n">dir2</span><span class="p">,</span> <span class="n">signed2</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s2</span><span class="p">,</span> <span class="n">lsb_s2</span><span class="p">,</span> <span class="n">msb_v2</span><span class="p">,</span> <span class="n">lsb_v2</span><span class="p">,</span> <span class="n">width_v2</span><span class="p">)</span> <span class="o">=</span> <span class="n">io_map</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">]</span>

        <span class="k">def</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">existing</span><span class="p">,</span> <span class="n">new</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">new</span> <span class="nf">if </span><span class="p">(</span><span class="n">prefer_body</span> <span class="ow">or</span> <span class="n">existing</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">)</span> <span class="k">else</span> <span class="n">existing</span>

        <span class="c1"># 방향/서명/폭 모두 업데이트 규칙 적용
</span>        <span class="n">p</span><span class="p">.</span><span class="nb">dir</span>    <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nb">dir</span><span class="p">,</span> <span class="n">dir2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">signed</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">signed</span><span class="p">,</span> <span class="n">signed2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">msb_str</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">msb_str</span><span class="p">,</span> <span class="n">msb_s2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">lsb_str</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">lsb_str</span><span class="p">,</span> <span class="n">lsb_s2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">msb</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">msb</span><span class="p">,</span> <span class="n">msb_v2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">lsb</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">lsb</span><span class="p">,</span> <span class="n">lsb_v2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">width_v2</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="c-엔트리-포인트-이름-교체-build_standard_ir">(C) 엔트리 포인트 이름 교체 (<code class="language-plaintext highlighter-rouge">build_standard_ir</code>)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_standard_ir</span><span class="p">(</span><span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">DesignIR</span><span class="p">:</span>
    <span class="n">ast</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
    <span class="n">mods</span> <span class="o">=</span> <span class="nf">collect_modules</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
    <span class="n">modlib_ports</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="n">design</span> <span class="o">=</span> <span class="nc">DesignIR</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">design</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nf">standardize_module</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">design</span>

<span class="c1"># (선택) 하위호환
</span><span class="k">def</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">DesignIR</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">build_standard_ir</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="동작-요약-step-by-step">동작 요약 (step-by-step)</h2>

<ol>
  <li>
    <p>헤더에서 포트 <strong>초안</strong> 생성 (ANSI면 그 값 사용, 아니면 1비트 기본)</p>
  </li>
  <li>
    <p>본문 <code class="language-plaintext highlighter-rouge">Decl(Input/Output/Inout)</code> 스캔해서 <strong>io_map</strong> 생성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">apply_nonansi_overrides(..., prefer_body=True)</code>로</p>

    <ul>
      <li>
        <p><strong>non-ANSI에서 찾은 방향/폭/서명</strong> 을 <strong>항상 덮어쓰기</strong></p>
      </li>
      <li>
        <p>결과적으로 “헤더가 비어 있고 본문에만 방향이 있는” 경우도 정확히 채워짐</p>
      </li>
    </ul>
  </li>
</ol>

<p>원하면 <code class="language-plaintext highlighter-rouge">prefer_body=False</code>로 바꿔 “헤더 우선, 빈 값만 보충” 정책도 쉽게 전환 가능해.<br />
필요 시 포트에 <code class="language-plaintext highlighter-rouge">source="ansi|body"</code> 같은 필드 추가해서 최종 값의 출처를 트래킹하는 것도 추천!</p>]]></content><author><name>hvppyarchive</name></author><category term="verilog" /><summary type="html"><![CDATA[]]></summary></entry></feed>