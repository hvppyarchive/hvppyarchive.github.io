<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://hvppyarchive.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hvppyarchive.github.io/" rel="alternate" type="text/html" /><updated>2025-10-10T18:42:46+09:00</updated><id>https://hvppyarchive.github.io/feed.xml</id><title type="html">ARCHIVE</title><subtitle>An amazing archive.</subtitle><author><name>hvppyarchive</name></author><entry><title type="html"></title><link href="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/" rel="alternate" type="text/html" title="" /><published>2025-10-10T18:42:46+09:00</published><updated>2025-10-10T18:42:46+09:00</updated><id>https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str</id><content type="html" xml:base="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/"><![CDATA[<p class="chat--user">

Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 함수와 <code class="language-plaintext highlighter-rouge">__str__</code> 함수의 차이점

</p>

<p>Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 과 <code class="language-plaintext highlighter-rouge">__str__</code> 의 차이점은 <strong>객체를 문자열로 표현하는 목적</strong> 에서 달라집니다. 차이를 단계적으로 정리해드릴게요.</p>

<hr />

<h2 id="1-__repr__-의-목적">1. <code class="language-plaintext highlighter-rouge">__repr__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>개발자 중심</strong> : 객체를 "개발자"가 보고 이해할 수 있도록 표현합니다.</p>
  </li>
  <li>
    <p><strong>재현 가능(reproducible)</strong> : 가능한 한 객체를 다시 만들 수 있는 코드 형태로 보여주는 것이 목표입니다.</p>
  </li>
  <li>
    <p>보통 <code class="language-plaintext highlighter-rouge">eval(repr(obj)) == obj</code> 가 성립하는 형태를 지향합니다 (꼭 항상 그런 건 아니지만 권장).</p>
  </li>
  <li>
    <p>디버깅할 때 주로 사용됩니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Person(name=</span><span class="sh">'</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s">, age=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>  <span class="c1"># Person(name='Alice', age=30)
</span></code></pre></div></div>

<hr />

<h2 id="2-__str__-의-목적">2. <code class="language-plaintext highlighter-rouge">__str__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>사용자 중심</strong> : 객체를 "사용자"가 보기 좋은 문자열로 표현합니다.</p>
  </li>
  <li>
    <p>읽기 쉽고 깔끔하게 출력하는 데 초점을 둡니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">print(obj)</code> 를 호출했을 때 보여지는 값이 <code class="language-plaintext highlighter-rouge">__str__</code> 입니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># Alice (30 years old)
</span></code></pre></div></div>

<hr />

<h2 id="3-__repr__-vs-__str__-비교">3. <code class="language-plaintext highlighter-rouge">__repr__</code> vs <code class="language-plaintext highlighter-rouge">__str__</code> 비교</h2>

<table>
  <thead>
    <tr>
      <th>특징</th>
      <th><code class="language-plaintext highlighter-rouge">__repr__</code></th>
      <th><code class="language-plaintext highlighter-rouge">__str__</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>목적</td>
      <td>개발자용, 디버깅</td>
      <td>사용자용, 가독성</td>
    </tr>
    <tr>
      <td>출력 대상</td>
      <td><code class="language-plaintext highlighter-rouge">repr(obj)</code>, 대화형 쉘에서 기본</td>
      <td><code class="language-plaintext highlighter-rouge">str(obj)</code>, <code class="language-plaintext highlighter-rouge">print(obj)</code></td>
    </tr>
    <tr>
      <td>형식</td>
      <td>객체 재현 가능하거나 상세</td>
      <td>읽기 쉬운 설명 위주</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="4-구현-시-주의사항">4. 구현 시 주의사항</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code> 가 없으면 <code class="language-plaintext highlighter-rouge">__repr__</code> 가 대신 사용</strong>됩니다.</p>
  </li>
  <li>
    <p>따라서 최소한 <code class="language-plaintext highlighter-rouge">__repr__</code> 은 정의해 두는 것이 좋습니다.</p>
  </li>
</ul>

<hr />

<p>👉 정리하면,</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__repr__</code></strong> : “개발자가 디버깅할 때” 객체의 정확한 표현.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code></strong> : “사용자가 출력물을 볼 때” 보기 좋게 표현.</p>
  </li>
</ul>

<hr />

<p>원하시면 <code class="language-plaintext highlighter-rouge">__repr__</code> 와 <code class="language-plaintext highlighter-rouge">__str__</code> 를 동시에 구현했을 때 <code class="language-plaintext highlighter-rouge">print(obj)</code> 와 <code class="language-plaintext highlighter-rouge">obj</code> (쉘 출력) 의 차이를 직접 실행해 보여드릴 수도 있는데, 예제 코드 시연을 원하시나요?</p>]]></content><author><name>hvppyarchive</name></author></entry><entry><title type="html">ComfyUI LSF Job Submit</title><link href="https://hvppyarchive.github.io/comfyui/comfyui-lsf-job-submit/" rel="alternate" type="text/html" title="ComfyUI LSF Job Submit" /><published>2025-10-10T18:42:41+09:00</published><updated>2025-10-10T18:42:41+09:00</updated><id>https://hvppyarchive.github.io/comfyui/comfyui-lsf-job-submit</id><content type="html" xml:base="https://hvppyarchive.github.io/comfyui/comfyui-lsf-job-submit/"><![CDATA[<p class="chat--user">

ComfyUI에서 LSF Job을 Submit하고 이를 끝날 때까지 기다리는 Custom node를 개발하고 싶어. 요구 조건 1. main execute 함수를 async하게 구현해야 함(최신 ComfyUI에서는 async 노드 동작을 지원함) 2. Polling하며 bjobs 커맨드를 이용해 상태를 체크해야 함. 이 때 bjobs 커맨드가 다른 걸로 바뀌더라도 쉽게 변경할 수 있게 구조를 유연하게 짜줘. 3. 이 때 여러 노드가 동시에 돌 수도 있으며, bjobs를 너무 자주 치는 것을 방지하기 위해 파일시스템에 캐싱하는 로직이 있으면 좋을 것 같음. 4. 입력은 커맨드, cwd 2개 스트링임. 커맨드는 멀티라인으로 여러 bsub 커맨드가 들어올 수 도 있음을 명심할 것. bsub 커맨드 자체도 async하게 멀티로 뿌리도록 하면 좋을 것 같음(단 너무 한 번에 많은 job이 들어가지 않도록 배치 사이즈 조절은 필요할 것 같음) 5. 이 자체가 output 노드이면서 끝나면 적절한 아웃풋(뭐가 될지는 추천해줘)도 뱉도록 하자. 

</p>

<p>좋아! 요구사항을 모두 만족하는 <strong>ComfyUI용 LSF Submit &amp; Wait 커스텀 노드</strong> 설계를 깔끔하게 정리한 뒤, 바로 붙여 넣어 쓸 수 있는 완전한 코드를 드릴게요.</p>

<h1 id="설계-개요">설계 개요</h1>

<ul>
  <li>
    <p><strong>Async 노드</strong> : <code class="language-plaintext highlighter-rouge">SUPPORTS_ASYNC = True</code>, <code class="language-plaintext highlighter-rouge">async def run(...)</code> 구현.</p>
  </li>
  <li>
    <p><strong>멀티라인 bsub 제출</strong> : 입력 <code class="language-plaintext highlighter-rouge">commands</code>의 각 비어있지 않은 라인을 독립 명령으로 비동기 제출. 동시 제출 개수는 배치 크기로 제한.</p>
  </li>
  <li>
    <p><strong>Polling 구조/유연성</strong> : <code class="language-plaintext highlighter-rouge">StatusBackend</code> 인터페이스와 <code class="language-plaintext highlighter-rouge">LSFBjobsBackend</code> 기본 구현. <code class="language-plaintext highlighter-rouge">status_cmd_template</code>(예: <code class="language-plaintext highlighter-rouge">bjobs -noheader -o "jobid stat" {job_ids}</code>)을 바꾸기만 하면 다른 커맨드로 쉽게 전환.</p>
  </li>
  <li>
    <p><strong>파일시스템 캐시</strong> : 여러 노드가 동시에 돌아도 <code class="language-plaintext highlighter-rouge">status_cache.json</code>(잠금 포함)로 <strong>TTL 기반</strong> 캐싱. 너무 자주 <code class="language-plaintext highlighter-rouge">bjobs</code>를 치지 않도록 함.</p>
  </li>
  <li><strong>입력</strong> : <code class="language-plaintext highlighter-rouge">commands</code>(멀티라인 문자열), <code class="language-plaintext highlighter-rouge">cwd</code>(작업 디렉토리).<br />
추가 파라미터는 <strong>인라인 지시문</strong> 으로 조절:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># LSF: batch_size=4 poll_interval_s=10 status_ttl_s=15</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">batch_size</code>(동시 제출 개수), <code class="language-plaintext highlighter-rouge">poll_interval_s</code>(폴링 주기), <code class="language-plaintext highlighter-rouge">status_ttl_s</code>(캐시 TTL),<br />
<code class="language-plaintext highlighter-rouge">status_cmd_template</code>(상태 조회 커맨드 템플릿) 등 지원.</li>
    </ul>
  </li>
  <li>
    <p><strong>출력(OUTPUT 노드)</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">job_ids</code>: 제출된 Job ID들의 콤마 구분 문자열</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">results_json</code>: 요약 JSON 문자열(최종 상태/성공여부/결과 파일 경로 등)</p>
      </li>
    </ul>
  </li>
  <li><strong>터미널 상태</strong> : 기본 <code class="language-plaintext highlighter-rouge">{"DONE","EXIT"}</code>. 필요시 코드 내 상수로 확장 가능.</li>
</ul>

<hr />

<h1 id="설치사용법">설치/사용법</h1>

<ol>
  <li>
    <p>아래 코드를 <code class="language-plaintext highlighter-rouge">ComfyUI/custom_nodes/lsf_submit_and_wait.py</code> 로 저장 후 ComfyUI 재시작.</p>
  </li>
  <li>워크플로에서 이 노드를 마지막에 두고, <code class="language-plaintext highlighter-rouge">commands</code>에 여러 줄 <code class="language-plaintext highlighter-rouge">bsub ...</code>들을 넣으면 됨.<br />
옵션은 맨 위에 한 줄의 인라인 지시문으로 조절:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># LSF: batch_size=3 poll_interval_s=15 status_ttl_s=30</span>
bsub <span class="nt">-q</span> short <span class="nt">-J</span> test1 <span class="nb">sleep </span>5
bsub <span class="nt">-q</span> short <span class="nt">-J</span> test2 <span class="nb">sleep </span>8
bsub <span class="nt">-q</span> short <span class="nt">-J</span> test3 <span class="nb">sleep </span>2
</code></pre></div>    </div>
  </li>
  <li>결과는 <code class="language-plaintext highlighter-rouge">job_ids</code>와 <code class="language-plaintext highlighter-rouge">results_json</code>(요약/결과 파일 경로 포함)으로 반환됩니다.</li>
</ol>

<hr />

<h1 id="코드-그대로-사용-가능">코드 (그대로 사용 가능)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: custom_nodes/lsf_submit_and_wait.py
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">shlex</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># fcntl (POSIX) 잠금: Windows에선 graceful degrade
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">fcntl</span>  <span class="c1"># type: ignore
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">fcntl</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># ---------- 유틸 ----------
</span>
<span class="n">JOB_ID_REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
<span class="n">TERMINAL_STATES</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">iso_now</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(</span><span class="n">timespec</span><span class="o">=</span><span class="sh">"</span><span class="s">seconds</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">Z</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">default_cache_dir</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">COMFYUI_LSF_CACHE_DIR</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">gettempdir</span><span class="p">(),</span> <span class="sh">"</span><span class="s">comfyui_lsf_cache</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">d</span>

<span class="k">def</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    첫 줄(들)에 </span><span class="sh">'</span><span class="s"># LSF: key=value key=value ...</span><span class="sh">'</span><span class="s"> 형식의 인라인 옵션을 허용.
    반환: (options_dict, command_lines)
    </span><span class="sh">"""</span>
    <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">commands_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()]</span>
    <span class="n">clean_lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">^\s*#\s*LSF:\s*(.+)$</span><span class="sh">"</span><span class="p">,</span> <span class="n">ln</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="c1"># key=value ... 파싱(따옴표 허용)
</span>            <span class="n">kvs</span> <span class="o">=</span> <span class="n">shlex</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">posix</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">kv</span> <span class="ow">in</span> <span class="n">kvs</span><span class="p">:</span>
                <span class="k">if</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">kv</span><span class="p">:</span>
                    <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">kv</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="c1"># 숫자형 자동 캐스팅
</span>                    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
                        <span class="n">v</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="c1"># true/false
</span>                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">false</span><span class="sh">"</span><span class="p">):</span>
                            <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">)</span>
                    <span class="n">options</span><span class="p">[</span><span class="n">k</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="n">v</span>
            <span class="k">continue</span>
        <span class="n">clean_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>
    <span class="c1"># 비어있는 라인 제거
</span>    <span class="n">clean_lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">clean_lines</span> <span class="k">if</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>
    <span class="k">return</span> <span class="n">options</span><span class="p">,</span> <span class="n">clean_lines</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
        <span class="n">cmd</span><span class="p">,</span>
        <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span> <span class="k">if</span> <span class="n">cwd</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c1"># LSF 표준: "Job &lt;12345&gt; is submitted to queue &lt;...&gt;."
</span>    <span class="k">return</span> <span class="n">JOB_ID_REGEX</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span>

<span class="c1"># ---------- 상태 백엔드/캐시 ----------
</span>
<span class="k">class</span> <span class="nc">StatusBackend</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">raise</span> <span class="nb">NotImplementedError</span>

<span class="k">class</span> <span class="nc">LSFBjobsBackend</span><span class="p">(</span><span class="n">StatusBackend</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    status_cmd_template 예:
      </span><span class="sh">'</span><span class="s">bjobs -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"</span><span class="s"> {job_ids}</span><span class="sh">'</span><span class="s">
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">status_cmd_template</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">status_cmd_template</span><span class="p">:</span>
            <span class="n">status_cmd_template</span> <span class="o">=</span> <span class="sh">'</span><span class="s">bjobs -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"</span><span class="s"> {job_ids}</span><span class="sh">'</span>
        <span class="n">self</span><span class="p">.</span><span class="n">template</span> <span class="o">=</span> <span class="n">status_cmd_template</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{}</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">template</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">job_ids</span><span class="o">=</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="c1"># 실패 시 빈 딕트 반환 (상위 로직에서 재시도/캐시 사용)
</span>            <span class="k">return</span> <span class="p">{}</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># 기대 포맷: "&lt;jobid&gt; &lt;state&gt;"
</span>        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">ln</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ln</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">parts</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">state</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="k">class</span> <span class="nc">SharedJSONCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    여러 프로세스/노드 간 공유되는 JSON 캐시 (TTL 적용).
    파일 잠금 사용(가능 시).
    구조: { job_id: {</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">RUN</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="s">: epoch_seconds}, ... }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ttl_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">=</span> <span class="n">cache_file</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ttl_s</span> <span class="o">=</span> <span class="n">ttl_s</span>
        <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">cache_file</span><span class="p">))</span>
        <span class="c1"># 파일 초기화
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">cache_file</span><span class="p">):</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({},</span> <span class="n">f</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_lock</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fh</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_EX</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_unlock</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fh</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_UN</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_read</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_write</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.tmp</span><span class="sh">"</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

        <span class="c1"># 1) 읽기 잠금
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">))</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({},</span> <span class="n">f</span><span class="p">)</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_lock</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="c1"># 캐시 히트/미스 결정
</span>            <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">to_query</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">entry</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">entry</span> <span class="ow">and</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">ttl_s</span><span class="p">):</span>
                    <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">to_query</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="c1"># 2) 미스 대상 조회 (잠금 없이)
</span>        <span class="n">fresh</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="n">to_query</span><span class="p">:</span>
            <span class="n">fresh</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">to_query</span><span class="p">)</span>

        <span class="c1"># 3) 쓰기 잠금하여 병합 반영
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r+</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_lock</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="n">data2</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">data2</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">updated</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">fresh</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                <span class="n">prev</span> <span class="o">=</span> <span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">prev</span> <span class="ow">or</span> <span class="n">prev</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">st</span> <span class="ow">or</span> <span class="p">(</span><span class="n">ts</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">prev</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
                    <span class="n">data2</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">ts</span><span class="p">}</span>
                    <span class="n">updated</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">if</span> <span class="n">updated</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">truncate</span><span class="p">()</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data2</span><span class="p">,</span> <span class="n">fh</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="c1"># 결괏값 구성 (fresh 우선)
</span>        <span class="n">result</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">fresh</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="c1"># ---------- 제출 &amp; 대기 ----------
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">commands</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    각 라인을 독립 커맨드로 제출. bsub 출력에서 Job ID 추출.
    동시 제출 개수를 batch_size로 제한.
    </span><span class="sh">"""</span>
    <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)))</span>
    <span class="n">submissions</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_submit_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">sem</span><span class="p">:</span>
            <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">)</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cmd</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">err</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">jids</span><span class="p">,</span>
            <span class="p">}</span>

    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_submit_one</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">submissions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="k">await</span> <span class="n">t</span><span class="p">)</span>
    <span class="c1"># 추출된 Job ID 평탄화
</span>    <span class="n">job_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])]</span>
    <span class="k">return</span> <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">wait_until_done</span><span class="p">(</span><span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
                          <span class="n">poll_interval_s</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
                          <span class="n">status_cache</span><span class="p">:</span> <span class="n">SharedJSONCache</span><span class="p">,</span>
                          <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">,</span>
                          <span class="n">max_wait_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    모든 job이 TERMINAL_STATES(DONE/EXIT)에 도달할 때까지 폴링.
    max_wait_s 지정시 해당 시간 초과하면 중단.
    </span><span class="sh">"""</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">final</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">status_cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
        <span class="n">final</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="c1"># 모두 터미널 상태?
</span>        <span class="k">if</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
            <span class="k">break</span>
        <span class="c1"># 타임아웃?
</span>        <span class="k">if</span> <span class="n">max_wait_s</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_wait_s</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">poll_interval_s</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">final</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>

<span class="c1"># ---------- ComfyUI 노드 ----------
</span>
<span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력:
      - commands (STRING, multiline): 여러 줄 bsub 커맨드
        * 인라인 옵션: </span><span class="sh">'</span><span class="s"># LSF: batch_size=4 poll_interval_s=10 status_ttl_s=15
                         status_cmd_template=</span><span class="sh">"</span><span class="s">bjobs -noheader -o </span><span class="se">\"</span><span class="s">jobid stat</span><span class="se">\"</span><span class="s"> {job_ids}</span><span class="sh">"'</span><span class="s">
      - cwd (STRING): 실행 디렉토리

    출력(OUTPUT 노드):
      - job_ids (STRING): 콤마 구분 목록
      - results_json (STRING): 요약 JSON 문자열
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="c1"># 0) 인라인 옵션/명령 파싱
</span>        <span class="n">opts</span><span class="p">,</span> <span class="n">lines</span> <span class="o">=</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="n">batch_size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
        <span class="n">poll_interval_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="n">status_ttl_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status_ttl_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="n">status_cmd_template</span> <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status_cmd_template</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">bjobs -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"</span><span class="s"> {job_ids}</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">max_wait_s</span> <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">max_wait_s</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
            <span class="n">max_wait_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">)</span>

        <span class="c1"># 1) 제출
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>

        <span class="c1"># 2) 상태 백엔드/캐시
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">status_cache</span> <span class="o">=</span> <span class="nc">SharedJSONCache</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="n">ttl_s</span><span class="o">=</span><span class="n">status_ttl_s</span><span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBjobsBackend</span><span class="p">(</span><span class="n">status_cmd_template</span><span class="o">=</span><span class="n">status_cmd_template</span><span class="p">)</span>

        <span class="c1"># 3) 완료까지 대기
</span>        <span class="n">final_statuses</span><span class="p">,</span> <span class="n">waited_sec</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">wait_until_done</span><span class="p">(</span>
            <span class="n">job_ids</span><span class="p">,</span> <span class="n">poll_interval_s</span><span class="p">,</span> <span class="n">status_cache</span><span class="p">,</span> <span class="n">backend</span><span class="p">,</span> <span class="n">max_wait_s</span><span class="o">=</span><span class="n">max_wait_s</span>
        <span class="p">)</span>

        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

        <span class="c1"># 실패 제출 수집
</span>        <span class="n">failed_submissions</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span>
            <span class="k">if</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="c1"># 4) 결과 요약/로그 파일 저장
</span>        <span class="n">session_tag</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">_</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">results_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">runs</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">results_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">results_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">result_</span><span class="si">{</span><span class="n">session_tag</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">result_payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">completed_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">completed_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">duration_sec</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="n">waited_sec</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_ids</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">final_status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">all_done</span><span class="sh">"</span><span class="p">:</span> <span class="n">all_done</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">failed_submissions</span><span class="sh">"</span><span class="p">:</span> <span class="n">failed_submissions</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cwd</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">options</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">:</span> <span class="n">batch_size</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">poll_interval_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">status_ttl_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">status_ttl_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">status_cmd_template</span><span class="sh">"</span><span class="p">:</span> <span class="n">status_cmd_template</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">max_wait_s</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">results_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">results_path</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">results_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">result_payload</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="c1"># 파일에 못 쓴다고 해도 반환은 계속
</span>            <span class="k">pass</span>

        <span class="n">job_ids_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="n">results_json_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result_payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">job_ids_str</span><span class="p">,</span> <span class="n">results_json_str</span><span class="p">)</span>

<span class="c1"># ComfyUI 노드 등록
</span><span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFSubmitAndWait</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Submit &amp; Wait</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="사용-팁--커스터마이즈">사용 팁 &amp; 커스터마이즈</h2>

<ul>
  <li>
    <p><strong>배치 크기 조절</strong> : 제출이 너무 몰리면 큐가 잠길 수 있으니 <code class="language-plaintext highlighter-rouge"># LSF: batch_size=4</code>처럼 적절히 제한하세요.</p>
  </li>
  <li>
    <p><strong>폴링/캐시</strong> : <code class="language-plaintext highlighter-rouge">poll_interval_s</code>는 폴링 주기, <code class="language-plaintext highlighter-rouge">status_ttl_s</code>는 캐시 TTL(초). 여러 노드가 돌더라도 <code class="language-plaintext highlighter-rouge">/tmp/comfyui_lsf_cache</code>(기본) 공유 캐시로 <code class="language-plaintext highlighter-rouge">bjobs</code> 호출 빈도를 크게 줄입니다. 경로는 <code class="language-plaintext highlighter-rouge">COMFYUI_LSF_CACHE_DIR</code> 환경변수로 바꿀 수 있어요.</p>
  </li>
  <li>
    <p><strong>상태 커맨드 교체</strong> : LSF 외 다른 시스템으로 바꾸고 싶다면 인라인에</p>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># LSF: status_cmd_template="bjobs -noheader -o \"jobid stat\" {job_ids}"</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>처럼 명령 템플릿을 전달하세요. <code class="language-plaintext highlighter-rouge">{job_ids}</code> 플레이스홀더는 반드시 포함되어야 합니다.<br />
(예시) 커스텀 스크립트로 바꿀 때:<br />
<code class="language-plaintext highlighter-rouge"># LSF: status_cmd_template="/opt/cluster/bin/my_bjobs --format jobid,status {job_ids}"</code></p>

<ul>
  <li>
    <p><strong>타임아웃</strong> : 전체 대기 시간 제한이 필요하면 <code class="language-plaintext highlighter-rouge"># LSF: max_wait_s=7200</code> 처럼 넣으세요.</p>
  </li>
  <li>
    <p><strong>터미널 상태 확장</strong> : 필요하면 코드 상단의 <code class="language-plaintext highlighter-rouge">TERMINAL_STATES</code>를 편집(예: <code class="language-plaintext highlighter-rouge">{"DONE","EXIT","FINISHED"}</code>).</p>
  </li>
</ul>

<hr />

<h2 id="출력-포맷-제안">출력 포맷 제안</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">job_ids</code> : <code class="language-plaintext highlighter-rouge">"123,124,125"</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">results_json</code> :</p>
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"submitted_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2025-10-10T00:00:00Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"completed_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2025-10-10T00:03:12Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"duration_sec"</span><span class="p">:</span><span class="w"> </span><span class="mf">192.4</span><span class="p">,</span><span class="w">
  </span><span class="nl">"job_ids"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"123"</span><span class="p">,</span><span class="s2">"124"</span><span class="p">,</span><span class="s2">"125"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"final_status"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="nl">"123"</span><span class="p">:</span><span class="s2">"DONE"</span><span class="p">,</span><span class="nl">"124"</span><span class="p">:</span><span class="s2">"DONE"</span><span class="p">,</span><span class="nl">"125"</span><span class="p">:</span><span class="s2">"EXIT"</span><span class="p">},</span><span class="w">
  </span><span class="nl">"all_done"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"failed_submissions"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/work/exp1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"options"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">},</span><span class="w">
  </span><span class="nl">"results_file"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/tmp/comfyui_lsf_cache/runs/result_20251010_000000_12345.json"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<p>필요하면 <code class="language-plaintext highlighter-rouge">status_cmd_template</code>를 SLURM 등으로 바꾸는 예시도 추가로 드릴게요. 원하는 추가 기능(예: 실패 시 재시도, 백오프, 개별 job 로그 추적) 있으면 말만 해줘요!</p>

<p class="chat--user">

개선 요청: 노드 자체도 async로 동작할 수 있음, 즉, 이와 동일한 다른 노드들이 있을 수 있고 그 노드들과도 cache를 공유해야 더욱 효율적일 것 같음.(bjobs할 때 job id를 제한하면 안 될 것 같고, bjobs -a 로 봐야할 것 같음) 이 때 추가 고려 사항: Node1이 만든 cache를 Node2가 참고할 수 있는데, 이 때 Node2에서 방금 bsub한 job id는 cache에 없을 수도 있음(TTL이 안돼서). 이 코너 케이스도 고려할 것

</p>

<p>좋은 포인트! 요구하신 “다중 노드 동시 동작 + 전역 캐시 공유 + <code class="language-plaintext highlighter-rouge">bjobs -a</code> 기반 전체 스냅샷”으로 구조를 업그레이드했습니다. 특히 <strong>Node2가 방금 제출한 잡이 캐시에 아직 없을 수 있는 코너 케이스</strong> 를 해결하기 위해, <strong>제출 직후 캐시에<code class="language-plaintext highlighter-rouge">SUBMITTED</code> 상태로 시드(seeding)</strong> 하고, 상태 캐시는 <strong>‘전체 목록’(bjobs -a) 스냅샷</strong> 을 TTL/락 기반으로 갱신하도록 바꿨습니다.</p>

<p>아래는 변경 요약 → 바로 쓸 수 있는 전체 코드 순서로 드립니다.</p>

<hr />

<h1 id="변경설계-포인트-step-by-step">변경/설계 포인트 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>폴링 백엔드 전면 개편</strong></p>

    <ul>
      <li>
        <p>기존: <code class="language-plaintext highlighter-rouge">bjobs {job_ids}</code> 특정 잡만 조회</p>
      </li>
      <li>
        <p>변경: <strong>기본값을<code class="language-plaintext highlighter-rouge">bjobs -a -noheader -o "jobid stat"</code>로 전체 조회</strong>→ 한 번의 호출로 모든 잡 상태를 받아 전역 캐시에 저장.</p>
      </li>
      <li>
        <p>템플릿은 <code class="language-plaintext highlighter-rouge">full_status_cmd_template</code>로 교체(여전히 옵션으로 바꿀 수 있음).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>전역 공유 캐시(파일) 구조 개선</strong></p>

    <ul>
      <li>단일 파일에 전체 스냅샷 보관:
        <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"jobs"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"123"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="nl">"status"</span><span class="p">:</span><span class="s2">"PEND"</span><span class="p">,</span><span class="nl">"ts"</span><span class="p">:</span><span class="mi">169</span><span class="err">...</span><span class="p">},</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="p">},</span><span class="w">
  </span><span class="nl">"last_full_refresh_ts"</span><span class="p">:</span><span class="w"> </span><span class="mi">169</span><span class="err">...</span><span class="p">,</span><span class="w">
  </span><span class="nl">"meta"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li>
        <p><strong>TTL(<code class="language-plaintext highlighter-rouge">full_ttl_s</code>)</strong> + <strong>최소 리프레시 간격(<code class="language-plaintext highlighter-rouge">min_refresh_gap_s</code>)</strong> + <strong>락 파일(가능 시 fcntl)</strong> 로 <strong>-a 호출 폭주 방지</strong>.</p>
      </li>
      <li>다중 노드가 동시에 접근해도 <strong>읽기/쓰기 잠금</strong> 적용.</li>
    </ul>
  </li>
  <li>
    <p><strong>코너 케이스 처리(방금 제출한 잡 미반영)</strong></p>

    <ul>
      <li>
        <p><strong>제출 직후</strong> 해당 잡들을 <strong>캐시에 ‘SUBMITTED’</strong> 상태로 <strong>시드(seeding)</strong> → 다른 노드도 즉시 이 JobID를 “알고” 있어서 불필요한 강제 리프레시가 줄어듦.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">get_statuses()</code>에서 <strong>요청한 JobID가 캐시에 없거나 오래되면</strong> ,</p>

        <ul>
          <li>
            <p>TTL 만료이거나 <code class="language-plaintext highlighter-rouge">force_refresh_on_miss=True</code>이고 <code class="language-plaintext highlighter-rouge">min_refresh_gap_s</code> 이상 경과 시 <strong>한 노드만</strong> <code class="language-plaintext highlighter-rouge">-a</code>를 실행해 <strong>새 스냅샷</strong> 작성(락으로 단일화).</p>
          </li>
          <li>
            <p>그 외에는 다음 폴링 주기에 자연스럽게 반영.</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>완전한 async 지원 + 다중 제출 제어</strong></p>

    <ul>
      <li>
        <p>노드 자체는 <code class="language-plaintext highlighter-rouge">SUPPORTS_ASYNC = True</code>, 비동기 제출/대기.</p>
      </li>
      <li>
        <p>멀티라인 <code class="language-plaintext highlighter-rouge">bsub</code>를 <strong>배치 크기 제한(<code class="language-plaintext highlighter-rouge">batch_size</code>)</strong>으로 병렬 제출.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>출력/로그</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">job_ids</code>(콤마 문자열), <code class="language-plaintext highlighter-rouge">results_json</code>(요약 JSON).</p>
      </li>
      <li>
        <p>실행 결과는 <code class="language-plaintext highlighter-rouge">/tmp/comfyui_lsf_cache/runs/result_*.json</code>에도 저장.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="코드-교체추가-없이-그대로-사용">코드 (교체/추가 없이 그대로 사용)</h1>

<p><code class="language-plaintext highlighter-rouge">ComfyUI/custom_nodes/lsf_submit_and_wait.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">shlex</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># fcntl (POSIX) 잠금: Windows에선 graceful degrade
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">fcntl</span>  <span class="c1"># type: ignore
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">fcntl</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># ---------- 상수/유틸 ----------
</span>
<span class="n">JOB_ID_REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
<span class="n">TERMINAL_STATES</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">iso_now</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(</span><span class="n">timespec</span><span class="o">=</span><span class="sh">"</span><span class="s">seconds</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">Z</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">default_cache_dir</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">COMFYUI_LSF_CACHE_DIR</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">gettempdir</span><span class="p">(),</span> <span class="sh">"</span><span class="s">comfyui_lsf_cache</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">d</span>

<span class="k">def</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    첫 줄(들)에 </span><span class="sh">'</span><span class="s"># LSF: key=value key=value ...</span><span class="sh">'</span><span class="s"> 형식의 인라인 옵션을 허용.
    반환: (options_dict, command_lines)
    </span><span class="sh">"""</span>
    <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">commands_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()]</span>
    <span class="n">clean_lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">^\s*#\s*LSF:\s*(.+)$</span><span class="sh">"</span><span class="p">,</span> <span class="n">ln</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="n">kvs</span> <span class="o">=</span> <span class="n">shlex</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">posix</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">kv</span> <span class="ow">in</span> <span class="n">kvs</span><span class="p">:</span>
                <span class="k">if</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">kv</span><span class="p">:</span>
                    <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">kv</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
                        <span class="n">v</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">false</span><span class="sh">"</span><span class="p">):</span>
                            <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">)</span>
                    <span class="n">options</span><span class="p">[</span><span class="n">k</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="n">v</span>
            <span class="k">continue</span>
        <span class="n">clean_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>
    <span class="n">clean_lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">clean_lines</span> <span class="k">if</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>
    <span class="k">return</span> <span class="n">options</span><span class="p">,</span> <span class="n">clean_lines</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
        <span class="n">cmd</span><span class="p">,</span>
        <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span> <span class="k">if</span> <span class="n">cwd</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c1"># LSF 표준: "Job &lt;12345&gt; is submitted to queue &lt;...&gt;."
</span>    <span class="k">return</span> <span class="n">JOB_ID_REGEX</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span>

<span class="c1"># ---------- 상태 백엔드 (전체 스냅샷) ----------
</span>
<span class="k">class</span> <span class="nc">StatusBackend</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">query_full</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">raise</span> <span class="nb">NotImplementedError</span>

<span class="k">class</span> <span class="nc">LSFBjobsFullBackend</span><span class="p">(</span><span class="n">StatusBackend</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    전체 스냅샷 기반 백엔드.
    full_status_cmd_template 기본값:
      </span><span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span><span class="s">
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">full_status_cmd_template</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">full_status_cmd_template</span><span class="p">:</span>
            <span class="n">full_status_cmd_template</span> <span class="o">=</span> <span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span>
        <span class="n">self</span><span class="p">.</span><span class="n">template</span> <span class="o">=</span> <span class="n">full_status_cmd_template</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">query_full</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">template</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{}</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># 기대 포맷: "&lt;jobid&gt; &lt;state&gt;"
</span>        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">ln</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ln</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">parts</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">state</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="c1"># ---------- 전역 공유 캐시 (전체 목록 + TTL + 락) ----------
</span>
<span class="k">class</span> <span class="nc">FullListSharedCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    파일 하나에 전체 job 상태 스냅샷을 저장/공유.
    구조:
    {
      </span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="s">: { job_id: {</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="s">: epoch}, ... },
      </span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="s">: epoch,
      </span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">source</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, ... }
    }
    정책:
      - full_ttl_s: 전체 스냅샷 TTL
      - min_refresh_gap_s: -a 재실행 최소 간격
      - force_refresh_on_miss: 필요한 job_id가 없으면 TTL 무시하고(단 최소 간격은 존중) 조기 갱신 시도
      - SUBMITTED 시드: 제출 직후 캐시에 넣어 코너 케이스 완화
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                 <span class="n">full_ttl_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
                 <span class="n">min_refresh_gap_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
                 <span class="n">force_refresh_on_miss</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">=</span> <span class="n">cache_file</span>
        <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span> <span class="o">=</span> <span class="n">full_ttl_s</span>
        <span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span> <span class="o">=</span> <span class="n">min_refresh_gap_s</span>
        <span class="n">self</span><span class="p">.</span><span class="n">force_refresh_on_miss</span> <span class="o">=</span> <span class="n">force_refresh_on_miss</span>
        <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">cache_file</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">cache_file</span><span class="p">):</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}},</span> <span class="n">f</span><span class="p">)</span>

    <span class="c1"># ---- 락 유틸 ----
</span>    <span class="k">def</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">nonblock</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
        <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">a+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_EX</span> <span class="o">|</span> <span class="p">(</span><span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_NB</span> <span class="k">if</span> <span class="n">nonblock</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span>
            <span class="k">except</span> <span class="nb">BlockingIOError</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">fh</span>

    <span class="k">def</span> <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fh</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_UN</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">_read_cache</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>

    <span class="k">def</span> <span class="nf">_write_cache</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.tmp</span><span class="sh">"</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>

    <span class="c1"># ---- 공개 API ----
</span>    <span class="k">def</span> <span class="nf">seed_submitted</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]):</span>
        <span class="sh">"""</span><span class="s">제출 직후 SUBMITTED 상태로 캐시에 시드(코너 케이스 완화).</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 쓰기 락
</span>        <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="c1"># 이미 있으면 건드리지 않음(경쟁 상태에서 더 최신 값 보호)
</span>                <span class="k">if</span> <span class="n">jid</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">jobs</span><span class="p">:</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">}</span>
            <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_write_cache</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">maybe_refresh_full</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">,</span> <span class="n">reason</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        - TTL 또는 miss 사유로 전체 스냅샷을 갱신할지 판단/실행
        - 동시성: refresh 락 파일을 non-blocking으로 획득한 단 하나의 프로세스만 실제로 -a 실행
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="c1"># 최소 간격 체크
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="c1"># refresh 락(별도 파일) 획득 시도(실패하면 다른 노드가 수행 중)
</span>        <span class="n">lock_path</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.refresh.lock</span><span class="sh">"</span>
        <span class="n">lock_fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">lock_path</span><span class="p">,</span> <span class="n">nonblock</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">lock_fh</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 한 번 더 최신화 검사(경쟁 회피)
</span>            <span class="n">data2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">last_ts2</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>

            <span class="c1"># 실제 -a 실행
</span>            <span class="n">snapshot</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">query_full</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">snapshot</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>  <span class="c1"># 실패 시 그대로 유지
</span>
            <span class="n">now2</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="c1"># 쓰기 락(캐시 파일)
</span>            <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="c1"># 새 스냅샷 반영
</span>                <span class="n">ts</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">ts</span><span class="p">}</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="n">meta</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">reason</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_write_cache</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">lock_fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        - 캐시에서 먼저 조회
        - 필요 시 maybe_refresh_full()을 통해 -a 스냅샷 갱신
        - 최종적으로 요청 job_ids에 대한 상태 dict 반환(없으면 </span><span class="sh">""</span><span class="s">)
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
        <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

        <span class="k">def</span> <span class="nf">_fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ent</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="c1"># 엔트리가 SUBMITTED 라도 '신선한' 것으로 취급(바로 직전 제출 케이스 완화)
</span>            <span class="n">age</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">age</span> <span class="o">&lt;=</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">)</span>

        <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="c1"># 1) TTL 만료 또는 miss 여부 판단
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">):</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="c1"># miss 검사: 요청한 job이 캐시에 없거나 stale
</span>        <span class="n">miss</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span> <span class="k">if</span> <span class="ow">not</span> <span class="nf">_fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">)]</span>
        <span class="k">if</span> <span class="n">miss</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="n">force_refresh_on_miss</span><span class="p">:</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="c1"># 2) 필요 시 전체 리프레시 시도(한 프로세스만 실행)
</span>        <span class="k">if</span> <span class="n">need_refresh</span><span class="p">:</span>
            <span class="n">reason</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ttl_expired</span><span class="sh">"</span> <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s">miss</span><span class="sh">"</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">maybe_refresh_full</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">reason</span><span class="o">=</span><span class="n">reason</span><span class="p">)</span>
            <span class="c1"># 갱신 후 최신 데이터 재로딩
</span>            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>

        <span class="c1"># 3) 결과 구성
</span>        <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="n">out</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">if</span> <span class="n">ent</span> <span class="k">else</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="c1"># ---------- 제출 &amp; 대기 ----------
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">commands</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    각 라인을 독립 커맨드로 제출. bsub 출력에서 Job ID 추출.
    동시 제출 개수를 batch_size로 제한.
    </span><span class="sh">"""</span>
    <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)))</span>
    <span class="n">submissions</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_submit_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">sem</span><span class="p">:</span>
            <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">)</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cmd</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">err</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">jids</span><span class="p">,</span>
            <span class="p">}</span>

    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_submit_one</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">submissions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="k">await</span> <span class="n">t</span><span class="p">)</span>
    <span class="n">job_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])]</span>
    <span class="k">return</span> <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">wait_until_done</span><span class="p">(</span><span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
                          <span class="n">poll_interval_s</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
                          <span class="n">full_cache</span><span class="p">:</span> <span class="n">FullListSharedCache</span><span class="p">,</span>
                          <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">,</span>
                          <span class="n">max_wait_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">final</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">full_cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
        <span class="n">final</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">if</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
            <span class="k">break</span>
        <span class="k">if</span> <span class="n">max_wait_s</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_wait_s</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">poll_interval_s</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">final</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>

<span class="c1"># ---------- ComfyUI 노드 ----------
</span>
<span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력:
      - commands (STRING, multiline): 여러 줄 bsub 커맨드
        * 인라인 옵션: </span><span class="sh">'</span><span class="s"># LSF: batch_size=4 poll_interval_s=10 full_ttl_s=15
                         full_status_cmd_template=</span><span class="sh">"</span><span class="s">bjobs -a -noheader -o </span><span class="se">\"</span><span class="s">jobid stat</span><span class="se">\"</span><span class="sh">"</span><span class="s">
                         min_refresh_gap_s=5 force_refresh_on_miss=true max_wait_s=7200</span><span class="sh">'</span><span class="s">
      - cwd (STRING): 실행 디렉토리

    출력(OUTPUT 노드):
      - job_ids (STRING): 콤마 구분 목록
      - results_json (STRING): 요약 JSON 문자열
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="c1"># 0) 인라인 옵션/명령 파싱
</span>        <span class="n">opts</span><span class="p">,</span> <span class="n">lines</span> <span class="o">=</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="n">batch_size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
        <span class="n">poll_interval_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="c1"># backward compat: status_ttl_s -&gt; full_ttl_s
</span>        <span class="n">full_ttl_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">full_ttl_s</span><span class="sh">"</span><span class="p">,</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status_ttl_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">)))</span>
        <span class="n">min_refresh_gap_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">min_refresh_gap_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
        <span class="n">force_refresh_on_miss</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">force_refresh_on_miss</span><span class="sh">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">))</span>
        <span class="n">full_status_cmd_template</span> <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">full_status_cmd_template</span><span class="sh">"</span><span class="p">,</span>
                                            <span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span><span class="p">)</span>
        <span class="n">max_wait_s</span> <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">max_wait_s</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
            <span class="n">max_wait_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">)</span>

        <span class="c1"># 1) 제출
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>

        <span class="c1"># 2) 전역 캐시/백엔드
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">full_cache</span> <span class="o">=</span> <span class="nc">FullListSharedCache</span><span class="p">(</span>
            <span class="n">cache_file</span><span class="p">,</span>
            <span class="n">full_ttl_s</span><span class="o">=</span><span class="n">full_ttl_s</span><span class="p">,</span>
            <span class="n">min_refresh_gap_s</span><span class="o">=</span><span class="n">min_refresh_gap_s</span><span class="p">,</span>
            <span class="n">force_refresh_on_miss</span><span class="o">=</span><span class="n">force_refresh_on_miss</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBjobsFullBackend</span><span class="p">(</span><span class="n">full_status_cmd_template</span><span class="o">=</span><span class="n">full_status_cmd_template</span><span class="p">)</span>

        <span class="c1"># 2-1) 코너 케이스 완화: 방금 제출한 잡을 캐시에 시드
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">full_cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>

        <span class="c1"># 3) 완료까지 대기
</span>        <span class="n">final_statuses</span><span class="p">,</span> <span class="n">waited_sec</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">wait_until_done</span><span class="p">(</span>
            <span class="n">job_ids</span><span class="p">,</span> <span class="n">poll_interval_s</span><span class="p">,</span> <span class="n">full_cache</span><span class="p">,</span> <span class="n">backend</span><span class="p">,</span> <span class="n">max_wait_s</span><span class="o">=</span><span class="n">max_wait_s</span>
        <span class="p">)</span>

        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

        <span class="n">failed_submissions</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span>
            <span class="k">if</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="c1"># 4) 결과 파일 저장
</span>        <span class="n">session_tag</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">_</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">results_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">runs</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">results_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">results_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">result_</span><span class="si">{</span><span class="n">session_tag</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">result_payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">completed_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">completed_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">duration_sec</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="n">waited_sec</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_ids</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">final_status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">all_done</span><span class="sh">"</span><span class="p">:</span> <span class="n">all_done</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">failed_submissions</span><span class="sh">"</span><span class="p">:</span> <span class="n">failed_submissions</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cwd</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">options</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">:</span> <span class="n">batch_size</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">poll_interval_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">full_ttl_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">full_ttl_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">min_refresh_gap_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">min_refresh_gap_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">force_refresh_on_miss</span><span class="sh">"</span><span class="p">:</span> <span class="n">force_refresh_on_miss</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">full_status_cmd_template</span><span class="sh">"</span><span class="p">:</span> <span class="n">full_status_cmd_template</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">max_wait_s</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">results_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">results_path</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">results_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">result_payload</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="n">job_ids_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="n">results_json_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result_payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">job_ids_str</span><span class="p">,</span> <span class="n">results_json_str</span><span class="p">)</span>

<span class="c1"># ComfyUI 노드 등록
</span><span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFSubmitAndWait</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Submit &amp; Wait</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="사용-방법옵션-예시">사용 방법/옵션 예시</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vbnet

# LSF: batch_size=4 poll_interval_s=10 full_ttl_s=15 min_refresh_gap_s=5 force_refresh_on_miss=true
# LSF: full_status_cmd_template="bjobs -a -noheader -o \"jobid stat\""
bsub -q short -J test1 sleep 5
bsub -q short -J test2 sleep 8
bsub -q short -J test3 sleep 2
</code></pre></div></div>

<ul>
  <li>
    <p><strong>full_ttl_s</strong> : 전체 스냅샷의 TTL.</p>
  </li>
  <li>
    <p><strong>min_refresh_gap_s</strong> : <code class="language-plaintext highlighter-rouge">-a</code> 재호출 최소 간격(모든 노드 공통).</p>
  </li>
  <li>
    <p><strong>force_refresh_on_miss</strong> : 요청 Job이 캐시에 없을 때 TTL 관계없이 조기 갱신 시도(단 최소 간격은 지킴).</p>
  </li>
  <li>
    <p><strong>full_status_cmd_template</strong> : 다른 시스템/형식으로 교체 가능(예: 커스텀 스크립트).</p>
  </li>
</ul>

<hr />

<h2 id="코너-케이스가-해결되는-흐름요약">코너 케이스가 해결되는 흐름(요약)</h2>

<ol>
  <li>
    <p>Node1·Node2가 각각 잡 제출 → <strong>각자 제출 직후 캐시에 SUBMITTED로 시드</strong>.</p>
  </li>
  <li>
    <p>폴링 시, <strong>요청한 JobID가 캐시에 이미 존재</strong> → <code class="language-plaintext highlighter-rouge">SUBMITTED</code>라도 <strong>신선</strong> 으로 간주되어 불필요한 조기 <code class="language-plaintext highlighter-rouge">-a</code> 호출 방지.</p>
  </li>
  <li>
    <p>TTL 만료 또는 miss+최소 간격 충족 시, <strong>한 노드만</strong> <code class="language-plaintext highlighter-rouge">-a</code> 실행(락) → 전체 스냅샷 업데이트.</p>
  </li>
  <li>
    <p>모든 노드는 <strong>같은 캐시 파일</strong> 을 보며 효율적으로 상태 동기화.</p>
  </li>
</ol>

<hr />

<p>원하시면:</p>

<ul>
  <li>
    <p><strong>지수 백오프/폴링 주기 자동 튜닝</strong> ,</p>
  </li>
  <li>
    <p><strong>추가 상태 매핑(예: ZOMBI/PSUSP 등)</strong> ,</p>
  </li>
  <li>
    <p><strong>SLURM 등 다른 스케줄러 템플릿</strong> 도 바로 붙여드릴게요.</p>
  </li>
</ul>

<p class="chat--user">

질문 1. 파일 read access를 계속하는거야? 그렇다면 대신에 singleton으로 된 cache 클래스에 저장된 정보를 사용하는 건 어때? 질문 2. job id | 커맨드 | job 상태 | 를 노드에 계속 업데이트하며 보여줄 순 없나? 좀 고급 기능 같기는한데 되면 참 좋을듯

</p>

<p>좋은 질문! 핵심만 “실무적으로” 정리하고, 바로 쓸 수 있는 코드 조각(추가/패치용)도 드릴게요.</p>

<hr />

<h1 id="q1-파일-read-access를-계속하나요--대신-프로세스-내-싱글톤-캐시-쓰면-어때요">Q1. “파일 read access를 계속하나요? → 대신 프로세스 내 싱글톤 캐시 쓰면 어때요?”</h1>

<h2 id="결론-step-by-step">결론 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>맞아요.</strong> 전역 공유를 위해 파일 캐시를 쓰면 여러 노드에서 읽기/쓰기 경쟁이 생깁니다.</p>
  </li>
  <li>
    <p><strong>해법은 2-계층 캐시</strong> :</p>

    <ul>
      <li>
        <p><strong>프로세스 내 싱글톤 메모리 스냅샷</strong>(초저지연·락 포함)</p>
      </li>
      <li>
        <p><strong>프로세스 간 공유 파일 캐시</strong>(TTL+락)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>조회 흐름:</p>

    <ul>
      <li>
        <p><strong>메모리 스냅샷이 신선(TTL 이내)</strong> → 파일 읽기 없이 <strong>즉시 반환</strong>.</p>
      </li>
      <li>
        <p>신선하지 않으면 <strong>파일을 1회 읽어 메모리 갱신</strong>.</p>
      </li>
      <li>
        <p>TTL 만료·MISS·최소 간격 충족 시 <strong>한 프로세스만</strong> <code class="language-plaintext highlighter-rouge">bjobs -a</code> 수행해 파일/메모리 동시 갱신.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>제출 직후 <strong>SUBMITTED 시드</strong> 는 <strong>메모리와 파일 모두</strong> 에 반영 → Node2 코너 케이스(방금 제출한 잡이 캐시에 아직 없음) 해소.</p>
  </li>
</ol>

<h3 id="적용-코드-기존-fulllistsharedcache-위에-얹는-싱글톤-계층">적용 코드 (기존 <code class="language-plaintext highlighter-rouge">FullListSharedCache</code> 위에 얹는 싱글톤 계층)</h3>

<p>아래 블록만 <strong>추가/치환</strong> 하세요. (나머지 로직은 그대로 동작)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># --- 싱글톤 메모리 스냅샷 계층 ---
</span><span class="k">class</span> <span class="nc">_MemSnap</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="p">{}</span>                  <span class="c1"># {job_id: {"status": str, "ts": float}, ...}
</span>        <span class="n">self</span><span class="p">.</span><span class="n">last_full_refresh_ts</span> <span class="o">=</span> <span class="mf">0.0</span> <span class="c1"># float epoch
</span>        <span class="n">self</span><span class="p">.</span><span class="n">lock</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">FullListSharedCache</span><span class="p">:</span>
    <span class="n">_mem</span> <span class="o">=</span> <span class="nf">_MemSnap</span><span class="p">()</span>  <span class="c1"># 프로세스 단일 인스턴스
</span>
    <span class="c1"># ... (기존 __init__, _lock_fd 등은 그대로)
</span>
    <span class="k">def</span> <span class="nf">_mem_is_fresh</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">now</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">ttl</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">last_full_refresh_ts</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_mem_update_from_dict</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">last_full_refresh_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">_persist_and_update_mem</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_write_cache</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="c1"># 파일 쓰기와 동시에 메모리 스냅샷 최신화
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">_mem_update_from_dict</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">seed_submitted</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">meta</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">제출 직후 SUBMITTED 상태를 메모리/파일 모두에 시드.</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 메모리 업데이트
</span>        <span class="c1"># (동시에 들어와도 무해; 최신 ts로 덮어써도 OK)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
        <span class="c1"># 파일 업데이트
</span>        <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
            <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
            <span class="c1"># (선택) 커맨드 메타 저장
</span>            <span class="k">if</span> <span class="n">meta</span><span class="p">:</span>
                <span class="n">jm</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">meta</span><span class="p">:</span>
                        <span class="n">jm</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span>
                <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jm</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_persist_and_update_mem</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">maybe_refresh_full</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">,</span> <span class="n">reason</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 최소 간격·락 처리 동일
</span>        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">lock_path</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.refresh.lock</span><span class="sh">"</span>
        <span class="n">lock_fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">lock_path</span><span class="p">,</span> <span class="n">nonblock</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">lock_fh</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">last_ts2</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">snapshot</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">query_full</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">snapshot</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">now2</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">ts</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">ts</span><span class="p">}</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="n">meta</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">reason</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_persist_and_update_mem</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>  <span class="c1"># 파일과 메모리 동시 갱신
</span>            <span class="k">finally</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">lock_fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 1) 메모리 스냅샷 우선
</span>        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="n">mem_fresh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mem_is_fresh</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">mem_fresh</span><span class="p">:</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># 파일 1회 읽어 메모리 최신화
</span>                <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_mem_update_from_dict</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span>

        <span class="k">def</span> <span class="nf">_fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ent</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))</span> <span class="o">&lt;=</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">)</span>

        <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mem_is_fresh</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">):</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">miss</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span> <span class="k">if</span> <span class="ow">not</span> <span class="nf">_fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">)]</span>
        <span class="k">if</span> <span class="n">miss</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="n">force_refresh_on_miss</span><span class="p">:</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">if</span> <span class="n">need_refresh</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">maybe_refresh_full</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">reason</span><span class="o">=</span><span class="sh">"</span><span class="s">ttl_or_miss</span><span class="sh">"</span><span class="p">)</span>
            <span class="c1"># 리프레시 후 메모리에서 재조회
</span>            <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span>

        <span class="k">return</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">(</span><span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>효과: <strong>동일 프로세스(=동일 ComfyUI 인스턴스)</strong> 에서 여러 노드가 돌아도, 대부분 <strong>파일 I/O 없이 메모리만</strong> 보게 됩니다. 그래도 다른 프로세스/머신과 공유가 필요하면 파일 스냅샷이 “사실상의 소스 오브 트루스”가 되고, 한 프로세스만 <code class="language-plaintext highlighter-rouge">-a</code>를 실행해 <strong>폭주 방지</strong> 가 유지됩니다.</p>
</blockquote>

<p>또한 제출 직후:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># submit 이후
</span><span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="nf">iso_now</span><span class="p">()}</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])}</span>
<span class="n">full_cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">jid_to_cmd</span><span class="p">)</span>  <span class="c1"># 메모리/파일 모두 시드 + 커맨드 메타 저장
</span></code></pre></div></div>

<hr />

<h1 id="q2-job-id--커맨드--상태를-노드에-계속-업데이트해서-보여줄-수-있나요">Q2. “job id | 커맨드 | 상태”를 노드에 <strong>계속</strong> 업데이트해서 보여줄 수 있나요?</h1>

<h2 id="결론-step-by-step-1">결론 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>ComfyUI 코어는 기본적으로</strong> 임의 노드가 실행 중에 <strong>UI를 실시간으로 갱신</strong> 하는 API를 제공하지 않습니다(최종 출력만 표시).</p>
  </li>
  <li>
    <p>대신 현실적인 두 가지 경로가 있습니다.</p>
  </li>
</ol>

<h3 id="a안프론트-수정-없이-노드만으로">A안(프론트 수정 없이, 노드만으로)</h3>

<ul>
  <li>
    <p><strong>보조 뷰어 노드</strong> 를 하나 더 만들어, 공유 캐시(<code class="language-plaintext highlighter-rouge">status_full_cache.json</code>) + <code class="language-plaintext highlighter-rouge">jobs_meta</code>에서 <strong>표를 생성(STRING 또는 이미지)</strong> 해서 보여줍니다.</p>
  </li>
  <li>
    <p>최신 상태를 보고 싶을 때 뷰어 노드를 <strong>다시 실행(Queue)</strong> 하면 표가 갱신됩니다.</p>
  </li>
  <li>
    <p>자동 리프레시는 <code class="language-plaintext highlighter-rouge">Loop/Repeat</code>류 확장 노드를 곁들이면 됩니다.</p>
  </li>
</ul>

<blockquote>
  <p>장점: ComfyUI 변경 없이 즉시 사용.<br />
 단점: “지속 스트리밍”은 아니고 <strong>수동/주기 재실행</strong>.</p>
</blockquote>

<h3 id="b안진짜-실시간-패널">B안(진짜 실시간 패널)</h3>

<ul>
  <li>
    <p>커스텀 노드 파일 안에 <strong>가벼운 HTTP GET 엔드포인트</strong> 를 추가(ComfyUI 서버에 라우트 등록) → 프론트에 작은 스크립트(또는 별도 플러그인)로 <strong>주기 폴링</strong> 하여 표를 갱신합니다.</p>
  </li>
  <li>
    <p>사실상 “실시간 대시보드”를 ComfyUI 안쪽 패널에 넣을 수 있습니다.</p>
  </li>
</ul>

<blockquote>
  <p>장점: 진짜 라이브.<br />
 단점: 프론트에 소폭 추가 작업 필요.</p>
</blockquote>

<hr />

<h2 id="바로-쓸-수-있는-뷰어-노드-a안">바로 쓸 수 있는 “뷰어 노드” (A안)</h2>

<p>아래 클래스를 같은 파일에 <strong>추가</strong> 하세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ====== 뷰어 노드: 상태 테이블 출력 ======
</span><span class="k">class</span> <span class="nc">LSFStatusBoard</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력:
      - job_ids (STRING): </span><span class="sh">"</span><span class="s">123,124,125</span><span class="sh">"</span><span class="s"> (비워두면 캐시에 있는 최근 N개를 보여줌)
      - top_k (INT): job_ids 비었을 때 최근 N개
      - width_limit (INT): 커맨드 컬럼 자르기 길이
    출력:
      - table_text (STRING): 모노스페이스 표 텍스트
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">table_text</span><span class="sh">"</span><span class="p">,)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">optional</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">top_k</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">INT</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="mi">500</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">width_limit</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">INT</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200</span><span class="p">}),</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">def</span> <span class="nf">_read_cache</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>

    <span class="k">def</span> <span class="nf">_short</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">limit</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="nf">else </span><span class="p">(</span><span class="n">s</span><span class="p">[:</span><span class="n">limit</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_fmt_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">rows</span><span class="p">):</span>
        <span class="c1"># 고정 폭 표 생성
</span>        <span class="n">jid_w</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nf">max</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">])</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="mi">6</span><span class="p">))</span>
        <span class="n">st_w</span>  <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">max</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">])</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="mi">5</span><span class="p">))</span>
        <span class="n">hdr</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="sh">'</span><span class="s">JOBID</span><span class="sh">'</span><span class="si">:</span><span class="o">&lt;</span><span class="si">{</span><span class="n">jid_w</span><span class="si">}}</span><span class="s"> | </span><span class="si">{</span><span class="sh">'</span><span class="s">STATUS</span><span class="sh">'</span><span class="si">:</span><span class="o">&lt;</span><span class="si">{</span><span class="n">st_w</span><span class="si">}}</span><span class="s"> | CMD</span><span class="sh">"</span>
        <span class="n">sep</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="o">*</span><span class="nf">len</span><span class="p">(</span><span class="n">hdr</span><span class="p">)</span>
        <span class="n">body</span> <span class="o">=</span> <span class="p">[</span><span class="n">hdr</span><span class="p">,</span> <span class="n">sep</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
            <span class="n">body</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">r</span><span class="p">[</span><span class="sh">'</span><span class="s">job_id</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="si">{</span><span class="n">jid_w</span><span class="si">}}</span><span class="s"> | </span><span class="si">{</span><span class="n">r</span><span class="p">[</span><span class="sh">'</span><span class="s">status</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="si">{</span><span class="n">st_w</span><span class="si">}}</span><span class="s"> | </span><span class="si">{</span><span class="n">r</span><span class="p">[</span><span class="sh">'</span><span class="s">cmd</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">top_k</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">80</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
        <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="n">meta</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="k">if</span> <span class="n">job_ids</span><span class="p">.</span><span class="nf">strip</span><span class="p">():</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 최근 top_k (ts 기준 정렬)
</span>            <span class="n">jids</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">jobs</span><span class="p">.</span><span class="nf">keys</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">j</span><span class="p">:</span> <span class="n">jobs</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)[:</span><span class="n">top_k</span><span class="p">]</span>

        <span class="n">rows</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">jids</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
            <span class="n">cmd</span> <span class="o">=</span> <span class="n">meta</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
            <span class="n">rows</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_short</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">width_limit</span><span class="p">),</span>
            <span class="p">})</span>
        <span class="n">table</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fmt_table</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">table</span><span class="p">,)</span>

<span class="c1"># 등록
</span><span class="n">NODE_CLASS_MAPPINGS</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">"</span><span class="s">LSFStatusBoard</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFStatusBoard</span><span class="p">})</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">"</span><span class="s">LSFStatusBoard</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Status Board</span><span class="sh">"</span><span class="p">})</span>
</code></pre></div></div>

<h3 id="제출-노드에서-커맨드-메타-저장한-줄-추가">제출 노드에서 커맨드 메타 저장(한 줄 추가)</h3>

<p>앞서 Q1 코드처럼 제출 직후 커맨드도 함께 시드합니다:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="nf">iso_now</span><span class="p">()}</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])}</span>
<span class="n">full_cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">jid_to_cmd</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>이제 뷰어 노드에서 <strong>JOBID | STATUS | CMD</strong> 를 깔끔히 볼 수 있습니다.<br />
 “계속” 갱신하려면 뷰어 노드를 <strong>주기적으로 재실행</strong>(직접 클릭 또는 반복 실행 노드 사용)하세요.</p>
</blockquote>

<hr />

<h2 id="진짜-실시간-패널-b안-선택">진짜 실시간 패널 (B안, 선택)</h2>

<ul>
  <li>
    <p>가능: 서버 라우트를 하나 노드 파일에 등록해 JSON을 내보내고, 프론트(간단 JS)에서 1~3초 간격 폴링.</p>
  </li>
  <li>
    <p>필요 코드(개요): <code class="language-plaintext highlighter-rouge">server.PromptServer</code> 이용해 <code class="language-plaintext highlighter-rouge">GET /lsf/status?job_ids=...</code> 엔드포인트 추가 → 위 <code class="language-plaintext highlighter-rouge">LSFStatusBoard</code>의 내부 로직을 재사용해 JSON 응답.</p>
  </li>
  <li>
    <p>원하시면 이 라우트 + 최소 HTML/JS 패널 코드를 바로 붙여드릴게요.</p>
  </li>
</ul>

<hr />

<h2 id="요약">요약</h2>

<ul>
  <li>
    <p><strong>Q1</strong> : 파일 남용 없이 <strong>“메모리 싱글톤 + 파일 스냅샷”</strong> 2-계층 캐시로 해결. 제출 직후 <strong>SUBMITTED 시드</strong> 로 Node2 코너 케이스도 해결.</p>
  </li>
  <li>
    <p><strong>Q2</strong> : 코어 UI는 중간 갱신이 어려우므로</p>

    <ul>
      <li>
        <p>바로 쓰려면 <strong>뷰어 노드(A안)</strong> 로 표를 재실행 갱신,</p>
      </li>
      <li>
        <p>진짜 라이브는 <strong>간단 라우트(B안)</strong> + 소형 패널.</p>
      </li>
    </ul>
  </li>
</ul>

<p>더 진한 기능(상태 아이콘/색상, 정렬/필터, EXIT 원인 추적, bjobs -a 추가 컬럼 파싱 등) 원하시면 이어서 확장해 드릴게요.</p>

<p class="chat--user">

impact node에서 아래 함수(js)와 PromptServer.instance.send_sync("impact-node-feedback", {"node_id": …, ”widget_name": …}) 이런 함수를 이용해서 런타임에서 위젯 업데이트를 하는 것 같은데 이런 참고해서 markdown table 형식으로 Jod ID, Status, Command 를 String widget에 계속 업데이트 해보자. function nodeFeedbackHandler(event) { let nodes = app.graph._nodes_by_id; let node = nodes[event.detail.node_id]; if(node) { const w = node.widgets.find((w) =&gt; event.detail.widget_name === w.name); if(w) { w.value = event.detail.value; } } } api.addEventListener("impact-node-feedback", nodeFeedbackHandler);

</p>

<p>좋아—“impact-node-feedback” 패턴을 그대로 활용해서, <strong>런타임에 String 위젯을 계속 갱신</strong>(마크다운 테이블 형태)하도록 노드를 확장해볼게. 아래는 <strong>step-by-step</strong> 로 정리한 구현 가이드 + 바로 붙여넣어 쓸 <strong>패치 코드</strong> 야.</p>

<hr />

<h1 id="어떻게-작동하나-step-by-step">어떻게 작동하나 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>프론트엔드 리스너 등록</strong><br />
네가 준 핸들러 그대로 씀. <code class="language-plaintext highlighter-rouge">impact-node-feedback</code> 커스텀 메시지를 받으면 해당 노드의 특정 위젯 값을 갱신. 이 방식은 공식 문서의 <code class="language-plaintext highlighter-rouge">PromptServer.instance.send_sync()</code> 사용자 정의 메시지 가이드와 동일한 흐름이야. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI</a></p>
  </li>
  <li>
    <p><strong>노드에 “표시 전용” String 위젯 추가</strong><br />
예: <code class="language-plaintext highlighter-rouge">status_md</code> 라는 이름의 멀티라인 STRING 위젯. 노드 실행 중 서버에서 이 위젯의 값을 계속 바꿔치기 함(마크다운 표 텍스트).</p>
  </li>
  <li>
    <p><strong>node_id 확보(필수)</strong><br />
ComfyUI는 <code class="language-plaintext highlighter-rouge">INPUT_TYPES["hidden"]</code>에 <code class="language-plaintext highlighter-rouge">"UNIQUE_ID"</code>를 넣으면 런타임에서 <strong>노드 id</strong> 를 파라미터로 받을 수 있음. 이걸 payload에 실어 보내면, 프론트에서 정확한 노드의 해당 위젯만 업데이트 가능. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI+2</a></p>
  </li>
  <li>
    <p><strong>서버에서 주기적으로 send_sync 발사</strong><br />
폴링 루프 매 턴마다</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arduino
     
PromptServer.instance.send_sync(
  "impact-node-feedback",
  {"node_id": node_id, "widget_name": "status_md", "value": table_md}
)
</code></pre></div>    </div>
  </li>
</ol>

<p>로 위젯 값을 푸시. (다수 예제들이 같은 패턴으로 상태를 실시간 알림) <a href="https://huggingface.co/spaces/Freak-ppa/ioatol/blob/b162d43c5cd550b037fb83fa04cc6301339f36f4/ComfyUI/custom_nodes/cg-use-everywhere/use_everywhere.py?utm_source=chatgpt.com">Hugging Face+2</a></p>

<hr />

<h1 id="0-프론트엔드웹-코드--리스너-등록">0) 프론트엔드(웹) 코드 — 리스너 등록</h1>

<p><code class="language-plaintext highlighter-rouge">ComfyUI/web/extensions/impact_node_feedback.js</code> (파일명은 임의)로 저장:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>js

function nodeFeedbackHandler(event) {
  let nodes = app.graph._nodes_by_id;
  let node = nodes[event.detail.node_id];
  if (node) {
    const w = node.widgets.find((w) =&gt; event.detail.widget_name === w.name);
    if (w) {
      w.value = event.detail.value;
      // UI 즉시 갱신
      if (w.callback) w.callback(w.value);
      node.setDirtyCanvas(true, true);
    }
  }
}
api.addEventListener("impact-node-feedback", nodeFeedbackHandler);
</code></pre></div></div>

<blockquote>
  <p>이건 ComfyUI의 커스텀 메시지 이벤트 처리 패턴과 1:1로 맞음. 서버에서 <code class="language-plaintext highlighter-rouge">send_sync</code>로 <code class="language-plaintext highlighter-rouge">"impact-node-feedback"</code>를 보낼 거야. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI</a></p>
</blockquote>

<hr />

<h1 id="1-파이썬-노드-패치--위젯node_id라이브업데이트-추가">1) 파이썬 노드 패치 — 위젯·node_id·라이브업데이트 추가</h1>

<p>아래 <strong>추가/수정 블록만</strong> 기존 노드 파일에 반영하면 돼. (이전 답변에서 만든 LSFSubmitAndWait 기준)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상단 import에 추가
</span><span class="kn">from</span> <span class="n">server</span> <span class="kn">import</span> <span class="n">PromptServer</span>  <span class="c1"># send_sync를 위해
</span>
<span class="c1"># ----- 유틸: 마크다운 테이블 생성 -----
</span><span class="k">def</span> <span class="nf">_short</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="nf">else </span><span class="p">(</span><span class="n">s</span><span class="p">[:</span><span class="n">limit</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">job_rows</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">],</span> <span class="n">width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">80</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    job_rows: [{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">123</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">RUN</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">bsub ...</span><span class="sh">"</span><span class="s">}, ...]
    </span><span class="sh">"""</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">|------:|:------:|---------|</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">job_rows</span><span class="p">:</span>
        <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">st</span>  <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_short</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span> <span class="n">width_limit</span><span class="p">)</span>
        <span class="c1"># 파이프 이스케이프는 단순히 백틱 감싸기로 회피
</span>        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">| `</span><span class="si">{</span><span class="n">jid</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">st</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="s">` |</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="c1"># ----- LSFSubmitAndWait 클래스 변경 -----
</span><span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">optional</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># 표시 전용 위젯(라이브 상태 보드)
</span>                <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span>
                    <span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="se">\n</span><span class="s">|------:|:------:|---------|</span><span class="se">\n</span><span class="s">(실행 중 라이브로 갱신됩니다)</span><span class="sh">"</span><span class="p">}),</span>
                <span class="c1"># 줄 길이 제한(명령어 과도하게 길 때)
</span>                <span class="sh">"</span><span class="s">cmd_width_limit</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">INT</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200</span><span class="p">}),</span>
                <span class="c1"># 필요 시 끄기
</span>                <span class="sh">"</span><span class="s">live_update</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">BOOL</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="c1"># node_id를 받기 위한 hidden 입력 (공식 문서 패턴)
</span>            <span class="sh">"</span><span class="s">hidden</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span> <span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNIQUE_ID</span><span class="sh">"</span> <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                  <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                  <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                  <span class="n">status_md</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span>
                  <span class="n">cmd_width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>
                  <span class="n">live_update</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                  <span class="n">node_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># ... (기존 run 코드의 "옵션 파싱" 직후에 이어서) ...
</span>
        <span class="c1"># 1) 제출
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>

        <span class="c1"># 제출한 커맨드 메타 맵 (job_id -&gt; cmd)
</span>        <span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                <span class="n">jid_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="c1"># 2) 전역 캐시/백엔드
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">full_cache</span> <span class="o">=</span> <span class="nc">FullListSharedCache</span><span class="p">(</span>
            <span class="n">cache_file</span><span class="p">,</span>
            <span class="n">full_ttl_s</span><span class="o">=</span><span class="n">full_ttl_s</span><span class="p">,</span>
            <span class="n">min_refresh_gap_s</span><span class="o">=</span><span class="n">min_refresh_gap_s</span><span class="p">,</span>
            <span class="n">force_refresh_on_miss</span><span class="o">=</span><span class="n">force_refresh_on_miss</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBjobsFullBackend</span><span class="p">(</span><span class="n">full_status_cmd_template</span><span class="o">=</span><span class="n">full_status_cmd_template</span><span class="p">)</span>

        <span class="c1"># 2-1) 제출 직후 캐시 시드(커맨드 메타 포함)
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="c1"># seed_submitted가 meta를 파일/메모리 모두에 저장하도록 앞서 구현해둠
</span>            <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
            <span class="n">full_cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">meta</span><span class="p">)</span>

        <span class="c1"># (신규) 초기 UI 업데이트 한번 수행
</span>        <span class="k">if</span> <span class="n">live_update</span> <span class="ow">and</span> <span class="n">node_id</span> <span class="ow">and</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
            <span class="n">table_md</span> <span class="o">=</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">width_limit</span><span class="o">=</span><span class="n">cmd_width_limit</span><span class="p">)</span>
            <span class="n">PromptServer</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="nf">send_sync</span><span class="p">(</span><span class="sh">"</span><span class="s">impact-node-feedback</span><span class="sh">"</span><span class="p">,</span>
                                            <span class="p">{</span><span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">node_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">widget_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">table_md</span><span class="p">})</span>

        <span class="c1"># 3) 완료까지 대기 + 주기적 UI 업데이트
</span>        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">final_statuses</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">waited_sec</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">full_cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
            <span class="n">final_statuses</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>

            <span class="c1"># (신규) 라이브 업데이트
</span>            <span class="k">if</span> <span class="n">live_update</span> <span class="ow">and</span> <span class="n">node_id</span> <span class="ow">and</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span>
                         <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">N/A</span><span class="sh">"</span><span class="p">,</span>
                         <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
                <span class="n">table_md</span> <span class="o">=</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">width_limit</span><span class="o">=</span><span class="n">cmd_width_limit</span><span class="p">)</span>
                <span class="n">PromptServer</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="nf">send_sync</span><span class="p">(</span><span class="sh">"</span><span class="s">impact-node-feedback</span><span class="sh">"</span><span class="p">,</span>
                                                <span class="p">{</span><span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">node_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">widget_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">table_md</span><span class="p">})</span>

            <span class="k">if</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
                <span class="k">break</span>
            <span class="k">if</span> <span class="n">max_wait_s</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_wait_s</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">poll_interval_s</span><span class="p">)))</span>

        <span class="n">waited_sec</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>
        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

        <span class="c1"># (나머지 결과 저장/반환 로직은 기존 그대로)
</span>        <span class="c1"># ...
</span></code></pre></div></div>

<blockquote>
  <p>포인트</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">hidden</code>에 <code class="language-plaintext highlighter-rouge">"UNIQUE_ID"</code> 추가 → <code class="language-plaintext highlighter-rouge">run(..., node_id=...)</code>로 받을 수 있음. 서버에서 이 값을 payload에 담아 보냄. 프론트는 <code class="language-plaintext highlighter-rouge">node_id</code>로 해당 노드의 <code class="language-plaintext highlighter-rouge">status_md</code> 위젯만 갱신. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI</a></p>
    </li>
    <li>
      <p>메시지 발사는 <code class="language-plaintext highlighter-rouge">PromptServer.instance.send_sync(&lt;event&gt;, &lt;payload&gt;)</code> 형식. (여러 커스텀 노드들이 이 패턴으로 실시간 상태를 보내는 사례 다수) <a href="https://huggingface.co/spaces/Freak-ppa/ioatol/blob/b162d43c5cd550b037fb83fa04cc6301339f36f4/ComfyUI/custom_nodes/cg-use-everywhere/use_everywhere.py?utm_source=chatgpt.com">Hugging Face+1</a></p>
    </li>
  </ul>

</blockquote>

<hr />

<h2 id="결과-화면-예시-string-위젯-내용">결과 화면 예시 (String 위젯 내용)</h2>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span> <span class="no">JOB</span> <span class="no">ID</span> <span class="o">|</span> <span class="no">STATUS</span> <span class="o">|</span> <span class="no">COMMAND</span> <span class="o">|</span>
<span class="o">|------</span><span class="ss">:|</span><span class="p">:</span><span class="o">------</span><span class="ss">:|</span><span class="o">---------|</span>
<span class="o">|</span> <span class="sb">`124578`</span> <span class="o">|</span> <span class="sb">`RUN`</span> <span class="o">|</span> <span class="sb">`bsub -q short -J test1 sleep 5`</span> <span class="o">|</span>
<span class="o">|</span> <span class="sb">`124579`</span> <span class="o">|</span> <span class="sb">`PEND`</span> <span class="o">|</span> <span class="sb">`bsub -q short -J test2 sleep 8`</span> <span class="o">|</span>
<span class="o">|</span> <span class="sb">`124580`</span> <span class="o">|</span> <span class="sb">`DONE`</span> <span class="o">|</span> <span class="sb">`bsub -q short -J test3 sleep 2`</span> <span class="o">|</span>
</code></pre></div></div>

<ul>
  <li>마크다운 테이블을 “렌더링”하지는 않지만, <strong>가독성 높은 텍스트 표</strong> 로 잘 보여줘. (String 위젯은 Markdown 해석을 안 하므로, 표 텍스트 형태로 보는 개념)</li>
</ul>

<hr />

<h2 id="추가-팁">추가 팁</h2>

<ul>
  <li>
    <p><strong>업데이트 빈도(스팸 방지)</strong><br />
<code class="language-plaintext highlighter-rouge">poll_interval_s</code>가 너무 작으면 UI도 그만큼 자주 갱신됨. 필요하면 “마지막 송신 시각”을 저장해 <strong>1~2초 쓰로틀</strong> 을 추가해도 좋음.</p>
  </li>
  <li>
    <p><strong>여러 클라이언트 탭 동시 접속</strong><br />
특정 탭만 갱신하고 싶다면 <code class="language-plaintext highlighter-rouge">send_sync(..., sid=PromptServer.instance.client_id)</code>로 <strong>현재 클라이언트에만</strong> 보내는 패턴도 있어. (여러 예제 노드가 이 방식 사용) <a href="https://gitee.com/failurejack/ComfyUI/blob/master/execution.py?utm_source=chatgpt.com">Gitee</a></p>
  </li>
  <li>
    <p><strong>명령어 길이</strong><br />
<code class="language-plaintext highlighter-rouge">cmd_width_limit</code>로 긴 커맨드를 줄여 보여줌. 필요하면 툴팁/별도 대시보드로 확장 가능.</p>
  </li>
</ul>

<hr />

<h2 id="요약-1">요약</h2>

<ul>
  <li>
    <p><strong>Q1</strong> : 파일 캐시 + 프로세스 내 싱글톤 메모리 캐시(이미 반영)로 <strong>bjobs -a 과다 호출 방지</strong> 및 <strong>동시 노드 안전</strong>.</p>
  </li>
  <li>
    <p><strong>Q2</strong> : <code class="language-plaintext highlighter-rouge">send_sync("impact-node-feedback", {...})</code> + <code class="language-plaintext highlighter-rouge">hidden UNIQUE_ID</code> + 표시용 <code class="language-plaintext highlighter-rouge">status_md</code> 위젯으로, <strong>런타임 라이브 상태판</strong> 구현 완료. (공식 문서의 커스텀 메시지/노드 id 전달 패턴 준수) <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI</a></p>
  </li>
</ul>

<p>원하면 <strong>진짜 Markdown 렌더</strong>(HTML 패널)나 <strong>컬러 뱃지/아이콘</strong> , <strong>EXIT 원인/에러 로그</strong> 컬럼도 붙여줄 수 있어.</p>]]></content><author><name>hvppyarchive</name></author><category term="comfyui" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Python 비동기 서브프로세스 실행</title><link href="https://hvppyarchive.github.io/python/python-async-subprocess/" rel="alternate" type="text/html" title="Python 비동기 서브프로세스 실행" /><published>2025-10-10T14:05:19+09:00</published><updated>2025-10-10T14:05:19+09:00</updated><id>https://hvppyarchive.github.io/python/python-async-subprocess</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-async-subprocess/"><![CDATA[<p class="chat--user">

Python에서 subprocess를 async task로 실행할 수 있어?

</p>

<p>네—가능합니다. “비동기적으로 서브프로세스 실행”은 보통 두 가지 방식이 있어요.</p>

<h2 id="1-asyncio가-제공하는-진짜-비동기-서브프로세스-api-쓰기">1) <code class="language-plaintext highlighter-rouge">asyncio</code>가 제공하는 <strong>진짜 비동기 서브프로세스</strong> API 쓰기</h2>

<p>핵심은 <code class="language-plaintext highlighter-rouge">asyncio.create_subprocess_exec()</code>(또는 <code class="language-plaintext highlighter-rouge">create_subprocess_shell()</code>)입니다. 반환값인 <code class="language-plaintext highlighter-rouge">Process</code>에는 <code class="language-plaintext highlighter-rouge">wait()</code>, <code class="language-plaintext highlighter-rouge">communicate()</code> 같은 <strong><code class="language-plaintext highlighter-rouge">await</code> 가능한</strong> 메서드가 있어서 이벤트 루프를 막지 않아요.</p>

<h3 id="a-출력-전체-한-번에-받기">(A) 출력 전체 한 번에 받기</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">import time; [print(i) or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span>
    <span class="p">)</span>
    <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>   <span class="c1"># 둘 다 bytes
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDOUT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">())</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDERR:</span><span class="sh">"</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="nf">decode</span><span class="p">())</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="b-스트리밍-으로-줄-단위-읽기-긴-작업실시간-로그용">(B) <strong>스트리밍</strong> 으로 줄 단위 읽기 (긴 작업/실시간 로그용)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">import time,sys</span><span class="se">\n</span><span class="s">for i in range(5):</span><span class="se">\n</span><span class="s"> print(i); sys.stdout.flush(); time.sleep(0.3)</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">STDOUT</span>
    <span class="p">)</span>

    <span class="k">async</span> <span class="k">for</span> <span class="n">raw</span> <span class="ow">in</span> <span class="n">proc</span><span class="p">.</span><span class="n">stdout</span><span class="p">:</span>  <span class="c1"># bytes 스트림
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">&gt; </span><span class="sh">"</span><span class="p">,</span> <span class="n">raw</span><span class="p">.</span><span class="nf">decode</span><span class="p">().</span><span class="nf">rstrip</span><span class="p">())</span>

    <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<p><strong>포인트</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">stdout=PIPE</code>, <code class="language-plaintext highlighter-rouge">stderr=PIPE/STDOUT</code>로 파이프 연결.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">communicate()</code>는 종료까지 기다리며 전부 모아 반환.</p>
  </li>
  <li>
    <p>실시간이 필요하면 <code class="language-plaintext highlighter-rouge">async for proc.stdout</code>로 읽기.</p>
  </li>
  <li>
    <p>파이썬 하위 프로세스는 <code class="language-plaintext highlighter-rouge">-u</code>(unbuffered)로 버퍼링 지연을 줄이는 게 좋아요.</p>
  </li>
</ul>

<h2 id="2-기존의-블로킹-subprocessrun을-스레드로-돌리기">2) 기존의 <strong>블로킹</strong> <code class="language-plaintext highlighter-rouge">subprocess.run()</code>을 스레드로 돌리기</h2>

<p>레거시 코드나 간단한 호출을 그대로 쓰고 싶다면, 이벤트 루프는 살리고 작업만 스레드로 넘길 수 있어요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">subprocess</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_blocking</span><span class="p">(</span><span class="n">cmd</span><span class="p">):</span>
    <span class="c1"># Python 3.9+: to_thread 권장
</span>    <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">to_thread</span><span class="p">(</span>
        <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">,</span> <span class="n">cmd</span><span class="p">,</span>
        <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">check</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_blocking</span><span class="p">([</span><span class="sh">"</span><span class="s">git</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<p><strong>포인트</strong></p>

<ul>
  <li>
    <p>이 방법은 <em>진짜 비동기 I/O</em> 는 아니고, <strong>스레드 하나를 차지</strong> 해서 블로킹 호출을 우회합니다.</p>
  </li>
  <li>
    <p>입출력을 줄 단위로 실시간 처리하긴 불편하고, “끝나면 결과”가 필요한 경우에 적합.</p>
  </li>
</ul>

<hr />

<h2 id="여러-프로세스를-동시에-돌리기">여러 프로세스를 <strong>동시에</strong> 돌리기</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">print(</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span>
    <span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">procs</span> <span class="o">=</span> <span class="p">[</span><span class="k">await</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
    <span class="n">outs</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">procs</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">_err</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">outs</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="타임아웃취소정리중요">타임아웃/취소/정리(중요)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">safe_run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span><span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>                 <span class="c1"># or proc.terminate()
</span>        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>           <span class="c1"># 좀비 방지
</span>        <span class="k">raise</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="k">raise</span>
</code></pre></div></div>

<h2 id="플랫폼주의사항-한눈에">플랫폼/주의사항 한눈에</h2>

<ul>
  <li>
    <p><strong>Windows</strong> : 파이프가 연결된 서브프로세스는 Python ≥3.8의 기본 이벤트 루프(프로액터)에서 잘 동작합니다. (아주 옛 버전은 <code class="language-plaintext highlighter-rouge">ProactorEventLoop</code> 필요)</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">shell=True</code></strong>는 편하지만 인자 이스케이프/보안 이슈가 있으니 꼭 필요한 경우만 사용하세요.</p>
  </li>
  <li>
    <p><strong>대용량 출력</strong> 을 한꺼번에 <code class="language-plaintext highlighter-rouge">communicate()</code>로 받으면 메모리를 많이 먹을 수 있어요. 이런 경우 (B)처럼 스트리밍이 안전합니다.</p>
  </li>
  <li>
    <p><strong>텍스트 디코딩</strong> : <code class="language-plaintext highlighter-rouge">asyncio.subprocess</code>는 <strong>bytes</strong> 를 줍니다. <code class="language-plaintext highlighter-rouge">.decode()</code> 직접 호출하거나 <code class="language-plaintext highlighter-rouge">codecs.StreamReader</code>로 감싸세요.</p>
  </li>
  <li>
    <p><strong>프로세스 그룹</strong> : 리눅스/맥에서 하위 트리까지 종료하려면 <code class="language-plaintext highlighter-rouge">start_new_session=True</code>로 새 세션 시작 후, 필요 시 <code class="language-plaintext highlighter-rouge">os.killpg()</code> 사용(고급 주제).</p>
  </li>
</ul>

<hr />

<h3 id="요약">요약</h3>

<ul>
  <li>
    <p>“이벤트 루프를 막지 않고” 서브프로세스를 돌리려면: <strong><code class="language-plaintext highlighter-rouge">asyncio.create_subprocess_exec/shell</code></strong>을 쓰세요.</p>
  </li>
  <li>
    <p>기존 블로킹 코드를 그대로 쓰고 싶다면: <strong><code class="language-plaintext highlighter-rouge">asyncio.to_thread(subprocess.run, ...)</code></strong>으로 감싸세요.</p>
  </li>
  <li>
    <p>스트리밍, 병렬 실행, 타임아웃/취소까지 위 예제 패턴이면 대부분의 케이스를 커버합니다.</p>
  </li>
</ul>

<p class="chat--user">

async def main(): proc = await asyncio.create_subprocess_exec( sys.executable, "-u", "-c", "import time; [print(i) or time.sleep(0.3) for i in range(5)]", stdout=asp.PIPE, stderr=asp.PIPE ) out, err = await proc.communicate() # 둘 다 bytes print("RC:", proc.returncode) print("STDOUT:", out.decode()) print("STDERR:", err.decode()) 이 동작을 task로 만들고 싶어.

</p>

<p>가능하죠! 핵심은 “서브프로세스를 돌리는 코루틴”을 하나 만들고, 그걸 <code class="language-plaintext highlighter-rouge">asyncio.create_task()</code>로 스케줄하는 겁니다. 아래를 그대로 붙여 넣어 쓰세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">asyncio.subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="c1"># 1) 서브프로세스를 실행하고 결과를 반환하는 코루틴
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">run_subprocess</span><span class="p">():</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">import time; [print(i) or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span>
    <span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>  <span class="c1"># bytes 튜플
</span>        <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">(),</span> <span class="n">err</span><span class="p">.</span><span class="nf">decode</span><span class="p">()</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 취소 시 깔끔하게 종료(좀비 방지)
</span>        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="k">raise</span>

<span class="c1"># 2) 위 코루틴을 Task로 만들어 동시 실행
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_subprocess</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">my-subprocess-task</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># (선택) 여기서 다른 비동기 작업들을 병행할 수 있음
</span>    <span class="c1"># await do_other_async_work()
</span>
    <span class="c1"># (선택) 타임아웃을 걸고 싶다면:
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">task</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">task</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">raise</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDOUT:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDERR:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="포인트-한걸음씩">포인트 (한걸음씩)</h3>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">run_subprocess()</code>는 <strong>서브프로세스 생명주기</strong> 를 책임지는 코루틴입니다.</p>

    <ul>
      <li>
        <p>정상 완료 시 <code class="language-plaintext highlighter-rouge">(returncode, stdout(str), stderr(str))</code>를 반환.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">CancelledError</code>에서 <code class="language-plaintext highlighter-rouge">kill()</code>+<code class="language-plaintext highlighter-rouge">wait()</code>로 정리(필수).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">main()</code>에서 <code class="language-plaintext highlighter-rouge">asyncio.create_task(...)</code>로 <strong>Task</strong> 를 만들면, 이벤트 루프는 이 작업을 백그라운드로 진행하고, 필요할 때 <code class="language-plaintext highlighter-rouge">await task</code>로 결과를 회수합니다.</p>
  </li>
  <li>
    <p><strong>타임아웃</strong> 은 <code class="language-plaintext highlighter-rouge">asyncio.wait_for(task, timeout=...)</code>로 감싸고, 만료 시 <code class="language-plaintext highlighter-rouge">task.cancel()</code> 후 정리.</p>
  </li>
  <li>
    <p>실시간 로그가 필요하면, <code class="language-plaintext highlighter-rouge">communicate()</code> 대신 <code class="language-plaintext highlighter-rouge">async for line in proc.stdout:</code> 패턴을 <code class="language-plaintext highlighter-rouge">run_subprocess()</code> 안에 넣으면 됩니다(그 경우 문자열을 누적해서 반환하거나 콜백/큐로 전달).</p>
  </li>
</ol>

<p>원하면, 같은 패턴으로 여러 개를 동시에 돌릴 수도 있어요:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main_many</span><span class="p">():</span>
    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_subprocess</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">done:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<p>이렇게 하면 “서브프로세스 실행 → Task로 스케줄 → 결과 대기/취소/타임아웃”까지 깔끔하게 처리됩니다.</p>

<p class="chat--user">

proc = await asyncio.create_subprocess_exec( sys.executable, "-u", "-c", "import time; [print(i) or time.sleep(0.3) for i in range(5)]", stdout=asp.PIPE, stderr=asp.PIPE ) 이 코드를 try 안에 넣지 않는 이유가 있어?

</p>

<p>짧게 말하면: <strong>정리(cleanup)가 필요한 구간만<code class="language-plaintext highlighter-rouge">try</code>로 감싸기</strong> 위해서예요.<br />
<code class="language-plaintext highlighter-rouge">create_subprocess_exec()</code> 호출 자체는 “아직 프로세스가 없거나(생성 전) 곧바로 실패하는” 단계라서, 여기서 예외/취소가 나면 <strong>정리할 대상이 없습니다.</strong></p>

<p>step-by-step로 보면:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">await asyncio.create_subprocess_exec(...)</code></p>

    <ul>
      <li>
        <p>여기서 <strong>취소(<code class="language-plaintext highlighter-rouge">CancelledError</code>)</strong>가 나면 프로세스는 만들어지지 않았으니 kill/wait 불필요.</p>
      </li>
      <li>
        <p>실행 파일 없음 등으로 <strong><code class="language-plaintext highlighter-rouge">FileNotFoundError</code>/<code class="language-plaintext highlighter-rouge">OSError</code></strong>가 나면 역시 프로세스가 없으니 정리할 게 없음.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>프로세스가 <strong>성공적으로 만들어진 뒤</strong> 에야 <code class="language-plaintext highlighter-rouge">proc</code>가 생깁니다.</p>

    <ul>
      <li>
        <p>이후 <code class="language-plaintext highlighter-rouge">await proc.communicate()</code>에서 취소/타임아웃이 나면 <strong>좀비 방지</strong> 를 위해 <code class="language-plaintext highlighter-rouge">proc.kill(); await proc.wait()</code>가 필요하죠.</p>
      </li>
      <li>
        <p>그래서 <code class="language-plaintext highlighter-rouge">try/except</code>는 이 <strong>두 번째 구간</strong>(communicate/대기 구간)에만 두는 게 맞습니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>또 다른 이유:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">create_subprocess_exec()</code>를 <code class="language-plaintext highlighter-rouge">try</code> 안에 두면, 예외 흐름에 따라 <code class="language-plaintext highlighter-rouge">proc</code>가 <strong>정의되지 않은 상태에서</strong> <code class="language-plaintext highlighter-rouge">proc.kill()</code>을 호출할 위험이 생깁니다(레퍼런스가 없어서 또 다른 예외 유발).</p>
      </li>
      <li>
        <p>“취소 신호가 생성 직후~<code class="language-plaintext highlighter-rouge">try</code> 진입 사이에 들어오면 어떡해요?” → 취소는 <strong>다음<code class="language-plaintext highlighter-rouge">await</code> 지점에서</strong> 던져지므로, 생성이 끝나고 <code class="language-plaintext highlighter-rouge">try</code> 블록으로 들어간 뒤의 <code class="language-plaintext highlighter-rouge">await</code>(예: <code class="language-plaintext highlighter-rouge">communicate</code>)에서 처리됩니다. 레이스 걱정 없음.</p>
      </li>
    </ul>
  </li>
</ol>

<p>원한다면 “스폰 실패”만 별도로 다루는 2단계 패턴이 가장 견고합니다:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">asyncio.subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_subprocess</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
            <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">import time; [print(i) or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span>
        <span class="p">)</span>
    <span class="k">except</span> <span class="nb">OSError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>  <span class="c1"># 실행 파일 없음/권한 문제 등
</span>        <span class="c1"># 여기서는 정리할 프로세스가 없음
</span>        <span class="k">raise</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">(),</span> <span class="n">err</span><span class="p">.</span><span class="nf">decode</span><span class="p">()</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="k">raise</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="c1"># 원한다면 다른 예외에서도 프로세스 정리를 보장
</span>        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="k">raise</span>
</code></pre></div></div>

<p>요약: <strong>프로세스가 생긴 이후에만</strong> 정리가 필요하므로, 생성 호출은 <code class="language-plaintext highlighter-rouge">try</code> 밖에 두고, 대기/통신 구간을 <code class="language-plaintext highlighter-rouge">try</code>로 감싸는 게 깔끔하고 안전합니다.</p>

<p class="chat--user">

기존 코드에서 subprocess 실행할 때 preexec_fn=os.setsid, creationflags=0하고, 꺼질 때는 getpgid(pid)해서 다 같이 끄는 코드가 있었는데 여기에는 필요없어?

</p>

<p>요지는 이거예요: <strong>“전체 프로세스 그룹까지 한 번에 끄고 싶다면 필요”, 아니면 불필요.</strong></p>

<p>step-by-step로 정리하면:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">asyncio.create_subprocess_exec()</code> 자체는 <strong>단일 프로세스만</strong> 관리합니다.</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">proc.terminate()</code>/<code class="language-plaintext highlighter-rouge">proc.kill()</code>은 <strong>그 프로세스만</strong> 죽입니다. 자식·손자까지 보장하지 않아요.</li>
    </ul>
  </li>
  <li>
    <p>기존처럼 “프로세스 그룹(트리) 전체 종료”가 목적이면, <strong>스폰할 때 그룹을 분리</strong> 해야 합니다.</p>

    <ul>
      <li>
        <p>POSIX(리눅스/맥): <code class="language-plaintext highlighter-rouge">preexec_fn=os.setsid</code> 대신 <strong><code class="language-plaintext highlighter-rouge">start_new_session=True</code></strong>가 권장(동일 효과, 더 안전).</p>
      </li>
      <li>
        <p>윈도우: <strong><code class="language-plaintext highlighter-rouge">creationflags=subprocess.CREATE_NEW_PROCESS_GROUP</code></strong>로 새 그룹.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>종료할 때는 “그룹 신호”를 보내야 합니다.</p>

    <ul>
      <li>
        <p>POSIX: <code class="language-plaintext highlighter-rouge">os.killpg(pgid, signal.SIGTERM)</code> → 대기 → 필요 시 <code class="language-plaintext highlighter-rouge">SIGKILL</code>.</p>
      </li>
      <li>
        <p>윈도우: <code class="language-plaintext highlighter-rouge">proc.send_signal(signal.CTRL_BREAK_EVENT)</code>(새 그룹으로 띄웠을 때만 동작) → 필요 시 <code class="language-plaintext highlighter-rouge">taskkill /T</code>.</p>
      </li>
    </ul>
  </li>
</ol>

<p>아래는 앞서 만든 Task 버전에 “그룹 분리 + 그룹 종료”를 붙인 예시입니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">signal</span><span class="p">,</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">asyncio.subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_subprocess</span><span class="p">():</span>
    <span class="c1"># 1) 플랫폼별로 "새 그룹/세션"로 스폰
</span>    <span class="n">kwargs</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">platform</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">win32</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">start_new_session</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>          <span class="c1"># == setsid()
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">creationflags</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">CREATE_NEW_PROCESS_GROUP</span>

    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">import time,sys; [print(i) or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="o">**</span><span class="n">kwargs</span>
    <span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">(),</span> <span class="n">err</span><span class="p">.</span><span class="nf">decode</span><span class="p">()</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 2) Task 취소 시: 그룹 단위로 깔끔히 종료
</span>        <span class="k">await</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
        <span class="k">raise</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="c1"># 다른 예외에서도 정리 보장
</span>        <span class="k">await</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
        <span class="k">raise</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">platform</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">win32</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">killpg</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">ProcessLookupError</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">(),</span> <span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">killpg</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">SIGKILL</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ProcessLookupError</span><span class="p">:</span>
                <span class="k">pass</span>
            <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">proc</span><span class="p">.</span><span class="nf">send_signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">CTRL_BREAK_EVENT</span><span class="p">)</span>  <span class="c1"># CREATE_NEW_PROCESS_GROUP 필요
</span>        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">(),</span> <span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="c1"># 최후 수단: 하위 트리까지 강제 종료
</span>            <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">"</span><span class="s">taskkill</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/F</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/PID</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">)],</span>
                           <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_subprocess</span><span class="p">())</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">task</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">task</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="k">pass</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="결론">결론</h3>

<ul>
  <li>
    <p>“그냥 그 프로세스 하나만” 종료해도 된다면 <code class="language-plaintext highlighter-rouge">start_new_session</code>/<code class="language-plaintext highlighter-rouge">CREATE_NEW_PROCESS_GROUP</code>는 불필요.</p>
  </li>
  <li>
    <p><strong>과거처럼 트리 전체를 확실히 종료</strong> 해야 한다면, 위처럼 <strong>스폰 시 그룹 분리 + 그룹 종료 루틴</strong> 을 그대로 넣어주세요.</p>
  </li>
  <li>
    <p>POSIX에선 <code class="language-plaintext highlighter-rouge">start_new_session=True</code>가 <code class="language-plaintext highlighter-rouge">preexec_fn=os.setsid</code>의 안전한 대체입니다.</p>
  </li>
</ul>

<p class="chat--user">

타이머를 따로 task로 만들어서 subprocess task, timeout task 두 개를 그룹으로 실행시키는 방식으로 만들어줘. 타임아웃이 되면 자손 프로세스도 다 죽여야해

</p>

<p>좋아요—“타이머(Task)와 서브프로세스(Task)를 <strong>그룹처럼 함께 돌리고</strong> , 타임아웃 시 <strong>프로세스 트리 전체</strong> 를 종료”하는 패턴을 깔끔히 만들었습니다. 그대로 붙여 쓰세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">signal</span><span class="p">,</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">asyncio.subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">Process</span><span class="p">,</span> <span class="n">graceful_timeout</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">proc를 </span><span class="sh">'</span><span class="s">그룹 단위</span><span class="sh">'</span><span class="s">로 종료. 안 죽으면 강제 종료까지.</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">platform</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">win32</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># 새 세션으로 띄웠다는 가정(start_new_session=True)
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">killpg</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">ProcessLookupError</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">graceful_timeout</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">killpg</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">SIGKILL</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ProcessLookupError</span><span class="p">:</span>
                <span class="k">pass</span>
            <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># CREATE_NEW_PROCESS_GROUP로 띄웠다는 가정
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">proc</span><span class="p">.</span><span class="nf">send_signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">CTRL_BREAK_EVENT</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">graceful_timeout</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="c1"># 최후 수단: 트리까지 모두 강제 종료
</span>            <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span>
                <span class="p">[</span><span class="sh">"</span><span class="s">taskkill</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/F</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/PID</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">)],</span>
                <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span>
            <span class="p">)</span>
            <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_with_timeout</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="nb">float</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    타이머 Task와 서브프로세스 Task를 동시에 돌리되,
    타임아웃이 먼저 끝나면 </span><span class="sh">'</span><span class="s">프로세스 트리</span><span class="sh">'</span><span class="s">를 종료한다.
    반환: (timed_out: bool, returncode, stdout_str, stderr_str)
    </span><span class="sh">"""</span>
    <span class="c1"># 1) 프로세스를 "새 그룹/세션"으로 스폰 (자손 일괄 종료를 위해 필수)
</span>    <span class="n">spawn_kwargs</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">platform</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">win32</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">spawn_kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">start_new_session</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>          <span class="c1"># == setsid()
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">spawn_kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">creationflags</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">CREATE_NEW_PROCESS_GROUP</span>

    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="o">*</span><span class="n">cmd</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="o">**</span><span class="n">spawn_kwargs</span>
    <span class="p">)</span>

    <span class="c1"># 2) 두 개의 Task를 그룹처럼 함께 실행
</span>    <span class="n">proc_task</span>  <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">proc-communicate</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">timer_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">timeout</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">timeout-timer</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
        <span class="p">{</span><span class="n">proc_task</span><span class="p">,</span> <span class="n">timer_task</span><span class="p">},</span>
        <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
    <span class="p">)</span>

    <span class="c1"># 3) 타이머가 먼저 끝남 → 트리 종료 후 결과 정리
</span>    <span class="k">if</span> <span class="n">timer_task</span> <span class="ow">in</span> <span class="n">done</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">proc_task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
        <span class="c1"># 프로세스 트리 종료
</span>        <span class="k">await</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
        <span class="c1"># 통신 Task 취소 (혹시 남아있다면)
</span>        <span class="n">proc_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">proc_task</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">return</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">""</span>  <span class="c1"># timed_out=True
</span>
    <span class="c1"># 4) 프로세스가 먼저 끝남 → 타이머 취소 후 결과 반환
</span>    <span class="n">timer_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">timer_task</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc_task</span>  <span class="c1"># bytes
</span>    <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ------------------ 사용 예시 ------------------
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># 예: 0.3초 간격으로 5줄 출력하는 하위 파이썬을 1초 타임아웃으로 실행
</span>    <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
           <span class="sh">"</span><span class="s">import time,sys; [print(i) or sys.stdout.flush() or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">]</span>

    <span class="n">timed_out</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_with_timeout</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">timed_out</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">[TIMEOUT] 하위 프로세스 트리를 모두 종료했습니다.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDOUT:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDERR:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="핵심-포인트-요약">핵심 포인트 (요약)</h3>

<ul>
  <li>
    <p><strong>두 Task를 그룹처럼</strong> : <code class="language-plaintext highlighter-rouge">proc.communicate()</code> Task와 <code class="language-plaintext highlighter-rouge">asyncio.sleep(timeout)</code> Task를 <code class="language-plaintext highlighter-rouge">asyncio.wait(..., FIRST_COMPLETED)</code>로 경합시킵니다.</p>
  </li>
  <li>
    <p><strong>타임아웃 경로</strong> : 타이머가 먼저 끝나면 <code class="language-plaintext highlighter-rouge">terminate_process_tree()</code>로 <strong>프로세스 그룹(트리)</strong>을 종료 → 통신 Task 취소.</p>
  </li>
  <li>
    <p><strong>프로세스 완료 경로</strong> : 프로세스가 먼저 끝나면 타이머 Task만 취소.</p>
  </li>
  <li>
    <p><strong>트리 종료를 위해 스폰 옵션 필수</strong></p>

    <ul>
      <li>
        <p>POSIX: <code class="language-plaintext highlighter-rouge">start_new_session=True</code> (≒ <code class="language-plaintext highlighter-rouge">preexec_fn=os.setsid</code>)</p>
      </li>
      <li>
        <p>Windows: <code class="language-plaintext highlighter-rouge">creationflags=CREATE_NEW_PROCESS_GROUP</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Windows에선 <code class="language-plaintext highlighter-rouge">CTRL_BREAK_EVENT</code> → 불응 시 <code class="language-plaintext highlighter-rouge">taskkill /T</code>로 강제 정리.</p>
  </li>
</ul>

<p>이 패턴이면 “타이머를 별도 Task로 두고, 타임아웃 시 자손까지 전부 종료” 요구사항을 그대로 충족합니다.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Async request 취소 처리</title><link href="https://hvppyarchive.github.io/comfyui/async-request-cancel/" rel="alternate" type="text/html" title="Async request 취소 처리" /><published>2025-10-10T11:53:02+09:00</published><updated>2025-10-10T11:53:02+09:00</updated><id>https://hvppyarchive.github.io/comfyui/async-request-cancel</id><content type="html" xml:base="https://hvppyarchive.github.io/comfyui/async-request-cancel/"><![CDATA[<p class="chat--user">

comfyui에서 custom node의 메인 함수를 async로 만들 수 있게 되었어. 그리고, openai python 패키지에서 AsyncOpenAI와 aiohttp를 이용해서 async하게 request를 보낼 수 있어. 근데 문제는 UI에서 stop을 보내고 interrupt가 즉시 동작하지 않는다는거야. request를 보낸 후 await 하는 도중에 작업이 취소되게 하고 싶어

</p>

<p>좋아, 핵심은 “네트워크 요청 await 중에도 바로 끊기게” 만드는 거야.<br />
asyncio에서는 <strong>취소 신호와 실제 작업을 ‘경쟁(race)’</strong> 시키면 돼. 즉, 요청을 <code class="language-plaintext highlighter-rouge">Task</code>로 만들고, UI에서 오는 stop 신호(이하 <code class="language-plaintext highlighter-rouge">stop_event</code>)의 <code class="language-plaintext highlighter-rouge">wait()</code>도 <code class="language-plaintext highlighter-rouge">Task</code>로 만들어서 <strong>둘 중 먼저 끝나는 쪽</strong> 을 보고 행동을 바꾸면 즉시 중단이 가능해.</p>

<p>아래를 그대로 가져다 쓸 수 있게 단계별(그리고 안전한) 패턴으로 정리했어.</p>

<hr />

<h1 id="1-공통-유틸-취소-가능한-await-래퍼">1) 공통 유틸: 취소 가능한 await 래퍼</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">class</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">UI stop/interrupt로 중단되었음을 나타내는 애플리케이션 레벨 예외.</span><span class="sh">"""</span>
    <span class="k">pass</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    coro(코루틴)와 stop_event.wait()를 경쟁시킨다.
    - stop이 먼저 오면 coro Task를 cancel하고 정리한 뒤 StopByUser를 올린다.
    - 요청이 먼저 끝나면 stop 대기 Task를 취소하고 결과를 반환한다.
    </span><span class="sh">"""</span>
    <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
    <span class="n">stop_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">stop_event</span><span class="p">.</span><span class="nf">wait</span><span class="p">())</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
            <span class="p">{</span><span class="n">req_task</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
        <span class="p">)</span>

        <span class="k">if</span> <span class="n">stop_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
            <span class="c1"># UI가 stop을 눌렀다: 네트워크 요청을 취소
</span>            <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="c1"># 취소 정리 끝까지 기다려 경고/리소스 누수 방지
</span>            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">req_task</span>
            <span class="k">raise</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopped by user</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 요청이 먼저 끝남: stop 대기는 취소
</span>        <span class="n">stop_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">stop_task</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">req_task</span>  <span class="c1"># 결과 리턴
</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 바깥 컨텍스트(ComfyUI 실행기)가 이 Task 자체를 취소한 경우: 바로 전파
</span>        <span class="k">raise</span>

    <span class="k">finally</span><span class="p">:</span>
        <span class="c1"># 혹시 남아있으면 확실히 정리
</span>        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">(</span><span class="n">req_task</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">t</span>
</code></pre></div></div>

<blockquote>
  <p>중요: 코드 어딘가에 <code class="language-plaintext highlighter-rouge">except Exception:</code> 같은 광범위한 예외 처리기가 있다면, <strong>반드시</strong><br />
 <code class="language-plaintext highlighter-rouge">except asyncio.CancelledError: raise</code> 를 <strong>맨 위에 따로</strong> 두어 취소가 삼켜지지 않게 하세요.<br />
 (파이썬 버전에 따라 <code class="language-plaintext highlighter-rouge">CancelledError</code>가 일반 <code class="language-plaintext highlighter-rouge">Exception</code>에 잡힐 수 있으니 명시적으로 분기하는 게 안전합니다.)</p>
</blockquote>

<hr />

<h1 id="2-comfyui-커스텀-노드mainasync에서-적용">2) ComfyUI 커스텀 노드(main=async)에서 적용</h1>

<p>ComfyUI가 stop을 누르면 내부적으로 “중단 플래그/이벤트”가 켜질 텐데, 그걸 <code class="language-plaintext highlighter-rouge">stop_event</code>(asyncio.Event 호환)로 받는다고 가정해 보자.<br />
(ComfyUI에서 제공하는 실제 인터럽트 신호를 어떻게 얻는지는 프로젝트마다 다를 수 있어. 노드에 주입 받거나, 실행 컨텍스트에서 꺼내 쓰는 식으로 연결해 주면 된다.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">class</span> <span class="nc">AsyncLLMNode</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">main</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1"># stop_event는 ComfyUI 쪽에서 넘겨주도록 연결해 두는 걸 권장
</span>        <span class="k">if</span> <span class="n">stop_event</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># 최악의 경우를 대비한 더미 (즉시 완료되지 않음)
</span>            <span class="n">stop_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>

        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>  <span class="c1"># 필요시 api_key, base_url 등 설정
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># ◇ 비-스트리밍 요청 예시
</span>            <span class="n">coro</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
            <span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">)</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>

        <span class="k">except</span> <span class="n">StopByUser</span><span class="p">:</span>
            <span class="c1"># ComfyUI가 즉시 멈췄음을 위쪽으로 알리거나, 빈 결과/상태 메시지를 반환
</span>            <span class="c1"># ComfyUI 쪽 정책에 맞춰 raise/return 중 하나를 선택
</span>            <span class="k">raise</span>  <span class="c1"># 보통은 raise로 전파하는 게 인터럽트 체인에 충실
</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 바깥에서 Task 자체가 취소된 경우
</span>            <span class="k">raise</span>

        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># http 커넥션 정리
</span>            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="3-스트리밍부분-응답일-때도-즉시-중단">3) 스트리밍(부분 응답)일 때도 즉시 중단</h1>

<p>스트리밍은 내부적으로 <code class="language-plaintext highlighter-rouge">async for</code>로 청크를 읽는 동안 <code class="language-plaintext highlighter-rouge">__anext__()</code>에서 블록돼서<br />
stop을 눌러도 바로 반응을 못할 수 있어. 이때도 <strong>chunk 읽기 vs stop</strong> 를 경쟁시키면 해결돼.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="c1"># 새로운 Responses API 예시 (필요에 맞춰 Chat Completions로 바꿔도 동일 패턴)
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span>
    <span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
        <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>  <span class="c1"># 텍스트 청크 이터레이터
</span>        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
            <span class="n">stop_task</span>  <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">stop_event</span><span class="p">.</span><span class="nf">wait</span><span class="p">())</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
                <span class="p">{</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
            <span class="p">)</span>

            <span class="k">if</span> <span class="n">stop_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="c1"># 읽기 중단 + 연결 정리
</span>                <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">next_chunk</span>
                <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># 서버 쪽 스트림도 닫기
</span>                <span class="k">raise</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopped by user</span><span class="sh">"</span><span class="p">)</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
            <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                <span class="c1"># 스트림 종료
</span>                <span class="k">break</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">stop_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">stop_task</span>

        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
</code></pre></div></div>

<p>ComfyUI 노드에서:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">stop_event</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">stop_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>
    <span class="k">except</span> <span class="n">StopByUser</span><span class="p">:</span>
        <span class="k">raise</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-aiohttp-순수-사용-시-예시">4) aiohttp 순수 사용 시 예시</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">from</span> <span class="n">yarl</span> <span class="kn">import</span> <span class="n">URL</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">fetch_json_cancellable</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">aiohttp</span><span class="p">.</span><span class="nc">ClientSession</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
        <span class="c1"># POST 코루틴 생성
</span>        <span class="k">async</span> <span class="k">def</span> <span class="nf">do_post</span><span class="p">():</span>
            <span class="k">async</span> <span class="k">with</span> <span class="n">session</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span> <span class="k">as</span> <span class="n">resp</span><span class="p">:</span>
                <span class="n">resp</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">resp</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>

        <span class="k">return</span> <span class="k">await</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="nf">do_post</span><span class="p">(),</span> <span class="n">stop_event</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>참고: <code class="language-plaintext highlighter-rouge">aiohttp</code>는 Task 취소 시 소켓을 닫으며 <code class="language-plaintext highlighter-rouge">CancelledError</code>가 전파돼요.<br />
 위의 패턴처럼 <em>항상</em> loser task를 <code class="language-plaintext highlighter-rouge">cancel()</code>하고 <code class="language-plaintext highlighter-rouge">await</code>해서 경고 없이 정리하세요.</p>
</blockquote>

<hr />

<h1 id="5-흔한-즉시-중단이-안-되는-원인-체크리스트">5) 흔한 “즉시 중단이 안 되는” 원인 체크리스트</h1>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">CancelledError</code>를 삼키는 예외 처리</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">except Exception:</code> 이 있다면 바로 위에 <code class="language-plaintext highlighter-rouge">except asyncio.CancelledError: raise</code> 를 추가.</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">await</code> 없이 동기 블로킹 코드</strong></p>

    <ul>
      <li>CPU 바운드 루프/블로킹 I/O는 이벤트 루프를 막아 취소가 늦어짐 → <code class="language-plaintext highlighter-rouge">await</code> 가능한 API로 바꾸거나, <code class="language-plaintext highlighter-rouge">run_in_executor()</code>로 분리.</li>
    </ul>
  </li>
  <li>
    <p><strong>스트리밍 루프에서 stop을 안 보고 있음</strong></p>

    <ul>
      <li>위의 “스트리밍 경쟁” 패턴으로 <code class="language-plaintext highlighter-rouge">__anext__()</code>와 <code class="language-plaintext highlighter-rouge">stop_event.wait()</code>를 경쟁시키기.</li>
    </ul>
  </li>
  <li>
    <p><strong>정리(cleanup)를 취소가 덮어버림</strong></p>

    <ul>
      <li>정리 과정은 <code class="language-plaintext highlighter-rouge">asyncio.shield()</code>로 감싸거나 <code class="language-plaintext highlighter-rouge">with contextlib.suppress(asyncio.CancelledError)</code>로 마무리.</li>
    </ul>
  </li>
  <li>
    <p><strong>긴 네트워크 타임아웃</strong></p>

    <ul>
      <li>취소 자체는 타임아웃과 무관하지만, 라이브러리 정리가 지연될 수 있음 → 세션/스트림을 <code class="language-plaintext highlighter-rouge">close()</code> 해주기.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="6-comfyui-쪽-stop_event-연결-팁">6) ComfyUI 쪽 ‘stop_event’ 연결 팁</h1>

<ul>
  <li>
    <p>프로젝트에 따라 다르지만, 보통 <strong>실행 컨텍스트</strong> 나 <strong>노드 인자 주입</strong> 으로 <code class="language-plaintext highlighter-rouge">asyncio.Event</code>를 받을 수 있게 해두면 가장 깔끔해.</p>
  </li>
  <li>
    <p>만약 지금은 그런 훅이 없다면:</p>

    <ul>
      <li>
        <p>최소한 주기적으로 확인하는 polling을 넣는 대신, <strong>위의 경쟁 패턴</strong> 을 사용하면 “await 중에도” 바로 반응한다.</p>
      </li>
      <li>
        <p>stop을 누를 때 노드 측에 <code class="language-plaintext highlighter-rouge">stop_event.set()</code>이 호출되도록 연결(주입)만 해주면 된다.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>필요하면 너의 현재 노드 코드 일부를 붙여줘. 거기에 맞춰 <code class="language-plaintext highlighter-rouge">await_cancellable</code>을 딱 들어맞게 리팩터링해 줄게.</p>

<p class="chat--user">

stop_event를 넣는다는게 뭔지 모르겠어. comfyui 내부적으로 interrupt 버튼이 있잖아? 그 버튼을 눌렀을 때 취소되면 좋겠어

</p>

<p>좋아, “UI의 Interrupt 버튼(또는 /interrupt)이 눌리면 내 async 커스텀 노드가 지금 <code class="language-plaintext highlighter-rouge">await</code> 중인 OpenAI 요청을 즉시 끊고 싶다”가 목표지요. 핵심은 <strong>ComfyUI가 인터럽트를 “플래그”로만 알리고, 실제로는 노드가 협조적으로 취소를 처리해야</strong> 한다는 점이에요. 아래를 그대로 넣으면 됩니다 — 단계별로 설명할게요.</p>

<hr />

<h2 id="1-comfyui가-인터럽트를-어떻게-알리냐">1) ComfyUI가 인터럽트를 어떻게 알리냐</h2>

<ul>
  <li>
    <p>프론트엔드 Interrupt 버튼/단축키가 <strong><code class="language-plaintext highlighter-rouge">POST /interrupt</code></strong> 를 호출합니다. 서버는 내부 인터럽트 플래그를 세팅해요. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI+2</a></p>
  </li>
  <li>
    <p>실행기는 다음 노드 경계 혹은 노드 내부에서 체크될 때 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code></strong> 으로 중단을 전파하고, 웹소켓 이벤트 <strong><code class="language-plaintext highlighter-rouge">execution_interrupted</code></strong> 를 보냅니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>단, <strong>노드가 블로킹 상태(타이트 루프/블로킹 I/O)</strong> 면 인터럽트가 바로 처리되지 않을 수 있습니다. 그래서 노드가 <strong>주기적으로 인터럽트를 체크</strong> 하거나 <strong><code class="language-plaintext highlighter-rouge">await</code> 를 취소</strong>해 줘야 해요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/3131?utm_source=chatgpt.com">GitHub</a></p>
  </li>
</ul>

<hr />

<h2 id="2-커스텀-노드에서-협조적-취소를-붙이는-가장-쉬운-방법">2) 커스텀 노드에서 “협조적 취소”를 붙이는 가장 쉬운 방법</h2>

<p>ComfyUI는 <code class="language-plaintext highlighter-rouge">comfy.model_management.throw_exception_if_processing_interrupted()</code> 를 제공합니다. 이걸 주기적으로 호출하면 인터럽트 시 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 을 던져요. (공식 코드와 여러 예시 노드에서 사용됩니다.) <a href="https://gitee.com/bug531/comfy-ui/blob/master/main.py?skip_mobile=true&amp;utm_source=chatgpt.com">Gitee+2</a></p>

<p>아이디어: <strong>요청 태스크</strong> 와 <strong>인터럽트 감시 태스크</strong> 를 동시에 돌리고, 감지되면 요청 태스크를 <code class="language-plaintext highlighter-rouge">cancel()</code>로 끊습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 커스텀 노드 파일 안
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_watch_interrupt_and_cancel</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">ComfyUI 인터럽트가 오면 주어진 task를 cancel()</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>  <span class="c1"># 폴링 주기
</span>            <span class="n">mm</span><span class="p">.</span><span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>  <span class="c1"># 인터럽트면 예외 발생
</span>    <span class="k">except</span> <span class="n">mm</span><span class="p">.</span><span class="n">InterruptProcessingException</span><span class="p">:</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>  <span class="c1"># 메인 요청 취소
</span>
<span class="k">class</span> <span class="nc">MyAsyncNode</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">example</span><span class="sh">"</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>  <span class="c1"># 필요 시 api_key, base_url, timeout 등 설정
</span>
        <span class="c1"># 1) OpenAI 비동기 요청을 태스크로 생성
</span>        <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
            <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>          <span class="c1"># 선택: 요청 타임아웃
</span>                <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span>         <span class="c1"># 선택: 재시도 비활성화(취소 응답을 빠르게)
</span>            <span class="p">)</span>
        <span class="p">)</span>

        <span class="c1"># 2) 인터럽트 감시 태스크 시작
</span>        <span class="n">watcher</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_watch_interrupt_and_cancel</span><span class="p">(</span><span class="n">req_task</span><span class="p">))</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 3) 결과 대기 — 인터럽트 시 req_task가 CancelledError로 깨짐
</span>            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 4) ComfyUI에 “사용자 인터럽트”로 알리려면 이 예외로 승격
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># 5) 워처 정리
</span>            <span class="n">watcher</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">watcher</span>
</code></pre></div></div>

<h3 id="왜-이렇게-하느냐">왜 이렇게 하느냐?</h3>

<ul>
  <li>
    <p><strong>UI 버튼</strong> → <code class="language-plaintext highlighter-rouge">/interrupt</code> → 내부 플래그 on. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>감시 코루틴이 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code> 호출 중 <strong>예외를 받음</strong> → <strong><code class="language-plaintext highlighter-rouge">req_task.cancel()</code></strong> → <code class="language-plaintext highlighter-rouge">await</code>가 즉시 <code class="language-plaintext highlighter-rouge">CancelledError</code> 로 깨짐 → 이를 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 으로 다시 던져</strong> ComfyUI가 <em>“Processing interrupted”</em> 경로로 종료. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI+1</a></p>
  </li>
</ul>

<hr />

<h2 id="3-대안-asynciowait로-레이스-구성">3) 대안: <code class="language-plaintext highlighter-rouge">asyncio.wait()</code>로 “레이스” 구성</h2>

<p>폴링 코드를 줄이고 싶다면, “인터럽트 대기 코루틴”과 요청을 <strong>레이스</strong> 시키는 방법도 있어요:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt</span><span class="p">():</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
        <span class="n">mm</span><span class="p">.</span><span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>

<span class="c1"># ...
</span><span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(...))</span>
<span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt</span><span class="p">())</span>

<span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
    <span class="p">{</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
    <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="nf">return </span><span class="p">(</span> <span class="p">(</span><span class="k">await</span> <span class="n">req_task</span><span class="p">).</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="4-자주-겪는-함정--팁">4) 자주 겪는 함정 &amp; 팁</h2>

<ul>
  <li>
    <p><strong>블로킹 코드</strong>(동기 HTTP, 무한 루프 등)가 있으면 인터럽트가 “즉시” 안 먹힙니다. 네트워크는 반드시 <strong>aiohttp/비동기</strong> 를 쓰고, 루프 안에는 간간이 <code class="language-plaintext highlighter-rouge">mm.throw_exception_if_processing_interrupted()</code> 를 넣으세요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/3131?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p><strong>OpenAI 비동기 클라이언트</strong> 는 <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code> 를 쓰면 됩니다(요청 옵션에 <code class="language-plaintext highlighter-rouge">timeout</code> 등 전달 가능).</p>
  </li>
  <li>
    <p><strong>취소 전파</strong> : <code class="language-plaintext highlighter-rouge">asyncio.CancelledError</code> 를 <strong>잡아서</strong> <code class="language-plaintext highlighter-rouge">mm.InterruptProcessingException</code> 으로 <strong>다시 던지는 것</strong> 이 포인트입니다 — 그래야 UI에 정상적인 “중단”으로 보입니다.</p>
  </li>
  <li>
    <p><strong>키보드 단축키</strong> 도 인터럽트를 보냅니다(Ctrl+Alt+Enter). <a href="https://docs.comfy.org/interface/shortcuts?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
</ul>

<hr />

<h2 id="5-동작-원리-한눈-요약">5) 동작 원리 한눈 요약</h2>

<ol>
  <li>
    <p>유저가 Interrupt 클릭 → <strong><code class="language-plaintext highlighter-rouge">POST /interrupt</code></strong> 호출 → 내부 플래그 on. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>내 노드의 “인터럽트 워처”가 플래그 감지 → <strong>요청 태스크 cancel()</strong>.</p>
  </li>
  <li>
    <p>내 코드가 <code class="language-plaintext highlighter-rouge">CancelledError</code> 를 받아 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 재-발생</strong> → 실행기에서 <strong><code class="language-plaintext highlighter-rouge">execution_interrupted</code></strong> 이벤트 전송 &amp; 즉시 중단. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
</ol>

<p>이렇게 붙이면 “UI에서 정지 → 곧장 당신의 <code class="language-plaintext highlighter-rouge">await</code>가 끊기는” 동작을 안정적으로 만들 수 있어요.</p>

<p class="chat--user">

3번처럼 구성했어. 그런데 너가 만들어준 노드들이 다수의 노드가 동시에 실행될수도 있는데 그러면 그 중에 하나만 취소되는거 같기도해. 왜냐면 throw_exception_if_processing_interrupted() 함수가 interrupt_processing을 False로 만들거든. 그러면 두 번째 노드는 취소된지 모르지 않을까

</p>

<p>맞아. 네가 본 그대로야. ComfyUI의 인터럽트 플래그는 <strong>“한 번만 소비되는(edge-triggered)”</strong> 동작을 해.<br />
소스 보면:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">interrupt_current_processing(True)</code> → 전역 플래그를 <strong>True</strong> 로 셋팅.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">processing_interrupted()</code> → <strong>플래그를 읽기만</strong> 함(안 지움). <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code> → 플래그가 <strong>True면 False로 지우고</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던짐(즉, <em>소비</em>). 그래서 <strong>먼저 호출한 노드만</strong> 확실히 취소 신호를 보게 되고, 뒤늦게 체크한 다른 노드는 “몰랐다”가 될 수 있어. <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
</ul>

<p>그래서 “여러 노드가 동시에 돌 때 하나만 취소되는 것 같다”는 네 추측이 정확해.</p>

<hr />

<h1 id="이렇게-바꿔서-해결해">이렇게 바꿔서 해결해</h1>

<p>핵심은 <strong>노드 내부에서 플래그를 ‘읽기만’ 하되 지우지 않는 것</strong> 이야.<br />
즉, 감시 코루틴은 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>(소비) 대신 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>(비소비)로 체크하고, <strong>직접<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 raise</strong> 하자. 그러면 <strong>모든</strong> 실행 중 노드가 같은 인터럽트를 감지하고 동시에 멈출 수 있어.</p>

<h2 id="1-레이스-패턴요청-vs-인터럽트-수정본">1) 레이스 패턴(요청 vs 인터럽트) 수정본</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">():</span>
    <span class="c1"># 플래그를 '읽기만' 하는 루프: 여러 노드가 동시에 True를 감지 가능
</span>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mm</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>           <span class="c1"># ← 소비 안 함
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">MyAsyncNode</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">example</span><span class="sh">"</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
                <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                    <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
                    <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                <span class="p">)</span>
            <span class="p">)</span>
            <span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                        <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="c1"># 인터럽트가 먼저 옴: 네트워크 요청 즉시 취소
</span>                <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">req_task</span>
                <span class="c1"># 여기서 throw_exception_if_processing_interrupted()를 부르면
</span>                <span class="c1"># 플래그를 '지워' 버려 다른 노드가 못 봄 → 쓰지 말자.
</span>                <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

            <span class="c1"># 요청이 먼저 끝남
</span>            <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">int_task</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,)</span>

        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 상위에서 태스크 자체를 취소한 경우
</span>            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<blockquote>
  <p>포인트: <strong>노드 코드에서는<code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하지 않는다.</strong><br />
 모든 실행 중 노드가 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>로 동시에 감지 → 각자 자신의 작업을 취소하고 <strong>직접</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던진다.<br />
 이렇게 해야 플래그가 한 노드에 의해 먼저 ‘소비’되어 사라지는 일이 없다. (해당 함수가 플래그를 False로 만들고 예외를 던지는 동작은 소스에 명시돼 있음) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
</blockquote>

<h2 id="2-스트리밍-루프도-동일-원리">2) 스트리밍 루프도 동일 원리</h2>

<p>청크 읽기(<code class="language-plaintext highlighter-rouge">__anext__</code>)와 인터럽트 감시를 레이스시키되, 감시는 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>만 사용:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
        <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>
        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
            <span class="n">int_task</span>   <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                         <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">next_chunk</span>
                <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
            <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">int_task</span>

        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="왜-이게-안전한가-step-by-step">왜 이게 안전한가 (step-by-step)</h1>

<ol>
  <li>
    <p>사용자가 UI에서 <strong>Interrupt 버튼</strong> → 서버가 <code class="language-plaintext highlighter-rouge">interrupt_current_processing(True)</code>로 전역 플래그를 킴.</p>
  </li>
  <li>
    <p>각 노드의 감시 코루틴이 <strong>지우지 않는</strong> <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>로 True를 감지. (동시에 여러 노드 OK) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
  <li>
    <p>감지한 노드는 <strong>자기 네트워크 태스크를<code class="language-plaintext highlighter-rouge">cancel()</code></strong> 하고 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 <strong>직접 raise</strong>.</p>
  </li>
  <li>
    <p>실행기는 이 예외를 받아 워크플로를 “Processing interrupted”로 종료.</p>
  </li>
  <li>
    <p>플래그 초기화는 <strong>코어 쪽</strong>(다음 실행 준비 타이밍)에 의해 처리되거나, 코어가 적절히 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 한 번만 호출해 소비함. (이 함수가 플래그를 지우는 동작은 소스에 명확) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
</ol>

<blockquote>
  <p>요약: <strong>노드 단에서는 ‘읽기(레벨 트리거)’만 하고, 지우는(엣지 소비) 일은 코어에게 맡겨라.</strong></p>
</blockquote>

<hr />

<h1 id="추가-체크리스트">추가 체크리스트</h1>

<ul>
  <li>
    <p>예외 처리에서 <code class="language-plaintext highlighter-rouge">CancelledError</code>는 <strong>절대 삼키지 말고 전파</strong> 하세요. (취소 감도가 떨어지는 대표 원인)</p>
  </li>
  <li>
    <p>aiohttp/OpenAI 비동기는 태스크 취소 시 소켓을 닫고 <code class="language-plaintext highlighter-rouge">CancelledError</code>를 던집니다. 취소 후에는 <code class="language-plaintext highlighter-rouge">with suppress(asyncio.CancelledError): await task</code>로 <strong>정리까지</strong> 해 주세요.</p>
  </li>
  <li>
    <p>장시간 블로킹/CPU 작업이 있으면 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>를 루프에 간간히 넣어 주세요. (블로킹이면 인터럽트가 늦게 반영)</p>
  </li>
</ul>

<p>이대로 바꾸면 “동시에 도는 여러 노드 중 하나만 멈추는” 현상 없이, <strong>모두가 즉시 멈추는</strong> 동작이 됩니다.</p>

<p class="chat--user">

Exception을 여러 노드에서 뿌려도 돼?

</p>

<p>짧게 답하면: <strong>네, 여러 노드에서<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 동시에(또는 거의 동시에) 던져도 됩니다.</strong><br />
ComfyUI 실행기는 이 예외를 “취소 신호”로 취급하고 상위 실행 루프에서 잡아서 프롬프트 실행을 중단하도록 설계되어 있어요. 한 노드가 던지든, 여러 노드가 던지든 결과는 같고, 추가로 던져지는 예외들은 상위에서 동일하게 처리(로그만 남기고 무시)됩니다. 공식 문서에도 <em>“노드가 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던질 때 실행이 중단된다”</em>고 명시돼 있어요. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서</a></p>

<p>조금 더 구체적으로, 단계별로 생각해보면:</p>

<ol>
  <li>
    <p><strong>UI의 Stop(또는<code class="language-plaintext highlighter-rouge">/interrupt</code>) → 실행 중단 플래그 세트</strong><br />
프론트엔드가 중단을 보내면 서버가 현재 워크플로 실행을 멈추는 라우트를 처리합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI 공식 문서</a></p>
  </li>
  <li>
    <p><strong>노드단 체크 → 예외 발생</strong><br />
각 노드(혹은 진행률 훅/대기 지점)에서 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하면, 플래그가 켜져 있을 때 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던집니다. 이건 의도된 흐름이에요. 실행기는 이 예외를 특별취급하여 “Processing interrupted”로 처리하고 <code class="language-plaintext highlighter-rouge">execution_interrupted</code> 메시지를 브로드캐스트합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서+1</a></p>
  </li>
  <li>
    <p><strong>여러 노드가 동시에 던져도 문제 없음</strong><br />
실행기는 노드 실행을 감싸는 상위 try/except에서 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 잡아 “중단”으로 정리합니다. 다른 노드에서도 같은 예외가 연달아 터져도 동일하게 중단 처리로 흘러갑니다(중복 로그 정도만 생길 수 있음). <a href="https://github.com/comfyanonymous/ComfyUI/discussions/6766?utm_source=chatgpt.com">GitHub+1</a></p>
  </li>
</ol>

<p>그래서 실무 팁은 이렇습니다:</p>

<ul>
  <li>
    <p><strong>각 노드에서</strong> 진입 시점과 <strong>모든<code class="language-plaintext highlighter-rouge">await</code> 직후</strong>에<br />
<code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하세요.</p>
  </li>
  <li>외부 비동기 요청(예: <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code>/<code class="language-plaintext highlighter-rouge">aiohttp</code>)이 있다면 이렇게 감싸면 안전합니다:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfy.model_management</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">InterruptProcessingException</span><span class="p">,</span>
    <span class="n">throw_exception_if_processing_interrupted</span><span class="p">,</span>
<span class="p">)</span>
    
<span class="k">async</span> <span class="k">def</span> <span class="nf">FUNCTION</span><span class="p">(...):</span>
    <span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>
    <span class="n">task</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 예: 대기 전에 한 번 더 체크
</span>        <span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>
        <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(...))</span>
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">task</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="k">except</span> <span class="n">InterruptProcessingException</span><span class="p">:</span>
        <span class="c1"># 외부 요청/태스크 정리
</span>        <span class="k">if</span> <span class="n">task</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
            <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">task</span>
        <span class="k">raise</span>  <span class="c1"># 꼭 재전파! (중단으로 인식)
</span></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>절대</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 일반 <code class="language-plaintext highlighter-rouge">Exception</code>으로 삼켜서 리턴하지 마세요. 그러면 “중단”이 아닌 “실패”로 기록됩니다(로그와 UI 이벤트가 달라짐). <code class="language-plaintext highlighter-rouge">execution_interrupted</code> 이벤트는 이 예외가 그대로 올라갈 때만 발생합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서</a></p>
  </li>
  <li>여러 노드가 동시에 실행될 수 있는 구조라면 <strong>각 노드가 독립적으로 같은 예외를 던지도록</strong> 두는 게 맞습니다. 중복 예외는 상위 실행기에서 정리되며, 전체 프롬프트는 한 번만 “중단”으로 마감됩니다. <a href="https://github.com/comfyanonymous/ComfyUI/discussions/6766?utm_source=chatgpt.com">GitHub</a></li>
</ul>

<p>덤: 브라우저 탭을 닫아도 중단이 발생할 수 있다는 이슈들이 있어요(탭을 닫으면 세션이 끊기며 인터럽트가 트리거). API/헤드리스로 돌릴 때는 이 점을 유의하세요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/6713?utm_source=chatgpt.com">GitHub+1</a></p>

<p>정리: <strong>여러 노드에서 마음 편히<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던지세요.</strong> 이것이 ComfyUI가 의도한 “즉시 중단” 메커니즘이고, 예외가 여러 개여도 상위 실행기에서 안전하게 처리됩니다.</p>

<p class="chat--user">

_wait_for_interrupt_level_trigger()에서 raise 안하고 그냥 return 하는건 어때 어차피 밖에서 raise 하잖아

</p>

<p>가능해. <strong><code class="language-plaintext highlighter-rouge">_wait_for_interrupt_level_trigger()</code>에서 <code class="language-plaintext highlighter-rouge">raise</code> 대신 <code class="language-plaintext highlighter-rouge">return</code></strong> 해도 원하는 “레이스(요청 vs 인터럽트)” 동작은 똑같이 만들어져. 실무적으로는 <em>헬퍼에서 예외 스택을 남기지 않으니</em> 로그가 더 깔끔해지는 장점도 있어.</p>

<p>아래처럼 바꾸면 돼 — 단계별로 정리할게.</p>

<hr />

<h1 id="핵심-아이디어-step-by-step">핵심 아이디어 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>헬퍼는 “인터럽트를 감지하면 끝났다”는 신호만 반환</strong> 한다.</p>
  </li>
  <li>
    <p><strong>바깥(콜러)</strong>는 <code class="language-plaintext highlighter-rouge">asyncio.wait(..., FIRST_COMPLETED)</code>로 <code class="language-plaintext highlighter-rouge">req_task</code>(네트워크 요청)와 <code class="language-plaintext highlighter-rouge">int_task</code>(인터럽트 감시) 중 <strong>먼저 끝난 쪽</strong> 을 확인한다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">int_task</code>가 먼저 끝났다면 <strong>요청 태스크를 cancel() 하고</strong> , 여기서 <strong>한 번만</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던진다.</p>
  </li>
</ol>

<hr />

<h1 id="헬퍼-return-버전-레벨-트리거-소비-안-함">헬퍼: return 버전 (레벨 트리거, 소비 안 함)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>

<span class="c1"># sentinel: 결과를 명확히 구분하고 싶다면 씀
</span><span class="n">INTERRUPTED</span> <span class="o">=</span> <span class="nf">object</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">(</span><span class="n">poll_ms</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">50</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">ComfyUI 인터럽트 플래그를 </span><span class="sh">'</span><span class="s">읽기만</span><span class="sh">'</span><span class="s"> 하다가 감지되면 반환.</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">sleep_s</span> <span class="o">=</span> <span class="n">poll_ms</span> <span class="o">/</span> <span class="mf">1000.0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">sleep_s</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">mm</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>   <span class="c1"># ← 소비하지 않음(여러 노드 동시 감지 가능)
</span>                <span class="k">return</span> <span class="n">INTERRUPTED</span>            <span class="c1"># 또는 True 같은 간단한 값
</span>    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 바깥에서 int_task를 취소하면 여기로 옴. 정리 후 전파.
</span>        <span class="k">raise</span>
</code></pre></div></div>

<hr />

<h1 id="비-스트리밍-요청에-적용">비-스트리밍 요청에 적용</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_node</span><span class="p">(</span><span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
        <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
            <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
            <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="p">)</span>
    <span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                     <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
            <span class="c1"># 1) 네트워크 요청 즉시 취소
</span>            <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">req_task</span>

            <span class="c1"># 2) (선택) 감시 결과를 확인해도 됨
</span>            <span class="n">_</span> <span class="o">=</span> <span class="n">int_task</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>  <span class="c1"># INTERRUPTED 같은 값
</span>
            <span class="c1"># 3) 여기서 단 한 번 raise
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

        <span class="c1"># 요청이 먼저 끝남 → 감시 태스크 취소/정리
</span>        <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">int_task</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
        <span class="k">return</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>

    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 상위에서 이 노드 태스크 자체를 취소했을 때
</span>        <span class="k">raise</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="스트리밍에도-동일-패턴">스트리밍에도 동일 패턴</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">stream_node</span><span class="p">(</span><span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
            <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>
            <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
                <span class="n">int_task</span>   <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                             <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="c1"># 스트림/청크 읽기 취소 및 정리
</span>                    <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                    <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                        <span class="k">await</span> <span class="n">next_chunk</span>
                    <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                    <span class="c1"># 여기서 raise 한 번
</span>                    <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

                <span class="k">try</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
                <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">finally</span><span class="p">:</span>
                    <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                    <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                        <span class="k">await</span> <span class="n">int_task</span>

            <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="return-방식의-장단점-요약">return 방식의 장단점 요약</h1>

<ul>
  <li>
    <p>✅ <strong>장점</strong></p>

    <ul>
      <li>
        <p>헬퍼 내부에서 예외 스택이 안 생겨 <strong>로그가 단정</strong> 해짐.</p>
      </li>
      <li>
        <p>“누가 예외를 던지나?”가 <strong>콜러 한 지점</strong> 으로 모여 <strong>정책 일관성</strong> 확보.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>⚠️ <strong>주의</strong></p>

    <ul>
      <li>
        <p>나중에 실수로 <code class="language-plaintext highlighter-rouge">int_task.result()</code>를 다른 곳에서 써버리면 <code class="language-plaintext highlighter-rouge">None</code>을 받아 헷갈릴 수 있어.<br />
→ 위처럼 <strong><code class="language-plaintext highlighter-rouge">INTERRUPTED</code> 센티널</strong>을 반환해 명시적으로 구분하는 걸 추천.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">req_task</code>가 먼저 끝난 케이스에서 <code class="language-plaintext highlighter-rouge">int_task</code>를 <strong>반드시 cancel &amp; await</strong>(suppress)로 정리해야 경고가 안 남아.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="여러-노드-동시-실행일-때의-의미">여러 노드 동시 실행일 때의 의미</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">processing_interrupted()</code>를 <strong>읽기만</strong> 하는 이 방식은 <strong>모든 노드가 같은 인터럽트를 함께 감지</strong> 할 수 있게 해.</p>
  </li>
  <li>
    <p>각 노드는 자기 요청을 끊고, <strong>콜러 한 군데에서만</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던지면 됨(혹은 각 노드가 자기 컨텍스트에서 던져도 무방).</p>
  </li>
  <li>
    <p>핵심은 <strong><code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 노드 내부 헬퍼에서 호출하지 않는 것</strong>(그 함수는 플래그를 지우므로 ‘첫 번째 소비’ 문제가 생김).</p>
  </li>
</ul>

<hr />

<p>정리: <strong>응, 헬퍼에서<code class="language-plaintext highlighter-rouge">raise</code> 대신 <code class="language-plaintext highlighter-rouge">return</code> 해도 완전히 OK.</strong><br />
오히려 깔끔할 때가 많고, 위 패턴대로 센티널을 반환해주면 실수도 줄일 수 있어.</p>]]></content><author><name>hvppyarchive</name></author><category term="comfyui" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">VS Code 경고 해결법</title><link href="https://hvppyarchive.github.io/python/vscode-python-runtime-path/" rel="alternate" type="text/html" title="VS Code 경고 해결법" /><published>2025-10-10T10:52:16+09:00</published><updated>2025-10-10T10:52:16+09:00</updated><id>https://hvppyarchive.github.io/python/vscode-python-runtime-path</id><content type="html" xml:base="https://hvppyarchive.github.io/python/vscode-python-runtime-path/"><![CDATA[<p class="chat--user">

VS Code에서 파이썬 코딩 중인데, 어떤 Framework의 Extension을 개발 중이야. 그런데 코드에서 Framework의 코드를 Reference 하는데 이게 동작 중에는 잘 동작하지만 개발 중에는 Framework의 소스코드는 같이 불러오지 않고 코딩해서 에러처럼 경고가 뜨고 Go to definition 같은 기능도 잘 동작하지 않아. 이를 해결하는 방법 있을까

</p>

<p>좋아, 상황 정리하면 “실행 때는 잘 되는데, VS Code에서 개발할 때 프레임워크 모듈을 못 찾아서 경고/Go to Definition이 안 된다”는 거지. 이건 <strong>에디터가 쓰는 파이썬 인터프리터/검색 경로와 런타임의 그것이 다르기 때문</strong> 이야. 아래 순서대로 하면 거의 항상 해결돼.</p>

<h1 id="1-에디터가-사용하는-인터프리터에-프레임워크를-설치">1) 에디터가 사용하는 인터프리터에 프레임워크를 설치</h1>

<ol>
  <li>
    <p>프로젝트용 가상환경을 하나 정하고(또는 새로 만들고) VS Code에서 <strong>Python: Select Interpreter</strong> 로 그 인터프리터를 선택.</p>
  </li>
  <li>
    <p>그 <strong>같은</strong> 인터프리터(venv)에 프레임워크를 설치.</p>

    <ul>
      <li>pip:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> venv .venv
.venv/Scripts/activate  <span class="c"># (Windows)  |  source .venv/bin/activate  # (macOS/Linux)</span>
pip <span class="nb">install</span> &lt;framework&gt;  <span class="c"># 필요한 extras가 있으면 &lt;framework&gt;[dev] 처럼</span>
</code></pre></div>        </div>
      </li>
      <li>Poetry:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>poetry add <span class="nt">-G</span> dev &lt;framework&gt;
poetry <span class="nb">env </span>use &lt;파이썬경로&gt;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>이렇게 하면 Pylance/파이썬 확장도 그 venv의 <strong>site-packages</strong> 를 보게 되어 경고가 사라지고 “Go to Definition”도 동작해.</p>
  </li>
</ol>

<h1 id="2-프레임워크-소스로-맞춰-개발해야-한다면-editable-install--멀티루트">2) 프레임워크 “소스”로 맞춰 개발해야 한다면 (editable install / 멀티루트)</h1>

<p>런타임과 동일한 버전의 <strong>소스</strong> 를 보고 싶거나, 프레임워크를 로컬에서 같이 수정 중이면:</p>

<ul>
  <li>프레임워크 repo를 옆에 체크아웃해 두고 <strong>editable install</strong> :
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">-e</span> ../framework-repo  <span class="c"># src 레이아웃이면 -e ../framework-repo[src]</span>
</code></pre></div>    </div>
  </li>
  <li>혹은 VS Code <strong>멀티 루트 워크스페이스</strong> 로 두 폴더를 함께 열고, Pylance가 경로를 알도록 <code class="language-plaintext highlighter-rouge">extraPaths</code>를 지정:<br />
<strong>.vscode/settings.json</strong>
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"python.defaultInterpreterPath"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/.venv/bin/python"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"python.analysis.extraPaths"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="s2">"../framework-repo"</span><span class="p">,</span><span class="w">          </span><span class="err">//</span><span class="w"> </span><span class="err">패키지</span><span class="w"> </span><span class="err">루트</span><span class="w">
    </span><span class="s2">"../framework-repo/src"</span><span class="w">       </span><span class="err">//</span><span class="w"> </span><span class="err">src</span><span class="w"> </span><span class="err">레이아웃일</span><span class="w"> </span><span class="err">때</span><span class="w">
  </span><span class="p">],</span><span class="w">
  </span><span class="nl">"python.analysis.typeCheckingMode"</span><span class="p">:</span><span class="w"> </span><span class="s2">"basic"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<h1 id="3-런타임에서만-syspath가-바뀌는-프레임워크플러그인확장-포인트일-때">3) 런타임에서만 sys.path가 바뀌는 프레임워크(플러그인/확장 포인트)일 때</h1>

<p>프레임워크가 실행 시점에만 경로를 추가한다면 에디터는 그걸 몰라. 두 가지 중 하나로 맞춰줘:</p>

<ul>
  <li>
    <p><strong>PYTHONPATH</strong> 사용 (VS Code가 로드하도록 <code class="language-plaintext highlighter-rouge">.env</code> 활용)</p>

    <ul>
      <li><strong>.vscode/settings.json</strong>
        <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"python.envFile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"${workspaceFolder}/.env"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li><strong>.env</strong>
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">PYTHONPATH</span><span class="o">=</span>../framework-runtime-path:../another/path
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>혹은 위의 <strong><code class="language-plaintext highlighter-rouge">python.analysis.extraPaths</code></strong>로 똑같은 경로를 넣어줘.</p>
  </li>
</ul>

<h1 id="4-타입정의만-필요할-때대형비공개-프레임워크">4) 타입/정의만 필요할 때(대형/비공개 프레임워크)</h1>

<p>실행 가능한 전체 설치가 부담스러우면 <strong>stub(.pyi)</strong> 만 만들어서 참조해도 “Go to Definition/타입 추론”이 좋아져.</p>

<ul>
  <li>Pyright로 스텁 생성:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyright <span class="nt">--createstub</span> &lt;framework_pkg_name&gt;
</code></pre></div>    </div>
  </li>
</ul>

<p>생성된 스텁 폴더를 프로젝트의 <code class="language-plaintext highlighter-rouge">typings/</code>에 두고:
    <code class="language-plaintext highlighter-rouge">json
    {
      "python.analysis.stubPath": "typings"
    }
   </code></p>

<ul>
  <li>mypy의 <code class="language-plaintext highlighter-rouge">stubgen</code>을 써도 됨:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> mypy.stubgen <span class="nt">-m</span> &lt;framework_pkg_name&gt; <span class="nt">-o</span> typings
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="5-도커원격-런타임에서만-설치되어-있을-때">5) 도커/원격 런타임에서만 설치되어 있을 때</h1>

<p>런타임이 Docker/원격(SSH)라면 <strong>Dev Containers</strong> 또는 <strong>Remote - SSH</strong> 확장으로 “코딩도 그 환경에서” 하게 만드는 게 제일 깔끔해. 그러면 에디터가 보는 인터프리터 == 런타임 인터프리터가 되어 경로 문제 자체가 사라짐.</p>

<h1 id="6-추가-팁-자잘하지만-유용">6) 추가 팁 (자잘하지만 유용)</h1>

<ul>
  <li>
    <p>경고만 잠깐 숨기려면(원인 해결 전 임시):</p>

    <ul>
      <li>파일 상단에 <code class="language-plaintext highlighter-rouge"># pyright: reportMissingImports=false</code> (혹은 해당 import 줄에 <code class="language-plaintext highlighter-rouge"># type: ignore[import]</code>)<br />
→ 근본 해결은 아님.</li>
    </ul>
  </li>
  <li>
    <p>네임스페이스 패키지(PEP 420)나 <code class="language-plaintext highlighter-rouge">src/</code> 레이아웃이면 <strong>패키지 루트</strong> 가 맞게 잡혔는지 확인.</p>
  </li>
  <li>
    <p>동적 속성/컴파일드 모듈이라 정의 점프가 어려우면:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">TYPE_CHECKING</span>
<span class="k">if</span> <span class="n">TYPE_CHECKING</span><span class="p">:</span>
    <span class="kn">from</span> <span class="n">framework</span> <span class="kn">import</span> <span class="n">FancyAPI</span>  <span class="c1"># 에디터용 힌트
</span></code></pre></div>    </div>
  </li>
</ul>

<hr />

<h2 id="가장-빠른-체크리스트">가장 빠른 체크리스트</h2>

<ol>
  <li>
    <p>VS Code에서 <strong>Python Interpreter</strong> 가 내가 쓰는 venv로 맞나?</p>
  </li>
  <li>
    <p>그 venv에 <strong>프레임워크가 설치</strong> 되어 있나(또는 <code class="language-plaintext highlighter-rouge">pip install -e</code>로 연결했나)?</p>
  </li>
  <li>
    <p>소스 트리라면 <strong><code class="language-plaintext highlighter-rouge">python.analysis.extraPaths</code>/<code class="language-plaintext highlighter-rouge">PYTHONPATH</code></strong>가 프레임워크 루트를 가리키나?</p>
  </li>
  <li>
    <p>특별한 경우엔 <strong>stub</strong> 생성해서 <code class="language-plaintext highlighter-rouge">stubPath</code> 설정.</p>
  </li>
</ol>

<p>원하시면 현재 프로젝트 구조(폴더 레이아웃/가상환경/설치 방식) 알려줘. 거기에 맞춘 <strong>settings.json / .env / 설치 커맨드</strong> 를 딱 맞게 써줄게.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Async request 취소 처리</title><link href="https://hvppyarchive.github.io/comfyui/async-request/" rel="alternate" type="text/html" title="Async request 취소 처리" /><published>2025-10-10T10:33:16+09:00</published><updated>2025-10-10T10:33:16+09:00</updated><id>https://hvppyarchive.github.io/comfyui/async-request-</id><content type="html" xml:base="https://hvppyarchive.github.io/comfyui/async-request/"><![CDATA[<p class="chat--user">

comfyui에서 custom node의 메인 함수를 async로 만들 수 있게 되었어. 그리고, openai python 패키지에서 AsyncOpenAI와 aiohttp를 이용해서 async하게 request를 보낼 수 있어. 근데 문제는 UI에서 stop을 보내고 interrupt가 즉시 동작하지 않는다는거야. request를 보낸 후 await 하는 도중에 작업이 취소되게 하고 싶어

</p>

<p>좋아, 핵심은 “네트워크 요청 await 중에도 바로 끊기게” 만드는 거야.<br />
asyncio에서는 <strong>취소 신호와 실제 작업을 ‘경쟁(race)’</strong> 시키면 돼. 즉, 요청을 <code class="language-plaintext highlighter-rouge">Task</code>로 만들고, UI에서 오는 stop 신호(이하 <code class="language-plaintext highlighter-rouge">stop_event</code>)의 <code class="language-plaintext highlighter-rouge">wait()</code>도 <code class="language-plaintext highlighter-rouge">Task</code>로 만들어서 <strong>둘 중 먼저 끝나는 쪽</strong> 을 보고 행동을 바꾸면 즉시 중단이 가능해.</p>

<p>아래를 그대로 가져다 쓸 수 있게 단계별(그리고 안전한) 패턴으로 정리했어.</p>

<hr />

<h1 id="1-공통-유틸-취소-가능한-await-래퍼">1) 공통 유틸: 취소 가능한 await 래퍼</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">class</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">UI stop/interrupt로 중단되었음을 나타내는 애플리케이션 레벨 예외.</span><span class="sh">"""</span>
    <span class="k">pass</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    coro(코루틴)와 stop_event.wait()를 경쟁시킨다.
    - stop이 먼저 오면 coro Task를 cancel하고 정리한 뒤 StopByUser를 올린다.
    - 요청이 먼저 끝나면 stop 대기 Task를 취소하고 결과를 반환한다.
    </span><span class="sh">"""</span>
    <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
    <span class="n">stop_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">stop_event</span><span class="p">.</span><span class="nf">wait</span><span class="p">())</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
            <span class="p">{</span><span class="n">req_task</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
        <span class="p">)</span>

        <span class="k">if</span> <span class="n">stop_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
            <span class="c1"># UI가 stop을 눌렀다: 네트워크 요청을 취소
</span>            <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="c1"># 취소 정리 끝까지 기다려 경고/리소스 누수 방지
</span>            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">req_task</span>
            <span class="k">raise</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopped by user</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 요청이 먼저 끝남: stop 대기는 취소
</span>        <span class="n">stop_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">stop_task</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">req_task</span>  <span class="c1"># 결과 리턴
</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 바깥 컨텍스트(ComfyUI 실행기)가 이 Task 자체를 취소한 경우: 바로 전파
</span>        <span class="k">raise</span>

    <span class="k">finally</span><span class="p">:</span>
        <span class="c1"># 혹시 남아있으면 확실히 정리
</span>        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">(</span><span class="n">req_task</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">t</span>
</code></pre></div></div>

<blockquote>
  <p>중요: 코드 어딘가에 <code class="language-plaintext highlighter-rouge">except Exception:</code> 같은 광범위한 예외 처리기가 있다면, <strong>반드시</strong><br />
 <code class="language-plaintext highlighter-rouge">except asyncio.CancelledError: raise</code> 를 <strong>맨 위에 따로</strong> 두어 취소가 삼켜지지 않게 하세요.<br />
 (파이썬 버전에 따라 <code class="language-plaintext highlighter-rouge">CancelledError</code>가 일반 <code class="language-plaintext highlighter-rouge">Exception</code>에 잡힐 수 있으니 명시적으로 분기하는 게 안전합니다.)</p>
</blockquote>

<hr />

<h1 id="2-comfyui-커스텀-노드mainasync에서-적용">2) ComfyUI 커스텀 노드(main=async)에서 적용</h1>

<p>ComfyUI가 stop을 누르면 내부적으로 “중단 플래그/이벤트”가 켜질 텐데, 그걸 <code class="language-plaintext highlighter-rouge">stop_event</code>(asyncio.Event 호환)로 받는다고 가정해 보자.<br />
(ComfyUI에서 제공하는 실제 인터럽트 신호를 어떻게 얻는지는 프로젝트마다 다를 수 있어. 노드에 주입 받거나, 실행 컨텍스트에서 꺼내 쓰는 식으로 연결해 주면 된다.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">class</span> <span class="nc">AsyncLLMNode</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">main</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1"># stop_event는 ComfyUI 쪽에서 넘겨주도록 연결해 두는 걸 권장
</span>        <span class="k">if</span> <span class="n">stop_event</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># 최악의 경우를 대비한 더미 (즉시 완료되지 않음)
</span>            <span class="n">stop_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>

        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>  <span class="c1"># 필요시 api_key, base_url 등 설정
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># ◇ 비-스트리밍 요청 예시
</span>            <span class="n">coro</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
            <span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">)</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>

        <span class="k">except</span> <span class="n">StopByUser</span><span class="p">:</span>
            <span class="c1"># ComfyUI가 즉시 멈췄음을 위쪽으로 알리거나, 빈 결과/상태 메시지를 반환
</span>            <span class="c1"># ComfyUI 쪽 정책에 맞춰 raise/return 중 하나를 선택
</span>            <span class="k">raise</span>  <span class="c1"># 보통은 raise로 전파하는 게 인터럽트 체인에 충실
</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 바깥에서 Task 자체가 취소된 경우
</span>            <span class="k">raise</span>

        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># http 커넥션 정리
</span>            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="3-스트리밍부분-응답일-때도-즉시-중단">3) 스트리밍(부분 응답)일 때도 즉시 중단</h1>

<p>스트리밍은 내부적으로 <code class="language-plaintext highlighter-rouge">async for</code>로 청크를 읽는 동안 <code class="language-plaintext highlighter-rouge">__anext__()</code>에서 블록돼서<br />
stop을 눌러도 바로 반응을 못할 수 있어. 이때도 <strong>chunk 읽기 vs stop</strong> 를 경쟁시키면 해결돼.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="c1"># 새로운 Responses API 예시 (필요에 맞춰 Chat Completions로 바꿔도 동일 패턴)
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span>
    <span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
        <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>  <span class="c1"># 텍스트 청크 이터레이터
</span>        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
            <span class="n">stop_task</span>  <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">stop_event</span><span class="p">.</span><span class="nf">wait</span><span class="p">())</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
                <span class="p">{</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
            <span class="p">)</span>

            <span class="k">if</span> <span class="n">stop_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="c1"># 읽기 중단 + 연결 정리
</span>                <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">next_chunk</span>
                <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># 서버 쪽 스트림도 닫기
</span>                <span class="k">raise</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopped by user</span><span class="sh">"</span><span class="p">)</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
            <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                <span class="c1"># 스트림 종료
</span>                <span class="k">break</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">stop_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">stop_task</span>

        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
</code></pre></div></div>

<p>ComfyUI 노드에서:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">stop_event</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">stop_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>
    <span class="k">except</span> <span class="n">StopByUser</span><span class="p">:</span>
        <span class="k">raise</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-aiohttp-순수-사용-시-예시">4) aiohttp 순수 사용 시 예시</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">from</span> <span class="n">yarl</span> <span class="kn">import</span> <span class="n">URL</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">fetch_json_cancellable</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">aiohttp</span><span class="p">.</span><span class="nc">ClientSession</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
        <span class="c1"># POST 코루틴 생성
</span>        <span class="k">async</span> <span class="k">def</span> <span class="nf">do_post</span><span class="p">():</span>
            <span class="k">async</span> <span class="k">with</span> <span class="n">session</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span> <span class="k">as</span> <span class="n">resp</span><span class="p">:</span>
                <span class="n">resp</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">resp</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>

        <span class="k">return</span> <span class="k">await</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="nf">do_post</span><span class="p">(),</span> <span class="n">stop_event</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>참고: <code class="language-plaintext highlighter-rouge">aiohttp</code>는 Task 취소 시 소켓을 닫으며 <code class="language-plaintext highlighter-rouge">CancelledError</code>가 전파돼요.<br />
 위의 패턴처럼 <em>항상</em> loser task를 <code class="language-plaintext highlighter-rouge">cancel()</code>하고 <code class="language-plaintext highlighter-rouge">await</code>해서 경고 없이 정리하세요.</p>
</blockquote>

<hr />

<h1 id="5-흔한-즉시-중단이-안-되는-원인-체크리스트">5) 흔한 “즉시 중단이 안 되는” 원인 체크리스트</h1>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">CancelledError</code>를 삼키는 예외 처리</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">except Exception:</code> 이 있다면 바로 위에 <code class="language-plaintext highlighter-rouge">except asyncio.CancelledError: raise</code> 를 추가.</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">await</code> 없이 동기 블로킹 코드</strong></p>

    <ul>
      <li>CPU 바운드 루프/블로킹 I/O는 이벤트 루프를 막아 취소가 늦어짐 → <code class="language-plaintext highlighter-rouge">await</code> 가능한 API로 바꾸거나, <code class="language-plaintext highlighter-rouge">run_in_executor()</code>로 분리.</li>
    </ul>
  </li>
  <li>
    <p><strong>스트리밍 루프에서 stop을 안 보고 있음</strong></p>

    <ul>
      <li>위의 “스트리밍 경쟁” 패턴으로 <code class="language-plaintext highlighter-rouge">__anext__()</code>와 <code class="language-plaintext highlighter-rouge">stop_event.wait()</code>를 경쟁시키기.</li>
    </ul>
  </li>
  <li>
    <p><strong>정리(cleanup)를 취소가 덮어버림</strong></p>

    <ul>
      <li>정리 과정은 <code class="language-plaintext highlighter-rouge">asyncio.shield()</code>로 감싸거나 <code class="language-plaintext highlighter-rouge">with contextlib.suppress(asyncio.CancelledError)</code>로 마무리.</li>
    </ul>
  </li>
  <li>
    <p><strong>긴 네트워크 타임아웃</strong></p>

    <ul>
      <li>취소 자체는 타임아웃과 무관하지만, 라이브러리 정리가 지연될 수 있음 → 세션/스트림을 <code class="language-plaintext highlighter-rouge">close()</code> 해주기.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="6-comfyui-쪽-stop_event-연결-팁">6) ComfyUI 쪽 ‘stop_event’ 연결 팁</h1>

<ul>
  <li>
    <p>프로젝트에 따라 다르지만, 보통 <strong>실행 컨텍스트</strong> 나 <strong>노드 인자 주입</strong> 으로 <code class="language-plaintext highlighter-rouge">asyncio.Event</code>를 받을 수 있게 해두면 가장 깔끔해.</p>
  </li>
  <li>
    <p>만약 지금은 그런 훅이 없다면:</p>

    <ul>
      <li>
        <p>최소한 주기적으로 확인하는 polling을 넣는 대신, <strong>위의 경쟁 패턴</strong> 을 사용하면 “await 중에도” 바로 반응한다.</p>
      </li>
      <li>
        <p>stop을 누를 때 노드 측에 <code class="language-plaintext highlighter-rouge">stop_event.set()</code>이 호출되도록 연결(주입)만 해주면 된다.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>필요하면 너의 현재 노드 코드 일부를 붙여줘. 거기에 맞춰 <code class="language-plaintext highlighter-rouge">await_cancellable</code>을 딱 들어맞게 리팩터링해 줄게.</p>

<p class="chat--user">

stop_event를 넣는다는게 뭔지 모르겠어. comfyui 내부적으로 interrupt 버튼이 있잖아? 그 버튼을 눌렀을 때 취소되면 좋겠어

</p>

<p>좋아, “UI의 Interrupt 버튼(또는 /interrupt)이 눌리면 내 async 커스텀 노드가 지금 <code class="language-plaintext highlighter-rouge">await</code> 중인 OpenAI 요청을 즉시 끊고 싶다”가 목표지요. 핵심은 <strong>ComfyUI가 인터럽트를 “플래그”로만 알리고, 실제로는 노드가 협조적으로 취소를 처리해야</strong> 한다는 점이에요. 아래를 그대로 넣으면 됩니다 — 단계별로 설명할게요.</p>

<hr />

<h2 id="1-comfyui가-인터럽트를-어떻게-알리냐">1) ComfyUI가 인터럽트를 어떻게 알리냐</h2>

<ul>
  <li>
    <p>프론트엔드 Interrupt 버튼/단축키가 <strong><code class="language-plaintext highlighter-rouge">POST /interrupt</code></strong> 를 호출합니다. 서버는 내부 인터럽트 플래그를 세팅해요. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI+2</a></p>
  </li>
  <li>
    <p>실행기는 다음 노드 경계 혹은 노드 내부에서 체크될 때 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code></strong> 으로 중단을 전파하고, 웹소켓 이벤트 <strong><code class="language-plaintext highlighter-rouge">execution_interrupted</code></strong> 를 보냅니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>단, <strong>노드가 블로킹 상태(타이트 루프/블로킹 I/O)</strong> 면 인터럽트가 바로 처리되지 않을 수 있습니다. 그래서 노드가 <strong>주기적으로 인터럽트를 체크</strong> 하거나 <strong><code class="language-plaintext highlighter-rouge">await</code> 를 취소</strong>해 줘야 해요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/3131?utm_source=chatgpt.com">GitHub</a></p>
  </li>
</ul>

<hr />

<h2 id="2-커스텀-노드에서-협조적-취소를-붙이는-가장-쉬운-방법">2) 커스텀 노드에서 “협조적 취소”를 붙이는 가장 쉬운 방법</h2>

<p>ComfyUI는 <code class="language-plaintext highlighter-rouge">comfy.model_management.throw_exception_if_processing_interrupted()</code> 를 제공합니다. 이걸 주기적으로 호출하면 인터럽트 시 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 을 던져요. (공식 코드와 여러 예시 노드에서 사용됩니다.) <a href="https://gitee.com/bug531/comfy-ui/blob/master/main.py?skip_mobile=true&amp;utm_source=chatgpt.com">Gitee+2</a></p>

<p>아이디어: <strong>요청 태스크</strong> 와 <strong>인터럽트 감시 태스크</strong> 를 동시에 돌리고, 감지되면 요청 태스크를 <code class="language-plaintext highlighter-rouge">cancel()</code>로 끊습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 커스텀 노드 파일 안
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_watch_interrupt_and_cancel</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">ComfyUI 인터럽트가 오면 주어진 task를 cancel()</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>  <span class="c1"># 폴링 주기
</span>            <span class="n">mm</span><span class="p">.</span><span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>  <span class="c1"># 인터럽트면 예외 발생
</span>    <span class="k">except</span> <span class="n">mm</span><span class="p">.</span><span class="n">InterruptProcessingException</span><span class="p">:</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>  <span class="c1"># 메인 요청 취소
</span>
<span class="k">class</span> <span class="nc">MyAsyncNode</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">example</span><span class="sh">"</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>  <span class="c1"># 필요 시 api_key, base_url, timeout 등 설정
</span>
        <span class="c1"># 1) OpenAI 비동기 요청을 태스크로 생성
</span>        <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
            <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>          <span class="c1"># 선택: 요청 타임아웃
</span>                <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span>         <span class="c1"># 선택: 재시도 비활성화(취소 응답을 빠르게)
</span>            <span class="p">)</span>
        <span class="p">)</span>

        <span class="c1"># 2) 인터럽트 감시 태스크 시작
</span>        <span class="n">watcher</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_watch_interrupt_and_cancel</span><span class="p">(</span><span class="n">req_task</span><span class="p">))</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 3) 결과 대기 — 인터럽트 시 req_task가 CancelledError로 깨짐
</span>            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 4) ComfyUI에 “사용자 인터럽트”로 알리려면 이 예외로 승격
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># 5) 워처 정리
</span>            <span class="n">watcher</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">watcher</span>
</code></pre></div></div>

<h3 id="왜-이렇게-하느냐">왜 이렇게 하느냐?</h3>

<ul>
  <li>
    <p><strong>UI 버튼</strong> → <code class="language-plaintext highlighter-rouge">/interrupt</code> → 내부 플래그 on. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>감시 코루틴이 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code> 호출 중 <strong>예외를 받음</strong> → <strong><code class="language-plaintext highlighter-rouge">req_task.cancel()</code></strong> → <code class="language-plaintext highlighter-rouge">await</code>가 즉시 <code class="language-plaintext highlighter-rouge">CancelledError</code> 로 깨짐 → 이를 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 으로 다시 던져</strong> ComfyUI가 <em>“Processing interrupted”</em> 경로로 종료. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI+1</a></p>
  </li>
</ul>

<hr />

<h2 id="3-대안-asynciowait로-레이스-구성">3) 대안: <code class="language-plaintext highlighter-rouge">asyncio.wait()</code>로 “레이스” 구성</h2>

<p>폴링 코드를 줄이고 싶다면, “인터럽트 대기 코루틴”과 요청을 <strong>레이스</strong> 시키는 방법도 있어요:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt</span><span class="p">():</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
        <span class="n">mm</span><span class="p">.</span><span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>

<span class="c1"># ...
</span><span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(...))</span>
<span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt</span><span class="p">())</span>

<span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
    <span class="p">{</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
    <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="nf">return </span><span class="p">(</span> <span class="p">(</span><span class="k">await</span> <span class="n">req_task</span><span class="p">).</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="4-자주-겪는-함정--팁">4) 자주 겪는 함정 &amp; 팁</h2>

<ul>
  <li>
    <p><strong>블로킹 코드</strong>(동기 HTTP, 무한 루프 등)가 있으면 인터럽트가 “즉시” 안 먹힙니다. 네트워크는 반드시 <strong>aiohttp/비동기</strong> 를 쓰고, 루프 안에는 간간이 <code class="language-plaintext highlighter-rouge">mm.throw_exception_if_processing_interrupted()</code> 를 넣으세요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/3131?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p><strong>OpenAI 비동기 클라이언트</strong> 는 <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code> 를 쓰면 됩니다(요청 옵션에 <code class="language-plaintext highlighter-rouge">timeout</code> 등 전달 가능).</p>
  </li>
  <li>
    <p><strong>취소 전파</strong> : <code class="language-plaintext highlighter-rouge">asyncio.CancelledError</code> 를 <strong>잡아서</strong> <code class="language-plaintext highlighter-rouge">mm.InterruptProcessingException</code> 으로 <strong>다시 던지는 것</strong> 이 포인트입니다 — 그래야 UI에 정상적인 “중단”으로 보입니다.</p>
  </li>
  <li>
    <p><strong>키보드 단축키</strong> 도 인터럽트를 보냅니다(Ctrl+Alt+Enter). <a href="https://docs.comfy.org/interface/shortcuts?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
</ul>

<hr />

<h2 id="5-동작-원리-한눈-요약">5) 동작 원리 한눈 요약</h2>

<ol>
  <li>
    <p>유저가 Interrupt 클릭 → <strong><code class="language-plaintext highlighter-rouge">POST /interrupt</code></strong> 호출 → 내부 플래그 on. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>내 노드의 “인터럽트 워처”가 플래그 감지 → <strong>요청 태스크 cancel()</strong>.</p>
  </li>
  <li>
    <p>내 코드가 <code class="language-plaintext highlighter-rouge">CancelledError</code> 를 받아 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 재-발생</strong> → 실행기에서 <strong><code class="language-plaintext highlighter-rouge">execution_interrupted</code></strong> 이벤트 전송 &amp; 즉시 중단. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
</ol>

<p>이렇게 붙이면 “UI에서 정지 → 곧장 당신의 <code class="language-plaintext highlighter-rouge">await</code>가 끊기는” 동작을 안정적으로 만들 수 있어요.</p>]]></content><author><name>hvppyarchive</name></author><category term="comfyui" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ComfyUI 설정 파일 개발</title><link href="https://hvppyarchive.github.io/comfyui/comfyui-custom-node-config/" rel="alternate" type="text/html" title="ComfyUI 설정 파일 개발" /><published>2025-10-02T13:39:43+09:00</published><updated>2025-10-02T13:39:43+09:00</updated><id>https://hvppyarchive.github.io/comfyui/comfyui-custom-node-config</id><content type="html" xml:base="https://hvppyarchive.github.io/comfyui/comfyui-custom-node-config/"><![CDATA[<p class="chat--user">

ComfyUI Custom Node의 Config들을 저장 파일을 개발해줘. config 파일을 사람이 수정하기 쉬운 파일 형식으로 수정 해줘. 파일을 저장하지 않고 설정을 읽기만 하는 readonly 모드로 동작하면 돼. 여러 설정을 저장할거지만 주 용도는 LLM 엔드포인트 정보를 담을거야. 각 LLM Model 별로 (디스플레이용 모델명, 실제 모델명(request시), base url, api key)를 저장하면 돼. Config 정보에 관한 요청이 들어오면(e.g. api 날릴 때 등) 해당하는 값을 리턴하면 돼. 이 때 config 파일이 초기 read했을 때와 바뀌었을 수도 있어. 조금 반영이 늦더라도 1분 이내에는 변경된 값을 리턴해야해. 

</p>

<p>좋아요! “사람이 직접 수정하기 쉬운 설정 파일” + “읽기 전용(파일 저장 X)” + “최대 1분 내 최신값 반영” 조건을 만족하는 ComfyUI 커스텀 노드 패키지를 설계/구현해 드릴게요.<br />
아래 그대로 복사해 넣으면 바로 동작합니다.</p>

<hr />

<h1 id="1-파일-구조">1) 파일 구조</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ComfyUI/
└─ custom_nodes/
   └─ comfyui_llm_config_reader/
      ├─ __init__.py
      ├─ llm_config_reader.py     <span class="c"># 커스텀 노드 + 설정 로더</span>
      └─ llm_config.toml          <span class="c"># 사람이 읽고 수정하기 쉬운 TOML 설정 파일</span>
</code></pre></div></div>

<blockquote>
  <p>기본 경로는 <code class="language-plaintext highlighter-rouge">llm_config.toml</code> 이고, <code class="language-plaintext highlighter-rouge">LLM_CONFIG_PATH</code> 환경변수로 바꿀 수 있어요.</p>
</blockquote>

<hr />

<h1 id="2-설정-파일-예시-toml">2) 설정 파일 예시 (TOML)</h1>

<p>사람이 손으로 편집하기 쉽고, 주석도 넣기 좋은 TOML을 사용합니다.<br />
(API Key는 깃에 올리지 않도록 환경변수 치환도 지원해요.)</p>

<p><code class="language-plaintext highlighter-rouge">llm_config.toml</code></p>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 버전 정보(선택)</span>
<span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="c"># 파일 변경 반영 주기(초). 60초 이내 최신값 요구이므로 기본 30초로 여유 있게.</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>

<span class="nn">[llm_models."gpt-4o-mini"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"GPT-4o mini"</span>
<span class="py">request_model</span> <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>   <span class="c"># 환경변수로 안전하게 주입</span>

<span class="nn">[llm_models."claude-3-5-sonnet"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Claude 3.5 Sonnet"</span>
<span class="py">request_model</span> <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>

<span class="c"># 원하는 만큼 모델을 계속 추가</span>
<span class="c"># [llm_models."문자열키"] ...</span>
</code></pre></div></div>

<ul>
  <li>
    <p>키 선택 규칙: <code class="language-plaintext highlighter-rouge">llm_models."&lt;키&gt;"</code> 의 <code class="language-plaintext highlighter-rouge">&lt;키&gt;</code> 는 자유로운 문자열입니다.<br />
조회 시 <code class="language-plaintext highlighter-rouge">&lt;키&gt;</code>, <code class="language-plaintext highlighter-rouge">display_name</code>, <code class="language-plaintext highlighter-rouge">request_model</code> 셋 중 어느 걸로 입력해도 매칭되도록 했어요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${ENV_NAME}</code> 형태는 환경변수로 치환됩니다.</p>
  </li>
</ul>

<hr />

<h1 id="3-커스텀-노드로더-코드">3) 커스텀 노드/로더 코드</h1>

<p><code class="language-plaintext highlighter-rouge">comfyui_llm_config_reader/llm_config_reader.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="c1"># Python 3.11+ tomllib, 3.10 이하면 tomli 사용
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">문자열 내 ${ENV} 패턴을 환경변수로 치환. 그 외 타입은 그대로 반환.</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">value</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">env_name</span> <span class="o">=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">]</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">env_name</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">value</span>

<span class="k">def</span> <span class="nf">_normalize_key</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">매칭 편의를 위한 정규화(소문자, 앞뒤 공백 제거).</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - TOML 설정을 읽어서 메모리에 캐시
    - 파일이 바뀌었거나 refresh_interval이 지났으면 재로드
    - 쓰기는 절대 하지 않음 (read-only)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
            <span class="sh">"</span><span class="s">LLM_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">),</span> <span class="sh">"</span><span class="s">llm_config.toml</span><span class="sh">"</span><span class="p">),</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">30</span>  <span class="c1"># 기본 30초(&lt;= 60초 요구 충족)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># 정규화 키 -&gt; 모델 dict
</span>
    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="n">models</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_models</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">model_key</span><span class="p">,</span> <span class="n">cfg</span> <span class="ow">in</span> <span class="n">models</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="c1"># 환경변수 치환
</span>            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>

            <span class="c1"># 필수 필드 체크
</span>            <span class="n">required</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">missing</span> <span class="o">=</span> <span class="p">[</span><span class="n">k</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">required</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()]</span>
            <span class="k">if</span> <span class="n">missing</span><span class="p">:</span>
                <span class="c1"># 불완전한 엔트리는 스킵 (명확한 로그가 필요하면 print 가능)
</span>                <span class="k">continue</span>

            <span class="c1"># 모델 접근을 위한 다양한 키들 인덱싱
</span>            <span class="n">candidates</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">model_key</span><span class="p">),</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">candidates</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">[</span><span class="nf">_normalize_key</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">}</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>
        <span class="c1"># settings.refresh_interval_seconds 반영 (최소 5초, 최대 60초로 가드)
</span>        <span class="n">refresh</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span>
            <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">refresh</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">refresh</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span>
            <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LLM_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">,</span> <span class="n">refresh</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">mtime</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">get_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">key는 모델 키/표시명/요청용 모델명 중 아무거나 가능.</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">model key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_normalize_key</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="c1"># 최신 반영 지연 가능성을 고려해 한 번 더 강제 리로드 후 재시도
</span>            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_normalize_key</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">model not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">list_models</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">디버그/인스펙션용: (표시명, 요청모델, base_url만 노출하는 안전 리스트).</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># 역으로 display_name 기준 집계
</span>        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="c1"># api_key는 보안상 미노출
</span>            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="c1"># 전역 싱글톤 로더 (ComfyUI 노드들이 공유)
</span><span class="n">_CONFIG</span> <span class="o">=</span> <span class="nc">ReadOnlyConfig</span><span class="p">()</span>

<span class="c1"># ===== ComfyUI Custom Nodes =====
</span><span class="k">class</span> <span class="nc">LLMConfigLookup</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력: model_key (문자열)  — 예: </span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">GPT-4o mini</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="s">(request_model)
    출력: display_name, request_model, base_url, api_key (모두 STRING)
    </span><span class="sh">"""</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">model_key</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">}),</span>
            <span class="p">},</span>
        <span class="p">}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lookup</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM/Config</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">_CONFIG</span><span class="p">.</span><span class="nf">get_model</span><span class="p">(</span><span class="n">model_key</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="c1"># ComfyUI에서 에러가 보이도록 예외 전달
</span>            <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[LLMConfigLookup] </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">])</span>

<span class="k">class</span> <span class="nc">LLMConfigListModels</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    디버그용: 사용 가능한 모델들의 (표시명, 요청모델, base_url) JSON을 반환.
    </span><span class="sh">"""</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">models_json</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">list_models</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM/Config</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">list_models</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="kn">import</span> <span class="n">json</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">_CONFIG</span><span class="p">.</span><span class="nf">list_models</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">),)</span>

<span class="c1"># ComfyUI 등록용 매핑
</span><span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LLMConfigLookup</span><span class="sh">"</span><span class="p">:</span> <span class="n">LLMConfigLookup</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">LLMConfigListModels</span><span class="sh">"</span><span class="p">:</span> <span class="n">LLMConfigListModels</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LLMConfigLookup</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LLM: Config Lookup (ReadOnly)</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">LLMConfigListModels</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LLM: List Models (ReadOnly)</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">comfyui_llm_config_reader/__init__.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 빈 파일이면 충분합니다. (패키지 인식용)
</span></code></pre></div></div>

<hr />

<h1 id="4-동작-보장요구사항-매핑">4) 동작 보장(요구사항 매핑)</h1>

<ol>
  <li>
    <p><strong>사람이 수정하기 쉬운 포맷</strong> : TOML 사용 + 주석 가능 + 간결한 키/값 구조.</p>
  </li>
  <li>
    <p><strong>읽기 전용</strong> : 코드 어디에서도 파일을 쓰지 않음. 오직 읽기/파싱만 수행.</p>
  </li>
  <li>
    <p><strong>다중 설정(특히 LLM 엔드포인트)</strong> : <code class="language-plaintext highlighter-rouge">llm_models."&lt;키&gt;"</code>마다</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">display_name</code>, <code class="language-plaintext highlighter-rouge">request_model</code>, <code class="language-plaintext highlighter-rouge">base_url</code>, <code class="language-plaintext highlighter-rouge">api_key</code> 저장.</li>
    </ul>
  </li>
  <li>
    <p><strong>요청 시 해당 값 리턴</strong> : <code class="language-plaintext highlighter-rouge">LLMConfigLookup</code> 노드가 입력 <code class="language-plaintext highlighter-rouge">model_key</code>로 검색하여 4개 값을 출력.</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">&lt;키&gt;</code> / <code class="language-plaintext highlighter-rouge">display_name</code> / <code class="language-plaintext highlighter-rouge">request_model</code> 중 무엇으로 넣어도 매칭됨.</li>
    </ul>
  </li>
  <li>
    <p><strong>변경 반영(최대 1분)</strong> :</p>

    <ul>
      <li>
        <p>파일 <code class="language-plaintext highlighter-rouge">mtime</code> 변화 감지 + <code class="language-plaintext highlighter-rouge">refresh_interval_seconds</code>(기본 30초) 또는 <code class="language-plaintext highlighter-rouge">LLM_CONFIG_REFRESH_SECONDS</code>(env) 기준 TTL 캐시.</p>
      </li>
      <li>
        <p>호출 시마다 <strong>stale 또는 변경</strong> 이면 즉시 재로드 → <strong>최대 60초 이내</strong> 최신값 보장.</p>
      </li>
      <li>
        <p>신규 항목이 추가된 직후에도, 다음 호출 때 최대 TTL 뒤에는 반영.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>보안 고려</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">${ENV}</code> 치환 지원으로 API Key를 환경변수에서 주입 가능.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ListModels</code> 노드에서는 API Key 미노출.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="5-사용-방법-간단">5) 사용 방법 (간단)</h1>

<ol>
  <li>
    <p>위 파일 구조대로 복사 → ComfyUI 재실행.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">llm_config.toml</code> 에 모델들을 추가/수정.</p>
  </li>
  <li>
    <p>워크플로우에서 <strong>LLM: Config Lookup (ReadOnly)</strong> 노드 배치 → <code class="language-plaintext highlighter-rouge">model_key</code> 입력(예: <code class="language-plaintext highlighter-rouge">gpt-4o-mini</code>).</p>
  </li>
  <li>
    <p>노드 출력 4개(표시명/요청모델/base_url/api_key)를 원하는 LLM 호출 노드에 연결.</p>
  </li>
  <li>
    <p>설정 파일을 수정하면, <strong>최대 30초(기본) 내</strong> 새 값이 자동 반영됩니다. (환경변수로 5~60초 사이 튜닝 가능)</p>
  </li>
</ol>

<hr />

<h1 id="6-커스터마이징-팁">6) 커스터마이징 팁</h1>

<ul>
  <li>
    <p><strong>YAML 선호 시</strong> : <code class="language-plaintext highlighter-rouge">tomllib</code> 대신 <code class="language-plaintext highlighter-rouge">yaml.safe_load</code>로 바꾸고 파일 확장자만 <code class="language-plaintext highlighter-rouge">.yaml</code>로 바꾸면 됩니다.</p>
  </li>
  <li>
    <p><strong>모델 키 자동 드롭다운</strong> : ComfyUI의 동적 입력 UI가 필요하면, <code class="language-plaintext highlighter-rouge">INPUT_TYPES</code>를 주기적으로 재구성하는 커스텀 프론트엔드가 필요합니다. 기본 구현은 문자열 입력으로 단순/견고하게 처리했습니다.</p>
  </li>
  <li>
    <p><strong>필드 확장</strong> : per-model 타임아웃, 헤더 등 추가 필드가 필요하면 TOML에 키를 늘리고 <code class="language-plaintext highlighter-rouge">_build_index</code>에서 그대로 통과시켜 출력을 늘리면 됩니다.</p>
  </li>
</ul>

<hr />

<p>원하시면 YAML 버전 또는 특정 LLM 호출 노드(예: OpenAI/Anthropic 커넥터)까지 바로 연결되는 노드도 추가로 만들어 드릴게요.</p>

<p class="chat--user">

좋은데 LLM 말고도 다른 설정들도 저장할 수 있는 범용적 config 파일이라서 파일명을 바꿔주면 좋겠어

</p>

<p>좋은 포인트예요! 범용 설정 파일로 쓰기 좋게 <strong>파일명을 <code class="language-plaintext highlighter-rouge">config.toml</code></strong>로 바꾸고, 코드/환경변수도 <strong>일반화</strong> 했습니다. (이전 <code class="language-plaintext highlighter-rouge">llm_config.toml</code>·<code class="language-plaintext highlighter-rouge">LLM_CONFIG_PATH</code>도 자동 하위 호환)</p>

<p>아래 그대로 교체/추가하면 됩니다.</p>

<hr />

<h1 id="변경-요약-step-by-step">변경 요약 (step-by-step)</h1>

<ol>
  <li>
    <p>설정 파일 기본명을 <code class="language-plaintext highlighter-rouge">config.toml</code>로 변경</p>
  </li>
  <li>
    <p>경로 환경변수도 일반화: <strong><code class="language-plaintext highlighter-rouge">COMFY_CONFIG_PATH</code></strong> (구 <code class="language-plaintext highlighter-rouge">LLM_CONFIG_PATH</code>도 인식)</p>
  </li>
  <li>
    <p>새로고침 주기 환경변수: <strong><code class="language-plaintext highlighter-rouge">COMFY_CONFIG_REFRESH_SECONDS</code></strong> (구 <code class="language-plaintext highlighter-rouge">LLM_CONFIG_REFRESH_SECONDS</code>도 인식)</p>
  </li>
  <li>
    <p>코드가 <code class="language-plaintext highlighter-rouge">config.toml</code>을 우선 사용, 없으면 기존 <code class="language-plaintext highlighter-rouge">llm_config.toml</code> 자동 폴백</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">[llm_models]</code> 외에 임의 섹션(<code class="language-plaintext highlighter-rouge">[feature_flags]</code>, <code class="language-plaintext highlighter-rouge">[storage]</code> 등) 자유 확장 가능</p>
  </li>
</ol>

<hr />

<h1 id="디렉토리-구조">디렉토리 구조</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ComfyUI/
└─ custom_nodes/
   └─ comfyui_llm_config_reader/
      ├─ __init__.py
      ├─ llm_config_reader.py     <span class="c"># (교체본) 범용 config 로더 + LLM 조회 노드</span>
      └─ config.toml              <span class="c"># ← 새 기본 설정 파일명 (범용)</span>
      <span class="c"># └─ llm_config.toml        # (선택) 기존 파일명도 계속 동작(폴백)</span>
</code></pre></div></div>

<hr />

<h1 id="예시-configtoml-범용">예시 <code class="language-plaintext highlighter-rouge">config.toml</code> (범용)</h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="c"># 파일 변경 반영 주기(초). 1분 이내 요구 → 기본 30초.</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>

<span class="c"># ── LLM 엔드포인트들 ──────────────────────────────────────────────</span>
<span class="nn">[llm_models."gpt-4o-mini"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"GPT-4o mini"</span>
<span class="py">request_model</span> <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>

<span class="nn">[llm_models."claude-3-5-sonnet"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Claude 3.5 Sonnet"</span>
<span class="py">request_model</span> <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>

<span class="c"># ── (예) 다른 범용 설정 섹션들 ───────────────────────────────────</span>
<span class="nn">[feature_flags]</span>
<span class="py">use_cache</span> <span class="p">=</span> <span class="kc">true</span>
<span class="py">show_beta</span> <span class="p">=</span> <span class="kc">false</span>

<span class="nn">[storage.s3]</span>
<span class="py">bucket</span> <span class="p">=</span> <span class="s">"my-bucket"</span>
<span class="py">region</span> <span class="p">=</span> <span class="s">"ap-northeast-2"</span>
<span class="py">access_key</span> <span class="p">=</span> <span class="s">"${S3_ACCESS_KEY}"</span>
<span class="py">secret_key</span> <span class="p">=</span> <span class="s">"${S3_SECRET_KEY}"</span>
</code></pre></div></div>

<ul>
  <li>
    <p>임의 섹션은 <strong>그대로 저장</strong> 되며, LLM 노드는 <code class="language-plaintext highlighter-rouge">[llm_models]</code>만 사용합니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${ENV}</code> 표기값은 환경변수로 치환됩니다.</p>
  </li>
</ul>

<hr />

<h1 id="교체본-코드-llm_config_readerpy">교체본 코드: <code class="language-plaintext highlighter-rouge">llm_config_reader.py</code></h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="c1"># Python 3.11+ tomllib, 3.10 이하면 tomli 사용
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">문자열 내 ${ENV} 패턴을 환경변수로 치환. 그 외 타입은 그대로.</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">value</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">env_name</span> <span class="o">=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">]</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">env_name</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">value</span>

<span class="k">def</span> <span class="nf">_normalize_key</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - TOML 설정을 읽어 메모리 캐시
    - 파일 mtime/TTL(최소 5s, 최대 60s) 기반 자동 재로드
    - 절대 쓰기 없음 (read-only)
    - 파일명 일반화:
        * 우선순위: COMFY_CONFIG_PATH &gt; LLM_CONFIG_PATH(하위호환) &gt;
                    ./config.toml &gt; ./llm_config.toml(하위호환)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># 1) 명시적 인자
</span>        <span class="n">explicit</span> <span class="o">=</span> <span class="n">path</span>

        <span class="c1"># 2) 환경변수 (일반화 + 하위호환)
</span>        <span class="n">env_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LLM_CONFIG_PATH</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 3) 기본 경로 탐색 (우선 config.toml, 없으면 llm_config.toml)
</span>        <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
        <span class="n">default_primary</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">default_legacy</span>  <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">llm_config.toml</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">explicit</span><span class="p">:</span>
            <span class="n">chosen</span> <span class="o">=</span> <span class="n">explicit</span>
        <span class="k">elif</span> <span class="n">env_path</span><span class="p">:</span>
            <span class="n">chosen</span> <span class="o">=</span> <span class="n">env_path</span>
        <span class="k">elif</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">default_primary</span><span class="p">):</span>
            <span class="n">chosen</span> <span class="o">=</span> <span class="n">default_primary</span>
        <span class="k">elif</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">default_legacy</span><span class="p">):</span>
            <span class="n">chosen</span> <span class="o">=</span> <span class="n">default_legacy</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 파일이 아직 없을 수 있으니 새 표준명으로 고정
</span>            <span class="n">chosen</span> <span class="o">=</span> <span class="n">default_primary</span>

        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">chosen</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">30</span>  <span class="c1"># 기본 30초 (&lt;=60초 요구 충족)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># 정규화 키 -&gt; LLM 모델 dict
</span>
    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_build_index_llm</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">[llm_models] 섹션만 인덱싱. 다른 섹션은 그대로 self._raw에 보존.</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="n">models</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_models</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">models</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">return</span>

        <span class="k">for</span> <span class="n">model_key</span><span class="p">,</span> <span class="n">cfg</span> <span class="ow">in</span> <span class="n">models</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="c1"># 환경변수 치환
</span>            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>

            <span class="c1"># 필수 필드 체크
</span>            <span class="n">required</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">missing</span> <span class="o">=</span> <span class="p">[</span><span class="n">k</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">required</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()]</span>
            <span class="k">if</span> <span class="n">missing</span><span class="p">:</span>
                <span class="c1"># 불완전 항목은 스킵
</span>                <span class="k">continue</span>

            <span class="c1"># 접근 키(모델키/표시명/요청모델) 인덱싱
</span>            <span class="n">candidates</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">model_key</span><span class="p">),</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">candidates</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">[</span><span class="nf">_normalize_key</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">}</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="c1"># refresh_interval_seconds (최소 5, 최대 60) + env override(일반/하위호환)
</span>        <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">conf_val</span><span class="p">))</span>
        <span class="n">env_override</span> <span class="o">=</span> <span class="p">(</span>
            <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
            <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LLM_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="k">if</span> <span class="n">env_override</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_override</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">pass</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span> <span class="o">=</span> <span class="n">conf_val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index_llm</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">mtime</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># ── LLM 전용 헬퍼 (기존 API 유지) ─────────────────────────────
</span>    <span class="k">def</span> <span class="nf">get_llm_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">model key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_normalize_key</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="c1"># 갱신 지연 가능성 → 강제 리로드 1회 재시도
</span>            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_normalize_key</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">model not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">list_llm_models</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_index</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="c1"># api_key는 보안상 미노출
</span>            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="c1"># ── 범용 접근(옵션): 원본 트리에서 임의 섹션 읽기 ─────────────
</span>    <span class="k">def</span> <span class="nf">get_raw_config</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">전체 설정 트리를 그대로(ENV 확장 후) 반환. 읽기 전용.</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>

<span class="c1"># 전역 싱글톤
</span><span class="n">_CONFIG</span> <span class="o">=</span> <span class="nc">ReadOnlyConfig</span><span class="p">()</span>

<span class="c1"># ===== ComfyUI Custom Nodes =====
</span><span class="k">class</span> <span class="nc">LLMConfigLookup</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력: model_key (문자열) — </span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="s"> / </span><span class="sh">"</span><span class="s">GPT-4o mini</span><span class="sh">"</span><span class="s"> / </span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="s">(request_model)
    출력: display_name, request_model, base_url, api_key
    </span><span class="sh">"""</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">model_key</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lookup</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM/Config</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">_CONFIG</span><span class="p">.</span><span class="nf">get_llm_model</span><span class="p">(</span><span class="n">model_key</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[LLMConfigLookup] </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span> <span class="n">m</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">])</span>

<span class="k">class</span> <span class="nc">LLMConfigListModels</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">디버그용: 사용 가능한 LLM 모델 목록(JSON) 반환 (API Key 미포함).</span><span class="sh">"""</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">models_json</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">list_models</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM/Config</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">list_models</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="kn">import</span> <span class="n">json</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">_CONFIG</span><span class="p">.</span><span class="nf">list_llm_models</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">),)</span>

<span class="c1"># (선택) 범용 조회 노드: 임의 경로를 JSONPath 유사 키로 조회하고 STRING 반환
</span><span class="k">class</span> <span class="nc">ConfigGetRawJSON</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    예) path=</span><span class="sh">"</span><span class="s">feature_flags.use_cache</span><span class="sh">"</span><span class="s"> → </span><span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="s">
        path=</span><span class="sh">"</span><span class="s">storage.s3.region</span><span class="sh">"</span><span class="s"> → </span><span class="sh">"</span><span class="s">ap-northeast-2</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"""</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">get_raw</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM/Config</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">get_raw</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="kn">import</span> <span class="n">json</span>
        <span class="k">def</span> <span class="nf">get_in</span><span class="p">(</span><span class="n">d</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">d</span>
            <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">cur</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">raw</span> <span class="o">=</span> <span class="n">_CONFIG</span><span class="p">.</span><span class="nf">get_raw_config</span><span class="p">()</span>
            <span class="n">val</span> <span class="o">=</span> <span class="nf">get_in</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span> <span class="k">if</span> <span class="n">path</span> <span class="k">else</span> <span class="n">raw</span>
            <span class="c1"># 스칼라면 문자열화, 그 외엔 JSON 문자열로 반환
</span>            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">))</span> <span class="ow">or</span> <span class="n">val</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="nf">return </span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">val</span><span class="p">),)</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">),)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[ConfigGetRawJSON] </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LLMConfigLookup</span><span class="sh">"</span><span class="p">:</span> <span class="n">LLMConfigLookup</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">LLMConfigListModels</span><span class="sh">"</span><span class="p">:</span> <span class="n">LLMConfigListModels</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigGetRawJSON</span><span class="sh">"</span><span class="p">:</span> <span class="n">ConfigGetRawJSON</span><span class="p">,</span>  <span class="c1"># ← 범용 읽기 노드(선택)
</span><span class="p">}</span>

<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LLMConfigLookup</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LLM: Config Lookup (ReadOnly)</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">LLMConfigListModels</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LLM: List Models (ReadOnly)</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigGetRawJSON</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Config: Get Raw JSON (ReadOnly)</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>노드/패키지명은 그대로 두고, <strong>파일명/환경변수/로더</strong> 만 일반화했습니다. 원하시면 패키지/노드 이름도 <code class="language-plaintext highlighter-rouge">comfyui_config_reader</code>로 리네임해 드릴 수 있어요.</p>
</blockquote>

<hr />

<h1 id="사용-방법-요약">사용 방법 (요약)</h1>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">config.toml</code>로 설정 저장(범용 섹션 자유 추가 가능).</p>
  </li>
  <li>
    <p>필요 시 경로 오버라이드: <code class="language-plaintext highlighter-rouge">COMFY_CONFIG_PATH=/abs/path/to/config.toml</code></p>
  </li>
  <li>
    <p>새로고침 주기 조정: <code class="language-plaintext highlighter-rouge">COMFY_CONFIG_REFRESH_SECONDS=10</code> (5~60 유효)</p>
  </li>
  <li>
    <p>ComfyUI에서</p>

    <ul>
      <li>
        <p><strong>LLM: Config Lookup</strong> → LLM 엔드포인트 4종 값 출력</p>
      </li>
      <li>
        <p><strong>Config: Get Raw JSON</strong> → 임의 설정 값 읽기 (예: <code class="language-plaintext highlighter-rouge">feature_flags.use_cache</code>)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>파일을 수정하면 <strong>최대 1분 내</strong>(기본 30초) 반영됩니다.</p>
  </li>
</ol>

<p>필요하면 폴더/노드 이름까지 “LLM”을 빼고 전면 리네이밍한 버전도 만들어 드릴게요.</p>

<p class="chat--user">

응 다 빼줘

</p>

<p>좋아—이제 “LLM” 흔적 전부 뺐어요. 패키지/노드/환경변수/카테고리/필드 이름까지 전부 <strong>범용(config/endpoint)</strong>으로 바꾼 최종본을 드립니다. 그대로 넣으면 작동합니다.</p>

<hr />

<h1 id="0-한눈에-보기-step-by-step">0) 한눈에 보기 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>폴더명 변경</strong> : <code class="language-plaintext highlighter-rouge">comfyui_config_reader</code> (이전 폴더 삭제해도 됨)</p>
  </li>
  <li>
    <p><strong>설정 파일명</strong> : <code class="language-plaintext highlighter-rouge">config.toml</code></p>
  </li>
  <li>
    <p><strong>환경변수</strong> :</p>

    <ul>
      <li>
        <p>경로: <code class="language-plaintext highlighter-rouge">COMFY_CONFIG_PATH</code></p>
      </li>
      <li>
        <p>새로고침: <code class="language-plaintext highlighter-rouge">COMFY_CONFIG_REFRESH_SECONDS</code> (5~60초)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>섹션 이름</strong> : <code class="language-plaintext highlighter-rouge">[endpoints."&lt;키&gt;"]</code> (필드: <code class="language-plaintext highlighter-rouge">display_name</code>, <code class="language-plaintext highlighter-rouge">request_name</code>, <code class="language-plaintext highlighter-rouge">base_url</code>, <code class="language-plaintext highlighter-rouge">api_key</code>)</p>
  </li>
  <li>
    <p><strong>노드 이름</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ConfigEndpointLookup</code> (엔드포인트 4종 값 반환)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ConfigListEndpoints</code> (엔드포인트 목록 JSON)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ConfigGetValue</code> (임의 경로 값 가져오기)</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="1-디렉토리-구조">1) 디렉토리 구조</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ComfyUI/
└─ custom_nodes/
   └─ comfyui_config_reader/
      ├─ __init__.py
      ├─ config_reader.py       <span class="c"># 커스텀 노드 + 읽기 전용 로더</span>
      └─ config.toml            <span class="c"># 사람이 편집하기 쉬운 TOML</span>
</code></pre></div></div>

<hr />

<h1 id="2-예시-configtoml-범용">2) 예시 <code class="language-plaintext highlighter-rouge">config.toml</code> (범용)</h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="c"># 파일 변경 반영 주기(초). "1분 내 반영" 요건 → 기본 30초.</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>

<span class="c"># ── 엔드포인트(예: 텍스트 모델, 임베딩 서비스, 사내 API 등) ─────────────</span>
<span class="nn">[endpoints."text-model-a"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Text Model A"</span>
<span class="py">request_name</span>  <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>         <span class="c"># 실제 요청에 쓸 식별자/모델명/버전 등</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>   <span class="c"># 환경변수 치환 지원</span>

<span class="nn">[endpoints."text-model-b"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Text Model B"</span>
<span class="py">request_name</span>  <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>

<span class="c"># ── 다른 범용 설정들 ────────────────────────────────────────────────</span>
<span class="nn">[feature_flags]</span>
<span class="py">use_cache</span> <span class="p">=</span> <span class="kc">true</span>
<span class="py">show_beta</span> <span class="p">=</span> <span class="kc">false</span>

<span class="nn">[storage.s3]</span>
<span class="py">bucket</span> <span class="p">=</span> <span class="s">"my-bucket"</span>
<span class="py">region</span> <span class="p">=</span> <span class="s">"ap-northeast-2"</span>
<span class="py">access_key</span> <span class="p">=</span> <span class="s">"${S3_ACCESS_KEY}"</span>
<span class="py">secret_key</span> <span class="p">=</span> <span class="s">"${S3_SECRET_KEY}"</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${ENV}</code> 표기는 환경변수로 자동 치환됩니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">endpoints."&lt;키&gt;"</code>의 <code class="language-plaintext highlighter-rouge">&lt;키&gt;</code>로, <code class="language-plaintext highlighter-rouge">display_name</code>·<code class="language-plaintext highlighter-rouge">request_name</code> 까지 <strong>모두 조회 키</strong> 로 사용할 수 있어요.</p>
  </li>
</ul>

<hr />

<h1 id="3-코드-config_readerpy">3) 코드: <code class="language-plaintext highlighter-rouge">config_reader.py</code></h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="c1"># Python 3.11+ tomllib / 3.10-: tomli
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">문자열 내 ${ENV} 패턴을 환경변수로 치환. 그 외 타입은 그대로.</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">value</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">env_name</span> <span class="o">=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">]</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">env_name</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">value</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - TOML을 읽어 메모리에 캐시
    - mtime/TTL(최소 5s, 최대 60s)로 자동 재로드
    - 파일 쓰기 없음(read-only)
    - 파일 결정 우선순위:  (1) 인자 path &gt; (2) COMFY_CONFIG_PATH &gt; (3) ./config.toml
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
        <span class="n">chosen</span> <span class="o">=</span> <span class="p">(</span>
            <span class="n">path</span>
            <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">)</span>
            <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">chosen</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">30</span>  <span class="c1"># 기본 30초(&lt;=60s 요건 충족)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># 정규화 키 -&gt; endpoint dict
</span>
    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_build_index_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="n">eps</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">endpoints</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">eps</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">return</span>

        <span class="k">for</span> <span class="n">ep_key</span><span class="p">,</span> <span class="n">cfg</span> <span class="ow">in</span> <span class="n">eps</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>

            <span class="c1"># 필수 필드
</span>            <span class="n">required</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">missing</span> <span class="o">=</span> <span class="p">[</span><span class="n">k</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">required</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()]</span>
            <span class="k">if</span> <span class="n">missing</span><span class="p">:</span>
                <span class="c1"># 불완전 항목은 스킵
</span>                <span class="k">continue</span>

            <span class="c1"># 접근 키: 정의 키 / display_name / request_name
</span>            <span class="n">candidates</span> <span class="o">=</span> <span class="p">{</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">ep_key</span><span class="p">),</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span>
                <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">candidates</span><span class="p">):</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]),</span>
                <span class="p">}</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="c1"># refresh_interval_seconds (5~60) + env override
</span>        <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">conf_val</span><span class="p">))</span>
        <span class="n">env_override</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_override</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_override</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">pass</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span> <span class="o">=</span> <span class="n">conf_val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">mtime</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># ── Endpoints 전용 API ─────────────────────────────────────────
</span>    <span class="k">def</span> <span class="nf">get_endpoint</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">endpoint key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="c1"># 갱신 지연 가능성 → 강제 리로드 1회 재시도
</span>            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">endpoint not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">list_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="c1"># api_key는 보안상 미노출
</span>            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="c1"># ── 범용 읽기 ──────────────────────────────────────────────────
</span>    <span class="k">def</span> <span class="nf">get_raw</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>

<span class="c1"># 전역 싱글톤
</span><span class="n">_CONFIG</span> <span class="o">=</span> <span class="nc">ReadOnlyConfig</span><span class="p">()</span>

<span class="c1"># ===== ComfyUI Custom Nodes =====
</span><span class="k">class</span> <span class="nc">ConfigEndpointLookup</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력: key — </span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="s"> / </span><span class="sh">"</span><span class="s">Text Model A</span><span class="sh">"</span><span class="s"> / </span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="s">(request_name)
    출력: display_name, request_name, base_url, api_key (모두 STRING)
    </span><span class="sh">"""</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lookup</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Config/Endpoints (ReadOnly)</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">ep</span> <span class="o">=</span> <span class="n">_CONFIG</span><span class="p">.</span><span class="nf">get_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[ConfigEndpointLookup] </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">],</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">])</span>

<span class="k">class</span> <span class="nc">ConfigListEndpoints</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">디버그/인스펙션용: 엔드포인트 목록(JSON, api_key 미포함).</span><span class="sh">"""</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">endpoints_json</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">list_endpoints</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Config/Endpoints (ReadOnly)</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">list_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="kn">import</span> <span class="n">json</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">_CONFIG</span><span class="p">.</span><span class="nf">list_endpoints</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">),)</span>

<span class="k">class</span> <span class="nc">ConfigGetValue</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    임의 경로 값 읽기 (</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="s"> 구분)
    예) path=</span><span class="sh">"</span><span class="s">feature_flags.use_cache</span><span class="sh">"</span><span class="s">  → </span><span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="s">
        path=</span><span class="sh">"</span><span class="s">storage.s3.region</span><span class="sh">"</span><span class="s">        → </span><span class="sh">"</span><span class="s">ap-northeast-2</span><span class="sh">"</span><span class="s">
        path=</span><span class="sh">"</span><span class="s">endpoints.text-model-a</span><span class="sh">"</span><span class="s">   → 해당 엔드포인트 JSON
    </span><span class="sh">"""</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">get_value</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Config/General (ReadOnly)</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">get_value</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="kn">import</span> <span class="n">json</span>
        <span class="k">def</span> <span class="nf">get_in</span><span class="p">(</span><span class="n">d</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">cur</span> <span class="o">=</span> <span class="n">d</span>
            <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                    <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">cur</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">raw</span> <span class="o">=</span> <span class="n">_CONFIG</span><span class="p">.</span><span class="nf">get_raw</span><span class="p">()</span>
            <span class="n">val</span> <span class="o">=</span> <span class="nf">get_in</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="n">path</span><span class="p">)</span> <span class="k">if</span> <span class="n">path</span> <span class="k">else</span> <span class="n">raw</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">))</span> <span class="ow">or</span> <span class="n">val</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="nf">return </span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">val</span><span class="p">),)</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">),)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[ConfigGetValue] </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">ConfigEndpointLookup</span><span class="sh">"</span><span class="p">:</span> <span class="n">ConfigEndpointLookup</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigListEndpoints</span><span class="sh">"</span><span class="p">:</span>  <span class="n">ConfigListEndpoints</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigGetValue</span><span class="sh">"</span><span class="p">:</span>       <span class="n">ConfigGetValue</span><span class="p">,</span>
<span class="p">}</span>

<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">ConfigEndpointLookup</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Config: Endpoint Lookup</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigListEndpoints</span><span class="sh">"</span><span class="p">:</span>  <span class="sh">"</span><span class="s">Config: List Endpoints</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigGetValue</span><span class="sh">"</span><span class="p">:</span>       <span class="sh">"</span><span class="s">Config: Get Value</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">__init__.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 패키지 인식용 (비워두면 됩니다)
</span></code></pre></div></div>

<hr />

<h1 id="4-요구사항-대응-체크">4) 요구사항 대응 체크</h1>

<ul>
  <li>
    <p>사람이 편집하기 쉬움: <strong>TOML + 주석 가능</strong></p>
  </li>
  <li>
    <p>읽기 전용: <strong>파일 쓰기 없음</strong></p>
  </li>
  <li>
    <p>주요 용도(모델/서비스 엔드포인트): <strong><code class="language-plaintext highlighter-rouge">endpoints</code> 섹션 표준화</strong></p>
  </li>
  <li>
    <p>필요한 값 반환: <code class="language-plaintext highlighter-rouge">ConfigEndpointLookup</code>가 <strong>display_name, request_name, base_url, api_key</strong> 출력</p>
  </li>
  <li>
    <p>변경 반영: <strong>mtime + TTL(기본 30초, 5~60초 조정)</strong> → <strong>최대 1분 내 반영</strong> 보장</p>
  </li>
  <li>
    <p>보안: <strong>환경변수 치환</strong> , 목록 노드에서 <strong>api_key 미노출</strong></p>
  </li>
</ul>

<hr />

<h1 id="5-마이그레이션-가이드">5) 마이그레이션 가이드</h1>

<ul>
  <li>
    <p>예전 파일/이름을 쓰셨다면:</p>

    <ul>
      <li>
        <p>폴더: <code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_llm_config_reader</code> → <strong>삭제</strong> 또는 보관</p>
      </li>
      <li>
        <p>설정: <code class="language-plaintext highlighter-rouge">[llm_models]</code> → <strong><code class="language-plaintext highlighter-rouge">[endpoints]</code> 로 바꾸고 <code class="language-plaintext highlighter-rouge">request_model</code> → <code class="language-plaintext highlighter-rouge">request_name</code></strong></p>
      </li>
      <li>
        <p>노드: 기존 워크플로우에선 새 노드로 교체</p>

        <ul>
          <li>
            <p><code class="language-plaintext highlighter-rouge">LLMConfigLookup</code> → <strong><code class="language-plaintext highlighter-rouge">ConfigEndpointLookup</code></strong></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">LLMConfigListModels</code> → <strong><code class="language-plaintext highlighter-rouge">ConfigListEndpoints</code></strong></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">ConfigGetRawJSON</code> → <strong><code class="language-plaintext highlighter-rouge">ConfigGetValue</code></strong></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>필요하면, 기존 워크플로우 자동 변환 스크립트(YAML/JSON 경로 교체)도 만들어 드릴게요.</p>

<p class="chat--user">

다른 노드 “파일들”에서 설정을 읽어야하는데 이건 어떻게 해? 싱글톤 인터페이스가 좀 어색해보여

</p>

<p>좋은 피드백! “여러 노드/파일에서 자연스럽게 읽는” 패턴으로 바꿔줄게요.<br />
싱글톤 대신 <strong>경로별 Multiton 레지스트리 + 얇은 함수형 API</strong> 를 제공합니다.<br />
즉, 어디서든 <code class="language-plaintext highlighter-rouge">from comfyui_config_reader.config import endpoint, get</code>만 임포트해 쓰면 됩니다.</p>

<p>아래 세 파일만 추가/교체하면 끝!</p>

<hr />

<h1 id="1-구조">1) 구조</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ComfyUI/
└─ custom_nodes/
   └─ comfyui_config_reader/
      ├─ __init__.py
      ├─ config_core.py     <span class="c"># 핵심: ReadOnlyStore (경로별 캐시/자동 리로드)</span>
      ├─ config.py          <span class="c"># 공용 API: endpoint()/get()/get_store()</span>
      └─ config_nodes.py    <span class="c"># (옵션) 데모 노드들: Lookup/List/Get</span>
</code></pre></div></div>

<hr />

<h1 id="2-핵심-스토어-경로별-multiton-아님--인스턴스형-thread-safe">2) 핵심 스토어 (경로별 Multiton 아님 — “인스턴스형”, thread-safe)</h1>

<p><code class="language-plaintext highlighter-rouge">config_core.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="c1"># Python 3.11+: tomllib / 이하: tomli
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">value</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">value</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">env_name</span> <span class="o">=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">]</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">env_name</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">value</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">value</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">value</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">ReadOnlyStore</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - TOML 읽기 전용 스토어
    - mtime/TTL(5~60s) 기반 자동 재로드 → </span><span class="sh">'</span><span class="s">1분 내 반영</span><span class="sh">'</span><span class="s"> 보장
    - 엔드포인트 인덱싱 + 임의 경로 접근
    - 파일 쓰기 없음
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">30</span>  <span class="c1"># 기본 30s
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_version</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># 리로드마다 증가
</span>
    <span class="c1"># ---------- 내부 로딩 ----------
</span>    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_build_index_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="n">eps</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">endpoints</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">eps</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">return</span>
        <span class="k">for</span> <span class="n">ep_key</span><span class="p">,</span> <span class="n">cfg</span> <span class="ow">in</span> <span class="n">eps</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>
            <span class="n">required</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="nf">any</span><span class="p">(</span><span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">required</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">ep_key</span><span class="p">),</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">)),</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">))}:</span>
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]),</span>
                        <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">]),</span>
                        <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]),</span>
                        <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="p">}</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>
        <span class="c1"># refresh_interval_seconds (5~60) + env override
</span>        <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">conf_val</span><span class="p">))</span>
        <span class="n">env_override</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_override</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">conf_val</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_override</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">pass</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span> <span class="o">=</span> <span class="n">conf_val</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env_vars</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_version</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">mtime</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh_interval</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># ---------- 퍼블릭 API ----------
</span>    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span>

    <span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">ENV 치환 후 전체 트리의 </span><span class="sh">'</span><span class="s">일관된 스냅샷</span><span class="sh">'</span><span class="s">을 반환(얕은 복사).</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_value</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dotted_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>
        <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted_path</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted_path</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>

    <span class="k">def</span> <span class="nf">get_endpoint</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">endpoint key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="c1"># 갱신 지연 가능성 → 강제 리로드 1회 재시도
</span>            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">endpoint not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">list_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_endpoint_index</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="c1"># api_key는 미노출
</span>            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<hr />

<h1 id="3-공용-api-어디서든-임포트해-쓰는-함수형-인터페이스">3) 공용 API (어디서든 임포트해 쓰는 “함수형” 인터페이스)</h1>

<p><code class="language-plaintext highlighter-rouge">config.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span>
<span class="kn">from</span> <span class="n">.config_core</span> <span class="kn">import</span> <span class="n">ReadOnlyStore</span>

<span class="c1"># 경로별 Multiton 레지스트리
</span><span class="n">_REGISTRY</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ReadOnlyStore</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">_default_path</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">get_store</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ReadOnlyStore</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 경로별로 ReadOnlyStore 인스턴스를 재사용(멀티톤)
    - 명시 path 없으면 COMFY_CONFIG_PATH 또는 패키지 기본 config.toml
    </span><span class="sh">"""</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span> <span class="ow">or</span> <span class="nf">_default_path</span><span class="p">())</span>
    <span class="k">if</span> <span class="n">p</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">_REGISTRY</span><span class="p">:</span>
        <span class="n">_REGISTRY</span><span class="p">[</span><span class="n">p</span><span class="p">]</span> <span class="o">=</span> <span class="nc">ReadOnlyStore</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_REGISTRY</span><span class="p">[</span><span class="n">p</span><span class="p">]</span>

<span class="c1"># ---- 얇은 함수형 헬퍼들 (권장) ----
</span><span class="k">def</span> <span class="nf">endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">엔드포인트 dict 반환: display_name, request_name, base_url, api_key</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="nf">get_store</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">get_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">endpoints</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">엔드포인트 목록(JSON용)</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="nf">get_store</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">list_endpoints</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">dotted_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">임의 설정값 반환: </span><span class="sh">'</span><span class="s">section.sub.key</span><span class="sh">'"""</span>
    <span class="k">return</span> <span class="nf">get_store</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">get_value</span><span class="p">(</span><span class="n">dotted_path</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">전체 트리 스냅샷</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="nf">get_store</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">snapshot</span><span class="p">()</span>
</code></pre></div></div>

<blockquote>
  <p>포인트: <strong>다른 노드 파일</strong> 에서는 <code class="language-plaintext highlighter-rouge">config.endpoint()</code>, <code class="language-plaintext highlighter-rouge">config.get()</code> 같은 <strong>함수형 API만</strong> 쓰면 됩니다.<br />
 내부적으로는 경로별 인스턴스를 재사용하지만, 노드 코드에서는 싱글톤에 의존하지 않습니다.</p>
</blockquote>

<hr />

<h1 id="4-옵션-데모-노드--기존-노드를-이-api로-얇게-래핑">4) (옵션) 데모 노드 — 기존 노드를 이 API로 얇게 래핑</h1>

<p><code class="language-plaintext highlighter-rouge">config_nodes.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.config</span> <span class="kn">import</span> <span class="n">endpoint</span> <span class="k">as</span> <span class="n">_endpoint</span><span class="p">,</span> <span class="n">endpoints</span> <span class="k">as</span> <span class="n">_endpoints</span><span class="p">,</span> <span class="n">get</span> <span class="k">as</span> <span class="n">_get</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="k">class</span> <span class="nc">ConfigEndpointLookup</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">}),</span>
                             <span class="sh">"</span><span class="s">config_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">})}}</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lookup</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Config/Endpoints (ReadOnly)</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">config_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">config_path</span> <span class="ow">or</span> <span class="bp">None</span>
        <span class="n">ep</span> <span class="o">=</span> <span class="nf">_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">],</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">])</span>

<span class="k">class</span> <span class="nc">ConfigListEndpoints</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">config_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">})}}</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">endpoints_json</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">list_endpoints</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Config/Endpoints (ReadOnly)</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">list_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">config_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">config_path</span> <span class="ow">or</span> <span class="bp">None</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_endpoints</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">),)</span>

<span class="k">class</span> <span class="nc">ConfigGetValue</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">}),</span>
                             <span class="sh">"</span><span class="s">config_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">})}}</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">get_value</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Config/General (ReadOnly)</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">get_value</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">config_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">config_path</span> <span class="ow">or</span> <span class="bp">None</span>
        <span class="n">val</span> <span class="o">=</span> <span class="nf">_get</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">))</span> <span class="ow">or</span> <span class="n">val</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">val</span><span class="p">),)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">val</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">),)</span>

<span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">ConfigEndpointLookup</span><span class="sh">"</span><span class="p">:</span> <span class="n">ConfigEndpointLookup</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigListEndpoints</span><span class="sh">"</span><span class="p">:</span>  <span class="n">ConfigListEndpoints</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigGetValue</span><span class="sh">"</span><span class="p">:</span>       <span class="n">ConfigGetValue</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">ConfigEndpointLookup</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Config: Endpoint Lookup</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigListEndpoints</span><span class="sh">"</span><span class="p">:</span>  <span class="sh">"</span><span class="s">Config: List Endpoints</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigGetValue</span><span class="sh">"</span><span class="p">:</span>       <span class="sh">"</span><span class="s">Config: Get Value</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h1 id="5-다른-노드-파일들에서-쓰는-법-가장-깔끔한-패턴">5) 다른 노드 “파일들”에서 쓰는 법 (가장 깔끔한 패턴)</h1>

<p>다른 플러그인/노드 파일 어디에서든:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 예: OpenAI 호출 노드 파일 내부
</span><span class="kn">from</span> <span class="n">comfyui_config_reader.config</span> <span class="kn">import</span> <span class="n">endpoint</span><span class="p">,</span> <span class="n">get</span>

<span class="k">def</span> <span class="nf">_prepare_client</span><span class="p">():</span>
    <span class="n">ep</span> <span class="o">=</span> <span class="nf">endpoint</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">)</span>   <span class="c1"># 또는 display_name / request_name로 조회
</span>    <span class="n">api_key</span> <span class="o">=</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">base_url</span> <span class="o">=</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]</span>
    <span class="c1"># ... 클라이언트 생성
</span>    <span class="k">return</span> <span class="n">api_key</span><span class="p">,</span> <span class="n">base_url</span>

<span class="k">def</span> <span class="nf">_s3_settings</span><span class="p">():</span>
    <span class="n">region</span> <span class="o">=</span> <span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">storage.s3.region</span><span class="sh">"</span><span class="p">)</span>    <span class="c1"># 범용 설정 접근
</span>    <span class="n">bucket</span> <span class="o">=</span> <span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">storage.s3.bucket</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">region</span><span class="p">,</span> <span class="n">bucket</span>
</code></pre></div></div>

<ul>
  <li>
    <p>기본 경로는 <code class="language-plaintext highlighter-rouge">COMFY_CONFIG_PATH</code> 또는 <code class="language-plaintext highlighter-rouge">comfyui_config_reader/config.toml</code>.</p>
  </li>
  <li>
    <p>특정 파일을 쓰고 싶으면 <code class="language-plaintext highlighter-rouge">endpoint("text-model-a", path="/abs/path/to/config.toml")</code>처럼 <strong>함수 인자</strong> 로 주면 됩니다.</p>
  </li>
  <li>
    <p>내부는 <strong>경로별 레지스트리(Multiton)</strong>라 같은 경로는 인스턴스를 공유(성능↑)하지만, 호출부는 <strong>함수형</strong> 이라 싱글톤에 종속되지 않아요.</p>
  </li>
</ul>

<hr />

<h1 id="6-요건-체크">6) 요건 체크</h1>

<ul>
  <li>
    <p>여러 노드/파일에서 공통 사용: <strong>함수형 API</strong> 로 간단 임포트</p>
  </li>
  <li>
    <p>싱글톤 어색함 제거: <strong>경로별 Multiton + helper 함수</strong> → 명시적 DI도 가능(<code class="language-plaintext highlighter-rouge">get_store(path)</code>)</p>
  </li>
  <li>
    <p>읽기 전용 + 1분 내 반영: <strong>mtime + 5~60s TTL(기본 30s)</strong></p>
  </li>
  <li>
    <p>사람이 편집 쉬움: <strong>TOML + ENV 치환</strong></p>
  </li>
  <li>
    <p>엔드포인트 4필드: <code class="language-plaintext highlighter-rouge">display_name, request_name, base_url, api_key</code></p>
  </li>
</ul>

<hr />

<p>필요하면 <code class="language-plaintext highlighter-rouge">get_store(path)</code>로 <strong>명시적 의존성 주입(DI)</strong>도 가능해요. 예컨대 프레임워크 초기화 시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader.config</span> <span class="kn">import</span> <span class="n">get_store</span>
<span class="n">STORE</span> <span class="o">=</span> <span class="nf">get_store</span><span class="p">(</span><span class="sh">"</span><span class="s">/path/to/config.toml</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 이후 어디서든:
</span><span class="n">ep</span> <span class="o">=</span> <span class="n">STORE</span><span class="p">.</span><span class="nf">get_endpoint</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 하면 아예 전역 함수도 안 쓰고, “내가 주입한 스토어”만 참조하는 형태로 완전히 분리할 수 있습니다.</p>

<p class="chat--user">

아니 싱글톤은 괜찮은데 외부에서 접근이 쉽지 않아보여서. 싱글톤이 낫지 않아?

</p>

<p>좋아, <strong>싱글톤으로 단순·직관 접근</strong> 가능하게 정리해줄게.<br />
외부 노드 “파일들” 어디서든 한 줄 임포트로 바로 쓰는 형태야:</p>

<ul>
  <li>
    <p>함수형: <code class="language-plaintext highlighter-rouge">from comfyui_config_reader import endpoint, get</code></p>
  </li>
  <li>
    <p>객체형: <code class="language-plaintext highlighter-rouge">from comfyui_config_reader import CONFIG</code></p>
  </li>
</ul>

<p>둘 다 같은 싱글톤 인스턴스를 뒤에서 사용해. (thread-safe, read-only, 1분 내 반영)</p>

<hr />

<h1 id="1-파일-구조-심플">1) 파일 구조 (심플)</h1>
<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ComfyUI/
└─ custom_nodes/
   └─ comfyui_config_reader/
      ├─ __init__.py
      ├─ config_singleton.py   # 싱글톤 본체
      └─ config.toml
</code></pre></div></div>

<hr />

<h1 id="2-configtoml-예시-범용">2) <code class="language-plaintext highlighter-rouge">config.toml</code> 예시 (범용)</h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>  <span class="c"># 5~60 사이 권장</span>

<span class="nn">[endpoints."text-model-a"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Text Model A"</span>
<span class="py">request_name</span>  <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>

<span class="nn">[feature_flags]</span>
<span class="py">use_cache</span> <span class="p">=</span> <span class="kc">true</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">${ENV}</code> 는 환경변수 치환됨.</li>
</ul>

<hr />

<h1 id="3-싱글톤-구현-config_singletonpy">3) 싱글톤 구현: <code class="language-plaintext highlighter-rouge">config_singleton.py</code></h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="c1"># Python 3.11+: tomllib / 이하: tomli
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">],</span> <span class="sh">""</span><span class="p">)</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - TOML 파일 읽기 전용
    - mtime 변경 + TTL(5~60s, 기본 30s) 자동 재로드
    - endpoints 4필드 인덱싱(display_name, request_name, base_url, api_key)
    - 임의 경로 접근 가능 (</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="s"> 구분)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ep_index</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># -------- 내부 로딩 --------
</span>    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ep_index</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="n">eps</span> <span class="o">=</span> <span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">endpoints</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">eps</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span>
        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">cfg</span> <span class="ow">in</span> <span class="n">eps</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">continue</span>
            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>
            <span class="n">req</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="nf">any</span><span class="p">(</span><span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">req</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">)),</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">))}:</span>
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_ep_index</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]),</span>
                        <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">]),</span>
                        <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]),</span>
                        <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]),</span>
                    <span class="p">}</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>
        <span class="c1"># refresh_interval_seconds (5~60) + env override
</span>        <span class="n">r</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>
        <span class="n">env_r</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_r</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_r</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span> <span class="k">pass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="n">r</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># -------- 퍼블릭 API --------
</span>    <span class="k">def</span> <span class="nf">endpoint</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">endpoint key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ep_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="c1"># 즉시 재시도(갱신 지연 보정)
</span>            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ep_index</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">endpoint not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_ep_index</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">out</span><span class="p">[</span><span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>  <span class="c1"># api_key 미노출
</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>
        <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>

    <span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>

<span class="c1"># ===== 모듈 전역 싱글톤 =====
</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
<span class="n">_instance</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">_ReadOnlyConfig</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">_default_path</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># configure()로 지정 가능
</span>
<span class="k">def</span> <span class="nf">_resolve_default_path</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_default_path</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_get_instance</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span>
    <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">_instance</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    싱글톤 설정(선택): 경로/TTL 오버라이드.
    - 가능한 한 </span><span class="sh">'</span><span class="s">초기화 시 1회</span><span class="sh">'</span><span class="s">만 호출 추천.
    - 이후에도 호출 가능하며, 새 인스턴스로 교체됨( thread-safe ).
    </span><span class="sh">"""</span>
    <span class="k">global</span> <span class="n">_instance</span><span class="p">,</span> <span class="n">_default_path</span>
    <span class="k">if</span> <span class="n">path</span><span class="p">:</span>
        <span class="n">_default_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">refresh_seconds</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">refresh_seconds</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
        <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>

<span class="c1"># ---- 외부에 노출할 얇은 API (가장 쉬운 접근) ----
</span><span class="k">def</span> <span class="nf">endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">endpoints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">endpoints</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">snapshot</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">snapshot</span><span class="p">()</span>

<span class="c1"># ---- 객체형 접근을 위한 프록시(CONFIG) ----
</span><span class="k">class</span> <span class="nc">_ConfigProxy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="c1"># CONFIG.endpoint(...), CONFIG.get(...) 형태 지원
</span>        <span class="k">return</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">_get_instance</span><span class="p">(),</span> <span class="n">name</span><span class="p">)</span>

<span class="n">CONFIG</span> <span class="o">=</span> <span class="nf">_ConfigProxy</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-__init__py-한-줄-임포트-지원">4) <code class="language-plaintext highlighter-rouge">__init__.py</code> (한 줄 임포트 지원)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 외부에서 아주 간단히 접근 가능하게 re-export
</span><span class="kn">from</span> <span class="n">.config_singleton</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">CONFIG</span><span class="p">,</span>        <span class="c1"># 객체형: CONFIG.endpoint(...), CONFIG.get(...)
</span>    <span class="n">configure</span><span class="p">,</span>     <span class="c1"># 선택: 초기화 시 경로/TTL 지정
</span>    <span class="n">endpoint</span><span class="p">,</span>      <span class="c1"># 함수형: endpoint("text-model-a")
</span>    <span class="n">endpoints</span><span class="p">,</span>
    <span class="n">get</span><span class="p">,</span>
    <span class="n">snapshot</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="5-외부-노드-파일들에서-쓰는-법">5) 외부 노드 “파일들”에서 쓰는 법</h1>

<h2 id="가장-간단-함수형">가장 간단 (함수형)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">endpoint</span><span class="p">,</span> <span class="n">get</span>

<span class="k">def</span> <span class="nf">build_client</span><span class="p">():</span>
    <span class="n">ep</span> <span class="o">=</span> <span class="nf">endpoint</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 키 / display_name / request_name 중 아무거나 OK
</span>    <span class="n">base_url</span> <span class="o">=</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">api_key</span>  <span class="o">=</span> <span class="n">ep</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
    <span class="c1"># ... 클라이언트 생성
</span></code></pre></div></div>

<h2 id="객체형이-익숙하다면">객체형이 익숙하다면</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">CONFIG</span>

<span class="k">def</span> <span class="nf">build_client</span><span class="p">():</span>
    <span class="n">ep</span> <span class="o">=</span> <span class="n">CONFIG</span><span class="p">.</span><span class="nf">endpoint</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># CONFIG.get("storage.s3.region") 등도 동일
</span></code></pre></div></div>

<h2 id="시작-시-경로ttl-지정선택">시작 시 경로/TTL 지정(선택)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 예: __init__ 혹은 ComfyUI 부팅 초기에 한 번
</span><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">configure</span>
<span class="nf">configure</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/abs/path/to/config.toml</span><span class="sh">"</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>  <span class="c1"># 5~60 사이
</span></code></pre></div></div>

<ul>
  <li>이후 모든 모듈에서 같은 싱글톤을 사용하고, 파일 변경은 <strong>최대 1분 내</strong> 반영돼요(기본 30초, env/설정으로 조절).</li>
</ul>

<hr />

<h1 id="6-요건-재확인">6) 요건 재확인</h1>

<ul>
  <li>
    <p>✅ 외부 접근 쉬움: <code class="language-plaintext highlighter-rouge">from comfyui_config_reader import endpoint</code> 또는 <code class="language-plaintext highlighter-rouge">CONFIG.endpoint</code></p>
  </li>
  <li>
    <p>✅ 싱글톤: 모듈 전역 한 개 인스턴스, thread-safe lazy init</p>
  </li>
  <li>
    <p>✅ 읽기 전용: 쓰기 없음</p>
  </li>
  <li>
    <p>✅ 1분 내 반영: mtime + TTL(기본 30s, 5~60s)</p>
  </li>
  <li>
    <p>✅ 사람이 편집 쉬움: TOML + <code class="language-plaintext highlighter-rouge">${ENV}</code> 치환</p>
  </li>
  <li>
    <p>✅ 엔드포인트 4필드: <code class="language-plaintext highlighter-rouge">display_name</code>, <code class="language-plaintext highlighter-rouge">request_name</code>, <code class="language-plaintext highlighter-rouge">base_url</code>, <code class="language-plaintext highlighter-rouge">api_key</code></p>
  </li>
</ul>

<p>필요하면, 지금 구조 위에 “엔드포인트 호출용 노드”도 바로 얹어줄게.</p>

<p class="chat--user">

endpoint 말고 좀 더 좋은 용어 선정해줘. 그리고 model configuration (parameter 등도 설정에 같이 포함시키면 좋겠어)

</p>

<p>좋아! “endpoint” 대신 더 자연스러운 용어로 <strong>profile(프로필)</strong> 을 쓰고, 여기에 <strong>model configuration(파라미터 등)</strong> 까지 함께 담는 방향으로 정리했어.<br />
외부 노드/파일에서는 <strong>싱글톤</strong> 을 아주 간단히 쓰면 되고, 기존 endpoint 명칭은 <strong>하위 호환 별칭</strong> 도 제공해둘게.</p>

<hr />

<h1 id="1-용어-선정-step-by-step">1) 용어 선정 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>profile (프로필)</strong> — 사람이 이해하기 쉬움. “연결 정보 + 호출 규칙 + 모델 파라미터 묶음”을 한 세트로 보기에 적합.</p>
  </li>
  <li>
    <p>대안(참고): provider, backend, connector, target.</p>

    <ul>
      <li>기술적으로는 <em>backend</em> 도 괜찮지만, “설정 묶음” 뉘앙스는 <em>profile</em> 이 가장 직관적.</li>
    </ul>
  </li>
  <li>
    <p>결론: <strong>profiles</strong> 섹션으로 표준화하고, <strong>endpoints</strong> 는 자동 인식(하위 호환) 유지.</p>
  </li>
</ol>

<hr />

<h1 id="2-configtoml-스키마-모델-파라미터-포함">2) config.toml 스키마 (모델 파라미터 포함)</h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="c"># 파일 변경 감지 주기(초). 5~60 권장. "1분 내 반영" 요건 만족.</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>

<span class="c"># 모든 프로필에 공통 적용될 기본값(선택)</span>
<span class="nn">[defaults.params]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.3</span>
<span class="py">max_tokens</span>  <span class="p">=</span> <span class="mi">2048</span>

<span class="nn">[defaults.http]</span>
<span class="py">timeout_seconds</span> <span class="p">=</span> <span class="mi">30</span>
<span class="nn">[defaults.http.headers]</span>
<span class="py">User-Agent</span> <span class="p">=</span> <span class="s">"ComfyUI-ConfigReader/1.0"</span>
<span class="nn">[defaults.http.query]</span>
<span class="c"># 공통 쿼리 파라미터가 필요하면 여기에</span>

<span class="c"># ── 프로필들 ─────────────────────────────────────────────</span>
<span class="nn">[profiles."text-model-a"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Text Model A"</span>
<span class="py">request_name</span>  <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>

<span class="c"># 이 프로필의 모델 파라미터(기본값 위에 덮어쓰기)</span>
<span class="nn">[profiles."text-model-a".params]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.2</span>
<span class="py">top_p</span>       <span class="p">=</span> <span class="mf">0.9</span>
<span class="py">stop</span>        <span class="p">=</span> <span class="p">[</span><span class="s">"</span><span class="se">\n\n</span><span class="s">Human:"</span><span class="p">,</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">Assistant:"</span><span class="p">]</span>

<span class="c"># HTTP 관련(선택): 헤더, 타임아웃, 쿼리 등</span>
<span class="nn">[profiles."text-model-a".http]</span>
<span class="py">timeout_seconds</span> <span class="p">=</span> <span class="mi">20</span>
<span class="nn">[profiles."text-model-a".http.headers]</span>
<span class="py">X-Org-Id</span> <span class="p">=</span> <span class="s">"${ORG_ID}"</span>
<span class="nn">[profiles."text-model-a".http.query]</span>
<span class="py">apiVersion</span> <span class="p">=</span> <span class="s">"2024-06-01"</span>

<span class="nn">[profiles."text-model-b"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Text Model B"</span>
<span class="py">request_name</span>  <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>
<span class="c"># params/http 섹션이 없으면 defaults만 적용</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${ENV}</code> 는 환경변수 치환됨.</p>
  </li>
  <li>
    <p><strong>params</strong> : temperature/top_p/max_tokens/stop/seed 등 원하는 파라미터 자유 확장.</p>
  </li>
  <li>
    <p><strong>http</strong> : timeout_seconds / headers / query 등 요청 관련 옵션.</p>
  </li>
  <li>
    <p>상단의 <strong>[defaults]</strong> 는 모든 프로필에 <strong>병합(merge)</strong> 되어 기본값 역할.</p>
  </li>
</ul>

<hr />

<h1 id="3-싱글톤-api-drop-in-profile--params--http">3) 싱글톤 API (drop-in): profile + params + http</h1>

<p>외부 어디서든 한 줄로 접근:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">profile</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">http</span><span class="p">,</span> <span class="n">get</span>
<span class="c1"># 또는 객체형:
</span><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">CONFIG</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">profile(key)</code> → 연결정보 + 모델파라미터 + http 설정까지 <strong>한 번에</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">params(key)</code> → 해당 프로필의 <strong>모델 파라미터 dict</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">http(key)</code> → 해당 프로필의 <strong>HTTP 옵션 dict</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">get("storage.s3.region")</code> 처럼 범용 키 접근도 유지</p>
  </li>
  <li>
    <p>하위 호환: <code class="language-plaintext highlighter-rouge">endpoint</code>, <code class="language-plaintext highlighter-rouge">endpoints</code> 별칭도 남겨둠(기존 코드 안깨짐)</p>
  </li>
</ul>

<hr />

<h1 id="4-교체본-코드-config_singletonpy">4) 교체본 코드 (<code class="language-plaintext highlighter-rouge">config_singleton.py</code>)</h1>

<p>아래 파일 하나로 기존 싱글톤 구현을 대체하면 돼. (기능: profiles + defaults 병합 + params/http 지원 + legacy <code class="language-plaintext highlighter-rouge">endpoints</code> 인식)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="c1"># Python 3.11+: tomllib / 이하: tomli
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>  <span class="c1"># type: ignore
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">],</span> <span class="sh">""</span><span class="p">)</span>
                    <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">base</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">over</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">얕은 dict update가 아닌, 중첩 dict까지 병합.</span><span class="sh">"""</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">over</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">v</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 읽기 전용 TOML
    - mtime + TTL(5~60s, 기본 30s) 자동 재로드 → 1분 내 변경 반영
    - </span><span class="sh">'</span><span class="s">profiles</span><span class="sh">'</span><span class="s"> 표준 + </span><span class="sh">'</span><span class="s">endpoints</span><span class="sh">'</span><span class="s"> 레거시도 자동 인식
    - 각 profile에:
        * display_name, request_name, base_url, api_key (필수)
        * params(dict)  : 모델 파라미터
        * http(dict)    : timeout_seconds, headers{}, query{}
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># 정규화 키 -&gt; profile dict
</span>
    <span class="c1"># -------- 내부 로딩 --------
</span>    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_extract_profiles_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="c1"># 표준 'profiles' 우선, 없으면 'endpoints'(하위 호환)
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">profiles</span><span class="sh">"</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">profiles</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">endpoints</span><span class="sh">"</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">endpoints</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>

        <span class="c1"># defaults (ENV 확장 포함)
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">defaults</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="n">defaults_params</span> <span class="o">=</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="n">defaults_http</span>   <span class="o">=</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">)</span>   <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">defaults_http</span><span class="p">:</span> <span class="n">defaults_http</span><span class="p">[</span><span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">query</span><span class="sh">"</span>   <span class="ow">not</span> <span class="ow">in</span> <span class="n">defaults_http</span><span class="p">:</span> <span class="n">defaults_http</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">]</span>   <span class="o">=</span> <span class="p">{}</span>

        <span class="n">profiles_tbl</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_extract_profiles_table</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">profiles_tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">return</span>

        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">raw_cfg</span> <span class="ow">in</span> <span class="n">profiles_tbl</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_cfg</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">raw_cfg</span><span class="p">)</span>  <span class="c1"># ENV 치환
</span>            <span class="c1"># 필수 필드
</span>            <span class="n">req</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="nf">any</span><span class="p">(</span><span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">req</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="c1"># params/http 병합 (defaults → profile override)
</span>            <span class="n">p_params</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
            <span class="n">p_http</span>   <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">)</span>   <span class="ow">or</span> <span class="p">{}</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">p_http</span><span class="p">:</span> <span class="n">p_http</span><span class="p">[</span><span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">query</span><span class="sh">"</span>   <span class="ow">not</span> <span class="ow">in</span> <span class="n">p_http</span><span class="p">:</span> <span class="n">p_http</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">]</span>   <span class="o">=</span> <span class="p">{}</span>

            <span class="n">merged_params</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">defaults_params</span><span class="p">,</span> <span class="o">**</span><span class="n">p_params</span><span class="p">}</span>
            <span class="n">merged_http</span>   <span class="o">=</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">defaults_http</span><span class="p">,</span> <span class="n">p_http</span><span class="p">)</span>

            <span class="n">entry</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]),</span>
                <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">]),</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]),</span>
                <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span>      <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]),</span>
                <span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">:</span>       <span class="n">merged_params</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">:</span>         <span class="n">merged_http</span><span class="p">,</span>
            <span class="p">}</span>

            <span class="c1"># 접근 키: 정의 키 / display_name / request_name
</span>            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">)),</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">))}:</span>
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="n">entry</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="c1"># refresh_interval_seconds (5~60) + env override
</span>        <span class="n">r</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>
        <span class="n">env_r</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_r</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_r</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span> <span class="k">pass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="n">r</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># -------- 퍼블릭 API --------
</span>    <span class="k">def</span> <span class="nf">profile</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">profile key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="c1"># 즉시 재시도(갱신 지연 보정)
</span>            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">profile not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">profiles</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">api_key는 숨기고, 나머지 메타/params/http는 노출.</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">dn</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>  <span class="c1"># display_name 중복 키 방지
</span>                <span class="k">continue</span>
            <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">dn</span><span class="p">)</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">:</span>       <span class="n">v</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
                <span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">:</span>         <span class="n">v</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">params</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">profile</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}))</span>

    <span class="k">def</span> <span class="nf">http</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">profile</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}))</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>
        <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>

    <span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>

<span class="c1"># ===== 모듈 전역 싱글톤 =====
</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
<span class="n">_instance</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">_ReadOnlyConfig</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">_default_path</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># configure()로 지정 가능
</span>
<span class="k">def</span> <span class="nf">_resolve_default_path</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_default_path</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_get_instance</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span>
    <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">_instance</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">선택: 경로/TTL 오버라이드(초기화 시 1회 권장).</span><span class="sh">"""</span>
    <span class="k">global</span> <span class="n">_instance</span><span class="p">,</span> <span class="n">_default_path</span>
    <span class="k">if</span> <span class="n">path</span><span class="p">:</span>
        <span class="n">_default_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">refresh_seconds</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">refresh_seconds</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
        <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>

<span class="c1"># ---- 외부에 노출할 간단 API ----
</span><span class="k">def</span> <span class="nf">profile</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">profile</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">profiles</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">profiles</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">params</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">params</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">http</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">http</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">snapshot</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">snapshot</span><span class="p">()</span>

<span class="c1"># ---- 하위 호환 별칭 (endpoint*) ----
</span><span class="k">def</span> <span class="nf">endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">return</span> <span class="nf">profile</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">endpoints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="k">return</span> <span class="nf">profiles</span><span class="p">()</span>

<span class="c1"># ---- 객체형 접근 프록시(CONFIG) ----
</span><span class="k">class</span> <span class="nc">_ConfigProxy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">_get_instance</span><span class="p">(),</span> <span class="n">name</span><span class="p">)</span>

<span class="n">CONFIG</span> <span class="o">=</span> <span class="nf">_ConfigProxy</span><span class="p">()</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">__init__.py</code> (re-export)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.config_singleton</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">CONFIG</span><span class="p">,</span>
    <span class="n">configure</span><span class="p">,</span>
    <span class="n">profile</span><span class="p">,</span> <span class="n">profiles</span><span class="p">,</span>
    <span class="n">params</span><span class="p">,</span> <span class="n">http</span><span class="p">,</span>
    <span class="n">get</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">,</span>
    <span class="c1"># legacy alias
</span>    <span class="n">endpoint</span><span class="p">,</span> <span class="n">endpoints</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="5-외부에서-쓰는-법-예시">5) 외부에서 쓰는 법 (예시)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">profile</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">http</span>

<span class="c1"># (1) 한 번에 전부 받기
</span><span class="n">cfg</span> <span class="o">=</span> <span class="nf">profile</span><span class="p">(</span><span class="sh">"</span><span class="s">Text Model A</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 또는 "text-model-a" / "gpt-4o-mini"
</span><span class="n">api_key</span>   <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
<span class="n">base_url</span>  <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]</span>
<span class="n">req_name</span>  <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">]</span>
<span class="n">p</span>         <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">]</span>      <span class="c1"># dict (temperature/top_p/...)
</span><span class="n">h</span>         <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">]</span>        <span class="c1"># dict (timeout_seconds/headers/query)
</span>
<span class="c1"># (2) 필요만 따로
</span><span class="n">p</span> <span class="o">=</span> <span class="nf">params</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">)</span>
<span class="n">h</span> <span class="o">=</span> <span class="nf">http</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="6-포인트-정리">6) 포인트 정리</h1>

<ul>
  <li>
    <p>“endpoint” → <strong>“profile”</strong> 로 명확화 (설정 묶음)</p>
  </li>
  <li>
    <p><strong>model configuration(params)</strong> 을 프로필 내부에 포함, <strong>defaults</strong> 로 공통값 지원</p>
  </li>
  <li>
    <p>싱글톤 그대로 유지 + <strong>외부 접근 간단화</strong>(함수/객체형 모두)</p>
  </li>
  <li>
    <p>하위 호환: <code class="language-plaintext highlighter-rouge">endpoint(s)</code> 별칭 제공</p>
  </li>
  <li>
    <p>파일 변경은 <strong>최대 1분 내 반영</strong>(mtime + TTL 5~60s, 기본 30s)</p>
  </li>
</ul>

<p>원하면, ComfyUI 노드(시각적)도 <code class="language-plaintext highlighter-rouge">params/http</code>를 JSON으로 같이 내보내는 <code class="language-plaintext highlighter-rouge">ConfigProfileLookup</code> 노드 버전도 바로 만들어 줄게!</p>

<p class="chat--user">

profile은 좀 너무 범용적인데

</p>

<p>좋아, “profile”이 너무 범용적으로 느껴진다면 더 목적에 딱 맞는 <strong>preset(프리셋)</strong> 으로 용어를 좁히자고 제안할게. “프리셋”은 <em>모델 연결 정보 + 요청 식별자 + 모델 파라미터 + HTTP 옵션</em> 을 한 세트로 담는 의미가 분명하고, UI/워크플로우에서도 흔히 쓰이는 표현이라 직관적이야.<br />
아래는 <strong>용어/스키마/코드 전부 ‘preset’으로 정리한 최종본</strong> 이야. (기존 <code class="language-plaintext highlighter-rouge">profile(s)</code>/<code class="language-plaintext highlighter-rouge">endpoint(s)</code>는 하위 호환 별칭 유지)</p>

<hr />

<h1 id="1-이름--스키마-결정-step-by-step">1) 이름 · 스키마 결정 (step-by-step)</h1>

<ul>
  <li>
    <p>섹션명: <strong><code class="language-plaintext highlighter-rouge">[presets."키"]</code></strong></p>
  </li>
  <li>
    <p>필수 필드: <code class="language-plaintext highlighter-rouge">display_name</code>, <code class="language-plaintext highlighter-rouge">request_name</code>, <code class="language-plaintext highlighter-rouge">base_url</code>, <code class="language-plaintext highlighter-rouge">api_key</code></p>
  </li>
  <li>
    <p>선택 필드: <code class="language-plaintext highlighter-rouge">params</code>(모델 파라미터), <code class="language-plaintext highlighter-rouge">http</code>(timeout/headers/query 등)</p>
  </li>
  <li>
    <p>공통 기본값 병합: <code class="language-plaintext highlighter-rouge">defaults.params</code>, <code class="language-plaintext highlighter-rouge">defaults.http</code>를 각 프리셋에 <strong>머지</strong></p>
  </li>
</ul>

<p>예시 <code class="language-plaintext highlighter-rouge">config.toml</code></p>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>  <span class="c"># (5~60) 1분 내 반영 요건 충족</span>

<span class="c"># 모든 프리셋 공통 기본값(선택)</span>
<span class="nn">[defaults.params]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.3</span>
<span class="py">max_tokens</span>  <span class="p">=</span> <span class="mi">2048</span>

<span class="nn">[defaults.http]</span>
<span class="py">timeout_seconds</span> <span class="p">=</span> <span class="mi">30</span>
<span class="nn">[defaults.http.headers]</span>
<span class="py">User-Agent</span> <span class="p">=</span> <span class="s">"ComfyUI-ConfigReader/1.0"</span>

<span class="c"># ── 프리셋들 ─────────────────────────────────────────────────────</span>
<span class="nn">[presets."text-model-a"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Text Model A"</span>
<span class="py">request_name</span>  <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>

<span class="nn">[presets."text-model-a".params]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.2</span>
<span class="py">top_p</span>       <span class="p">=</span> <span class="mf">0.9</span>

<span class="nn">[presets."text-model-a".http]</span>
<span class="py">timeout_seconds</span> <span class="p">=</span> <span class="mi">20</span>
<span class="nn">[presets."text-model-a".http.headers]</span>
<span class="py">X-Org-Id</span> <span class="p">=</span> <span class="s">"${ORG_ID}"</span>

<span class="nn">[presets."text-model-b"]</span>
<span class="py">display_name</span>  <span class="p">=</span> <span class="s">"Text Model B"</span>
<span class="py">request_name</span>  <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>      <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>       <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>

<span class="c"># ── 다른 일반 설정 섹션들도 자유롭게 ─────────────────────────────</span>
<span class="nn">[feature_flags]</span>
<span class="py">use_cache</span> <span class="p">=</span> <span class="kc">true</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">${ENV}</code> 표기는 환경변수로 치환돼.<br />
 <strong>하위 호환</strong> : <code class="language-plaintext highlighter-rouge">[profiles]</code>나 <code class="language-plaintext highlighter-rouge">[endpoints]</code>를 써도 자동 인식(내부에서 <code class="language-plaintext highlighter-rouge">presets</code>로 취급).</p>
</blockquote>

<hr />

<h1 id="2-외부-접근-api-싱글톤-한-줄로-끝">2) 외부 접근 API (싱글톤, 한 줄로 끝)</h1>

<ul>
  <li>
    <p>함수형:<br />
<code class="language-plaintext highlighter-rouge">from comfyui_config_reader import preset, presets, params, http, get</code></p>
  </li>
  <li>
    <p>객체형(원하면):<br />
<code class="language-plaintext highlighter-rouge">from comfyui_config_reader import CONFIG</code> → <code class="language-plaintext highlighter-rouge">CONFIG.preset("...")</code></p>
  </li>
</ul>

<h3 id="사용-예">사용 예</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">preset</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">http</span><span class="p">,</span> <span class="n">get</span>

<span class="n">cfg</span> <span class="o">=</span> <span class="nf">preset</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># "키" / "display_name" / "request_name" 아무거나 OK
</span><span class="n">api_key</span>   <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
<span class="n">base_url</span>  <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]</span>
<span class="n">req_name</span>  <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">]</span>
<span class="n">p</span>         <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">]</span>   <span class="c1"># 모델 파라미터 dict
</span><span class="n">h</span>         <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">]</span>     <span class="c1"># HTTP 옵션 dict
</span>
<span class="n">temperature</span> <span class="o">=</span> <span class="nf">params</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">)</span>
<span class="n">timeout</span>     <span class="o">=</span> <span class="nf">http</span><span class="p">(</span><span class="sh">"</span><span class="s">text-model-a</span><span class="sh">"</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">timeout_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>

<span class="n">region</span> <span class="o">=</span> <span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">feature_flags.use_cache</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 범용 키 접근
</span></code></pre></div></div>

<hr />

<h1 id="3-드롭인-교체-코드">3) 드롭인 교체 코드</h1>

<p>아래 두 파일만 교체하면 끝이야.</p>

<h2 id="custom_nodescomfyui_config_reader__init__py"><code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/__init__.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.config_singleton</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">CONFIG</span><span class="p">,</span>
    <span class="n">configure</span><span class="p">,</span>
    <span class="n">preset</span><span class="p">,</span> <span class="n">presets</span><span class="p">,</span>
    <span class="n">params</span><span class="p">,</span> <span class="n">http</span><span class="p">,</span>
    <span class="n">get</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">,</span>
    <span class="c1"># legacy alias (하위 호환)
</span>    <span class="n">profile</span> <span class="k">as</span> <span class="n">profile</span><span class="p">,</span> <span class="n">profiles</span> <span class="k">as</span> <span class="n">profiles</span><span class="p">,</span>
    <span class="n">endpoint</span> <span class="k">as</span> <span class="n">endpoint</span><span class="p">,</span> <span class="n">endpoints</span> <span class="k">as</span> <span class="n">endpoints</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="custom_nodescomfyui_config_readerconfig_singletonpy"><code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/config_singleton.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># py3.11+
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>     <span class="c1"># py3.10-
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">],</span> <span class="sh">""</span><span class="p">);</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>  <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>  <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">b</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">b</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">v</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 읽기 전용 TOML (파일 쓰기 없음)
    - mtime + TTL(5~60s, 기본 30s) 자동 재로드 → 1분 내 변경 반영
    - 표준: [presets]; 레거시: [profiles], [endpoints] 자동 인식
    - preset 필수 필드: display_name, request_name, base_url, api_key
      + params(dict), http(dict: timeout_seconds, headers{}, query{})
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># --- 내부 로딩 ---
</span>    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_extract_presets_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">presets</span><span class="sh">"</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>   <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">presets</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">profiles</span><span class="sh">"</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>  <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">profiles</span><span class="sh">"</span><span class="p">]</span>   <span class="c1"># legacy
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">endpoints</span><span class="sh">"</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">endpoints</span><span class="sh">"</span><span class="p">]</span>  <span class="c1"># legacy
</span>        <span class="k">return</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="c1"># defaults
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">defaults</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="n">d_params</span> <span class="o">=</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="n">d_http</span>   <span class="o">=</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">)</span>   <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">d_http</span><span class="p">:</span> <span class="n">d_http</span><span class="p">[</span><span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">query</span><span class="sh">"</span>   <span class="ow">not</span> <span class="ow">in</span> <span class="n">d_http</span><span class="p">:</span> <span class="n">d_http</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">]</span>   <span class="o">=</span> <span class="p">{}</span>

        <span class="n">tbl</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_extract_presets_table</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span>

        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">raw</span> <span class="ow">in</span> <span class="n">tbl</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">continue</span>
            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
            <span class="n">req</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="nf">any</span><span class="p">(</span><span class="n">k</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">req</span><span class="p">):</span>
                <span class="k">continue</span>

            <span class="n">p_params</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
            <span class="n">p_http</span>   <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">)</span>   <span class="ow">or</span> <span class="p">{}</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">p_http</span><span class="p">:</span> <span class="n">p_http</span><span class="p">[</span><span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">query</span><span class="sh">"</span>   <span class="ow">not</span> <span class="ow">in</span> <span class="n">p_http</span><span class="p">:</span> <span class="n">p_http</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">]</span>   <span class="o">=</span> <span class="p">{}</span>

            <span class="n">merged_params</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">d_params</span><span class="p">,</span> <span class="o">**</span><span class="n">p_params</span><span class="p">}</span>
            <span class="n">merged_http</span>   <span class="o">=</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">d_http</span><span class="p">,</span> <span class="n">p_http</span><span class="p">)</span>

            <span class="n">entry</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]),</span>
                <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">]),</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]),</span>
                <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span>      <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]),</span>
                <span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">:</span>       <span class="n">merged_params</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">:</span>         <span class="n">merged_http</span><span class="p">,</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">)),</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">""</span><span class="p">))}:</span>
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="n">entry</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>
        <span class="n">env_r</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_r</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_r</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span> <span class="k">pass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="n">r</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># --- 퍼블릭 API ---
</span>    <span class="k">def</span> <span class="nf">preset</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">preset key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">preset not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">presets</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">dn</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span> <span class="k">continue</span>
            <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">dn</span><span class="p">)</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">:</span>       <span class="n">v</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
                <span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">:</span>         <span class="n">v</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">params</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">preset</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}))</span>

    <span class="k">def</span> <span class="nf">http</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">preset</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}))</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>
        <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>

    <span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>

<span class="c1"># ----- 싱글톤 -----
</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
<span class="n">_instance</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">_ReadOnlyConfig</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">_default_path</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">_resolve_default_path</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_default_path</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_get_instance</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span>
    <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">_instance</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span><span class="p">,</span> <span class="n">_default_path</span>
    <span class="k">if</span> <span class="n">path</span><span class="p">:</span>
        <span class="n">_default_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">refresh_seconds</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">refresh_seconds</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
        <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>

<span class="c1"># ---- 외부 API ----
</span><span class="k">def</span> <span class="nf">preset</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>     <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">preset</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">presets</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span> <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">presets</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">params</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>     <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">params</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">http</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>       <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">http</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>                <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">snapshot</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>           <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">snapshot</span><span class="p">()</span>

<span class="c1"># ---- 하위 호환 별칭 ----
</span><span class="k">def</span> <span class="nf">profile</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>    <span class="k">return</span> <span class="nf">preset</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">profiles</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span><span class="k">return</span> <span class="nf">presets</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>   <span class="k">return</span> <span class="nf">preset</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">endpoints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span> <span class="k">return</span> <span class="nf">presets</span><span class="p">()</span>

<span class="c1"># ---- 객체형 프록시 ----
</span><span class="k">class</span> <span class="nc">_ConfigProxy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">_get_instance</span><span class="p">(),</span> <span class="n">name</span><span class="p">)</span>
<span class="n">CONFIG</span> <span class="o">=</span> <span class="nf">_ConfigProxy</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-원하면-comfyui-노드도-용어-맞춰-변경">4) (원하면) ComfyUI 노드도 용어 맞춰 변경</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ConfigPresetLookup</code> : <code class="language-plaintext highlighter-rouge">display_name</code>, <code class="language-plaintext highlighter-rouge">request_name</code>, <code class="language-plaintext highlighter-rouge">base_url</code>, <code class="language-plaintext highlighter-rouge">api_key</code>, <code class="language-plaintext highlighter-rouge">params(json)</code>, <code class="language-plaintext highlighter-rouge">http(json)</code> 출력</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ConfigListPresets</code> : 모든 프리셋 JSON</p>
  </li>
</ul>

<p>원하시면 바로 생성해 줄게.</p>

<hr />

<h1 id="5-마이그레이션-정리">5) 마이그레이션 정리</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">profile(s)</code> / <code class="language-plaintext highlighter-rouge">endpoint(s)</code> 호출 코드는 그대로 동작(별칭 제공).</p>
  </li>
  <li>
    <p>설정 파일에서 <code class="language-plaintext highlighter-rouge">[profiles]</code>/<code class="language-plaintext highlighter-rouge">[endpoints]</code> 유지해도 인식하지만, 앞으로는 <strong><code class="language-plaintext highlighter-rouge">[presets]</code> 권장</strong>.</p>
  </li>
  <li>
    <p>모델 파라미터/HTTP 옵션은 프리셋 내부(<code class="language-plaintext highlighter-rouge">params</code>/<code class="language-plaintext highlighter-rouge">http</code>)에 넣으면 되고, 공통값은 <code class="language-plaintext highlighter-rouge">defaults</code>에 두면 자동 병합돼.</p>
  </li>
</ul>

<hr />

<p>필요하면 “preset” 대신 <strong><code class="language-plaintext highlighter-rouge">deployment</code></strong> , <strong><code class="language-plaintext highlighter-rouge">model_preset</code></strong> 같은 더 구체적인 대안도 줄 수 있어. 하지만 <em>모델 호출용 세팅 묶음</em> 이라는 관점에서 사용자/오퍼레이터 모두에게 가장 익숙하고 짧은 용어는 “preset”이라 이걸 기본 권장으로 뒀어.</p>

<p class="chat--user">

아니 llm endpoint 라는 느낌이 전혀 안들어서

</p>

<p>오케이—“LLM 엔드포인트” 느낌을 확실히 주도록 <strong>용어를 <code class="language-plaintext highlighter-rouge">llm_endpoints</code></strong>로 표준화했어요.<br />
(이전 <code class="language-plaintext highlighter-rouge">presets</code>/<code class="language-plaintext highlighter-rouge">profiles</code>/<code class="language-plaintext highlighter-rouge">endpoints</code>는 <strong>자동 하위 호환</strong> 으로 계속 읽습니다.)</p>

<p>아래 두 파일만 교체하면 끝! 외부에서는 <code class="language-plaintext highlighter-rouge">llm_endpoint(...)</code>, <code class="language-plaintext highlighter-rouge">llm_params(...)</code> 같은 이름으로 바로 씁니다.</p>

<hr />

<h1 id="1-스키마-configtoml">1) 스키마 (config.toml)</h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="c"># 파일 변경 감지 주기(초) — 5~60 권장. "1분 이내 반영" 요건 충족.</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>

<span class="c"># 공통 기본값(선택): 모든 LLM 엔드포인트에 병합됨</span>
<span class="nn">[defaults.params]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.3</span>
<span class="py">max_tokens</span>  <span class="p">=</span> <span class="mi">2048</span>

<span class="nn">[defaults.http]</span>
<span class="py">timeout_seconds</span> <span class="p">=</span> <span class="mi">30</span>
<span class="nn">[defaults.http.headers]</span>
<span class="py">User-Agent</span> <span class="p">=</span> <span class="s">"ComfyUI-ConfigReader/1.0"</span>

<span class="c"># ── LLM 엔드포인트들 ─────────────────────────────────────────</span>
<span class="nn">[llm_endpoints."gpt-4o-mini-a"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"OpenAI GPT-4o mini A"</span>
<span class="py">model</span>        <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>             <span class="c"># (= request_name 별칭)</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>

<span class="nn">[llm_endpoints."gpt-4o-mini-a".params]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.2</span>
<span class="py">top_p</span>       <span class="p">=</span> <span class="mf">0.9</span>

<span class="nn">[llm_endpoints."gpt-4o-mini-a".http]</span>
<span class="py">timeout_seconds</span> <span class="p">=</span> <span class="mi">20</span>
<span class="nn">[llm_endpoints."gpt-4o-mini-a".http.headers]</span>
<span class="py">X-Org-Id</span> <span class="p">=</span> <span class="s">"${ORG_ID}"</span>

<span class="nn">[llm_endpoints."claude-sonnet"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"Anthropic Claude 3.5 Sonnet"</span>
<span class="py">model</span>        <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>

<span class="c"># ── 다른 일반 설정도 자유롭게 ────────────────────────────────</span>
<span class="nn">[feature_flags]</span>
<span class="py">use_cache</span> <span class="p">=</span> <span class="kc">true</span>
</code></pre></div></div>

<ul>
  <li>
    <p>필수: <code class="language-plaintext highlighter-rouge">display_name</code>, <code class="language-plaintext highlighter-rouge">model(=request_name)</code>, <code class="language-plaintext highlighter-rouge">base_url</code>, <code class="language-plaintext highlighter-rouge">api_key</code></p>
  </li>
  <li>
    <p>선택: <code class="language-plaintext highlighter-rouge">params</code>(모델 파라미터), <code class="language-plaintext highlighter-rouge">http</code>(timeout/headers/query 등)</p>
  </li>
  <li>
    <p><strong>병합 규칙</strong> : <code class="language-plaintext highlighter-rouge">defaults.params</code>/<code class="language-plaintext highlighter-rouge">defaults.http</code> → 각 엔드포인트의 <code class="language-plaintext highlighter-rouge">params</code>/<code class="language-plaintext highlighter-rouge">http</code>에 <strong>덮어쓰기 병합</strong></p>
  </li>
</ul>

<blockquote>
  <p>하위 호환: <code class="language-plaintext highlighter-rouge">[presets]</code>, <code class="language-plaintext highlighter-rouge">[profiles]</code>, <code class="language-plaintext highlighter-rouge">[endpoints]</code>도 자동 인식합니다.<br />
 필드도 <code class="language-plaintext highlighter-rouge">request_name</code>/<code class="language-plaintext highlighter-rouge">request_model</code>/<code class="language-plaintext highlighter-rouge">model</code> 중 아무거나 써도 OK(내부에서 <code class="language-plaintext highlighter-rouge">model</code>로 통일).</p>
</blockquote>

<hr />

<h1 id="2-외부-접근-api-싱글톤-직관적">2) 외부 접근 API (싱글톤, 직관적)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">llm_endpoint</span><span class="p">,</span> <span class="n">llm_endpoints</span><span class="p">,</span>   <span class="c1"># 메타 + 연결 정보
</span>    <span class="n">llm_params</span><span class="p">,</span> <span class="n">llm_http</span><span class="p">,</span>          <span class="c1"># 모델 파라미터 / HTTP 옵션만
</span>    <span class="n">get</span><span class="p">,</span> <span class="n">CONFIG</span><span class="p">,</span>                   <span class="c1"># 범용 키 접근 / 객체형 접근
</span><span class="p">)</span>
</code></pre></div></div>

<p>사용 예:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cfg</span> <span class="o">=</span> <span class="nf">llm_endpoint</span><span class="p">(</span><span class="sh">"</span><span class="s">gpt-4o-mini-a</span><span class="sh">"</span><span class="p">)</span>     <span class="c1"># 키 / display_name / model 아무거나
</span><span class="n">api_key</span>  <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
<span class="n">base_url</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]</span>
<span class="n">model</span>    <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">]</span>
<span class="n">params</span>   <span class="o">=</span> <span class="nf">llm_params</span><span class="p">(</span><span class="sh">"</span><span class="s">gpt-4o-mini-a</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># {"temperature": 0.2, "top_p": 0.9, ...}
</span><span class="n">http</span>     <span class="o">=</span> <span class="nf">llm_http</span><span class="p">(</span><span class="sh">"</span><span class="s">gpt-4o-mini-a</span><span class="sh">"</span><span class="p">)</span>    <span class="c1"># {"timeout_seconds": ..., "headers": {...}, ...}
</span>
<span class="c1"># 범용 설정
</span><span class="n">use_cache</span> <span class="o">=</span> <span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">feature_flags.use_cache</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="3-드롭인-교체-코드-1">3) 드롭인 교체 코드</h1>

<h2 id="custom_nodescomfyui_config_reader__init__py-1"><code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/__init__.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.config_singleton</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">CONFIG</span><span class="p">,</span>
    <span class="n">configure</span><span class="p">,</span>
    <span class="n">llm_endpoint</span><span class="p">,</span> <span class="n">llm_endpoints</span><span class="p">,</span>
    <span class="n">llm_params</span><span class="p">,</span> <span class="n">llm_http</span><span class="p">,</span>
    <span class="n">get</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">,</span>
    <span class="c1"># legacy alias (하위 호환)
</span>    <span class="n">preset</span> <span class="k">as</span> <span class="n">preset</span><span class="p">,</span> <span class="n">presets</span> <span class="k">as</span> <span class="n">presets</span><span class="p">,</span>
    <span class="n">profile</span> <span class="k">as</span> <span class="n">profile</span><span class="p">,</span> <span class="n">profiles</span> <span class="k">as</span> <span class="n">profiles</span><span class="p">,</span>
    <span class="n">endpoint</span> <span class="k">as</span> <span class="n">endpoint</span><span class="p">,</span> <span class="n">endpoints</span> <span class="k">as</span> <span class="n">endpoints</span><span class="p">,</span>
    <span class="n">params</span> <span class="k">as</span> <span class="n">params</span><span class="p">,</span> <span class="n">http</span> <span class="k">as</span> <span class="n">http</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="custom_nodescomfyui_config_readerconfig_singletonpy-1"><code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/config_singleton.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># py3.11+
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>     <span class="c1"># py3.10-
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">],</span> <span class="sh">""</span><span class="p">);</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>  <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>  <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">b</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">b</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">v</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="c1"># --- 필드 별칭 정규화 (model / request_name / request_model) ---
</span><span class="k">def</span> <span class="nf">_normalize_model_field</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">and</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="sh">""</span>

<span class="k">class</span> <span class="nc">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 읽기 전용 TOML
    - mtime + TTL(5~60s, 기본 30s) 자동 재로드 → 1분 내 변경 반영
    - 표준 섹션: [llm_endpoints]
      (하위 호환: [presets], [profiles], [endpoints] 도 자동 인식)
    - 각 엔드포인트:
        * display_name, model(=request_name/… 별칭), base_url, api_key
        * params(dict), http(dict: timeout_seconds, headers{}, query{})
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># --- 내부 로딩 ---
</span>    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_extract_llm_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="c1"># 1순위 표준
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_endpoints</span><span class="sh">"</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">llm_endpoints</span><span class="sh">"</span><span class="p">]</span>
        <span class="c1"># 하위 호환
</span>        <span class="k">for</span> <span class="n">key</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">presets</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">profiles</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endpoints</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span> <span class="n">data</span><span class="p">[</span><span class="n">key</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>

        <span class="c1"># defaults
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">defaults</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="n">d_params</span> <span class="o">=</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="n">d_http</span>   <span class="o">=</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">)</span>   <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">d_http</span><span class="p">:</span> <span class="n">d_http</span><span class="p">[</span><span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">query</span><span class="sh">"</span>   <span class="ow">not</span> <span class="ow">in</span> <span class="n">d_http</span><span class="p">:</span> <span class="n">d_http</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">]</span>   <span class="o">=</span> <span class="p">{}</span>

        <span class="n">tbl</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_extract_llm_table</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span>

        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">raw</span> <span class="ow">in</span> <span class="n">tbl</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">continue</span>
            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>

            <span class="n">display</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">model</span>   <span class="o">=</span> <span class="nf">_normalize_model_field</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>
            <span class="n">base</span>    <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">api</span>     <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">display</span> <span class="ow">and</span> <span class="n">model</span> <span class="ow">and</span> <span class="n">base</span> <span class="ow">and</span> <span class="n">api</span><span class="p">):</span>
                <span class="k">continue</span>  <span class="c1"># 필수 누락은 스킵
</span>
            <span class="n">p_params</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>
            <span class="n">p_http</span>   <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">)</span>   <span class="ow">or</span> <span class="p">{}</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">p_http</span><span class="p">:</span> <span class="n">p_http</span><span class="p">[</span><span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">query</span><span class="sh">"</span>   <span class="ow">not</span> <span class="ow">in</span> <span class="n">p_http</span><span class="p">:</span> <span class="n">p_http</span><span class="p">[</span><span class="sh">"</span><span class="s">query</span><span class="sh">"</span><span class="p">]</span>   <span class="o">=</span> <span class="p">{}</span>

            <span class="n">merged_params</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">d_params</span><span class="p">,</span> <span class="o">**</span><span class="n">p_params</span><span class="p">}</span>
            <span class="n">merged_http</span>   <span class="o">=</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">d_http</span><span class="p">,</span> <span class="n">p_http</span><span class="p">)</span>

            <span class="n">entry</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">display</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span>        <span class="n">model</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">base</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span>      <span class="n">api</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">:</span>       <span class="n">merged_params</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">:</span>         <span class="n">merged_http</span><span class="p">,</span>
            <span class="p">}</span>
            <span class="c1"># 접근 키: 정의 키 / display_name / model
</span>            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">display</span><span class="p">,</span> <span class="n">model</span><span class="p">}:</span>
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="n">entry</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>
        <span class="n">env_r</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_r</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_r</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span> <span class="k">pass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="n">r</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># --- 퍼블릭 API ---
</span>    <span class="k">def</span> <span class="nf">llm_endpoint</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">llm_endpoint key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">llm_endpoint not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">llm_endpoints</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">dn</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span> <span class="k">continue</span>
            <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">dn</span><span class="p">)</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span>        <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">:</span>       <span class="n">v</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
                <span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">:</span>         <span class="n">v</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">llm_params</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">llm_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}))</span>

    <span class="k">def</span> <span class="nf">llm_http</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">llm_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">http</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}))</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>
        <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>

    <span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>

<span class="c1"># ----- 싱글톤 -----
</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
<span class="n">_instance</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">_ReadOnlyConfig</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">_default_path</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">_resolve_default_path</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_default_path</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_get_instance</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span>
    <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">_instance</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span><span class="p">,</span> <span class="n">_default_path</span>
    <span class="k">if</span> <span class="n">path</span><span class="p">:</span>
        <span class="n">_default_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">refresh_seconds</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">refresh_seconds</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
        <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>

<span class="c1"># ---- 외부 API ----
</span><span class="k">def</span> <span class="nf">llm_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>     <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">llm_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">llm_endpoints</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span> <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">llm_endpoints</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">llm_params</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>       <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">llm_params</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">llm_http</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>         <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">llm_http</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>                      <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">snapshot</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>                 <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">snapshot</span><span class="p">()</span>

<span class="c1"># ---- 하위 호환 별칭 (필요 시 기존 코드 그대로 동작) ----
</span><span class="k">def</span> <span class="nf">preset</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span>   <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>         <span class="k">return</span> <span class="nf">llm_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">presets</span><span class="p">()</span>          <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span> <span class="k">return</span> <span class="nf">llm_endpoints</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">profile</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span>  <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>         <span class="k">return</span> <span class="nf">llm_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">profiles</span><span class="p">()</span>         <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span> <span class="k">return</span> <span class="nf">llm_endpoints</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>         <span class="k">return</span> <span class="nf">llm_endpoint</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">endpoints</span><span class="p">()</span>        <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span> <span class="k">return</span> <span class="nf">llm_endpoints</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">params</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span>   <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>         <span class="k">return</span> <span class="nf">llm_params</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">http</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span>     <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>         <span class="k">return</span> <span class="nf">llm_http</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

<span class="c1"># ---- 객체형 프록시 ----
</span><span class="k">class</span> <span class="nc">_ConfigProxy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">_get_instance</span><span class="p">(),</span> <span class="n">name</span><span class="p">)</span>
<span class="n">CONFIG</span> <span class="o">=</span> <span class="nf">_ConfigProxy</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-왜-이게-좋은가-짧게">4) 왜 이게 좋은가 (짧게)</h1>

<ul>
  <li>
    <p>이름부터 <strong>LLM 엔드포인트</strong> 임이 분명 (<code class="language-plaintext highlighter-rouge">llm_endpoints</code>)</p>
  </li>
  <li>
    <p>모델 파라미터/HTTP 옵션을 <strong>같은 묶음</strong> 에서 관리 (<code class="language-plaintext highlighter-rouge">params</code>, <code class="language-plaintext highlighter-rouge">http</code>)</p>
  </li>
  <li>
    <p>기존 설정/코드 <strong>안 깨짐</strong>(자동 호환)</p>
  </li>
  <li>
    <p>읽기 전용 + mtime/TTL(5~60s)로 <strong>최대 1분 내 변경 반영</strong></p>
  </li>
  <li>
    <p>외부 사용은 <strong>한 줄 임포트</strong> 로 끝: <code class="language-plaintext highlighter-rouge">llm_endpoint("...")</code></p>
  </li>
</ul>

<p>원하면 ComfyUI 노드 이름도 <code class="language-plaintext highlighter-rouge">Config: LLM Endpoint Lookup</code>, <code class="language-plaintext highlighter-rouge">Config: List LLM Endpoints</code>로 맞춰서 출력(파라미터/HTTP JSON 포함) 버전까지 바로 만들어줄게!</p>

<p class="chat--user">

api_providers display_name, model_id, base_url, api_key 이걸로 해줘.

</p>

<p>좋아! <strong>이름은<code class="language-plaintext highlighter-rouge">api_providers</code></strong>, 필드는 <strong><code class="language-plaintext highlighter-rouge">display_name</code>, <code class="language-plaintext highlighter-rouge">model_id</code>, <code class="language-plaintext highlighter-rouge">base_url</code>, <code class="language-plaintext highlighter-rouge">api_key</code></strong>로 딱 맞춰서 정리했어.<br />
(읽기 전용 · 최대 1분 내 변경 반영 · 다른 노드/파일에서 한 줄로 접근)</p>

<p>아래 코드/예시 그대로 교체하면 동작해.</p>

<hr />

<h1 id="1-configtoml-스키마">1) <code class="language-plaintext highlighter-rouge">config.toml</code> 스키마</h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="c"># 파일 변경 감지 주기(초) — 5~60 권장. "1분 이내 반영" 요건 충족.</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>

<span class="c"># ── API Providers ─────────────────────────────────────</span>
<span class="nn">[api_providers."openai-mini"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"OpenAI GPT-4o mini"</span>
<span class="py">model_id</span>     <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>

<span class="nn">[api_providers."anthropic-sonnet"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"Anthropic Claude 3.5 Sonnet"</span>
<span class="py">model_id</span>     <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>

<span class="c"># ── 다른 범용 설정도 자유롭게 ─────────────────────────</span>
<span class="nn">[feature_flags]</span>
<span class="py">use_cache</span> <span class="p">=</span> <span class="kc">true</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">${ENV}</code> 표기는 환경변수로 치환.</p>
  </li>
  <li>
    <p>조회 키는 <strong>정의 키 /<code class="language-plaintext highlighter-rouge">display_name</code> / <code class="language-plaintext highlighter-rouge">model_id</code></strong> 중 아무거나 사용 가능.</p>
  </li>
</ul>

<hr />

<h1 id="2-외부에서-쓰는-법-싱글톤-한-줄">2) 외부에서 쓰는 법 (싱글톤, 한 줄)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">api_provider</span><span class="p">,</span> <span class="n">api_providers</span><span class="p">,</span> <span class="n">get</span>

<span class="n">cfg</span> <span class="o">=</span> <span class="nf">api_provider</span><span class="p">(</span><span class="sh">"</span><span class="s">openai-mini</span><span class="sh">"</span><span class="p">)</span>   <span class="c1"># 또는 "OpenAI GPT-4o mini" / "gpt-4o-mini"
</span><span class="n">api_key</span>  <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">]</span>
<span class="n">base_url</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">]</span>
<span class="n">model_id</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">]</span>

<span class="n">listing</span> <span class="o">=</span> <span class="nf">api_providers</span><span class="p">()</span>           <span class="c1"># {display_name: {display_name, model_id, base_url}}
</span><span class="n">use_cache</span> <span class="o">=</span> <span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">feature_flags.use_cache</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>선택(초기화 시 한 번):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">configure</span>
<span class="nf">configure</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="sh">"</span><span class="s">/abs/path/to/config.toml</span><span class="sh">"</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>  <span class="c1"># 5~60
</span></code></pre></div></div>

<hr />

<h1 id="3-드롭인-코드">3) 드롭인 코드</h1>

<h2 id="custom_nodescomfyui_config_reader__init__py-2"><code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/__init__.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.config_singleton</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">CONFIG</span><span class="p">,</span>
    <span class="n">configure</span><span class="p">,</span>
    <span class="n">api_provider</span><span class="p">,</span> <span class="n">api_providers</span><span class="p">,</span>
    <span class="n">get</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="custom_nodescomfyui_config_readerconfig_singletonpy-2"><code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/config_singleton.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># py3.11+
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>     <span class="c1"># py3.10-
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">],</span> <span class="sh">""</span><span class="p">);</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>  <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>  <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="c1"># 레거시 필드 호환: model_id 대신 model/request_name/request_model 이 들어와도 인식
</span><span class="k">def</span> <span class="nf">_normalize_model_id</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">and</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="sh">""</span>

<span class="k">class</span> <span class="nc">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 읽기 전용 TOML 로더 (파일 쓰기 없음)
    - mtime + TTL(5~60s, 기본 30s) 자동 재로드 → 1분 내 변경 반영
    - 표준 섹션: [api_providers]
      (참고: 원하면 하위 호환 섹션을 추가로 인식하도록 확장 가능)
    - 각 provider 필수 필드: display_name, model_id, base_url, api_key
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># --- 내부 로딩 ---
</span>    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_providers_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">tbl</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_providers</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tbl</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="n">tbl</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_providers_table</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span>

        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">raw</span> <span class="ow">in</span> <span class="n">tbl</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">continue</span>
            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>

            <span class="n">display</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">model</span>   <span class="o">=</span> <span class="nf">_normalize_model_id</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>
            <span class="n">base</span>    <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">api</span>     <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">display</span> <span class="ow">and</span> <span class="n">model</span> <span class="ow">and</span> <span class="n">base</span> <span class="ow">and</span> <span class="n">api</span><span class="p">):</span>
                <span class="k">continue</span>  <span class="c1"># 필수 누락은 스킵
</span>
            <span class="n">entry</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">display</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">:</span>     <span class="n">model</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">base</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span>      <span class="n">api</span><span class="p">,</span>
            <span class="p">}</span>

            <span class="c1"># 접근 키: 정의 키 / display_name / model_id
</span>            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">display</span><span class="p">,</span> <span class="n">model</span><span class="p">}:</span>
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="n">entry</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="n">r</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>
        <span class="n">env_r</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_r</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_r</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span> <span class="k">pass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="n">r</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># --- 퍼블릭 API ---
</span>    <span class="k">def</span> <span class="nf">api_provider</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_provider key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">api_provider not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">api_providers</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">API Key는 목록에선 숨김.</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">dn</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span> <span class="k">continue</span>
            <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">dn</span><span class="p">)</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>
        <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>

    <span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>

<span class="c1"># ----- 싱글톤 -----
</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
<span class="n">_instance</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">_ReadOnlyConfig</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">_default_path</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">_resolve_default_path</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_default_path</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_get_instance</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span>
    <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">_instance</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span><span class="p">,</span> <span class="n">_default_path</span>
    <span class="k">if</span> <span class="n">path</span><span class="p">:</span>
        <span class="n">_default_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">refresh_seconds</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">refresh_seconds</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
        <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>

<span class="c1"># ---- 외부 API ----
</span><span class="k">def</span> <span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>         <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">api_providers</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]:</span>     <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_providers</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>                          <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">snapshot</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>                     <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">snapshot</span><span class="p">()</span>

<span class="c1"># ---- 객체형 프록시 ----
</span><span class="k">class</span> <span class="nc">_ConfigProxy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">_get_instance</span><span class="p">(),</span> <span class="n">name</span><span class="p">)</span>
<span class="n">CONFIG</span> <span class="o">=</span> <span class="nf">_ConfigProxy</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-선택-comfyui-노드도-용어-맞춰-제공">4) (선택) ComfyUI 노드도 용어 맞춰 제공</h1>

<p>원한다면 <code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/config_nodes.py</code>에 아래처럼:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.config_singleton</span> <span class="kn">import</span> <span class="n">api_provider</span><span class="p">,</span> <span class="n">api_providers</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="k">class</span> <span class="nc">ConfigAPIProviderLookup</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">})}}</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lookup</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Config/API Providers (ReadOnly)</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">lookup</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">])</span>

<span class="k">class</span> <span class="nc">ConfigListAPIProviders</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">providers_json</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">list_providers</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Config/API Providers (ReadOnly)</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">list_providers</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">api_providers</span><span class="p">(),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">),)</span>

<span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">ConfigAPIProviderLookup</span><span class="sh">"</span><span class="p">:</span> <span class="n">ConfigAPIProviderLookup</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigListAPIProviders</span><span class="sh">"</span><span class="p">:</span>  <span class="n">ConfigListAPIProviders</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">ConfigAPIProviderLookup</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Config: API Provider Lookup</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">ConfigListAPIProviders</span><span class="sh">"</span><span class="p">:</span>  <span class="sh">"</span><span class="s">Config: List API Providers</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h1 id="5-체크리스트">5) 체크리스트</h1>

<ul>
  <li>
    <p>✅ 섹션/필드명: <strong><code class="language-plaintext highlighter-rouge">api_providers</code> / (display_name, model_id, base_url, api_key)</strong></p>
  </li>
  <li>
    <p>✅ 읽기 전용 + 파일 변경 <strong>최대 1분 내 반영</strong> (mtime + TTL 5~60, 기본 30)</p>
  </li>
  <li>
    <p>✅ 어디서든 간단 접근: <code class="language-plaintext highlighter-rouge">api_provider("키|표시명|model_id")</code></p>
  </li>
  <li>
    <p>✅ 사람이 편집 쉬운 TOML + <code class="language-plaintext highlighter-rouge">${ENV}</code> 치환</p>
  </li>
  <li>
    <p>✅ 목록 노드는 <strong>api_key 비노출</strong></p>
  </li>
</ul>

<p>필요하면, 기존 워크플로우(노드 그래프)에서 자동으로 이 이름들로 바꿔주는 스크립트도 만들어줄게.</p>

<p class="chat--user">

아 params도 포함해줘. 그런데 [api_providers."anthropic-sonnet"] 이 안에 parameters를 dictionary로 넣을 수 없나? 따로 항목을 빼니까 보기가 불편한데 이런건 yaml에서만 가능?

</p>

<p>좋아, <strong>TOML에서도 딕셔너리(맵)를 한 섹션 안에</strong> 넣을 수 있어.<br />
YAML만 되는 게 아니고, TOML은 두 가지 방법을 지원해:</p>

<ol>
  <li>
    <p><strong>인라인 테이블</strong> : 한 줄 <code class="language-plaintext highlighter-rouge">{ ... }</code> 로 딕셔너리 값을 넣기</p>
  </li>
  <li>
    <p><strong>점 표기(dotted keys)</strong> : <code class="language-plaintext highlighter-rouge">parameters.temperature = 0.7</code> 처럼 같은 섹션 안에서 키를 점으로 이어 쓰기</p>
  </li>
</ol>

<p>아래에 둘 다 예시 + 코드를 싱글톤 API에 반영해줄게. <code class="language-plaintext highlighter-rouge">api_providers</code> 항목 안에 <code class="language-plaintext highlighter-rouge">parameters</code>를 그대로 넣고, 기본값 병합도 지원해.</p>

<hr />

<h1 id="1-toml-작성법-step-by-step">1) TOML 작성법 (step-by-step)</h1>

<h2 id="a-인라인-테이블깔끔-한-줄">A. 인라인 테이블(깔끔, 한 줄)</h2>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[api_providers."anthropic-sonnet"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"Anthropic Claude 3.5 Sonnet"</span>
<span class="py">model_id</span>     <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>
<span class="py">parameters</span>   <span class="o">=</span> <span class="p">{</span> <span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.2</span><span class="p">,</span> <span class="py">top_p</span> <span class="p">=</span> <span class="mf">0.9</span><span class="p">,</span> <span class="py">stop</span> <span class="p">=</span> <span class="p">[</span><span class="s">"</span><span class="se">\n\n</span><span class="s">Human:"</span><span class="p">,</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">Assistant:"</span><span class="p">]</span> <span class="p">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>장점: 한눈에 보기 좋음.</p>
  </li>
  <li>
    <p>유의: <strong>TOML 1.0 스펙상 인라인 테이블은 한 줄</strong> 이어야 해. (줄바꿈/주석 넣기 어려움)</p>
  </li>
</ul>

<h2 id="b-점-표기dotted-keys-같은-섹션-내부-다줄">B. 점 표기(dotted keys, 같은 섹션 내부 다줄)</h2>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[api_providers."anthropic-sonnet"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"Anthropic Claude 3.5 Sonnet"</span>
<span class="py">model_id</span>     <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>
<span class="py">parameters.temperature</span> <span class="p">=</span> <span class="mf">0.2</span>
<span class="py">parameters.top_p</span>       <span class="p">=</span> <span class="mf">0.9</span>
<span class="py">parameters.stop</span>        <span class="p">=</span> <span class="p">[</span><span class="s">"</span><span class="se">\n\n</span><span class="s">Human:"</span><span class="p">,</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">Assistant:"</span><span class="p">]</span>  <span class="c"># ← 주석 OK</span>
</code></pre></div></div>

<ul>
  <li>
    <p>장점: 여러 줄로 읽기 편하고 <strong>주석 가능</strong>.</p>
  </li>
  <li>
    <p>내부적으로는 딕셔너리로 파싱됨. (YAML 필요 없음)</p>
  </li>
</ul>

<h2 id="선택-공통-기본값-병합">(선택) 공통 기본값 병합</h2>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[defaults.parameters]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.3</span>
<span class="py">max_tokens</span>  <span class="p">=</span> <span class="mi">2048</span>
</code></pre></div></div>

<ul>
  <li>각 provider의 <code class="language-plaintext highlighter-rouge">parameters</code> 위에 <strong>덮어쓰기 병합</strong> 돼서 최종값이 만들어져.</li>
</ul>

<hr />

<h1 id="2-전체-예시-configtoml">2) 전체 예시 <code class="language-plaintext highlighter-rouge">config.toml</code></h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>  <span class="c"># 5~60(요구: 1분 내 반영)</span>

<span class="nn">[defaults.parameters]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.3</span>
<span class="py">max_tokens</span>  <span class="p">=</span> <span class="mi">2048</span>

<span class="c"># ── OpenAI (인라인 테이블) ───────────────────────────</span>
<span class="nn">[api_providers."openai-mini"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"OpenAI GPT-4o mini"</span>
<span class="py">model_id</span>     <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>
<span class="py">parameters</span>   <span class="o">=</span> <span class="p">{</span> <span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.25</span><span class="p">,</span> <span class="py">top_p</span> <span class="p">=</span> <span class="mf">0.95</span> <span class="p">}</span>

<span class="c"># ── Anthropic (점 표기) ───────────────────────────────</span>
<span class="nn">[api_providers."anthropic-sonnet"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"Anthropic Claude 3.5 Sonnet"</span>
<span class="py">model_id</span>     <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>
<span class="py">parameters.temperature</span> <span class="p">=</span> <span class="mf">0.2</span>
<span class="py">parameters.top_p</span>       <span class="p">=</span> <span class="mf">0.9</span>
<span class="py">parameters.stop</span>        <span class="p">=</span> <span class="p">[</span><span class="s">"</span><span class="se">\n\n</span><span class="s">Human:"</span><span class="p">,</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">Assistant:"</span><span class="p">]</span>
</code></pre></div></div>

<hr />

<h1 id="3-외부-사용-방법-그대로--parameters-지원">3) 외부 사용 방법 (그대로, + <code class="language-plaintext highlighter-rouge">parameters</code> 지원)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="n">api_provider</span><span class="p">,</span> <span class="n">api_providers</span><span class="p">,</span> <span class="n">api_parameters</span><span class="p">,</span> <span class="n">get</span>

<span class="n">cfg</span> <span class="o">=</span> <span class="nf">api_provider</span><span class="p">(</span><span class="sh">"</span><span class="s">anthropic-sonnet</span><span class="sh">"</span><span class="p">)</span>   <span class="c1"># 키 / display_name / model_id 아무거나
</span><span class="nf">print</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">],</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">])</span>                  <span class="c1"># ← 최종 병합된 dict
</span>
<span class="c1"># 파라미터만 바로
</span><span class="n">params</span> <span class="o">=</span> <span class="nf">api_parameters</span><span class="p">(</span><span class="sh">"</span><span class="s">openai-mini</span><span class="sh">"</span><span class="p">)</span>    <span class="c1"># {"temperature": 0.25, "top_p": 0.95, "max_tokens": 2048}
</span><span class="n">use_cache</span> <span class="o">=</span> <span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">feature_flags.use_cache</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="4-드롭인-교체-코드">4) 드롭인 교체 코드</h1>

<h2 id="custom_nodescomfyui_config_reader__init__py-3"><code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/__init__.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.config_singleton</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">CONFIG</span><span class="p">,</span>
    <span class="n">configure</span><span class="p">,</span>
    <span class="n">api_provider</span><span class="p">,</span> <span class="n">api_providers</span><span class="p">,</span>
    <span class="n">api_parameters</span><span class="p">,</span>                  <span class="c1"># ← 추가
</span>    <span class="n">get</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="custom_nodescomfyui_config_readerconfig_singletonpy-3"><code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/config_singleton.py</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># py3.11+
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>     <span class="c1"># py3.10-
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="k">def</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">],</span> <span class="sh">""</span><span class="p">);</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>  <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>  <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">_normalize_model_id</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">and</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">b</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">b</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">v</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 읽기 전용 TOML
    - mtime + TTL(5~60s, 기본 30s) 자동 재로드 → 1분 내 변경 반영
    - 표준 섹션: [api_providers]
    - 각 provider 필수: display_name, model_id, base_url, api_key
      + 선택: parameters(dict)  # 인라인 테이블 또는 dotted keys 모두 지원
    - [defaults.parameters] 병합 지원(개별 provider.parameters가 우선)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># --- 내부 로딩 ---
</span>    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_providers_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">tbl</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_providers</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tbl</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>

        <span class="c1"># defaults.parameters (alias: defaults.params도 지원)
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">defaults</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="n">d_params</span> <span class="o">=</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>

        <span class="n">tbl</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_providers_table</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span>

        <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">raw</span> <span class="ow">in</span> <span class="n">tbl</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">continue</span>
            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>

            <span class="n">display</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">model</span>   <span class="o">=</span> <span class="nf">_normalize_model_id</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>
            <span class="n">base</span>    <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">api</span>     <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">display</span> <span class="ow">and</span> <span class="n">model</span> <span class="ow">and</span> <span class="n">base</span> <span class="ow">and</span> <span class="n">api</span><span class="p">):</span>
                <span class="k">continue</span>  <span class="c1"># 필수 누락 스킵
</span>
            <span class="c1"># provider.parameters (alias: params) 추출 + defaults 병합
</span>            <span class="n">p_params</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">p_params</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">p_params</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 과거 명칭 호환
</span>            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p_params</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="n">p_params</span> <span class="o">=</span> <span class="p">{}</span>

            <span class="n">merged_params</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">d_params</span><span class="p">,</span> <span class="o">**</span><span class="n">p_params</span><span class="p">}</span>

            <span class="n">entry</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">display</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">:</span>     <span class="n">model</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">base</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span>      <span class="n">api</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span>   <span class="n">merged_params</span><span class="p">,</span>  <span class="c1"># ← 포함
</span>            <span class="p">}</span>

            <span class="c1"># 접근 키: 정의 키 / display_name / model_id
</span>            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">),</span> <span class="n">display</span><span class="p">,</span> <span class="n">model</span><span class="p">}:</span>
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="n">entry</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="n">r</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>
        <span class="n">env_r</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_r</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_r</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span> <span class="k">pass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="n">r</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># --- 퍼블릭 API ---
</span>    <span class="k">def</span> <span class="nf">api_provider</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_provider key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">api_provider not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">api_providers</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">목록에서는 api_key 숨김, parameters는 노출.</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="n">dn</span> <span class="o">=</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">dn</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span> <span class="k">continue</span>
            <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">dn</span><span class="p">)</span>
            <span class="n">out</span><span class="p">[</span><span class="n">dn</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span>   <span class="n">v</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">api_parameters</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}))</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>
        <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>

    <span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>

<span class="c1"># ----- 싱글톤 -----
</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
<span class="n">_instance</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">_ReadOnlyConfig</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">_default_path</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">_resolve_default_path</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_default_path</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_get_instance</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span>
    <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">_instance</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span><span class="p">,</span> <span class="n">_default_path</span>
    <span class="k">if</span> <span class="n">path</span><span class="p">:</span>
        <span class="n">_default_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">refresh_seconds</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">refresh_seconds</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
        <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>

<span class="c1"># ---- 외부 API ----
</span><span class="k">def</span> <span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>         <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">api_providers</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>     <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_providers</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">api_parameters</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>       <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_parameters</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>                          <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">snapshot</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>                     <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">snapshot</span><span class="p">()</span>

<span class="c1"># ---- 객체형 프록시 ----
</span><span class="k">class</span> <span class="nc">_ConfigProxy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">_get_instance</span><span class="p">(),</span> <span class="n">name</span><span class="p">)</span>
<span class="n">CONFIG</span> <span class="o">=</span> <span class="nf">_ConfigProxy</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="5-정리">5) 정리</h1>

<ul>
  <li>
    <p>✅ <strong>TOML에서도 딕셔너리 가능</strong> : 인라인 테이블 <code class="language-plaintext highlighter-rouge">{...}</code> 또는 점 표기 <code class="language-plaintext highlighter-rouge">parameters.foo =</code></p>
  </li>
  <li>
    <p>✅ <code class="language-plaintext highlighter-rouge">api_providers</code> 각 항목에 <strong><code class="language-plaintext highlighter-rouge">parameters</code> 포함</strong> 지원 (인라인/점표기 모두 OK)</p>
  </li>
  <li>
    <p>✅ <code class="language-plaintext highlighter-rouge">defaults.parameters</code>로 공통값 병합</p>
  </li>
  <li>
    <p>✅ 외부 접근: <code class="language-plaintext highlighter-rouge">api_provider("키")["parameters"]</code> 또는 <code class="language-plaintext highlighter-rouge">api_parameters("키")</code></p>
  </li>
  <li>
    <p>✅ 읽기 전용 + 파일 변경 <strong>최대 1분 내 반영</strong></p>
  </li>
</ul>

<p>원하면 <code class="language-plaintext highlighter-rouge">parameters</code> 외에 <code class="language-plaintext highlighter-rouge">http</code> 같은 섹션도 같은 방식으로 붙여서 병합 지원해줄 수 있어!</p>

<p class="chat--user">

Pydantic 이용해서 api provider 클래스를 만들고 이걸 리스트로 리턴하는 함수가 있으면 좋겠어. 리스트는 api_provider_id 를 사용해서 정렬된 상태로 리턴하고 싶어. 예시에서 "anthropic-sonnet" 이걸 id로 할거야.

</p>

<p>좋다—<strong>Pydantic 모델</strong> 로 <code class="language-plaintext highlighter-rouge">ApiProvider</code> 클래스를 정의하고, 이를 <strong><code class="language-plaintext highlighter-rouge">api_provider_id</code>(예: <code class="language-plaintext highlighter-rouge">"anthropic-sonnet"</code>)로 정렬</strong>해서 리턴하는 함수까지 깔끔하게 붙였어.<br />
기존 싱글톤/<code class="language-plaintext highlighter-rouge">api_providers</code> 스키마와 100% 호환되며, <code class="language-plaintext highlighter-rouge">parameters</code>(dict)도 동일하게 지원/병합돼.</p>

<p>아래 3개만 넣으면 끝:</p>

<hr />

<h1 id="1-configtoml-예시">1) <code class="language-plaintext highlighter-rouge">config.toml</code> (예시)</h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">version</span> <span class="p">=</span> <span class="mi">1</span>

<span class="nn">[settings]</span>
<span class="py">refresh_interval_seconds</span> <span class="p">=</span> <span class="mi">30</span>

<span class="nn">[defaults.parameters]</span>
<span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.3</span>
<span class="py">max_tokens</span>  <span class="p">=</span> <span class="mi">2048</span>

<span class="nn">[api_providers."openai-mini"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"OpenAI GPT-4o mini"</span>
<span class="py">model_id</span>     <span class="p">=</span> <span class="s">"gpt-4o-mini"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.openai.com/v1"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${OPENAI_API_KEY}"</span>
<span class="py">parameters</span>   <span class="o">=</span> <span class="p">{</span> <span class="py">temperature</span> <span class="p">=</span> <span class="mf">0.25</span><span class="p">,</span> <span class="py">top_p</span> <span class="p">=</span> <span class="mf">0.95</span> <span class="p">}</span>

<span class="nn">[api_providers."anthropic-sonnet"]</span>
<span class="py">display_name</span> <span class="p">=</span> <span class="s">"Anthropic Claude 3.5 Sonnet"</span>
<span class="py">model_id</span>     <span class="p">=</span> <span class="s">"claude-3-5-sonnet"</span>
<span class="py">base_url</span>     <span class="p">=</span> <span class="s">"https://api.anthropic.com"</span>
<span class="py">api_key</span>      <span class="p">=</span> <span class="s">"${ANTHROPIC_API_KEY}"</span>
<span class="c"># TOML dotted-keys로 dict 채우기</span>
<span class="py">parameters.temperature</span> <span class="p">=</span> <span class="mf">0.2</span>
<span class="py">parameters.top_p</span>       <span class="p">=</span> <span class="mf">0.9</span>
<span class="py">parameters.stop</span>        <span class="p">=</span> <span class="p">[</span><span class="s">"</span><span class="se">\n\n</span><span class="s">Human:"</span><span class="p">,</span> <span class="s">"</span><span class="se">\n\n</span><span class="s">Assistant:"</span><span class="p">]</span>
</code></pre></div></div>

<hr />

<h1 id="2-custom_nodescomfyui_config_readermodelspy">2) <code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/models.py</code></h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span>
<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span><span class="p">,</span> <span class="n">Field</span>

<span class="k">class</span> <span class="nc">ApiProvider</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    단일 API Provider 엔트리 (정렬 키: api_provider_id)
    </span><span class="sh">"""</span>
    <span class="n">api_provider_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(...,</span> <span class="n">description</span><span class="o">=</span><span class="sh">'</span><span class="s">예: </span><span class="sh">"</span><span class="s">anthropic-sonnet</span><span class="sh">"'</span><span class="p">)</span>
    <span class="n">display_name</span><span class="p">:</span>   <span class="nb">str</span>
    <span class="n">model_id</span><span class="p">:</span>       <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span>       <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span>        <span class="nb">str</span>
    <span class="n">parameters</span><span class="p">:</span>     <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">dict</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="3-custom_nodescomfyui_config_readerconfig_singletonpy-드롭인-교체본">3) <code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/config_singleton.py</code> (드롭인 교체본)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">threading</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">List</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># py3.11+
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="n">loads</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>     <span class="c1"># py3.10-
</span>    <span class="n">_TOML_LOADS</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="n">loads</span>

<span class="kn">from</span> <span class="n">.models</span> <span class="kn">import</span> <span class="n">ApiProvider</span>  <span class="c1"># ← Pydantic 모델
</span>
<span class="k">def</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">v</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">i</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">v</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="sh">"</span><span class="s">${</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">j</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">"</span><span class="s">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">:</span><span class="n">j</span><span class="p">],</span> <span class="sh">""</span><span class="p">);</span> <span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">out</span> <span class="o">+=</span> <span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">];</span> <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">out</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>  <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>  <span class="k">return</span> <span class="p">[</span><span class="nf">_expand_env</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">v</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_norm</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">s</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">_normalize_model_id</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">request_model</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">cfg</span> <span class="ow">and</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="n">k</span><span class="p">]).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span> <span class="n">b</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">b</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">out</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">k</span><span class="p">),</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="nf">_deep_merge</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">v</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 읽기 전용 TOML
    - mtime + TTL(5~60s, 기본 30s) 자동 재로드 → 1분 내 변경 반영
    - 표준 섹션: [api_providers]
    - 각 provider 필수: display_name, model_id, base_url, api_key
      + 선택: parameters(dict)  — 인라인 테이블/점 표기 모두 지원
    - [defaults.parameters] 병합 지원 (provider.parameters가 우선)
    - Pydantic 모델(ApiProvider) 변환/정렬 지원
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="mi">30</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># 키(조회 식별자: id/display_name/model_id) → provider entry
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># 고유 id → provider entry (중복 제거/정렬 용)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_by_id</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># --- 내부 로딩 ---
</span>    <span class="k">def</span> <span class="nf">_read_text</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">().</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_providers_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">tbl</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_providers</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">tbl</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_by_id</span><span class="p">.</span><span class="nf">clear</span><span class="p">()</span>

        <span class="c1"># defaults.parameters (alias: defaults.params)
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">defaults</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="n">d_params</span> <span class="o">=</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">defaults</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}</span>

        <span class="n">tbl</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_providers_table</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">tbl</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">return</span>

        <span class="k">for</span> <span class="n">provider_id</span><span class="p">,</span> <span class="n">raw</span> <span class="ow">in</span> <span class="n">tbl</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span> <span class="k">continue</span>
            <span class="n">cfg</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>

            <span class="n">display</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">model</span>   <span class="o">=</span> <span class="nf">_normalize_model_id</span><span class="p">(</span><span class="n">cfg</span><span class="p">)</span>
            <span class="n">base</span>    <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="n">api</span>     <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)).</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">display</span> <span class="ow">and</span> <span class="n">model</span> <span class="ow">and</span> <span class="n">base</span> <span class="ow">and</span> <span class="n">api</span><span class="p">):</span>
                <span class="k">continue</span>  <span class="c1"># 필수 누락 스킵
</span>
            <span class="c1"># provider.parameters (alias: params) + defaults 병합
</span>            <span class="n">p_params</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">p_params</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">p_params</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">params</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p_params</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                <span class="n">p_params</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">merged_parameters</span> <span class="o">=</span> <span class="p">{</span><span class="o">**</span><span class="n">d_params</span><span class="p">,</span> <span class="o">**</span><span class="n">p_params</span><span class="p">}</span>

            <span class="n">entry</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">api_provider_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">provider_id</span><span class="p">),</span>   <span class="c1"># ← 원본 TOML 키
</span>                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span>    <span class="n">display</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">:</span>        <span class="n">model</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>        <span class="n">base</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">:</span>         <span class="n">api</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span>      <span class="n">merged_parameters</span><span class="p">,</span>
            <span class="p">}</span>

            <span class="c1"># 고유 id 사전
</span>            <span class="n">self</span><span class="p">.</span><span class="n">_by_id</span><span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="n">provider_id</span><span class="p">)]</span> <span class="o">=</span> <span class="n">entry</span>
            <span class="c1"># 조회 인덱스(여러 키로 접근 가능: id / display_name / model_id)
</span>            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">provider_id</span><span class="p">),</span> <span class="n">display</span><span class="p">,</span> <span class="n">model</span><span class="p">}:</span>
                <span class="k">if</span> <span class="n">c</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">[</span><span class="nf">_norm</span><span class="p">(</span><span class="n">c</span><span class="p">)]</span> <span class="o">=</span> <span class="n">entry</span>

    <span class="k">def</span> <span class="nf">_reload_locked</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_text</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="nf">_TOML_LOADS</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="n">r</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">settings</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">refresh_interval_seconds</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">r</span><span class="p">))</span>
        <span class="n">env_r</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">env_r</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">min</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">env_r</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span> <span class="k">pass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span> <span class="o">=</span> <span class="n">r</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_raw</span> <span class="o">=</span> <span class="nf">_expand_env</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_build_index</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span> <span class="o">=</span> <span class="o">-</span><span class="mf">1.0</span>

    <span class="k">def</span> <span class="nf">_stale_or_changed</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">getmtime</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">path</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">m</span> <span class="o">!=</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_mtime</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_refresh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_ensure_loaded</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_loaded_at</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="nf">_stale_or_changed</span><span class="p">():</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>

    <span class="c1"># --- 퍼블릭 키-값 API ---
</span>    <span class="k">def</span> <span class="nf">api_provider</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">key</span> <span class="ow">or</span> <span class="ow">not</span> <span class="nf">str</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">strip</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_provider key is empty</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_lock</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_reload_locked</span><span class="p">()</span>
                <span class="n">hit</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">key</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">hit</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">api_provider not found: </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">hit</span>

    <span class="k">def</span> <span class="nf">api_providers</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">목록(요약): api_key는 숨기고 parameters는 노출.</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">pid</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_by_id</span><span class="p">.</span><span class="nf">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">kv</span><span class="p">:</span> <span class="n">kv</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
            <span class="n">out</span><span class="p">[</span><span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">:</span> <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">display_name</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">model_id</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">:</span>     <span class="n">v</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span>   <span class="n">v</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="c1"># --- Pydantic 모델 API ---
</span>    <span class="k">def</span> <span class="nf">api_provider_models</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ApiProvider</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">ApiProvider 리스트(정렬: api_provider_id). api_key 포함 — 로깅 유의!</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">models</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ApiProvider</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span>
            <span class="nc">ApiProvider</span><span class="p">(</span><span class="o">**</span><span class="n">v</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_by_id</span><span class="p">.</span><span class="nf">items</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">kv</span><span class="p">:</span> <span class="n">kv</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="p">]</span>
        <span class="k">return</span> <span class="n">models</span>

    <span class="k">def</span> <span class="nf">api_provider_model</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">api_provider_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ApiProvider</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">entry</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_by_id</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">api_provider_id</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">entry</span><span class="p">:</span>
            <span class="c1"># 다른 키로 들어왔을 수도 있으니 인덱스도 조회
</span>            <span class="n">entry</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_idx</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="nf">_norm</span><span class="p">(</span><span class="n">api_provider_id</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">entry</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">api_provider not found: </span><span class="si">{</span><span class="n">api_provider_id</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">ApiProvider</span><span class="p">(</span><span class="o">**</span><span class="n">entry</span><span class="p">)</span>

    <span class="c1"># --- 범용 ---
</span>    <span class="k">def</span> <span class="nf">api_parameters</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}))</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="n">cur</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_raw</span>
        <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="nf">filter</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">dotted</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cur</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="ow">and</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">cur</span><span class="p">:</span>
                <span class="n">cur</span> <span class="o">=</span> <span class="n">cur</span><span class="p">[</span><span class="n">part</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">KeyError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">config path not found: </span><span class="si">{</span><span class="n">dotted</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">cur</span>

    <span class="k">def</span> <span class="nf">snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_loaded</span><span class="p">()</span>
        <span class="k">return</span> <span class="nf">dict</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_raw</span><span class="p">)</span>

<span class="c1"># ----- 싱글톤 -----
</span><span class="n">_lock</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>
<span class="n">_instance</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">_ReadOnlyConfig</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">_default_path</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">_resolve_default_path</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">here</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_default_path</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">COMFY_CONFIG_PATH</span><span class="sh">"</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">here</span><span class="p">,</span> <span class="sh">"</span><span class="s">config.toml</span><span class="sh">"</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_get_instance</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">_ReadOnlyConfig</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span>
    <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">_instance</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>
    <span class="k">return</span> <span class="n">_instance</span>

<span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="o">*</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">refresh_seconds</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_instance</span><span class="p">,</span> <span class="n">_default_path</span>
    <span class="k">if</span> <span class="n">path</span><span class="p">:</span>
        <span class="n">_default_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">refresh_seconds</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="sh">"</span><span class="s">COMFY_CONFIG_REFRESH_SECONDS</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">refresh_seconds</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">_lock</span><span class="p">:</span>
        <span class="n">_instance</span> <span class="o">=</span> <span class="nf">_ReadOnlyConfig</span><span class="p">(</span><span class="nf">_resolve_default_path</span><span class="p">())</span>

<span class="c1"># ---- 외부 API (함수형) ----
</span><span class="k">def</span> <span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>             <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_provider</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">api_providers</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>         <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_providers</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">api_parameters</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>           <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_parameters</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">api_provider_models</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ApiProvider</span><span class="p">]:</span>           <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_provider_models</span><span class="p">()</span>
<span class="k">def</span> <span class="nf">api_provider_model</span><span class="p">(</span><span class="n">api_provider_id</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ApiProvider</span><span class="p">:</span> <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">api_provider_model</span><span class="p">(</span><span class="n">api_provider_id</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>                              <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">get</span><span class="p">(</span><span class="n">dotted</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">snapshot</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>                         <span class="k">return</span> <span class="nf">_get_instance</span><span class="p">().</span><span class="nf">snapshot</span><span class="p">()</span>

<span class="c1"># ---- 객체형 프록시 ----
</span><span class="k">class</span> <span class="nc">_ConfigProxy</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">_get_instance</span><span class="p">(),</span> <span class="n">name</span><span class="p">)</span>
<span class="n">CONFIG</span> <span class="o">=</span> <span class="nf">_ConfigProxy</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-custom_nodescomfyui_config_reader__init__py-re-export">4) <code class="language-plaintext highlighter-rouge">custom_nodes/comfyui_config_reader/__init__.py</code> (re-export)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.config_singleton</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">CONFIG</span><span class="p">,</span>
    <span class="n">configure</span><span class="p">,</span>
    <span class="n">api_provider</span><span class="p">,</span> <span class="n">api_providers</span><span class="p">,</span> <span class="n">api_parameters</span><span class="p">,</span>
    <span class="n">api_provider_model</span><span class="p">,</span> <span class="n">api_provider_models</span><span class="p">,</span>
    <span class="n">get</span><span class="p">,</span> <span class="n">snapshot</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="사용-예-간단">사용 예 (간단)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfyui_config_reader</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">api_provider_models</span><span class="p">,</span> <span class="n">api_provider_model</span><span class="p">,</span>
    <span class="n">api_provider</span><span class="p">,</span> <span class="n">api_parameters</span><span class="p">,</span>
<span class="p">)</span>

<span class="c1"># 전체 Pydantic 리스트 (정렬: api_provider_id)
</span><span class="n">providers</span> <span class="o">=</span> <span class="nf">api_provider_models</span><span class="p">()</span>
<span class="c1"># ex) ["anthropic-sonnet", "openai-mini", ...] 순서
</span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">providers</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">api_provider_id</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">model_id</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">parameters</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">))</span>

<span class="c1"># 단건 조회(Pydantic)
</span><span class="n">sonnet</span> <span class="o">=</span> <span class="nf">api_provider_model</span><span class="p">(</span><span class="sh">"</span><span class="s">anthropic-sonnet</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sonnet</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">())</span>  <span class="c1"># pydantic v2 / v1은 .dict()
</span>
<span class="c1"># 키/표시명/모델ID 아무거나로 접근(딕셔너리)
</span><span class="n">cfg</span> <span class="o">=</span> <span class="nf">api_provider</span><span class="p">(</span><span class="sh">"</span><span class="s">OpenAI GPT-4o mini</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">],</span> <span class="n">cfg</span><span class="p">[</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># 파라미터만
</span><span class="n">params</span> <span class="o">=</span> <span class="nf">api_parameters</span><span class="p">(</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h3 id="비고">비고</h3>

<ul>
  <li>
    <p><strong>보안 주의</strong> : <code class="language-plaintext highlighter-rouge">api_provider_models()</code>는 객체에 <code class="language-plaintext highlighter-rouge">api_key</code>가 포함돼요. 로깅/디버깅 시 마스킹하세요.</p>
  </li>
  <li>
    <p><strong>TOML 파라미터 입력</strong> : 인라인 테이블(<code class="language-plaintext highlighter-rouge">{...}</code>) 또는 점 표기(<code class="language-plaintext highlighter-rouge">parameters.x = ...</code>) 둘 다 OK.</p>
  </li>
  <li>
    <p><strong>정렬 보장</strong> : 리스트는 <strong>항상<code class="language-plaintext highlighter-rouge">api_provider_id</code>(TOML 키)</strong> 기준 오름차순.</p>
  </li>
  <li>
    <p><strong>성능/일관성</strong> : mtime + TTL(기본 30s) 캐시 → “최대 1분 내 변경 반영” 요건 충족.</p>
  </li>
</ul>

<p>필요하면 같은 방식으로 <code class="language-plaintext highlighter-rouge">http</code> 섹션(헤더/쿼리/타임아웃)도 병합해서 모델에 넣을 수 있게 확장해줄게!</p>]]></content><author><name>hvppyarchive</name></author><category term="comfyui" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">openai api Raw 데이터 확인 방법</title><link href="https://hvppyarchive.github.io/python/openai-package-data-hook/" rel="alternate" type="text/html" title="openai api Raw 데이터 확인 방법" /><published>2025-10-01T18:38:56+09:00</published><updated>2025-10-01T18:38:56+09:00</updated><id>https://hvppyarchive.github.io/python/openai-package-data-hook</id><content type="html" xml:base="https://hvppyarchive.github.io/python/openai-package-data-hook/"><![CDATA[<p class="chat--user">

openai python package에서 내가 보내는 패킷을 가능한 raw 데이터 형태로 보고 싶어

</p>

<p>좋아요. “openai” Python 패키지로 API를 호출할 때, 내가 보낸 <strong>HTTP 요청(=패킷)에 최대한 가까운 raw 데이터</strong> 를 보는 대표적인 방법을 단계별로 정리했어요. 상황/보안 요구에 따라 골라 쓰시면 됩니다.</p>

<hr />

<h1 id="1-가장-간단한-방법-sdk-디버그-로그-켜기">1) 가장 간단한 방법: SDK 디버그 로그 켜기</h1>

<p>OpenAI Python SDK는 환경변수 한 줄로 상세 로그를 뿌릴 수 있어요.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OPENAI_LOG</span><span class="o">=</span>debug
python your_script.py
</code></pre></div></div>

<ul>
  <li>이러면 SDK 내부와 함께 <strong>httpx</strong>(OpenAI SDK의 HTTP 클라이언트) 디버그 로그도 활성화돼서 요청/응답 흐름을 확인할 수 있습니다. <a href="https://stackoverflow.com/questions/76256249/logging-in-the-open-ai-python-library?utm_source=chatgpt.com">Stack Overflow</a></li>
</ul>

<blockquote>
  <p>장점: 코드 수정 없음<br />
 단점: 바디 전문을 항상 보여주진 않음(민감정보 보호 차원에서 마스킹/생략될 수 있음)</p>
</blockquote>

<hr />

<h1 id="2-표준-로깅으로-httpx-디버깅요청응답-라인헤더">2) 표준 로깅으로 httpx 디버깅(요청/응답 라인·헤더)</h1>

<p><code class="language-plaintext highlighter-rouge">logging</code>으로 httpx 로거를 DEBUG로 켜면, 연결/요청/응답의 내부 동작을 자세히 볼 수 있어요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">logging</span>

<span class="n">logging</span><span class="p">.</span><span class="nf">basicConfig</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="n">logging</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span>
<span class="n">logging</span><span class="p">.</span><span class="nf">getLogger</span><span class="p">(</span><span class="sh">"</span><span class="s">httpx</span><span class="sh">"</span><span class="p">).</span><span class="nf">setLevel</span><span class="p">(</span><span class="n">logging</span><span class="p">.</span><span class="n">DEBUG</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">()</span>

<span class="c1"># 평소처럼 호출
</span><span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">ping</span><span class="sh">"</span><span class="p">}],</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>위처럼 하면 httpx가 출력하는 <strong>요청 메서드/URL, 응답 상태, 일부 헤더 등</strong> 을 확인할 수 있습니다. 필요한 경우 포맷을 더 꾸밀 수 있어요. <a href="https://www.python-httpx.org/logging/?utm_source=chatgpt.com">python-httpx.org</a></li>
</ul>

<blockquote>
  <p>장점: 표준 파이썬 로깅으로 손쉽게 제어<br />
 단점: 바디 전문은 기본 로그에 안 나옴</p>
</blockquote>

<hr />

<h1 id="3-진짜-raw에-가깝게--커스텀-httpx-client--이벤트-훅">3) “진짜 raw에 가깝게” — 커스텀 httpx Client + 이벤트 훅</h1>

<p>가장 투명한 방법은 SDK에 <strong>커스텀 httpx.Client</strong> 를 주입하고, <strong>event_hooks</strong> 로 요청·응답 시점에 <strong>바디까지 포함</strong> 해서 찍는 겁니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="k">def</span> <span class="nf">log_request</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
    <span class="c1"># 주의: 여기서 body를 출력하면 프롬프트/키 등 민감정보가 노출될 수 있음
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== HTTP REQUEST ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># request.content는 bytes일 수 있음
</span>    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">-- body (utf-8) --</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">-- body (bytes) --</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">log_response</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== HTTP RESPONSE ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">HTTP/</span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">http_version</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># 주의: 응답 바디에는 토큰/텍스트 등 민감정보 포함 가능
</span>    <span class="n">body</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">content</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">-- body (utf-8 pretty) --</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="nf">json</span><span class="p">(),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">-- body (raw) --</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">body</span><span class="p">[:</span><span class="mi">2000</span><span class="p">])</span>  <span class="c1"># 너무 길면 샘플만
</span>
<span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">log_request</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">log_response</span><span class="p">],</span>
<span class="p">}</span>
<span class="n">http_client</span> <span class="o">=</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">Client</span><span class="p">(</span><span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">)</span>

<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span>

<span class="c1"># 테스트 호출
</span><span class="n">_</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Hello</span><span class="sh">"</span><span class="p">}],</span>
<span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>핵심은 <code class="language-plaintext highlighter-rouge">OpenAI(http_client=...)</code> 로 <strong>내 httpx 클라이언트를 주입</strong> 하는 부분입니다. 이런 식으로 요청/응답 <strong>헤더 + 바디</strong> 를 원하는 형식으로 덤프할 수 있어요. <a href="https://til.simonwillison.net/httpx/openai-log-requests-responses?utm_source=chatgpt.com">TIL+2</a></li>
</ul>

<blockquote>
  <p>장점: 가장 “raw”에 가까움(내용·헤더·상태 전부 내가 통제)<br />
 단점: 직접 마스킹 처리를 해야 안전</p>
</blockquote>

<hr />

<h1 id="4-외부-프록시패킷-캡처로-와이어-그대로-보기">4) 외부 프록시(패킷 캡처)로 “와이어 그대로” 보기</h1>

<p>코드를 건드리고 싶지 않거나, <strong>진짜 전송되는 TLS 트래픽</strong> 까지 관찰하고 싶다면 <strong>프록시/패킷 도구</strong> 를 쓰세요.</p>

<ul>
  <li>
    <p>예: <strong>Proxyman</strong> , <strong>mitmproxy</strong> , <strong>Charles</strong> , <strong>Fiddler</strong> 등</p>
  </li>
  <li>
    <p>방법: 도구에서 루트 인증서를 신뢰하도록 설정 → Python이 해당 프록시를 쓰게 <code class="language-plaintext highlighter-rouge">HTTPS_PROXY</code>/<code class="language-plaintext highlighter-rouge">HTTP_PROXY</code> 환경변수 설정 → 스크립트 실행 → 도구에서 <strong>요청 라인/헤더/압축 전/후 바디</strong> 까지 열람</p>
  </li>
  <li>
    <p>httpx/requests 기반 파이썬 코드에서 이런 프록시로 <strong>HTTPS 트래픽 캡처</strong> 가 가능합니다. <a href="https://proxyman.com/posts/2025-01-29-How-To-Capture-HTTPS-Traffic-From-Python-Requests-httpx?utm_source=chatgpt.com">Proxyman</a></p>
  </li>
</ul>

<blockquote>
  <p>장점: SDK/코드 수정 최소화, 실제 전송 형태를 GUI로 직관적으로 확인<br />
 단점: 사내 정책/루트 인증서 설치 이슈 가능</p>
</blockquote>

<hr />

<h1 id="5-비교-기준-정리-언제-무엇을-쓸까">5) 비교 기준 정리 (언제 무엇을 쓸까?)</h1>

<ul>
  <li>
    <p><strong>빠른 확인</strong> : <code class="language-plaintext highlighter-rouge">OPENAI_LOG=debug</code> (1분 컷). <a href="https://stackoverflow.com/questions/76256249/logging-in-the-open-ai-python-library?utm_source=chatgpt.com">Stack Overflow</a></p>
  </li>
  <li>
    <p><strong>파이썬 로그에 일원화</strong> : httpx 로거 DEBUG (Step 2). <a href="https://www.python-httpx.org/logging/?utm_source=chatgpt.com">python-httpx.org</a></p>
  </li>
  <li>
    <p><strong>요청/응답 바디까지 100% 통제</strong> : 커스텀 httpx Client + event_hooks (Step 3). <a href="https://til.simonwillison.net/httpx/openai-log-requests-responses?utm_source=chatgpt.com">TIL+1</a></p>
  </li>
  <li>
    <p><strong>진짜 패킷 관점(프록시)</strong> : Proxyman/mitmproxy (Step 4). <a href="https://proxyman.com/posts/2025-01-29-How-To-Capture-HTTPS-Traffic-From-Python-Requests-httpx?utm_source=chatgpt.com">Proxyman</a></p>
  </li>
</ul>

<hr />

<h1 id="6-보안컴플라이언스-주의중요">6) 보안/컴플라이언스 주의(중요)</h1>

<ul>
  <li>
    <p><strong>API 키</strong> 와 <strong>프롬프트/응답 내용</strong> 이 로그에 남을 수 있어요.</p>

    <ul>
      <li>
        <p>로컬만, 접근 제한된 환경에서만 출력하세요.</p>
      </li>
      <li>
        <p>저장 시엔 <strong>마스킹/암호화</strong> 또는 <strong>임시 파일</strong> 사용을 권장.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>회사/조직 정책상 <strong>중간자 프록시 툴</strong> 사용이 제한될 수 있습니다(특히 클라우드/생산환경). 사전 승인 필요.</p>
  </li>
</ul>

<hr />

<h1 id="7-참고-문서">7) 참고 문서</h1>

<ul>
  <li>
    <p>OpenAI SDK 디버깅 개요/레퍼런스: <a href="https://platform.openai.com/docs/api-reference/debugging-requests?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">OPENAI_LOG=debug</code> 안내(Q&amp;A): <a href="https://stackoverflow.com/questions/76256249/logging-in-the-open-ai-python-library?utm_source=chatgpt.com">Stack Overflow</a></p>
  </li>
  <li>
    <p>httpx 로깅/트랜스포트 심화: <a href="https://www.python-httpx.org/logging/?utm_source=chatgpt.com">python-httpx.org+1</a></p>
  </li>
  <li>
    <p>외부 프록시로 httpx 트래픽 캡처: <a href="https://proxyman.com/posts/2025-01-29-How-To-Capture-HTTPS-Traffic-From-Python-Requests-httpx?utm_source=chatgpt.com">Proxyman</a></p>
  </li>
</ul>

<hr />

<p>원하시면, 위 ③ 커스텀 클라이언트 코드를 <strong>바디 마스킹(예: 토큰/이메일 제거)</strong> 포함 버전으로 바로 만들어 드릴게요.</p>

<p class="chat--user">

string에 데이터가 담기게 하고 싶어 요청을 보낼때 / 받을때 각각

</p>

<p>좋습니다 — <strong>요청 보낼 때(request)와 받을 때(response)</strong> 각각의 바디를 <strong>문자열(string)</strong>으로 저장하는 실전 코드(동기 + 비동기)를 바로 드릴게요. 민감정보(Authorization/API Key 등) 마스킹도 포함되어 있으니 안전하게 쓰실 수 있습니다. 단계별로 설명도 덧붙였어요 — 요청하신 대로 <strong>step-by-step</strong> 방식으로요.</p>

<hr />

<h1 id="1-핵심-아이디어-간단-요약">1) 핵심 아이디어 (간단 요약)</h1>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">httpx.Client</code>(또는 <code class="language-plaintext highlighter-rouge">httpx.AsyncClient</code>)를 만들어 <code class="language-plaintext highlighter-rouge">event_hooks</code>에 요청/응답 훅을 붙입니다.</p>
  </li>
  <li>
    <p>훅에서 <code class="language-plaintext highlighter-rouge">request.content</code> / <code class="language-plaintext highlighter-rouge">response.content</code>를 읽어 <code class="language-plaintext highlighter-rouge">str</code>로 변환해서 전역 변수나 캡처용 변수에 저장합니다.</p>
  </li>
  <li>
    <p>로그로 출력하기 전 민감 필드(헤더의 Authorization 등)와 바디 내부 키(예: <code class="language-plaintext highlighter-rouge">"api_key"</code>, <code class="language-plaintext highlighter-rouge">"key"</code>)를 마스킹합니다.</p>
  </li>
</ol>

<hr />

<h1 id="2-동기synchronous-예제--바로-복사해서-쓰세요">2) 동기(synchronous) 예제 — 바로 복사해서 쓰세요</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>    <span class="c1"># 설치된 최신 openai 패키지 사용
</span>
<span class="c1"># 저장할 문자열 변수(요청/응답)
</span><span class="n">captured_request_body</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">captured_response_body</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">redacted</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">api-key</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="n">redacted</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">redacted</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">redacted</span>

<span class="k">def</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="c1"># 시도: JSON이면 파싱해서 특정 키 마스킹
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
                    <span class="n">obj</span><span class="p">[</span><span class="n">sensitive</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="c1"># JSON이 아니면 간단 치환(헤더처럼)
</span>        <span class="c1"># 예: URL-encoded form/body에서 key=값 형태를 가볍게 마스킹
</span>        <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=REDACTED</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">text</span>

<span class="k">def</span> <span class="nf">request_hook</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">captured_request_body</span>
    <span class="c1"># 헤더 마스킹
</span>    <span class="n">safe_headers</span> <span class="o">=</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">))</span>
    <span class="c1"># 바디 읽기 (bytes -&gt; str)
</span>    <span class="n">body_str</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="c1"># request.content는 bytes 또는 None
</span>    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># 준비되지 않은 스트림(rare)인 경우
</span>        <span class="n">body_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;no request.content available or streaming body&gt;</span><span class="sh">"</span>
    <span class="c1"># 민감정보 마스킹
</span>    <span class="n">body_str</span> <span class="o">=</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
    <span class="n">captured_request_body</span> <span class="o">=</span> <span class="n">body_str</span>

    <span class="c1"># (선택) 콘솔 출력
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">---- REQUEST ----</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">safe_headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-- body --</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-----------------</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">response_hook</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">captured_response_body</span>
    <span class="c1"># 헤더 마스킹
</span>    <span class="n">safe_headers</span> <span class="o">=</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">))</span>
    <span class="c1"># 응답 바디 읽음 (bytes -&gt; str)
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># response.content는 전체 바디(이미 수신된 상태의 hook에서는 안전)
</span>        <span class="n">body_str</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="c1"># 시도해서 JSON 예쁘게
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">parsed</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">parsed</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
    <span class="n">body_str</span> <span class="o">=</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
    <span class="n">captured_response_body</span> <span class="o">=</span> <span class="n">body_str</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">---- RESPONSE ----</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">HTTP/</span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">http_version</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">safe_headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">v</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-- body --</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">body_str</span><span class="p">[:</span><span class="mi">4000</span><span class="p">])</span>  <span class="c1"># 너무 길면 잘라서 보이게
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">------------------</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 이벤트 훅 등록
</span><span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">request_hook</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">response_hook</span><span class="p">],</span>
<span class="p">}</span>
<span class="n">http_client</span> <span class="o">=</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">Client</span><span class="p">(</span><span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">)</span>

<span class="c1"># OpenAI 클라이언트에 주입
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span>

<span class="c1"># 실제 요청 (예시)
</span><span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">안녕</span><span class="sh">"</span><span class="p">}],</span>
<span class="p">)</span>

<span class="c1"># 함수 외부에서 문자열 접근 가능
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Captured request body (string):</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">captured_request_body</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Captured response body (string):</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">captured_response_body</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="3-비동기async-예제--asyncawait-환경에서">3) 비동기(async) 예제 — async/await 환경에서</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="n">captured_request_body</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">captured_response_body</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">redacted</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">api-key</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="n">redacted</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">redacted</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">redacted</span>

<span class="k">def</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
                    <span class="n">obj</span><span class="p">[</span><span class="n">sensitive</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=REDACTED</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">text</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">request_hook</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">captured_request_body</span>
    <span class="n">safe_headers</span> <span class="o">=</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">))</span>
    <span class="n">body_str</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">body_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;no request.content available or streaming body&gt;</span><span class="sh">"</span>
    <span class="n">body_str</span> <span class="o">=</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
    <span class="n">captured_request_body</span> <span class="o">=</span> <span class="n">body_str</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">REQ</span><span class="sh">"</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">response_hook</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
    <span class="k">global</span> <span class="n">captured_response_body</span>
    <span class="n">safe_headers</span> <span class="o">=</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">))</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">body_str</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
    <span class="n">body_str</span> <span class="o">=</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
    <span class="n">captured_response_body</span> <span class="o">=</span> <span class="n">body_str</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RES</span><span class="sh">"</span><span class="p">,</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">body_str</span><span class="p">[:</span><span class="mi">2000</span><span class="p">])</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">request_hook</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">response_hook</span><span class="p">]}</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">)</span> <span class="k">as</span> <span class="n">async_http</span><span class="p">:</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">http_client</span><span class="o">=</span><span class="n">async_http</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">안녕</span><span class="sh">"</span><span class="p">}],</span>
        <span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Done</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="4-주의사항--팁-중요">4) 주의사항 &amp; 팁 (중요)</h1>

<ul>
  <li>
    <p>대부분 경우 <code class="language-plaintext highlighter-rouge">request.content</code> / <code class="language-plaintext highlighter-rouge">response.content</code>는 훅에서 읽을 수 있고 문자열로 변환 가능합니다. 다만 <strong>파일 업로드(멀티파트)</strong> 혹은 <strong>스트리밍 바디</strong> 라면 처리 방식이 달라집니다.</p>
  </li>
  <li>
    <p>스트리밍(예: chunked transfer / SSE)으로 동작하는 경우: 훅에서 전체 바디가 아직 완성되지 않았을 수 있습니다. 이런 상황이면 SDK의 스트리밍 API(또는 httpx의 <code class="language-plaintext highlighter-rouge">stream()</code> 사용)를 직접 감싸서 각 청크를 캡처하는 로직을 추가해야 합니다. 원하시면 스트리밍 캡처 예제도 드릴게요.</p>
  </li>
  <li>
    <p><strong>민감정보 보호</strong> : 콘솔/파일에 직접 남기면 안 됩니다. 로컬 전용, 접근 제어된 환경에서만 보관하세요. 저장해야 한다면 마스킹 또는 암호화 권장.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">event_hooks</code>에서 바디를 읽는 건 일반적으로 안전하지만, 일부 경우(특히 request가 generator/stream로 만들어졌다면) 읽으면 원래 전송을 망칠 수 있으니 주의하세요. 위 예제는 일반 JSON/폼/멀티파트 전송에 적합합니다.</p>
  </li>
</ul>

<hr />

<h1 id="5-추가-요청-가능한-것들-원하시면-바로-만듭니다">5) 추가 요청 가능한 것들 (원하시면 바로 만듭니다)</h1>

<ul>
  <li>
    <p>요청/응답을 <strong>파일 대신 문자열 변수</strong> 에 안전하게 누적(rolling buffer)하는 버전</p>
  </li>
  <li>
    <p><strong>스트리밍(서버-전송 이벤트)</strong> 응답을 청크 단위로 캡처해서 단일 문자열로 합치는 예제</p>
  </li>
  <li>
    <p>바디에서 <strong>특정 키만</strong>(예: <code class="language-plaintext highlighter-rouge">messages</code> or <code class="language-plaintext highlighter-rouge">prompt</code>)만 캡처해서 저장하고 나머지는 마스킹하는 예제</p>
  </li>
  <li>
    <p>멀티파트(파일 업로드) 요청의 각 파트(파일 메타/콘텐츠)를 캡처해 문자열로 변환하는 예제</p>
  </li>
</ul>

<p>원하시는 걸 알려주시면(예: 스트리밍 캡처, 멀티파트 처리, 혹은 바로 적용 가능한 <strong>마스킹 규칙</strong>) 지금 바로 코드로 만들어 드릴게요. 어떤 걸 먼저 드릴까요?</p>

<p class="chat--user">

전역 변수 말고 main 안에서 스트링 저장하는 방밥

</p>

<p>좋아요 — <strong>전역 변수 없이<code class="language-plaintext highlighter-rouge">main()</code> 안에서 요청/응답 바디를 문자열로 저장하는 방법</strong>을 바로 드릴게요. 핵심은 <strong>클로저(or 로컬 가변 컨테이너)</strong> 를 사용해 훅이 <code class="language-plaintext highlighter-rouge">main</code> 안의 변수에 접근하게 하는 것입니다. 스트리밍 예외는 마지막에 짧게 언급합니다.</p>

<p>아래 코드는 (1) 동기(synchronous)와 (2) 비동기(async) 두 버전 모두 제공하고, 민감정보(Authorization 헤더, 몇몇 바디 키)를 <strong>마스킹</strong> 합니다. 그대로 복사해서 쓰시면 됩니다.</p>

<h1 id="1-원리요약-step-by-step">1) 원리(요약, step-by-step)</h1>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">main()</code> 안에 <code class="language-plaintext highlighter-rouge">captured = {"request": None, "response": None}</code> 같은 <strong>가변 dict</strong> 를 만든다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">request_hook</code> / <code class="language-plaintext highlighter-rouge">response_hook</code> 함수는 클로저로서 그 <code class="language-plaintext highlighter-rouge">captured</code>를 수정한다. (<code class="language-plaintext highlighter-rouge">nonlocal</code> 불필요 — dict는 가변이므로)</p>
  </li>
  <li>
    <p>훅에서 <code class="language-plaintext highlighter-rouge">request.content</code> / <code class="language-plaintext highlighter-rouge">response.content</code>를 문자열로 변환 → 민감정보 마스킹 → <code class="language-plaintext highlighter-rouge">captured[...] = body_str</code> 저장.</p>
  </li>
  <li>
    <p>요청이 끝난 뒤 <code class="language-plaintext highlighter-rouge">main()</code>에서 <code class="language-plaintext highlighter-rouge">captured</code> 값을 사용(또는 반환)한다.</p>
  </li>
</ol>

<hr />

<h1 id="2-동기sync-예제">2) 동기(sync) 예제</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="k">def</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">api-key</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
                    <span class="n">obj</span><span class="p">[</span><span class="n">sensitive</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=REDACTED</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">text</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># 1) 로컬 캡처 컨테이너 (전역 아님)
</span>    <span class="n">captured</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>

    <span class="c1"># 2) 훅들 (클로저로 captured에 접근)
</span>    <span class="k">def</span> <span class="nf">request_hook</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
        <span class="c1"># headers 마스킹(여기서는 저장용; 실제 출력은 안전하게)
</span>        <span class="n">safe_headers</span> <span class="o">=</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">))</span>
        <span class="c1"># body를 문자열로 읽기
</span>        <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">body_str</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;no request.content available or streaming body&gt;</span><span class="sh">"</span>
        <span class="n">body_str</span> <span class="o">=</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">method</span><span class="sh">"</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="n">safe_headers</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="n">body_str</span><span class="p">,</span>
        <span class="p">}</span>

    <span class="k">def</span> <span class="nf">response_hook</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
        <span class="n">safe_headers</span> <span class="o">=</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">))</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
            <span class="c1"># 예쁘게 포맷(JSON이면)
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">parsed</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
                <span class="n">body_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">parsed</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
        <span class="n">body_str</span> <span class="o">=</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">status_code</span><span class="sh">"</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="n">safe_headers</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="n">body_str</span><span class="p">,</span>
        <span class="p">}</span>

    <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">request_hook</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">response_hook</span><span class="p">]}</span>
    <span class="n">http_client</span> <span class="o">=</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">Client</span><span class="p">(</span><span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">)</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span>

    <span class="c1"># 3) 실제 호출 (동기)
</span>    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">안녕하세요</span><span class="sh">"</span><span class="p">}],</span>
    <span class="p">)</span>

    <span class="c1"># 4) main 내부에서 문자열로 활용 / 출력 / 반환 가능
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Captured request body (string):</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">]</span> <span class="k">else</span> <span class="sh">"</span><span class="s">&lt;none&gt;</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Captured response body (string):</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">]</span> <span class="k">else</span> <span class="sh">"</span><span class="s">&lt;none&gt;</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">captured</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">captured</span> <span class="o">=</span> <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="3-비동기async-예제">3) 비동기(async) 예제</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="k">def</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">api-key</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
                    <span class="n">obj</span><span class="p">[</span><span class="n">sensitive</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=REDACTED</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">text</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">captured</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">request_hook</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
        <span class="n">safe_headers</span> <span class="o">=</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">body_str</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;no request.content available or streaming body&gt;</span><span class="sh">"</span>
        <span class="n">body_str</span> <span class="o">=</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">method</span><span class="sh">"</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="n">safe_headers</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="n">body_str</span><span class="p">,</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">response_hook</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
        <span class="n">safe_headers</span> <span class="o">=</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">))</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">parsed</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
                <span class="n">body_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">parsed</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
        <span class="n">body_str</span> <span class="o">=</span> <span class="nf">redact_json_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">status_code</span><span class="sh">"</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="n">safe_headers</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="n">body_str</span><span class="p">,</span>
        <span class="p">}</span>

    <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">request_hook</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">response_hook</span><span class="p">]}</span>

    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">)</span> <span class="k">as</span> <span class="n">async_http</span><span class="p">:</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">http_client</span><span class="o">=</span><span class="n">async_http</span><span class="p">)</span>
        <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">안녕하세요 (async)</span><span class="sh">"</span><span class="p">}],</span>
        <span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Captured request (local):</span><span class="sh">"</span><span class="p">,</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">]</span> <span class="k">else</span> <span class="sh">"</span><span class="s">&lt;none&gt;</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Captured response (local):</span><span class="sh">"</span><span class="p">,</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">]</span> <span class="k">else</span> <span class="sh">"</span><span class="s">&lt;none&gt;</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">captured</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="4-주의사항중요">4) 주의사항(중요)</h1>

<ul>
  <li>
    <p><strong>스트리밍 응답</strong>(SSE/청크) 또는 <strong>파일 업로드(멀티파트)</strong> 의 경우 <code class="language-plaintext highlighter-rouge">request.content</code> / <code class="language-plaintext highlighter-rouge">response.content</code>가 훅에서 바로 전체로 읽히지 않거나, 읽으면 스트림이 소모되어 전송에 영향이 생길 수 있음. 그런 경우는 <strong>별도 스트리밍 훅</strong>(청크마다 append)이나 httpx의 <code class="language-plaintext highlighter-rouge">stream()</code> 사용 방식으로 처리해야 합니다. 필요하시면 스트리밍 버전도 바로 제공할게요.</p>
  </li>
  <li>
    <p>훅에서 바디를 읽는 행위가 일부 전송 파이프라인을 바꿀 수 있으니(특히 generator/파일 스트림 전송) 안전한 환경에서 먼저 테스트하세요.</p>
  </li>
  <li>
    <p>로그/파일에 저장하면 API 키나 민감한 사용자 입력이 유출될 수 있으니 <strong>로컬 전용 또는 접근 제한 환경</strong> 에서만 저장하세요.</p>
  </li>
</ul>

<hr />

<p>원하시면:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">messages</code> 필드(프롬프트)만 캡처하고 나머지는 완전 마스킹하는 버전</p>
  </li>
  <li>
    <p><strong>청크 스트리밍</strong>(streaming response)을 로컬 문자열로 합치는 예제</p>
  </li>
  <li>
    <p>멀티파트(파일 업로드)에서 각 파트 별로 문자열로 저장하는 예제</p>
  </li>
</ul>

<p>이 중 어떤 걸 먼저 드릴까요?</p>

<p class="chat--user">

response.aread()를 해야 읽을 수 있는거 아니야?

</p>

<p>좋은 지적입니다 — 상황에 따라 <strong><code class="language-plaintext highlighter-rouge">response.aread()</code>를 <code class="language-plaintext highlighter-rouge">await</code>해야만 바디를 읽을 수 있는 경우</strong>가 맞습니다. 요점만 먼저 정리하고, 바로 쓸 수 있는 코드 예제(비동기 훅에서 <code class="language-plaintext highlighter-rouge">await response.aread()</code> 사용)를 보여드릴게요.</p>

<h1 id="핵심-요약">핵심 요약</h1>

<ol>
  <li>
    <p><strong>동기(httpx.Client)</strong> : 훅에서 <code class="language-plaintext highlighter-rouge">response.content</code>를 읽으면 내부에서 내용을 가져와 캐시하므로 바로 읽을 수 있습니다.</p>
  </li>
  <li>
    <p><strong>비동기(httpx.AsyncClient)</strong> : 훅이 <code class="language-plaintext highlighter-rouge">async def</code>이면 <code class="language-plaintext highlighter-rouge">await response.aread()</code>로 바디(바이트)를 가져와야 안전합니다. (<code class="language-plaintext highlighter-rouge">response.content</code>는 동기 속성이라 async 컨텍스트에선 권장되지 않음.)</p>
  </li>
  <li>
    <p><strong>주의 — 스트리밍(SSE / chunked / streaming API)</strong> : <code class="language-plaintext highlighter-rouge">aread()</code>는 <strong>전체 바디를 한 번에</strong> 읽습니다. 만약 응답이 실시간 스트리밍(예: 서버-전송-이벤트)이라면 <code class="language-plaintext highlighter-rouge">aread()</code>로 전체를 읽어버리면 스트리밍 처리를 망칠 수 있습니다. 스트리밍은 <code class="language-plaintext highlighter-rouge">response.aiter_bytes()</code> / <code class="language-plaintext highlighter-rouge">response.aiter_text()</code>로 청크 단위로 처리하세요.</p>
  </li>
  <li>
    <p>httpx는 한 번 읽은 바디를 캐시하므로 <code class="language-plaintext highlighter-rouge">aread()</code>로 읽은 뒤에도 <code class="language-plaintext highlighter-rouge">response.content</code>/<code class="language-plaintext highlighter-rouge">response.text</code>로 접근해도 됩니다(대부분의 경우).</p>
  </li>
</ol>

<hr />

<h1 id="바로-쓸-수-있는-비동기-훅-예제-await-responsearead-사용">바로 쓸 수 있는 비동기 훅 예제 (<code class="language-plaintext highlighter-rouge">await response.aread()</code> 사용)</h1>

<p>아래는 이전 예제의 <code class="language-plaintext highlighter-rouge">response_hook</code>를 <code class="language-plaintext highlighter-rouge">await response.aread()</code> 로 안전하게 바꾼 코드입니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="k">def</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">api-key</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">redact_text</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="c1"># 간단 마스킹 예시
</span>    <span class="k">for</span> <span class="n">sensitive</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="n">sensitive</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=REDACTED</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">:</span>
                    <span class="n">obj</span><span class="p">[</span><span class="n">s</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
            <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">return</span> <span class="n">text</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">captured</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">request_hook</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
        <span class="c1"># request.content는 이미 bytes일 가능성 높음
</span>        <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">body_str</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;no request.content available or streaming body&gt;</span><span class="sh">"</span>
        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">method</span><span class="sh">"</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">)),</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">),</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">response_hook</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
        <span class="c1"># 스트리밍 응답인지 간단 체크 (Content-Type 또는 Transfer-Encoding 참고)
</span>        <span class="n">ct</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">te</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">transfer-encoding</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">is_streaming</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">text/event-stream</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ct</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="sh">"</span><span class="s">chunked</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">te</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">is_streaming</span><span class="p">:</span>
            <span class="c1"># 스트리밍은 전체 aread() 하지 않고 청크 단위로 처리해야 함
</span>            <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">async</span> <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">response</span><span class="p">.</span><span class="nf">aiter_bytes</span><span class="p">():</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span>
            <span class="n">body_bytes</span> <span class="o">=</span> <span class="sa">b</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 일반적인 비동기 응답: 전체 바디를 안전하게 읽음
</span>            <span class="n">body_bytes</span> <span class="o">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="nf">aread</span><span class="p">()</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="n">body_bytes</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">body_bytes</span><span class="p">)</span>

        <span class="c1"># 예쁘게 JSON 포맷 시도
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">parsed</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">body_str</span><span class="p">)</span>
            <span class="n">body_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">parsed</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">status_code</span><span class="sh">"</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">)),</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_text</span><span class="p">(</span><span class="n">body_str</span><span class="p">),</span>
        <span class="p">}</span>

    <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">request_hook</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">response_hook</span><span class="p">]}</span>

    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">)</span> <span class="k">as</span> <span class="n">async_http</span><span class="p">:</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">http_client</span><span class="o">=</span><span class="n">async_http</span><span class="p">)</span>
        <span class="c1"># OpenAI 호출(비동기)
</span>        <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">안녕하세요 (async aread 예제)</span><span class="sh">"</span><span class="p">}],</span>
        <span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Captured request:</span><span class="sh">"</span><span class="p">,</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Captured response:</span><span class="sh">"</span><span class="p">,</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">][:</span><span class="mi">2000</span><span class="p">]</span> <span class="k">if</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">]</span> <span class="k">else</span> <span class="sh">"</span><span class="s">&lt;none&gt;</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="추가-팁--주의">추가 팁 / 주의</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">await response.aread()</code>는 <strong>응답이 이미 어느 정도 읽혀있지 않다면 전체 바디를 한 번에</strong> 읽어 캐시합니다. 대부분의 REST 호출(전체 바디가 작음)에는 이 방법이 편하고 안전합니다.</p>
  </li>
  <li>
    <p><strong>스트리밍 API</strong>(SSE, OpenAI의 일부 스트리밍 인터페이스 등)는 <code class="language-plaintext highlighter-rouge">aread()</code>로 읽어버리면 스트림 소비로 인해 원래 의도한 스트리밍 처리(실시간 청크 수신)가 불가능해집니다. 그럴 땐 <code class="language-plaintext highlighter-rouge">aiter_bytes()</code>/<code class="language-plaintext highlighter-rouge">aiter_text()</code>로 청크를 순회하거나 SDK가 제공하는 스트리밍 콜백을 사용하세요.</p>
  </li>
  <li>
    <p>httpx는 바디를 읽어 캐시에 보관하니, 훅에서 <code class="language-plaintext highlighter-rouge">aread()</code>로 읽어도 이후에 <code class="language-plaintext highlighter-rouge">response.text</code>/<code class="language-plaintext highlighter-rouge">response.json()</code>로 접근 가능하긴 합니다(일반적 동작).</p>
  </li>
</ul>

<hr />

<p>원하시면 지금 바로:</p>

<ul>
  <li>
    <p><strong>스트리밍(서버-전송-이벤트)</strong> 를 청크 단위로 안전하게 캡처해 <code class="language-plaintext highlighter-rouge">main()</code> 안의 문자열로 합치는 예제,</p>
  </li>
  <li>
    <p>혹은 <strong>OpenAI SDK의 스트리밍(예:<code class="language-plaintext highlighter-rouge">stream=True</code>)</strong> 에 특화된 캡처 코드(청크마다 처리해서 단일 문자열로 결합)도 만들어 드릴게요. 어떤 걸 원하시나요?</p>
  </li>
</ul>

<p class="chat--user">

1. request쪽 한글이 깨져보여. 그리고 여기도 aread로 바꿔줘. 2. body쪽 내용이 모두 하나의 string으로만 나와서 읽기가 힘들어. 그냥 nested json으로 보이는게 읽기 편할 것 같아.

</p>

<p>좋은 포인트 두 가지 정리해서 바로 반영했어요.</p>

<ul>
  <li>
    <p><strong>(1) 요청(request) 쪽 한글 깨짐</strong> → <code class="language-plaintext highlighter-rouge">Content-Type</code>의 <code class="language-plaintext highlighter-rouge">charset</code>을 확인해 <strong>정확한 인코딩</strong> 으로 디코딩하고, 기본값은 <code class="language-plaintext highlighter-rouge">utf-8</code>로 처리합니다. (OpenAI SDK는 JSON 바디를 기본적으로 UTF-8로 보냅니다.)</p>
  </li>
  <li>
    <p><strong>(2) body를 “한 줄짜리 문자열”이 아니라 “중첩 JSON(파이썬 dict)”</strong> 으로 저장 → 파싱이 되면 <code class="language-plaintext highlighter-rouge">dict/list</code>로 저장하고, 안 되면 텍스트 그대로 둡니다.</p>
  </li>
</ul>

<p>또, <strong>응답(response)</strong> 은 비동기 환경에서 확실히 <code class="language-plaintext highlighter-rouge">await response.aread()</code>로 읽도록 바꿨습니다.<br />
<strong>요청(request)</strong> 객체는 httpx에서 <code class="language-plaintext highlighter-rouge">aread()</code>가 없어서(응답에만 있음) 대신 <strong>바이트 바디를 정확한 인코딩으로 디코딩</strong> 하는 방식으로 처리합니다. (OpenAI SDK처럼 일반 JSON 요청이면 <code class="language-plaintext highlighter-rouge">request.content</code>에서 안전하게 읽힙니다. 진짜 “스트리밍 업로드”를 하신다면 별도 tee 래퍼가 필요합니다—아래에 간단 주석 있습니다.)</p>

<hr />

<h3 id="업데이트된-비동기-예제-전역-변수-없이-main-내부-보관-request-한글인코딩-개선-response는-aread-사용-body는-nested-json으로-저장">업데이트된 비동기 예제 (전역 변수 없이 <code class="language-plaintext highlighter-rouge">main()</code> 내부 보관, request 한글/인코딩 개선, response는 <code class="language-plaintext highlighter-rouge">aread()</code> 사용, body는 nested JSON으로 저장)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="k">def</span> <span class="nf">pick_charset</span><span class="p">(</span><span class="n">content_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="c1"># e.g. "application/json; charset=utf-8"
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">content_type</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">default</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">content_type</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">;</span><span class="sh">"</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">lower</span><span class="p">().</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">charset=</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span> <span class="ow">or</span> <span class="n">default</span>
    <span class="k">return</span> <span class="n">default</span>

<span class="k">def</span> <span class="nf">try_parse_json</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">api-key</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">redact_obj</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
    <span class="c1"># dict/list를 재귀적으로 돌며 민감 키 마스킹
</span>    <span class="n">SENSITIVE_KEYS</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">SENSITIVE_KEYS</span> <span class="k">else</span> <span class="nf">redact_obj</span><span class="p">(</span><span class="n">v</span><span class="p">))</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">redact_obj</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">obj</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">captured</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">request_hook</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
        <span class="c1"># 1) charset 결정
</span>        <span class="n">req_ct</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">req_charset</span> <span class="o">=</span> <span class="nf">pick_charset</span><span class="p">(</span><span class="n">req_ct</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 2) 바디 바이트 → 텍스트
</span>        <span class="c1">#    (OpenAI SDK의 JSON 호출이라면 request.content가 bytes로 채워져 있습니다)
</span>        <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">body_text</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">req_charset</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="c1"># 혹시 모를 인코딩 이슈 대비: 마지막 fallback
</span>                <span class="n">body_text</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 스트리밍 업로드(제너레이터/파일 스트림 등)인 경우 여기에 None이 들어옵니다.
</span>            <span class="c1"># 그런 경우, 별도 "tee stream" 래퍼로 `request.stream`을 감싸서 전송되며 캡처해야 합니다.
</span>            <span class="n">body_text</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;streaming or no request.content&gt;</span><span class="sh">"</span>

        <span class="c1"># 3) nested JSON으로 저장(가능하면)
</span>        <span class="n">body_obj</span> <span class="o">=</span> <span class="nf">try_parse_json</span><span class="p">(</span><span class="n">body_text</span><span class="p">)</span>
        <span class="n">body_saved</span> <span class="o">=</span> <span class="nf">redact_obj</span><span class="p">(</span><span class="n">body_obj</span><span class="p">)</span> <span class="k">if</span> <span class="n">body_obj</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">body_text</span>  <span class="c1"># dict/list면 마스킹, 아니면 원문
</span>
        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">method</span><span class="sh">"</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">)),</span>
            <span class="c1"># 문자열이 아니라, 가능하면 dict/list로 저장됩니다.
</span>            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="n">body_saved</span><span class="p">,</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">response_hook</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
        <span class="c1"># 1) 전체 바디를 비동기로 안전하게 읽음
</span>        <span class="n">body_bytes</span> <span class="o">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="nf">aread</span><span class="p">()</span>

        <span class="c1"># 2) charset 결정
</span>        <span class="n">res_ct</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">res_charset</span> <span class="o">=</span> <span class="nf">pick_charset</span><span class="p">(</span><span class="n">res_ct</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 3) 바디 바이트 → 텍스트
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">body_text</span> <span class="o">=</span> <span class="n">body_bytes</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">res_charset</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">body_text</span> <span class="o">=</span> <span class="n">body_bytes</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 4) nested JSON으로 저장(가능하면)
</span>        <span class="n">body_obj</span> <span class="o">=</span> <span class="nf">try_parse_json</span><span class="p">(</span><span class="n">body_text</span><span class="p">)</span>
        <span class="n">body_saved</span> <span class="o">=</span> <span class="nf">redact_obj</span><span class="p">(</span><span class="n">body_obj</span><span class="p">)</span> <span class="k">if</span> <span class="n">body_obj</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">body_text</span>

        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">status_code</span><span class="sh">"</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">)),</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="n">body_saved</span><span class="p">,</span>
        <span class="p">}</span>

    <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">request_hook</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">response_hook</span><span class="p">]}</span>

    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">)</span> <span class="k">as</span> <span class="n">async_http</span><span class="p">:</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">http_client</span><span class="o">=</span><span class="n">async_http</span><span class="p">)</span>

        <span class="c1"># 실제 호출(예: chat.completions)
</span>        <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">한글이 제대로 보이는지 확인합니다 😊</span><span class="sh">"</span><span class="p">}],</span>
        <span class="p">)</span>

    <span class="c1"># 여기서 captured["request"]["body"], captured["response"]["body"]는
</span>    <span class="c1"># 가능한 경우 "중첩 JSON(dict/list)"로 저장되어 있습니다.
</span>    <span class="c1"># (JSON이 아니면 디코딩된 텍스트 문자열)
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">REQUEST (nested JSON or text):</span><span class="sh">"</span><span class="p">,</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RESPONSE (nested JSON or text):</span><span class="sh">"</span><span class="p">,</span> <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">])</span>

    <span class="k">return</span> <span class="n">captured</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h3 id="스트리밍-업로드다운로드를-쓰는-특수-케이스">스트리밍 업로드/다운로드를 쓰는 특수 케이스</h3>

<ul>
  <li>
    <p><strong>요청이 스트리밍 업로드</strong>(파일 제너레이터 등)면 <code class="language-plaintext highlighter-rouge">request.content</code>가 <code class="language-plaintext highlighter-rouge">None</code>일 수 있어요. 이때는 <code class="language-plaintext highlighter-rouge">request.stream</code>(비공개 구현일 수 있음)을 <strong>tee 래퍼</strong> 로 감싸서 전송되는 바이트를 옆에서 모아야 합니다. 필요하시면 tee 래퍼(비동기 제너레이터로 감싸서 bytes를 <code class="language-plaintext highlighter-rouge">yield</code>하면서 내부 버퍼에도 <code class="language-plaintext highlighter-rouge">append</code>) 코드를 만들어 드릴게요.</p>
  </li>
  <li>
    <p><strong>응답이 스트리밍(SSE/청크)</strong> 이면 <code class="language-plaintext highlighter-rouge">await response.aread()</code>로 한 번에 읽지 말고, <code class="language-plaintext highlighter-rouge">async for chunk in response.aiter_bytes():</code> 식으로 <strong>청크를 누적</strong> 해 nested JSON으로 복원(가능시)하거나, 청크 리스트를 합쳐서 나중에 <code class="language-plaintext highlighter-rouge">json.loads()</code>를 시도하세요. 이것도 원하시면 바로 예제 드릴게요.</p>
  </li>
</ul>

<hr />

<p>필요하신 경우:</p>

<ul>
  <li>
    <p><strong>요청/응답 모두 “반드시 dict로만 보관”</strong>하도록 강제하는 버전</p>
  </li>
  <li>
    <p><strong>특정 키만 남기고 나머지 마스킹</strong>(예: <code class="language-plaintext highlighter-rouge">messages</code>만 유지)</p>
  </li>
  <li>
    <p><strong>스트리밍 업/다운로드 tee 래퍼</strong></p>
  </li>
</ul>

<p>어떤 걸 더 원하세요?</p>

<p class="chat--user">

참고로 body_str을 json.load하고 dump 하니 한글이 제대로 보였었어.

</p>

<p>맞아요 — <strong><code class="language-plaintext highlighter-rouge">json.loads()</code> → <code class="language-plaintext highlighter-rouge">json.dumps()</code></strong> 를 거치면 한글이 “정상 글자”로 보이는 이유가 있습니다. 핵심만 정리하고, 바로 적용 가능한 패치도 드릴게요.</p>

<h1 id="왜-load--dump-하면-한글이-제대로-보일까">왜 load → dump 하면 한글이 제대로 보일까?</h1>

<ol>
  <li>
    <p><strong>요청/응답 바이트를 올바른 문자셋(대개 UTF-8)</strong> 으로 <code class="language-plaintext highlighter-rouge">str</code>로 디코딩해야 합니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">json.loads()</code>로 파싱하면 <strong>파이썬 내부 객체(dict/list)</strong> 가 됩니다. 이 상태에서는 한글이 이미 유니코드로 올바르게 보존돼 있어요.</p>
  </li>
  <li>
    <p>그런데 <code class="language-plaintext highlighter-rouge">json.dumps()</code>의 기본값은 <code class="language-plaintext highlighter-rouge">ensure_ascii=True</code>라서, <strong>비 ASCII 문자를<code class="language-plaintext highlighter-rouge">\uXXXX</code>로 이스케이프</strong>합니다.<br />
→ 이러면 다시 “깨져 보이거나” <code class="language-plaintext highlighter-rouge">\uac00</code> 같은 코드값으로 보일 수 있죠.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">ensure_ascii=False</code>로 <code class="language-plaintext highlighter-rouge">json.dumps(..., ensure_ascii=False, indent=2)</code></strong> 를 쓰면 한글이 그대로 출력됩니다(이스케이프 없이).</p>
  </li>
</ol>

<blockquote>
  <p>즉, “디코딩 → 파싱 → <code class="language-plaintext highlighter-rouge">ensure_ascii=False</code>로 직렬화” 순서가 중요합니다.</p>
</blockquote>

<hr />

<h1 id="바로-적용-1-nested-json-저장--2-보기-좋게-출력ensure_asciifalse">바로 적용: (1) nested JSON 저장 + (2) 보기 좋게 출력(ensure_ascii=False)</h1>

<p>아래는 앞서 드린 비동기 훅 예제에서, <strong>nested JSON으로 저장</strong> 하고 <strong>볼 때는<code class="language-plaintext highlighter-rouge">ensure_ascii=False</code>로 덤프</strong>하도록 살짝 손 본 버전입니다. (응답은 <code class="language-plaintext highlighter-rouge">await response.aread()</code> 유지)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="k">def</span> <span class="nf">pick_charset</span><span class="p">(</span><span class="n">content_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">content_type</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">default</span>
    <span class="n">parts</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">content_type</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">;</span><span class="sh">"</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">:]:</span>
        <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">lower</span><span class="p">().</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">charset=</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">p</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span> <span class="ow">or</span> <span class="n">default</span>
    <span class="k">return</span> <span class="n">default</span>

<span class="k">def</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="n">headers</span><span class="p">:</span> <span class="nb">dict</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">headers</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">api-key</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">k</span><span class="p">.</span><span class="nf">lower</span><span class="p">():</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">redact_obj</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
    <span class="n">SENSITIVE</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">apiKey</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">key</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">authorization</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">password</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">REDACTED</span><span class="sh">"</span> <span class="k">if</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">SENSITIVE</span> <span class="k">else</span> <span class="nf">redact_obj</span><span class="p">(</span><span class="n">v</span><span class="p">))</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nf">redact_obj</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">obj</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># (선택) 터미널이 UTF-8이 아닐 수 있으므로 보정
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">reconfigure</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="n">captured</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">request_hook</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
        <span class="n">req_ct</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">charset</span> <span class="o">=</span> <span class="nf">pick_charset</span><span class="p">(</span><span class="n">req_ct</span><span class="p">,</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">body_text</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">charset</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">body_text</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;streaming or no request.content&gt;</span><span class="sh">"</span>

        <span class="c1"># 가능하면 nested JSON(dict/list)로 저장
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">body_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">body_text</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">body_obj</span> <span class="o">=</span> <span class="n">body_text</span>  <span class="c1"># JSON이 아니면 원문 문자열
</span>
        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">method</span><span class="sh">"</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">url</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">)),</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_obj</span><span class="p">(</span><span class="n">body_obj</span><span class="p">),</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">response_hook</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
        <span class="n">body_bytes</span> <span class="o">=</span> <span class="k">await</span> <span class="n">response</span><span class="p">.</span><span class="nf">aread</span><span class="p">()</span>
        <span class="n">res_ct</span> <span class="o">=</span> <span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">charset</span> <span class="o">=</span> <span class="nf">pick_charset</span><span class="p">(</span><span class="n">res_ct</span><span class="p">,</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">body_text</span> <span class="o">=</span> <span class="n">body_bytes</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">charset</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">body_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">body_text</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">body_obj</span> <span class="o">=</span> <span class="n">body_text</span>

        <span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">status_code</span><span class="sh">"</span><span class="p">:</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">headers</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_headers</span><span class="p">(</span><span class="nf">dict</span><span class="p">(</span><span class="n">response</span><span class="p">.</span><span class="n">headers</span><span class="p">)),</span>
            <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="nf">redact_obj</span><span class="p">(</span><span class="n">body_obj</span><span class="p">),</span>
        <span class="p">}</span>

    <span class="n">hooks</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">request_hook</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">response_hook</span><span class="p">]}</span>

    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">)</span> <span class="k">as</span> <span class="n">async_http</span><span class="p">:</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">http_client</span><span class="o">=</span><span class="n">async_http</span><span class="p">)</span>

        <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">한글이 잘 보이는지 테스트합니다. 😄</span><span class="sh">"</span><span class="p">}],</span>
        <span class="p">)</span>

    <span class="c1"># === 보기 좋게 출력: ensure_ascii=False + indent ===
</span>    <span class="k">def</span> <span class="nf">pretty</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="nb">dict</span><span class="p">,</span> <span class="nb">list</span><span class="p">)):</span>
            <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">x</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=== REQUEST ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">pretty</span><span class="p">(</span><span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">]))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== RESPONSE ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">pretty</span><span class="p">(</span><span class="n">captured</span><span class="p">[</span><span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">]))</span>

    <span class="k">return</span> <span class="n">captured</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="포인트">포인트</h3>

<ul>
  <li>
    <p><strong>저장 단계</strong> : 가능하면 <code class="language-plaintext highlighter-rouge">dict/list</code> 형태로 <strong>그대로 저장</strong> 합니다(“한 줄 문자열” 대신 중첩 구조).</p>
  </li>
  <li>
    <p><strong>출력/확인 단계</strong> : <code class="language-plaintext highlighter-rouge">json.dumps(..., ensure_ascii=False, indent=2)</code> 로 덤프하면 <strong>한글이 그대로</strong> 나오고 <strong>가독성</strong> 도 좋아집니다.</p>
  </li>
  <li>
    <p><strong>콘솔 인코딩</strong> : Windows 등에서 콘솔 인코딩 문제로 깨질 수 있으니 <code class="language-plaintext highlighter-rouge">sys.stdout.reconfigure(encoding="utf-8")</code> 시도(실패해도 무시).</p>
  </li>
</ul>

<hr />

<h1 id="빠른-체크리스트-step-by-step">빠른 체크리스트 (step-by-step)</h1>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Content-Type</code>에서 <strong>charset 확인</strong> (없으면 UTF-8 가정).</p>
  </li>
  <li>
    <p>바이트 → 문자열 <strong>디코딩</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">json.loads()</code>로 <strong>객체화</strong>(되면 dict/list로 저장).</p>
  </li>
  <li>
    <p>출력할 때 <code class="language-plaintext highlighter-rouge">json.dumps(..., ensure_ascii=False, indent=2)</code> 사용.</p>
  </li>
  <li>
    <p>콘솔 인코딩이 UTF-8인지 확인(필요 시 <code class="language-plaintext highlighter-rouge">PYTHONIOENCODING=UTF-8</code> 환경변수 또는 위 코드).</p>
  </li>
</ol>

<p>원하시면 <strong>요청/응답에서 특정 키만 골라서 pretty-print</strong> 하도록 필터링까지 넣어드릴게요. 어떤 키들만 보이면 좋을까요?</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Pickle to JSON 변환</title><link href="https://hvppyarchive.github.io/python/pickle-to-json/" rel="alternate" type="text/html" title="Pickle to JSON 변환" /><published>2025-09-29T10:41:41+09:00</published><updated>2025-09-29T10:41:41+09:00</updated><id>https://hvppyarchive.github.io/python/pickle-to-json</id><content type="html" xml:base="https://hvppyarchive.github.io/python/pickle-to-json/"><![CDATA[<p class="chat--user">

너는 파이썬 프로그래밍 전문가야. python pickle로 저장된 데이터가 있어. 이걸 읽어서 그 안의 모든 객체 tree를 json 형태로 뱉도록 하고 싶어. 이 때 pickle은 커스텀 클래스를 담고 있어. 이걸 해내기 위해서 어떻게 접근해야할까? 최대한 에러가 없이 동작하도록 고민해줘. Step by Step으로 생각해줘.

</p>

<p>좋아, “피클 → 안전하고 튼튼한 JSON”을 목표로 단계별로 설계해볼게. (코드 샘플도 아래에 한 방에 넣어뒀어.)</p>

<h1 id="step-by-step-접근">Step by Step 접근</h1>

<h2 id="1-위협-모델전략-먼저-결정">1) 위협 모델/전략 먼저 결정</h2>

<ul>
  <li>
    <p><strong>pickle은 임의 코드 실행 위험</strong> 이 있어. <em>출처가 100% 신뢰되는 파일만</em> 바로 <code class="language-plaintext highlighter-rouge">pickle.load</code> 하면 되고, 그 외에는 “제한 해제”를 절대 하지 말아야 해.</p>
  </li>
  <li>
    <p>따라서 두 가지 모드를 추천:</p>

    <ol>
      <li>
        <p><strong>신뢰 모드(trusted)</strong> : 그냥 로드 → 직렬화.</p>
      </li>
      <li>
        <p><strong>세이프 모드(safe/whitelist)</strong> : 허용 목록(모듈.클래스)을 지정한 <code class="language-plaintext highlighter-rouge">RestrictedUnpickler</code>로만 언피클.</p>
      </li>
    </ol>
  </li>
</ul>

<h2 id="2-미리-무엇이-들어있는지-검사">2) 미리 “무엇이 들어있는지” 검사</h2>

<ul>
  <li>
    <p>언피클을 실행하지 않고 <code class="language-plaintext highlighter-rouge">pickletools.genops</code>로 피클 스트림의 <code class="language-plaintext highlighter-rouge">GLOBAL/STACK_GLOBAL</code> opcode를 스캔해서, 필요한 클래스/모듈 목록을 뽑아본다.</p>
  </li>
  <li>
    <p>그 결과를 보고 <strong>화이트리스트</strong> 를 만든다. (예: <code class="language-plaintext highlighter-rouge">{"mymodels.User", "numpy.ndarray"}</code>)</p>
  </li>
</ul>

<h2 id="3-안전한-로더-만들기">3) 안전한 로더 만들기</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">pickle.Unpickler</code>를 상속해서 <code class="language-plaintext highlighter-rouge">find_class</code>를 오버라이드.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">builtins</code>의 기본 컨테이너 정도만 허용하고, 나머지는 <strong>화이트리스트에 있는 것만 통과</strong>.</p>
  </li>
  <li>
    <p>화이트리스트에 없는 건 <code class="language-plaintext highlighter-rouge">UnpicklingError</code>로 막는다.</p>
  </li>
</ul>

<h2 id="4-json-가능-형태로-변환기-설계">4) “JSON 가능 형태”로 변환기 설계</h2>

<p>JSON은 다음을 그대로 표현 못 하거나 깨지기 쉬워:</p>

<ul>
  <li>
    <p>순환/공유 참조(cycles/aliases), 사용자 정의 객체, <code class="language-plaintext highlighter-rouge">set/tuple</code>, <code class="language-plaintext highlighter-rouge">bytes</code>, <code class="language-plaintext highlighter-rouge">datetime</code>, <code class="language-plaintext highlighter-rouge">Decimal/UUID</code>, <code class="language-plaintext highlighter-rouge">numpy/pandas/torch</code> 등.</p>
  </li>
  <li>
    <p><strong>원칙</strong> : “가능하면 손실 없이”, “그래도 항상 직렬화되게”.</p>

    <ul>
      <li>
        <p><strong>순환/공유 참조</strong> : <code class="language-plaintext highlighter-rouge">"$id"</code>/<code class="language-plaintext highlighter-rouge">"$ref"</code> 프로토콜을 사용 (예: <code class="language-plaintext highlighter-rouge">{"$id":"obj1", "value": ...}</code>, 참조는 <code class="language-plaintext highlighter-rouge">{"$ref":"obj1"}</code>).</p>
      </li>
      <li>
        <p><strong>커스텀 클래스</strong> : 우선 순위대로</p>

        <ol>
          <li>
            <p><code class="language-plaintext highlighter-rouge">__json__()</code> → 딕트/리스트 등</p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">to_json()</code> / <code class="language-plaintext highlighter-rouge">to_dict()</code> / <code class="language-plaintext highlighter-rouge">model_dump()</code>(pydantic)</p>
          </li>
          <li>
            <p>dataclass → <code class="language-plaintext highlighter-rouge">asdict</code></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">__getstate__()</code> or <code class="language-plaintext highlighter-rouge">__dict__</code></p>
          </li>
          <li>
            <p>마지막 수단: <code class="language-plaintext highlighter-rouge">repr(obj)</code>에 타입 메타(<code class="language-plaintext highlighter-rouge">"$type"</code>).</p>
          </li>
        </ol>
      </li>
      <li>
        <p><strong>특수 타입들</strong> (가능한 한 보존):</p>

        <ul>
          <li>
            <p><code class="language-plaintext highlighter-rouge">set/frozenset</code> → <code class="language-plaintext highlighter-rouge">{"$type":"set","items":[...]}</code></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">tuple</code> → <code class="language-plaintext highlighter-rouge">{"$type":"tuple","items":[...]}</code></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">bytes/bytearray</code> → <code class="language-plaintext highlighter-rouge">{"$type":"bytes","base64":"..."}</code></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">datetime/date/time</code> → <code class="language-plaintext highlighter-rouge">{"$type":"datetime","iso":"..."}</code></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">Decimal</code> → <code class="language-plaintext highlighter-rouge">{"$type":"decimal","value":"..."}</code></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">UUID</code> → <code class="language-plaintext highlighter-rouge">{"$type":"uuid","value":"..."}</code></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">Path</code> → <code class="language-plaintext highlighter-rouge">{"$type":"path","value":"..."}</code></p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">re.Pattern</code> → 패턴/플래그 보존</p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">Enum</code> → 이름/값 보존</p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">Exception</code> → 타입/args/str</p>
          </li>
          <li>
            <p><strong>NumPy</strong> : <code class="language-plaintext highlighter-rouge">ndarray</code>는 <code class="language-plaintext highlighter-rouge">.tolist()</code> + shape/dtype 메타</p>
          </li>
          <li>
            <p><strong>pandas</strong> : DataFrame/Series는 <code class="language-plaintext highlighter-rouge">to_dict(orient="records")</code> 등 + 메타</p>
          </li>
          <li>
            <p><strong>PyTorch/TensorFlow</strong> 텐서는 <code class="language-plaintext highlighter-rouge">.detach().cpu().numpy().tolist()</code> 등으로 값만 (가능하면 dtype/shape 메타 포함)</p>
          </li>
        </ul>
      </li>
      <li>
        <p><strong>dict의 비문자열 키</strong> : JSON은 키가 문자열만 되므로</p>

        <ul>
          <li>
            <p>전부 문자열이면 그대로 유지</p>
          </li>
          <li>
            <p>아니면 <code class="language-plaintext highlighter-rouge">{"$type":"dict","entries":[[key,value], ...]}</code> 형태로 보존</p>
          </li>
        </ul>
      </li>
      <li>
        <p><strong>깊이 제한/메모</strong> : 무한 재귀 방지 위해 <code class="language-plaintext highlighter-rouge">seen</code>(id→$id) 메모와 <code class="language-plaintext highlighter-rouge">max_depth</code> 도입.</p>
      </li>
      <li>
        <p><strong>마지막 안전판</strong> : 무엇이든 실패하면 <code class="language-plaintext highlighter-rouge">repr</code> + <code class="language-plaintext highlighter-rouge">"$error"</code> 메타를 달아 절대 실패하지 않게.</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="5-덤프-옵션">5) 덤프 옵션</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">json.dumps(jsonable, ensure_ascii=False, indent=2, allow_nan=False)</code>를 권장.</p>
  </li>
  <li>
    <p>파일이 크면 <code class="language-plaintext highlighter-rouge">indent=None</code>로 용량 최소화.</p>
  </li>
  <li>
    <p>덤프 후 한 번 <code class="language-plaintext highlighter-rouge">json.loads</code>로 <strong>역파싱 검증</strong> 하면 실수 줄일 수 있어.</p>
  </li>
</ul>

<h2 id="6-대안-라이브러리-사용">6) 대안: 라이브러리 사용</h2>

<ul>
  <li>
    <p><strong>jsonpickle</strong> 은 자체적으로 클래스/참조를 잘 처리한다. 빠르게 되고 범용성이 좋지만, <em>언피클 단계의 보안은 별도 처리</em> 가 필요하다(즉, <code class="language-plaintext highlighter-rouge">RestrictedUnpickler</code>는 여전히 필요).</p>
  </li>
  <li>
    <p>직접 규칙을 통제하고 싶으면 아래 커스텀 직렬화기를 쓰는 게 안전/예측 가능.</p>
  </li>
</ul>

<hr />

<h1 id="견고한-예시-코드-스크립트-1개로-동작">견고한 예시 코드 (스크립트 1개로 동작)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
# pickle_to_json.py
</span><span class="kn">import</span> <span class="n">io</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">base64</span><span class="p">,</span> <span class="n">math</span><span class="p">,</span> <span class="n">re</span><span class="p">,</span> <span class="n">types</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">pickle</span><span class="p">,</span> <span class="n">pickletools</span><span class="p">,</span> <span class="n">importlib</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">asdict</span>
<span class="kn">from</span> <span class="n">decimal</span> <span class="kn">import</span> <span class="n">Decimal</span>
<span class="kn">from</span> <span class="n">uuid</span> <span class="kn">import</span> <span class="n">UUID</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span>

<span class="c1"># --- Optional dependencies detection ---
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">np</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">pd</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># ---------- 1) 분석: 피클 안의 글로벌 심볼 스캔 ----------
</span><span class="k">def</span> <span class="nf">audit_pickle_globals</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">언피클 없이 GLOBAL/STACK_GLOBAL 사용 내역을 (module.name) 집합으로 리턴.</span><span class="sh">"""</span>
    <span class="n">refs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">op</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">pos</span> <span class="ow">in</span> <span class="n">pickletools</span><span class="p">.</span><span class="nf">genops</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">op</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">GLOBAL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STACK_GLOBAL</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>
                <span class="n">mod</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="n">arg</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># For GLOBAL, arg like "module\nname\n"
</span>                <span class="n">parts</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">arg</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">mod</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
            <span class="n">refs</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">mod</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">refs</span>

<span class="c1"># ---------- 2) 화이트리스트 기반 Restricted Unpickler ----------
</span><span class="k">class</span> <span class="nc">RestrictedUnpickler</span><span class="p">(</span><span class="n">pickle</span><span class="p">.</span><span class="n">Unpickler</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">file</span><span class="p">,</span> <span class="n">allowed</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">allowed</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">allowed</span> <span class="ow">or</span> <span class="p">[])</span>

    <span class="k">def</span> <span class="nf">find_class</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">module</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">full</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">module</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>
        <span class="c1"># 빌트인 컨테이너/예외/기본 타입 일부 허용
</span>        <span class="n">allowed_builtins</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">builtins.set</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">builtins.frozenset</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">builtins.bytes</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">builtins.bytearray</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">builtins.complex</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">builtins.Exception</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">builtins.slice</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">builtins.range</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">builtins.dict</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">builtins.list</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">builtins.tuple</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="n">full</span> <span class="ow">in</span> <span class="n">allowed_builtins</span> <span class="ow">or</span> <span class="n">full</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">allowed</span><span class="p">:</span>
            <span class="n">mod</span> <span class="o">=</span> <span class="n">importlib</span><span class="p">.</span><span class="nf">import_module</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
        <span class="k">raise</span> <span class="n">pickle</span><span class="p">.</span><span class="nc">UnpicklingError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">forbidden global: </span><span class="si">{</span><span class="n">full</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">restricted_loads</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">allowed</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="k">return</span> <span class="nc">RestrictedUnpickler</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="nc">BytesIO</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">),</span> <span class="n">allowed</span><span class="o">=</span><span class="n">allowed</span><span class="p">).</span><span class="nf">load</span><span class="p">()</span>

<span class="c1"># ---------- 3) JSON 직렬화기 ----------
</span><span class="n">JSON_PRIMITIVES</span> <span class="o">=</span> <span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bool</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">JSON_PRIMITIVES</span><span class="p">):</span>
        <span class="c1"># NaN/Inf는 allow_nan=False에 막히므로 문자열 처리
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="nf">isnan</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">or</span> <span class="n">math</span><span class="p">.</span><span class="nf">isinf</span><span class="p">(</span><span class="n">x</span><span class="p">)):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="c1"># 너무 큰 int는 JS에서 안전하지 않지만 JSON 스펙엔 문제 없음. 필요시 문자열화 가능.
</span>        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">_pattern_type</span><span class="p">():</span>
    <span class="c1"># Py&gt;=3.8: re.Pattern, Py&lt;3.8: type(re.compile(''))
</span>    <span class="n">pat</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">re</span><span class="p">,</span> <span class="sh">"</span><span class="s">Pattern</span><span class="sh">"</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sh">""</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">pat</span>

<span class="k">def</span> <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">seen</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">max_depth</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1000</span><span class="p">,</span> <span class="n">_depth</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">객체 그래프를 JSON 가능 구조로 변환(+ 순환/참조 보존). 절대 예외 던지지 않음.</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">seen</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">seen</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># 깊이 보호
</span>    <span class="k">if</span> <span class="n">_depth</span> <span class="o">&gt;</span> <span class="n">max_depth</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">depth_truncated</span><span class="sh">"</span><span class="p">}</span>

    <span class="c1"># 기본형
</span>    <span class="k">if</span> <span class="nf">is_primitive</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">obj</span>

    <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
    <span class="c1"># 불변이지만 큰 튜플/프리미티브 아닌 객체에도 id를 부여해 참조 보존
</span>    <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$ref</span><span class="sh">"</span><span class="p">:</span> <span class="n">seen</span><span class="p">[</span><span class="n">oid</span><span class="p">]}</span>

    <span class="c1"># 새 객체에 $id 할당
</span>    <span class="n">sid</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">obj</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seen</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">seen</span><span class="p">[</span><span class="n">oid</span><span class="p">]</span> <span class="o">=</span> <span class="n">sid</span>

    <span class="c1"># bytes/bytearray
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">memoryview</span><span class="p">)):</span>
        <span class="n">b</span> <span class="o">=</span> <span class="nf">bytes</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bytes</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">base64</span><span class="sh">"</span><span class="p">:</span> <span class="n">base64</span><span class="p">.</span><span class="nf">b64encode</span><span class="p">(</span><span class="n">b</span><span class="p">).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">ascii</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">length</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">b</span><span class="p">)}</span>

    <span class="c1"># datetime-like
</span>    <span class="kn">import</span> <span class="n">datetime</span> <span class="k">as</span> <span class="n">_dt</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="n">_dt</span><span class="p">.</span><span class="n">datetime</span><span class="p">,</span> <span class="n">_dt</span><span class="p">.</span><span class="n">date</span><span class="p">,</span> <span class="n">_dt</span><span class="p">.</span><span class="n">time</span><span class="p">)):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">iso</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="nf">isoformat</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">iso</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">.</span><span class="nf">lower</span><span class="p">(),</span> <span class="sh">"</span><span class="s">iso</span><span class="sh">"</span><span class="p">:</span> <span class="n">iso</span><span class="p">}</span>

    <span class="c1"># Decimal / UUID / Path
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">Decimal</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">decimal</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">obj</span><span class="p">)}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">UUID</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">uuid</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">obj</span><span class="p">)}</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">Path</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">obj</span><span class="p">)}</span>

    <span class="c1"># 정규식 패턴
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nf">_pattern_type</span><span class="p">()):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">regex</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pattern</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">pattern</span><span class="p">,</span> <span class="sh">"</span><span class="s">flags</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">flags</span><span class="p">}</span>

    <span class="c1"># Enum
</span>    <span class="kn">import</span> <span class="n">enum</span> <span class="k">as</span> <span class="n">_enum</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">_enum</span><span class="p">.</span><span class="n">Enum</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">enum:</span><span class="si">{</span><span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">value</span><span class="p">}</span>

    <span class="c1"># 예외
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">BaseException</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">exception:</span><span class="si">{</span><span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">args</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="nf">to_jsonable</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">.</span><span class="n">args</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">str</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">obj</span><span class="p">),</span>
        <span class="p">}</span>

    <span class="c1"># NumPy
</span>    <span class="k">if</span> <span class="n">np</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">numpy.ndarray</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">shape</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="sh">"</span><span class="s">dtype</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">dtype</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="nf">tolist</span><span class="p">(),</span>
            <span class="p">}</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">generic</span><span class="p">):</span>  <span class="c1"># numpy scalar
</span>            <span class="k">return</span> <span class="n">obj</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>

    <span class="c1"># pandas
</span>    <span class="k">if</span> <span class="n">pd</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">pandas.DataFrame</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">columns</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">tolist</span><span class="p">(),</span>
                <span class="sh">"</span><span class="s">records</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="nf">to_dict</span><span class="p">(</span><span class="n">orient</span><span class="o">=</span><span class="sh">"</span><span class="s">records</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">}</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">pandas.Series</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">values</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="nf">to_list</span><span class="p">(),</span>
                <span class="sh">"</span><span class="s">index</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">tolist</span><span class="p">(),</span>
            <span class="p">}</span>

    <span class="c1"># torch / tf 텐서 (가능하면 값만)
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="kn">import</span> <span class="n">torch</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">torch</span><span class="p">.</span><span class="n">Tensor</span><span class="p">):</span>
            <span class="n">arr</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="nf">detach</span><span class="p">().</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">()</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">torch.Tensor</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">shape</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">shape</span><span class="p">),</span> <span class="sh">"</span><span class="s">dtype</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">dtype</span><span class="p">),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">arr</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="kn">import</span> <span class="n">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="n">Tensor</span><span class="p">,)):</span>
            <span class="n">arr</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="nf">numpy</span><span class="p">()</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tf.Tensor</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">shape</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">shape</span><span class="p">),</span> <span class="sh">"</span><span class="s">dtype</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">arr</span><span class="p">.</span><span class="n">dtype</span><span class="p">),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">arr</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="c1"># set / frozenset
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="nf">to_jsonable</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">],</span>
        <span class="p">}</span>

    <span class="c1"># tuple / list
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">)):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="nf">to_jsonable</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">]</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tuple</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">items</span>  <span class="c1"># list는 흔히 그대로
</span>
    <span class="c1"># dict / mapping
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="c1"># 모든 키가 문자열이면 평범한 dict 유지
</span>        <span class="k">if</span> <span class="nf">all</span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">.</span><span class="nf">keys</span><span class="p">()):</span>
            <span class="k">return</span> <span class="p">{</span><span class="n">k</span><span class="p">:</span> <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
        <span class="c1"># 아니면 entries로 보존
</span>        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dict</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">entries</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">[</span><span class="nf">to_jsonable</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
                 <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
                <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span>
            <span class="p">],</span>
        <span class="p">}</span>

    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">OrderedDict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">OrderedDict</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">entries</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">[</span><span class="nf">to_jsonable</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span>
                 <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>
                <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">obj</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span>
            <span class="p">],</span>
        <span class="p">}</span>

    <span class="c1"># dataclass / attrs / pydantic / 사용자 정의 클래스
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># dataclass
</span>        <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="nf">asdict</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="sh">"</span><span class="s">fields</span><span class="sh">"</span><span class="p">:</span>
                    <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="c1"># attrs
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="kn">import</span> <span class="n">attr</span>
        <span class="k">if</span> <span class="n">attr</span><span class="p">.</span><span class="nf">has</span><span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">):</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="n">attr</span><span class="p">.</span><span class="nf">asdict</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">recurse</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="sh">"</span><span class="s">fields</span><span class="sh">"</span><span class="p">:</span>
                    <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="c1"># pydantic
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">model_dump</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">callable</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">model_dump</span><span class="sh">"</span><span class="p">)):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="sh">"</span><span class="s">fields</span><span class="sh">"</span><span class="p">:</span>
                    <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

    <span class="c1"># 커스텀 메서드들
</span>    <span class="k">for</span> <span class="n">meth</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">__json__</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">to_json</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">to_dict</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">fn</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">meth</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">callable</span><span class="p">(</span><span class="n">fn</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="nf">fn</span><span class="p">()</span>
                <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="sh">"</span><span class="s">fields</span><span class="sh">"</span><span class="p">:</span>
                        <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>

    <span class="c1"># __getstate__ / __dict__
</span>    <span class="n">state</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">__getstate__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">state</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="nf">__getstate__</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">state</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">state</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">state</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">obj</span><span class="p">.</span><span class="n">__dict__</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">state</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">state</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="sh">"</span><span class="s">state</span><span class="sh">"</span><span class="p">:</span>
                <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">seen</span><span class="o">=</span><span class="n">seen</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="n">max_depth</span><span class="p">,</span> <span class="n">_depth</span><span class="o">=</span><span class="n">_depth</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span>

    <span class="c1"># 마지막 안전판
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">rep</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">rep</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">&lt;unreprable </span><span class="si">{</span><span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="si">}</span><span class="s">&gt;</span><span class="sh">"</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">$id</span><span class="sh">"</span><span class="p">:</span> <span class="n">sid</span><span class="p">,</span> <span class="sh">"</span><span class="s">$type</span><span class="sh">"</span><span class="p">:</span> <span class="n">obj</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="sh">"</span><span class="s">repr</span><span class="sh">"</span><span class="p">:</span> <span class="n">rep</span><span class="p">,</span> <span class="sh">"</span><span class="s">$error</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">fallback_repr</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># ---------- 4) 최종 유틸 ----------
</span><span class="k">def</span> <span class="nf">pickle_to_json_bytes</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">safe</span><span class="sh">"</span><span class="p">,</span> <span class="n">allow</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                         <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">mode</span> <span class="ow">not</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">safe</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">trusted</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">mode must be </span><span class="sh">'</span><span class="s">safe</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">trusted</span><span class="sh">'"</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">safe</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># 사전 점검: 어떤 클래스가 필요한지
</span>        <span class="n">needed</span> <span class="o">=</span> <span class="nf">audit_pickle_globals</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">allow</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">allow</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">allow</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">allow</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="c1"># numpy/pandas 등 자동 허용 (있을 때)
</span>        <span class="k">if</span> <span class="n">np</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">allow</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">"</span><span class="s">numpy.ndarray</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">numpy.dtype</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">numpy.core.numeric.complexfloating</span><span class="sh">"</span><span class="p">})</span>
        <span class="k">if</span> <span class="n">pd</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">allow</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">"</span><span class="s">pandas.core.frame.DataFrame</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pandas.core.series.Series</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">pandas.core.indexes.base.Index</span><span class="sh">"</span><span class="p">})</span>
        <span class="c1"># 필요하지만 화이트리스트에 없는 것 있으면 경고(여기선 예외로 명확히)
</span>        <span class="n">missing</span> <span class="o">=</span> <span class="n">needed</span> <span class="o">-</span> <span class="n">allow</span> <span class="o">-</span> <span class="p">{</span>
            <span class="c1"># 종종 피클 스트림에 등장하는 builtins/eval 보조들 (이미 Restricted에서 기본 거름)
</span>        <span class="p">}</span>
        <span class="c1"># 실제로는 사용자에게 리스트를 보여주고 승인받는 게 가장 안전
</span>        <span class="c1"># 여기서는 '허용 안 된 심볼이 있다'면 실패 처리
</span>        <span class="k">if</span> <span class="n">missing</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">pickle</span><span class="p">.</span><span class="nc">UnpicklingError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unapproved classes in pickle: </span><span class="si">{</span><span class="nf">sorted</span><span class="p">(</span><span class="n">missing</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">obj</span> <span class="o">=</span> <span class="nf">restricted_loads</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">,</span> <span class="n">allowed</span><span class="o">=</span><span class="n">allow</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># trusted
</span>        <span class="n">obj</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">)</span>

    <span class="n">jsonable</span> <span class="o">=</span> <span class="nf">to_jsonable</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
    <span class="n">txt</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">jsonable</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="n">ensure_ascii</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">,</span> <span class="n">allow_nan</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="c1"># 역파싱 검증
</span>    <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">txt</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ---------- 5) CLI ----------
</span><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">argparse</span><span class="p">,</span> <span class="n">os</span>
    <span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">input .pkl file</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">output .json file</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--mode</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">safe</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">trusted</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">safe</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--allow</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">append</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="p">[],</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">extra allowed </span><span class="sh">'</span><span class="s">module.Class</span><span class="sh">'</span><span class="s"> (repeatable)</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--no-indent</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">ap</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nb">input</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">pkl</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

    <span class="n">indent</span> <span class="o">=</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">no_indent</span> <span class="k">else</span> <span class="mi">2</span>
    <span class="n">out</span> <span class="o">=</span> <span class="nf">pickle_to_json_bytes</span><span class="p">(</span><span class="n">pkl</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">mode</span><span class="p">,</span> <span class="n">allow</span><span class="o">=</span><span class="nf">set</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">allow</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">)</span>

    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">output</span><span class="p">,</span> <span class="sh">"</span><span class="s">wb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Wrote </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">output</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="사용-예">사용 예</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) 먼저 어떤 클래스가 필요한지 확인만 해보려면 (스크립트 수정 없이 간단 확인)</span>
python <span class="nt">-c</span> <span class="s2">"import sys, pickletools; import pathlib; p=pathlib.Path(sys.argv[1]).read_bytes(); </span><span class="se">\</span><span class="s2">
print({(a.split('</span><span class="se">\n</span><span class="s2">')[0]+'.'+a.split('</span><span class="se">\n</span><span class="s2">')[1]) for (op,a,_) in pickletools.genops(p) if op.name in ('GLOBAL','STACK_GLOBAL')})"</span> mydata.pkl

<span class="c"># 2) 안전 모드에서 허용 클래스 지정 후 변환</span>
python pickle_to_json.py mydata.pkl mydata.json <span class="nt">--mode</span> safe <span class="nt">--allow</span> mypkg.models.User <span class="nt">--allow</span> mypkg.models.Order

<span class="c"># 3) 신뢰 모드(출처가 확실할 때만)</span>
python pickle_to_json.py mydata.pkl mydata.json <span class="nt">--mode</span> trusted
</code></pre></div></div>

<hr />

<h1 id="실무-팁-에러-최소화-포인트">실무 팁 (에러 최소화 포인트)</h1>

<ol>
  <li>
    <p><strong>화이트리스트는 점진적으로 넓혀라</strong><br />
먼저 “막고 → 필요한 것만 허용”이 안전하고, 에러도 찾기 쉽다. 허용할 때는 <strong>정확한 풀네임(module.Class)</strong> 로.</p>
  </li>
  <li>
    <p><strong>커스텀 클래스에<code class="language-plaintext highlighter-rouge">__json__</code> 또는 <code class="language-plaintext highlighter-rouge">to_dict()</code> 추가</strong><br />
프로젝트 내부 클래스라면 여기에 직렬화 규칙을 넣어두면, 변환기가 알아서 호출하므로 실패율이 크게 준다.</p>
  </li>
  <li>
    <p><strong>순환 참조가 많은 그래프는<code class="language-plaintext highlighter-rouge">$id/$ref</code> 스킴 필수</strong><br />
JSON 순환은 불가하니, 위 스킴 같은 <strong>참조 표현</strong> 을 반드시 도입해야 데이터 손실/오류가 없다.</p>
  </li>
  <li>
    <p><strong>거대한 배열/데이터프레임은 별도 파일 고려</strong><br />
JSON은 용량/속도에 약하다. 정말 크면 <code class="language-plaintext highlighter-rouge">.npy</code>나 <code class="language-plaintext highlighter-rouge">.parquet</code>를 <strong>사이드카</strong> 로 저장하고 JSON에는 메타/경로만 넣는 전략이 좋다.</p>
  </li>
  <li>
    <p><strong>덤프 전에 변환만 먼저 실행해보기</strong><br />
<code class="language-plaintext highlighter-rouge">to_jsonable(obj)</code> 결과를 한 번 찍어보면 어떤 타입이 어떻게 나오는지 바로 파악 가능. 실패 지점이 드러난다.</p>
  </li>
  <li>
    <p><strong>로스리스가 중요하면 타입 메타를 꼭 남겨라</strong><br />
<code class="language-plaintext highlighter-rouge">"$type"</code>, <code class="language-plaintext highlighter-rouge">shape</code>, <code class="language-plaintext highlighter-rouge">dtype</code> 같은 메타가 재구성에 필수다.</p>
  </li>
  <li>
    <p><strong>테스트</strong></p>

    <ul>
      <li>
        <p>작은 샘플 피클로 시작 → 점진 확대</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">json.loads(dumps(...))</code> 역파싱 검증</p>
      </li>
      <li>
        <p>대표 케이스: set/tuple/bytes/datetime/enum/numpy/pandas/커스텀 클래스를 모두 포함하는 합성 테스트</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<p>원하면 위 스크립트를 네 상황에 맞게 더 최소/간결화하거나, <code class="language-plaintext highlighter-rouge">jsonpickle</code>을 활용한 초간단 버전도 만들어줄게.</p>

<p class="chat--user">

1. 그냥 모든걸 trust로 하고 싶어. 모두 내가 만든 파일들이야. 2. 질문. 파이썬 버전은 상관 없을까? 3. jsonpickle을 사용해서 간단해진다면 그렇게 해줘

</p>

<p>좋아! 네 3가지 조건(1. 전부 trust 모드, 2. 파이썬 버전 이슈, 3. jsonpickle로 간단히) 기준으로, 에러를 최소화하는 <strong>실전용 절차 + 바로 쓸 수 있는 스크립트</strong> 까지 준비했어.</p>

<h1 id="step-by-step">Step by Step</h1>

<h2 id="1-전략-요약-trust-모드">1) 전략 요약 (Trust 모드)</h2>

<ul>
  <li>
    <p><strong>전제</strong> : 피클은 전부 네가 만든 파일 → <code class="language-plaintext highlighter-rouge">pickle.load</code>로 곧바로 로드하고, 그 객체를 <strong>jsonpickle</strong> 로 JSON 변환.</p>
  </li>
  <li>
    <p><strong>이점</strong> : 커스텀 클래스/순환 참조/공유 참조를 jsonpickle이 자동 처리(<code class="language-plaintext highlighter-rouge">py/object</code>, <code class="language-plaintext highlighter-rouge">py/id</code>, <code class="language-plaintext highlighter-rouge">py/ref</code> 메타).</p>
  </li>
  <li>
    <p><strong>선택지</strong> :</p>

    <ul>
      <li>
        <p>타입 복원 메타 포함(기본): <code class="language-plaintext highlighter-rouge">unpicklable=True</code> → 로스리스에 가까운 표현.</p>
      </li>
      <li>
        <p><strong>순수 JSON만</strong>(타입 메타 제거): <code class="language-plaintext highlighter-rouge">unpicklable=False</code> → 아주 깔끔하지만, 타입/참조 복원 불가.</p>
      </li>
    </ul>
  </li>
</ul>

<h2 id="2-파이썬-버전-호환성-필수-체크">2) 파이썬 버전 호환성 (필수 체크)</h2>

<ul>
  <li>
    <p><strong>같거나 더 새 버전의 파이썬</strong> 에서 로드하자. (예: Py 3.8에서 만든 피클 → Py 3.8 이상에서 로드 권장)</p>
  </li>
  <li>
    <p>피클 <strong>프로토콜</strong> 은 “신버전이 구버전 읽기 OK, 그 반대는 종종 불가”가 일반적.</p>
  </li>
  <li>
    <p><strong>클래스 import 가능성</strong> : 피클 안에 저장된 모듈/클래스 경로가 현재 환경에서 <strong>import</strong> 되어야 언피클 성공.</p>

    <ul>
      <li>즉, 프로젝트 코드가 <code class="language-plaintext highlighter-rouge">PYTHONPATH</code> 에 있어야 하고, <strong>모듈/클래스 이름이 바뀌지 않아야</strong> 해.</li>
    </ul>
  </li>
  <li>
    <p>(구피클) Python 2에서 만든 피클이라면 Py3에서 <code class="language-plaintext highlighter-rouge">encoding='latin1'</code> 옵션이 필요할 수 있음.</p>
  </li>
</ul>

<h2 id="3-jsonpickle로-간단튼튼하게-변환">3) jsonpickle로 간단/튼튼하게 변환</h2>

<ul>
  <li>
    <p><strong>핵심 한 줄</strong> : <code class="language-plaintext highlighter-rouge">jsonpickle.encode(obj, unpicklable=..., make_refs=..., max_depth=...)</code></p>
  </li>
  <li>
    <p><strong>핸들러 등록</strong> : NumPy/Pandas가 있다면 <code class="language-plaintext highlighter-rouge">jsonpickle.ext.numpy.register_handlers()</code>, <code class="language-plaintext highlighter-rouge">jsonpickle.ext.pandas.register_handlers()</code> 호출로 배열/데이터프레임을 자연스럽게 직렬화.</p>
  </li>
  <li>
    <p><strong>Strict JSON</strong> 필요하면: <code class="language-plaintext highlighter-rouge">allow_nan=False</code> (NaN/Infinity 금지) 를 백엔드 옵션으로 지정.</p>
  </li>
  <li>
    <p><strong>대용량</strong> 이면: 들여쓰기 <code class="language-plaintext highlighter-rouge">None</code>(압축), 필요 시 <code class="language-plaintext highlighter-rouge">sort_keys=False</code> 유지로 성능/용량 최소화.</p>
  </li>
</ul>

<hr />

<h1 id="바로-실행-가능한-스크립트">바로 실행 가능한 스크립트</h1>

<p>내가 <strong>trust 모드 전용 변환 스크립트</strong> 를 만들어 뒀어. 옵션으로 순수 JSON, 참조 트래킹, strict JSON, 들여쓰기 등 세밀 제어가 가능해.</p>

<p>Download: <code class="language-plaintext highlighter-rouge">pickle_to_json_trusted.py</code></p>

<h2 id="사용법-예시">사용법 예시</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) 기본: 타입/참조 메타 유지 (권장: 로스리스에 가까움)</span>
python pickle_to_json_trusted.py mydata.pkl mydata.json

<span class="c"># 2) 순수 JSON(메타 제거) — 사람이 읽기/타 시스템 교환에 좋음</span>
python pickle_to_json_trusted.py mydata.pkl mydata.json <span class="nt">--pure</span>

<span class="c"># 3) 사이클이 없고 참조 추적이 불필요하다면 약간 더 단순화</span>
python pickle_to_json_trusted.py mydata.pkl mydata.json <span class="nt">--no-refs</span>

<span class="c"># 4) Strict JSON (NaN/Infinity 금지), 컴팩트 출력</span>
python pickle_to_json_trusted.py mydata.pkl mydata.json <span class="nt">--strict</span> <span class="nt">--no-indent</span>

<span class="c"># 5) NumPy/Pandas가 있다면 자동 핸들러 등록됨(별도 옵션 불필요)</span>

<span class="c"># 6) 정보 출력(프로토콜/글로벌 심볼 훑어보기)</span>
python pickle_to_json_trusted.py mydata.pkl mydata.json <span class="nt">--info</span>

<span class="c"># 7) (레거시) Python 2에서 만든 피클이라면</span>
python pickle_to_json_trusted.py mydata.pkl mydata.json <span class="nt">--py2-latin1</span>
</code></pre></div></div>

<p>출력 모드에 따른 JSON 형태는 대략 다음과 같아:</p>

<ul>
  <li>
    <p><strong>기본(메타 포함)</strong> : 각 객체에 <code class="language-plaintext highlighter-rouge">py/object</code>, 참조엔 <code class="language-plaintext highlighter-rouge">py/id</code>/<code class="language-plaintext highlighter-rouge">py/ref</code>가 붙음 → 복원 친화적.</p>
  </li>
  <li>
    <p><strong>--pure</strong> : 표준 JSON만 남김 → 최대 호환성, 대신 타입/참조 정보는 사라짐.</p>
  </li>
</ul>

<hr />

<h1 id="에러를-더-줄이는-팁">에러를 더 줄이는 팁</h1>

<ol>
  <li>
    <p><strong>런타임 정합성</strong></p>

    <ul>
      <li>
        <p>언피클 시 <code class="language-plaintext highlighter-rouge">ModuleNotFoundError</code>, <code class="language-plaintext highlighter-rouge">AttributeError</code>가 나면, 현재 환경에서 필요한 모듈/클래스가 <strong>그대로 import 가능</strong> 한지 확인.</p>
      </li>
      <li>
        <p>패키지/모듈 이름 변경, 클래스 이동이 있었다면 임시 호환 레이어(구이름 alias) 추가가 현실적.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>메모리/성능</strong></p>

    <ul>
      <li>
        <p>매우 큰 배열/프레임은 <code class="language-plaintext highlighter-rouge">--no-indent</code>로 용량 줄이기.</p>
      </li>
      <li>
        <p>정말 큰 수치 데이터는 JSON 대신 <strong>사이드카 포맷</strong>(예: <code class="language-plaintext highlighter-rouge">.npy</code>/<code class="language-plaintext highlighter-rouge">.parquet</code>) 고려 후 JSON에는 메타/경로만 담는 전략도 가능.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>안전/정합성 검증</strong></p>

    <ul>
      <li>생성된 JSON을 한 번 <code class="language-plaintext highlighter-rouge">json.loads</code>로 역파싱하면 문법 실수를 조기에 발견.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="요약-답변">요약 답변</h1>

<ol>
  <li>
    <p><strong>Trust로 가자</strong> → <code class="language-plaintext highlighter-rouge">pickle.load</code> 후 <code class="language-plaintext highlighter-rouge">jsonpickle.encode</code> 가 가장 간단/범용.</p>
  </li>
  <li>
    <p><strong>파이썬 버전</strong> 은 “같거나 더 최신”을 쓰면 대부분 안전. (특히 Py ≥3.8이면 프로토콜 5 대응 OK.) 모듈/클래스 경로가 동일하게 import 가능해야 함.</p>
  </li>
  <li>
    <p><strong>jsonpickle 사용</strong> 이 가장 손쉬움. 위 스크립트로 바로 가능하고, 필요 시 <code class="language-plaintext highlighter-rouge">--pure</code>(메타 제거), <code class="language-plaintext highlighter-rouge">--strict</code>(NaN 금지), <code class="language-plaintext highlighter-rouge">--no-indent</code>(대용량) 등 옵션으로 상황 맞춤화하면 돼.</p>
  </li>
</ol>

<p>원하면 <code class="language-plaintext highlighter-rouge">py/object</code> 메타 포맷 대신, 아예 <code class="language-plaintext highlighter-rouge">$type</code> 같은 커스텀 스킴으로 바꾼 미니 직렬화기도 만들어줄 수 있어.</p>

<p class="chat--user">

본문에 그냥 써주고, 커스텀 클래스 import 는 어떤 식으로 해야해?

</p>

<p>좋아—<strong>trust 모드 + jsonpickle</strong> 로 “피클 → JSON”을 <strong>간단/튼튼</strong> 하게 처리하는 스크립트를 본문에 바로 넣어둘게.<br />
그리고 <strong>커스텀 클래스 import</strong> 는 어떻게 해야 언피클이 잘 되는지, 가장 실전적인 방법들을 아래에 정리했어.</p>

<hr />

<h1 id="step-by-step-1">Step by Step</h1>

<ol>
  <li>
    <p><strong>전제</strong> : 전부 네가 만든 피클 → <code class="language-plaintext highlighter-rouge">pickle.load</code>(trust)로 로드해도 됨.</p>
  </li>
  <li>
    <p><strong>버전</strong> : 피클을 만든 파이썬 <strong>동일 또는 더 최신 버전</strong> 에서 로드(특히 모듈 경로가 동일하게 import 가능해야 함).</p>
  </li>
  <li>
    <p><strong>핵심</strong> : 로드한 객체를 <code class="language-plaintext highlighter-rouge">jsonpickle.encode(...)</code>로 JSON 변환.</p>
  </li>
  <li>
    <p><strong>대용량/호환성 옵션</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">--pure</code> → 타입 메타 제거(아주 깔끔한 JSON), 대신 복원 불가.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">--no-refs</code> → 참조/사이클 추적 비활성화(간단하지만 공유참조 정보 사라짐).</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">--strict</code> → NaN/Infinity 금지(정-표준 JSON).</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">--no-indent</code> → 용량 최소화.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>커스텀 클래스 import</strong> 는 “현재 프로세스에서 해당 모듈을 <strong>정확히 import 가능</strong> ”해야 함. 아래 “Import 요령” 참고.</p>
  </li>
</ol>

<hr />

<h1 id="신뢰-모드-전용-스크립트-jsonpickle-사용">신뢰 모드 전용 스크립트 (jsonpickle 사용)</h1>

<p>아래 코드를 <code class="language-plaintext highlighter-rouge">pickle_to_json_trusted.py</code>로 저장해서 바로 써.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
# pickle_to_json_trusted.py
# Trust-mode: loads your own pickle files, then encodes to JSON with jsonpickle.
</span>
<span class="kn">import</span> <span class="n">argparse</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">pickle</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">traceback</span><span class="p">,</span> <span class="n">importlib</span>
<span class="kn">import</span> <span class="n">pickletools</span>

<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">jsonpickle</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ERROR: jsonpickle is required. Install with: pip install jsonpickle</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
    <span class="k">raise</span>

<span class="k">def</span> <span class="nf">register_optional_exts</span><span class="p">():</span>
    <span class="c1"># Optional handlers for numpy/pandas if available
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="kn">from</span> <span class="n">jsonpickle.ext</span> <span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">jsonpickle_numpy</span>
        <span class="n">jsonpickle_numpy</span><span class="p">.</span><span class="nf">register_handlers</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="kn">from</span> <span class="n">jsonpickle.ext</span> <span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">jsonpickle_pandas</span>
        <span class="n">jsonpickle_pandas</span><span class="p">.</span><span class="nf">register_handlers</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="k">def</span> <span class="nf">peek_protocol</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">op</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">pos</span> <span class="ow">in</span> <span class="n">pickletools</span><span class="p">.</span><span class="nf">genops</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">op</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">PROTO</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">arg</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">scan_globals</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">):</span>
    <span class="n">refs</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">op</span><span class="p">,</span> <span class="n">arg</span><span class="p">,</span> <span class="n">pos</span> <span class="ow">in</span> <span class="n">pickletools</span><span class="p">.</span><span class="nf">genops</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">op</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">GLOBAL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STACK_GLOBAL</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">arg</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">):</span>
                    <span class="n">mod</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="n">arg</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">parts</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">arg</span><span class="p">).</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
                    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
                        <span class="n">mod</span><span class="p">,</span> <span class="n">name</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">continue</span>
                <span class="n">refs</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">mod</span><span class="si">}</span><span class="s">.</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>
    <span class="k">return</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">refs</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Trust-mode: Convert a Python pickle to JSON using jsonpickle.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Input .pkl file path</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Output .json file path</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># JSON shape options
</span>    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--pure</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Emit plain JSON (unpicklable=False) without py/object metadata.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--no-refs</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Do not track object references/cycles (make_refs=False).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--max-depth</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Limit traversal depth (None = unlimited).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--indent</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Pretty-print indent (use 0 or --no-indent for compact).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--no-indent</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Compact JSON (indent=None).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--ensure-ascii</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Escape non-ASCII characters.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--strict</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Disallow NaN/Infinity (allow_nan=False).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--sort-keys</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Sort JSON object keys.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--info</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Print pickle protocol &amp; referenced globals before converting.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--py2-latin1</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">If the pickle came from Python 2, try encoding=</span><span class="sh">'</span><span class="s">latin1</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Import help (for custom classes)
</span>    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--sys-path</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">append</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="p">[],</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Prepend a path to sys.path (repeatable).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--preload</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">append</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="p">[],</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Import module(s) before unpickling, e.g. mypkg.models (repeatable).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--alias</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">append</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="p">[],</span>
                    <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Module alias mapping OLD=NEW (repeatable).</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">args</span> <span class="o">=</span> <span class="n">ap</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># sys.path adjustments for project importability
</span>    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">args</span><span class="p">.</span><span class="n">sys_path</span><span class="p">:</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>

    <span class="c1"># module aliasing (module path changed)
</span>    <span class="k">for</span> <span class="n">pair</span> <span class="ow">in</span> <span class="n">args</span><span class="p">.</span><span class="n">alias</span><span class="p">:</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pair</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">WARNING: --alias expects OLD=NEW, got </span><span class="si">{</span><span class="n">pair</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
            <span class="k">continue</span>
        <span class="n">old</span><span class="p">,</span> <span class="n">new</span> <span class="o">=</span> <span class="n">pair</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">new_mod</span> <span class="o">=</span> <span class="n">importlib</span><span class="p">.</span><span class="nf">import_module</span><span class="p">(</span><span class="n">new</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="n">old</span><span class="p">]</span> <span class="o">=</span> <span class="n">new_mod</span>

    <span class="c1"># preload modules so that pickle can resolve classes
</span>    <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">args</span><span class="p">.</span><span class="n">preload</span><span class="p">:</span>
        <span class="n">importlib</span><span class="p">.</span><span class="nf">import_module</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>

    <span class="c1"># read pickle bytes
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nb">input</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">pkl_bytes</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">ERROR: file not found: </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="nb">input</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">info</span><span class="p">:</span>
        <span class="n">proto</span> <span class="o">=</span> <span class="nf">peek_protocol</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">)</span>
        <span class="n">globs</span> <span class="o">=</span> <span class="nf">scan_globals</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[info] protocol: </span><span class="si">{</span><span class="n">proto</span> <span class="k">if</span> <span class="n">proto</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="sh">'</span><span class="s">unknown</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">globs</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[info] referenced globals (</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">globs</span><span class="p">)</span><span class="si">}</span><span class="s">):</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">globs</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  - </span><span class="si">{</span><span class="n">g</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">[info] referenced globals: (none found)</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># jsonpickle backend setup
</span>    <span class="nf">register_optional_exts</span><span class="p">()</span>
    <span class="n">jsonpickle</span><span class="p">.</span><span class="nf">set_preferred_backend</span><span class="p">(</span><span class="sh">'</span><span class="s">json</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">indent</span> <span class="o">=</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">no_indent</span> <span class="k">else</span> <span class="n">args</span><span class="p">.</span><span class="n">indent</span>
    <span class="c1"># encoder opts
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">jsonpickle</span><span class="p">.</span><span class="nf">set_encoder_options</span><span class="p">(</span>
            <span class="sh">'</span><span class="s">json</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">ensure_ascii</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">ensure_ascii</span><span class="p">,</span>
            <span class="n">allow_nan</span><span class="o">=</span><span class="ow">not</span> <span class="n">args</span><span class="p">.</span><span class="n">strict</span><span class="p">,</span>
            <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">,</span>
            <span class="n">sort_keys</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">sort_keys</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="k">except</span> <span class="nb">TypeError</span><span class="p">:</span>
        <span class="n">jsonpickle</span><span class="p">.</span><span class="nf">set_encoder_options</span><span class="p">(</span><span class="sh">'</span><span class="s">json</span><span class="sh">'</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">ensure_ascii</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">)</span>

    <span class="c1"># unpickle (TRUST)
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="kn">import</span> <span class="n">io</span>
        <span class="n">bio</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="nc">BytesIO</span><span class="p">(</span><span class="n">pkl_bytes</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">py2_latin1</span><span class="p">:</span>
            <span class="n">obj</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">bio</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">latin1</span><span class="sh">'</span><span class="p">,</span> <span class="n">fix_imports</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">obj</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">bio</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ModuleNotFoundError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ERROR: Required module isn</span><span class="sh">'</span><span class="s">t importable.</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Detail: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Tip: Use --sys-path/--preload/--alias or set PYTHONPATH.</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">AttributeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ERROR: Class/attribute moved or renamed.</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Detail: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ERROR: Unpickling failed.</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">traceback</span><span class="p">.</span><span class="nf">print_exc</span><span class="p">()</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>

    <span class="c1"># encode with jsonpickle
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">json_str</span> <span class="o">=</span> <span class="n">jsonpickle</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span>
            <span class="n">obj</span><span class="p">,</span>
            <span class="n">unpicklable</span><span class="o">=</span><span class="ow">not</span> <span class="n">args</span><span class="p">.</span><span class="n">pure</span><span class="p">,</span>
            <span class="n">make_refs</span><span class="o">=</span><span class="ow">not</span> <span class="n">args</span><span class="p">.</span><span class="n">no_refs</span><span class="p">,</span>
            <span class="n">max_depth</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">max_depth</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ERROR: jsonpickle encoding failed.</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">traceback</span><span class="p">.</span><span class="nf">print_exc</span><span class="p">()</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

    <span class="c1"># write
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">output</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">json_str</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">ERROR: writing output failed: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="p">.</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Wrote </span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">output</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="실행-예">실행 예</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># (가장 기본) 타입/참조 메타 유지: 복원 친화적</span>
python pickle_to_json_trusted.py data.pkl data.json

<span class="c"># 순수 JSON (메타 제거)</span>
python pickle_to_json_trusted.py data.pkl data.json <span class="nt">--pure</span>

<span class="c"># 사이클/참조 추적 끄기 + 컴팩트 + Strict JSON</span>
python pickle_to_json_trusted.py data.pkl data.json <span class="nt">--no-refs</span> <span class="nt">--no-indent</span> <span class="nt">--strict</span>

<span class="c"># 피클 정보(프로토콜/글로벌): 디버깅용</span>
python pickle_to_json_trusted.py data.pkl data.json <span class="nt">--info</span>
</code></pre></div></div>

<hr />

<h1 id="커스텀-클래스-import--이렇게-하면-된다-실전-레시피">커스텀 클래스 import — 이렇게 하면 된다 (실전 레시피)</h1>

<p>언피클이 커스텀 클래스를 복원하려면, <strong>피클에 기록된 “모듈.클래스”가 현재 런타임에서 import 가능</strong> 해야 해.</p>

<h2 id="1-가장-깔끔-프로젝트를-패키지로-설치">1) 가장 깔끔: 프로젝트를 패키지로 설치</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 프로젝트 루트에서</span>
pip <span class="nb">install</span> <span class="nt">-e</span> <span class="nb">.</span>
<span class="c"># 또는 PYTHONPATH로 임시 등록</span>
<span class="nv">PYTHONPATH</span><span class="o">=</span>/path/to/project python pickle_to_json_trusted.py data.pkl out.json
</code></pre></div></div>

<ul>
  <li>이러면 <code class="language-plaintext highlighter-rouge">mypkg.models.User</code> 같은 경로를 파이썬이 자연스럽게 찾음.</li>
</ul>

<h2 id="2-경로만-추가해서-import-가능하게-스크립트-옵션">2) 경로만 추가해서 import 가능하게 (스크립트 옵션)</h2>

<p>프로젝트 루트를 <code class="language-plaintext highlighter-rouge">sys.path</code> 앞에 추가:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python pickle_to_json_trusted.py data.pkl out.json <span class="se">\</span>
  <span class="nt">--sys-path</span> /absolute/path/to/project_root <span class="se">\</span>
  <span class="nt">--preload</span> mypkg.models
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">--preload</code>는 해당 모듈을 미리 import해서 클래스 등록을 확실히 해줘.</li>
</ul>

<h2 id="3-모듈-경로가-바뀐-경우리팩터링--모듈-alias">3) 모듈 경로가 바뀐 경우(리팩터링) → <strong>모듈 alias</strong></h2>

<p>예: 예전에는 <code class="language-plaintext highlighter-rouge">oldpkg.models</code>였는데 지금은 <code class="language-plaintext highlighter-rouge">newpkg.models</code>로 이동했다면:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python pickle_to_json_trusted.py data.pkl out.json <span class="se">\</span>
  <span class="nt">--sys-path</span> /path/to/project <span class="se">\</span>
  <span class="nt">--alias</span> oldpkg.models<span class="o">=</span>newpkg.models <span class="se">\</span>
  <span class="nt">--preload</span> newpkg.models
</code></pre></div></div>

<ul>
  <li>이러면 <code class="language-plaintext highlighter-rouge">pickle.load</code>가 <code class="language-plaintext highlighter-rouge">oldpkg.models</code>를 찾으려 할 때, 내부적으로 <code class="language-plaintext highlighter-rouge">newpkg.models</code>를 대신 사용.</li>
</ul>

<h2 id="4-클래스가-다른-모듈로-이동했다면--런타임-shim간단-예">4) 클래스가 다른 모듈로 이동했다면 → <strong>런타임 shim(간단 예)</strong></h2>

<p>모듈 alias만으로 부족할 때(클래스 이름도 바뀌었거나 세부 구조가 바뀐 경우), 언피클 전에 <strong>임시 shim 모듈</strong> 을 만들어 매핑해 줄 수 있어:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 예: OldClass가 oldpkg.models → newpkg.models.NewClass 로 이동/개명된 경우
</span><span class="kn">import</span> <span class="n">types</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">newpkg.models</span> <span class="k">as</span> <span class="n">newmod</span>

<span class="n">shim</span> <span class="o">=</span> <span class="n">types</span><span class="p">.</span><span class="nc">ModuleType</span><span class="p">(</span><span class="sh">"</span><span class="s">oldpkg.models</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># 예전 이름을 새 클래스에 매핑
</span><span class="n">shim</span><span class="p">.</span><span class="n">OldClass</span> <span class="o">=</span> <span class="n">newmod</span><span class="p">.</span><span class="n">NewClass</span>
<span class="c1"># 언피클이 찾아쓰도록 sys.modules 등록
</span><span class="n">sys</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="sh">"</span><span class="s">oldpkg.models</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">shim</span>

<span class="c1"># 이제 pickle.load를 호출
</span></code></pre></div></div>

<blockquote>
  <p>위 shim 코드는 <strong>스크립트 최상단(언피클 직전)</strong>에 넣으면 되고, 경우에 따라 여러 클래스를 넣어 매핑하면 된다.</p>
</blockquote>

<h2 id="5-python-2--3-피클일-때">5) Python 2 → 3 피클일 때</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python pickle_to_json_trusted.py data.pkl out.json <span class="nt">--py2-latin1</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">encoding='latin1'</code>, <code class="language-plaintext highlighter-rouge">fix_imports=True</code>로 과거 피클 호환을 시도.</li>
</ul>

<hr />

<h1 id="작게-요약">작게 요약</h1>

<ul>
  <li>
    <p><strong>Trust OK</strong> → <code class="language-plaintext highlighter-rouge">pickle.load</code> + <code class="language-plaintext highlighter-rouge">jsonpickle.encode</code>가 가장 간단.</p>
  </li>
  <li>
    <p><strong>버전</strong> 은 “같거나 최신” 권장 + 모듈/클래스 경로가 현재 환경에서 그대로 import 가능해야 함.</p>
  </li>
  <li>
    <p><strong>커스텀 클래스 import</strong> 는</p>

    <ol>
      <li>
        <p>패키지로 설치(또는 PYTHONPATH),</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">--sys-path</code> / <code class="language-plaintext highlighter-rouge">--preload</code>,</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">--alias 올드=뉴</code>(모듈 경로 변경),</p>
      </li>
      <li>
        <p>필요 시 <strong>shim 모듈</strong> 로 클래스 레벨 매핑.</p>
      </li>
    </ol>
  </li>
</ul>

<p>원하면 shim을 옵션화해서 스크립트에 바로 넣는 버전(예: <code class="language-plaintext highlighter-rouge">--shim oldpkg.models:OldClass=newpkg.models:NewClass</code>)도 만들어줄게.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">md 한영 병기 표기 렌더링</title><link href="https://hvppyarchive.github.io/markdown/markdown-multilanguage/" rel="alternate" type="text/html" title="md 한영 병기 표기 렌더링" /><published>2025-09-13T11:23:46+09:00</published><updated>2025-09-13T11:23:46+09:00</updated><id>https://hvppyarchive.github.io/markdown/markdown-multilanguage</id><content type="html" xml:base="https://hvppyarchive.github.io/markdown/markdown-multilanguage/"><![CDATA[<p class="chat--user">

mkdocs-material에서 md 파일 글에 대해 한/영 병기를 하고 싶어. 안녕하세요. Hello. Everyone. 이런 식으로 말이야. 이 때 영어는 좀 연하고 작게 표기하고 싶은데, 이걸 md에 어떤 마크를 추가해서 자동으로 그렇게 렌더링 해줬으면 좋겠어. 안녕하세요. <en>Hello. Everyone</en> 이런 식으로 말이야. 이건 내가 생각한 예시니까 더 좋은 방안이 있으면 추천해도 좋아.

</p>

<p>좋아요! “한국어 원문 + 연하고 작은 영어 번역”은 <strong>마크다운 속성 리스트(attr_list)</strong> 를 쓰는 방법이 가장 간단하고, 원하시면 <code class="language-plaintext highlighter-rouge">&lt;en&gt;</code> 같은 커스텀 태그로도 가능합니다. 두 가지를 모두 보여드릴게요.</p>

<hr />

<h1 id="방법-a-가장-간단--문단에-클래스-붙이기-attr_list">방법 A: 가장 간단 — 문단에 클래스 붙이기 (attr_list)</h1>

<h2 id="1-mkdocsyml-설정">1) <code class="language-plaintext highlighter-rouge">mkdocs.yml</code> 설정</h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">material</span>

<span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">attr_list</span>          <span class="c1"># ← 이 줄 추가</span>

<span class="na">extra_css</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">stylesheets/translation.css</span>   <span class="c1"># ← 커스텀 CSS 등록</span>
</code></pre></div></div>

<h2 id="2-docsstylesheetstranslationcss-작성">2) <code class="language-plaintext highlighter-rouge">docs/stylesheets/translation.css</code> 작성</h2>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 영어 번역 공통 스타일 */</span>
<span class="nc">.md-typeset</span> <span class="nc">.en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>   <span class="c">/* 조금 작게 */</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>       <span class="c">/* 연하게 */</span>
<span class="p">}</span>

<span class="c">/* 한국어 문단 바로 다음에 오는 영어 번역은 간격을 조금만 */</span>
<span class="nc">.md-typeset</span> <span class="nt">p</span> <span class="o">+</span> <span class="nt">p</span><span class="nc">.en</span> <span class="p">{</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-마크다운에서-사용">3) 마크다운에서 사용</h2>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.
Hello. Everyone. {.en}
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Hello… {.en}</code> 처럼 <strong>문장 끝에<code class="language-plaintext highlighter-rouge">{.en}</code></strong> 을 붙이면, 렌더링 시 <code class="language-plaintext highlighter-rouge">&lt;p class="en"&gt;…&lt;/p&gt;</code>가 되어 위 CSS가 적용됩니다.</p>
  </li>
  <li>
    <p>문장 중간 <strong>인라인</strong> 으로 쓰고 싶으면:</p>
    <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요. <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;</span>
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h1 id="방법-b-커스텀-태그-en-그대로-쓰기">방법 B: 커스텀 태그 <code class="language-plaintext highlighter-rouge">&lt;en&gt;</code> 그대로 쓰기</h1>

<p>원하신 표기대로 써도 됩니다. Python-Markdown은 기본적으로 <strong>인라인 HTML 통과</strong> 를 허용하므로 아래처럼 작성하고 CSS에서 <code class="language-plaintext highlighter-rouge">&lt;en&gt;</code>을 스타일링하세요.</p>

<h2 id="1-마크다운">1) 마크다운</h2>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.
<span class="nt">&lt;en&gt;</span>Hello. Everyone.<span class="nt">&lt;/en&gt;</span>
</code></pre></div></div>

<h2 id="2-translationcss">2) <code class="language-plaintext highlighter-rouge">translation.css</code></h2>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 알 수 없는 태그도 CSS에서 그대로 선택 가능 */</span>
<span class="nc">.md-typeset</span> <span class="nt">en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>           <span class="c">/* 줄바꿈 형태라면 block이 보기 좋음 */</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>참고: HTML 표준상 “커스텀 요소”는 보통 이름에 하이픈이 들어갑니다(<code class="language-plaintext highlighter-rouge">&lt;en-text&gt;</code> 등). 굳이 표준을 따르려면 <code class="language-plaintext highlighter-rouge">&lt;en-text&gt;</code>로 쓰고 CSS도 <code class="language-plaintext highlighter-rouge">en-text</code>로 지정해도 됩니다. 다만 실제 동작은 <code class="language-plaintext highlighter-rouge">&lt;en&gt;</code>도 문제없습니다.</p>
</blockquote>

<hr />

<h1 id="선택-접근성까지-고려한-버전">(선택) 접근성까지 고려한 버전</h1>

<p>번역 텍스트에 <code class="language-plaintext highlighter-rouge">lang="en"</code>을 더해주면 스크린리더가 언어 전환을 인지합니다.</p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello. Everyone. { .en lang=en }
</code></pre></div></div>

<p>CSS는 그대로 <code class="language-plaintext highlighter-rouge">.en</code>에 걸려서 시각 스타일은 유지되고, 보조공학 친화성만 올라갑니다.</p>

<hr />

<h1 id="어떤-방법을-쓰면-좋을까">어떤 방법을 쓰면 좋을까?</h1>

<ul>
  <li>
    <p><strong>가장 권장:</strong> 방법 A (attr_list)</p>

    <ul>
      <li>마크다운 문법을 유지하면서도 깔끔하게 클래스만 부여 → 관리 쉬움</li>
    </ul>
  </li>
  <li>
    <p><strong>원하신 표기를 그대로 쓰고 싶다면:</strong> 방법 B (<code class="language-plaintext highlighter-rouge">&lt;en&gt;…&lt;/en&gt;</code>)</p>

    <ul>
      <li>취향/가독성 면에서 선호하면 사용, 다만 HTML 태그를 직접 쓰는 점만 유의</li>
    </ul>
  </li>
</ul>

<p>둘 중 하나만 채택하셔도 되고, <strong>문단은<code class="language-plaintext highlighter-rouge">{.en}</code></strong>, <strong>인라인은 <code class="language-plaintext highlighter-rouge">&lt;span class="en"&gt;…&lt;/span&gt;</code></strong>처럼 혼용해도 깔끔하게 관리됩니다.</p>

<p>필요하시면 목록/표/인용문 등에서의 미세 간격 조정용 CSS도 이어서 만들어 드릴게요.</p>

<p class="chat--user">

안 되는데 띄어쓰기나 줄바꿈 같은걸 잘 해야하나?

</p>

<p>가능해! 주로 <strong>띄어쓰기/줄바꿈</strong> 과 <strong>설정 로딩</strong> 에서 자주 미끄러져요. 아래 순서대로 한 번만 점검해보죠. (복붙용 최소 예제도 맨 아래에 넣었어요.)</p>

<hr />

<h2 id="1-설정이-진짜-켜졌는지-확인">1) 설정이 진짜 켜졌는지 확인</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">mkdocs.yml</code>에 <strong>정확히</strong> 다음이 있어야 해요.
    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">material</span>
    
<span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">attr_list</span>        <span class="c1"># ← 이게 있어야 {.en}이 먹습니다.</span>
    
<span class="na">extra_css</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">stylesheets/translation.css</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">docs/stylesheets/translation.css</code> 파일이 실제로 존재하는지 확인.</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">mkdocs serve</code>를 돌리는 중에 <code class="language-plaintext highlighter-rouge">extra_css</code>를 추가했다면, <strong>서버를 한 번 재시작</strong> 해 주세요. (가끔 새 CSS를 못 읽고 있습니다.)</li>
</ul>

<hr />

<h2 id="2-줄바꿈-규칙-이해-여기서-많이-틀어집니다">2) 줄바꿈 규칙 이해 (여기서 많이 틀어집니다)</h2>

<p>마크다운에서:</p>

<ul>
  <li>
    <p><strong>빈 줄(공백 줄)</strong> = 새 문단(<code class="language-plaintext highlighter-rouge">&lt;p&gt;…&lt;/p&gt;</code>)</p>
  </li>
  <li>
    <p><strong>그냥 줄바꿈 하나</strong> = 같은 문단 안에서 <strong>공백 하나</strong>(줄바꿈이 사라짐)</p>
  </li>
  <li>
    <p><strong>줄 끝에 공백 두 칸 + 엔터</strong> = <strong>강제 줄바꿈(<code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>)</strong></p>
  </li>
</ul>

<p>원하는 형태가 “한국어 한 줄 + (조금 연하고 작은) 영어 한 줄”이라면,</p>

<ul>
  <li>
    <p><strong>문단을 분리</strong> 하거나(<strong>빈 줄 1개</strong>),</p>
  </li>
  <li>
    <p><strong>강제 줄바꿈</strong> 을 쓰거나(한국어 줄 끝 <strong>두 칸</strong> + 엔터)<br />
둘 중 하나를 반드시 해 주세요.</p>
  </li>
</ul>

<hr />

<h2 id="3-실제-작성-예제-3가지">3) 실제 작성 예제 3가지</h2>

<h3 id="a-가장-간단-문단-분리--en">A. 가장 간단: 문단 분리 + <code class="language-plaintext highlighter-rouge">{.en}</code></h3>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.

Hello. Everyone. {.en}
</code></pre></div></div>

<blockquote>
  <p>포인트: <strong>한국어와 영어 사이에 빈 줄</strong> 이 있어야 영어가 <strong>별도 문단</strong> 이 되고, <code class="language-plaintext highlighter-rouge">{.en}</code>이 그 문단에 적용됩니다.</p>
</blockquote>

<h3 id="b-같은-문단-안에서-줄만-바꾸고-싶을-때-간격-더-촘촘">B. 같은 문단 안에서 줄만 바꾸고 싶을 때 (간격 더 촘촘)</h3>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.··
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>한국어 줄 끝의 <code class="language-plaintext highlighter-rouge">··</code>(공백 두 칸)가 <strong>강제 줄바꿈</strong> 입니다.<br />
 <code class="language-plaintext highlighter-rouge">&lt;span&gt;</code>은 HTML이므로 줄바꿈을 위해 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>를 써도 됩니다:</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>md

안녕하세요.&lt;br&gt;
&lt;span class="en"&gt;Hello. Everyone.&lt;/span&gt;

</code></pre></div>  </div>
</blockquote>

<h3 id="c-커스텀-태그-en-그대로">C. 커스텀 태그 <code class="language-plaintext highlighter-rouge">&lt;en&gt;</code> 그대로</h3>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.
<span class="nt">&lt;en&gt;</span>Hello. Everyone.<span class="nt">&lt;/en&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>인라인 HTML은 기본 허용이라 별도 확장 필요 없습니다. (블록 HTML로 감싸 복잡하게 쓰는 경우에만 <code class="language-plaintext highlighter-rouge">md_in_html</code>이 필요)</p>
</blockquote>

<hr />

<h2 id="4-css-material-테마-기준-복붙">4) CSS (Material 테마 기준, 복붙)</h2>

<p><code class="language-plaintext highlighter-rouge">docs/stylesheets/translation.css</code></p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 영어 번역 공통 스타일 */</span>
<span class="nc">.md-typeset</span> <span class="nc">.en</span><span class="o">,</span>
<span class="nc">.md-typeset</span> <span class="nt">en</span><span class="o">,</span>
<span class="nc">.md-typeset</span> <span class="nt">span</span><span class="nc">.en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>   <span class="c">/* 조금 작게 */</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>       <span class="c">/* 연하게 */</span>
<span class="p">}</span>

<span class="c">/* 문단으로 분리한 경우: 한국어 문단 바로 뒤 영어 문단의 위 여백 줄이기 */</span>
<span class="nc">.md-typeset</span> <span class="nt">p</span> <span class="o">+</span> <span class="nt">p</span><span class="nc">.en</span> <span class="p">{</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 줄바꿈(브레이크) 뒤에 오는 인라인 번역을 '한 줄'처럼 보이게 */</span>
<span class="nc">.md-typeset</span> <span class="nt">span</span><span class="nc">.en</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">inline-block</span><span class="p">;</span>   <span class="c">/* &lt;br&gt; 다음에 내려오면 한 줄로 떨어져 보임 */</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 커스텀 태그 &lt;en&gt;을 블록처럼 쓰고 싶다면 */</span>
<span class="nc">.md-typeset</span> <span class="nt">en</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="5-체크리스트문제-계속되면-여기서-잡힙니다">5) 체크리스트(문제 계속되면 여기서 잡힙니다)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mkdocs.yml</code>에 <code class="language-plaintext highlighter-rouge">attr_list</code>가 <strong>정확히</strong> 들어가 있다. (오탈자, 들여쓰기 주의)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">extra_css</code> 경로가 실제 파일 위치와 <strong>일치</strong> 한다. (<code class="language-plaintext highlighter-rouge">docs/stylesheets/translation.css</code>)</p>
  </li>
  <li>
    <p><strong>서버 재시작</strong> 후 새 CSS가 로드된다.</p>
  </li>
  <li>
    <p>마크다운에서 영어 줄을 <strong>별도 문단</strong> 으로 만들려면 <strong>빈 줄 1개</strong> ,<br />
같은 문단 안 <strong>줄바꿈</strong> 이면 한국어 줄 끝에 <strong>공백 2칸</strong> 또는 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>.</p>
  </li>
  <li>
    <p>개발자도구에서 <code class="language-plaintext highlighter-rouge">.en</code> 규칙이 <strong>실제로 적용</strong> 되는지 확인한다. (선택자 앞에 <code class="language-plaintext highlighter-rouge">.md-typeset</code>를 붙이면 우선순위 문제를 대부분 이깁니다.)</p>
  </li>
</ol>

<hr />

<h2 id="6-복붙용-완전-최소-예제">6) 복붙용 “완전 최소 예제”</h2>

<p><strong>mkdocs.yml</strong></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">site_name</span><span class="pi">:</span> <span class="s">demo</span>
<span class="na">theme</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">material</span>
<span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">attr_list</span>
<span class="na">extra_css</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">stylesheets/translation.css</span>
</code></pre></div></div>

<p><strong>docs/stylesheets/translation.css</strong> → 위 CSS 그대로</p>

<p><strong>docs/index.md</strong></p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># 데모</span>

안녕하세요.

Hello. Everyone. {.en}
<span class="p">
---
</span>
안녕하세요.··
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;</span>
<span class="p">
---
</span>
안녕하세요.
<span class="nt">&lt;en&gt;</span>Hello. Everyone.<span class="nt">&lt;/en&gt;</span>
</code></pre></div></div>

<p>이대로 하면 3가지 방식 모두 “연하고 작게” 나옵니다.<br />
그래도 안 되면, 사용하신 <code class="language-plaintext highlighter-rouge">mkdocs.yml</code>과 한두 줄의 <code class="language-plaintext highlighter-rouge">md</code> 예제를 붙여주시면 바로 원인 pinpoint 해드릴게요!</p>

<p class="chat--user">

다음 줄에다가 {: .en}을 쓰니까 되네 안녕하세요. (공백 두개) Hello. Everyone. {: .en} 이런 식으로 말이야. 근데 문제는 한글까지 같이 연하게 변해버려.

</p>

<p>맞아요—그 증상은 <strong><code class="language-plaintext highlighter-rouge">{: .en}</code>이 “이전 블록 전체”에 붙어서</strong> 그래요.<br />
지금 쓰신 형태는 <code class="language-plaintext highlighter-rouge">안녕하세요.</code> 뒤의 <strong>공백 두 칸</strong> 때문에 한국어+영어가 <strong>같은 문단(<code class="language-plaintext highlighter-rouge">&lt;p&gt;…&lt;/p&gt;</code>)</strong> 안에 들어갑니다. 그러면 <code class="language-plaintext highlighter-rouge">{: .en}</code>이 그 <strong>문단 전체</strong> 에 적용되어 한글까지 연해져요.</p>

<p>아래 셋 중 하나로 고치면 딱 해결됩니다.</p>

<hr />

<h3 id="-방법-1-문단을-분리-하고-영어-줄에만-클래스-붙이기-가장-깔끔">✅ 방법 1: <strong>문단을 분리</strong> 하고 영어 줄에만 클래스 붙이기 (가장 깔끔)</h3>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.

Hello. Everyone. {.en}
</code></pre></div></div>

<ul>
  <li><strong>포인트:</strong> 한국어와 영어 사이에 <strong>빈 줄 1개</strong> → 서로 다른 문단이 되면서 <code class="language-plaintext highlighter-rouge">.en</code>은 영어 문단에만 적용.</li>
</ul>

<hr />

<h3 id="-방법-2-앞줄에-속성-배치-해서-다음-블록에만-적용">✅ 방법 2: <strong>앞줄에 속성 배치</strong> 해서 “다음 블록”에만 적용</h3>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.

{:.en lang=en}
Hello. Everyone.
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">{: .en}</code>을 <strong>영어 문단 앞줄</strong> 에 두면, 바로 <strong>아래 블록(영어 문단)</strong> 에만 적용됩니다.</p>
  </li>
  <li>
    <p>접근성까지 챙기려면 <code class="language-plaintext highlighter-rouge">lang=en</code>도 같이 두세요.</p>
  </li>
</ul>

<hr />

<h3 id="-방법-3-같은-문단을-유지-하려면-br--인라인-span">✅ 방법 3: <strong>같은 문단을 유지</strong> 하려면 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code> + 인라인 span</h3>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div>

<ul>
  <li>한국어 줄 끝 <strong>공백 두 칸</strong> 대신 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>로 줄바꿈하고, 영어만 <code class="language-plaintext highlighter-rouge">&lt;span class="en"&gt;…&lt;/span&gt;</code>로 감싸면 됩니다.</li>
</ul>

<hr />

<h3 id="왜-이런가요-핵심-정리">왜 이런가요? (핵심 정리)</h3>

<ul>
  <li>
    <p><strong>공백 두 칸 + 엔터</strong> = 같은 문단 안의 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">{: .en}</code> (단독 줄) = <strong>바로 앞 블록</strong> 에 붙음 → 같은 문단이면 <strong>한글+영어 모두</strong> 에 적용됨</p>
  </li>
  <li>
    <p>해결책은 <strong>블록을 나누거나</strong>(방법 1/2), <strong>인라인만 감싸기</strong>(방법 3)입니다.</p>
  </li>
</ul>

<p>필요하면, 지금 쓰시는 실제 한두 줄을 붙여 주시면 그 형태에 맞춰 가장 간단한 문법으로 딱 맞춰 드릴게요!</p>

<p class="chat--user">

아니 왜 자꾸 {.en}이라고 하는건데, 이거 동작하는거야?

</p>

<p>맞아요, 헷갈릴 만해요. 정리하면:</p>

<ol>
  <li><strong><code class="language-plaintext highlighter-rouge">{.en}</code> = <code class="language-plaintext highlighter-rouge">{:.en}</code></strong></li>
</ol>

<ul>
  <li>
    <p>둘 다 <strong>attr_list</strong> 확장 문법입니다. (콜론은 선택)</p>
  </li>
  <li>
    <p><strong>동작 조건:</strong> <code class="language-plaintext highlighter-rouge">mkdocs.yml</code>에 <code class="language-plaintext highlighter-rouge">markdown_extensions: - attr_list</code>가 있어야 합니다.</p>
  </li>
</ul>

<ol>
  <li><strong>붙는 위치 규칙(핵심)</strong></li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">{: .en}</code> 같은 <strong>속성 줄은 “바로 앞 블록”</strong>에 붙습니다.</p>
  </li>
  <li>
    <p>한글 줄 끝에 공백 두 개를 넣으면 <strong>한글+영어가 한 문단(같은 블록)</strong> 이라서, <code class="language-plaintext highlighter-rouge">{: .en}</code>이 둘 다에 적용돼요 → 그래서 한글까지 연해진 것.</p>
  </li>
</ul>

<ol>
  <li><strong>원하는 효과(영어만 연하게) 만드는 법 – 3가지 중 하나 선택</strong></li>
</ol>

<ul>
  <li>✅ <strong>문단 분리 + 영어에만 클래스</strong> (가장 간단)
    <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.
    
Hello. Everyone. {.en}
</code></pre></div>    </div>
  </li>
</ul>

<p>또는
    ```md
    안녕하세요.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello. Everyone.
{:.en}
```
</code></pre></div></div>

<blockquote>
  <p>빈 줄 하나로 영어를 <strong>별도 문단</strong> 으로 만들면 <code class="language-plaintext highlighter-rouge">.en</code>이 영어 문단에만 적용됩니다.</p>
</blockquote>

<ul>
  <li>✅ <strong>같은 문단을 유지해야 한다면</strong> → 줄바꿈은 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>로, 영어만 감싸기
    <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>✅ <strong>커스텀 태그 선호 시</strong>
    <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.
<span class="nt">&lt;en</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/en&gt;</span>
</code></pre></div>    </div>
  </li>
</ul>

<ol>
  <li><strong>CSS 예시(Material 테마 기준)</strong></li>
</ol>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 영어 번역을 작고 연하게 */</span>
<span class="nc">.md-typeset</span> <span class="nc">.en</span><span class="o">,</span>
<span class="nc">.md-typeset</span> <span class="nt">en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 한국어 문단 바로 다음 영어 문단 간격 다듬기 */</span>
<span class="nc">.md-typeset</span> <span class="nt">p</span> <span class="o">+</span> <span class="nt">p</span><span class="nc">.en</span> <span class="p">{</span> <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span> <span class="p">}</span>

<span class="c">/* &lt;en&gt;을 줄바꿈 형태로 쓰려면 */</span>
<span class="nc">.md-typeset</span> <span class="nt">en</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span> <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<ol>
  <li><strong>빠른 체크리스트</strong></li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mkdocs.yml</code>에 <code class="language-plaintext highlighter-rouge">- attr_list</code>가 있음?</p>
  </li>
  <li>
    <p>CSS가 <code class="language-plaintext highlighter-rouge">extra_css</code>로 로드됨?</p>
  </li>
  <li>
    <p>한글 줄 끝 <strong>공백 두 개</strong> 로 줄바꿈을 만들고 있지는 않음? (그럼 같은 문단이 됩니다)</p>
  </li>
  <li>
    <p>영어를 <strong>별도 문단</strong> 으로 만들었는지, 아니면 <code class="language-plaintext highlighter-rouge">&lt;span class="en"&gt;…&lt;/span&gt;</code>로 <strong>인라인만</strong> 감쌌는지</p>
  </li>
</ul>

<p>요약: <code class="language-plaintext highlighter-rouge">{.en}</code>/<strong><code class="language-plaintext highlighter-rouge">{:.en}</code>은 제대로 동작</strong>합니다. 다만 “속성은 <strong>바로 앞 블록 전체</strong> 에 붙는다”는 규칙 때문에, 영어만 스타일링하려면 <strong>영어를 별도 블록으로 분리</strong> 하거나 <strong>영어만 인라인으로 감싸야</strong> 합니다.</p>

<p class="chat--user">

아니 그냥 Hello. Everyone. {.en} 이렇게 최종 렌더링 되는데

</p>

<p>아하, 그럼 상황이 확실해요.<br />
<strong><code class="language-plaintext highlighter-rouge">Hello. Everyone. {.en}</code>가 그대로 글자로 보이는 건 MkDocs(=Python-Markdown)</strong>에서는 <strong>문단(paragraph) 끝에<code class="language-plaintext highlighter-rouge">{.en}</code>을 붙이는 문법이 동작하지 않기 때문</strong>입니다. 그건 주로 <strong>Kramdown(Jekyll)</strong> 쪽 문법이고, MkDocs에서는 <strong>단독 줄의 속성 블록</strong> 을 써야 해요.</p>

<p>아래처럼 고치면 됩니다—차근차근:</p>

<h2 id="1-결론부터-이렇게-쓰세요">1) 결론부터: 이렇게 쓰세요</h2>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.

{:.en lang=en}
Hello. Everyone.
</code></pre></div></div>

<ul>
  <li>
    <p>포인트 1: <strong>한국어와 영어 사이에 빈 줄 1개</strong> → 서로 <strong>다른 문단</strong> 이 됩니다.</p>
  </li>
  <li>
    <p>포인트 2: <code class="language-plaintext highlighter-rouge">{: .en}</code>은 <strong>“바로 아래 블록(영어 문단)”</strong> 에만 붙게 앞줄에 둡니다.</p>
  </li>
  <li>
    <p>포인트 3: 접근성용으로 <code class="language-plaintext highlighter-rouge">lang=en</code>도 같이 달아주면 좋아요.</p>
  </li>
</ul>

<h2 id="2-왜-hello-everyone-en가-안-먹나">2) 왜 <code class="language-plaintext highlighter-rouge">Hello. Everyone. {.en}</code>가 안 먹나?</h2>

<ul>
  <li>
    <p>MkDocs의 <strong>attr_list</strong> 는 “<strong>단독 줄</strong> 의 속성 블록”이나 “<strong>특정 요소 바로 뒤</strong>(예: 이미지, 링크, 헤더 등)”에서 주로 작동합니다.</p>
  </li>
  <li>
    <p><strong>평범한 문단 텍스트</strong> 뒤에 같은 줄로 <code class="language-plaintext highlighter-rouge">{.en}</code>을 붙이는 방식은 <strong>지원하지 않아서</strong> 그대로 렌더링돼요.</p>
  </li>
</ul>

<h2 id="3-공백-두-칸엔터-쓰면-왜-한글까지-흐려지나">3) 공백 두 칸(+엔터) 쓰면 왜 한글까지 흐려지나?</h2>

<ul>
  <li>
    <p>줄 끝 <strong>공백 두 칸</strong> 은 <strong>같은 문단 안 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code></strong>만 만들어요.</p>
  </li>
  <li>
    <p>그래서 “안녕하세요 + <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code> + Hello …”가 <strong>한 문단</strong> 이 되고,<br />
뒤줄의 <code class="language-plaintext highlighter-rouge">{: .en}</code>을 쓰면 <strong>그 한 문단 전체</strong> 에 클래스가 붙어 <strong>한글까지 연해집니다.</strong></p>
  </li>
  <li>
    <p>해결: 공백 두 칸을 <strong>지우고 빈 줄</strong> 로 <strong>문단 분리</strong> 하거나, 같은 문단을 유지하고 싶다면 <strong>영어만 인라인으로 감싸기</strong> 👇</p>
  </li>
</ul>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div>

<h2 id="4-css그대로-쓰셔도-됩니다">4) CSS(그대로 쓰셔도 됩니다)</h2>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 영어 번역: 조금 작고 연하게 */</span>
<span class="nc">.md-typeset</span> <span class="nc">.en</span><span class="o">,</span>
<span class="nc">.md-typeset</span> <span class="nt">en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* &lt;en&gt; 커스텀 태그를 블록처럼 쓸 때 */</span>
<span class="nc">.md-typeset</span> <span class="nt">en</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span>
<span class="p">}</span>

<span class="c">/* 문단 분리 케이스: 한글 문단 바로 뒤 영어 문단의 간격 */</span>
<span class="nc">.md-typeset</span> <span class="nt">p</span> <span class="o">+</span> <span class="nt">p</span><span class="nc">.en</span> <span class="p">{</span> <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<h2 id="5-빠른-체크">5) 빠른 체크</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mkdocs.yml</code> → <code class="language-plaintext highlighter-rouge">markdown_extensions: - attr_list</code> 들어가 있나요?</p>
  </li>
  <li>
    <p>한국어 줄 끝 <strong>공백 두 칸</strong> 제거하고 <strong>빈 줄</strong> 로 문단 분리했나요?</p>
  </li>
  <li>
    <p>영어 문단 <strong>앞줄</strong> 에 <code class="language-plaintext highlighter-rouge">{: .en}</code>을 뒀나요? (뒤줄×, 같은 줄×)</p>
  </li>
</ol>

<p>원하시면 지금 문제 나는 실제 3~4줄 붙여 주시면, 그 형태에 딱 맞춰 “한 줄 수정” 버전으로 바로 고쳐드릴게요!</p>

<p class="chat--user">

markdown 패키지만 가지고 한 번 테스트 해보고 싶어. 쥬피터 노트북 예시 만들어줘

</p>

<p>좋아! <strong>Python-Markdown만</strong> 으로 테스트해볼 수 있는 쥬피터 노트북을 만들어 놨어.<br />
여기서 내려받아 로컬에서 실행해 보세요:</p>

<p>Download the Jupyter Notebook</p>

<h3 id="노트북에-들어있는-것-step-by-step">노트북에 들어있는 것 (step-by-step)</h3>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">!pip install markdown</code> — Python-Markdown 설치</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">attr_list</code> 확장 켠 렌더 함수 + CSS</p>
  </li>
  <li>
    <p>케이스별 미리보기:</p>

    <ul>
      <li>
        <p><strong>A</strong> : <code class="language-plaintext highlighter-rouge">Hello. Everyone. {.en}</code> → <em>동작 안 하는</em> 예시를 눈으로 확인</p>
      </li>
      <li>
        <p><strong>B</strong> : <code class="language-plaintext highlighter-rouge">{: .en}</code> 줄을 <strong>앞</strong> 에 두면 <strong>다음 블록</strong> 에 적용</p>
      </li>
      <li>
        <p><strong>C</strong> : <code class="language-plaintext highlighter-rouge">{: .en}</code> 줄을 <strong>뒤</strong> 에 두면 <strong>이전 블록</strong> 에 적용</p>
      </li>
      <li>
        <p><strong>D</strong> : 빈 줄로 문단 분리 후 영어 문단에만 <code class="language-plaintext highlighter-rouge">{:.en}</code> 적용</p>
      </li>
      <li>
        <p><strong>E</strong> : 같은 문단 유지 → <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code> + <code class="language-plaintext highlighter-rouge">&lt;span class="en"&gt;…&lt;/span&gt;</code></p>
      </li>
      <li>
        <p><strong>F</strong> : <code class="language-plaintext highlighter-rouge">&lt;en&gt;…&lt;/en&gt;</code> 커스텀 태그</p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="사용-팁-핵심만">사용 팁 (핵심만)</h3>

<ul>
  <li>
    <p><strong>문단 텍스트 같은 줄 끝의<code class="language-plaintext highlighter-rouge">{.en}</code></strong> 는 보통 <strong>문단에는 적용되지 않음</strong> → A 케이스로 확인 가능</p>
  </li>
  <li>
    <p>문단에 클래스 주려면 <strong>속성만 있는 줄</strong>(<code class="language-plaintext highlighter-rouge">{:.en}</code>)을 <strong>앞 또는 뒤</strong> 에 둬서 <strong>그 블록에 붙이기</strong>(B/C)</p>
  </li>
  <li>
    <p>한국어/영어를 <strong>다른 문단</strong> 으로 분리하면(D) 제어가 가장 깔끔</p>
  </li>
  <li>
    <p>한 문단 내 줄바꿈이면(E) 영어만 <code class="language-plaintext highlighter-rouge">&lt;span class="en"&gt;</code>로 감싸기</p>
  </li>
</ul>

<p>노트북 돌려보시고, 혹시 특정 케이스가 기대와 다르게 나오면 그 셀 출력 캡처나 원문을 붙여줘—원인 딱 집어서 고쳐드릴게!</p>

<p class="chat--user">

보기 힘들어 그냥 본문에 써줘

</p>

<p>오케이—노트북 파일 말고, <strong>그대로 복붙해서 돌릴 수 있는 셀</strong> 을 본문에 씁니다.<br />
아래 두 셀만 Jupyter에 순서대로 붙여넣고 실행하세요. (첫 셀은 설치, 두 번째 셀은 케이스 A~F를 한 번에 렌더/미리보기)</p>

<hr />

<h3 id="셀-1--설치">셀 1 — 설치</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">pip</span> <span class="o">-</span><span class="n">q</span> <span class="n">install</span> <span class="n">markdown</span>
</code></pre></div></div>

<h3 id="셀-2--렌더-도우미--케이스-af-미리보기">셀 2 — 렌더 도우미 + 케이스 A~F 미리보기</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">IPython.display</span> <span class="kn">import</span> <span class="n">HTML</span><span class="p">,</span> <span class="n">display</span>
<span class="kn">import</span> <span class="n">markdown</span>

<span class="n">CSS</span> <span class="o">=</span> <span class="sh">'''</span><span class="s">
.md-typeset .en,
.md-typeset en {
  font-size: 0.85em;
  opacity: 0.65;
}
.md-typeset en {
  display: block;
  margin-top: 0.25em;
}
.md-typeset p + p.en {  /* 한국어 문단 바로 다음 영어 문단 간격 */
  margin-top: 0.25em;
}
/* 보기 편하도록 테두리 */
.demo {
  border: 1px solid #ddd;
  padding: 12px;
  margin: 8px 0 24px 0;
  border-radius: 6px;
  background: #fafafa;
}
</span><span class="sh">'''</span>

<span class="k">def</span> <span class="nf">render_md</span><span class="p">(</span><span class="n">md_text</span><span class="p">,</span> <span class="n">title</span><span class="o">=</span><span class="sh">""</span><span class="p">):</span>
    <span class="n">html</span> <span class="o">=</span> <span class="n">markdown</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span>
        <span class="n">md_text</span><span class="p">,</span>
        <span class="n">extensions</span><span class="o">=</span><span class="p">[</span>
            <span class="sh">"</span><span class="s">attr_list</span><span class="sh">"</span><span class="p">,</span>   <span class="c1"># 핵심 확장
</span>            <span class="c1"># "extra",     # 원하면 추가(여기에도 attr_list 포함됨)
</span>            <span class="c1"># "md_in_html" # 복잡한 HTML 블록 내 마크다운이 필요할 때
</span>        <span class="p">]</span>
    <span class="p">)</span>
    <span class="n">wrapped</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"""</span><span class="s">
    &lt;style&gt;</span><span class="si">{</span><span class="n">CSS</span><span class="si">}</span><span class="s">&lt;/style&gt;
    &lt;div class=</span><span class="sh">"</span><span class="s">demo</span><span class="sh">"</span><span class="s">&gt;
      &lt;div&gt;&lt;strong&gt;Markdown 원문&lt;/strong&gt;&lt;/div&gt;
      &lt;pre style=</span><span class="sh">"</span><span class="s">white-space:pre-wrap</span><span class="sh">"</span><span class="s">&gt;</span><span class="si">{</span><span class="n">md_text</span><span class="si">}</span><span class="s">&lt;/pre&gt;
      &lt;div style=</span><span class="sh">"</span><span class="s">margin-top:8px</span><span class="sh">"</span><span class="s">&gt;&lt;strong&gt;렌더 결과&lt;/strong&gt;&lt;/div&gt;
      &lt;div class=</span><span class="sh">"</span><span class="s">md-typeset</span><span class="sh">"</span><span class="s">&gt;</span><span class="si">{</span><span class="n">html</span><span class="si">}</span><span class="s">&lt;/div&gt;
    &lt;/div&gt;
    </span><span class="sh">"""</span>
    <span class="nf">display</span><span class="p">(</span><span class="nc">HTML</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">&lt;h3&gt;</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">&lt;/h3&gt;</span><span class="sh">"</span> <span class="o">+</span> <span class="n">wrapped</span><span class="p">))</span>

<span class="c1"># ───────── 테스트 케이스 ─────────
</span>
<span class="c1"># A) 같은 줄 끝에 {.en} → 일반 문단에서는 보통 "동작 안 함" (그대로 텍스트로 보임)
</span><span class="n">case_A</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">Hello. Everyone. {.en}</span><span class="sh">"""</span>

<span class="c1"># B) 속성 줄을 '앞'에 두면 → "다음 블록"에 적용
</span><span class="n">case_B</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">{:.en lang=en}
Hello. Everyone.</span><span class="sh">"""</span>

<span class="c1"># C) 속성 줄을 '뒤'에 두면 → "이전 블록"에 적용
</span><span class="n">case_C</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">Hello. Everyone.
{:.en lang=en}</span><span class="sh">"""</span>

<span class="c1"># D) 문단 분리(빈 줄) 후 영어 문단에만 적용
</span><span class="n">case_D</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">안녕하세요.

Hello. Everyone.
{:.en}</span><span class="sh">"""</span>

<span class="c1"># E) 같은 문단 유지: 줄바꿈은 &lt;br&gt;, 영어만 인라인으로 감싸기
</span><span class="n">case_E</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">안녕하세요.&lt;br&gt;
&lt;span class=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="s"> lang=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="s">&gt;Hello. Everyone.&lt;/span&gt;</span><span class="sh">"""</span>

<span class="c1"># F) 커스텀 태그 &lt;en&gt;
</span><span class="n">case_F</span> <span class="o">=</span> <span class="sh">"""</span><span class="s">안녕하세요.
&lt;en lang=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="s">&gt;Hello. Everyone.&lt;/en&gt;</span><span class="sh">"""</span>

<span class="c1"># 렌더
</span><span class="nf">render_md</span><span class="p">(</span><span class="n">case_A</span><span class="p">,</span> <span class="sh">"</span><span class="s">A) same-line `{.en}` (문단에는 보통 적용 안 됨)</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">render_md</span><span class="p">(</span><span class="n">case_B</span><span class="p">,</span> <span class="sh">"</span><span class="s">B) attr 줄을 앞에 → 다음 블록에 적용</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">render_md</span><span class="p">(</span><span class="n">case_C</span><span class="p">,</span> <span class="sh">"</span><span class="s">C) attr 줄을 뒤에 → 이전 블록에 적용</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">render_md</span><span class="p">(</span><span class="n">case_D</span><span class="p">,</span> <span class="sh">"</span><span class="s">D) 문단 분리 + 영어 문단만 스타일</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">render_md</span><span class="p">(</span><span class="n">case_E</span><span class="p">,</span> <span class="sh">"</span><span class="s">E) 같은 문단 유지: &lt;br&gt; + &lt;span class=</span><span class="sh">'</span><span class="s">en</span><span class="sh">'</span><span class="s">&gt;</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">render_md</span><span class="p">(</span><span class="n">case_F</span><span class="p">,</span> <span class="sh">"</span><span class="s">F) 커스텀 태그 &lt;en&gt;</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="무엇이-보이면-정상인가-체크-포인트">무엇이 보이면 정상인가 (체크 포인트)</h2>

<ul>
  <li>
    <p><strong>A</strong> : <code class="language-plaintext highlighter-rouge">Hello. Everyone. {.en}</code> 가 <strong>그대로 글자</strong> 로 보임 → 일반 문단에서는 같은 줄 끝 <code class="language-plaintext highlighter-rouge">{.en}</code>이 <strong>안 먹는다</strong> 는 증거.</p>
  </li>
  <li>
    <p><strong>B</strong> : 영어 줄이 <strong>작고 연하게</strong> 보임 → <code class="language-plaintext highlighter-rouge">{:.en}</code> (속성만 있는 줄)이 <strong>아래 블록(다음 문단)</strong> 에 적용.</p>
  </li>
  <li>
    <p><strong>C</strong> : 영어 줄이 <strong>작고 연하게</strong> 보임 → <code class="language-plaintext highlighter-rouge">{:.en}</code>이 <strong>위 블록(이전 문단)</strong> 에 적용.</p>
  </li>
  <li>
    <p><strong>D</strong> : 한국어/영어가 <strong>서로 다른 문단</strong> 이며, <strong>영어만</strong> 작고 연함.</p>
  </li>
  <li>
    <p><strong>E</strong> : 한 문단으로 보이되, <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code> 다음 줄의 영어만 <strong>작고 연함</strong>.</p>
  </li>
  <li>
    <p><strong>F</strong> : <code class="language-plaintext highlighter-rouge">&lt;en&gt;…&lt;/en&gt;</code>도 <strong>작고 연함</strong>. (커스텀 태그를 CSS에서 선택자로 잡음)</p>
  </li>
</ul>

<blockquote>
  <p>결론: <strong>문단 텍스트 같은 줄 끝의<code class="language-plaintext highlighter-rouge">{.en}</code>은 기대대로 동작하지 않습니다.</strong><br />
 문단에 클래스를 주려면 <strong>속성만 있는 줄(<code class="language-plaintext highlighter-rouge">{:.en}</code>)</strong> 을 <strong>앞/뒤</strong> 에 두거나,<br />
 같은 문단을 유지하려면 <strong><code class="language-plaintext highlighter-rouge">&lt;br&gt;</code> + <code class="language-plaintext highlighter-rouge">&lt;span class="en"&gt;…&lt;/span&gt;</code></strong> 방식이 가장 확실합니다.</p>
</blockquote>

<p>원하시면 이 케이스 중 딱 맞는 패턴을 골라 MkDocs에 그대로 이식하는 예시도 바로 적어드릴게요.</p>

<p class="chat--user">

아무리 해도 그냥 앞 뒤 줄 띄워야함

</p>

<p>맞아요. <strong>결론 = 블록 속성 줄(<code class="language-plaintext highlighter-rouge">{: .en}</code>)은 “독립 블록”이어야 해서 앞뒤로 빈 줄을 둬서 ‘완전히 분리’하면 가장 안전</strong>합니다. 특히 Python-Markdown/MkDocs 조합에서는 이 규칙이 까다로워서, 실전에서는 “앞·뒤 줄 띄우기”가 사실상 정석이에요.</p>

<p>아래 3가지 <strong>항상 잘 먹는 패턴</strong> 만 써주세요.</p>

<hr />

<h2 id="1-이전-문단영어에-적용--가장-추천">1) “이전 문단(영어)”에 적용 — 가장 추천</h2>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.

Hello. Everyone.

{: .en lang=en}
</code></pre></div></div>

<ul>
  <li>포인트: <code class="language-plaintext highlighter-rouge">{: .en}</code> <strong>위·아래 모두 빈 줄</strong> → 속성 줄이 완전히 독립된 단락이 되어 <strong>바로 위 문단(영어)</strong> 에만 붙습니다.</li>
</ul>

<hr />

<h2 id="2-다음-문단영어에-적용">2) “다음 문단(영어)”에 적용</h2>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.

{: .en lang=en}

Hello. Everyone.
</code></pre></div></div>

<ul>
  <li>포인트: 마찬가지로 속성 줄 <strong>앞·뒤 빈 줄</strong> → <strong>바로 아래 문단(영어)</strong> 에만 붙습니다.</li>
</ul>

<hr />

<h2 id="3-같은-문단을-유지해야-할-때줄바꿈만--인라인-방식">3) 같은 문단을 유지해야 할 때(줄바꿈만) — 인라인 방식</h2>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.<span class="nt">&lt;br&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;</span>
</code></pre></div></div>

<ul>
  <li>블록 속성 규칙을 건드리지 않아서 환경 차이에 덜 민감합니다.</li>
</ul>

<hr />

<h2 id="css-material-기준-공통">CSS (Material 기준, 공통)</h2>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.md-typeset</span> <span class="nc">.en</span><span class="o">,</span> <span class="nc">.md-typeset</span> <span class="nt">en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>   <span class="c">/* 작게 */</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>       <span class="c">/* 연하게 */</span>
<span class="p">}</span>
<span class="nc">.md-typeset</span> <span class="nt">en</span> <span class="p">{</span>        <span class="c">/* &lt;en&gt;을 블록처럼 쓰고 싶을 때 */</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">block</span><span class="p">;</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span>
<span class="p">}</span>
<span class="nc">.md-typeset</span> <span class="nt">p</span> <span class="o">+</span> <span class="nt">p</span><span class="nc">.en</span> <span class="p">{</span>  <span class="c">/* 한글 문단 바로 뒤 영어 문단 간격 다듬기 */</span>
  <span class="nl">margin-top</span><span class="p">:</span> <span class="m">0.25em</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="왜-이렇게-해야-하나-짧게">왜 이렇게 해야 하나? (짧게)</h3>

<ul>
  <li>
    <p>속성 줄은 <strong>그 자체가 하나의 “단락(block)”</strong>이어야 인식됩니다.</p>
  </li>
  <li>
    <p>빈 줄이 없으면 파서가 “같은 문단의 일반 텍스트”로 오해해서 <code class="language-plaintext highlighter-rouge">{:.en}</code>이 <strong>그대로 글자</strong> 로 보이거나, 한 문단 전체(한글+영어)에 적용되는 일이 생깁니다.</p>
  </li>
  <li>
    <p>그래서 <strong>속성 줄을 위/아래 빈 줄로 고립</strong> 시키는 습관을 들이면 어디서든 안정적으로 동작합니다.</p>
  </li>
</ul>

<p>원하시면 지금 작성하신 실제 몇 줄을 보내 주시면, 위 패턴으로 <strong>최소 수정</strong> 버전을 바로 잡아드릴게요.</p>

<p class="chat--user">

pymdownx의 caret 처럼 간단히 가만의 <span class="en"> </span>을 추가할 수 없을까

</p>

<p>좋아, <strong>caret(예:<code class="language-plaintext highlighter-rouge">^^text^^</code>)처럼</strong> 간단한 기호로<br />
<code class="language-plaintext highlighter-rouge">&lt;span class="en"&gt;…&lt;/span&gt;</code>을 자동으로 넣고 싶다면 <strong>작은 커스텀 Markdown 확장</strong> 을 하나 추가하면 딱 해결돼요.<br />
아래대로 하면 <code class="language-plaintext highlighter-rouge">%%영문%%</code>처럼 쓰기만 해도 <code class="language-plaintext highlighter-rouge">&lt;span class="en" lang="en"&gt;영문&lt;/span&gt;</code>으로 렌더됩니다.</p>

<hr />

<h1 id="1-파이썬-확장-파일-만들기-510줄짜리-핵심">1) 파이썬 확장 파일 만들기 (5~10줄짜리 핵심)</h1>

<p>프로젝트 루트(보통 <code class="language-plaintext highlighter-rouge">mkdocs.yml</code> 옆)에 <code class="language-plaintext highlighter-rouge">en_span.py</code> 파일을 만들고 아래를 복붙하세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># en_span.py
</span><span class="kn">import</span> <span class="n">re</span>
<span class="kn">from</span> <span class="n">markdown.extensions</span> <span class="kn">import</span> <span class="n">Extension</span>
<span class="kn">from</span> <span class="n">markdown.inlinepatterns</span> <span class="kn">import</span> <span class="n">InlineProcessor</span>
<span class="kn">from</span> <span class="n">xml.etree</span> <span class="kn">import</span> <span class="n">ElementTree</span> <span class="k">as</span> <span class="n">etree</span>

<span class="k">class</span> <span class="nc">EnSpanInline</span><span class="p">(</span><span class="n">InlineProcessor</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">pattern</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">klass</span><span class="o">=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">md</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">klass</span> <span class="o">=</span> <span class="n">klass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lang</span> <span class="o">=</span> <span class="n">lang</span>

    <span class="k">def</span> <span class="nf">handleMatch</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\%%</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">%%</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># \%% → %
</span>        <span class="n">el</span> <span class="o">=</span> <span class="n">etree</span><span class="p">.</span><span class="nc">Element</span><span class="p">(</span><span class="sh">"</span><span class="s">span</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">el</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">klass</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">lang</span><span class="p">:</span>
            <span class="n">el</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lang</span><span class="p">)</span>
        <span class="n">el</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
        <span class="k">return</span> <span class="n">el</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">m</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">EnSpanExtension</span><span class="p">(</span><span class="n">Extension</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">delim</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">%%</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Inline delimiter, e.g. %%, ^^, !!</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">CSS class name</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">:</span>  <span class="p">[</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lang attribute (</span><span class="sh">''</span><span class="s"> to disable)</span><span class="sh">"</span><span class="p">],</span>
        <span class="p">}</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">extendMarkdown</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">md</span><span class="p">):</span>
        <span class="n">delim</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">delim</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">pattern</span> <span class="o">=</span> <span class="sa">rf</span><span class="sh">"</span><span class="s">(?&lt;!\\)</span><span class="si">{</span><span class="n">re</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="n">delim</span><span class="p">)</span><span class="si">}</span><span class="s">(.+?)(?&lt;!\\)</span><span class="si">{</span><span class="n">re</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="n">delim</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">proc</span> <span class="o">=</span> <span class="nc">EnSpanInline</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span>
                            <span class="n">klass</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">),</span>
                            <span class="n">lang</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">))</span>
        <span class="c1"># 175: em/strong(EMPHASIS)보다 살짝 앞서도록 등록
</span>        <span class="n">md</span><span class="p">.</span><span class="n">inlinePatterns</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="n">proc</span><span class="p">,</span> <span class="sh">"</span><span class="s">en-span</span><span class="sh">"</span><span class="p">,</span> <span class="mi">175</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">makeExtension</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">return</span> <span class="nc">EnSpanExtension</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>

<ul>
  <li>
    <p>기본 구분자는 <code class="language-plaintext highlighter-rouge">%%…%%</code> 입니다.</p>
  </li>
  <li>
    <p>텍스트 안에서 <code class="language-plaintext highlighter-rouge">%%</code>를 <strong>문자 그대로 쓰고 싶으면</strong> <code class="language-plaintext highlighter-rouge">\%%</code>로 이스케이프하세요.</p>
  </li>
  <li>
    <p>이미 <code class="language-plaintext highlighter-rouge">pymdownx.caret</code>(^^)을 쓰고 있다면, 충돌 없이 <code class="language-plaintext highlighter-rouge">%%</code>만 쓰면 됩니다. (원하면 <code class="language-plaintext highlighter-rouge">delim: "^^"</code>로 바꿀 수 있어요)</p>
  </li>
</ul>

<hr />

<h1 id="2-mkdocsyml에-확장-등록">2) <code class="language-plaintext highlighter-rouge">mkdocs.yml</code>에 확장 등록</h1>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">material</span>

<span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">attr_list</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">en_span:EnSpanExtension'</span>   <span class="c1"># 또는 그냥 - en_span  (makeExtension가 있으므로)</span>
  <span class="c1"># 옵션을 바꾸고 싶다면:</span>
  <span class="c1"># - en_span:</span>
  <span class="c1">#     delim: "%%"   # 바꾸려면 "^^" 등</span>
  <span class="c1">#     class: "en"</span>
  <span class="c1">#     lang: "en"</span>

<span class="na">extra_css</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">stylesheets/translation.css</span>
</code></pre></div></div>

<blockquote>
  <p><strong>주의:</strong> MkDocs가 이 모듈을 import할 수 있어야 해요.<br />
 가장 간단히는 <strong>MkDocs 실행할 때</strong> 프로젝트 루트를 파이썬 경로에 추가하세요.</p>

  <ul>
    <li>
      <p>macOS/Linux: <code class="language-plaintext highlighter-rouge">PYTHONPATH=. mkdocs serve</code></p>
    </li>
    <li>
      <p>Windows(PowerShell): <code class="language-plaintext highlighter-rouge">$env:PYTHONPATH="."; mkdocs serve</code></p>
    </li>
  </ul>

</blockquote>

<p>(혹은 <code class="language-plaintext highlighter-rouge">en_span.py</code>를 패키지로 설치하거나, venv의 <code class="language-plaintext highlighter-rouge">site-packages</code>에 넣어도 됩니다.)</p>

<hr />

<h1 id="3-css-material-기준">3) CSS (Material 기준)</h1>

<p><code class="language-plaintext highlighter-rouge">docs/stylesheets/translation.css</code>:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.md-typeset</span> <span class="nc">.en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>   <span class="c">/* 조금 작게 */</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>       <span class="c">/* 연하게 */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>원하면 줄 간격 조정, 색상 등도 여기서 커스텀하면 됩니다.</p>

<hr />

<h1 id="4-사용법">4) 사용법</h1>

<p>그냥 본문에 이렇게 쓰면 끝:</p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요. %%Hello. Everyone.%%
</code></pre></div></div>

<p>렌더링 결과(핵심만):</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>안녕하세요. <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;&lt;/p&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><strong>블록으로</strong> 쓰고 싶으면 기존대로 <code class="language-plaintext highlighter-rouge">{:.en}</code>을 쓰거나, <code class="language-plaintext highlighter-rouge">&lt;en&gt;…&lt;/en&gt;</code>를 쓰세요(이미 해두신 CSS로 스타일 적용 가능).</p>
  </li>
  <li>
    <p><strong>같은 문단에서 줄을 바꾸고 싶다면</strong> 여전히 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>을 쓰는 게 가장 확실합니다:</p>
    <div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요.<span class="nt">&lt;br&gt;</span>%%Hello. Everyone.%%
</code></pre></div>    </div>
  </li>
</ul>

<hr />

<h1 id="5-대안플러그인-없이-가능한-꼼수">5) 대안(플러그인 없이 가능한 꼼수)</h1>

<p>플러그인을 전혀 쓰기 싫다면, 아래 꼼수도 가능은 합니다.</p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="ge">*Hello. Everyone.*</span>{.en}
</code></pre></div></div>

<p>CSS로 기울임을 제거:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.md-typeset</span> <span class="nt">em</span><span class="nc">.en</span> <span class="p">{</span> <span class="nl">font-style</span><span class="p">:</span> <span class="nb">normal</span><span class="p">;</span> <span class="p">}</span>
</code></pre></div></div>

<p>이렇게 하면 <code class="language-plaintext highlighter-rouge">&lt;em class="en"&gt;…&lt;/em&gt;</code>이 되는데, 시맨틱이 살짝 어긋나므로 <strong>권장도는 낮고</strong> ,<br />
가능하면 위의 <strong>커스텀 확장(%%…%%)</strong> 방식을 추천합니다.</p>

<hr />

<p>필요하면 <strong>구분자</strong> 를 <code class="language-plaintext highlighter-rouge">^^</code>나 <code class="language-plaintext highlighter-rouge">!!</code> 등으로 바꾼 버전도 바로 만들어 드릴게요. (옵션 한 줄만 바꾸면 됩니다)</p>

<p class="chat--user">

No module names 'en_span' 파일을 여기 넣는거 맞아?

</p>

<p>맞아요, 그 에러는 <strong>MkDocs가<code class="language-plaintext highlighter-rouge">en_span</code> 모듈을 import 못 해서</strong> 나는 거예요.<br />
핵심은 <strong>파일 위치 + 실행 위치 + 파이썬 경로(PYTHONPATH)</strong> 입니다. 아래대로 차근차근 해보세요.</p>

<hr />

<h2 id="0-올바른-폴더-구조-가장-단순한-형태">0) 올바른 폴더 구조 (가장 단순한 형태)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pgsql

your-project/
├─ mkdocs.yml
├─ en_span.py          ← 여기!
└─ docs/
   ├─ index.md
   └─ stylesheets/
      └─ translation.css
</code></pre></div></div>

<blockquote>
  <p><strong>중요:</strong> <code class="language-plaintext highlighter-rouge">en_span.py</code>는 <code class="language-plaintext highlighter-rouge">docs/</code> 안이 아니라 <strong><code class="language-plaintext highlighter-rouge">mkdocs.yml</code>과 같은 디렉터리(프로젝트 루트)</strong> 에 두세요.</p>
</blockquote>

<hr />

<h2 id="1-mkdocsyml-설정-1">1) <code class="language-plaintext highlighter-rouge">mkdocs.yml</code> 설정</h2>

<p>가장 기본:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">en_span</span>
</code></pre></div></div>

<p>옵션을 쓰고 싶다면:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">en_span</span><span class="pi">:</span>
      <span class="na">delim</span><span class="pi">:</span> <span class="s2">"</span><span class="s">%%"</span>
      <span class="na">class</span><span class="pi">:</span> <span class="s2">"</span><span class="s">en"</span>
      <span class="na">lang</span><span class="pi">:</span> <span class="s2">"</span><span class="s">en"</span>
</code></pre></div></div>

<p>또는 클래스 경로로도 가능:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s1">'</span><span class="s">en_span:EnSpanExtension'</span>
</code></pre></div></div>

<hr />

<h2 id="2-올바른-실행-위치에서-서버-시작">2) 올바른 실행 위치에서 서버 시작</h2>

<p>반드시 <strong>프로젝트 루트(=<code class="language-plaintext highlighter-rouge">mkdocs.yml</code>이 있는 위치)</strong> 로 이동해서 실행하세요.</p>

<ul>
  <li>macOS / Linux
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>your-project
<span class="nv">PYTHONPATH</span><span class="o">=</span><span class="nb">.</span> mkdocs serve
</code></pre></div>    </div>
  </li>
  <li>Windows PowerShell
    <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">your-project</span><span class="w">
</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="s2">"."</span><span class="p">;</span><span class="w"> </span><span class="n">mkdocs</span><span class="w"> </span><span class="nx">serve</span><span class="w">
</span></code></pre></div>    </div>
  </li>
  <li>Windows CMD
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bat
    
cd your-project
set PYTHONPATH=.
mkdocs serve
</code></pre></div>    </div>
  </li>
</ul>

<blockquote>
  <p>왜? MkDocs가 확장 모듈을 <strong>현재 파이썬 경로</strong> 에서 찾는데, 환경/실행 방법에 따라 현재 디렉터리가 경로에 안 잡힐 수 있습니다. <code class="language-plaintext highlighter-rouge">PYTHONPATH=.</code> 로 프로젝트 루트를 확실히 넣어주면 import 에러가 사라집니다.</p>
</blockquote>

<hr />

<h2 id="3-빠른-자가-점검-문제-계속되면-여기서-잡힙니다">3) 빠른 자가 점검 (문제 계속되면 여기서 잡힙니다)</h2>

<ol>
  <li>
    <p><strong>파일명</strong> 이 정확히 <code class="language-plaintext highlighter-rouge">en_span.py</code> 인가요? (<code class="language-plaintext highlighter-rouge">en-span.py</code> ×)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">en_span.py</code> 안에 <strong><code class="language-plaintext highlighter-rouge">makeExtension(**kwargs)</code></strong> 함수가 존재하나요? (필수)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mkdocs serve</code>를 <strong>프로젝트 루트</strong> 에서 실행했나요? (다른 폴더에서 실행 ×)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">mkdocs.yml</code>에 <code class="language-plaintext highlighter-rouge">markdown_extensions: - en_span</code> 이 들어갔나요? (오탈자 ×)</p>
  </li>
  <li>그래도 안 되면, <strong>완전한 모듈 경로</strong> 로 시도:
```yaml
markdown_extensions:
    <ul>
      <li>'en_span:EnSpanExtension'
```</li>
    </ul>
  </li>
  <li>여전히 안 되면, <strong>패키지 폴더로 감싸기</strong> :
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>your-project/
├─ mkdocs.yml
├─ local_ext/
│  ├─ __init__.py
│  └─ en_span.py
└─ docs/...
</code></pre></div>    </div>
  </li>
</ol>

<p>그리고 <code class="language-plaintext highlighter-rouge">mkdocs.yml</code>:
     <code class="language-plaintext highlighter-rouge">yaml
     markdown_extensions:
       - local_ext.en_span
    </code></p>

<p>(이때도 <code class="language-plaintext highlighter-rouge">PYTHONPATH=.</code> 권장)</p>

<hr />

<h2 id="4-동작-확인용-최소-예제">4) 동작 확인용 최소 예제</h2>

<p><strong><code class="language-plaintext highlighter-rouge">docs/index.md</code></strong></p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요. %%Hello. Everyone.%%
</code></pre></div></div>

<p><strong><code class="language-plaintext highlighter-rouge">en_span.py</code></strong> (핵심 부분만 재확인)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">re</span>
<span class="kn">from</span> <span class="n">markdown.extensions</span> <span class="kn">import</span> <span class="n">Extension</span>
<span class="kn">from</span> <span class="n">markdown.inlinepatterns</span> <span class="kn">import</span> <span class="n">InlineProcessor</span>
<span class="kn">from</span> <span class="n">xml.etree</span> <span class="kn">import</span> <span class="n">ElementTree</span> <span class="k">as</span> <span class="n">etree</span>

<span class="k">class</span> <span class="nc">EnSpanInline</span><span class="p">(</span><span class="n">InlineProcessor</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">pattern</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">klass</span><span class="o">=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">md</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">klass</span> <span class="o">=</span> <span class="n">klass</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lang</span> <span class="o">=</span> <span class="n">lang</span>
    <span class="k">def</span> <span class="nf">handleMatch</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\%%</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">%%</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">el</span> <span class="o">=</span> <span class="n">etree</span><span class="p">.</span><span class="nc">Element</span><span class="p">(</span><span class="sh">"</span><span class="s">span</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">el</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">klass</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">lang</span><span class="p">:</span>
            <span class="n">el</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lang</span><span class="p">)</span>
        <span class="n">el</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
        <span class="k">return</span> <span class="n">el</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">m</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">EnSpanExtension</span><span class="p">(</span><span class="n">Extension</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">delim</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">%%</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Inline delimiter</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">CSS class</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">:</span>  <span class="p">[</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lang attribute</span><span class="sh">"</span><span class="p">],</span>
        <span class="p">}</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">extendMarkdown</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">md</span><span class="p">):</span>
        <span class="n">delim</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">delim</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">pattern</span> <span class="o">=</span> <span class="sa">rf</span><span class="sh">"</span><span class="s">(?&lt;!\\)</span><span class="si">{</span><span class="n">re</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="n">delim</span><span class="p">)</span><span class="si">}</span><span class="s">(.+?)(?&lt;!\\)</span><span class="si">{</span><span class="n">re</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="n">delim</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">md</span><span class="p">.</span><span class="n">inlinePatterns</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span>
            <span class="nc">EnSpanInline</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span>
                         <span class="n">klass</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">),</span>
                         <span class="n">lang</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">)),</span>
            <span class="sh">"</span><span class="s">en-span</span><span class="sh">"</span><span class="p">,</span> <span class="mi">175</span>
        <span class="p">)</span>

<span class="k">def</span> <span class="nf">makeExtension</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">return</span> <span class="nc">EnSpanExtension</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="5-그래도-같은-에러면">5) 그래도 같은 에러면?</h2>

<ul>
  <li>
    <p>콘솔에서 한 번 직접 import 해보세요:</p>

    <ul>
      <li>macOS/Linux:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>your-project
<span class="nv">PYTHONPATH</span><span class="o">=</span><span class="nb">.</span> python <span class="nt">-c</span> <span class="s2">"import en_span; print(en_span)"</span>
</code></pre></div>        </div>
      </li>
      <li>Windows PowerShell:
        <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cd</span><span class="w"> </span><span class="nx">your-project</span><span class="w">
</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="s2">"."</span><span class="p">;</span><span class="w"> </span><span class="n">python</span><span class="w"> </span><span class="nt">-c</span><span class="w"> </span><span class="s2">"import en_span; print(en_span)"</span><span class="w">
</span></code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<p>이게 실패하면 <strong>경로 문제</strong> 가 확실합니다. 위 2)번(실행 위치)과 3)번(패키지 폴더) 방법으로 정리하면 해결됩니다.</p>

<hr />

<p>원하시면 지금 프로젝트 트리(대충 <code class="language-plaintext highlighter-rouge">tree</code> 결과나 스크린샷)와 <code class="language-plaintext highlighter-rouge">mkdocs.yml</code>의 해당 부분을 보내 주세요. 그대로 맞춰서 <strong>한 줄도 헷갈리지 않게</strong> 수정본 만들어 드릴게요.</p>

<p class="chat--user">

그냥 패키지 설치를 해버려야겠어. markdown_en_span 이라는 패키지로 만들어주고 src 폴더와 pyproject.toml을 여기에 포함시켜서 설치할 수 있게 해줘

</p>

<p>좋아—<strong>로컬에서 바로 설치 가능한 패키지</strong> 로 만들어 드릴게요.<br />
패키지명은 요청하신 대로 <code class="language-plaintext highlighter-rouge">markdown_en_span</code>, <strong>src 레이아웃</strong> + <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 포함입니다.</p>

<hr />

<h1 id="1-디렉터리-구조-만들기">1) 디렉터리 구조 만들기</h1>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">your-project</span><span class="o">/</span>
<span class="err">├─</span> <span class="nt">pyproject</span><span class="nc">.toml</span>
<span class="err">└─</span> <span class="nt">src</span><span class="o">/</span>
   <span class="err">└─</span> <span class="nt">markdown_en_span</span><span class="o">/</span>
      <span class="err">└─</span> <span class="nt">__init__</span><span class="nc">.py</span>
</code></pre></div></div>

<hr />

<h1 id="2-pyprojecttoml">2) <code class="language-plaintext highlighter-rouge">pyproject.toml</code></h1>
<div class="language-toml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[build-system]</span>
<span class="py">requires</span> <span class="p">=</span> <span class="py">["hatchling&gt;</span><span class="p">=</span><span class="mf">1.18</span><span class="s">"]</span><span class="err">
</span><span class="py">build-backend</span> <span class="p">=</span> <span class="s">"hatchling.build"</span>

<span class="nn">[project]</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"markdown_en_span"</span>
<span class="py">version</span> <span class="p">=</span> <span class="s">"0.1.0"</span>
<span class="py">description</span> <span class="p">=</span> <span class="s">"Python-Markdown inline extension to wrap %%text%% as &lt;span class='en' lang='en'&gt;text&lt;/span&gt;."</span>
<span class="py">readme</span> <span class="p">=</span> <span class="s">"README.md"</span>
<span class="py">requires-python</span> <span class="p">=</span> <span class="py">"&gt;</span><span class="p">=</span><span class="mf">3.8</span><span class="s">"</span><span class="err">
</span><span class="py">authors</span> <span class="p">=</span> <span class="py">[{name</span> <span class="p">=</span> <span class="s">"Your Name"</span><span class="err">}]</span>
<span class="py">dependencies</span> <span class="p">=</span> <span class="py">["Markdown&gt;</span><span class="p">=</span><span class="mf">3.3</span><span class="s">"]</span><span class="err">
</span>
<span class="nn">[project.urls]</span>
<span class="py">Homepage</span> <span class="p">=</span> <span class="s">"https://example.com/markdown_en_span"</span>

<span class="c"># Python-Markdown이 이 확장을 'en_span' 이름으로 인식하게 하는 엔트리포인트</span>
<span class="nn">[project.entry-points."markdown.extensions"]</span>
<span class="py">en_span</span> <span class="p">=</span> <span class="s">"markdown_en_span:makeExtension"</span>
</code></pre></div></div>

<blockquote>
  <p>포인트</p>

  <ul>
    <li>
      <p><strong>엔트리포인트</strong> 덕분에 <code class="language-plaintext highlighter-rouge">mkdocs.yml</code>에서 <code class="language-plaintext highlighter-rouge">markdown_extensions: - en_span</code>처럼 <strong>짧은 이름</strong> 으로 쓸 수 있어요.</p>
    </li>
    <li>
      <p>배포명(<code class="language-plaintext highlighter-rouge">name</code>)과 모듈명(폴더)은 둘 다 <code class="language-plaintext highlighter-rouge">markdown_en_span</code>로 통일.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="3-srcmarkdown_en_span__init__py">3) <code class="language-plaintext highlighter-rouge">src/markdown_en_span/__init__.py</code></h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">re</span>
<span class="kn">from</span> <span class="n">markdown.extensions</span> <span class="kn">import</span> <span class="n">Extension</span>
<span class="kn">from</span> <span class="n">markdown.inlinepatterns</span> <span class="kn">import</span> <span class="n">InlineProcessor</span>
<span class="kn">from</span> <span class="n">xml.etree</span> <span class="kn">import</span> <span class="n">ElementTree</span> <span class="k">as</span> <span class="n">etree</span>

<span class="n">__all__</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">EnSpanExtension</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">makeExtension</span><span class="sh">"</span><span class="p">]</span>
<span class="n">__version__</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0.1.0</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">EnSpanInline</span><span class="p">(</span><span class="n">InlineProcessor</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Wraps %%text%% (기본) → &lt;span class=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="s"> lang=</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="s">&gt;text&lt;/span&gt;
    - 구분자는 옵션으로 변경 가능 (예: ^^ 또는 !!)
    - \%% 처럼 백슬래시로 이스케이프하면 리터럴 %% 출력
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delim</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">css_class</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="n">lang</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">):</span>
        <span class="c1"># DOTALL 활성화: 필요 시 여러 줄도 매칭
</span>        <span class="n">pattern</span> <span class="o">=</span> <span class="sa">rf</span><span class="sh">"</span><span class="s">(?s)(?&lt;!\\)</span><span class="si">{</span><span class="n">re</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="n">delim</span><span class="p">)</span><span class="si">}</span><span class="s">(.+?)(?&lt;!\\)</span><span class="si">{</span><span class="n">re</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="n">delim</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">md</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">delim</span> <span class="o">=</span> <span class="n">delim</span>
        <span class="n">self</span><span class="p">.</span><span class="n">css_class</span> <span class="o">=</span> <span class="n">css_class</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lang</span> <span class="o">=</span> <span class="n">lang</span>

    <span class="k">def</span> <span class="nf">handleMatch</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="c1"># 본문 텍스트
</span>        <span class="n">text</span> <span class="o">=</span> <span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="c1"># \%% → %% (사용자가 리터럴 구분자를 넣고 싶을 때)
</span>        <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\\</span><span class="sh">"</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">delim</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delim</span><span class="p">)</span>

        <span class="n">el</span> <span class="o">=</span> <span class="n">etree</span><span class="p">.</span><span class="nc">Element</span><span class="p">(</span><span class="sh">"</span><span class="s">span</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">el</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">css_class</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">lang</span><span class="p">:</span>
            <span class="n">el</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">lang</span><span class="p">)</span>
        <span class="n">el</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
        <span class="k">return</span> <span class="n">el</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="nf">start</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">m</span><span class="p">.</span><span class="nf">end</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">EnSpanExtension</span><span class="p">(</span><span class="n">Extension</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    확장 옵션:
      - delim: 기본 </span><span class="sh">"</span><span class="s">%%</span><span class="sh">"</span><span class="s">
      - class: 기본 </span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="s">
      - lang:  기본 </span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="s"> (빈 문자열이면 lang 속성 생략)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">config</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">delim</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">%%</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Inline delimiter, e.g. %%, ^^, !!</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">CSS class name to set on &lt;span&gt;</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">:</span>  <span class="p">[</span><span class="sh">"</span><span class="s">en</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lang attribute value (</span><span class="sh">''</span><span class="s"> to disable)</span><span class="sh">"</span><span class="p">],</span>
        <span class="p">}</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">extendMarkdown</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">md</span><span class="p">):</span>
        <span class="n">delim</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">delim</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">css_class</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">class</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">lang</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">(</span><span class="sh">"</span><span class="s">lang</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">proc</span> <span class="o">=</span> <span class="nc">EnSpanInline</span><span class="p">(</span><span class="n">delim</span><span class="o">=</span><span class="n">delim</span><span class="p">,</span> <span class="n">md</span><span class="o">=</span><span class="n">md</span><span class="p">,</span> <span class="n">css_class</span><span class="o">=</span><span class="n">css_class</span><span class="p">,</span> <span class="n">lang</span><span class="o">=</span><span class="n">lang</span><span class="p">)</span>
        <span class="c1"># emphasis(EMPHASIS=170)보다 약간 앞서도록 등록
</span>        <span class="n">md</span><span class="p">.</span><span class="n">inlinePatterns</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="n">proc</span><span class="p">,</span> <span class="sh">"</span><span class="s">en-span</span><span class="sh">"</span><span class="p">,</span> <span class="mi">175</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">makeExtension</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">return</span> <span class="nc">EnSpanExtension</span><span class="p">(</span><span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="4-설치-로컬">4) 설치 (로컬)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 프로젝트 루트(= pyproject.toml 있는 곳)에서</span>
pip <span class="nb">install</span> <span class="nt">-e</span> <span class="nb">.</span>
<span class="c"># 또는</span>
pip <span class="nb">install</span> <span class="nb">.</span>
</code></pre></div></div>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">-e</code>는 개발 중 수정사항이 바로 반영되는 <strong>editable</strong> 설치.</p>
</blockquote>

<hr />

<h1 id="5-mkdocs-사용-예시">5) MkDocs 사용 예시</h1>

<h2 id="mkdocsyml"><code class="language-plaintext highlighter-rouge">mkdocs.yml</code></h2>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">material</span>

<span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">en_span</span>            <span class="c1"># ← 방금 만든 확장 (엔트리포인트로 인식)</span>
  <span class="c1"># - attr_list        # (선택) 다른 용도 필요 시</span>
  <span class="c1"># - en_span:</span>
  <span class="c1">#     delim: "^^"    # 구분자 바꾸고 싶을 때</span>
  <span class="c1">#     class: "en"</span>
  <span class="c1">#     lang: "en"</span>

<span class="na">extra_css</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">stylesheets/translation.css</span>
</code></pre></div></div>

<h2 id="docsstylesheetstranslationcss"><code class="language-plaintext highlighter-rouge">docs/stylesheets/translation.css</code></h2>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.md-typeset</span> <span class="nc">.en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="docsindexmd"><code class="language-plaintext highlighter-rouge">docs/index.md</code></h2>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요. %%Hello. Everyone.%%
</code></pre></div></div>

<p>→ 렌더링:</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;p&gt;</span>안녕하세요. <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"en"</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>Hello. Everyone.<span class="nt">&lt;/span&gt;&lt;/p&gt;</span>
</code></pre></div></div>

<hr />

<h1 id="6-팁--트러블슈팅">6) 팁 &amp; 트러블슈팅</h1>

<ul>
  <li><strong>구분자 바꾸기</strong> : <code class="language-plaintext highlighter-rouge">mkdocs.yml</code>에
```yaml
markdown_extensions:
    <ul>
      <li>en_span:
  delim: "^^"
  class: "en"
  lang: "en"
```</li>
    </ul>
  </li>
</ul>

<p>→ <code class="language-plaintext highlighter-rouge">안녕하세요. ^^Hello. Everyone.^^</code></p>

<ul>
  <li>
    <p><strong>리터럴로<code class="language-plaintext highlighter-rouge">%%</code> 출력</strong>: <code class="language-plaintext highlighter-rouge">\%%</code> 처럼 이스케이프<br />
예) <code class="language-plaintext highlighter-rouge">가격은 \%%20 할인</code> → 실제 문서에 <code class="language-plaintext highlighter-rouge">%%20</code> 출력</p>
  </li>
  <li><strong>확장 로딩 확인</strong> (MkDocs 외에 순수 파이썬에서)
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">markdown</span>
<span class="n">html</span> <span class="o">=</span> <span class="n">markdown</span><span class="p">.</span><span class="nf">markdown</span><span class="p">(</span><span class="sh">"</span><span class="s">안녕 %%Hello%%</span><span class="sh">"</span><span class="p">,</span> <span class="n">extensions</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">en_span</span><span class="sh">"</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>여전히 인식 안 되면</strong></p>

    <ul>
      <li>
        <p>설치 경로 확인: <code class="language-plaintext highlighter-rouge">pip show markdown_en_span</code></p>
      </li>
      <li>
        <p>가상환경 재시작 / MkDocs 재시작</p>
      </li>
      <li>
        <p>Markdown 버전 확인: <code class="language-plaintext highlighter-rouge">python -c "import markdown, sys; print(markdown.__version__)"</code> (3.3 이상 권장)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>필요하면 <code class="language-plaintext highlighter-rouge">README.md</code>/<code class="language-plaintext highlighter-rouge">LICENSE</code> 골격도 추가해 드릴게요. 원하시는 구분자(예: <code class="language-plaintext highlighter-rouge">||</code>), 기본 클래스명 변경 등 커스터마이즈 버전도 바로 만들어 줄 수 있어요.</p>

<p class="chat--user">

mkdocs 루트 폴더 밑에 너가 만들어준 패키지를 위치 시킬거야. requirements.txt에 상대경로로 인스톨 추가할 수 있어?

</p>

<p>가능해! <strong>requirements.txt</strong> 에서 <strong>상대경로</strong> 로 로컬 패키지를 설치할 수 있어요.<br />
요청하신 구조(패키지를 MkDocs 루트 바로 아래)에 맞춰 <strong>한 번에 되는</strong> 절차를 step-by-step으로 정리할게요.</p>

<hr />

<h1 id="0-폴더-구조예시">0) 폴더 구조(예시)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>your-project/
├─ mkdocs.yml
├─ requirements.txt
├─ markdown_en_span/           <span class="c"># ← 여기 폴더가 “패키지 루트”</span>
│  ├─ pyproject.toml
│  └─ src/
│     └─ markdown_en_span/
│        └─ __init__.py
└─ docs/
   └─ stylesheets/translation.css
</code></pre></div></div>

<blockquote>
  <p>중요: <strong><code class="language-plaintext highlighter-rouge">pyproject.toml</code>이 들어있는 디렉터리</strong>(여기서는 <code class="language-plaintext highlighter-rouge">./markdown_en_span</code>)가 pip가 인식하는 “패키지 루트”예요.</p>
</blockquote>

<hr />

<h1 id="1-requirementstxt-작성">1) requirements.txt 작성</h1>

<h2 id="a-개발-중-수정사항을-바로-반영하고-싶을-때-editable">(A) 개발 중 수정사항을 바로 반영하고 싶을 때 (editable)</h2>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># MkDocs(원하면 버전 고정)</span>
mkdocs&gt;<span class="o">=</span>1.6
mkdocs-material&gt;<span class="o">=</span>9.5

<span class="c"># 로컬 확장 패키지(상대경로, editable 모드)</span>
<span class="nt">-e</span> ./markdown_en_span
</code></pre></div></div>

<h2 id="b-고정-설치수정-즉시-반영-필요-없을-때">(B) 고정 설치(수정 즉시 반영 필요 없을 때)</h2>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdocs&gt;<span class="o">=</span>1.6
mkdocs-material&gt;<span class="o">=</span>9.5

./markdown_en_span
</code></pre></div></div>

<blockquote>
  <p>두 경우 모두 <strong>상대경로는 requirements.txt 파일이 있는 위치 기준</strong> 으로 해석됩니다.</p>
</blockquote>

<hr />

<h1 id="2-설치">2) 설치</h1>

<p>프로젝트 루트에서:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> pip <span class="nb">install</span> <span class="nt">-U</span> pip          <span class="c"># 권장: 최신 pip (PEP 660 editable 지원)</span>
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div>

<blockquote>
  <p><strong>editable(-e)</strong> 설치가 제대로 되려면 pip가 <strong>PEP 660</strong> 을 지원해야 합니다(대부분 최신 pip OK).</p>
</blockquote>

<hr />

<h1 id="3-mkdocsyml-설정">3) mkdocs.yml 설정</h1>

<p>엔트리포인트를 등록해둔 상태라면(제가 준 <code class="language-plaintext highlighter-rouge">pyproject.toml</code> 기준) 아래처럼 간단히 사용 가능:</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">material</span>

<span class="na">markdown_extensions</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">en_span</span>               <span class="c1"># ← 방금 설치한 확장</span>
  <span class="c1"># - en_span:</span>
  <span class="c1">#     delim: "^^"       # 구분자 바꾸고 싶으면 옵션으로</span>
  <span class="c1">#     class: "en"</span>
  <span class="c1">#     lang: "en"</span>

<span class="na">extra_css</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">stylesheets/translation.css</span>
</code></pre></div></div>

<hr />

<h1 id="4-사용-예시">4) 사용 예시</h1>

<p><code class="language-plaintext highlighter-rouge">docs/index.md</code></p>
<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code>안녕하세요. %%Hello. Everyone.%%
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">docs/stylesheets/translation.css</code></p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">.md-typeset</span> <span class="nc">.en</span> <span class="p">{</span>
  <span class="nl">font-size</span><span class="p">:</span> <span class="m">0.85em</span><span class="p">;</span>
  <span class="nl">opacity</span><span class="p">:</span> <span class="m">0.65</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h1 id="5-자주-생기는-이슈--체크리스트">5) 자주 생기는 이슈 &amp; 체크리스트</h1>

<ul>
  <li>
    <p><strong>설치가 안 된다면</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">pip --version</code>으로 최신인지 확인(가능하면 21.3+).</p>
      </li>
      <li>
        <p>프로젝트 루트에서 <code class="language-plaintext highlighter-rouge">pip install -r requirements.txt</code> 실행했는지 확인.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">markdown_en_span/pyproject.toml</code> 파일이 실제로 존재하는지 확인.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>MkDocs가 확장을 못 찾는다면</strong></p>

    <ul>
      <li>
        <p>설치 성공 여부: <code class="language-plaintext highlighter-rouge">pip show markdown_en_span</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">mkdocs.yml</code>의 <code class="language-plaintext highlighter-rouge">markdown_extensions:</code>에 <code class="language-plaintext highlighter-rouge">en_span</code>이 들어있는지 확인.</p>
      </li>
      <li>
        <p>서버 재시작: <code class="language-plaintext highlighter-rouge">mkdocs serve</code> 다시 실행.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>원하시면 제가 제공했던 <code class="language-plaintext highlighter-rouge">pyproject.toml</code>/<code class="language-plaintext highlighter-rouge">__init__.py</code> 샘플을 그대로 붙여드릴게요(파일 내용 다시 필요하면 말해줘!).</p>]]></content><author><name>hvppyarchive</name></author><category term="markdown" /><summary type="html"><![CDATA[]]></summary></entry></feed>