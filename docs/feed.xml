<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://hvppyarchive.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hvppyarchive.github.io/" rel="alternate" type="text/html" /><updated>2025-08-21T19:10:49+09:00</updated><id>https://hvppyarchive.github.io/feed.xml</id><title type="html">ARCHIVE</title><subtitle>An amazing archive.</subtitle><author><name>hvppyarchive</name></author><entry><title type="html"></title><link href="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/" rel="alternate" type="text/html" title="" /><published>2025-08-21T19:10:49+09:00</published><updated>2025-08-21T19:10:49+09:00</updated><id>https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str</id><content type="html" xml:base="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/"><![CDATA[<p class="chat--user">

Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 함수와 <code class="language-plaintext highlighter-rouge">__str__</code> 함수의 차이점

</p>

<p>Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 과 <code class="language-plaintext highlighter-rouge">__str__</code> 의 차이점은 <strong>객체를 문자열로 표현하는 목적</strong> 에서 달라집니다. 차이를 단계적으로 정리해드릴게요.</p>

<hr />

<h2 id="1-__repr__-의-목적">1. <code class="language-plaintext highlighter-rouge">__repr__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>개발자 중심</strong> : 객체를 "개발자"가 보고 이해할 수 있도록 표현합니다.</p>
  </li>
  <li>
    <p><strong>재현 가능(reproducible)</strong> : 가능한 한 객체를 다시 만들 수 있는 코드 형태로 보여주는 것이 목표입니다.</p>
  </li>
  <li>
    <p>보통 <code class="language-plaintext highlighter-rouge">eval(repr(obj)) == obj</code> 가 성립하는 형태를 지향합니다 (꼭 항상 그런 건 아니지만 권장).</p>
  </li>
  <li>
    <p>디버깅할 때 주로 사용됩니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Person(name=</span><span class="sh">'</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s">, age=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>  <span class="c1"># Person(name='Alice', age=30)
</span></code></pre></div></div>

<hr />

<h2 id="2-__str__-의-목적">2. <code class="language-plaintext highlighter-rouge">__str__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>사용자 중심</strong> : 객체를 "사용자"가 보기 좋은 문자열로 표현합니다.</p>
  </li>
  <li>
    <p>읽기 쉽고 깔끔하게 출력하는 데 초점을 둡니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">print(obj)</code> 를 호출했을 때 보여지는 값이 <code class="language-plaintext highlighter-rouge">__str__</code> 입니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># Alice (30 years old)
</span></code></pre></div></div>

<hr />

<h2 id="3-__repr__-vs-__str__-비교">3. <code class="language-plaintext highlighter-rouge">__repr__</code> vs <code class="language-plaintext highlighter-rouge">__str__</code> 비교</h2>

<table>
  <thead>
    <tr>
      <th>특징</th>
      <th><code class="language-plaintext highlighter-rouge">__repr__</code></th>
      <th><code class="language-plaintext highlighter-rouge">__str__</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>목적</td>
      <td>개발자용, 디버깅</td>
      <td>사용자용, 가독성</td>
    </tr>
    <tr>
      <td>출력 대상</td>
      <td><code class="language-plaintext highlighter-rouge">repr(obj)</code>, 대화형 쉘에서 기본</td>
      <td><code class="language-plaintext highlighter-rouge">str(obj)</code>, <code class="language-plaintext highlighter-rouge">print(obj)</code></td>
    </tr>
    <tr>
      <td>형식</td>
      <td>객체 재현 가능하거나 상세</td>
      <td>읽기 쉬운 설명 위주</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="4-구현-시-주의사항">4. 구현 시 주의사항</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code> 가 없으면 <code class="language-plaintext highlighter-rouge">__repr__</code> 가 대신 사용</strong>됩니다.</p>
  </li>
  <li>
    <p>따라서 최소한 <code class="language-plaintext highlighter-rouge">__repr__</code> 은 정의해 두는 것이 좋습니다.</p>
  </li>
</ul>

<hr />

<p>👉 정리하면,</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__repr__</code></strong> : “개발자가 디버깅할 때” 객체의 정확한 표현.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code></strong> : “사용자가 출력물을 볼 때” 보기 좋게 표현.</p>
  </li>
</ul>

<hr />

<p>원하시면 <code class="language-plaintext highlighter-rouge">__repr__</code> 와 <code class="language-plaintext highlighter-rouge">__str__</code> 를 동시에 구현했을 때 <code class="language-plaintext highlighter-rouge">print(obj)</code> 와 <code class="language-plaintext highlighter-rouge">obj</code> (쉘 출력) 의 차이를 직접 실행해 보여드릴 수도 있는데, 예제 코드 시연을 원하시나요?</p>]]></content><author><name>hvppyarchive</name></author></entry><entry><title type="html">Python TextBuffer 구현</title><link href="https://hvppyarchive.github.io/python/python-textbuffer/" rel="alternate" type="text/html" title="Python TextBuffer 구현" /><published>2025-08-21T19:10:46+09:00</published><updated>2025-08-21T19:10:46+09:00</updated><id>https://hvppyarchive.github.io/python/python-textbuffer</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-textbuffer/"><![CDATA[<p class="chat--user">

Developer: 현재 Verilog 파일 처리와 관련된 여러 작업(예: 간단한 전처리/후처리 등)을 수행 중입니다. Raw Verilog 소스 코드를 저장할 수 있는 파이썬 클래스 개발을 검토하고 있습니다. Verilog 소스 코드는 문자열 형태로 보관하거나, 줄 단위로 split하여 List[str] 타입(줄바꿈 없이)으로 저장하거나, splitlines(keepends=True)를 사용해 줄바꿈이 포함된 리스트로 보관할 수 있습니다. 여러 방식이 프로젝트 내에서 혼용되면 혼란을 초래할 수 있으므로, 범용적으로 사용할 수 있도록 일관된 구조를 하나의 클래스에 통일할 것을 권장합니다. Begin with a concise checklist (3-7 bullets) of what you will do; keep items conceptual, not implementation-level. After each significant code or class design decision, briefly validate if the chosen approach aligns with the project's consistency and extensibility goals, and self-correct if needed.

</p>

<p>here’s the game plan:</p>

<ul>
  <li>
    <p>Define one <strong>canonical, internal representation</strong> for Verilog source and convert to/from other views.</p>
  </li>
  <li>
    <p>Normalize and <strong>track newline style</strong> for faithful round-trips (LF/CRLF/mixed).</p>
  </li>
  <li>
    <p>Expose <strong>consistent views</strong> (<code class="language-plaintext highlighter-rouge">as_string()</code>, <code class="language-plaintext highlighter-rouge">as_lines(keepends=...)</code>) instead of multiple storage forms.</p>
  </li>
  <li>
    <p>Provide a small, <strong>extensible transform pipeline</strong> for pre/post-processing (with history).</p>
  </li>
  <li>
    <p>Make edits <strong>immutable by default</strong> (return a new instance) with an opt-in <code class="language-plaintext highlighter-rouge">in_place=True</code>.</p>
  </li>
  <li>
    <p>Add <strong>I/O helpers</strong> (<code class="language-plaintext highlighter-rouge">from_*</code>, <code class="language-plaintext highlighter-rouge">to_file</code>) with explicit encoding and deterministic newline policy.</p>
  </li>
</ul>

<hr />

<h2 id="key-design-decisions-with-quick-self-checks">Key design decisions (with quick self-checks)</h2>

<ol>
  <li>
    <p><strong>Canonical storage = one normalized<code class="language-plaintext highlighter-rouge">str</code> (<code class="language-plaintext highlighter-rouge">\n</code> line endings).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> single source of truth avoids drift between parallel representations; Python string ops are fast and familiar.</p>
      </li>
      <li>
        <p><em>Consistency/Extensibility check:</em> callers always interact with one invariant; adding new views later won’t change storage. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Preserve original newline style as metadata (<code class="language-plaintext highlighter-rouge">'lf'|'crlf'|'mixed'</code>).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> we normalize internally but can emit exactly what the file used before, unless caller overrides.</p>
      </li>
      <li>
        <p><em>Check:</em> round-tripping is predictable across the project; future formatters can opt into a uniform style. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Views, not storage:</strong> <code class="language-plaintext highlighter-rouge">as_string(newline=...)</code> and <code class="language-plaintext highlighter-rouge">as_lines(keepends=False|True, newline=...)</code>.</p>

    <ul>
      <li>
        <p><em>Why:</em> banishes ad-hoc lists/strings in the codebase; one class hands out consistent views.</p>
      </li>
      <li>
        <p><em>Check:</em> API encourages a single pattern everywhere; avoids mixing representations in state. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Edits are immutable by default, with<code class="language-plaintext highlighter-rouge">in_place=True</code> for performance-critical paths.</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> functional style reduces surprise; explicit mutability keeps hot paths fast.</p>
      </li>
      <li>
        <p><em>Check:</em> consistent with safety + speed; cache invalidation is centralized. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Lazy, cached line splits (both with and without<code class="language-plaintext highlighter-rouge">keepends</code>).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> many tools need line access; caching avoids repeated <code class="language-plaintext highlighter-rouge">splitlines</code>.</p>
      </li>
      <li>
        <p><em>Check:</em> cache invalidated on any text change; future features (e.g., line index) can reuse it. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Transform pipeline:<code class="language-plaintext highlighter-rouge">apply(transformer)</code> where a transformer is a callable <code class="language-plaintext highlighter-rouge">text -&gt; text</code>, plus history.</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> flexible slot for “pre/post-processing” like trimming, EOL fixing, simple macro munging, etc.</p>
      </li>
      <li>
        <p><em>Check:</em> keeps responsibilities modular; easy to add/remove steps; provenance is recorded. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>I/O boundaries explicit:</strong> constructors for string/lines/file; <code class="language-plaintext highlighter-rouge">to_file(encoding, newline)</code>; no auto-detection magic.</p>

    <ul>
      <li>
        <p><em>Why:</em> explicit beats implicit; fewer surprises across platforms and CI.</p>
      </li>
      <li>
        <p><em>Check:</em> project-wide consistency; easy to thread encoding/newline policy from config. ✅</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="the-class">The class</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">import</span> <span class="n">hashlib</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span><span class="p">]</span>
<span class="n">EmitNewline</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">TextTransformer</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">A simple, composable transformer: text -&gt; text.</span><span class="sh">"""</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="bp">...</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TransformRecord</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">before_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">after_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">VerilogSource</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Canonical container for Verilog source.

    Invariants:
      - Internal storage `_text` always uses LF (</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="s">) line endings.
      - `_newline_style` records the original newline style encountered on load.
      - All edit methods are immutable by default; pass in_place=True to mutate.
    </span><span class="sh">"""</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">_text</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_newline_style</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_encoding</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_source_path</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_version</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_cached_lines</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_cached_lines_keepends</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_history</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">newline_style</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NewlineStyle</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">_assume_normalized</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">_assume_normalized</span><span class="p">:</span>
            <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">norm</span><span class="p">,</span> <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">prefer</span><span class="o">=</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># internal LF
</span>            <span class="k">if</span> <span class="n">newline_style</span> <span class="ow">and</span> <span class="n">newline_style</span> <span class="o">!=</span> <span class="n">style</span><span class="p">:</span>
                <span class="c1"># honor explicit override only for "mixed" -&gt; "lf/crlf" upgrade
</span>                <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">norm</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">style</span>  <span class="c1"># how it *came in* (for round-trip)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">encoding</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">source_path</span> <span class="k">else</span> <span class="bp">None</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_version</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>              <span class="c1"># keepends=False
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>     <span class="c1"># keepends=True
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># ---------- creation / I/O ----------
</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_string</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_lines</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="n">joined</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">joined</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">joined</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_file</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_string</span><span class="p">(</span><span class="n">newline</span><span class="o">=</span><span class="n">newline</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="n">ensure_trailing_newline</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">write_text</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">)</span>

    <span class="c1"># ---------- core views ----------
</span>
    <span class="k">def</span> <span class="nf">as_string</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="p">(</span><span class="ow">not</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">False</span> <span class="ow">and</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">newline</span> <span class="o">==</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">}[</span><span class="n">newline</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span>
        <span class="k">elif</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># "mixed" -&gt; default to CRLF for lines that originally were CRLF? We can't reconstruct mixed reliably.
</span>            <span class="c1"># project policy: emit LF for mixed unless caller overrides
</span>            <span class="k">return</span> <span class="n">s</span>

    <span class="k">def</span> <span class="nf">as_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">)</span>

    <span class="c1"># ---------- inspection ----------
</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">source_path</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">newline_style</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NewlineStyle</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">encoding</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">history</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">,</span> <span class="p">...]:</span>
        <span class="k">return</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">line_count</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">get_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="n">keepend</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>

    <span class="c1"># ---------- transforms / edits ----------
</span>
    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">transformer</span><span class="p">:</span> <span class="n">TextTransformer</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">record</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">before</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="n">after</span> <span class="o">=</span> <span class="nf">transformer</span><span class="p">(</span><span class="n">before</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">after</span> <span class="ow">is</span> <span class="n">before</span><span class="p">:</span>
            <span class="c1"># even if identity, return self or bump version in-place
</span>            <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">self</span>

        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">after</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">inst</span> <span class="o">=</span> <span class="nc">VerilogSource</span><span class="p">(</span>
                <span class="n">after</span><span class="p">,</span>
                <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span>
                <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span>
                <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)]</span>
            <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">replace</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">old</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">new</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">class</span> <span class="nc">_Repl</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span>
            <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">new</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nf">_Repl</span><span class="p">(),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">set_line</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># edit with keepends to keep layout
</span>        <span class="k">if</span> <span class="n">keepend</span><span class="p">:</span>
            <span class="c1"># caller provided EOL
</span>            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># normalize to internal LF
</span>            <span class="n">eol</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="k">if</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="sh">""</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span> <span class="o">+</span> <span class="n">eol</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">insert_lines</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">new_lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">nl</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">if</span> <span class="n">keepends</span> <span class="nf">else </span><span class="p">(</span><span class="n">ln</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">new_lines</span><span class="p">]</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span> <span class="o">+</span> <span class="n">nl</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">delete_lines</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">start</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">end</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">end</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ensure_trailing_newline</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="c1"># ---------- internals ----------
</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">prefer</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">NewlineStyle</span><span class="p">]:</span>
        <span class="n">has_crlf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="n">has_lf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="k">if</span> <span class="n">has_crlf</span> <span class="ow">and</span> <span class="n">has_lf</span> <span class="ow">and</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">text</span><span class="p">:</span>
            <span class="n">style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">has_crlf</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># coerce to LF
</span>        <span class="k">return</span> <span class="n">norm</span><span class="p">,</span> <span class="n">style</span>

    <span class="k">def</span> <span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="n">inst</span> <span class="o">=</span> <span class="nc">VerilogSource</span><span class="p">(</span>
            <span class="n">new_text</span><span class="p">,</span>
            <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
            <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span>
            <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span>
            <span class="n">_assume_normalized</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">_set_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">=</span> <span class="n">new_text</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_invalidate_cache</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_invalidate_cache</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_bump_version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_version</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">_mk_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TransformRecord</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">TransformRecord</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
            <span class="n">before_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">before</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
            <span class="n">after_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">after</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>Validation:</strong> The class enforces one storage invariant (LF string), exposes consistent views, and gives predictable I/O. It’s easy to extend with more transforms or richer metadata later. This aligns with our consistency goal and makes future preprocessors trivial to add. ✅</p>

<hr />

<h2 id="example-transformers-plug-and-play">Example transformers (plug-and-play)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TrimTrailingWhitespace</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">trim_trailing_ws</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="c1"># safe for Verilog; does not alter semantics
</span>        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="se">\t</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">())</span>

<span class="k">class</span> <span class="nc">EnsureFinalNewline</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ensure_final_newline</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">text</span> <span class="k">if</span> <span class="n">text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="nf">else </span><span class="p">(</span><span class="n">text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Validation:</strong> Transformers are plain callables; team members can add steps without touching the core class. History records provenance. ✅</p>

<hr />

<h2 id="typical-usage-uniform-across-the-project">Typical usage (uniform across the project)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load
</span><span class="n">src</span> <span class="o">=</span> <span class="n">VerilogSource</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Get views (without changing internal storage form)
</span><span class="n">text</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_string</span><span class="p">()</span>                            <span class="c1"># normalized LF by default (round-tripped on write)
</span><span class="n">lines</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">()</span>                            <span class="c1"># ['module top(', ...]
</span><span class="n">lines_ke</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>            <span class="c1"># ['module top(\n', ...]
</span>
<span class="c1"># Edits (immutable by default)
</span><span class="n">src2</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">set_line</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">// AUTOGEN: do not edit</span><span class="sh">"</span><span class="p">)</span>
<span class="n">src3</span> <span class="o">=</span> <span class="n">src2</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nc">TrimTrailingWhitespace</span><span class="p">())</span>

<span class="c1"># Save with original newline style, enforcing final newline
</span><span class="n">src3</span><span class="p">.</span><span class="nf">to_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Validation:</strong> This usage pattern prevents any accidental mixing of storage forms. Every operation goes through one API, keeping the project consistent. ✅</p>

<hr />

<h2 id="why-this-will-hold-up-on-bigger-needs">Why this will hold up on bigger needs</h2>

<ul>
  <li>
    <p><strong>Round-trip safety:</strong> We track original newline style and encoding; callers can enforce a project-wide style by always passing <code class="language-plaintext highlighter-rouge">newline="lf"</code> if desired.</p>
  </li>
  <li>
    <p><strong>Performance:</strong> Internal <code class="language-plaintext highlighter-rouge">str</code>, lazy line cache, optional in-place edits.</p>
  </li>
  <li>
    <p><strong>Extensibility:</strong> Add richer transforms (comment stripping, lightweight <code class="language-plaintext highlighter-rouge">\</code>line continuation` merges, macro stubs) without changing the core.</p>
  </li>
  <li>
    <p><strong>Determinism:</strong> No auto encoding detection; configs drive output style.</p>
  </li>
</ul>

<hr />

<h3 id="optional-next-steps-if-you-want-them">Optional next steps (if you want them)</h3>

<ul>
  <li>
    <p>Add a <code class="language-plaintext highlighter-rouge">LineIndex</code> helper for O(1) char-offset ↔ line/col mapping.</p>
  </li>
  <li>
    <p>Provide <code class="language-plaintext highlighter-rouge">diff(other)</code> to aid review bots.</p>
  </li>
  <li>
    <p>Introduce a config object (encoding/newline policy) to thread through I/O.</p>
  </li>
</ul>

<p>If you share any project constraints (e.g., must always emit LF, or enforce final newline), I can wire them into defaults so every team member gets the same behavior automatically.</p>

<p class="chat--user">

보다보니 굳이 VerilogSource에 한정될 필요는 없는거 같은데 범용적인 방법 추천있어?

</p>

<p>아주 좋아요—Verilog 전용이 아니라 <strong>언어 무관(Text-agnostic)</strong> 하게 쓰면 팀 전체에 더 깔끔합니다. 아래처럼 일반화하죠.</p>

<h3 id="체크리스트-개념-위주">체크리스트 (개념 위주)</h3>

<ul>
  <li>
    <p>하나의 <strong>범용 텍스트 컨테이너</strong> 로 표준화하고, 내부 표현은 단일 규칙(LF)로 고정</p>
  </li>
  <li>
    <p><strong>프로필(언어/포맷 메타데이터)</strong> 레이어로 주석/확장자 등만 바꿔 끼우기</p>
  </li>
  <li>
    <p><strong>일관된 뷰 API</strong>(문자열/줄 리스트)만 노출, 저장 형식은 1개</p>
  </li>
  <li>
    <p><strong>변환 파이프라인</strong>(transformer: <code class="language-plaintext highlighter-rouge">text -&gt; text</code>)과 기록(히스토리) 제공</p>
  </li>
  <li>
    <p><strong>불변 편집 기본 + 선택적 in-place</strong> , 캐시/버전 관리</p>
  </li>
  <li>
    <p>명시적 <strong>I/O 정책</strong>(인코딩/개행 방침)과 라운드트립 보장</p>
  </li>
</ul>

<hr />

<h2 id="설계-스텝각-스텝마다-빠른-검증-포함">설계 스텝(각 스텝마다 빠른 검증 포함)</h2>

<ol>
  <li>
    <p><strong>범용 컨테이너 =<code class="language-plaintext highlighter-rouge">TextBuffer</code> (내부 LF 문자열 1개만 저장)</strong></p>

    <ul>
      <li>
        <p><em>이유:</em> 상태가 하나면 표현 불일치가 사라짐.</p>
      </li>
      <li>
        <p><em>검증:</em> 프로젝트 일관성(✅) / 다른 언어로 확장 쉬움(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>메타데이터/프로필(<code class="language-plaintext highlighter-rouge">TextProfile</code>) 분리</strong></p>

    <ul>
      <li>
        <p>이름, 대표 확장자, 주석 마커 등은 “설명”일 뿐, 동작은 동일.</p>
      </li>
      <li>
        <p><em>검증:</em> 텍스트 코어는 같고, 언어별 규칙은 얹기만 함 → 확장성(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>뷰 API =<code class="language-plaintext highlighter-rouge">as_string(newline=...)</code>, <code class="language-plaintext highlighter-rouge">as_lines(keepends=...)</code></strong></p>

    <ul>
      <li>
        <p>저장은 1종, 뷰만 여러 형태로 “보여주기”.</p>
      </li>
      <li>
        <p><em>검증:</em> 코드베이스에서 혼용 방지(✅). 새 뷰 추가 시 내부는 그대로(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>개행 정책과 라운드트립</strong></p>

    <ul>
      <li>
        <p>로드 시 CRLF/혼합 감지 → 내부 LF로 정규화 + “원래 스타일” 메타 보존.</p>
      </li>
      <li>
        <p>저장 시 <code class="language-plaintext highlighter-rouge">original|lf|crlf</code> 선택, <code class="language-plaintext highlighter-rouge">ensure_trailing_newline</code> 옵션 제공.</p>
      </li>
      <li>
        <p><em>검증:</em> 재현성/예측가능성(✅). <em>혼합</em> 은 완전 복원 불가 → 정책상 LF로 내보내기(합리적 셀프코렉트).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>변환 파이프라인 + 역사(sha1)</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">apply(transformer)</code>로 조합 가능; 이름/해시 기록.</p>
      </li>
      <li>
        <p><em>검증:</em> 단계적 전/후처리의 표준 통로(✅). 원인 추적 용이(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>편집 모델: 불변 기본 +<code class="language-plaintext highlighter-rouge">in_place=True</code></strong></p>

    <ul>
      <li>
        <p>안전한 기본값, 고성능 경로 필요 시 명시적 사용.</p>
      </li>
      <li>
        <p><em>검증:</em> 안전/성능 균형(✅). 캐시 무효화 한 곳에서 관리(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>I/O 경계는 명시적</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">from_*</code>/<code class="language-plaintext highlighter-rouge">to_file(encoding,newline)</code>에서만 환경 영향을 받도록.</p>
      </li>
      <li>
        <p><em>검증:</em> CI/OS 차이 최소화(✅).</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="범용-구현-스켈레톤-python">범용 구현 스켈레톤 (Python)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">import</span> <span class="n">hashlib</span><span class="p">,</span> <span class="n">time</span>

<span class="c1"># ---- Profiles (언어/포맷 설명용 메타) ----
</span><span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TextProfile</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">plain</span><span class="sh">"</span>
    <span class="n">file_exts</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>
    <span class="n">line_comment_markers</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>
    <span class="n">block_comment_markers</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">],</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>

<span class="c1"># 예시 프로필
</span><span class="n">VERILOG</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">verilog</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">file_exts</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">.v</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.sv</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">line_comment_markers</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">//</span><span class="sh">"</span><span class="p">,),</span>
    <span class="n">block_comment_markers</span><span class="o">=</span><span class="p">((</span><span class="sh">"</span><span class="s">/*</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">*/</span><span class="sh">"</span><span class="p">),),</span>
<span class="p">)</span>
<span class="n">PYTHON</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">python</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">file_exts</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">.py</span><span class="sh">"</span><span class="p">,),</span>
    <span class="n">line_comment_markers</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">#</span><span class="sh">"</span><span class="p">,),</span>
<span class="p">)</span>

<span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span><span class="p">]</span>
<span class="n">EmitNewline</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">TextTransformer</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="bp">...</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TransformRecord</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">before_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">after_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    범용 텍스트 컨테이너(언어-무관).
    내부 규칙:
      - _text 는 항상 LF(</span><span class="sh">'</span><span class="se">\\</span><span class="s">n</span><span class="sh">'</span><span class="s">)로 정규화된 단일 문자열
      - 원본 개행 스타일/인코딩/경로/프로필을 메타로 보관
      - 불변 편집 기본, in_place=True로 명시적 변경 가능
    </span><span class="sh">"""</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">_text</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_newline_style</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_encoding</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_source_path</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_profile</span><span class="sh">"</span><span class="p">,</span>
                 <span class="sh">"</span><span class="s">_version</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_cached_lines</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_cached_lines_keepends</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_history</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">newline_style</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NewlineStyle</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">_assume_normalized</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">_assume_normalized</span><span class="p">:</span>
            <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">norm</span><span class="p">,</span> <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">norm</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">style</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">encoding</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">source_path</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="n">profile</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_version</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># ---------- constructors / I-O ----------
</span>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_string</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
                    <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_lines</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                   <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span> <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
                   <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">joined</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span> <span class="k">if</span> <span class="n">keepends</span> <span class="k">else</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">joined</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
                  <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_file</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_string</span><span class="p">(</span><span class="n">newline</span><span class="o">=</span><span class="n">newline</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="n">ensure_trailing_newline</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">write_text</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">)</span>

    <span class="c1"># ---------- views ----------
</span>    <span class="k">def</span> <span class="nf">as_string</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
                  <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">+=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">False</span> <span class="ow">and</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

        <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span> <span class="k">if</span> <span class="n">newline</span> <span class="o">==</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">}[</span><span class="n">newline</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span>
        <span class="k">elif</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># mixed는 정확 복원이 불가 → 정책상 LF로 내보냄
</span>            <span class="k">return</span> <span class="n">s</span>

    <span class="k">def</span> <span class="nf">as_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">)</span>

    <span class="c1"># ---------- inspection ----------
</span>    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">profile</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TextProfile</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_profile</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">source_path</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">newline_style</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NewlineStyle</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">encoding</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">history</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">,</span> <span class="p">...]:</span> <span class="k">return</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">line_count</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span> <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">get_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="n">keepend</span><span class="p">)[</span><span class="n">idx</span><span class="p">]</span>

    <span class="c1"># ---------- edits / transforms ----------
</span>    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">transformer</span><span class="p">:</span> <span class="n">TextTransformer</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
              <span class="n">record</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">before</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="n">after</span> <span class="o">=</span> <span class="nf">transformer</span><span class="p">(</span><span class="n">before</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">after</span> <span class="ow">is</span> <span class="n">before</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">after</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">inst</span> <span class="o">=</span> <span class="nc">TextBuffer</span><span class="p">(</span><span class="n">after</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">,</span> <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                              <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span> <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)]</span>
            <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">replace</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">old</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">new</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">class</span> <span class="nc">_Repl</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span>
            <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">new</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nf">_Repl</span><span class="p">(),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">set_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                 <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">keepend</span><span class="p">:</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">eol</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="k">if</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="sh">""</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span> <span class="o">+</span> <span class="n">eol</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">insert_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">new_lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                     <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">nl</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">if</span> <span class="n">keepends</span> <span class="nf">else </span><span class="p">(</span><span class="n">ln</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">new_lines</span><span class="p">]</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span> <span class="o">+</span> <span class="n">nl</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">:]),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">delete_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">start</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">end</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">end</span><span class="p">:]),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ensure_trailing_newline</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span> <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="c1"># ---------- internals ----------
</span>    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">NewlineStyle</span><span class="p">]:</span>
        <span class="n">has_crlf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="n">has_lf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="k">if</span> <span class="n">has_crlf</span> <span class="ow">and</span> <span class="n">has_lf</span> <span class="ow">and</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">text</span><span class="p">:</span> <span class="n">style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">has_crlf</span><span class="p">:</span> <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">),</span> <span class="n">style</span>

    <span class="k">def</span> <span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">);</span> <span class="k">return</span> <span class="n">self</span>
        <span class="n">inst</span> <span class="o">=</span> <span class="nc">TextBuffer</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">,</span> <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                          <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span> <span class="n">_assume_normalized</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">_set_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">=</span> <span class="n">new_text</span><span class="p">;</span> <span class="n">self</span><span class="p">.</span><span class="nf">_invalidate_cache</span><span class="p">();</span> <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_invalidate_cache</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="bp">None</span><span class="p">;</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_bump_version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">_mk_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TransformRecord</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">TransformRecord</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
            <span class="n">before_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">before</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
            <span class="n">after_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">after</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
        <span class="p">)</span>
    <span class="k">def</span> <span class="nf">_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>검증 요약:</strong> 내부 저장 1종(LF), 뷰 API 고정, 변환/편집/히스토리 표준화 → <strong>일관성</strong> 과 <strong>확장성</strong> 목표에 부합(✅). <em>혼합 개행 복원 한계</em> 는 정책으로 명시하여 팀 혼선을 차단(셀프코렉트 완료).</p>

<hr />

<h2 id="사용-예-언어-불문">사용 예 (언어 불문)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Verilog도 Python도 동일한 API
</span><span class="n">buf</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>

<span class="c1"># 일관된 뷰
</span><span class="n">text</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_string</span><span class="p">()</span>
<span class="n">lines</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">()</span>
<span class="n">lines_ke</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># 불변 편집 + 파이프라인
</span><span class="k">class</span> <span class="nc">TrimTrailingWS</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">trim_trailing_ws</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="se">\t</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">())</span>

<span class="n">buf2</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">set_line</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">// AUTOGEN: do not edit</span><span class="sh">"</span><span class="p">)</span>
<span class="n">buf3</span> <span class="o">=</span> <span class="n">buf2</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nc">TrimTrailingWS</span><span class="p">())</span>
<span class="n">buf3</span><span class="p">.</span><span class="nf">to_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="verilog-전용-api가-필요하면">Verilog 전용 API가 필요하면?</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">VerilogSource = TextBuffer</code>에 <code class="language-plaintext highlighter-rouge">profile=VERILOG</code>만 기본값으로 래핑(또는 서브클래싱)하면 됩니다. 코드베이스는 <strong>항상<code class="language-plaintext highlighter-rouge">TextBuffer</code> API</strong>만 사용하므로 혼용이 사라집니다.</li>
</ul>

<hr />

<h2 id="권장-정책팀-규칙으로-고정-추천">권장 정책(팀 규칙으로 고정 추천)</h2>

<ul>
  <li>
    <p>저장 시 기본 <code class="language-plaintext highlighter-rouge">newline="original"</code>(레거시 유지) → 리포맷 단계에서 일괄 <code class="language-plaintext highlighter-rouge">lf</code> 전환 선택 가능.</p>
  </li>
  <li>
    <p>모든 변환은 <strong>Transformer</strong> 로만 수행(직접 문자열 조작 금지).</p>
  </li>
  <li>
    <p>CI에 <code class="language-plaintext highlighter-rouge">ensure_trailing_newline=True</code> + <code class="language-plaintext highlighter-rouge">TrimTrailingWS</code> 적용.</p>
  </li>
</ul>

<p>필요하면 토큰화나 라인-오프셋 매핑, <code class="language-plaintext highlighter-rouge">diff(other)</code> 같은 유틸을 얹을 수 있게 설계해 두었습니다. 원하는 기본 프로필(Verilog/Lex/YAML 등) 목록을 알려주시면 템플릿으로 함께 추가해 드릴게요.</p>

<p class="chat--user">

이런 일을 하는 유명한 클래스나 파이썬 내장은 없어?

</p>

<p>다음 순서로 생각해볼게요 (개념 체크리스트):</p>

<ul>
  <li>
    <p>표준 라이브러리에 “그 일을 전부” 하는 <strong>단일 클래스는 없다</strong> → 조합해서 써야 함.</p>
  </li>
  <li>
    <p>가장 가까운 <strong>표준 도구들</strong> 이 무엇인지 파악하고, 무엇이 <strong>부족</strong> 한지 명확히 하기.</p>
  </li>
  <li>
    <p>부족한 부분(개행 추적·일관된 뷰·변환 파이프라인)은 <strong>얇은 래퍼</strong> 로 보완.</p>
  </li>
  <li>
    <p>최소주의 버전(함수 2–3개)과 확장형(클래스) 중 팀 정책에 맞게 선택.</p>
  </li>
</ul>

<hr />

<h2 id="짧은-결론">짧은 결론</h2>

<ul>
  <li><strong>표준/유명 내장에 “텍스트 컨테이너 + 개행 정책 + 변환/히스토리”를 한 번에 제공하는 건 없습니다.</strong><br />
따라서 지금까지 제안한 <code class="language-plaintext highlighter-rouge">TextBuffer</code> 같은 얇은 래퍼가 <strong>일관성</strong> 과 <strong>라운드트립 보장</strong> 면에서 가장 현실적입니다.<br />
<em>검증:</em> 팀 전역 일관성과 확장성 목표에 부합. ✅</li>
</ul>

<hr />

<h2 id="가장-가까운-표준-도구들무엇을-해주고못-해주는가">가장 가까운 표준 도구들(무엇을 해주고/못 해주는가)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">io.StringIO</code><br />
메모리 파일 객체. 줄 단위 읽기/쓰기 쉽지만 <strong>원본 개행 스타일 추적 X</strong> , 변환/히스토리 X.<br />
<em>검증:</em> “일관된 내부 표현” 요구에 미달 → 래퍼 필요. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">open(..., newline=...)</code> / <code class="language-plaintext highlighter-rouge">pathlib.Path.read_text()/write_text()</code><br />
텍스트 모드에서 <strong>개행 변환을 제어</strong>(쓰기 시 <code class="language-plaintext highlighter-rouge">newline='\n'</code> 강제 등) 가능. 하지만 <strong>읽을 때 원본이 CRLF/혼합이었는지</strong> 를 보존하진 않음(보통 <code class="language-plaintext highlighter-rouge">\n</code>으로 흡수).<br />
<em>검증:</em> 라운드트립용 “원래 개행 스타일” 메타 보존이 없다 → 래퍼 필요. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">fileinput</code><br />
여러 파일을 한 줄 스트림처럼 순회. <strong>컨테이너 아님</strong> , 상태/뷰/히스토리 X. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">difflib</code><br />
차이 계산·패치 출력을 도와줌. <strong>변환 파이프라인/저장소</strong> 는 아님. 보조 도구로는 유용. 🆗</p>
  </li>
  <li>
    <p>(<code class="language-plaintext highlighter-rouge">tokenize</code>, <code class="language-plaintext highlighter-rouge">ast</code>, <code class="language-plaintext highlighter-rouge">parso</code> 등)<br />
언어별 파서/토크나이저. “구문 인지 변환”에는 좋지만 <strong>범용 텍스트 컨테이너 역할</strong> 은 아님. 보조. 🆗</p>
  </li>
</ul>

<blockquote>
  <p>요약: <strong>조각들은 있지만, “일관 컨테이너 + 개행 정책 + 변환/히스토리” 조합은 직접 얇게 감싸야</strong> 합니다.</p>
</blockquote>

<hr />

<h2 id="최소주의-대안클래스-없이-함수-3개로">최소주의 대안(클래스 없이 함수 3개로)</h2>

<p>클래스가 부담이면, 팀 규칙을 함수로 고정하세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="k">def</span> <span class="nf">detect_newline_style</span><span class="p">(</span><span class="n">raw</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>  <span class="c1"># "lf" | "crlf" | "mixed"
</span>    <span class="n">crlf</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lf</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">cr</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">)</span> <span class="o">-</span> <span class="n">crlf</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">crlf</span> <span class="ow">and</span> <span class="p">(</span><span class="n">lf</span> <span class="o">-</span> <span class="n">crlf</span><span class="p">))</span> <span class="ow">or</span> <span class="n">cr</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  <span class="c1"># 서로 섞여 있으면 mixed
</span>        <span class="k">return</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span> <span class="k">if</span> <span class="n">crlf</span> <span class="k">else</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">normalize_to_lf</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">emit_with_newline</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">style</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span> <span class="k">else</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># mixed는 정책상 lf 취급 권장
</span></code></pre></div></div>

<p>사용 패턴:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raw</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">p</span><span class="p">).</span><span class="nf">read_bytes</span><span class="p">()</span>
<span class="n">style</span> <span class="o">=</span> <span class="nf">detect_newline_style</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>          <span class="c1"># 원본 스타일 메타
</span><span class="n">text</span> <span class="o">=</span> <span class="nf">normalize_to_lf</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
<span class="n">lines</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()</span>                  <span class="c1"># 필요한 뷰
</span><span class="n">out</span> <span class="o">=</span> <span class="nf">emit_with_newline</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">style</span><span class="p">)</span>       <span class="c1"># 저장 시 라운드트립
</span></code></pre></div></div>

<ul>
  <li><em>검증:</em> “단일 내부 표현(LF 문자열) + 원본 개행 메타 보존”을 만족. 변환 파이프라인/히스토리는 여전히 없으므로, 필요 시 클래스로 승격. ✅</li>
</ul>

<hr />

<h2 id="언제-표준만으로-충분하고-언제-래퍼가-필요한가">언제 표준만으로 충분하고, 언제 래퍼가 필요한가</h2>

<ul>
  <li>
    <p><strong>충분한 경우:</strong> 단순 읽기/쓰기 + 포맷터(예: pre-commit 훅으로 trailing space 제거, EOF newline 강제). 변환 기록/뷰 일관성이 크게 중요치 않을 때.</p>
  </li>
  <li>
    <p><strong>래퍼 필요:</strong></p>

    <ul>
      <li>
        <p>라운드트립 정확도(원본 개행 정책 유지)가 중요</p>
      </li>
      <li>
        <p>코드베이스에서 “문자열/lines 혼용”을 금지하고 <strong>한 API로 통일</strong> 하고 싶을 때</p>
      </li>
      <li>
        <p>전/후처리를 <strong>파이프라인 + 히스토리</strong> 로 관리하고 싶을 때</p>
      </li>
    </ul>
  </li>
</ul>

<p><em>검증:</em> 우리 요구사항(일관성·확장성·라운드트립) 기준으로는 래퍼가 맞음. ✅</p>

<hr />

<h2 id="참고서드파티-조합-아이디어">참고(서드파티 조합 아이디어)</h2>

<ul>
  <li>
    <p><strong>pre-commit / pre-commit-hooks</strong> : <code class="language-plaintext highlighter-rouge">end-of-file-fixer</code>, <code class="language-plaintext highlighter-rouge">trailing-whitespace</code>, <code class="language-plaintext highlighter-rouge">mixed-line-ending</code> 등으로 저장소 수준 위생 관리.<br />
<em>역할 보완:</em> 파이프라인 일부를 CI로 밀어내 일관성 강화. ✅</p>
  </li>
  <li>
    <p><strong>difflib / unidiff</strong> : 변환 결과를 리뷰하기 쉬운 패치로 제시.<br />
<em>역할 보완:</em> 팀 리뷰 경험 개선. ✅</p>
  </li>
</ul>

<hr />

<h3 id="정리">정리</h3>

<ul>
  <li>
    <p>“그 일을 전부 하는” 유명 내장/클래스는 없음.</p>
  </li>
  <li>
    <p>표준 도구(특히 <code class="language-plaintext highlighter-rouge">open/newline</code>, <code class="language-plaintext highlighter-rouge">Path.write_text(newline=...)</code>)는 <strong>출력 정책 강제</strong> 에는 충분하나, <strong>원본 개행 추적/일관 뷰/히스토리</strong> 는 커버하지 못함.</p>
  </li>
  <li>
    <p>팀 차원의 일관성과 확장성을 원하면, 지금 설계한 <strong>얇은 범용 래퍼</strong>(또는 위의 <strong>함수 3개 + 규칙</strong>)가 가장 안전합니다.</p>
  </li>
</ul>

<p class="chat--user">

@classmethod def from_file(cls, path: Path | str, *, profile: TextProfile = TextProfile(), encoding: str = "utf-8") -&gt; "TextBuffer": p = Path(path) text = p.read_text(encoding=encoding) return cls(text, profile=profile, encoding=encoding, source_path=p) 여기 중간에 있는 * 은 뭐야? 이런 문법 처음봐

</p>

<p>짧게 체크리스트:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 는 <strong>키워드 전용(Keyword-only) 인자 구분자</strong> 예요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 뒤에 나오는 파라미터는 <strong>반드시<code class="language-plaintext highlighter-rouge">name=value</code> 형태로</strong> 호출해야 해요.</p>
  </li>
  <li>
    <p>목적: <strong>가독성↑</strong> , <strong>실수 방지</strong>(순서 착각), <strong>API 확장성</strong>(새 옵션 추가해도 안전).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 자체는 <code class="language-plaintext highlighter-rouge">*args</code>와 다릅니다(수집 아님, <strong>구분자</strong> 일 뿐).</p>
  </li>
</ul>

<hr />

<h3 id="한-줄-요약">한 줄 요약</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
              <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
</code></pre></div></div>

<p>여기 가운데 <code class="language-plaintext highlighter-rouge">*</code> 때문에 <code class="language-plaintext highlighter-rouge">profile</code>과 <code class="language-plaintext highlighter-rouge">encoding</code>은 <strong>키워드로만</strong> 넘길 수 있습니다.</p>

<ul>
  <li>✅ 올바른 호출:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 기본값 사용
</span><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-16</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>❌ 잘못된 호출(순서로 넘김):
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">VERILOG</span><span class="p">)</span>
<span class="c1"># TypeError: ... takes 2 positional arguments but 3 were given
</span></code></pre></div>    </div>
  </li>
</ul>

<hr />

<h3 id="왜-쓰나요-step-by-step-사고">왜 쓰나요? (step-by-step 사고)</h3>

<ol>
  <li>
    <p><strong>의미가 분명해집니다.</strong><br />
<code class="language-plaintext highlighter-rouge">profile=VERILOG</code> 처럼 이름이 보이니, 인자 의미를 헷갈릴 일이 줄어요.<br />
→ 프로젝트 <strong>일관성</strong> 목표에 부합. ✅</p>
  </li>
  <li>
    <p><strong>파라미터 순서 변경에 강합니다.</strong><br />
나중에 옵션을 더 추가해도 기존 호출부는 <code class="language-plaintext highlighter-rouge">name=value</code>라 <strong>깨지지 않음</strong>.<br />
→ API <strong>확장성</strong> 목표에 부합. ✅</p>
  </li>
  <li>
    <p><strong>실수 방지.</strong><br />
<code class="language-plaintext highlighter-rouge">profile</code>과 <code class="language-plaintext highlighter-rouge">encoding</code>을 순서로 바꿔 넣는 실수를 차단. ✅</p>
  </li>
</ol>

<hr />

<h3 id="-와-args-의-차이"><code class="language-plaintext highlighter-rouge">*</code> 와 <code class="language-plaintext highlighter-rouge">*args</code> 의 차이</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> (단독): <strong>구분자</strong>. 뒤의 인자들을 <strong>키워드 전용</strong> 으로 만듭니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*args</code>: 남는 위치 인자들을 <strong>튜플로 수집</strong> 합니다. (수집 + 구분자 역할 모두)</p>
  </li>
</ul>

<p>예:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>         <span class="c1"># b, c는 키워드-only
</span>    <span class="bp">...</span>

<span class="k">def</span> <span class="nf">g</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span> <span class="c1"># a는 위치, args는 추가 위치들 수집, b는 키워드-only
</span>    <span class="bp">...</span>
</code></pre></div></div>

<hr />

<h3 id="보너스--positional-only-도-있어요">보너스: <code class="language-plaintext highlighter-rouge">/</code> (positional-only) 도 있어요</h3>

<p>Python 3.8+ 부터는 <code class="language-plaintext highlighter-rouge">/</code> 로 <strong>위치 전용</strong> 인자를 강제할 수 있습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">h</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>  <span class="c1"># a: 위치-only, b: 둘 다 가능, c: 키워드-only
</span>    <span class="bp">...</span>
</code></pre></div></div>

<hr />

<h3 id="타입-힌트-관련">타입 힌트 관련</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Path | str</code> 는 <strong>Python 3.10+</strong> 의 Union 약식 문법입니다(이전 버전은 <code class="language-plaintext highlighter-rouge">Union[Path, str]</code>).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">TextProfile()</code> 을 기본값으로 두면 <strong>정의 시점에</strong> 한 번 생성된 인스턴스를 재사용합니다.<br />
여기서는 <code class="language-plaintext highlighter-rouge">@dataclass(frozen=True)</code>라 <strong>불변</strong> 이므로 안전하지만,<br />
일반적으로는 <code class="language-plaintext highlighter-rouge">None</code> 기본값 + 함수 내부에서 생성하는 패턴도 고려하세요.</p>
  </li>
</ul>

<hr />

<p>필요하면, 팀 규칙으로 “옵션 인자는 모두 <code class="language-plaintext highlighter-rouge">*</code> 뒤에 배치”를 정해두면 호출부가 항상 <code class="language-plaintext highlighter-rouge">name=value</code>라 깔끔하고, 장기 유지보수에 유리합니다.</p>

<p class="chat--user">

__slots__는 뭐야?

</p>

<p>짧은 체크리스트(개념):</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">__slots__</code>는 <strong>인스턴스가 가질 수 있는 속성 이름들을 고정</strong> 하는 메커니즘이다.</p>
  </li>
  <li>
    <p>효과: <strong>메모리 절감</strong> , <strong>속성 접근 소폭 빠름</strong> , <strong>오타/임의 속성 추가 방지</strong>.</p>
  </li>
  <li>
    <p>선언: <code class="language-plaintext highlighter-rouge">class C: __slots__ = ('a', 'b')</code> 처럼 <strong>튜플/리스트/이터러블</strong> 에 이름을 나열.</p>
  </li>
  <li>
    <p>주의: <strong>동적 속성 추가 불가</strong> , 상속/디폴트/<code class="language-plaintext highlighter-rouge">__dict__</code>/<code class="language-plaintext highlighter-rouge">__weakref__</code> 처리에 신경.</p>
  </li>
  <li>
    <p>권장 사용: <strong>인스턴스가 아주 많고 필드 스키마가 고정</strong> 된 클래스.</p>
  </li>
</ul>

<hr />

<h1 id="한-줄-정의">한 줄 정의</h1>

<p><code class="language-plaintext highlighter-rouge">__slots__</code>를 정의하면 해당 클래스의 인스턴스는 <strong>per-instance<code class="language-plaintext highlighter-rouge">__dict__</code>를 만들지 않고</strong>, 미리 정해둔 슬롯(고정 필드)만 메모리에 <strong>compact</strong> 하게 저장한다.</p>

<hr />

<h2 id="왜-쓰나-step-by-step">왜 쓰나 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>메모리 절감</strong> : <code class="language-plaintext highlighter-rouge">__dict__</code>(해시맵) 대신 <strong>슬롯 배열</strong> 을 써서 인스턴스당 수십 바이트~수백 바이트를 아낀다(필드 수/파이썬 구현에 따라 상이). 대량 객체(예: 수십만 개)에서 큰 차이.</p>
  </li>
  <li>
    <p><strong>속성 접근 비용 감소</strong> : 해시 조회가 아닌 <strong>오프셋 접근</strong> 이라 약간 빠르다(미세하지만 누적되면 의미).</p>
  </li>
  <li>
    <p><strong>API 안전성</strong> : 선언되지 않은 속성은 설정 자체가 에러 → <strong>오타/임의 필드</strong> 방지.</p>
  </li>
</ol>

<hr />

<h2 id="어떻게-쓰나">어떻게 쓰나</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">next</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 인스턴스 필드 스키마 고정
</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>   <span class="c1"># OK
</span>        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>     <span class="c1"># OK
</span>
<span class="n">n</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">n</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">2</span>      <span class="c1"># OK
</span><span class="n">n</span><span class="p">.</span><span class="n">other</span> <span class="o">=</span> <span class="mi">3</span>      <span class="c1"># AttributeError: 'Node' object has no attribute 'other'
</span></code></pre></div></div>

<ul>
  <li>
    <p><strong>디폴트값</strong> 은 보통 <code class="language-plaintext highlighter-rouge">__init__</code>에서 채운다.</p>
  </li>
  <li>
    <p>클래스 속성으로 기본값을 주고 싶다면:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1"># 모든 인스턴스의 초기 읽기는 10으로 보이지만,
</span>            <span class="c1"># 인스턴스에 a를 설정하면 인스턴스 슬롯 값이 우선한다.
</span></code></pre></div>    </div>
  </li>
</ul>

<hr />

<h2 id="자주-부딪히는-포인트-꼭-알아둘-것">자주 부딪히는 포인트 (꼭 알아둘 것)</h2>

<h3 id="1-__dict__--__weakref__가-필요하면">1) <code class="language-plaintext highlighter-rouge">__dict__</code> / <code class="language-plaintext highlighter-rouge">__weakref__</code>가 필요하면?</h3>

<ul>
  <li>
    <p>기본적으로 <code class="language-plaintext highlighter-rouge">__slots__</code> 클래스에는 <strong>인스턴스<code class="language-plaintext highlighter-rouge">__dict__</code>가 없다</strong>.</p>
  </li>
  <li><strong>예외적으로</strong> 동적 속성을 허용하고 싶다면 슬롯에 <code class="language-plaintext highlighter-rouge">"__dict__"</code>를 명시:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__dict__</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 슬롯 + 동적 속성 허용
</span></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">weakref</code>를 쓰려면 <code class="language-plaintext highlighter-rouge">"__weakref__"</code>도 포함:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__weakref__</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-상속">2) 상속</h3>

<ul>
  <li>
    <p><strong>슬롯 클래스의 서브클래스</strong> 가 <code class="language-plaintext highlighter-rouge">__slots__</code>를 정의하지 않으면, 서브클래스는 <strong>다시<code class="language-plaintext highlighter-rouge">__dict__</code>가 생긴다</strong>(동적 속성 가능).<br />
→ 계속 제한하고 싶다면 <strong>서브클래스에서도<code class="language-plaintext highlighter-rouge">__slots__</code>를 정의</strong>해야 한다.</p>
  </li>
  <li>
    <p>서브클래스에서 <strong>부모 슬롯 이름을 다시 적지 않는다</strong>. 새로 추가하는 슬롯만 나열:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,)</span>
    
<span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,)</span>  <span class="c1"># 'a'는 이미 Base에 있으므로 중복 기재 X
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-다중-상속">3) 다중 상속</h3>

<ul>
  <li>
    <p>다중 상속에서 <strong>슬롯이 서로 충돌</strong> 하면 에러가 날 수 있다.</p>
  </li>
  <li>
    <p>실무 팁: 다중 상속을 최소화하거나, <strong>한쪽만 슬롯</strong> 을 쓰고 다른 쪽은 데이터 없는 믹스인으로 설계.</p>
  </li>
</ul>

<h3 id="4-dataclass와의-결합">4) dataclass와의 결합</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@dataclass(slots=True)</code>(Py3.10+)를 쓰면 <strong>자동으로<code class="language-plaintext highlighter-rouge">__slots__</code>가 생성</strong>된다.</p>
  </li>
  <li>
    <p>이미 수동으로 <code class="language-plaintext highlighter-rouge">__slots__</code>를 정의했다면, <code class="language-plaintext highlighter-rouge">slots=True</code>를 <strong>중복으로 쓰지 않는다</strong>(충돌/중복 정의 주의).</p>
  </li>
</ul>

<h3 id="5-pickle--직렬화">5) pickle / 직렬화</h3>

<ul>
  <li>
    <p>많은 경우 <strong>잘 작동</strong> 하지만, 어떤 프레임워크는 <code class="language-plaintext highlighter-rouge">__dict__</code>를 기대한다.</p>
  </li>
  <li>
    <p>커스텀 직렬화 필요하면 <code class="language-plaintext highlighter-rouge">__getstate__/__setstate__</code>를 구현해 <strong>슬롯 값들을 딕트로 변환</strong> 하는 방식 사용.</p>
  </li>
</ul>

<h3 id="6-프로파일링디버깅-도구">6) 프로파일링/디버깅 도구</h3>

<ul>
  <li>
    <p>일부 도구가 <code class="language-plaintext highlighter-rouge">obj.__dict__</code>를 바로 펼치려다 당황할 수 있다.</p>
  </li>
  <li>
    <p>이런 도구를 쓰면 <code class="language-plaintext highlighter-rouge">"__dict__"</code> 슬롯을 추가하거나, 보조 메서드(예: <code class="language-plaintext highlighter-rouge">to_dict()</code>) 제공.</p>
  </li>
</ul>

<hr />

<h2 id="언제-쓰면-좋은가--피해야-하는가">언제 쓰면 좋은가 / 피해야 하는가</h2>

<p><strong>적합</strong></p>

<ul>
  <li>
    <p>인스턴스가 <strong>엄청 많다</strong> (e.g., 파서 토큰, AST 노드, 로그 레코드 등).</p>
  </li>
  <li>
    <p>속성 스키마가 <strong>변하지 않는다</strong>.</p>
  </li>
  <li>
    <p>라이브러리/코어 레이어에서 <strong>API 안정성</strong> 과 <strong>메모리 효율</strong> 이 중요하다.</p>
  </li>
</ul>

<p><strong>부적합</strong></p>

<ul>
  <li>
    <p>동적으로 속성을 붙였다 뗐다 해야 한다.</p>
  </li>
  <li>
    <p>디버깅/관찰 도구가 <code class="language-plaintext highlighter-rouge">__dict__</code>에 강하게 의존한다.</p>
  </li>
  <li>
    <p>다중 상속 구조가 복잡하다(충돌 위험).</p>
  </li>
</ul>

<hr />

<h2 id="여러분-코드베이스-관점빠른-셀프-체크">여러분 코드베이스 관점(빠른 셀프 체크)</h2>

<ul>
  <li>
    <p>텍스트 버퍼/소스 컨테이너처럼 <strong>필드가 고정</strong> 되고, <strong>많은 인스턴스</strong> 를 만들 가능성이 있다면 <code class="language-plaintext highlighter-rouge">__slots__</code>는 <strong>일관성/성능</strong> 목표에 부합합니다. ✅</p>
  </li>
  <li>
    <p>단, 변환 파이프라인/메타 확장이 잦고 <strong>동적 필드 추가 가능성</strong> 이 있다면, <code class="language-plaintext highlighter-rouge">__slots__</code> 대신 일반 클래스(또는 <code class="language-plaintext highlighter-rouge">__slots__</code>에 <code class="language-plaintext highlighter-rouge">"__dict__"</code> 포함)로 <strong>유연성</strong> 을 남기는 것이 안전합니다. ✅</p>
  </li>
</ul>

<hr />

<h2 id="미니-예시-dataclass--slots">미니 예시: dataclass + slots</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">slots</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># Py3.10+
</span><span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="n">kind</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">value</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">line</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">col</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div></div>

<ul>
  <li>메모리 절감 + 오타 방지 + 명확한 스키마를 한 번에 확보.</li>
</ul>

<p>필요하면, 현재 설계한 <code class="language-plaintext highlighter-rouge">TextBuffer</code>/<code class="language-plaintext highlighter-rouge">VerilogSource</code>에 <code class="language-plaintext highlighter-rouge">__slots__</code>를 적용할 때의 <strong>필드 목록/상속 전략</strong> 을 바로 제안해 드릴게요.</p>

<p class="chat--user">

그냥 타입 판별해서 자동으로 만들게 하는 방식 어때 from_lines, from_string, from_textbuffer 구별하기가 좀 귀찮은데, isinstance 같은걸로 비교해서 자동으로 만들게 하는거지(from_file은 별개로), 기존 함수도 두고 

</p>

<p>좋아요—“타입에 따라 자동 생성”을 넣는 건 편의성에 꽤 유용합니다. 다만 <strong>예측 가능성</strong> 을 해치지 않도록 규칙을 명확히 두면 좋아요.</p>

<h3 id="체크리스트개념">체크리스트(개념)</h3>

<ul>
  <li>
    <p>단일 진입점 <code class="language-plaintext highlighter-rouge">coerce(...)</code>로 <strong>문자열/줄 리스트/TextBuffer</strong> 를 알아서 수용</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">from_*</code>들은 <strong>그대로 유지</strong>(명시적 경로가 필요한 곳에서 사용)</p>
  </li>
  <li>
    <p><strong>모호성 규칙</strong> 고정: <code class="language-plaintext highlighter-rouge">keepends</code> 기본 동작과 판별 기준을 문서화</p>
  </li>
  <li>
    <p>제3자 타입은 <strong>프로토콜/어댑터</strong> 로 확장 가능하게 설계</p>
  </li>
  <li>
    <p>잘못된 타입은 <strong>명확한 오류</strong> 로 거절</p>
  </li>
</ul>

<hr />

<h2 id="설계-결론--빠른-검증">설계 결론 &amp; 빠른 검증</h2>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">TextBuffer.coerce(obj, ...)</code> 추가</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">TextBuffer</code> → 그대로 반환</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">str</code> → <code class="language-plaintext highlighter-rouge">from_string</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">list/tuple/Iterable[str]</code> → <code class="language-plaintext highlighter-rouge">from_lines</code> (필요 시 materialize)</p>
      </li>
      <li>
        <p><em>검증:</em> 호출부 단순화(✅), 기존 명시 API와 공존(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">keepends</code> 기본 정책</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">keepends=None</code>(기본): <strong>한 줄이라도<code class="language-plaintext highlighter-rouge">\n</code>/<code class="language-plaintext highlighter-rouge">\r</code>가 포함되면</strong> <code class="language-plaintext highlighter-rouge">keepends=True</code>로 간주, 아니면 <code class="language-plaintext highlighter-rouge">False</code>.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">keepends</code>를 명시하면 그 값을 그대로 사용.</p>
      </li>
      <li>
        <p><em>검증:</em> 휴리스틱 최소화 + 결정적(✅). 과도한 “추측”은 피함(셀프 코렉트).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>경계 명확화</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">Path/bytes</code>는 <strong>여기서 처리하지 않음</strong>. 파일 I/O는 <code class="language-plaintext highlighter-rouge">from_file</code>로만.</p>
      </li>
      <li>
        <p><em>검증:</em> I/O 사이드이펙트 금지로 일관성 유지(✅).</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="코드-추가-기존-textbuffer에-붙일-메서드">코드 추가 (기존 <code class="language-plaintext highlighter-rouge">TextBuffer</code>에 붙일 메서드)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="c1"># ... 기존 코드 ...
</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">coerce</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        다양한 입력(obj)을 TextBuffer로 표준화.
        - TextBuffer: 그대로 반환
        - str: from_string
        - Iterable[str]: from_lines (필요 시 keepends 추정)
        - (주의) Path/bytes는 여기서 처리하지 않음 → from_file / decode 경로 사용
        </span><span class="sh">"""</span>
        <span class="c1"># 1) 이미 TextBuffer인 경우
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">TextBuffer</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">obj</span>

        <span class="c1"># 2) 문자열
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_string</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="c1"># 3) 문자열 이터러블(리스트/튜플/제너레이터 등)
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="c1"># materialize (제너레이터 보호 및 타입 검사)
</span>            <span class="n">lines</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="nf">all</span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">):</span>
                <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">"</span><span class="s">Iterable must yield str values</span><span class="sh">"</span><span class="p">)</span>

            <span class="c1"># keepends 규칙: 명시값 우선, 없으면 자동 판별
</span>            <span class="n">ke</span> <span class="o">=</span> <span class="n">keepends</span> <span class="k">if</span> <span class="n">keepends</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_lines</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">ke</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="c1"># 4) 그 외 타입은 명확히 거절
</span>        <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="s">Cannot coerce type </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="s"> to TextBuffer. </span><span class="sh">"</span>
            <span class="sh">"</span><span class="s">Use from_file() for paths/files, or pass str/Iterable[str]/TextBuffer.</span><span class="sh">"</span>
        <span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">한 줄이라도 개행 문자를 포함하면 keepends=True로 간주.</span><span class="sh">"""</span>
        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<p><strong>검증:</strong> 단일 진입점으로 편의성을 제공하면서, 파일 I/O·바이트 처리 등 사이드이펙트는 명시 API로 분리 → <strong>일관성/확장성</strong> 목표에 부합. ✅</p>

<hr />

<h2 id="사용-예">사용 예</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buf1</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf2</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>              <span class="c1"># keepends=False
</span><span class="n">buf3</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>          <span class="c1"># keepends=True (자동 판별)
</span><span class="n">buf4</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="n">existing_textbuffer</span><span class="p">)</span>                                        <span class="c1"># 그대로
# 파일은 명시 API 사용
</span><span class="n">buf5</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="확장-아이디어필요-시">확장 아이디어(필요 시)</h2>

<ul>
  <li>
    <p><strong>모듈 전역<code class="language-plaintext highlighter-rouge">ensure_textbuffer(obj, **opts)</code></strong> 함수를 <code class="language-plaintext highlighter-rouge">functools.singledispatch</code>로 제공(내부에서 위 <code class="language-plaintext highlighter-rouge">coerce</code> 호출).</p>
  </li>
  <li>
    <p>외부 타입 지원: 객체가 <code class="language-plaintext highlighter-rouge">to_textbuffer()</code>(또는 <code class="language-plaintext highlighter-rouge">__textbuffer__()</code>)를 구현했다면 그걸 우선 호출하는 <strong>어댑터 패턴</strong> 허용.</p>
  </li>
</ul>

<hr />

<h3 id="최종-판단">최종 판단</h3>

<ul>
  <li>
    <p>“자동 생성”은 생산성을 올리되, <strong>명시 API를 남겨</strong> 경계를 분명히 하는 지금 방식이 가장 안전합니다.</p>
  </li>
  <li>
    <p>휴리스틱은 최소화했고, 필요 시 <code class="language-plaintext highlighter-rouge">keepends</code>를 명시하면 <strong>항상 우선</strong> 합니다.<br />
→ 프로젝트의 <strong>일관성</strong>(놀라움 최소화)과 <strong>확장성</strong>(타입 추가 여지) 목표에 적합합니다. ✅</p>
  </li>
</ul>

<p class="chat--user">

coerce 단어가 좀 어려운데

</p>

<p>좋은 포인트! 이름이 어렵게 느껴지면 쓰는 사람이 안 쓰게 됩니다 😅<br />
아래처럼 바꾸면 어때요?</p>

<h3 id="체크리스트">체크리스트</h3>

<ul>
  <li>
    <p>후보 이름 몇 개 제안하고 의미·관용성 비교</p>
  </li>
  <li>
    <p>하나를 <strong>기본 추천</strong> 으로 선택</p>
  </li>
  <li>
    <p>기존 <code class="language-plaintext highlighter-rouge">coerce</code>는 <strong>호환용 별칭</strong> 으로 남김</p>
  </li>
  <li>
    <p>예시 코드/사용법 제시</p>
  </li>
  <li>
    <p>선택이 <strong>일관성/확장성</strong> 목표에 맞는지 빠른 검증</p>
  </li>
</ul>

<hr />

<h2 id="이름-후보-짧은-코멘트">이름 후보 (짧은 코멘트)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">as_textbuffer(obj, ...)</code> — <strong>가장 추천</strong>. NumPy의 <code class="language-plaintext highlighter-rouge">asarray</code> 패턴처럼 “이걸 TextBuffer로 ‘바꿔서’ 주세요(이미면 그대로)”라는 의미가 <strong>직관적</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ensure_textbuffer(obj, ...)</code> — “TextBuffer 되게 보장해줘”라는 뉘앙스. 명확하지만 약간 길어요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">from_any(obj, ...)</code> — “아무 타입이나 받아들여 생성”. 기능은 맞지만 의미가 약간 포괄적.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wrap(obj, ...)</code> / <code class="language-plaintext highlighter-rouge">adapt(obj, ...)</code> — 포장/어댑트 느낌. 다만 구체성이 떨어짐.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">cast(...)</code> — 타입 캐스트 뉘앙스로 혼동 우려 → 비추천.</p>
  </li>
</ul>

<p><strong>결론:</strong> <code class="language-plaintext highlighter-rouge">as_textbuffer</code>를 기본으로, 클래스 메서드로는 <code class="language-plaintext highlighter-rouge">from_any</code>를 얹고, 기존 <code class="language-plaintext highlighter-rouge">coerce</code>는 alias로 두는 구성이 가장 읽기 쉽고 점진적입니다.</p>

<ul>
  <li><em>검증:</em> 이름만 바꿔도 호출부 가독성↑(일관성 목표 부합) / API 확장 시에도 의미 유지(확장성 목표 부합). ✅</li>
</ul>

<hr />

<h2 id="코드-스니펫-기존-coerce-내용을-내부-구현으로-재사용">코드 스니펫 (기존 <code class="language-plaintext highlighter-rouge">coerce</code> 내용을 내부 구현으로 재사용)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># module-level 함수: 가장 눈에 잘 띄는 진입점
</span><span class="k">def</span> <span class="nf">as_textbuffer</span><span class="p">(</span>
    <span class="n">obj</span><span class="p">,</span>
    <span class="o">*</span><span class="p">,</span>
    <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
    <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_any</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">keepends</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="c1"># ... 기존 코드 ...
</span>
    <span class="c1"># 새 이름: 의미가 분명한 클래스 메서드
</span>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_any</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_from_any_impl</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">keepends</span><span class="p">)</span>

    <span class="c1"># 과거 이름은 호환용 별칭으로 유지 (원하면 향후 deprecate)
</span>    <span class="nb">coerce</span> <span class="o">=</span> <span class="n">from_any</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">_from_any_impl</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">TextBuffer</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">obj</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_string</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="n">lines</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">all</span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">):</span>
                <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">"</span><span class="s">Iterable must yield str values</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">ke</span> <span class="o">=</span> <span class="n">keepends</span> <span class="k">if</span> <span class="n">keepends</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_lines</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">ke</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="s">Cannot convert </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="s"> to TextBuffer. </span><span class="sh">"</span>
            <span class="sh">"</span><span class="s">Use from_file() for paths/files, or pass str/Iterable[str]/TextBuffer.</span><span class="sh">"</span>
        <span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">:</span> <span class="sh">"</span><span class="s">Sequence[str]</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">any</span><span class="p">((</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="사용-예-1">사용 예</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buf1</span> <span class="o">=</span> <span class="nf">as_textbuffer</span><span class="p">(</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf2</span> <span class="o">=</span> <span class="nf">as_textbuffer</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf3</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_any</span><span class="p">([</span><span class="sh">"</span><span class="s">a</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">b</span><span class="se">\n</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>  <span class="c1"># 클래스 메서드 경로
</span><span class="n">buf4</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 기존 코드도 그대로 동작(호환 alias)
</span></code></pre></div></div>

<hr />

<h2 id="빠른-검증--셀프코렉트">빠른 검증 &amp; 셀프코렉트</h2>

<ul>
  <li>
    <p><strong>가독성/예측 가능성:</strong> <code class="language-plaintext highlighter-rouge">as_textbuffer</code> 이름만 보고도 역할이 보입니다. 혼동 여지 낮음. ✅</p>
  </li>
  <li>
    <p><strong>일관성:</strong> <code class="language-plaintext highlighter-rouge">from_string/from_lines/from_file</code> 같은 명시 경로를 유지하면서, “편의 경로”는 <code class="language-plaintext highlighter-rouge">as_textbuffer</code>로 통일. ✅</p>
  </li>
  <li>
    <p><strong>확장성:</strong> 제3자 타입이 늘어나면 <code class="language-plaintext highlighter-rouge">_from_any_impl</code>에 어댑터 훅을 추가하면 됨(예: <code class="language-plaintext highlighter-rouge">obj.__textbuffer__()</code> 지원 등). ✅</p>
  </li>
  <li>
    <p><strong>모호성 관리:</strong> 파일/바이트는 여전히 <code class="language-plaintext highlighter-rouge">from_file</code>/decode 경로로만 처리 → 사이드이펙트·추측 로직 최소화. ✅</p>
  </li>
</ul>

<p>원하시면 프로젝트 전역 네이밍 룰(예: “편의 변환 엔트리는 항상 <code class="language-plaintext highlighter-rouge">as_*</code>로 시작”)도 같이 정리해 드릴게요.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Python TextBuffer 구현</title><link href="https://hvppyarchive.github.io/llm/simple-chatbot-client/" rel="alternate" type="text/html" title="Python TextBuffer 구현" /><published>2025-08-21T19:09:31+09:00</published><updated>2025-08-21T19:09:31+09:00</updated><id>https://hvppyarchive.github.io/llm/simple-chatbot-client</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/simple-chatbot-client/"><![CDATA[<p class="chat--user">

Developer: 현재 Verilog 파일 처리와 관련된 여러 작업(예: 간단한 전처리/후처리 등)을 수행 중입니다. Raw Verilog 소스 코드를 저장할 수 있는 파이썬 클래스 개발을 검토하고 있습니다. Verilog 소스 코드는 문자열 형태로 보관하거나, 줄 단위로 split하여 List[str] 타입(줄바꿈 없이)으로 저장하거나, splitlines(keepends=True)를 사용해 줄바꿈이 포함된 리스트로 보관할 수 있습니다. 여러 방식이 프로젝트 내에서 혼용되면 혼란을 초래할 수 있으므로, 범용적으로 사용할 수 있도록 일관된 구조를 하나의 클래스에 통일할 것을 권장합니다. Begin with a concise checklist (3-7 bullets) of what you will do; keep items conceptual, not implementation-level. After each significant code or class design decision, briefly validate if the chosen approach aligns with the project's consistency and extensibility goals, and self-correct if needed.

</p>

<p>here’s the game plan:</p>

<ul>
  <li>
    <p>Define one <strong>canonical, internal representation</strong> for Verilog source and convert to/from other views.</p>
  </li>
  <li>
    <p>Normalize and <strong>track newline style</strong> for faithful round-trips (LF/CRLF/mixed).</p>
  </li>
  <li>
    <p>Expose <strong>consistent views</strong> (<code class="language-plaintext highlighter-rouge">as_string()</code>, <code class="language-plaintext highlighter-rouge">as_lines(keepends=...)</code>) instead of multiple storage forms.</p>
  </li>
  <li>
    <p>Provide a small, <strong>extensible transform pipeline</strong> for pre/post-processing (with history).</p>
  </li>
  <li>
    <p>Make edits <strong>immutable by default</strong> (return a new instance) with an opt-in <code class="language-plaintext highlighter-rouge">in_place=True</code>.</p>
  </li>
  <li>
    <p>Add <strong>I/O helpers</strong> (<code class="language-plaintext highlighter-rouge">from_*</code>, <code class="language-plaintext highlighter-rouge">to_file</code>) with explicit encoding and deterministic newline policy.</p>
  </li>
</ul>

<hr />

<h2 id="key-design-decisions-with-quick-self-checks">Key design decisions (with quick self-checks)</h2>

<ol>
  <li>
    <p><strong>Canonical storage = one normalized<code class="language-plaintext highlighter-rouge">str</code> (<code class="language-plaintext highlighter-rouge">\n</code> line endings).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> single source of truth avoids drift between parallel representations; Python string ops are fast and familiar.</p>
      </li>
      <li>
        <p><em>Consistency/Extensibility check:</em> callers always interact with one invariant; adding new views later won’t change storage. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Preserve original newline style as metadata (<code class="language-plaintext highlighter-rouge">'lf'|'crlf'|'mixed'</code>).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> we normalize internally but can emit exactly what the file used before, unless caller overrides.</p>
      </li>
      <li>
        <p><em>Check:</em> round-tripping is predictable across the project; future formatters can opt into a uniform style. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Views, not storage:</strong> <code class="language-plaintext highlighter-rouge">as_string(newline=...)</code> and <code class="language-plaintext highlighter-rouge">as_lines(keepends=False|True, newline=...)</code>.</p>

    <ul>
      <li>
        <p><em>Why:</em> banishes ad-hoc lists/strings in the codebase; one class hands out consistent views.</p>
      </li>
      <li>
        <p><em>Check:</em> API encourages a single pattern everywhere; avoids mixing representations in state. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Edits are immutable by default, with<code class="language-plaintext highlighter-rouge">in_place=True</code> for performance-critical paths.</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> functional style reduces surprise; explicit mutability keeps hot paths fast.</p>
      </li>
      <li>
        <p><em>Check:</em> consistent with safety + speed; cache invalidation is centralized. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Lazy, cached line splits (both with and without<code class="language-plaintext highlighter-rouge">keepends</code>).</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> many tools need line access; caching avoids repeated <code class="language-plaintext highlighter-rouge">splitlines</code>.</p>
      </li>
      <li>
        <p><em>Check:</em> cache invalidated on any text change; future features (e.g., line index) can reuse it. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Transform pipeline:<code class="language-plaintext highlighter-rouge">apply(transformer)</code> where a transformer is a callable <code class="language-plaintext highlighter-rouge">text -&gt; text</code>, plus history.</strong></p>

    <ul>
      <li>
        <p><em>Why:</em> flexible slot for “pre/post-processing” like trimming, EOL fixing, simple macro munging, etc.</p>
      </li>
      <li>
        <p><em>Check:</em> keeps responsibilities modular; easy to add/remove steps; provenance is recorded. ✅</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>I/O boundaries explicit:</strong> constructors for string/lines/file; <code class="language-plaintext highlighter-rouge">to_file(encoding, newline)</code>; no auto-detection magic.</p>

    <ul>
      <li>
        <p><em>Why:</em> explicit beats implicit; fewer surprises across platforms and CI.</p>
      </li>
      <li>
        <p><em>Check:</em> project-wide consistency; easy to thread encoding/newline policy from config. ✅</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="the-class">The class</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">import</span> <span class="n">hashlib</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span><span class="p">]</span>
<span class="n">EmitNewline</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">TextTransformer</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">A simple, composable transformer: text -&gt; text.</span><span class="sh">"""</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="bp">...</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TransformRecord</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">before_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">after_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">VerilogSource</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Canonical container for Verilog source.

    Invariants:
      - Internal storage `_text` always uses LF (</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="s">) line endings.
      - `_newline_style` records the original newline style encountered on load.
      - All edit methods are immutable by default; pass in_place=True to mutate.
    </span><span class="sh">"""</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">_text</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_newline_style</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_encoding</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_source_path</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_version</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_cached_lines</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_cached_lines_keepends</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">_history</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">newline_style</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NewlineStyle</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">_assume_normalized</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">_assume_normalized</span><span class="p">:</span>
            <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">norm</span><span class="p">,</span> <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">prefer</span><span class="o">=</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># internal LF
</span>            <span class="k">if</span> <span class="n">newline_style</span> <span class="ow">and</span> <span class="n">newline_style</span> <span class="o">!=</span> <span class="n">style</span><span class="p">:</span>
                <span class="c1"># honor explicit override only for "mixed" -&gt; "lf/crlf" upgrade
</span>                <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">norm</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">style</span>  <span class="c1"># how it *came in* (for round-trip)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">encoding</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">source_path</span> <span class="k">else</span> <span class="bp">None</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_version</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>              <span class="c1"># keepends=False
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>     <span class="c1"># keepends=True
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># ---------- creation / I/O ----------
</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_string</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_lines</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="n">joined</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">joined</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">joined</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_file</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_string</span><span class="p">(</span><span class="n">newline</span><span class="o">=</span><span class="n">newline</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="n">ensure_trailing_newline</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">write_text</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">)</span>

    <span class="c1"># ---------- core views ----------
</span>
    <span class="k">def</span> <span class="nf">as_string</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="p">(</span><span class="ow">not</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">False</span> <span class="ow">and</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">newline</span> <span class="o">==</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">}[</span><span class="n">newline</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span>
        <span class="k">elif</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># "mixed" -&gt; default to CRLF for lines that originally were CRLF? We can't reconstruct mixed reliably.
</span>            <span class="c1"># project policy: emit LF for mixed unless caller overrides
</span>            <span class="k">return</span> <span class="n">s</span>

    <span class="k">def</span> <span class="nf">as_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">)</span>

    <span class="c1"># ---------- inspection ----------
</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">source_path</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">newline_style</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NewlineStyle</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">encoding</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">history</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">,</span> <span class="p">...]:</span>
        <span class="k">return</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">line_count</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">get_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="n">keepend</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>

    <span class="c1"># ---------- transforms / edits ----------
</span>
    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">transformer</span><span class="p">:</span> <span class="n">TextTransformer</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">record</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">before</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="n">after</span> <span class="o">=</span> <span class="nf">transformer</span><span class="p">(</span><span class="n">before</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">after</span> <span class="ow">is</span> <span class="n">before</span><span class="p">:</span>
            <span class="c1"># even if identity, return self or bump version in-place
</span>            <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">self</span>

        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">after</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">inst</span> <span class="o">=</span> <span class="nc">VerilogSource</span><span class="p">(</span>
                <span class="n">after</span><span class="p">,</span>
                <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span>
                <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span>
                <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)]</span>
            <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">replace</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">old</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">new</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">class</span> <span class="nc">_Repl</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span>
            <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">new</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nf">_Repl</span><span class="p">(),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">set_line</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># edit with keepends to keep layout
</span>        <span class="k">if</span> <span class="n">keepend</span><span class="p">:</span>
            <span class="c1"># caller provided EOL
</span>            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># normalize to internal LF
</span>            <span class="n">eol</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="k">if</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="sh">""</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span> <span class="o">+</span> <span class="n">eol</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">insert_lines</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">new_lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">nl</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">if</span> <span class="n">keepends</span> <span class="nf">else </span><span class="p">(</span><span class="n">ln</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">new_lines</span><span class="p">]</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span> <span class="o">+</span> <span class="n">nl</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">delete_lines</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">start</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="n">end</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">new_text</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">end</span><span class="p">:])</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ensure_trailing_newline</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="c1"># ---------- internals ----------
</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">prefer</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">NewlineStyle</span><span class="p">]:</span>
        <span class="n">has_crlf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="n">has_lf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="k">if</span> <span class="n">has_crlf</span> <span class="ow">and</span> <span class="n">has_lf</span> <span class="ow">and</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">text</span><span class="p">:</span>
            <span class="n">style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">has_crlf</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># coerce to LF
</span>        <span class="k">return</span> <span class="n">norm</span><span class="p">,</span> <span class="n">style</span>

    <span class="k">def</span> <span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">VerilogSource</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="n">inst</span> <span class="o">=</span> <span class="nc">VerilogSource</span><span class="p">(</span>
            <span class="n">new_text</span><span class="p">,</span>
            <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
            <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span>
            <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span>
            <span class="n">_assume_normalized</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">_set_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">=</span> <span class="n">new_text</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_invalidate_cache</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_invalidate_cache</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_bump_version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_version</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">_mk_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TransformRecord</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">TransformRecord</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
            <span class="n">before_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">before</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
            <span class="n">after_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">after</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
        <span class="p">)</span>

    <span class="k">def</span> <span class="nf">_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>Validation:</strong> The class enforces one storage invariant (LF string), exposes consistent views, and gives predictable I/O. It’s easy to extend with more transforms or richer metadata later. This aligns with our consistency goal and makes future preprocessors trivial to add. ✅</p>

<hr />

<h2 id="example-transformers-plug-and-play">Example transformers (plug-and-play)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">TrimTrailingWhitespace</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">trim_trailing_ws</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="c1"># safe for Verilog; does not alter semantics
</span>        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="se">\t</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">())</span>

<span class="k">class</span> <span class="nc">EnsureFinalNewline</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ensure_final_newline</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">text</span> <span class="k">if</span> <span class="n">text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="nf">else </span><span class="p">(</span><span class="n">text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Validation:</strong> Transformers are plain callables; team members can add steps without touching the core class. History records provenance. ✅</p>

<hr />

<h2 id="typical-usage-uniform-across-the-project">Typical usage (uniform across the project)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load
</span><span class="n">src</span> <span class="o">=</span> <span class="n">VerilogSource</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Get views (without changing internal storage form)
</span><span class="n">text</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_string</span><span class="p">()</span>                            <span class="c1"># normalized LF by default (round-tripped on write)
</span><span class="n">lines</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">()</span>                            <span class="c1"># ['module top(', ...]
</span><span class="n">lines_ke</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>            <span class="c1"># ['module top(\n', ...]
</span>
<span class="c1"># Edits (immutable by default)
</span><span class="n">src2</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">set_line</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">// AUTOGEN: do not edit</span><span class="sh">"</span><span class="p">)</span>
<span class="n">src3</span> <span class="o">=</span> <span class="n">src2</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nc">TrimTrailingWhitespace</span><span class="p">())</span>

<span class="c1"># Save with original newline style, enforcing final newline
</span><span class="n">src3</span><span class="p">.</span><span class="nf">to_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><strong>Validation:</strong> This usage pattern prevents any accidental mixing of storage forms. Every operation goes through one API, keeping the project consistent. ✅</p>

<hr />

<h2 id="why-this-will-hold-up-on-bigger-needs">Why this will hold up on bigger needs</h2>

<ul>
  <li>
    <p><strong>Round-trip safety:</strong> We track original newline style and encoding; callers can enforce a project-wide style by always passing <code class="language-plaintext highlighter-rouge">newline="lf"</code> if desired.</p>
  </li>
  <li>
    <p><strong>Performance:</strong> Internal <code class="language-plaintext highlighter-rouge">str</code>, lazy line cache, optional in-place edits.</p>
  </li>
  <li>
    <p><strong>Extensibility:</strong> Add richer transforms (comment stripping, lightweight <code class="language-plaintext highlighter-rouge">\</code>line continuation` merges, macro stubs) without changing the core.</p>
  </li>
  <li>
    <p><strong>Determinism:</strong> No auto encoding detection; configs drive output style.</p>
  </li>
</ul>

<hr />

<h3 id="optional-next-steps-if-you-want-them">Optional next steps (if you want them)</h3>

<ul>
  <li>
    <p>Add a <code class="language-plaintext highlighter-rouge">LineIndex</code> helper for O(1) char-offset ↔ line/col mapping.</p>
  </li>
  <li>
    <p>Provide <code class="language-plaintext highlighter-rouge">diff(other)</code> to aid review bots.</p>
  </li>
  <li>
    <p>Introduce a config object (encoding/newline policy) to thread through I/O.</p>
  </li>
</ul>

<p>If you share any project constraints (e.g., must always emit LF, or enforce final newline), I can wire them into defaults so every team member gets the same behavior automatically.</p>

<p class="chat--user">

보다보니 굳이 VerilogSource에 한정될 필요는 없는거 같은데 범용적인 방법 추천있어?

</p>

<p>아주 좋아요—Verilog 전용이 아니라 <strong>언어 무관(Text-agnostic)</strong> 하게 쓰면 팀 전체에 더 깔끔합니다. 아래처럼 일반화하죠.</p>

<h3 id="체크리스트-개념-위주">체크리스트 (개념 위주)</h3>

<ul>
  <li>
    <p>하나의 <strong>범용 텍스트 컨테이너</strong> 로 표준화하고, 내부 표현은 단일 규칙(LF)로 고정</p>
  </li>
  <li>
    <p><strong>프로필(언어/포맷 메타데이터)</strong> 레이어로 주석/확장자 등만 바꿔 끼우기</p>
  </li>
  <li>
    <p><strong>일관된 뷰 API</strong>(문자열/줄 리스트)만 노출, 저장 형식은 1개</p>
  </li>
  <li>
    <p><strong>변환 파이프라인</strong>(transformer: <code class="language-plaintext highlighter-rouge">text -&gt; text</code>)과 기록(히스토리) 제공</p>
  </li>
  <li>
    <p><strong>불변 편집 기본 + 선택적 in-place</strong> , 캐시/버전 관리</p>
  </li>
  <li>
    <p>명시적 <strong>I/O 정책</strong>(인코딩/개행 방침)과 라운드트립 보장</p>
  </li>
</ul>

<hr />

<h2 id="설계-스텝각-스텝마다-빠른-검증-포함">설계 스텝(각 스텝마다 빠른 검증 포함)</h2>

<ol>
  <li>
    <p><strong>범용 컨테이너 =<code class="language-plaintext highlighter-rouge">TextBuffer</code> (내부 LF 문자열 1개만 저장)</strong></p>

    <ul>
      <li>
        <p><em>이유:</em> 상태가 하나면 표현 불일치가 사라짐.</p>
      </li>
      <li>
        <p><em>검증:</em> 프로젝트 일관성(✅) / 다른 언어로 확장 쉬움(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>메타데이터/프로필(<code class="language-plaintext highlighter-rouge">TextProfile</code>) 분리</strong></p>

    <ul>
      <li>
        <p>이름, 대표 확장자, 주석 마커 등은 “설명”일 뿐, 동작은 동일.</p>
      </li>
      <li>
        <p><em>검증:</em> 텍스트 코어는 같고, 언어별 규칙은 얹기만 함 → 확장성(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>뷰 API =<code class="language-plaintext highlighter-rouge">as_string(newline=...)</code>, <code class="language-plaintext highlighter-rouge">as_lines(keepends=...)</code></strong></p>

    <ul>
      <li>
        <p>저장은 1종, 뷰만 여러 형태로 “보여주기”.</p>
      </li>
      <li>
        <p><em>검증:</em> 코드베이스에서 혼용 방지(✅). 새 뷰 추가 시 내부는 그대로(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>개행 정책과 라운드트립</strong></p>

    <ul>
      <li>
        <p>로드 시 CRLF/혼합 감지 → 내부 LF로 정규화 + “원래 스타일” 메타 보존.</p>
      </li>
      <li>
        <p>저장 시 <code class="language-plaintext highlighter-rouge">original|lf|crlf</code> 선택, <code class="language-plaintext highlighter-rouge">ensure_trailing_newline</code> 옵션 제공.</p>
      </li>
      <li>
        <p><em>검증:</em> 재현성/예측가능성(✅). <em>혼합</em> 은 완전 복원 불가 → 정책상 LF로 내보내기(합리적 셀프코렉트).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>변환 파이프라인 + 역사(sha1)</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">apply(transformer)</code>로 조합 가능; 이름/해시 기록.</p>
      </li>
      <li>
        <p><em>검증:</em> 단계적 전/후처리의 표준 통로(✅). 원인 추적 용이(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>편집 모델: 불변 기본 +<code class="language-plaintext highlighter-rouge">in_place=True</code></strong></p>

    <ul>
      <li>
        <p>안전한 기본값, 고성능 경로 필요 시 명시적 사용.</p>
      </li>
      <li>
        <p><em>검증:</em> 안전/성능 균형(✅). 캐시 무효화 한 곳에서 관리(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>I/O 경계는 명시적</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">from_*</code>/<code class="language-plaintext highlighter-rouge">to_file(encoding,newline)</code>에서만 환경 영향을 받도록.</p>
      </li>
      <li>
        <p><em>검증:</em> CI/OS 차이 최소화(✅).</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="범용-구현-스켈레톤-python">범용 구현 스켈레톤 (Python)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Literal</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">import</span> <span class="n">hashlib</span><span class="p">,</span> <span class="n">time</span>

<span class="c1"># ---- Profiles (언어/포맷 설명용 메타) ----
</span><span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TextProfile</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">plain</span><span class="sh">"</span>
    <span class="n">file_exts</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>
    <span class="n">line_comment_markers</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>
    <span class="n">block_comment_markers</span><span class="p">:</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">],</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">()</span>

<span class="c1"># 예시 프로필
</span><span class="n">VERILOG</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">verilog</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">file_exts</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">.v</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.sv</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">line_comment_markers</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">//</span><span class="sh">"</span><span class="p">,),</span>
    <span class="n">block_comment_markers</span><span class="o">=</span><span class="p">((</span><span class="sh">"</span><span class="s">/*</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">*/</span><span class="sh">"</span><span class="p">),),</span>
<span class="p">)</span>
<span class="n">PYTHON</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">python</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">file_exts</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">.py</span><span class="sh">"</span><span class="p">,),</span>
    <span class="n">line_comment_markers</span><span class="o">=</span><span class="p">(</span><span class="sh">"</span><span class="s">#</span><span class="sh">"</span><span class="p">,),</span>
<span class="p">)</span>

<span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span><span class="p">]</span>
<span class="n">EmitNewline</span> <span class="o">=</span> <span class="n">Literal</span><span class="p">[</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">TextTransformer</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="bp">...</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">TransformRecord</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">before_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">after_sha1</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">timestamp</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    범용 텍스트 컨테이너(언어-무관).
    내부 규칙:
      - _text 는 항상 LF(</span><span class="sh">'</span><span class="se">\\</span><span class="s">n</span><span class="sh">'</span><span class="s">)로 정규화된 단일 문자열
      - 원본 개행 스타일/인코딩/경로/프로필을 메타로 보관
      - 불변 편집 기본, in_place=True로 명시적 변경 가능
    </span><span class="sh">"""</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">_text</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_newline_style</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_encoding</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_source_path</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_profile</span><span class="sh">"</span><span class="p">,</span>
                 <span class="sh">"</span><span class="s">_version</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_cached_lines</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_cached_lines_keepends</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_history</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">newline_style</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NewlineStyle</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">_assume_normalized</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">_assume_normalized</span><span class="p">:</span>
            <span class="n">norm</span> <span class="o">=</span> <span class="n">text</span>
            <span class="n">style</span> <span class="o">=</span> <span class="n">newline_style</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">norm</span><span class="p">,</span> <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">norm</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="n">style</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">encoding</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">source_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">source_path</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="n">profile</span>

        <span class="n">self</span><span class="p">.</span><span class="n">_version</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># ---------- constructors / I-O ----------
</span>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_string</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
                    <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_lines</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                   <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span> <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
                   <span class="n">source_path</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">joined</span> <span class="o">=</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span> <span class="k">if</span> <span class="n">keepends</span> <span class="k">else</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">joined</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">source_path</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
                  <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">cls</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">p</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_file</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">encoding</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_string</span><span class="p">(</span><span class="n">newline</span><span class="o">=</span><span class="n">newline</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="n">ensure_trailing_newline</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">write_text</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">)</span>

    <span class="c1"># ---------- views ----------
</span>    <span class="k">def</span> <span class="nf">as_string</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">newline</span><span class="p">:</span> <span class="n">EmitNewline</span> <span class="o">=</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span>
                  <span class="n">ensure_trailing_newline</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">bool</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">True</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">+=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span>
        <span class="k">if</span> <span class="n">ensure_trailing_newline</span> <span class="ow">is</span> <span class="bp">False</span> <span class="ow">and</span> <span class="n">s</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>

        <span class="n">style</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span> <span class="k">if</span> <span class="n">newline</span> <span class="o">==</span> <span class="sh">"</span><span class="s">original</span><span class="sh">"</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">}[</span><span class="n">newline</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span>
        <span class="k">elif</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>  <span class="c1"># mixed는 정확 복원이 불가 → 정책상 LF로 내보냄
</span>            <span class="k">return</span> <span class="n">s</span>

    <span class="k">def</span> <span class="nf">as_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="n">keepends</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span><span class="p">)</span>

    <span class="c1"># ---------- inspection ----------
</span>    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">profile</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TextProfile</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_profile</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">source_path</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Path</span><span class="p">]:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_source_path</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">newline_style</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">NewlineStyle</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">encoding</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_encoding</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span> <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">history</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">TransformRecord</span><span class="p">,</span> <span class="p">...]:</span> <span class="k">return</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">line_count</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span> <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">get_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="n">keepend</span><span class="p">)[</span><span class="n">idx</span><span class="p">]</span>

    <span class="c1"># ---------- edits / transforms ----------
</span>    <span class="k">def</span> <span class="nf">apply</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">transformer</span><span class="p">:</span> <span class="n">TextTransformer</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
              <span class="n">record</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">before</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span>
        <span class="n">after</span> <span class="o">=</span> <span class="nf">transformer</span><span class="p">(</span><span class="n">before</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">after</span> <span class="ow">is</span> <span class="n">before</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">after</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">self</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">inst</span> <span class="o">=</span> <span class="nc">TextBuffer</span><span class="p">(</span><span class="n">after</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">,</span> <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                              <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">record</span><span class="p">:</span> <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="p">[</span><span class="o">*</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">transformer</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">)]</span>
            <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">replace</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">old</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">new</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">class</span> <span class="nc">_Repl</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span>
            <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">old</span><span class="p">,</span> <span class="n">new</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nf">_Repl</span><span class="p">(),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">set_line</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">content</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepend</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                 <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">keepend</span><span class="p">:</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">eol</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="k">if</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="sh">""</span>
            <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">content</span> <span class="o">+</span> <span class="n">eol</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">insert_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">new_lines</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="o">*</span><span class="p">,</span> <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                     <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">nl</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">if</span> <span class="n">keepends</span> <span class="nf">else </span><span class="p">(</span><span class="n">ln</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">new_lines</span><span class="p">]</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span> <span class="o">+</span> <span class="n">nl</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">idx</span><span class="p">:]),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">delete_lines</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">start</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">end</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">[:</span><span class="n">start</span><span class="p">]</span> <span class="o">+</span> <span class="n">lines</span><span class="p">[</span><span class="n">end</span><span class="p">:]),</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ensure_trailing_newline</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span> <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_text</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="n">self</span><span class="p">.</span><span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">in_place</span><span class="o">=</span><span class="n">in_place</span><span class="p">)</span>

    <span class="c1"># ---------- internals ----------
</span>    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_normalize_newlines</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">NewlineStyle</span><span class="p">]:</span>
        <span class="n">has_crlf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="n">has_lf</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">text</span>
        <span class="k">if</span> <span class="n">has_crlf</span> <span class="ow">and</span> <span class="n">has_lf</span> <span class="ow">and</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">text</span><span class="p">:</span> <span class="n">style</span><span class="p">:</span> <span class="n">NewlineStyle</span> <span class="o">=</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">has_crlf</span><span class="p">:</span> <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span> <span class="n">style</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>
        <span class="k">return</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">),</span> <span class="n">style</span>

    <span class="k">def</span> <span class="nf">_with_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">in_place</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">in_place</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_set_text</span><span class="p">(</span><span class="n">new_text</span><span class="p">);</span> <span class="k">return</span> <span class="n">self</span>
        <span class="n">inst</span> <span class="o">=</span> <span class="nc">TextBuffer</span><span class="p">(</span><span class="n">new_text</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_profile</span><span class="p">,</span> <span class="n">newline_style</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_newline_style</span><span class="p">,</span>
                          <span class="n">encoding</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_encoding</span><span class="p">,</span> <span class="n">source_path</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_source_path</span><span class="p">,</span> <span class="n">_assume_normalized</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">inst</span><span class="p">.</span><span class="n">_history</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">inst</span>

    <span class="k">def</span> <span class="nf">_set_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">new_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_text</span> <span class="o">=</span> <span class="n">new_text</span><span class="p">;</span> <span class="n">self</span><span class="p">.</span><span class="nf">_invalidate_cache</span><span class="p">();</span> <span class="n">self</span><span class="p">.</span><span class="nf">_bump_version</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_invalidate_cache</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines</span> <span class="o">=</span> <span class="bp">None</span><span class="p">;</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_lines_keepends</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_bump_version</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_version</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">def</span> <span class="nf">_mk_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">TransformRecord</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">TransformRecord</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
            <span class="n">before_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">before</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
            <span class="n">after_sha1</span><span class="o">=</span><span class="n">hashlib</span><span class="p">.</span><span class="nf">sha1</span><span class="p">(</span><span class="n">after</span><span class="p">.</span><span class="nf">encode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)).</span><span class="nf">hexdigest</span><span class="p">(),</span>
        <span class="p">)</span>
    <span class="k">def</span> <span class="nf">_record</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">before</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">after</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_history</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_mk_record</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">before</span><span class="p">,</span> <span class="n">after</span><span class="p">))</span>
</code></pre></div></div>

<p><strong>검증 요약:</strong> 내부 저장 1종(LF), 뷰 API 고정, 변환/편집/히스토리 표준화 → <strong>일관성</strong> 과 <strong>확장성</strong> 목표에 부합(✅). <em>혼합 개행 복원 한계</em> 는 정책으로 명시하여 팀 혼선을 차단(셀프코렉트 완료).</p>

<hr />

<h2 id="사용-예-언어-불문">사용 예 (언어 불문)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Verilog도 Python도 동일한 API
</span><span class="n">buf</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>

<span class="c1"># 일관된 뷰
</span><span class="n">text</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_string</span><span class="p">()</span>
<span class="n">lines</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">()</span>
<span class="n">lines_ke</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">as_lines</span><span class="p">(</span><span class="n">keepends</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># 불변 편집 + 파이프라인
</span><span class="k">class</span> <span class="nc">TrimTrailingWS</span><span class="p">:</span>
    <span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">trim_trailing_ws</span><span class="sh">"</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="se">\t</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">t</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">())</span>

<span class="n">buf2</span> <span class="o">=</span> <span class="n">buf</span><span class="p">.</span><span class="nf">set_line</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">// AUTOGEN: do not edit</span><span class="sh">"</span><span class="p">)</span>
<span class="n">buf3</span> <span class="o">=</span> <span class="n">buf2</span><span class="p">.</span><span class="nf">apply</span><span class="p">(</span><span class="nc">TrimTrailingWS</span><span class="p">())</span>
<span class="n">buf3</span><span class="p">.</span><span class="nf">to_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">newline</span><span class="o">=</span><span class="sh">"</span><span class="s">original</span><span class="sh">"</span><span class="p">,</span> <span class="n">ensure_trailing_newline</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="verilog-전용-api가-필요하면">Verilog 전용 API가 필요하면?</h2>

<ul>
  <li><code class="language-plaintext highlighter-rouge">VerilogSource = TextBuffer</code>에 <code class="language-plaintext highlighter-rouge">profile=VERILOG</code>만 기본값으로 래핑(또는 서브클래싱)하면 됩니다. 코드베이스는 <strong>항상<code class="language-plaintext highlighter-rouge">TextBuffer</code> API</strong>만 사용하므로 혼용이 사라집니다.</li>
</ul>

<hr />

<h2 id="권장-정책팀-규칙으로-고정-추천">권장 정책(팀 규칙으로 고정 추천)</h2>

<ul>
  <li>
    <p>저장 시 기본 <code class="language-plaintext highlighter-rouge">newline="original"</code>(레거시 유지) → 리포맷 단계에서 일괄 <code class="language-plaintext highlighter-rouge">lf</code> 전환 선택 가능.</p>
  </li>
  <li>
    <p>모든 변환은 <strong>Transformer</strong> 로만 수행(직접 문자열 조작 금지).</p>
  </li>
  <li>
    <p>CI에 <code class="language-plaintext highlighter-rouge">ensure_trailing_newline=True</code> + <code class="language-plaintext highlighter-rouge">TrimTrailingWS</code> 적용.</p>
  </li>
</ul>

<p>필요하면 토큰화나 라인-오프셋 매핑, <code class="language-plaintext highlighter-rouge">diff(other)</code> 같은 유틸을 얹을 수 있게 설계해 두었습니다. 원하는 기본 프로필(Verilog/Lex/YAML 등) 목록을 알려주시면 템플릿으로 함께 추가해 드릴게요.</p>

<p class="chat--user">

이런 일을 하는 유명한 클래스나 파이썬 내장은 없어?

</p>

<p>다음 순서로 생각해볼게요 (개념 체크리스트):</p>

<ul>
  <li>
    <p>표준 라이브러리에 “그 일을 전부” 하는 <strong>단일 클래스는 없다</strong> → 조합해서 써야 함.</p>
  </li>
  <li>
    <p>가장 가까운 <strong>표준 도구들</strong> 이 무엇인지 파악하고, 무엇이 <strong>부족</strong> 한지 명확히 하기.</p>
  </li>
  <li>
    <p>부족한 부분(개행 추적·일관된 뷰·변환 파이프라인)은 <strong>얇은 래퍼</strong> 로 보완.</p>
  </li>
  <li>
    <p>최소주의 버전(함수 2–3개)과 확장형(클래스) 중 팀 정책에 맞게 선택.</p>
  </li>
</ul>

<hr />

<h2 id="짧은-결론">짧은 결론</h2>

<ul>
  <li><strong>표준/유명 내장에 “텍스트 컨테이너 + 개행 정책 + 변환/히스토리”를 한 번에 제공하는 건 없습니다.</strong><br />
따라서 지금까지 제안한 <code class="language-plaintext highlighter-rouge">TextBuffer</code> 같은 얇은 래퍼가 <strong>일관성</strong> 과 <strong>라운드트립 보장</strong> 면에서 가장 현실적입니다.<br />
<em>검증:</em> 팀 전역 일관성과 확장성 목표에 부합. ✅</li>
</ul>

<hr />

<h2 id="가장-가까운-표준-도구들무엇을-해주고못-해주는가">가장 가까운 표준 도구들(무엇을 해주고/못 해주는가)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">io.StringIO</code><br />
메모리 파일 객체. 줄 단위 읽기/쓰기 쉽지만 <strong>원본 개행 스타일 추적 X</strong> , 변환/히스토리 X.<br />
<em>검증:</em> “일관된 내부 표현” 요구에 미달 → 래퍼 필요. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">open(..., newline=...)</code> / <code class="language-plaintext highlighter-rouge">pathlib.Path.read_text()/write_text()</code><br />
텍스트 모드에서 <strong>개행 변환을 제어</strong>(쓰기 시 <code class="language-plaintext highlighter-rouge">newline='\n'</code> 강제 등) 가능. 하지만 <strong>읽을 때 원본이 CRLF/혼합이었는지</strong> 를 보존하진 않음(보통 <code class="language-plaintext highlighter-rouge">\n</code>으로 흡수).<br />
<em>검증:</em> 라운드트립용 “원래 개행 스타일” 메타 보존이 없다 → 래퍼 필요. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">fileinput</code><br />
여러 파일을 한 줄 스트림처럼 순회. <strong>컨테이너 아님</strong> , 상태/뷰/히스토리 X. ❌</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">difflib</code><br />
차이 계산·패치 출력을 도와줌. <strong>변환 파이프라인/저장소</strong> 는 아님. 보조 도구로는 유용. 🆗</p>
  </li>
  <li>
    <p>(<code class="language-plaintext highlighter-rouge">tokenize</code>, <code class="language-plaintext highlighter-rouge">ast</code>, <code class="language-plaintext highlighter-rouge">parso</code> 등)<br />
언어별 파서/토크나이저. “구문 인지 변환”에는 좋지만 <strong>범용 텍스트 컨테이너 역할</strong> 은 아님. 보조. 🆗</p>
  </li>
</ul>

<blockquote>
  <p>요약: <strong>조각들은 있지만, “일관 컨테이너 + 개행 정책 + 변환/히스토리” 조합은 직접 얇게 감싸야</strong> 합니다.</p>
</blockquote>

<hr />

<h2 id="최소주의-대안클래스-없이-함수-3개로">최소주의 대안(클래스 없이 함수 3개로)</h2>

<p>클래스가 부담이면, 팀 규칙을 함수로 고정하세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="k">def</span> <span class="nf">detect_newline_style</span><span class="p">(</span><span class="n">raw</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>  <span class="c1"># "lf" | "crlf" | "mixed"
</span>    <span class="n">crlf</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lf</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">cr</span> <span class="o">=</span> <span class="n">raw</span><span class="p">.</span><span class="nf">count</span><span class="p">(</span><span class="sa">b</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">)</span> <span class="o">-</span> <span class="n">crlf</span>
    <span class="nf">if </span><span class="p">(</span><span class="n">crlf</span> <span class="ow">and</span> <span class="p">(</span><span class="n">lf</span> <span class="o">-</span> <span class="n">crlf</span><span class="p">))</span> <span class="ow">or</span> <span class="n">cr</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>  <span class="c1"># 서로 섞여 있으면 mixed
</span>        <span class="k">return</span> <span class="sh">"</span><span class="s">mixed</span><span class="sh">"</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">crlf</span><span class="sh">"</span> <span class="k">if</span> <span class="n">crlf</span> <span class="k">else</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">normalize_to_lf</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">emit_with_newline</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">style</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="n">style</span> <span class="o">==</span> <span class="sh">"</span><span class="s">lf</span><span class="sh">"</span> <span class="k">else</span> <span class="n">s</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="se">\r\n</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># mixed는 정책상 lf 취급 권장
</span></code></pre></div></div>

<p>사용 패턴:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">raw</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">p</span><span class="p">).</span><span class="nf">read_bytes</span><span class="p">()</span>
<span class="n">style</span> <span class="o">=</span> <span class="nf">detect_newline_style</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>          <span class="c1"># 원본 스타일 메타
</span><span class="n">text</span> <span class="o">=</span> <span class="nf">normalize_to_lf</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">))</span>
<span class="n">lines</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()</span>                  <span class="c1"># 필요한 뷰
</span><span class="n">out</span> <span class="o">=</span> <span class="nf">emit_with_newline</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">style</span><span class="p">)</span>       <span class="c1"># 저장 시 라운드트립
</span></code></pre></div></div>

<ul>
  <li><em>검증:</em> “단일 내부 표현(LF 문자열) + 원본 개행 메타 보존”을 만족. 변환 파이프라인/히스토리는 여전히 없으므로, 필요 시 클래스로 승격. ✅</li>
</ul>

<hr />

<h2 id="언제-표준만으로-충분하고-언제-래퍼가-필요한가">언제 표준만으로 충분하고, 언제 래퍼가 필요한가</h2>

<ul>
  <li>
    <p><strong>충분한 경우:</strong> 단순 읽기/쓰기 + 포맷터(예: pre-commit 훅으로 trailing space 제거, EOF newline 강제). 변환 기록/뷰 일관성이 크게 중요치 않을 때.</p>
  </li>
  <li>
    <p><strong>래퍼 필요:</strong></p>

    <ul>
      <li>
        <p>라운드트립 정확도(원본 개행 정책 유지)가 중요</p>
      </li>
      <li>
        <p>코드베이스에서 “문자열/lines 혼용”을 금지하고 <strong>한 API로 통일</strong> 하고 싶을 때</p>
      </li>
      <li>
        <p>전/후처리를 <strong>파이프라인 + 히스토리</strong> 로 관리하고 싶을 때</p>
      </li>
    </ul>
  </li>
</ul>

<p><em>검증:</em> 우리 요구사항(일관성·확장성·라운드트립) 기준으로는 래퍼가 맞음. ✅</p>

<hr />

<h2 id="참고서드파티-조합-아이디어">참고(서드파티 조합 아이디어)</h2>

<ul>
  <li>
    <p><strong>pre-commit / pre-commit-hooks</strong> : <code class="language-plaintext highlighter-rouge">end-of-file-fixer</code>, <code class="language-plaintext highlighter-rouge">trailing-whitespace</code>, <code class="language-plaintext highlighter-rouge">mixed-line-ending</code> 등으로 저장소 수준 위생 관리.<br />
<em>역할 보완:</em> 파이프라인 일부를 CI로 밀어내 일관성 강화. ✅</p>
  </li>
  <li>
    <p><strong>difflib / unidiff</strong> : 변환 결과를 리뷰하기 쉬운 패치로 제시.<br />
<em>역할 보완:</em> 팀 리뷰 경험 개선. ✅</p>
  </li>
</ul>

<hr />

<h3 id="정리">정리</h3>

<ul>
  <li>
    <p>“그 일을 전부 하는” 유명 내장/클래스는 없음.</p>
  </li>
  <li>
    <p>표준 도구(특히 <code class="language-plaintext highlighter-rouge">open/newline</code>, <code class="language-plaintext highlighter-rouge">Path.write_text(newline=...)</code>)는 <strong>출력 정책 강제</strong> 에는 충분하나, <strong>원본 개행 추적/일관 뷰/히스토리</strong> 는 커버하지 못함.</p>
  </li>
  <li>
    <p>팀 차원의 일관성과 확장성을 원하면, 지금 설계한 <strong>얇은 범용 래퍼</strong>(또는 위의 <strong>함수 3개 + 규칙</strong>)가 가장 안전합니다.</p>
  </li>
</ul>

<p class="chat--user">

@classmethod def from_file(cls, path: Path | str, *, profile: TextProfile = TextProfile(), encoding: str = "utf-8") -&gt; "TextBuffer": p = Path(path) text = p.read_text(encoding=encoding) return cls(text, profile=profile, encoding=encoding, source_path=p) 여기 중간에 있는 * 은 뭐야? 이런 문법 처음봐

</p>

<p>짧게 체크리스트:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 는 <strong>키워드 전용(Keyword-only) 인자 구분자</strong> 예요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 뒤에 나오는 파라미터는 <strong>반드시<code class="language-plaintext highlighter-rouge">name=value</code> 형태로</strong> 호출해야 해요.</p>
  </li>
  <li>
    <p>목적: <strong>가독성↑</strong> , <strong>실수 방지</strong>(순서 착각), <strong>API 확장성</strong>(새 옵션 추가해도 안전).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> 자체는 <code class="language-plaintext highlighter-rouge">*args</code>와 다릅니다(수집 아님, <strong>구분자</strong> 일 뿐).</p>
  </li>
</ul>

<hr />

<h3 id="한-줄-요약">한 줄 요약</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">from_file</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="n">Path</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
              <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
</code></pre></div></div>

<p>여기 가운데 <code class="language-plaintext highlighter-rouge">*</code> 때문에 <code class="language-plaintext highlighter-rouge">profile</code>과 <code class="language-plaintext highlighter-rouge">encoding</code>은 <strong>키워드로만</strong> 넘길 수 있습니다.</p>

<ul>
  <li>✅ 올바른 호출:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 기본값 사용
</span><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-16</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
  <li>❌ 잘못된 호출(순서로 넘김):
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">VERILOG</span><span class="p">)</span>
<span class="c1"># TypeError: ... takes 2 positional arguments but 3 were given
</span></code></pre></div>    </div>
  </li>
</ul>

<hr />

<h3 id="왜-쓰나요-step-by-step-사고">왜 쓰나요? (step-by-step 사고)</h3>

<ol>
  <li>
    <p><strong>의미가 분명해집니다.</strong><br />
<code class="language-plaintext highlighter-rouge">profile=VERILOG</code> 처럼 이름이 보이니, 인자 의미를 헷갈릴 일이 줄어요.<br />
→ 프로젝트 <strong>일관성</strong> 목표에 부합. ✅</p>
  </li>
  <li>
    <p><strong>파라미터 순서 변경에 강합니다.</strong><br />
나중에 옵션을 더 추가해도 기존 호출부는 <code class="language-plaintext highlighter-rouge">name=value</code>라 <strong>깨지지 않음</strong>.<br />
→ API <strong>확장성</strong> 목표에 부합. ✅</p>
  </li>
  <li>
    <p><strong>실수 방지.</strong><br />
<code class="language-plaintext highlighter-rouge">profile</code>과 <code class="language-plaintext highlighter-rouge">encoding</code>을 순서로 바꿔 넣는 실수를 차단. ✅</p>
  </li>
</ol>

<hr />

<h3 id="-와-args-의-차이"><code class="language-plaintext highlighter-rouge">*</code> 와 <code class="language-plaintext highlighter-rouge">*args</code> 의 차이</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*</code> (단독): <strong>구분자</strong>. 뒤의 인자들을 <strong>키워드 전용</strong> 으로 만듭니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*args</code>: 남는 위치 인자들을 <strong>튜플로 수집</strong> 합니다. (수집 + 구분자 역할 모두)</p>
  </li>
</ul>

<p>예:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>         <span class="c1"># b, c는 키워드-only
</span>    <span class="bp">...</span>

<span class="k">def</span> <span class="nf">g</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span> <span class="c1"># a는 위치, args는 추가 위치들 수집, b는 키워드-only
</span>    <span class="bp">...</span>
</code></pre></div></div>

<hr />

<h3 id="보너스--positional-only-도-있어요">보너스: <code class="language-plaintext highlighter-rouge">/</code> (positional-only) 도 있어요</h3>

<p>Python 3.8+ 부터는 <code class="language-plaintext highlighter-rouge">/</code> 로 <strong>위치 전용</strong> 인자를 강제할 수 있습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">h</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="o">/</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>  <span class="c1"># a: 위치-only, b: 둘 다 가능, c: 키워드-only
</span>    <span class="bp">...</span>
</code></pre></div></div>

<hr />

<h3 id="타입-힌트-관련">타입 힌트 관련</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Path | str</code> 는 <strong>Python 3.10+</strong> 의 Union 약식 문법입니다(이전 버전은 <code class="language-plaintext highlighter-rouge">Union[Path, str]</code>).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">TextProfile()</code> 을 기본값으로 두면 <strong>정의 시점에</strong> 한 번 생성된 인스턴스를 재사용합니다.<br />
여기서는 <code class="language-plaintext highlighter-rouge">@dataclass(frozen=True)</code>라 <strong>불변</strong> 이므로 안전하지만,<br />
일반적으로는 <code class="language-plaintext highlighter-rouge">None</code> 기본값 + 함수 내부에서 생성하는 패턴도 고려하세요.</p>
  </li>
</ul>

<hr />

<p>필요하면, 팀 규칙으로 “옵션 인자는 모두 <code class="language-plaintext highlighter-rouge">*</code> 뒤에 배치”를 정해두면 호출부가 항상 <code class="language-plaintext highlighter-rouge">name=value</code>라 깔끔하고, 장기 유지보수에 유리합니다.</p>

<p class="chat--user">

__slots__는 뭐야?

</p>

<p>짧은 체크리스트(개념):</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">__slots__</code>는 <strong>인스턴스가 가질 수 있는 속성 이름들을 고정</strong> 하는 메커니즘이다.</p>
  </li>
  <li>
    <p>효과: <strong>메모리 절감</strong> , <strong>속성 접근 소폭 빠름</strong> , <strong>오타/임의 속성 추가 방지</strong>.</p>
  </li>
  <li>
    <p>선언: <code class="language-plaintext highlighter-rouge">class C: __slots__ = ('a', 'b')</code> 처럼 <strong>튜플/리스트/이터러블</strong> 에 이름을 나열.</p>
  </li>
  <li>
    <p>주의: <strong>동적 속성 추가 불가</strong> , 상속/디폴트/<code class="language-plaintext highlighter-rouge">__dict__</code>/<code class="language-plaintext highlighter-rouge">__weakref__</code> 처리에 신경.</p>
  </li>
  <li>
    <p>권장 사용: <strong>인스턴스가 아주 많고 필드 스키마가 고정</strong> 된 클래스.</p>
  </li>
</ul>

<hr />

<h1 id="한-줄-정의">한 줄 정의</h1>

<p><code class="language-plaintext highlighter-rouge">__slots__</code>를 정의하면 해당 클래스의 인스턴스는 <strong>per-instance<code class="language-plaintext highlighter-rouge">__dict__</code>를 만들지 않고</strong>, 미리 정해둔 슬롯(고정 필드)만 메모리에 <strong>compact</strong> 하게 저장한다.</p>

<hr />

<h2 id="왜-쓰나-step-by-step">왜 쓰나 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>메모리 절감</strong> : <code class="language-plaintext highlighter-rouge">__dict__</code>(해시맵) 대신 <strong>슬롯 배열</strong> 을 써서 인스턴스당 수십 바이트~수백 바이트를 아낀다(필드 수/파이썬 구현에 따라 상이). 대량 객체(예: 수십만 개)에서 큰 차이.</p>
  </li>
  <li>
    <p><strong>속성 접근 비용 감소</strong> : 해시 조회가 아닌 <strong>오프셋 접근</strong> 이라 약간 빠르다(미세하지만 누적되면 의미).</p>
  </li>
  <li>
    <p><strong>API 안전성</strong> : 선언되지 않은 속성은 설정 자체가 에러 → <strong>오타/임의 필드</strong> 방지.</p>
  </li>
</ol>

<hr />

<h2 id="어떻게-쓰나">어떻게 쓰나</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Node</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">value</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">next</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 인스턴스 필드 스키마 고정
</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="nb">next</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>   <span class="c1"># OK
</span>        <span class="n">self</span><span class="p">.</span><span class="nb">next</span> <span class="o">=</span> <span class="nb">next</span>     <span class="c1"># OK
</span>
<span class="n">n</span> <span class="o">=</span> <span class="nc">Node</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">n</span><span class="p">.</span><span class="n">value</span> <span class="o">=</span> <span class="mi">2</span>      <span class="c1"># OK
</span><span class="n">n</span><span class="p">.</span><span class="n">other</span> <span class="o">=</span> <span class="mi">3</span>      <span class="c1"># AttributeError: 'Node' object has no attribute 'other'
</span></code></pre></div></div>

<ul>
  <li>
    <p><strong>디폴트값</strong> 은 보통 <code class="language-plaintext highlighter-rouge">__init__</code>에서 채운다.</p>
  </li>
  <li>
    <p>클래스 속성으로 기본값을 주고 싶다면:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,)</span>
    <span class="n">a</span> <span class="o">=</span> <span class="mi">10</span>  <span class="c1"># 모든 인스턴스의 초기 읽기는 10으로 보이지만,
</span>            <span class="c1"># 인스턴스에 a를 설정하면 인스턴스 슬롯 값이 우선한다.
</span></code></pre></div>    </div>
  </li>
</ul>

<hr />

<h2 id="자주-부딪히는-포인트-꼭-알아둘-것">자주 부딪히는 포인트 (꼭 알아둘 것)</h2>

<h3 id="1-__dict__--__weakref__가-필요하면">1) <code class="language-plaintext highlighter-rouge">__dict__</code> / <code class="language-plaintext highlighter-rouge">__weakref__</code>가 필요하면?</h3>

<ul>
  <li>
    <p>기본적으로 <code class="language-plaintext highlighter-rouge">__slots__</code> 클래스에는 <strong>인스턴스<code class="language-plaintext highlighter-rouge">__dict__</code>가 없다</strong>.</p>
  </li>
  <li><strong>예외적으로</strong> 동적 속성을 허용하고 싶다면 슬롯에 <code class="language-plaintext highlighter-rouge">"__dict__"</code>를 명시:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__dict__</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 슬롯 + 동적 속성 허용
</span></code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">weakref</code>를 쓰려면 <code class="language-plaintext highlighter-rouge">"__weakref__"</code>도 포함:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">C</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">__weakref__</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="2-상속">2) 상속</h3>

<ul>
  <li>
    <p><strong>슬롯 클래스의 서브클래스</strong> 가 <code class="language-plaintext highlighter-rouge">__slots__</code>를 정의하지 않으면, 서브클래스는 <strong>다시<code class="language-plaintext highlighter-rouge">__dict__</code>가 생긴다</strong>(동적 속성 가능).<br />
→ 계속 제한하고 싶다면 <strong>서브클래스에서도<code class="language-plaintext highlighter-rouge">__slots__</code>를 정의</strong>해야 한다.</p>
  </li>
  <li>
    <p>서브클래스에서 <strong>부모 슬롯 이름을 다시 적지 않는다</strong>. 새로 추가하는 슬롯만 나열:</p>
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Base</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,)</span>
    
<span class="k">class</span> <span class="nc">Child</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,)</span>  <span class="c1"># 'a'는 이미 Base에 있으므로 중복 기재 X
</span></code></pre></div>    </div>
  </li>
</ul>

<h3 id="3-다중-상속">3) 다중 상속</h3>

<ul>
  <li>
    <p>다중 상속에서 <strong>슬롯이 서로 충돌</strong> 하면 에러가 날 수 있다.</p>
  </li>
  <li>
    <p>실무 팁: 다중 상속을 최소화하거나, <strong>한쪽만 슬롯</strong> 을 쓰고 다른 쪽은 데이터 없는 믹스인으로 설계.</p>
  </li>
</ul>

<h3 id="4-dataclass와의-결합">4) dataclass와의 결합</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@dataclass(slots=True)</code>(Py3.10+)를 쓰면 <strong>자동으로<code class="language-plaintext highlighter-rouge">__slots__</code>가 생성</strong>된다.</p>
  </li>
  <li>
    <p>이미 수동으로 <code class="language-plaintext highlighter-rouge">__slots__</code>를 정의했다면, <code class="language-plaintext highlighter-rouge">slots=True</code>를 <strong>중복으로 쓰지 않는다</strong>(충돌/중복 정의 주의).</p>
  </li>
</ul>

<h3 id="5-pickle--직렬화">5) pickle / 직렬화</h3>

<ul>
  <li>
    <p>많은 경우 <strong>잘 작동</strong> 하지만, 어떤 프레임워크는 <code class="language-plaintext highlighter-rouge">__dict__</code>를 기대한다.</p>
  </li>
  <li>
    <p>커스텀 직렬화 필요하면 <code class="language-plaintext highlighter-rouge">__getstate__/__setstate__</code>를 구현해 <strong>슬롯 값들을 딕트로 변환</strong> 하는 방식 사용.</p>
  </li>
</ul>

<h3 id="6-프로파일링디버깅-도구">6) 프로파일링/디버깅 도구</h3>

<ul>
  <li>
    <p>일부 도구가 <code class="language-plaintext highlighter-rouge">obj.__dict__</code>를 바로 펼치려다 당황할 수 있다.</p>
  </li>
  <li>
    <p>이런 도구를 쓰면 <code class="language-plaintext highlighter-rouge">"__dict__"</code> 슬롯을 추가하거나, 보조 메서드(예: <code class="language-plaintext highlighter-rouge">to_dict()</code>) 제공.</p>
  </li>
</ul>

<hr />

<h2 id="언제-쓰면-좋은가--피해야-하는가">언제 쓰면 좋은가 / 피해야 하는가</h2>

<p><strong>적합</strong></p>

<ul>
  <li>
    <p>인스턴스가 <strong>엄청 많다</strong> (e.g., 파서 토큰, AST 노드, 로그 레코드 등).</p>
  </li>
  <li>
    <p>속성 스키마가 <strong>변하지 않는다</strong>.</p>
  </li>
  <li>
    <p>라이브러리/코어 레이어에서 <strong>API 안정성</strong> 과 <strong>메모리 효율</strong> 이 중요하다.</p>
  </li>
</ul>

<p><strong>부적합</strong></p>

<ul>
  <li>
    <p>동적으로 속성을 붙였다 뗐다 해야 한다.</p>
  </li>
  <li>
    <p>디버깅/관찰 도구가 <code class="language-plaintext highlighter-rouge">__dict__</code>에 강하게 의존한다.</p>
  </li>
  <li>
    <p>다중 상속 구조가 복잡하다(충돌 위험).</p>
  </li>
</ul>

<hr />

<h2 id="여러분-코드베이스-관점빠른-셀프-체크">여러분 코드베이스 관점(빠른 셀프 체크)</h2>

<ul>
  <li>
    <p>텍스트 버퍼/소스 컨테이너처럼 <strong>필드가 고정</strong> 되고, <strong>많은 인스턴스</strong> 를 만들 가능성이 있다면 <code class="language-plaintext highlighter-rouge">__slots__</code>는 <strong>일관성/성능</strong> 목표에 부합합니다. ✅</p>
  </li>
  <li>
    <p>단, 변환 파이프라인/메타 확장이 잦고 <strong>동적 필드 추가 가능성</strong> 이 있다면, <code class="language-plaintext highlighter-rouge">__slots__</code> 대신 일반 클래스(또는 <code class="language-plaintext highlighter-rouge">__slots__</code>에 <code class="language-plaintext highlighter-rouge">"__dict__"</code> 포함)로 <strong>유연성</strong> 을 남기는 것이 안전합니다. ✅</p>
  </li>
</ul>

<hr />

<h2 id="미니-예시-dataclass--slots">미니 예시: dataclass + slots</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>

<span class="nd">@dataclass</span><span class="p">(</span><span class="n">slots</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># Py3.10+
</span><span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="n">kind</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">value</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">line</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">col</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div></div>

<ul>
  <li>메모리 절감 + 오타 방지 + 명확한 스키마를 한 번에 확보.</li>
</ul>

<p>필요하면, 현재 설계한 <code class="language-plaintext highlighter-rouge">TextBuffer</code>/<code class="language-plaintext highlighter-rouge">VerilogSource</code>에 <code class="language-plaintext highlighter-rouge">__slots__</code>를 적용할 때의 <strong>필드 목록/상속 전략</strong> 을 바로 제안해 드릴게요.</p>

<p class="chat--user">

그냥 타입 판별해서 자동으로 만들게 하는 방식 어때 from_lines, from_string, from_textbuffer 구별하기가 좀 귀찮은데, isinstance 같은걸로 비교해서 자동으로 만들게 하는거지(from_file은 별개로), 기존 함수도 두고 

</p>

<p>좋아요—“타입에 따라 자동 생성”을 넣는 건 편의성에 꽤 유용합니다. 다만 <strong>예측 가능성</strong> 을 해치지 않도록 규칙을 명확히 두면 좋아요.</p>

<h3 id="체크리스트개념">체크리스트(개념)</h3>

<ul>
  <li>
    <p>단일 진입점 <code class="language-plaintext highlighter-rouge">coerce(...)</code>로 <strong>문자열/줄 리스트/TextBuffer</strong> 를 알아서 수용</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">from_*</code>들은 <strong>그대로 유지</strong>(명시적 경로가 필요한 곳에서 사용)</p>
  </li>
  <li>
    <p><strong>모호성 규칙</strong> 고정: <code class="language-plaintext highlighter-rouge">keepends</code> 기본 동작과 판별 기준을 문서화</p>
  </li>
  <li>
    <p>제3자 타입은 <strong>프로토콜/어댑터</strong> 로 확장 가능하게 설계</p>
  </li>
  <li>
    <p>잘못된 타입은 <strong>명확한 오류</strong> 로 거절</p>
  </li>
</ul>

<hr />

<h2 id="설계-결론--빠른-검증">설계 결론 &amp; 빠른 검증</h2>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">TextBuffer.coerce(obj, ...)</code> 추가</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">TextBuffer</code> → 그대로 반환</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">str</code> → <code class="language-plaintext highlighter-rouge">from_string</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">list/tuple/Iterable[str]</code> → <code class="language-plaintext highlighter-rouge">from_lines</code> (필요 시 materialize)</p>
      </li>
      <li>
        <p><em>검증:</em> 호출부 단순화(✅), 기존 명시 API와 공존(✅).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">keepends</code> 기본 정책</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">keepends=None</code>(기본): <strong>한 줄이라도<code class="language-plaintext highlighter-rouge">\n</code>/<code class="language-plaintext highlighter-rouge">\r</code>가 포함되면</strong> <code class="language-plaintext highlighter-rouge">keepends=True</code>로 간주, 아니면 <code class="language-plaintext highlighter-rouge">False</code>.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">keepends</code>를 명시하면 그 값을 그대로 사용.</p>
      </li>
      <li>
        <p><em>검증:</em> 휴리스틱 최소화 + 결정적(✅). 과도한 “추측”은 피함(셀프 코렉트).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>경계 명확화</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">Path/bytes</code>는 <strong>여기서 처리하지 않음</strong>. 파일 I/O는 <code class="language-plaintext highlighter-rouge">from_file</code>로만.</p>
      </li>
      <li>
        <p><em>검증:</em> I/O 사이드이펙트 금지로 일관성 유지(✅).</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="코드-추가-기존-textbuffer에-붙일-메서드">코드 추가 (기존 <code class="language-plaintext highlighter-rouge">TextBuffer</code>에 붙일 메서드)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="c1"># ... 기존 코드 ...
</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">coerce</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        다양한 입력(obj)을 TextBuffer로 표준화.
        - TextBuffer: 그대로 반환
        - str: from_string
        - Iterable[str]: from_lines (필요 시 keepends 추정)
        - (주의) Path/bytes는 여기서 처리하지 않음 → from_file / decode 경로 사용
        </span><span class="sh">"""</span>
        <span class="c1"># 1) 이미 TextBuffer인 경우
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">TextBuffer</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">obj</span>

        <span class="c1"># 2) 문자열
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_string</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="c1"># 3) 문자열 이터러블(리스트/튜플/제너레이터 등)
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="c1"># materialize (제너레이터 보호 및 타입 검사)
</span>            <span class="n">lines</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>

            <span class="k">if</span> <span class="ow">not</span> <span class="nf">all</span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">):</span>
                <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">"</span><span class="s">Iterable must yield str values</span><span class="sh">"</span><span class="p">)</span>

            <span class="c1"># keepends 규칙: 명시값 우선, 없으면 자동 판별
</span>            <span class="n">ke</span> <span class="o">=</span> <span class="n">keepends</span> <span class="k">if</span> <span class="n">keepends</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_lines</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">ke</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="c1"># 4) 그 외 타입은 명확히 거절
</span>        <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="s">Cannot coerce type </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="s"> to TextBuffer. </span><span class="sh">"</span>
            <span class="sh">"</span><span class="s">Use from_file() for paths/files, or pass str/Iterable[str]/TextBuffer.</span><span class="sh">"</span>
        <span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">한 줄이라도 개행 문자를 포함하면 keepends=True로 간주.</span><span class="sh">"""</span>
        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
            <span class="nf">if </span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<p><strong>검증:</strong> 단일 진입점으로 편의성을 제공하면서, 파일 I/O·바이트 처리 등 사이드이펙트는 명시 API로 분리 → <strong>일관성/확장성</strong> 목표에 부합. ✅</p>

<hr />

<h2 id="사용-예">사용 예</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buf1</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf2</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>              <span class="c1"># keepends=False
</span><span class="n">buf3</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>          <span class="c1"># keepends=True (자동 판별)
</span><span class="n">buf4</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="n">existing_textbuffer</span><span class="p">)</span>                                        <span class="c1"># 그대로
# 파일은 명시 API 사용
</span><span class="n">buf5</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_file</span><span class="p">(</span><span class="sh">"</span><span class="s">rtl/top.v</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="확장-아이디어필요-시">확장 아이디어(필요 시)</h2>

<ul>
  <li>
    <p><strong>모듈 전역<code class="language-plaintext highlighter-rouge">ensure_textbuffer(obj, **opts)</code></strong> 함수를 <code class="language-plaintext highlighter-rouge">functools.singledispatch</code>로 제공(내부에서 위 <code class="language-plaintext highlighter-rouge">coerce</code> 호출).</p>
  </li>
  <li>
    <p>외부 타입 지원: 객체가 <code class="language-plaintext highlighter-rouge">to_textbuffer()</code>(또는 <code class="language-plaintext highlighter-rouge">__textbuffer__()</code>)를 구현했다면 그걸 우선 호출하는 <strong>어댑터 패턴</strong> 허용.</p>
  </li>
</ul>

<hr />

<h3 id="최종-판단">최종 판단</h3>

<ul>
  <li>
    <p>“자동 생성”은 생산성을 올리되, <strong>명시 API를 남겨</strong> 경계를 분명히 하는 지금 방식이 가장 안전합니다.</p>
  </li>
  <li>
    <p>휴리스틱은 최소화했고, 필요 시 <code class="language-plaintext highlighter-rouge">keepends</code>를 명시하면 <strong>항상 우선</strong> 합니다.<br />
→ 프로젝트의 <strong>일관성</strong>(놀라움 최소화)과 <strong>확장성</strong>(타입 추가 여지) 목표에 적합합니다. ✅</p>
  </li>
</ul>

<p class="chat--user">

coerce 단어가 좀 어려운데

</p>

<p>좋은 포인트! 이름이 어렵게 느껴지면 쓰는 사람이 안 쓰게 됩니다 😅<br />
아래처럼 바꾸면 어때요?</p>

<h3 id="체크리스트">체크리스트</h3>

<ul>
  <li>
    <p>후보 이름 몇 개 제안하고 의미·관용성 비교</p>
  </li>
  <li>
    <p>하나를 <strong>기본 추천</strong> 으로 선택</p>
  </li>
  <li>
    <p>기존 <code class="language-plaintext highlighter-rouge">coerce</code>는 <strong>호환용 별칭</strong> 으로 남김</p>
  </li>
  <li>
    <p>예시 코드/사용법 제시</p>
  </li>
  <li>
    <p>선택이 <strong>일관성/확장성</strong> 목표에 맞는지 빠른 검증</p>
  </li>
</ul>

<hr />

<h2 id="이름-후보-짧은-코멘트">이름 후보 (짧은 코멘트)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">as_textbuffer(obj, ...)</code> — <strong>가장 추천</strong>. NumPy의 <code class="language-plaintext highlighter-rouge">asarray</code> 패턴처럼 “이걸 TextBuffer로 ‘바꿔서’ 주세요(이미면 그대로)”라는 의미가 <strong>직관적</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ensure_textbuffer(obj, ...)</code> — “TextBuffer 되게 보장해줘”라는 뉘앙스. 명확하지만 약간 길어요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">from_any(obj, ...)</code> — “아무 타입이나 받아들여 생성”. 기능은 맞지만 의미가 약간 포괄적.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wrap(obj, ...)</code> / <code class="language-plaintext highlighter-rouge">adapt(obj, ...)</code> — 포장/어댑트 느낌. 다만 구체성이 떨어짐.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">cast(...)</code> — 타입 캐스트 뉘앙스로 혼동 우려 → 비추천.</p>
  </li>
</ul>

<p><strong>결론:</strong> <code class="language-plaintext highlighter-rouge">as_textbuffer</code>를 기본으로, 클래스 메서드로는 <code class="language-plaintext highlighter-rouge">from_any</code>를 얹고, 기존 <code class="language-plaintext highlighter-rouge">coerce</code>는 alias로 두는 구성이 가장 읽기 쉽고 점진적입니다.</p>

<ul>
  <li><em>검증:</em> 이름만 바꿔도 호출부 가독성↑(일관성 목표 부합) / API 확장 시에도 의미 유지(확장성 목표 부합). ✅</li>
</ul>

<hr />

<h2 id="코드-스니펫-기존-coerce-내용을-내부-구현으로-재사용">코드 스니펫 (기존 <code class="language-plaintext highlighter-rouge">coerce</code> 내용을 내부 구현으로 재사용)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># module-level 함수: 가장 눈에 잘 띄는 진입점
</span><span class="k">def</span> <span class="nf">as_textbuffer</span><span class="p">(</span>
    <span class="n">obj</span><span class="p">,</span>
    <span class="o">*</span><span class="p">,</span>
    <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
    <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_any</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">keepends</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">TextBuffer</span><span class="p">:</span>
    <span class="c1"># ... 기존 코드 ...
</span>
    <span class="c1"># 새 이름: 의미가 분명한 클래스 메서드
</span>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">from_any</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span> <span class="o">=</span> <span class="nc">TextProfile</span><span class="p">(),</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_from_any_impl</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">keepends</span><span class="p">)</span>

    <span class="c1"># 과거 이름은 호환용 별칭으로 유지 (원하면 향후 deprecate)
</span>    <span class="nb">coerce</span> <span class="o">=</span> <span class="n">from_any</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">_from_any_impl</span><span class="p">(</span>
        <span class="n">cls</span><span class="p">,</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">profile</span><span class="p">:</span> <span class="n">TextProfile</span><span class="p">,</span>
        <span class="n">encoding</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">keepends</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">|</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">TextBuffer</span><span class="sh">"</span><span class="p">:</span>
        <span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">TextBuffer</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">obj</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_string</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="p">(</span><span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="n">lines</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="nf">all</span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">):</span>
                <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span><span class="sh">"</span><span class="s">Iterable must yield str values</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">ke</span> <span class="o">=</span> <span class="n">keepends</span> <span class="k">if</span> <span class="n">keepends</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">cls</span><span class="p">.</span><span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">cls</span><span class="p">.</span><span class="nf">from_lines</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">keepends</span><span class="o">=</span><span class="n">ke</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">profile</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">encoding</span><span class="p">)</span>

        <span class="k">raise</span> <span class="nc">TypeError</span><span class="p">(</span>
            <span class="sa">f</span><span class="sh">"</span><span class="s">Cannot convert </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="s"> to TextBuffer. </span><span class="sh">"</span>
            <span class="sh">"</span><span class="s">Use from_file() for paths/files, or pass str/Iterable[str]/TextBuffer.</span><span class="sh">"</span>
        <span class="p">)</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_guess_keepends</span><span class="p">(</span><span class="n">lines</span><span class="p">:</span> <span class="sh">"</span><span class="s">Sequence[str]</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">any</span><span class="p">((</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="sh">"</span><span class="se">\r</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">ln</span><span class="p">)</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="사용-예-1">사용 예</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buf1</span> <span class="o">=</span> <span class="nf">as_textbuffer</span><span class="p">(</span><span class="sh">"</span><span class="s">module top;</span><span class="se">\n</span><span class="s">endmodule</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf2</span> <span class="o">=</span> <span class="nf">as_textbuffer</span><span class="p">([</span><span class="sh">"</span><span class="s">module top;</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">endmodule</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>
<span class="n">buf3</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">from_any</span><span class="p">([</span><span class="sh">"</span><span class="s">a</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">b</span><span class="se">\n</span><span class="sh">"</span><span class="p">],</span> <span class="n">profile</span><span class="o">=</span><span class="n">VERILOG</span><span class="p">)</span>  <span class="c1"># 클래스 메서드 경로
</span><span class="n">buf4</span> <span class="o">=</span> <span class="n">TextBuffer</span><span class="p">.</span><span class="nf">coerce</span><span class="p">(</span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 기존 코드도 그대로 동작(호환 alias)
</span></code></pre></div></div>

<hr />

<h2 id="빠른-검증--셀프코렉트">빠른 검증 &amp; 셀프코렉트</h2>

<ul>
  <li>
    <p><strong>가독성/예측 가능성:</strong> <code class="language-plaintext highlighter-rouge">as_textbuffer</code> 이름만 보고도 역할이 보입니다. 혼동 여지 낮음. ✅</p>
  </li>
  <li>
    <p><strong>일관성:</strong> <code class="language-plaintext highlighter-rouge">from_string/from_lines/from_file</code> 같은 명시 경로를 유지하면서, “편의 경로”는 <code class="language-plaintext highlighter-rouge">as_textbuffer</code>로 통일. ✅</p>
  </li>
  <li>
    <p><strong>확장성:</strong> 제3자 타입이 늘어나면 <code class="language-plaintext highlighter-rouge">_from_any_impl</code>에 어댑터 훅을 추가하면 됨(예: <code class="language-plaintext highlighter-rouge">obj.__textbuffer__()</code> 지원 등). ✅</p>
  </li>
  <li>
    <p><strong>모호성 관리:</strong> 파일/바이트는 여전히 <code class="language-plaintext highlighter-rouge">from_file</code>/decode 경로로만 처리 → 사이드이펙트·추측 로직 최소화. ✅</p>
  </li>
</ul>

<p>원하시면 프로젝트 전역 네이밍 룰(예: “편의 변환 엔트리는 항상 <code class="language-plaintext highlighter-rouge">as_*</code>로 시작”)도 같이 정리해 드릴게요.</p>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">untitled</title><link href="https://hvppyarchive.github.io/python/python-dataclass-method/" rel="alternate" type="text/html" title="untitled" /><published>2025-08-20T17:53:48+09:00</published><updated>2025-08-20T17:53:48+09:00</updated><id>https://hvppyarchive.github.io/python/python-dataclass-method</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-dataclass-method/"><![CDATA[]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Python 클래스 트리 출력</title><link href="https://hvppyarchive.github.io/python/python-class-tree/" rel="alternate" type="text/html" title="Python 클래스 트리 출력" /><published>2025-08-20T15:45:34+09:00</published><updated>2025-08-20T15:45:34+09:00</updated><id>https://hvppyarchive.github.io/python/python-class-tree</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-class-tree/"><![CDATA[<p class="chat--user">

넌 Python 전문가야. Python에서 계층적 구조를 가지고 있는 커스텀 클래스에 대해 보기 좋게 모든 속성 Tree를 출력하게 하고 싶어. 예를 들어 PyVerilog의 AST의 전체 구조를 알고 싶어.

</p>

<p>좋아! “계층적 구조를 가진 커스텀 클래스(예: PyVerilog AST)”를 보기 좋게 트리로 출력하는 범용 유틸을 만들어볼게.<br />
아래 코드는 다음 아이디어를 따릅니다:</p>

<ol>
  <li>
    <p>노드가 무엇이든 처리: <code class="language-plaintext highlighter-rouge">dict/list/tuple/set</code>, 일반 객체(<code class="language-plaintext highlighter-rouge">__dict__</code>/<code class="language-plaintext highlighter-rouge">__slots__</code>), dataclass, Python <code class="language-plaintext highlighter-rouge">ast.AST</code>, 그리고 PyVerilog처럼 <code class="language-plaintext highlighter-rouge">children()</code>/<code class="language-plaintext highlighter-rouge">attr_names</code> 프로토콜을 가진 객체.</p>
  </li>
  <li>
    <p>루프/사이클 안전: 이미 출력한 객체는 다시 들어가지 않음.</p>
  </li>
  <li>
    <p>커스터마이즈: <code class="language-plaintext highlighter-rouge">max_depth</code>, <code class="language-plaintext highlighter-rouge">max_items</code>, 비공개 속성 포함 여부 등.</p>
  </li>
  <li>
    <p>가독성: <code class="language-plaintext highlighter-rouge">├─/└─/│</code> ASCII 브랜치로 예쁘게 렌더링.</p>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">fields</span> <span class="k">as</span> <span class="n">dc_fields</span>
<span class="kn">import</span> <span class="n">ast</span>
<span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Mapping</span><span class="p">,</span> <span class="n">Iterable</span>

<span class="k">def</span> <span class="nf">is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bytes</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">safe_len</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">safe_repr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">maxlen</span><span class="o">=</span><span class="mi">80</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">&lt;</span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="s"> ...&gt;</span><span class="sh">"</span>
    <span class="k">if</span> <span class="n">maxlen</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxlen</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">r</span><span class="p">[:</span><span class="n">maxlen</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">r</span>

<span class="k">def</span> <span class="nf">iter_children</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">max_items</span><span class="o">=</span><span class="mi">50</span><span class="p">):</span>
    <span class="c1"># 1) 매핑형(dict 등)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Mapping</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="nf">items</span><span class="p">()):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">+ items</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">break</span>
            <span class="nf">yield </span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">safe_repr</span><span class="p">(</span><span class="n">k</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># 2) 시퀀스/이터러블(문자열류 제외)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">memoryview</span><span class="p">)):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">,</span> <span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">-</span><span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>

    <span class="c1"># 3) Python 내장 AST
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">ast</span><span class="p">.</span><span class="n">AST</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">ast</span><span class="p">.</span><span class="nf">iter_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># 4) PyVerilog 스타일: children() + attr_names
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">callable</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">)):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">ch</span> <span class="o">=</span> <span class="n">o</span><span class="p">.</span><span class="nf">children</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">ch</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># children()이 [(name, child), ...] 형태면 그대로, 아니면 인덱스 부여
</span>        <span class="nf">if </span><span class="p">(</span><span class="nf">isinstance</span><span class="p">(</span><span class="n">ch</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">))</span> <span class="ow">and</span> <span class="n">ch</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">))</span> 
            <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">ch</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="nb">str</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">child</span> <span class="ow">in</span> <span class="n">ch</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">child</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">seq</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">child</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">child</span><span class="p">)</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span><span class="o">-</span><span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">attr_names</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">attr_names</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">attr_names</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">attr_names</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># 5) dataclass
</span>    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">))</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
        <span class="k">return</span>

    <span class="c1"># 6) 일반 객체: __dict__/__slots__
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">items</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">val</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
            <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span><span class="o">-</span><span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="nf">yield </span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">))</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">slots</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
            <span class="nf">yield </span><span class="p">(</span><span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">slots</span><span class="p">)</span><span class="o">-</span><span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="c1"># 그 밖엔 자식 없음
</span>
<span class="k">def</span> <span class="nf">node_label</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">show_types</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">show_values</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="n">t</span> <span class="o">=</span> <span class="nf">type</span><span class="p">(</span><span class="n">value</span><span class="p">).</span><span class="n">__name__</span>
    <span class="k">if</span> <span class="nf">is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
        <span class="n">val</span> <span class="o">=</span> <span class="nf">safe_repr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span> <span class="k">if</span> <span class="n">show_values</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="k">if</span> <span class="n">show_types</span> <span class="ow">and</span> <span class="n">show_values</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">show_values</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">val</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">elif</span> <span class="n">show_types</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nf">safe_len</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
    <span class="n">extra</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s"> len=</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="sh">"</span> <span class="k">if</span> <span class="n">n</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="k">else</span> <span class="sh">""</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: &lt;</span><span class="si">{</span><span class="n">t</span><span class="si">}{</span><span class="n">extra</span><span class="si">}</span><span class="s">&gt;</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">pretty_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">max_items</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
                <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">show_types</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">show_values</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">객체 전체 속성/자식 구조를 트리로 문자열 렌더링.</span><span class="sh">"""</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> 
                    <span class="nf">node_label</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">show_types</span><span class="p">,</span> <span class="n">show_values</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="n">max_depth</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
                <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">↪ (cycle)</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">return</span>
            <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">oid</span><span class="p">)</span>

        <span class="n">children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">iter_children</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">include_private</span><span class="p">,</span> <span class="n">include_dunder</span><span class="p">,</span> <span class="n">max_items</span><span class="p">))</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">children</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">children</span><span class="p">):</span>
            <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">walk</span><span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="n">child_prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">depth</span><span class="o">=</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="nf">walk</span><span class="p">(</span><span class="n">root_name</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="c1"># 편의: 바로 출력
</span><span class="k">def</span> <span class="nf">print_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">pretty_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="사용-예시-1-python-표준-ast">사용 예시 1) Python 표준 AST</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">ast</span>
<span class="n">code</span> <span class="o">=</span> <span class="sh">"</span><span class="s">a = 1 + 2</span><span class="se">\n</span><span class="s">b = a * 3</span><span class="sh">"</span>
<span class="n">tree</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
<span class="nf">print_tree</span><span class="p">(</span><span class="n">tree</span><span class="p">,</span> <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">Module</span><span class="sh">"</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">max_items</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="사용-예시-2-pyverilog-ast-전체-구조">사용 예시 2) PyVerilog AST 전체 구조</h3>

<blockquote>
  <p>PyVerilog에서는 보통 노드가 <code class="language-plaintext highlighter-rouge">children()</code> 메서드(자식 노드 나열)와 <code class="language-plaintext highlighter-rouge">attr_names</code>(스칼라 속성 이름들)를 제공합니다. 위 유틸은 이 프로토콜을 자동 인식합니다.
```python
from pyverilog.vparser.parser import parse</p>
</blockquote>

<p>ast_root, _ = parse(["top.v"])   # 분석할 Verilog 파일들</p>
<h1 id="트리-전체주의-크면-방대합니다">트리 전체(주의: 크면 방대합니다!)</h1>
<p>print_tree(ast_root, root_name="PyVerilogAST", max_depth=6, max_items=50)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
### 팁

  * 트리가 너무 크면 `max_depth`/`max_items`를 줄이세요.  
예: `print_tree(ast_root, max_depth=4, max_items=20)`

  * 비공개/던더 속성까지 보고 싶으면:  
`print_tree(obj, include_private=True, include_dunder=True)`

  * 값이 너무 길면 자동으로 `…`로 생략합니다.

  * 순환 참조가 있으면 `(cycle)`로 표시하여 무한루프를 방지합니다.

원하는 출력 스타일(예: 값 숨기기, 타입 숨기기, 특정 속성 제외, 파일로 저장 등)로 더 커스터마이즈한 버전도 바로 만들어줄 수 있어요. PyVerilog에서 모듈 단위로만 보고 싶다든지, 특정 노드 유형만 필터링한다든지—원하는 뷰를 알려주면 거기에 맞춰 손질해줄게요.

&lt;p class="chat--user" markdown="1"&gt;

PyVerilog 스타일에 집착하지 말고 범용적으로 모든 속성 dict 에 대해 트리를 만들어줘. “member 변수명: class명” 형태로 나오면 좋겠어

&lt;/p&gt;

좋아—“속성 dict” 중심으로, 어떤 객체든 **멤버 변수 이름: 클래스명** 형태로 트리를 그려주는 범용 유틸을 바로 줄게.  
(값은 보여주지 않고, 타입(클래스명)만 출력. 사이클/깊이/개수 제한, `__dict__`/`__slots__`/dict/시퀀스 다 지원.)
```python
from dataclasses import is_dataclass, fields as dc_fields
from collections.abc import Mapping, Iterable
import types

# ----- 설정 가능한 필터 -----
DATA_LIKE_TYPES = (str, bytes, bytearray, memoryview, int, float, bool, type(None), complex)

def _class_name(x):
    try:
        return type(x).__name__
    except Exception:
        return "&lt;unknown&gt;"

def _is_primitive(x):
    return isinstance(x, DATA_LIKE_TYPES)

def _iter_object_members(o, include_private=False, include_dunder=False, include_properties=False):
    """
    객체의 '멤버 변수' 후보를 (name, value)로 yield.
    - __dict__, __slots__, dataclass 필드 중심
    - include_properties=True 면 property 게터도 포함(예외 발생 시 무시)
    - 메서드/함수/바운드메서드는 제외
    """
    yielded = set()

    # dataclass 우선
    if is_dataclass(o):
        for f in dc_fields(o):
            name = f.name
            try:
                val = getattr(o, name)
            except Exception:
                continue
            if not include_dunder and name.startswith("__") and name.endswith("__"):
                continue
            if not include_private and name.startswith("_") and not (name.startswith("__") and name.endswith("__")):
                continue
            yielded.add(name)
            yield name, val

    # __dict__
    if hasattr(o, "__dict__"):
        for name, val in vars(o).items():
            if not include_dunder and name.startswith("__") and name.endswith("__"):
                continue
            if not include_private and name.startswith("_") and not (name.startswith("__") and name.endswith("__")):
                continue
            yielded.add(name)
            yield name, val

    # __slots__
    if hasattr(o, "__slots__"):
        slots = getattr(o, "__slots__")
        if isinstance(slots, str):
            slots = [slots]
        for name in slots:
            if name in yielded:
                continue
            if not include_dunder and name.startswith("__") and name.endswith("__"):
                continue
            if not include_private and name.startswith("_") and not (name.startswith("__") and name.endswith("__")):
                continue
            try:
                val = getattr(o, name)
            except Exception:
                continue
            yielded.add(name)
            yield name, val

    # 선택: property
    if include_properties:
        # dir 기반으로 property만 추가
        for name in dir(o):
            if name in yielded:
                continue
            if not include_dunder and name.startswith("__") and name.endswith("__"):
                continue
            if not include_private and name.startswith("_") and not (name.startswith("__") and name.endswith("__")):
                continue
            try:
                attr = getattr(type(o), name, None)
                if isinstance(attr, property):
                    try:
                        val = getattr(o, name)
                    except Exception:
                        continue
                    yield name, val
            except Exception:
                continue

def _iter_children(node, include_private, include_dunder, include_properties, max_items):
    """
    노드의 '자식'을 (name, value)로 통일해 열거.
    규칙:
      1) dict류면 key를 멤버명처럼 사용
      2) list/tuple/set 등은 인덱스/순번으로 표기
      3) 기타 객체는 멤버 변수들(__dict__/__slots__/dataclass/property)
    """
    # 1) 매핑
    if isinstance(node, Mapping):
        for i, (k, v) in enumerate(node.items()):
            if i &gt;= max_items:
                yield ("…(truncated)", f"{len(node) - max_items} more")
                return
            yield (f"{repr(k)}", v)
        return

    # 2) 문자열류 제외한 일반 이터러블(시퀀스/세트 등)
    if isinstance(node, Iterable) and not isinstance(node, (str, bytes, bytearray, memoryview)):
        if isinstance(node, (list, tuple)):
            for i, v in enumerate(node[:max_items]):
                yield (f"[{i}]", v)
            if len(node) &gt; max_items:
                yield ("…(truncated)", f"{len(node) - max_items} more")
            return
        elif isinstance(node, (set, frozenset)):
            for i, v in enumerate(list(node)[:max_items]):
                yield (f"[{i}]", v)
            if len(node) &gt; max_items:
                yield ("…(truncated)", f"{len(node) - max_items} more")
            return

    # 3) 일반 객체: 멤버 변수 dict
    for name, val in _iter_object_members(
        node,
        include_private=include_private,
        include_dunder=include_dunder,
        include_properties=include_properties,
    ):
        yield (name, val)

def attr_tree(
    obj,
    root_name="root",
    max_depth=10,
    max_items=50,
    include_private=False,
    include_dunder=False,
    include_properties=False,
):
    """
    객체의 '속성 dict'을 기반으로 트리를 그립니다.
    출력 포맷: "멤버명: 클래스명"
    - dict/시퀀스 요소도 가독성을 위해 키/인덱스를 '멤버명'처럼 출력합니다.
    """
    seen = set()
    lines = []

    def add_line(prefix, is_last, name, value):
        cls = _class_name(value)
        lines.append(prefix + ("└── " if is_last else "├── ") + f"{name}: {cls}")

    def walk(name, value, prefix="", is_last=True, depth=0):
        add_line(prefix, is_last, name, value)
        if depth &gt;= max_depth:
            return

        # 원시 타입은 더 내려가지 않음
        if _is_primitive(value):
            return

        # 사이클 방지
        oid = id(value)
        if oid in seen:
            child_prefix = prefix + ("    " if is_last else "│   ")
            lines.append(child_prefix + "↪ (cycle)")
            return
        seen.add(oid)

        # 자식 열거
        children = list(_iter_children(
            value,
            include_private=include_private,
            include_dunder=include_dunder,
            include_properties=include_properties,
            max_items=max_items,
        ))

        L = len(children)
        for i, (child_name, child_val) in enumerate(children):
            child_prefix = prefix + ("    " if is_last else "│   ")
            walk(child_name, child_val, prefix=child_prefix, is_last=(i == L - 1), depth=depth + 1)

    walk(root_name, obj, "", True, 0)
    return "\n".join(lines)

def print_attr_tree(obj, **kwargs):
    print(attr_tree(obj, **kwargs))
</code></pre></div></div>

<h3 id="핵심-아이디어-step-by-step">핵심 아이디어 (step-by-step)</h3>

<ol>
  <li>
    <p>“무엇을 자식으로 볼 것인가?”</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">dict</code> → 키를 멤버명으로 사용</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">list/tuple/set</code> → <code class="language-plaintext highlighter-rouge">[인덱스]</code> 또는 순번</p>
      </li>
      <li>
        <p>그 외 객체 → <strong>속성 dict</strong> : <code class="language-plaintext highlighter-rouge">__dict__</code>, <code class="language-plaintext highlighter-rouge">__slots__</code>, (옵션) dataclass 필드와 <code class="language-plaintext highlighter-rouge">@property</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p>출력은 값 대신 <strong>클래스명</strong> 만 (<code class="language-plaintext highlighter-rouge">멤버명: 클래스명</code>).</p>
  </li>
  <li>
    <p><strong>사이클 감지</strong> 로 무한 재귀 방지(객체 <code class="language-plaintext highlighter-rouge">id</code> 기억).</p>
  </li>
  <li>
    <p><strong>탐색 한도</strong> : <code class="language-plaintext highlighter-rouge">max_depth</code>, <code class="language-plaintext highlighter-rouge">max_items</code>로 볼륨 제어.</p>
  </li>
  <li>
    <p><strong>가시성 옵션</strong> : <code class="language-plaintext highlighter-rouge">_private</code>/<code class="language-plaintext highlighter-rouge">__dunder__</code>/<code class="language-plaintext highlighter-rouge">property</code> 노출 여부 선택.</p>
  </li>
</ol>

<h3 id="간단-사용-예시">간단 사용 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">,)</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">k</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nc">B</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lst</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_hidden</span> <span class="o">=</span> <span class="sh">"</span><span class="s">secret</span><span class="sh">"</span>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">p</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="k">return</span> <span class="mi">42</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">A</span><span class="p">()</span>
<span class="nf">print_attr_tree</span><span class="p">(</span>
    <span class="n">a</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>     <span class="c1"># _hidden 숨김
</span>    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>      <span class="c1"># __dunder__ 숨김
</span>    <span class="n">include_properties</span><span class="o">=</span><span class="bp">True</span>    <span class="c1"># property p 포함
</span><span class="p">)</span>
</code></pre></div></div>

<p>예상 출력(축약 예):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">└──</span> <span class="n">A</span><span class="p">:</span> <span class="n">A</span>
    <span class="err">├──</span> <span class="n">x</span><span class="p">:</span> <span class="n">B</span>
    <span class="err">│</span>   <span class="err">└──</span> <span class="n">y</span><span class="p">:</span> <span class="nb">dict</span>
    <span class="err">│</span>       <span class="err">└──</span> <span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">:</span> <span class="nb">list</span>
    <span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">│</span>           <span class="err">└──</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">├──</span> <span class="n">lst</span><span class="p">:</span> <span class="nb">list</span>
    <span class="err">│</span>   <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">dict</span>
    <span class="err">│</span>   <span class="err">│</span>   <span class="err">└──</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="nb">int</span>
    <span class="err">│</span>   <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">tuple</span>
    <span class="err">│</span>       <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">│</span>       <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">int</span>
    <span class="err">└──</span> <span class="n">p</span><span class="p">:</span> <span class="nb">int</span>
</code></pre></div></div>

<h3 id="참고-옵션">참고 옵션</h3>

<ul>
  <li>
    <p>깊이/개수 제한: <code class="language-plaintext highlighter-rouge">print_attr_tree(obj, max_depth=4, max_items=30)</code></p>
  </li>
  <li>
    <p>숨겨진 멤버까지: <code class="language-plaintext highlighter-rouge">include_private=True</code>, <code class="language-plaintext highlighter-rouge">include_dunder=True</code></p>
  </li>
  <li>
    <p>property 제외(기본): <code class="language-plaintext highlighter-rouge">include_properties=False</code></p>
  </li>
</ul>

<p>필요하면 특정 타입을 “자식 확장 대상에서 제외/포함”하는 훅, 정렬, 출력 대상 화이트리스트/블랙리스트(예: 메서드/콜러블 전부 제외 등)도 바로 덧붙여 줄게.</p>

<p class="chat--user">

기존 유틸이나 패키지는 없나

</p>

<p>좋은 질문이에요 👍<br />
제가 앞에서 짜드린 건 “직접 커스텀해서 범용 트리 뷰어”를 만드는 코드였는데, 사실 이미 비슷한 기능을 하는 <strong>유틸/패키지</strong> 가 몇 가지 있습니다. 다만 요구하신</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">member 변수명: class명</code> 형태의 계층적 트리<br />
 를 <strong>그대로</strong> 해주는 건 없고, 비슷한 걸 응용할 수 있는 도구들이 있습니다.</p>
</blockquote>

<hr />

<h2 id="1-표준내장-계열">1. 표준/내장 계열</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">pprint</code></strong> (표준 라이브러리)<br />
dict/list를 보기 좋게 출력하지만, 깊은 계층 + 클래스 멤버까지는 한계가 있음.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">inspect</code></strong> (표준 라이브러리)<br />
객체의 signature, members를 introspection 하는 데 특화.<br />
→ raw 데이터를 얻는 데는 좋지만 tree 형태는 직접 그려야 함.</p>
  </li>
</ul>

<hr />

<h2 id="2-트리구조-출력용">2. 트리/구조 출력용</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">anytree</code></strong><br />
파이썬 객체를 트리 구조로 모델링해서 문자열/Graphviz로 출력 가능.<br />
직접 노드 생성해서 넣어야 하므로 “자동 introspection”은 아니고, “구조화된 데이터 → 트리 출력”에 적합.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">asciitree</code></strong><br />
dict 같은 nested 구조를 <code class="language-plaintext highlighter-rouge">├─/└─</code> 형태로 예쁘게 출력.<br />
→ 값 대신 <code class="language-plaintext highlighter-rouge">type(value).__name__</code>만 넣도록 래퍼를 짜면 바로 활용 가능.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">rich</code></strong> 의 <code class="language-plaintext highlighter-rouge">Tree</code><br />
pretty console 출력 라이브러리.<br />
계층적 데이터를 트리로 그려주는 <code class="language-plaintext highlighter-rouge">Tree</code> 컴포넌트가 있음.<br />
→ dict/object를 순회해서 <code class="language-plaintext highlighter-rouge">Tree.add(f"{name}: {type(val).__name__}")</code>만 해주면 요구한 형태로 쉽게 구현 가능.</p>
  </li>
</ul>

<hr />

<h2 id="3-디버깅개발-편의-패키지">3. 디버깅/개발 편의 패키지</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">objprint</code></strong><br />
객체 내부 구조를 이쁘게 출력해줌. dict/list 지원, 순환 감지.<br />
→ 다만 출력 포맷이 “값” 중심이라 <code class="language-plaintext highlighter-rouge">멤버명: 클래스명</code> 전용은 아님.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">varname</code></strong><br />
변수명 추적 라이브러리. 직접 tree 출력은 없지만 introspection에 유용.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">glom</code></strong><br />
중첩 데이터 구조를 탐색/변환하는 도구. 출력은 덜 예쁘지만, dict 트리 처리에 적합.</p>
  </li>
</ul>

<hr />

<h2 id="4-추천-조합">4. 추천 조합</h2>

<p>만약 <strong>“바로 가져다 쓰고 싶다”</strong>면:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">rich.Tree</code> + 짧은 재귀 함수 → “멤버명: 클래스명” 트리 바로 구현 가능.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">asciitree</code>도 lightweight 대안.</p>
  </li>
</ul>

<hr />

<p>👉 결론: <strong>기존 패키지로는<code class="language-plaintext highlighter-rouge">rich</code> + introspection 유틸</strong>이 가장 범용적이고 예쁘게 나옵니다.<br />
제가 위에서 짠 함수도 <code class="language-plaintext highlighter-rouge">print_attr_tree</code> 대신 <code class="language-plaintext highlighter-rouge">rich.Tree</code>를 써서 출력만 바꾸면 훨씬 더 보기 좋게 쓸 수 있어요.</p>

<hr />

<p>원하시면 제가 <code class="language-plaintext highlighter-rouge">rich.Tree</code> 버전으로 “member: class” 전용 트리 프린터 예제를 짜드릴까요?</p>

<p class="chat--user">

leaf일 경우 값도 보여주면 좋겠어 age: int(9) 이런 식으로

</p>

<p>좋습니다 👍<br />
말씀해주신 대로 <strong>leaf 노드(더 이상 내려갈 속성이 없는 경우)</strong>에는 값까지 같이 보여주면 훨씬 직관적이에요.<br />
출력 포맷은 예시처럼:</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">age</span><span class="p">:</span> <span class="kt">int</span><span class="p">(</span><span class="m">9</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="코드-예제-richtree-기반">코드 예제 (<code class="language-plaintext highlighter-rouge">rich.Tree</code> 기반)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">fields</span> <span class="k">as</span> <span class="n">dc_fields</span>
<span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Mapping</span><span class="p">,</span> <span class="n">Iterable</span>
<span class="kn">from</span> <span class="n">rich.tree</span> <span class="kn">import</span> <span class="n">Tree</span>
<span class="kn">from</span> <span class="n">rich</span> <span class="kn">import</span> <span class="k">print</span> <span class="k">as</span> <span class="n">rprint</span>

<span class="n">PRIMITIVES</span> <span class="o">=</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">complex</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">PRIMITIVES</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_short_repr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">maxlen</span><span class="o">=</span><span class="mi">30</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;?&gt;</span><span class="sh">"</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxlen</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">maxlen</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">_iter_members</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">yield</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">return</span>
    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">k</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">k</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">k</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">k</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">k</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">yield</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span>
    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">v</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">k</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">yield</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span>

<span class="k">def</span> <span class="nf">_iter_children</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="c1"># dict
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Mapping</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">node</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">!r}</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
        <span class="k">return</span>
    <span class="c1"># sequence (문자열 제외)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">)):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">,</span> <span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">return</span>
    <span class="c1"># object
</span>    <span class="k">yield</span> <span class="k">from</span> <span class="nf">_iter_members</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">build_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">,</span> <span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">tree</span><span class="p">:</span> <span class="n">Tree</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">depth</span><span class="p">):</span>
        <span class="n">tname</span> <span class="o">=</span> <span class="nf">type</span><span class="p">(</span><span class="n">value</span><span class="p">).</span><span class="n">__name__</span>

        <span class="c1"># leaf &amp; primitive → 값까지 출력
</span>        <span class="k">if</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">)</span> <span class="ow">or</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="n">max_depth</span><span class="p">:</span>
            <span class="n">label</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">tname</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="nf">_short_repr</span><span class="p">(</span><span class="n">value</span><span class="p">)</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">label</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
            <span class="n">tree</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">tname</span><span class="si">}</span><span class="s"> ↪ (cycle)</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">oid</span><span class="p">)</span>

        <span class="n">node_label</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">tname</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">child_tree</span> <span class="o">=</span> <span class="n">tree</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">node_label</span><span class="p">)</span>

        <span class="n">children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">_iter_children</span><span class="p">(</span>
            <span class="n">value</span><span class="p">,</span>
            <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
            <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span>
        <span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">children</span><span class="p">:</span>  <span class="c1"># leaf지만 primitive 아님 (예: 빈 dict)
</span>            <span class="n">child_tree</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">children</span><span class="p">:</span>
                <span class="nf">walk</span><span class="p">(</span><span class="n">child_tree</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="n">root</span> <span class="o">=</span> <span class="nc">Tree</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="nf">type</span><span class="p">(</span><span class="n">obj</span><span class="p">).</span><span class="n">__name__</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">walk</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">root</span>

<span class="k">def</span> <span class="nf">print_attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nf">rprint</span><span class="p">(</span><span class="nf">build_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</code></pre></div></div>

<hr />

<h2 id="사용-예시">사용 예시</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
        <span class="n">self</span><span class="p">.</span><span class="n">pets</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">dog</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cat</span><span class="sh">"</span><span class="p">]</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">9</span><span class="p">)</span>
<span class="nf">print_attr_tree</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Person</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>출력 예시:</p>
<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">Person</span><span class="o">:</span> <span class="nt">Person</span>
<span class="err">└──</span> <span class="nt">Person</span><span class="o">:</span> <span class="nt">Person</span>
    <span class="err">├──</span> <span class="nt">name</span><span class="o">:</span> <span class="nt">str</span><span class="o">(</span><span class="s2">'Alice'</span><span class="o">)</span>
    <span class="err">├──</span> <span class="nt">age</span><span class="o">:</span> <span class="nt">int</span><span class="o">(</span><span class="err">9</span><span class="o">)</span>
    <span class="err">└──</span> <span class="nt">pets</span><span class="o">:</span> <span class="nt">list</span>
        <span class="err">├──</span> <span class="o">[</span><span class="err">0</span><span class="o">]:</span> <span class="nt">str</span><span class="o">(</span><span class="s2">'dog'</span><span class="o">)</span>
        <span class="err">└──</span> <span class="o">[</span><span class="err">1</span><span class="o">]:</span> <span class="nt">str</span><span class="o">(</span><span class="s2">'cat'</span><span class="o">)</span>
</code></pre></div></div>

<hr />

<p>👉 이렇게 하면 <strong>leaf 노드일 경우 값까지<code class="language-plaintext highlighter-rouge">클래스명(값)</code> 형태</strong>로 표시됩니다.<br />
값이 너무 길면 자동으로 <code class="language-plaintext highlighter-rouge">…</code>으로 잘라주도록 했어요.</p>

<p>원하시면 <code class="language-plaintext highlighter-rouge">max_depth</code>, <code class="language-plaintext highlighter-rouge">maxlen</code>, 특정 타입 제외 필터 같은 추가 옵션도 넣어드릴 수 있는데, 혹시 필요하실까요?</p>

<p class="chat--user">

라이브러리 기반 말고 아까 짜준 코드 기반으로

</p>

<p>좋아! <strong>라이브러리 없이</strong> 아까 만든 범용 트리 유틸을 그대로 확장해서, <strong>leaf일 때는 값까지<code class="language-plaintext highlighter-rouge">멤버: 타입(값)</code></strong> 형태로 출력하도록 손봤어.<br />
(leaf 정의: 더 내려갈 자식이 없거나, 원시형이거나, 최대 깊이에 도달한 경우)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">fields</span> <span class="k">as</span> <span class="n">dc_fields</span>
<span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Mapping</span><span class="p">,</span> <span class="n">Iterable</span>

<span class="n">PRIMITIVES</span> <span class="o">=</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">complex</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">PRIMITIVES</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">type</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">__name__</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">&lt;unknown&gt;</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">_short_repr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">maxlen</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;?&gt;</span><span class="sh">"</span>
    <span class="k">if</span> <span class="n">maxlen</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxlen</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">maxlen</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">_iter_object_members</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">yielded</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="n">include_properties</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nf">dir</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">attr</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">o</span><span class="p">),</span> <span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">attr</span><span class="p">,</span> <span class="nb">property</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="k">continue</span>
                    <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>

<span class="k">def</span> <span class="nf">_iter_children</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">include_private</span><span class="p">,</span> <span class="n">include_dunder</span><span class="p">,</span> <span class="n">include_properties</span><span class="p">,</span> <span class="n">max_items</span><span class="p">):</span>
    <span class="c1"># dict류
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Mapping</span><span class="p">):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">items</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">items</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">!r}</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
            <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
        <span class="k">return</span>

    <span class="c1"># 시퀀스/세트 (문자열류 제외)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">memoryview</span><span class="p">)):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">)):</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">)[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
            <span class="k">return</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
            <span class="k">return</span>

    <span class="c1"># 일반 객체 멤버
</span>    <span class="k">yield</span> <span class="k">from</span> <span class="nf">_iter_object_members</span><span class="p">(</span>
        <span class="n">node</span><span class="p">,</span>
        <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
        <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
        <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">attr_tree</span><span class="p">(</span>
    <span class="n">obj</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">max_items</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">leaf_value_maxlen</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
<span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    </span><span class="sh">'</span><span class="s">속성 dict</span><span class="sh">'</span><span class="s"> 기반 범용 트리 출력.
    - 내부 노드:  name: ClassName
    - leaf 노드: name: ClassName(value_repr)
    </span><span class="sh">"""</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">cls</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="nf">_short_repr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">leaf_value_maxlen</span><span class="p">)</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">cls</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="c1"># 깊이 제한 또는 원시형이면 leaf
</span>        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="n">max_depth</span> <span class="ow">or</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="c1"># 사이클 방지
</span>        <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
            <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">child_prefix</span> <span class="o">+</span> <span class="sh">"</span><span class="s">↪ (cycle)</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">oid</span><span class="p">)</span>

        <span class="c1"># 자식 미리 구해보고, 없으면 leaf 취급(+값 표시)
</span>        <span class="n">children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">_iter_children</span><span class="p">(</span>
            <span class="n">value</span><span class="p">,</span>
            <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
            <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
            <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
            <span class="n">max_items</span><span class="o">=</span><span class="n">max_items</span><span class="p">,</span>
        <span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">children</span><span class="p">:</span>
            <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="c1"># 내부 노드
</span>        <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>

        <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">children</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">children</span><span class="p">):</span>
            <span class="nf">walk</span><span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="n">child_prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">depth</span><span class="o">=</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="nf">walk</span><span class="p">(</span><span class="n">root_name</span><span class="p">,</span> <span class="n">obj</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="bp">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="예시">예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">,)</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">k</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">9</span>
        <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nc">B</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lst</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_hidden</span> <span class="o">=</span> <span class="sh">"</span><span class="s">secret</span><span class="sh">"</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">A</span><span class="p">()</span>
<span class="nf">print_attr_tree</span><span class="p">(</span>
    <span class="n">a</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>    <span class="c1"># _hidden 숨김
</span>    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>     <span class="c1"># __dunder__ 숨김
</span>    <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span>
<span class="p">)</span>
</code></pre></div></div>

<p>출력(예):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">└──</span> <span class="n">A</span><span class="p">:</span> <span class="n">A</span>
    <span class="err">├──</span> <span class="n">name</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="sh">'</span><span class="s">Alice</span><span class="sh">'</span><span class="p">)</span>
    <span class="err">├──</span> <span class="n">age</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
    <span class="err">├──</span> <span class="n">x</span><span class="p">:</span> <span class="n">B</span>
    <span class="err">│</span>   <span class="err">└──</span> <span class="n">y</span><span class="p">:</span> <span class="nb">dict</span>
    <span class="err">│</span>       <span class="err">└──</span> <span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">:</span> <span class="nb">list</span>
    <span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="err">│</span>           <span class="err">└──</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
    <span class="err">└──</span> <span class="n">lst</span><span class="p">:</span> <span class="nb">list</span>
        <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">dict</span>
        <span class="err">│</span>   <span class="err">└──</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">tuple</span>
            <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
            <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="참고-step-by-step">참고 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>leaf 판단</strong> : (a) 원시형(PRIMITIVES), (b) <code class="language-plaintext highlighter-rouge">max_depth</code> 도달, (c) 자식 탐색 결과 없음 → 값까지 출력.</p>
  </li>
  <li>
    <p><strong>내부 노드</strong> : 자식이 있으면 <code class="language-plaintext highlighter-rouge">name: ClassName</code>만 찍고 아래로 재귀.</p>
  </li>
  <li>
    <p><strong>사이클</strong> : 이미 본 객체면 <code class="language-plaintext highlighter-rouge">(cycle)</code> 표시하고 중단.</p>
  </li>
  <li>
    <p><strong>가시성 옵션</strong> : <code class="language-plaintext highlighter-rouge">_private</code>, <code class="language-plaintext highlighter-rouge">__dunder__</code>, <code class="language-plaintext highlighter-rouge">@property</code> 포함 여부 조절.</p>
  </li>
  <li>
    <p><strong>길이 제한</strong> : <code class="language-plaintext highlighter-rouge">leaf_value_maxlen</code>으로 leaf 값 <code class="language-plaintext highlighter-rouge">repr</code> 길이 제어.</p>
  </li>
</ol>

<p>더 원하는 포맷(예: <code class="language-plaintext highlighter-rouge">key="..."</code> 따옴표 통일, dict 키 정렬, 특정 타입 축약 등) 있으면 말해줘—바로 반영할게!</p>

<p class="chat--user">

가장 root 앞에 ㄴ— 가 들어가서 전체적으로 인덴트가 너무 많아져. 첫 루트는 선 없이 그냥 바로 A: A 이렇게 가게해줘. 하위 속성들도 1칸씩 인덱트 당기고

</p>

<p>좋아! “루트에는 선(└/├) 없이 바로 <code class="language-plaintext highlighter-rouge">A: A</code>로 시작”하고, “하위 속성도 한 칸(레벨) 덜 들여쓰기” 되도록 코드를 손봤어. 핵심은 <strong>루트 라벨은 일반 텍스트로 출력</strong> 하고, <strong>자식부터 브랜치 기호</strong> 를 붙이는 거야.</p>

<p>아래는 <strong>바뀐 전체 코드</strong>(외부 라이브러리 없음):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">is_dataclass</span><span class="p">,</span> <span class="n">fields</span> <span class="k">as</span> <span class="n">dc_fields</span>
<span class="kn">from</span> <span class="n">collections.abc</span> <span class="kn">import</span> <span class="n">Mapping</span><span class="p">,</span> <span class="n">Iterable</span>

<span class="n">PRIMITIVES</span> <span class="o">=</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">,</span> <span class="nb">bool</span><span class="p">,</span> <span class="nf">type</span><span class="p">(</span><span class="bp">None</span><span class="p">),</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">complex</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">PRIMITIVES</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">type</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">__name__</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">&lt;unknown&gt;</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">_short_repr</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">maxlen</span><span class="o">=</span><span class="mi">60</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nf">repr</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;?&gt;</span><span class="sh">"</span>
    <span class="k">if</span> <span class="n">maxlen</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxlen</span><span class="p">:</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">[:</span><span class="n">maxlen</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span>
    <span class="k">return</span> <span class="n">s</span>

<span class="k">def</span> <span class="nf">_iter_object_members</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">yielded</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="k">if</span> <span class="n">include_properties</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nf">dir</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">attr</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">o</span><span class="p">),</span> <span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">attr</span><span class="p">,</span> <span class="nb">property</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="k">continue</span>
                    <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>

<span class="k">def</span> <span class="nf">_iter_children</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">include_private</span><span class="p">,</span> <span class="n">include_dunder</span><span class="p">,</span> <span class="n">include_properties</span><span class="p">,</span> <span class="n">max_items</span><span class="p">):</span>
    <span class="c1"># dict류
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Mapping</span><span class="p">):</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">items</span><span class="p">())</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">items</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
            <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">k</span><span class="si">!r}</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
            <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
        <span class="k">return</span>

    <span class="c1"># 시퀀스/세트 (문자열류 제외)
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">,</span> <span class="nb">bytearray</span><span class="p">,</span> <span class="nb">memoryview</span><span class="p">)):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">)):</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
            <span class="k">return</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="p">(</span><span class="nb">set</span><span class="p">,</span> <span class="nb">frozenset</span><span class="p">)):</span>
            <span class="n">seq</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">seq</span><span class="p">[:</span><span class="n">max_items</span><span class="p">]):</span>
                <span class="k">yield</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">,</span> <span class="n">v</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_items</span><span class="p">:</span>
                <span class="k">yield</span> <span class="sh">"</span><span class="s">…(truncated)</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="nf">len</span><span class="p">(</span><span class="n">seq</span><span class="p">)</span> <span class="o">-</span> <span class="n">max_items</span><span class="si">}</span><span class="s"> more</span><span class="sh">"</span>
            <span class="k">return</span>

    <span class="c1"># 일반 객체 멤버
</span>    <span class="k">yield</span> <span class="k">from</span> <span class="nf">_iter_object_members</span><span class="p">(</span>
        <span class="n">node</span><span class="p">,</span>
        <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
        <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
        <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">attr_tree</span><span class="p">(</span>
    <span class="n">obj</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
    <span class="n">max_items</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">leaf_value_maxlen</span><span class="o">=</span><span class="mi">60</span><span class="p">,</span>
<span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    </span><span class="sh">'</span><span class="s">속성 dict</span><span class="sh">'</span><span class="s"> 기반 범용 트리 출력.
    - 루트:  name: ClassName  (브랜치 선 없음)
    - 내부 노드:  name: ClassName
    - leaf 노드: name: ClassName(value_repr)
    </span><span class="sh">"""</span>
    <span class="n">seen</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">cls</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="nf">_short_repr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">leaf_value_maxlen</span><span class="p">)</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
        <span class="n">cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">└── </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">├── </span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">cls</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">walk</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">depth</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
        <span class="c1"># 깊이 제한 또는 원시형이면 leaf
</span>        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="n">max_depth</span> <span class="ow">or</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">value</span><span class="p">):</span>
            <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="n">oid</span> <span class="o">=</span> <span class="nf">id</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">oid</span> <span class="ow">in</span> <span class="n">seen</span><span class="p">:</span>
            <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">child_prefix</span> <span class="o">+</span> <span class="sh">"</span><span class="s">↪ (cycle)</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="n">seen</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">oid</span><span class="p">)</span>

        <span class="n">children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">_iter_children</span><span class="p">(</span>
            <span class="n">value</span><span class="p">,</span>
            <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
            <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
            <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
            <span class="n">max_items</span><span class="o">=</span><span class="n">max_items</span><span class="p">,</span>
        <span class="p">))</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">children</span><span class="p">:</span>
            <span class="nf">add_leaf_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
            <span class="k">return</span>

        <span class="c1"># 내부 노드
</span>        <span class="nf">add_inner_line</span><span class="p">(</span><span class="n">prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
        <span class="n">child_prefix</span> <span class="o">=</span> <span class="n">prefix</span> <span class="o">+</span> <span class="p">(</span><span class="sh">"</span><span class="s">    </span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_last</span> <span class="k">else</span> <span class="sh">"</span><span class="s">│   </span><span class="sh">"</span><span class="p">)</span>

        <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">children</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">children</span><span class="p">):</span>
            <span class="nf">walk</span><span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="n">child_prefix</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">depth</span><span class="o">=</span><span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

    <span class="c1"># --- 루트 출력 (브랜치 선/인덴트 없음) ---
</span>    <span class="n">root_cls</span> <span class="o">=</span> <span class="nf">_class_name</span><span class="p">(</span><span class="n">obj</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">_is_primitive</span><span class="p">(</span><span class="n">obj</span><span class="p">):</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">root_name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">root_cls</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="nf">_short_repr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">leaf_value_maxlen</span><span class="p">)</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">root_name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">root_cls</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># 루트의 자식부터는 브랜치 기호를 사용하되, 추가 인덴트 없이 바로 시작
</span>    <span class="n">root_children</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">_iter_children</span><span class="p">(</span>
        <span class="n">obj</span><span class="p">,</span>
        <span class="n">include_private</span><span class="o">=</span><span class="n">include_private</span><span class="p">,</span>
        <span class="n">include_dunder</span><span class="o">=</span><span class="n">include_dunder</span><span class="p">,</span>
        <span class="n">include_properties</span><span class="o">=</span><span class="n">include_properties</span><span class="p">,</span>
        <span class="n">max_items</span><span class="o">=</span><span class="n">max_items</span><span class="p">,</span>
    <span class="p">))</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">root_children</span><span class="p">:</span>
        <span class="c1"># 자식이 없는 비-원시 루트 (예: 빈 dict 등)
</span>        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

    <span class="n">L</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">root_children</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">root_children</span><span class="p">):</span>
        <span class="c1"># prefix=""로 시작 → 하위가 한 칸(레벨) 당겨진 효과
</span>        <span class="nf">walk</span><span class="p">(</span><span class="n">child_name</span><span class="p">,</span> <span class="n">child_val</span><span class="p">,</span> <span class="n">prefix</span><span class="o">=</span><span class="sh">""</span><span class="p">,</span> <span class="n">is_last</span><span class="o">=</span><span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="n">L</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="n">depth</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">attr_tree</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="동작-확인-예시">동작 확인 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">B</span><span class="p">:</span>
    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">y</span><span class="sh">"</span><span class="p">,)</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">k</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]}</span>

<span class="k">class</span> <span class="nc">A</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">9</span>
        <span class="n">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="nc">B</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lst</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">a</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">},</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_hidden</span> <span class="o">=</span> <span class="sh">"</span><span class="s">secret</span><span class="sh">"</span>

<span class="n">a</span> <span class="o">=</span> <span class="nc">A</span><span class="p">()</span>
<span class="nf">print_attr_tree</span><span class="p">(</span>
    <span class="n">a</span><span class="p">,</span>
    <span class="n">root_name</span><span class="o">=</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">max_depth</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
    <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span>
<span class="p">)</span>
</code></pre></div></div>

<h4 id="기대-출력인덴트-한-단계-감소--루트에-선-없음">기대 출력(인덴트 한 단계 감소 + 루트에 선 없음)</h4>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">A</span><span class="p">:</span> <span class="n">A</span>
<span class="err">├──</span> <span class="n">name</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="sh">'</span><span class="s">Alice</span><span class="sh">'</span><span class="p">)</span>
<span class="err">├──</span> <span class="n">age</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span>
<span class="err">├──</span> <span class="n">x</span><span class="p">:</span> <span class="n">B</span>
<span class="err">│</span>   <span class="err">└──</span> <span class="n">y</span><span class="p">:</span> <span class="nb">dict</span>
<span class="err">│</span>       <span class="err">└──</span> <span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">:</span> <span class="nb">list</span>
<span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="err">│</span>           <span class="err">├──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="err">│</span>           <span class="err">└──</span> <span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="err">└──</span> <span class="n">lst</span><span class="p">:</span> <span class="nb">list</span>
    <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nb">dict</span>
    <span class="err">│</span>   <span class="err">└──</span> <span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nb">tuple</span>
        <span class="err">├──</span> <span class="p">[</span><span class="mi">0</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
        <span class="err">└──</span> <span class="p">[</span><span class="mi">1</span><span class="p">]:</span> <span class="nf">int</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<p>필요하면 루트만 값 표시 여부(지금은 원시형 루트일 때만 <code class="language-plaintext highlighter-rouge">type(value)(repr)</code> 표시), 키 정렬 옵션, set 정렬, 길이 제한 등을 더 넣어줄 수도 있어. 원하는 포맷 있으면 말해줘!</p>

<p class="chat--user">

아 그런데 @dataclass에 대해서 이걸 적용했더니 같은 속성이 2번씩 나오네

</p>

<p>맞아요—그 현상은 <strong>dataclass 필드를 먼저 yield</strong> 한 뒤에, 다시 <code class="language-plaintext highlighter-rouge">__dict__</code>에서 <strong>같은 이름을 한 번 더</strong> 내보내서 생긴 중복이에요.<br />
해결은 간단합니다: <code class="language-plaintext highlighter-rouge">__dict__</code>를 순회할 때 <strong>이미 낸 이름이면 건너뛰기</strong> 만 추가하면 됩니다. (<code class="language-plaintext highlighter-rouge">__slots__</code>/<code class="language-plaintext highlighter-rouge">property</code> 쪽은 이미 중복 방지가 되어 있었어요.)</p>

<p>아래처럼 <code class="language-plaintext highlighter-rouge">_iter_object_members</code> 함수만 교체하세요. (나머지 코드는 그대로)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">_iter_object_members</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">include_private</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_dunder</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">include_properties</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="n">yielded</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="c1"># 1) dataclass 우선
</span>    <span class="k">if</span> <span class="nf">is_dataclass</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="nf">dc_fields</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">name</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="c1"># 2) __dict__ (⚠️ 추가된 중복 방지)
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nf">vars</span><span class="p">(</span><span class="n">o</span><span class="p">).</span><span class="nf">items</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>           <span class="c1"># &lt;&lt;&lt; 중복 방지 (핵심 수정)
</span>                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="c1"># 3) __slots__ (이미 중복 방지 있음)
</span>    <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">slots</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="sh">"</span><span class="s">__slots__</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">slots</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">slots</span> <span class="o">=</span> <span class="p">[</span><span class="n">slots</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">slots</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
            <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>

    <span class="c1"># 4) @property (이미 중복 방지 있음)
</span>    <span class="k">if</span> <span class="n">include_properties</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nf">dir</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">yielded</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_dunder</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">include_private</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">(</span><span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">__</span><span class="sh">"</span><span class="p">)):</span>
                <span class="k">continue</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">attr</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">type</span><span class="p">(</span><span class="n">o</span><span class="p">),</span> <span class="n">name</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">attr</span><span class="p">,</span> <span class="nb">property</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">val</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="k">continue</span>
                    <span class="n">yielded</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>     <span class="c1"># (일관성)
</span>                    <span class="k">yield</span> <span class="n">name</span><span class="p">,</span> <span class="n">val</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
</code></pre></div></div>

<h3 id="왜-이게-맞나-step-by-step">왜 이게 맞나 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>dataclass 필드</strong> 를 먼저 내보냄(원하는 순서).</p>
  </li>
  <li>
    <p>같은 이름이 <code class="language-plaintext highlighter-rouge">__dict__</code>에도 있으므로, <code class="language-plaintext highlighter-rouge">yielded</code>에 기록된 이름이면 <strong>건너뜀</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">__slots__</code>/<code class="language-plaintext highlighter-rouge">property</code>도 동일한 규칙으로 <strong>중복 방지</strong>.</p>
  </li>
  <li>
    <p>결과: dataclass에서 <strong>중복 없이</strong> 한 번만 표기됩니다.</p>
  </li>
</ol>

<p>원하면 dataclass + <code class="language-plaintext highlighter-rouge">slots=True</code> 조합(파이썬 3.10+)도 테스트 예제 드릴게요.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">PyVerilog AST 변환</title><link href="https://hvppyarchive.github.io/verilog/pyverilog-ir/" rel="alternate" type="text/html" title="PyVerilog AST 변환" /><published>2025-08-20T14:24:23+09:00</published><updated>2025-08-20T14:24:23+09:00</updated><id>https://hvppyarchive.github.io/verilog/pyverilog-ir</id><content type="html" xml:base="https://hvppyarchive.github.io/verilog/pyverilog-ir/"><![CDATA[<p class="chat--user">

PyVerilog의 ast가 생각보다 정규화(표준화) 되어 있지 않아서 예외처리할 것이 너무 많아.(e.g. port가 IO 포함인지, 본문에 써있는지 등등) 좀 더 표준화된 형식으로 쉽게 traverse할 수 있는 형태로 conversion 하는 기능을 개발하려고 해. 들어가야할 사항들: - port(순서, 포트명, width(msb, lsb), in/out/inout) - 내부 instance(submodule, port-argument mapping) - 내부 nets(width(msb, lsb)) 

</p>

<p>좋아요—PyVerilog AST의 들쭉날쭉함(ANSI/Non-ANSI 포트 선언, 포지셔널/네임드 인스턴스, width 표현식 등) 때문에 예외가 많죠. 아래처럼 <strong>표준화된 중간 표현(IR)</strong>로 변환하는 파이프라인을 제안합니다. 바로 쓸 수 있는 <strong>참조 구현 코드</strong> 도 넣었어요.</p>

<hr />

<h1 id="목표">목표</h1>

<ul>
  <li>
    <p>모듈 단위로 <strong>일관된 JSON IR</strong> 제공</p>
  </li>
  <li>
    <p>포트: <strong>순서(index), 이름, 방향, 폭(msb/lsb, 정수 평가 가능하면 width), signed 여부</strong></p>
  </li>
  <li>
    <p>내부 인스턴스: <strong>서브모듈명, 인스턴스명, 파라미터 override, 포트-아규먼트 매핑(포지셔널→네임드 자동 치환)</strong></p>
  </li>
  <li>
    <p>내부 nets: <strong>wire/reg 등, 이름, 폭(msb/lsb, width)</strong></p>
  </li>
</ul>

<hr />

<h1 id="설계-스텝별">설계 (스텝별)</h1>

<ol>
  <li><strong>IR 스키마 정의</strong></li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"modules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"&lt;modname&gt;"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"parameters"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"8"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">8</span><span class="p">}],</span><span class="w">
      </span><span class="nl">"ports"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"signed"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
         </span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"nets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">,</span><span class="nl">"kind"</span><span class="p">:</span><span class="s2">"wire"</span><span class="p">,</span><span class="nl">"signed"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
         </span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"WIDTH-1"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">8</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"instances"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"inst"</span><span class="p">:</span><span class="s2">"u0"</span><span class="p">,</span><span class="nl">"module"</span><span class="p">:</span><span class="s2">"child"</span><span class="p">,</span><span class="nl">"param_overrides"</span><span class="p">:[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"4"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">4</span><span class="p">}],</span><span class="w">
         </span><span class="nl">"connections"</span><span class="p">:[{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"data[3:0]"</span><span class="p">},{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"b"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">}]}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*_str</code>는 원본 표현식 문자열, <code class="language-plaintext highlighter-rouge">msb/lsb/width/value</code>는 <strong>가능하면 정수 평가</strong> , 실패 시 <code class="language-plaintext highlighter-rouge">null</code>.</p>
  </li>
  <li>
    <p>포지셔널 연결은 <strong>서브모듈 포트 순서</strong> 를 이용해 네임드로 변환.</p>
  </li>
</ul>

<ol>
  <li><strong>두 단계 수집</strong></li>
</ol>

<ul>
  <li>
    <p><strong>1패스</strong> : 모든 모듈의 포트 순서/기본 파라미터 테이블 생성(포지셔널 매핑용).</p>
  </li>
  <li>
    <p><strong>2패스</strong> : 각 모듈에 대해 포트/넷/인스턴스 표준화.</p>
  </li>
</ul>

<ol>
  <li><strong>포트 정규화</strong></li>
</ol>

<ul>
  <li>
    <p>ANSI(<code class="language-plaintext highlighter-rouge">Ioport</code>)와 Non-ANSI(<code class="language-plaintext highlighter-rouge">Port</code>+본문 <code class="language-plaintext highlighter-rouge">Input/Output/Inout</code> 선언) 모두 흡수.</p>
  </li>
  <li>
    <p>폭 미지정은 <code class="language-plaintext highlighter-rouge">1비트(msb=lsb=0)</code>로 통일. 방향 미상은 보수적으로 <code class="language-plaintext highlighter-rouge">inout</code> 대신 <strong>발견 실패 시 null</strong>(현실적으로 거의 없음).</p>
  </li>
</ul>

<ol>
  <li><strong>인스턴스 정규화</strong></li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">InstanceList</code>를 재귀 탐색(Generate 블록 내부 포함).</p>
  </li>
  <li>
    <p>포지셔널 연결은 1패스에서 모은 <strong>서브모듈 포트 순서</strong> 로 네임드 변환. 알 수 없는 외부 모듈은 인덱스 기반으로 남김(예: <code class="language-plaintext highlighter-rouge">__pos0</code>, <code class="language-plaintext highlighter-rouge">__pos1</code>).</p>
  </li>
</ul>

<ol>
  <li><strong>넷 정규화</strong></li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wire/reg</code>(필요하면 <code class="language-plaintext highlighter-rouge">integer</code>)를 수집, 다중 선언은 개별 항목으로 분할.</p>
  </li>
  <li>
    <p>포트 선언에서 이미 등장한 식별자는 <strong>nets에서 중복 제외</strong>(요구사항이 “내부 nets”이므로).</p>
  </li>
</ul>

<ol>
  <li><strong>표현식 평가기</strong></li>
</ol>

<ul>
  <li>파라미터 환경을 사용해 <code class="language-plaintext highlighter-rouge">IntConst/Identifier/UnaryOp/BinaryOp</code> 중심으로 <strong>안전한 정수 평가</strong>(미지원 연산 시 값은 <code class="language-plaintext highlighter-rouge">null</code>, 원 문자열은 유지).</li>
</ul>

<hr />

<h1 id="레퍼런스-구현-python--pyverilog">레퍼런스 구현 (Python / PyVerilog)</h1>

<blockquote>
  <p>pip: <code class="language-plaintext highlighter-rouge">pyverilog</code> 필요. 파일 모음 입력 → 위 IR JSON 반환.
```python</p>
  <h1 id="vnormpy">vnorm.py</h1>
  <p>from <strong>future</strong> import annotations
from typing import Any, Dict, List, Tuple, Optional
import json
from pyverilog.vparser.parser import parse
from pyverilog.vparser import ast as vast
from pyverilog.ast_code_generator.codegen import ASTCodeGenerator</p>
</blockquote>

<p>codegen = ASTCodeGenerator()</p>

<h1 id="--utilities--">———- utilities ———-</h1>
<p>def to_str(node) -&gt; Optional[str]:
    if node is None:
        return None
    try:
        return codegen.visit(node)
    except Exception:
        return None</p>

<p>def int_from_intconst(intconst: str) -&gt; Optional[int]:
    # Handles decimal/hex/bin/octal Verilog ints like 8'hFF or 'd10.
    s = intconst.replace('_', '')
    try:
        # forms: 10, 8'hFF, 'd3
        if "'" not in s:
            return int(s, 10)
        width_base, val = s.split("'")
        base = val[0].lower()
        digits = val[1:]
        if base == 'd': return int(digits, 10)
        if base == 'h': return int(digits, 16)
        if base == 'b': return int(digits, 2)
        if base == 'o': return int(digits, 8)
        # unknown base
        return int(digits, 10)
    except Exception:
        return None</p>

<p>def eval_expr(node, env: Dict[str, int]) -&gt; Optional[int]:
    # conservative evaluator for width-ish integer expressions
    if node is None:
        return None
    if isinstance(node, vast.IntConst):
        return int_from_intconst(node.value)
    if isinstance(node, vast.Identifier):
        return env.get(node.name)
    if isinstance(node, vast.UnaryOperator):
        v = eval_expr(node.children()[0], env)
        if v is None: return None
        op = node.<strong>class</strong>.<strong>name</strong>
        if op in ("Uplus",): return +v
        if op in ("Uminus",): return -v
        if op in ("Ulnot","Unot"): return 0 if v else 1
        return None
    if isinstance(node, vast.Partselect) or isinstance(node, vast.Pointer):
        # treat as unknown integer
        return None
    if isinstance(node, vast.Concat) or isinstance(node, vast.Repeat):
        return None
    # Binary operators
    if isinstance(node, vast.BinaryOperator):
        a = eval_expr(node.left, env)
        b = eval_expr(node.right, env)
        if a is None or b is None:
            return None
        t = node.<strong>class</strong>.<strong>name</strong>
        try:
            if t == "Plus": return a + b
            if t == "Minus": return a - b
            if t == "Times": return a * b
            if t == "Div": return a // b if b != 0 else None
            if t == "Power": return a ** b
            if t == "Mod": return a % b if b != 0 else None
            if t == "Sll": return a « b
            if t == "Srl": return a » b
            if t == "And": return a &amp; b
            if t == "Or":  return a | b
            if t == "Xor": return a ^ b
        except Exception:
            return None
        return None
    return None</p>

<p>def width_tuple(width_node, env: Dict[str,int]):
    # returns (msb_str, lsb_str, msb_val, lsb_val, width_val)
    if width_node is None:
        return "0", "0", 0, 0, 1
    msb_n, lsb_n = width_node.msb, width_node.lsb
    msb_s, lsb_s = to_str(msb_n), to_str(lsb_n)
    msb_v, lsb_v = eval_expr(msb_n, env), eval_expr(lsb_n, env)
    width_v = None
    if msb_v is not None and lsb_v is not None:
        width_v = abs(msb_v - lsb_v) + 1
    return msb_s, lsb_s, msb_v, lsb_v, width_v</p>

<h1 id="--1st-pass-collect-module-port-order--param-defaults--">———- 1st pass: collect module port order &amp; param defaults ———-</h1>
<p>def collect_modules(ast_root) -&gt; Dict[str, vast.ModuleDef]:
    mods = {}
    for d in ast_root.description.definitions:
        if isinstance(d, vast.ModuleDef):
            mods[d.name] = d
    return mods</p>

<p>def collect_param_env(mod: vast.ModuleDef) -&gt; Dict[str,int]:
    env = {}
    # parameters in header
    if getattr(mod, "paramlist", None):
        for p in mod.paramlist.params:
            if isinstance(p, vast.Parameter):
                v = eval_expr(p.value, env)  # parameters can depend on earlier ones
                if v is not None:
                    env[p.name] = v
    # parameters in body declarations, if any
    for item in getattr(mod, "items", []) or []:
        if isinstance(item, vast.Decl):
            for e in item.list:
                if isinstance(e, vast.Parameter):
                    v = eval_expr(e.value, env)
                    if v is not None:
                        env[e.name] = v
    return env</p>

<p>def ordered_port_names(mod: vast.ModuleDef) -&gt; List[str]:
    names = []
    if mod.portlist is None:
        return names
    for p in mod.portlist.ports:
        # Ioport(first=Identifier, second=Input/Output/Inout)
        if isinstance(p, vast.Ioport):
            names.append(p.first.name)
        elif isinstance(p, vast.Port):
            # Port(name, arg=None) in non-ANSI
            names.append(p.name)
    return names</p>

<h1 id="--helpers-declaration-maps--">———- helpers: declaration maps ———-</h1>
<p>def build_io_decl_map(mod: vast.ModuleDef, env: Dict[str,int]):
    # name -&gt; (dir, signed, width_info)
    io_map = {}
    for item in getattr(mod, "items", []) or []:
        if not isinstance(item, vast.Decl):
            continue
        for e in item.list:
            if isinstance(e, (vast.Input, vast.Output, vast.Inout)):
                dir_ = "input" if isinstance(e, vast.Input) else ("output" if isinstance(e, vast.Output) else "inout")
                signed = bool(getattr(e, "signed", False))
                w = getattr(e, "width", None)
                msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
                for name in [n.name for n in e.children() if isinstance(n, vast.Identifier)]:
                    io_map[name] = (dir_, signed, (msb_s, lsb_s, msb_v, lsb_v, width_v))
    return io_map</p>

<p>def build_net_decl_list(mod: vast.ModuleDef, env: Dict[str,int]):
    nets = []
    for item in getattr(mod, "items", []) or []:
        if not isinstance(item, vast.Decl):
            continue
        for e in item.list:
            if isinstance(e, (vast.Wire, vast.Reg, vast.Integer)):
                kind = "wire" if isinstance(e, vast.Wire) else ("reg" if isinstance(e, vast.Reg) else "integer")
                signed = bool(getattr(e, "signed", False))
                w = getattr(e, "width", None)
                msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
                for n in e.children():
                    if isinstance(n, vast.Identifier):
                        nets.append({
                            "name": n.name, "kind": kind, "signed": signed,
                            "msb_str": msb_s, "lsb_str": lsb_s, "msb": msb_v, "lsb": lsb_v, "width": width_v
                        })
    return nets</p>

<h1 id="--recursive-walker-for-instancelist--">———- recursive walker for InstanceList ———-</h1>
<p>def iter_instancelists(node):
    # yield vast.InstanceList under any nesting (e.g., Generate blocks)
    if isinstance(node, vast.InstanceList):
        yield node
    for ch in getattr(node, "children", lambda: [])():
        yield from iter_instancelists(ch)</p>

<h1 id="--2nd-pass-build-ir-per-module--">———- 2nd pass: build IR per module ———-</h1>
<p>def normalize_module(mod: vast.ModuleDef, modlib_ports: Dict[str, List[str]]) -&gt; Dict[str,Any]:
    env = collect_param_env(mod)
    # parameters
    params = []
    # header params
    if getattr(mod, "paramlist", None):
        for p in mod.paramlist.params:
            if isinstance(p, vast.Parameter):
                params.append({
                    "name": p.name,
                    "value_str": to_str(p.value),
                    "value": eval_expr(p.value, env)
                })
    # body params (avoid duplicates)
    body_params = {}
    for item in getattr(mod, "items", []) or []:
        if isinstance(item, vast.Decl):
            for e in item.list:
                if isinstance(e, vast.Parameter) and e.name not in {x["name"] for x in params}:
                    body_params[e.name] = {
                        "name": e.name,
                        "value_str": to_str(e.value),
                        "value": eval_expr(e.value, env)
                    }
    params.extend(body_params.values())</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ports
io_map = build_io_decl_map(mod, env)
ordered_names = ordered_port_names(mod)
ports = []
for idx, pname in enumerate(ordered_names):
    dir_, signed, winfo = None, False, None
    # ANSI Ioport case
    ansi_hit = False
    if mod.portlist and isinstance(mod.portlist.ports[idx], vast.Ioport):
        io = mod.portlist.ports[idx]
        decl = io.second  # Input/Output/Inout
        dir_ = "input" if isinstance(decl, vast.Input) else ("output" if isinstance(decl, vast.Output) else "inout")
        signed = bool(getattr(decl, "signed", False))
        w = getattr(decl, "width", None)
        msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
        winfo = (msb_s, lsb_s, msb_v, lsb_v, width_v)
        ansi_hit = True
    # Non-ANSI fallback via body decl map
    if not ansi_hit and pname in io_map:
        dir_, signed, winfo = io_map[pname]
    if winfo is None:
        winfo = width_tuple(None, env)
    msb_s, lsb_s, msb_v, lsb_v, width_v = winfo
    ports.append({
        "index": idx, "name": pname, "dir": dir_, "signed": signed,
        "msb_str": msb_s, "lsb_str": lsb_s, "msb": msb_v, "lsb": lsb_v, "width": width_v
    })

# nets (exclude names that are top-level ports)
nets_raw = build_net_decl_list(mod, env)
port_names_set = set(ordered_names)
nets = [n for n in nets_raw if n["name"] not in port_names_set]

# instances
instances = []
for il in iter_instancelists(mod):
    submod = il.module
    # parameter overrides (common across instances in the list)
    param_overrides = []
    if getattr(il, "paramlist", None):
        for pa in il.paramlist.params:
            # pa: vast.ParamArg(name, argname/value)
            name = pa.paramname if hasattr(pa, "paramname") else getattr(pa, "name", None)
            value_node = pa.argname if hasattr(pa, "argname") else getattr(pa, "value", None)
            param_overrides.append({
                "name": name,
                "value_str": to_str(value_node),
                "value": eval_expr(value_node, env)
            })
    for inst in il.instances:
        conns = []
        # PortArg(portname, argname)
        portargs = getattr(inst, "portlist", []) or []
        # decide positional vs named
        positional = any(getattr(pa, "portname", None) in (None, "") for pa in portargs)
        if positional:
            # map by index using lib
            lib_ports = modlib_ports.get(submod, [])
            for i, pa in enumerate(portargs):
                pname = lib_ports[i] if i &lt; len(lib_ports) else f"__pos{i}"
                conns.append({"port": pname, "expr_str": to_str(getattr(pa, "argname", None))})
        else:
            for pa in portargs:
                conns.append({"port": pa.portname, "expr_str": to_str(pa.argname)})
        instances.append({
            "inst": inst.name,
            "module": submod,
            "param_overrides": param_overrides,
            "connections": conns
        })

return {"parameters": params, "ports": ports, "nets": nets, "instances": instances}
</code></pre></div></div>

<p>def convert_to_vnorm(files: List[str]) -&gt; Dict[str,Any]:
    ast, _ = parse(files)
    mods = collect_modules(ast)
    modlib_ports = {name: ordered_port_names(m) for name, m in mods.items()}
    result = {"modules": {}}
    for name, m in mods.items():
        result["modules"][name] = normalize_module(m, modlib_ports)
    return result</p>

<p>if <strong>name</strong> == "<strong>main</strong>":
    import argparse, sys
    ap = argparse.ArgumentParser()
    ap.add_argument("verilog", nargs="+", help="Verilog source files")
    ap.add_argument("-o", "–out", default="-", help="Output JSON path (default: stdout)")
    args = ap.parse_args()
    ir = convert_to_vnorm(args.verilog)
    s = json.dumps(ir, indent=2)
    if args.out == "-" or args.out == "/dev/stdout":
        print(s)
    else:
        with open(args.out, "w") as f:
            f.write(s)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
* * *

# 사용 예시

**예제 Verilog**
```verilog
module child #(parameter WIDTH=8) (input clk, input [WIDTH-1:0] a, output y);
  assign y = a[0];
endmodule

module top (clk, rst, out);
  input clk, rst;
  output out;
  wire [7:0] data;
  child #(.WIDTH(8)) u0 (.clk(clk), .a(data), .y(out));
endmodule
</code></pre></div></div>

<p><strong>실행</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python vnorm.py top.v <span class="nt">-o</span> ir.json
</code></pre></div></div>

<p><strong>핵심 결과(발췌)</strong></p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"modules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"top"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ports"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"rst"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"out"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"output"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"nets"</span><span class="p">:[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">,</span><span class="nl">"kind"</span><span class="p">:</span><span class="s2">"wire"</span><span class="p">,</span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"7"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">8</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"instances"</span><span class="p">:[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"inst"</span><span class="p">:</span><span class="s2">"u0"</span><span class="p">,</span><span class="nl">"module"</span><span class="p">:</span><span class="s2">"child"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"param_overrides"</span><span class="p">:[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"8"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">8</span><span class="p">}],</span><span class="w">
         </span><span class="nl">"connections"</span><span class="p">:[</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">},</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">},</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"y"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"out"</span><span class="p">}</span><span class="w">
         </span><span class="p">]}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="구현-포인트--엣지케이스-처리">구현 포인트 &amp; 엣지케이스 처리</h1>

<ul>
  <li>
    <p><strong>ANSI/Non-ANSI 포트</strong> : 둘 다 커버. Non-ANSI는 본문 <code class="language-plaintext highlighter-rouge">Decl</code> 탐색으로 방향/폭 채움.</p>
  </li>
  <li>
    <p><strong>폭 미지정</strong> : <code class="language-plaintext highlighter-rouge">msb=lsb=0</code>, <code class="language-plaintext highlighter-rouge">width=1</code>로 통일.</p>
  </li>
  <li>
    <p><strong>표현식 평가 실패</strong> : <code class="language-plaintext highlighter-rouge">*_str</code>만 보존하고 정수 필드는 <code class="language-plaintext highlighter-rouge">null</code>.</p>
  </li>
  <li>
    <p><strong>포지셔널 연결</strong> : 1패스에서 수집한 <strong>서브모듈 포트 순서</strong> 로 네임드화.</p>
  </li>
  <li>
    <p><strong>Generate 내부 인스턴스</strong> : 재귀 탐색으로 수집.</p>
  </li>
  <li>
    <p><strong>내부 nets</strong> : 포트 이름과 중복 제거.</p>
  </li>
  <li>
    <p><strong>파라미터</strong> : 헤더/본문 모두 수집, 가능한 경우 정수 평가.</p>
  </li>
</ul>

<hr />

<h1 id="다음-확장-아이디어">다음 확장 아이디어</h1>

<ul>
  <li>
    <p>SystemVerilog 일부 지원(가능 범위에서): <code class="language-plaintext highlighter-rouge">logic</code>, packed/unpacked 배열, interface 포트는 별 레이어로.</p>
  </li>
  <li>
    <p>폭/파라미터 <strong>완전 평가</strong> 를 위해 PyVerilog Dataflow 연계.</p>
  </li>
  <li>
    <p><strong>기본 nettype</strong>(<code class="language-plaintext highlighter-rouge">default_nettype none</code> 미사용 시) 암시적 net 감지 옵션.</p>
  </li>
  <li>
    <p><strong>소스 위치 정보</strong>(filename, lineno) 추가로 디버깅 편의성↑.</p>
  </li>
  <li>
    <p><strong>스키마 검증</strong>(pydantic/jsonschema)로 다운스트림 안정성 확보.</p>
  </li>
</ul>

<hr />

<p>필요하시면 이 IR로부터 <strong>Graphviz 모듈-인스턴스 다이어그램</strong> 이나 <strong>포트/넷 테이블</strong> 뽑는 코드도 바로 붙여드릴게요.</p>

<p class="chat--user">

JSON 말고 Python class로 변환하고 싶어

</p>

<p>좋지! JSON 대신 <strong>Python 클래스(IR)</strong>로 바로 다루게 만들자.<br />
아래는 (1) 타입 설계 → (2) 변환 파이프라인 → (3) 전체 구현 코드 → (4) 사용 예시 순서로 <strong>차근차근</strong> 정리했어.</p>

<hr />

<h1 id="1-목표-재정의-step-by-step">1) 목표 재정의 (Step-by-step)</h1>

<ul>
  <li>
    <p>PyVerilog AST → <strong>일관된 Python dataclass IR</strong> 반환</p>
  </li>
  <li>
    <p>포함 정보</p>

    <ul>
      <li>
        <p><strong>포트</strong> : 순서(index), 이름, 방향(in/out/inout), signed, 폭(msb/lsb/width)</p>
      </li>
      <li>
        <p><strong>인스턴스</strong> : 서브모듈명, 인스턴스명, 파라미터 override, 포트-아규먼트 매핑(포지셔널 → 네임드 자동 변환)</p>
      </li>
      <li>
        <p><strong>내부 nets</strong> : wire/reg/integer, signed, 폭(msb/lsb/width)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>표현식은 가능한 한 <strong>정수 평가</strong> , 실패하면 원문 문자열 유지</p>
  </li>
</ul>

<hr />

<h1 id="2-타입-설계-dataclass--enum">2) 타입 설계 (dataclass + Enum)</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DesignIR</code> (루트) → 모듈명 → <code class="language-plaintext highlighter-rouge">ModuleIR</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ModuleIR</code> 안에 <code class="language-plaintext highlighter-rouge">Parameter</code>, <code class="language-plaintext highlighter-rouge">Port</code>, <code class="language-plaintext highlighter-rouge">Net</code>, <code class="language-plaintext highlighter-rouge">Instance(Connection[])</code></p>
  </li>
  <li>
    <p>방향/넷 종류는 Enum으로 안정화</p>
  </li>
</ul>

<hr />

<h1 id="3-변환-파이프라인-두-패스-step-by-step">3) 변환 파이프라인 (두 패스, Step-by-step)</h1>

<ol>
  <li>
    <p><strong>1패스</strong> : 모든 모듈의</p>

    <ul>
      <li>
        <p>포트 순서 수집(포지셔널 매핑용)</p>
      </li>
      <li>
        <p>파라미터 기본값 환경(env) 구성(폭 평가용)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>2패스(모듈 단위)</strong> :</p>

    <ul>
      <li>
        <p>포트: ANSI/Non-ANSI 통합 정규화</p>
      </li>
      <li>
        <p>넷: 포트와 중복 제거, 다중 선언 분리</p>
      </li>
      <li>
        <p>인스턴스: Generate 내부 포함 재귀 수집, 포지셔널→네임드</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="4-전체-구현-코드-복붙해서-vnorm_classespy-로-저장">4) 전체 구현 코드 (복붙해서 <code class="language-plaintext highlighter-rouge">vnorm_classes.py</code> 로 저장)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vnorm_classes.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">asdict</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="kn">from</span> <span class="n">pyverilog.vparser.parser</span> <span class="kn">import</span> <span class="n">parse</span>
<span class="kn">from</span> <span class="n">pyverilog.vparser</span> <span class="kn">import</span> <span class="n">ast</span> <span class="k">as</span> <span class="n">vast</span>
<span class="kn">from</span> <span class="n">pyverilog.ast_code_generator.codegen</span> <span class="kn">import</span> <span class="n">ASTCodeGenerator</span>

<span class="n">codegen</span> <span class="o">=</span> <span class="nc">ASTCodeGenerator</span><span class="p">()</span>

<span class="c1"># -------------------- Typed IR --------------------
</span>
<span class="k">class</span> <span class="nc">Direction</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">INPUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">input</span><span class="sh">"</span>
    <span class="n">OUTPUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span>
    <span class="n">INOUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">inout</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">NetKind</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">WIRE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">wire</span><span class="sh">"</span>
    <span class="n">REG</span> <span class="o">=</span> <span class="sh">"</span><span class="s">reg</span><span class="sh">"</span>
    <span class="n">INTEGER</span> <span class="o">=</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Parameter</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">value_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">value</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Port</span><span class="p">:</span>
    <span class="n">index</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="nb">dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Direction</span><span class="p">]</span>          <span class="c1"># Non-ANSI에서 드물게 못찾으면 None
</span>    <span class="n">signed</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">msb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">lsb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">msb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">lsb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">width</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>              <span class="c1"># msb/lsb 둘 다 평가되면 abs(msb-lsb)+1
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Net</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">kind</span><span class="p">:</span> <span class="n">NetKind</span>
    <span class="n">signed</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">msb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">lsb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">msb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">lsb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">width</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Connection</span><span class="p">:</span>
    <span class="n">port</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">expr_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Instance</span><span class="p">:</span>
    <span class="n">inst</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">module</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">param_overrides</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">connections</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Connection</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModuleIR</span><span class="p">:</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">nets</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">instances</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Instance</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>

    <span class="c1"># 편의 메서드
</span>    <span class="k">def</span> <span class="nf">port_by_name</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Port</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">name</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">p</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">ports_by_dir</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dir_</span><span class="p">:</span> <span class="n">Direction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">ports</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="o">==</span> <span class="n">dir_</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">DesignIR</span><span class="p">:</span>
    <span class="n">modules</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModuleIR</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">dict</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">indent</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">asdict</span><span class="p">(</span><span class="n">self</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">)</span>

<span class="c1"># -------------------- Helpers --------------------
</span>
<span class="k">def</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">codegen</span><span class="p">.</span><span class="nf">visit</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">int_from_intconst</span><span class="p">(</span><span class="n">intconst</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">intconst</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="sh">"'"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="n">width_base</span><span class="p">,</span> <span class="n">val</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"'"</span><span class="p">)</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">lower</span><span class="p">()</span>
        <span class="n">digits</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">h</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">IntConst</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">int_from_intconst</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">env</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">UnaryOperator</span><span class="p">):</span>
        <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">children</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="n">env</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Uplus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="o">+</span><span class="n">v</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Uminus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="n">v</span>
        <span class="k">if</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">Ulnot</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Unot</span><span class="sh">"</span><span class="p">):</span> <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">v</span> <span class="k">else</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">BinaryOperator</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">a</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">b</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Plus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Minus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Times</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Div</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">//</span> <span class="n">b</span> <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Power</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">**</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Mod</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span> <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Sll</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Srl</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">And</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Or</span><span class="sh">"</span><span class="p">:</span>  <span class="k">return</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Xor</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="c1"># 기타 복합표현(Concat/Repeat/Partselect/Pointer)은 평가 보류
</span>    <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">width_node</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]):</span>
    <span class="c1"># (msb_str, lsb_str, msb_val, lsb_val, width_val)
</span>    <span class="k">if</span> <span class="n">width_node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
    <span class="n">msb_n</span><span class="p">,</span> <span class="n">lsb_n</span> <span class="o">=</span> <span class="n">width_node</span><span class="p">.</span><span class="n">msb</span><span class="p">,</span> <span class="n">width_node</span><span class="p">.</span><span class="n">lsb</span>
    <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">msb_n</span><span class="p">),</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">lsb_n</span><span class="p">)</span>
    <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">msb_n</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">lsb_n</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">msb_v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">width_v</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">msb_v</span> <span class="o">-</span> <span class="n">lsb_v</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span>

<span class="c1"># -------------------- 1st pass: module tables --------------------
</span>
<span class="k">def</span> <span class="nf">collect_modules</span><span class="p">(</span><span class="n">ast_root</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">]:</span>
    <span class="n">mods</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">ast_root</span><span class="p">.</span><span class="n">description</span><span class="p">.</span><span class="n">definitions</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">):</span>
            <span class="n">mods</span><span class="p">[</span><span class="n">d</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span>
    <span class="k">return</span> <span class="n">mods</span>

<span class="k">def</span> <span class="nf">collect_param_env</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
    <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="c1"># 헤더 파라미터
</span>    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">env</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="c1"># 바디 파라미터
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                    <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">env</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">env</span>

<span class="k">def</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="n">names</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">names</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Port</span><span class="p">):</span>
            <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">names</span>

<span class="c1"># -------------------- Decl scans --------------------
</span>
<span class="k">def</span> <span class="nf">build_io_decl_map</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]):</span>
    <span class="c1"># name -&gt; (Direction|None, signed, width_info)
</span>    <span class="n">io_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="p">(</span><span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">)):</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
                <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
                <span class="k">else</span><span class="p">:</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
                <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
                <span class="n">w</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="c1"># e.children() contains Identifiers
</span>                <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">e</span><span class="p">.</span><span class="nf">children</span><span class="p">():</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                        <span class="n">io_map</span><span class="p">[</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">io_map</span>

<span class="k">def</span> <span class="nf">build_net_decl_list</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]:</span>
    <span class="n">nets</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
            <span class="n">kind</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NetKind</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Wire</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">WIRE</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Reg</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">REG</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Integer</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">INTEGER</span>
            <span class="k">if</span> <span class="n">kind</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
            <span class="n">w</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">e</span><span class="p">.</span><span class="nf">children</span><span class="p">():</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                    <span class="n">nets</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Net</span><span class="p">(</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">kind</span><span class="o">=</span><span class="n">kind</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
                        <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
                    <span class="p">))</span>
    <span class="k">return</span> <span class="n">nets</span>

<span class="c1"># -------------------- Instance walker --------------------
</span>
<span class="k">def</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">InstanceList</span><span class="p">):</span>
        <span class="k">yield</span> <span class="n">node</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">,</span> <span class="k">lambda</span><span class="p">:</span> <span class="p">[])():</span>
        <span class="k">yield</span> <span class="k">from</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>

<span class="c1"># -------------------- 2nd pass: normalize module --------------------
</span>
<span class="k">def</span> <span class="nf">normalize_module</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">ModuleIR</span><span class="p">:</span>
    <span class="n">env</span> <span class="o">=</span> <span class="nf">collect_param_env</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>

    <span class="c1"># parameters
</span>    <span class="n">params</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">),</span>
                    <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span>
                <span class="p">))</span>
    <span class="c1"># body params (dedupe)
</span>    <span class="n">header_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">params</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">)</span> <span class="ow">and</span> <span class="n">e</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">header_names</span><span class="p">:</span>
                    <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                        <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">),</span>
                        <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span>
                    <span class="p">))</span>

    <span class="c1"># ports
</span>    <span class="n">io_map</span> <span class="o">=</span> <span class="nf">build_io_decl_map</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">ordered_names</span> <span class="o">=</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>
    <span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">pname</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">ordered_names</span><span class="p">):</span>
        <span class="n">dir_</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Direction</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">signed</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">msb_s</span> <span class="o">=</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">msb_v</span> <span class="o">=</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">second</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
            <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="n">env</span><span class="p">)</span>
            <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">ansi_hit</span> <span class="ow">and</span> <span class="n">pname</span> <span class="ow">in</span> <span class="n">io_map</span><span class="p">:</span>
            <span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)</span> <span class="o">=</span> <span class="n">io_map</span><span class="p">[</span><span class="n">pname</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">msb_s</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_s</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">msb_v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">width_v</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># width unspecified -&gt; 1-bit
</span>            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>

        <span class="n">ports</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Port</span><span class="p">(</span>
            <span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
            <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
        <span class="p">))</span>

    <span class="c1"># nets (exclude top ports)
</span>    <span class="n">nets_raw</span> <span class="o">=</span> <span class="nf">build_net_decl_list</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">port_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">}</span>
    <span class="n">nets</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nets_raw</span> <span class="k">if</span> <span class="n">n</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">port_names</span><span class="p">]</span>

    <span class="c1"># instances
</span>    <span class="n">instances</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Instance</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">il</span> <span class="ow">in</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">mod</span><span class="p">):</span>
        <span class="n">submod</span> <span class="o">=</span> <span class="n">il</span><span class="p">.</span><span class="n">module</span>

        <span class="n">shared_param_ovrs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">il</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">value_node</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">shared_param_ovrs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
                    <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">value_node</span><span class="p">),</span>
                    <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">value_node</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="p">))</span>

        <span class="k">for</span> <span class="n">inst</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
            <span class="n">conns</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Connection</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">portargs</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">inst</span><span class="p">,</span> <span class="sh">"</span><span class="s">portlist</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
            <span class="n">positional</span> <span class="o">=</span> <span class="nf">any</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">portname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">in</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">portargs</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">positional</span><span class="p">:</span>
                <span class="n">lib_ports</span> <span class="o">=</span> <span class="n">modlib_ports</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">submod</span><span class="p">,</span> <span class="p">[])</span>
                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">pa</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">portargs</span><span class="p">):</span>
                    <span class="n">pname</span> <span class="o">=</span> <span class="n">lib_ports</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">lib_ports</span><span class="p">)</span> <span class="k">else</span> <span class="sa">f</span><span class="sh">"</span><span class="s">__pos</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">))))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">portargs</span><span class="p">:</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pa</span><span class="p">.</span><span class="n">portname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">pa</span><span class="p">.</span><span class="n">argname</span><span class="p">)))</span>

            <span class="n">instances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Instance</span><span class="p">(</span>
                <span class="n">inst</span><span class="o">=</span><span class="n">inst</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">module</span><span class="o">=</span><span class="n">submod</span><span class="p">,</span>
                <span class="n">param_overrides</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="n">shared_param_ovrs</span><span class="p">),</span>
                <span class="n">connections</span><span class="o">=</span><span class="n">conns</span>
            <span class="p">))</span>

    <span class="k">return</span> <span class="nc">ModuleIR</span><span class="p">(</span><span class="n">parameters</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">ports</span><span class="o">=</span><span class="n">ports</span><span class="p">,</span> <span class="n">nets</span><span class="o">=</span><span class="n">nets</span><span class="p">,</span> <span class="n">instances</span><span class="o">=</span><span class="n">instances</span><span class="p">)</span>

<span class="c1"># -------------------- Public API --------------------
</span>
<span class="k">def</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">DesignIR</span><span class="p">:</span>
    <span class="n">ast</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
    <span class="n">mods</span> <span class="o">=</span> <span class="nf">collect_modules</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
    <span class="n">modlib_ports</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="n">design</span> <span class="o">=</span> <span class="nc">DesignIR</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">design</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nf">normalize_module</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">design</span>

<span class="c1"># CLI (optional)
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">argparse</span><span class="p">,</span> <span class="n">sys</span>
    <span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">verilog</span><span class="sh">"</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Verilog sources</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">-o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">--out</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Dump as JSON (for debug)</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">ap</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>
    <span class="n">ir</span> <span class="o">=</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">verilog</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">out</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">out</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">ir</span><span class="p">.</span><span class="nf">to_json</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Pretty print summary
</span>        <span class="k">for</span> <span class="n">mname</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">ir</span><span class="p">.</span><span class="n">modules</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[module] </span><span class="si">{</span><span class="n">mname</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  port[</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">index</span><span class="si">}</span><span class="s">] </span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="ow">and</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span><span class="p">.</span><span class="n">value</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">None</span><span class="sh">'</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> [</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">msb_str</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">lsb_str</span><span class="si">}</span><span class="s">] -&gt; width=</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">nets</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  net </span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">kind</span><span class="p">.</span><span class="n">value</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> [</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">msb_str</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">lsb_str</span><span class="si">}</span><span class="s">] -&gt; width=</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">width</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  inst </span><span class="si">{</span><span class="n">i</span><span class="p">.</span><span class="n">inst</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">i</span><span class="p">.</span><span class="n">module</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">i</span><span class="p">.</span><span class="n">connections</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">    .</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">port</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">expr_str</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="5-사용-예시-step-by-step">5) 사용 예시 (Step-by-step)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python vnorm_classes.py top.v            <span class="c"># 요약 출력</span>
python vnorm_classes.py top.v <span class="nt">-o</span> ir.json <span class="c"># 디버그용 JSON 덤프(옵션)</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 라이브러리처럼 사용
</span><span class="kn">from</span> <span class="n">vnorm_classes</span> <span class="kn">import</span> <span class="n">convert_to_design_ir</span><span class="p">,</span> <span class="n">Direction</span>

<span class="n">ir</span> <span class="o">=</span> <span class="nf">convert_to_design_ir</span><span class="p">([</span><span class="sh">"</span><span class="s">top.v</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">child.v</span><span class="sh">"</span><span class="p">])</span>
<span class="n">top</span> <span class="o">=</span> <span class="n">ir</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="sh">"</span><span class="s">top</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># 포트 순회
</span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">top</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="ow">and</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>

<span class="c1"># 인스턴스/연결 순회
</span><span class="k">for</span> <span class="n">inst</span> <span class="ow">in</span> <span class="n">top</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">inst</span><span class="sh">"</span><span class="p">,</span> <span class="n">inst</span><span class="p">.</span><span class="n">inst</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">inst</span><span class="p">.</span><span class="n">module</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inst</span><span class="p">.</span><span class="n">connections</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">  </span><span class="sh">"</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">port</span><span class="p">,</span> <span class="sh">"</span><span class="s">=&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">expr_str</span><span class="p">)</span>

<span class="c1"># 필요 시 JSON 직렬화도 가능 (테스트/로깅용)
</span><span class="nf">print</span><span class="p">(</span><span class="n">ir</span><span class="p">.</span><span class="nf">to_json</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="6-주의확장-step-by-step">6) 주의/확장 (Step-by-step)</h1>

<ul>
  <li>
    <p><strong>표현식 평가 실패</strong> : <code class="language-plaintext highlighter-rouge">value/width/msb/lsb</code>는 <code class="language-plaintext highlighter-rouge">None</code>이 될 수 있음. 원문은 <code class="language-plaintext highlighter-rouge">*_str</code>에 보존.</p>
  </li>
  <li>
    <p><strong>포지셔널 연결</strong> : 라이브러리에 해당 서브모듈이 없으면 <code class="language-plaintext highlighter-rouge">__pos0</code>처럼 보존.</p>
  </li>
  <li>
    <p><strong>SystemVerilog 확장</strong> : <code class="language-plaintext highlighter-rouge">logic</code>, packed/unpacked, interface 포트 등은 별 레이어로 확장 추천.</p>
  </li>
  <li>
    <p><strong>위치 정보</strong> : 필요하면 <code class="language-plaintext highlighter-rouge">lineno/coord</code>를 dataclass에 추가 가능.</p>
  </li>
  <li>
    <p><strong>검증</strong> : 큰 설계에서 스키마 보장 원하면 <code class="language-plaintext highlighter-rouge">pydantic</code>으로 교체 가능.</p>
  </li>
</ul>

<p>원하는 대로 <strong>직접 탐색 가능한 Python 클래스 IR</strong> 로 변환되도록 구성해 두었어.<br />
원하면 <code class="language-plaintext highlighter-rouge">Connection</code>에 좌표/소스파일 정보나, <code class="language-plaintext highlighter-rouge">ModuleIR</code>에 빠른 인덱스(예: <code class="language-plaintext highlighter-rouge">port_dict</code>)를 추가해주는 최적화 버전도 바로 만들어줄게.</p>

<p class="chat--user">

IR이 뭐야

</p>

<p>좋은 질문! <strong>IR(Intermediate Representation, 중간 표현)</strong>은 <em>소스 코드(또는 설계)를 한층 표준화된 형태로 담아두는 중간 단계의 데이터 구조</em> 예요. 파서가 만든 “문법 그대로”의 트리(AST)와, 그걸 써서 분석·변환·코드생성 같은 후처리 사이에 놓입니다.</p>

<p>아래처럼 <strong>차근차근</strong> 이해하면 편해요:</p>

<ol>
  <li>
    <p><strong>정의</strong></p>

    <ul>
      <li>IR = 분석·최적화·변환을 하기 쉽도록 만든 <strong>표준화된 내부 데이터 모델</strong>.</li>
    </ul>
  </li>
  <li>
    <p><strong>왜 필요한가</strong></p>

    <ul>
      <li>
        <p>언어 문법 차이/스타일(예: Verilog ANSI vs Non-ANSI 포트 선언)을 <strong>한 가지 규칙</strong> 으로 통일.</p>
      </li>
      <li>
        <p><strong>트래버스(순회) 쉬움</strong> : 필요한 정보가 같은 자리/형태에 있음.</p>
      </li>
      <li>
        <p><strong>모듈성</strong> : 프런트엔드(AST)와 백엔드(분석/생성)를 느슨하게 결합.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>AST와의 차이</strong></p>

    <ul>
      <li>
        <p><strong>AST</strong> : 원문 문법을 거의 그대로 반영(케이스가 많고 예외 처리 필요).</p>
      </li>
      <li>
        <p><strong>IR</strong> : 의미 중심으로 <strong>정규화/정리</strong>(예: 포지셔널 인스턴스 → 네임드로 변환, 폭 미지정→1비트로 통일, 상수 가능하면 평가).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>일반적인 IR의 형태</strong></p>

    <ul>
      <li>
        <p>컴파일러: SSA, 3-address code, CFG/DFG 등</p>
      </li>
      <li>
        <p>하드웨어: <strong>넷리스트-유사 구조</strong> , 파라미터 평가 결과, 모듈/인스턴스/연결 관계 등</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>당신의 프로젝트에서의 IR</strong></p>

    <ul>
      <li>
        <p>우리가 설계한 <strong>Python dataclass IR</strong> 이 곧 IR:</p>

        <ul>
          <li>
            <p><code class="language-plaintext highlighter-rouge">ModuleIR</code> 안에 <code class="language-plaintext highlighter-rouge">ports</code>, <code class="language-plaintext highlighter-rouge">nets</code>, <code class="language-plaintext highlighter-rouge">instances</code>, <code class="language-plaintext highlighter-rouge">parameters</code></p>
          </li>
          <li>
            <p>포트 방향/폭, 내부 넷 폭, 인스턴스의 포트 매핑을 <strong>일관된 스키마</strong> 로 제공</p>
          </li>
          <li>
            <p>가능한 범위에서 <strong>정수 평가</strong>(<code class="language-plaintext highlighter-rouge">width</code>, <code class="language-plaintext highlighter-rouge">msb/lsb</code>) 적용, 실패해도 원문(<code class="language-plaintext highlighter-rouge">*_str</code>) 보존</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>얻는 이점</strong></p>

    <ul>
      <li>
        <p>이후 단계(예: 연결 검사, 자동 배선, 문서화, 코드 생성, 시각화)를 <strong>예외처리 거의 없이</strong> 구현 가능.</p>
      </li>
      <li>
        <p>도구 간 <strong>재사용</strong> ·확장 용이.</p>
      </li>
    </ul>
  </li>
</ol>

<p>한 줄 요약: <strong>IR은 “다루기 쉬운 표준형 설계 스냅샷”</strong>이고, 지금 만들고 있는 Python 클래스들이 바로 그 IR이에요.</p>

<p class="chat--user">

decl = io.first 이야. 근데 Enum을 Serialize 못해서 json 변환 부분에서 에러가 나

</p>

<p>좋은 포인트 두 가지!</p>

<ul>
  <li>
    <p><strong>(A)</strong> <code class="language-plaintext highlighter-rouge">Ioport</code>에서 선언/이름의 위치가 환경마다 달라 <code class="language-plaintext highlighter-rouge">decl = io.first</code>가 되는 케이스가 있어요. ⇒ <strong>양쪽 모두 자동 감지</strong> 하도록 바꿉니다.</p>
  </li>
  <li>
    <p><strong>(B)</strong> <code class="language-plaintext highlighter-rouge">Enum</code>은 기본 <code class="language-plaintext highlighter-rouge">json.dumps</code>로 직렬화가 안 됩니다. ⇒ <strong>custom default/encoder</strong> 로 <code class="language-plaintext highlighter-rouge">.value</code>를 쓰게 하면 해결됩니다.</p>
  </li>
</ul>

<p>아래를 그대로 반영하세요. (필요한 부분만 교체/추가)</p>

<hr />

<h2 id="1-ioport-양식-차이를-자동-감지-firstsecond-스왑-대응">1) <code class="language-plaintext highlighter-rouge">Ioport</code> 양식 차이를 자동 감지 (first/second 스왑 대응)</h2>

<h3 id="ordered_port_names-교체"><code class="language-plaintext highlighter-rouge">ordered_port_names</code> 교체</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="n">names</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">names</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="c1"># Robust: 이름이 어느 쪽(first/second)에 있든 잡아낸다
</span>            <span class="n">name_node</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                <span class="n">name_node</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">first</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">second</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                <span class="n">name_node</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">second</span>
            <span class="k">if</span> <span class="n">name_node</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">name_node</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Port</span><span class="p">):</span>
            <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">names</span>
</code></pre></div></div>

<h3 id="normalize_module-내부의-포트-정규화-부분-수정"><code class="language-plaintext highlighter-rouge">normalize_module</code> 내부의 포트 정규화 부분 수정</h3>

<p>아래처럼 <strong>decl(방향/폭을 가진 선언 노드)</strong>를 어느 쪽(first/second)이든 잡도록 바꿉니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="c1"># ...
</span>    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">pname</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">ordered_names</span><span class="p">):</span>
        <span class="n">dir_</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Direction</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">signed</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">msb_s</span> <span class="o">=</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">msb_v</span> <span class="o">=</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>

            <span class="c1"># 어느 쪽이 선언 노드인지 감지
</span>            <span class="k">def</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
                <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">))</span>

            <span class="n">decl</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">first</span><span class="p">):</span>
                <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">first</span>
            <span class="k">elif</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">second</span><span class="p">):</span>
                <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">second</span>

            <span class="k">if</span> <span class="n">decl</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
                <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
                <span class="k">else</span><span class="p">:</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
                <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
                <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="n">env</span><span class="p">)</span>
                <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="c1"># Non-ANSI fallback
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">ansi_hit</span> <span class="ow">and</span> <span class="n">pname</span> <span class="ow">in</span> <span class="n">io_map</span><span class="p">:</span>
            <span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)</span> <span class="o">=</span> <span class="n">io_map</span><span class="p">[</span><span class="n">pname</span><span class="p">]</span>

        <span class="c1"># 폭 미지정 → 1비트
</span>        <span class="k">if</span> <span class="nf">all</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)):</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>

        <span class="n">ports</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Port</span><span class="p">(</span>
            <span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
            <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
        <span class="p">))</span>
</code></pre></div></div>

<blockquote>
  <p>이렇게 하면 <strong><code class="language-plaintext highlighter-rouge">decl = io.first</code></strong>인 케이스도, 반대로 <strong><code class="language-plaintext highlighter-rouge">decl = io.second</code></strong>인 케이스도 모두 정상 처리돼요.</p>
</blockquote>

<hr />

<h2 id="2-enum-json-직렬화-에러-해결">2) Enum JSON 직렬화 에러 해결</h2>

<p><code class="language-plaintext highlighter-rouge">json.dumps</code>에 <code class="language-plaintext highlighter-rouge">default</code>를 주거나, 커스텀 <code class="language-plaintext highlighter-rouge">JSONEncoder</code>를 써서 <code class="language-plaintext highlighter-rouge">Enum</code>을 <code class="language-plaintext highlighter-rouge">.value</code>로 바꿔 주세요.</p>

<h3 id="간단-버전-default-함수-추가">간단 버전: <code class="language-plaintext highlighter-rouge">default</code> 함수 추가</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">asdict</span>

<span class="k">def</span> <span class="nf">_json_default</span><span class="p">(</span><span class="n">o</span><span class="p">):</span>
    <span class="c1"># Enum -&gt; 그 값으로 직렬화
</span>    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Enum</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">o</span><span class="p">.</span><span class="n">value</span>
    <span class="c1"># 필요시 추가 핸들링 가능
</span>    <span class="k">return</span> <span class="nf">str</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">DesignIR</span><span class="p">:</span>
    <span class="n">modules</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModuleIR</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">dict</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">indent</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">asdict</span><span class="p">(</span><span class="n">self</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">_json_default</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="대안-encoder-클래스로">대안: Encoder 클래스로</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">EnumEncoder</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="n">JSONEncoder</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">default</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">o</span><span class="p">):</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">o</span><span class="p">,</span> <span class="n">Enum</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">o</span><span class="p">.</span><span class="n">value</span>
        <span class="k">return</span> <span class="nf">super</span><span class="p">().</span><span class="nf">default</span><span class="p">(</span><span class="n">o</span><span class="p">)</span>

<span class="c1"># 사용
</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">asdict</span><span class="p">(</span><span class="n">self</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cls</span><span class="o">=</span><span class="n">EnumEncoder</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>어느 쪽이든 결과는 동일: <code class="language-plaintext highlighter-rouge">Direction.INPUT</code> → <code class="language-plaintext highlighter-rouge">"input"</code>, <code class="language-plaintext highlighter-rouge">NetKind.WIRE</code> → <code class="language-plaintext highlighter-rouge">"wire"</code>처럼 직렬화됩니다.</p>
</blockquote>

<hr />

<h2 id="3-빠른-체크리스트-step-by-step">3) 빠른 체크리스트 (step-by-step)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ordered_port_names</code>를 위 코드로 <strong>교체</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">normalize_module</code>의 <strong>포트 처리 블록</strong> 을 위 코드로 <strong>교체</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DesignIR.to_json</code>에서 <code class="language-plaintext highlighter-rouge">default=_json_default</code> 또는 <code class="language-plaintext highlighter-rouge">cls=EnumEncoder</code>를 <strong>적용</strong></p>
  </li>
  <li>
    <p>다시 실행해서 <code class="language-plaintext highlighter-rouge">Enum</code> 직렬화 에러가 사라지는지, ANSI/Non-ANSI 모두에서 포트 방향/폭이 제대로 나오는지 확인</p>
  </li>
</ol>

<p>필요하면 <code class="language-plaintext highlighter-rouge">Port.dir</code> 타입을 일시적으로 <code class="language-plaintext highlighter-rouge">Optional[str]</code>로 바꿔도 되지만, 위처럼 <strong>Enum 유지 + 직렬화 커스터마이즈</strong> 가 더 안정적이에요.<br />
다른 부분도 막히는 게 있으면 오류 메시지랑 함께 알려줘—거기에 맞춰 추가 패치 줄게!</p>

<p class="chat--user">

1. Normalize 말고 표준화/정규화 라는 느낌으로 rename 하는 걸 제안해. 2. Port 방향이 non ansi 타입으로 되어있을 경우에 찾으면 업데이트하도록 해줘

</p>

<p>좋아—요청한 두 가지를 <strong>차근차근</strong> 반영할게.</p>

<hr />

<h1 id="1-normalize-이름을-표준화정규화-느낌으로-변경-제안">1) “Normalize” 이름을 “표준화/정규화” 느낌으로 변경 제안</h1>

<p>영어 식별자는 그대로 쓰되 의미를 “표준화/정규화”로 바꿔 읽히도록 추천해.</p>

<p><strong>이름 매핑(권장)</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">normalize_module</code> → <code class="language-plaintext highlighter-rouge">standardize_module</code> <em>(표준화)</em></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">convert_to_design_ir</code> → <code class="language-plaintext highlighter-rouge">build_standard_ir</code> <em>(표준 IR 빌드)</em></p>
  </li>
  <li>
    <p>파일명 <code class="language-plaintext highlighter-rouge">vnorm_classes.py</code> → <code class="language-plaintext highlighter-rouge">std_ir.py</code> <em>(standardized IR)</em></p>
  </li>
</ul>

<p><strong>호환용 래퍼(선택)</strong><br />
기존 호출부 안 깨지게 아래처럼 유지해도 좋아.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">files</span><span class="p">):</span>
    <span class="c1"># deprecated alias for backward-compat
</span>    <span class="k">return</span> <span class="nf">build_standard_ir</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="2-non-ansi-선언에서-포트-방향속성-발견-시-업데이트-로직-추가">2) Non-ANSI 선언에서 포트 방향/속성 발견 시 <strong>업데이트</strong> 로직 추가</h1>

<p>요지는 “헤더(ANSI)가 비어 있거나(non-ANSI 스타일) 또는 충돌 시 <strong>본문 선언(Decl)</strong> 을 신뢰해 덮어쓰기”다.<br />
아래 2개 조각만 교체/추가하면 됨.</p>

<h2 id="a-포트-표준화-함수-standardize_module-기존-normalize_module-대체">(A) 포트 표준화 함수: <code class="language-plaintext highlighter-rouge">standardize_module</code> (기존 <code class="language-plaintext highlighter-rouge">normalize_module</code> 대체)</h2>

<p>차이점:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Ioport</code>에서 선언 노드(first/second) 자동 감지</p>
  </li>
  <li>
    <p>일단 포트를 구성한 뒤 <strong>본문 선언으로 후처리 덮어쓰기</strong> 수행</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">standardize_module</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">ModuleIR</span><span class="p">:</span>
    <span class="n">env</span> <span class="o">=</span> <span class="nf">collect_param_env</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>

    <span class="c1"># 1) parameters (동일)
</span>    <span class="n">params</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">),</span> <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="p">))</span>
    <span class="n">header_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">params</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">)</span> <span class="ow">and</span> <span class="n">e</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">header_names</span><span class="p">:</span>
                    <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">),</span> <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                    <span class="p">))</span>

    <span class="c1"># 2) 포트 초안(헤더 기반)
</span>    <span class="n">ordered_names</span> <span class="o">=</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>
    <span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">pname</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">ordered_names</span><span class="p">):</span>
        <span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">False</span>
        <span class="n">msb_s</span> <span class="o">=</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">msb_v</span> <span class="o">=</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="c1"># Ioport에서 first/second 어느 쪽이든 선언 노드 감지
</span>        <span class="n">decl</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="k">def</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">x</span><span class="p">):</span> <span class="k">return</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="p">(</span><span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">first</span><span class="p">):</span>  <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">first</span>
            <span class="k">elif</span> <span class="nf">_is_decl</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">second</span><span class="p">):</span> <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">second</span>
        <span class="k">if</span> <span class="n">decl</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
            <span class="k">else</span><span class="p">:</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
            <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="n">env</span><span class="p">)</span>

        <span class="c1"># 폭 미지정 → 1비트 기본
</span>        <span class="k">if</span> <span class="nf">all</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)):</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>

        <span class="n">ports</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Port</span><span class="p">(</span>
            <span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
            <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
        <span class="p">))</span>

    <span class="c1"># 3) 본문 선언(Non-ANSI)로 **후처리 덮어쓰기**
</span>    <span class="n">io_map</span> <span class="o">=</span> <span class="nf">build_io_decl_map</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="nf">apply_nonansi_overrides</span><span class="p">(</span><span class="n">ports</span><span class="p">,</span> <span class="n">io_map</span><span class="p">,</span> <span class="n">prefer_body</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="c1"># 4) nets (포트명 제외)
</span>    <span class="n">nets_raw</span> <span class="o">=</span> <span class="nf">build_net_decl_list</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">port_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">}</span>
    <span class="n">nets</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nets_raw</span> <span class="k">if</span> <span class="n">n</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">port_names</span><span class="p">]</span>

    <span class="c1"># 5) instances (기존과 동일)
</span>    <span class="n">instances</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Instance</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">il</span> <span class="ow">in</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">mod</span><span class="p">):</span>
        <span class="n">submod</span> <span class="o">=</span> <span class="n">il</span><span class="p">.</span><span class="n">module</span>
        <span class="n">shared_param_ovrs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">il</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">value_node</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">shared_param_ovrs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">value_node</span><span class="p">),</span> <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">value_node</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="p">))</span>
        <span class="k">for</span> <span class="n">inst</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
            <span class="n">conns</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Connection</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">pas</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">inst</span><span class="p">,</span> <span class="sh">"</span><span class="s">portlist</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
            <span class="n">positional</span> <span class="o">=</span> <span class="nf">any</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">portname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">in</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">pas</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">positional</span><span class="p">:</span>
                <span class="n">lib_ports</span> <span class="o">=</span> <span class="n">modlib_ports</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">submod</span><span class="p">,</span> <span class="p">[])</span>
                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">pa</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">pas</span><span class="p">):</span>
                    <span class="n">pname</span> <span class="o">=</span> <span class="n">lib_ports</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">lib_ports</span><span class="p">)</span> <span class="k">else</span> <span class="sa">f</span><span class="sh">"</span><span class="s">__pos</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">))))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">pas</span><span class="p">:</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pa</span><span class="p">.</span><span class="n">portname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">pa</span><span class="p">.</span><span class="n">argname</span><span class="p">)))</span>
            <span class="n">instances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Instance</span><span class="p">(</span><span class="n">inst</span><span class="o">=</span><span class="n">inst</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">module</span><span class="o">=</span><span class="n">submod</span><span class="p">,</span>
                                      <span class="n">param_overrides</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="n">shared_param_ovrs</span><span class="p">),</span>
                                      <span class="n">connections</span><span class="o">=</span><span class="n">conns</span><span class="p">))</span>
    <span class="k">return</span> <span class="nc">ModuleIR</span><span class="p">(</span><span class="n">parameters</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">ports</span><span class="o">=</span><span class="n">ports</span><span class="p">,</span> <span class="n">nets</span><span class="o">=</span><span class="n">nets</span><span class="p">,</span> <span class="n">instances</span><span class="o">=</span><span class="n">instances</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="b-본문-선언-덮어쓰기-헬퍼-추가-apply_nonansi_overrides">(B) 본문 선언 덮어쓰기 헬퍼 추가: <code class="language-plaintext highlighter-rouge">apply_nonansi_overrides</code></h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">prefer_body=True</code>면 <strong>항상</strong> 본문 선언으로 덮어씀(권장)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">prefer_body=False</code>면 비어있는 값만 채움</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">apply_nonansi_overrides</span><span class="p">(</span><span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">],</span> <span class="n">io_map</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">tuple</span><span class="p">],</span> <span class="n">prefer_body</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">io_map</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="n">dir2</span><span class="p">,</span> <span class="n">signed2</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s2</span><span class="p">,</span> <span class="n">lsb_s2</span><span class="p">,</span> <span class="n">msb_v2</span><span class="p">,</span> <span class="n">lsb_v2</span><span class="p">,</span> <span class="n">width_v2</span><span class="p">)</span> <span class="o">=</span> <span class="n">io_map</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">]</span>

        <span class="k">def</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">existing</span><span class="p">,</span> <span class="n">new</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">new</span> <span class="nf">if </span><span class="p">(</span><span class="n">prefer_body</span> <span class="ow">or</span> <span class="n">existing</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">)</span> <span class="k">else</span> <span class="n">existing</span>

        <span class="c1"># 방향/서명/폭 모두 업데이트 규칙 적용
</span>        <span class="n">p</span><span class="p">.</span><span class="nb">dir</span>    <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nb">dir</span><span class="p">,</span> <span class="n">dir2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">signed</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">signed</span><span class="p">,</span> <span class="n">signed2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">msb_str</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">msb_str</span><span class="p">,</span> <span class="n">msb_s2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">lsb_str</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">lsb_str</span><span class="p">,</span> <span class="n">lsb_s2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">msb</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">msb</span><span class="p">,</span> <span class="n">msb_v2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">lsb</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">lsb</span><span class="p">,</span> <span class="n">lsb_v2</span><span class="p">)</span>
        <span class="n">p</span><span class="p">.</span><span class="n">width</span> <span class="o">=</span> <span class="nf">use_body</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">width_v2</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="c-엔트리-포인트-이름-교체-build_standard_ir">(C) 엔트리 포인트 이름 교체 (<code class="language-plaintext highlighter-rouge">build_standard_ir</code>)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">build_standard_ir</span><span class="p">(</span><span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">DesignIR</span><span class="p">:</span>
    <span class="n">ast</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
    <span class="n">mods</span> <span class="o">=</span> <span class="nf">collect_modules</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
    <span class="n">modlib_ports</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="n">design</span> <span class="o">=</span> <span class="nc">DesignIR</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">design</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nf">standardize_module</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">design</span>

<span class="c1"># (선택) 하위호환
</span><span class="k">def</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">DesignIR</span><span class="p">:</span>
    <span class="k">return</span> <span class="nf">build_standard_ir</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="동작-요약-step-by-step">동작 요약 (step-by-step)</h2>

<ol>
  <li>
    <p>헤더에서 포트 <strong>초안</strong> 생성 (ANSI면 그 값 사용, 아니면 1비트 기본)</p>
  </li>
  <li>
    <p>본문 <code class="language-plaintext highlighter-rouge">Decl(Input/Output/Inout)</code> 스캔해서 <strong>io_map</strong> 생성</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">apply_nonansi_overrides(..., prefer_body=True)</code>로</p>

    <ul>
      <li>
        <p><strong>non-ANSI에서 찾은 방향/폭/서명</strong> 을 <strong>항상 덮어쓰기</strong></p>
      </li>
      <li>
        <p>결과적으로 “헤더가 비어 있고 본문에만 방향이 있는” 경우도 정확히 채워짐</p>
      </li>
    </ul>
  </li>
</ol>

<p>원하면 <code class="language-plaintext highlighter-rouge">prefer_body=False</code>로 바꿔 “헤더 우선, 빈 값만 보충” 정책도 쉽게 전환 가능해.<br />
필요 시 포트에 <code class="language-plaintext highlighter-rouge">source="ansi|body"</code> 같은 필드 추가해서 최종 값의 출처를 트래킹하는 것도 추천!</p>]]></content><author><name>hvppyarchive</name></author><category term="verilog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">텍스트 분할 복사</title><link href="https://hvppyarchive.github.io/misc/text-split-copy/" rel="alternate" type="text/html" title="텍스트 분할 복사" /><published>2025-08-20T13:38:16+09:00</published><updated>2025-08-20T13:38:16+09:00</updated><id>https://hvppyarchive.github.io/misc/text-split-copy</id><content type="html" xml:base="https://hvppyarchive.github.io/misc/text-split-copy/"><![CDATA[<p class="chat--user">

어떤 긴 텍스트가 입력되었을 때 그걸 특정 character 수 단위로 쪼개서 복사할 수 있게 해줄 수 있어?

</p>

<p>좋죠! “원하는 글자 수로 잘라서 복사”할 수 있는 초간단 웹페이지를 바로 드릴게요. 아래 코드를 <code class="language-plaintext highlighter-rouge">splitter.html</code>로 저장해서 브라우저로 열면 됩니다.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"ko"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;title&gt;</span>텍스트 분할 <span class="err">&amp;</span> 복사<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;style&gt;</span>
  <span class="nt">body</span> <span class="p">{</span> <span class="nl">font-family</span><span class="p">:</span> <span class="n">system-ui</span><span class="p">,</span> <span class="o">-</span><span class="n">apple-system</span><span class="p">,</span> <span class="s1">"Segoe UI"</span><span class="p">,</span> <span class="n">Roboto</span><span class="p">,</span> <span class="s1">"Noto Sans KR"</span><span class="p">,</span> <span class="n">Arial</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">24px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">h1</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">textarea</span> <span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span> <span class="nl">min-height</span><span class="p">:</span> <span class="m">180px</span><span class="p">;</span> <span class="nl">box-sizing</span><span class="p">:</span> <span class="nb">border-box</span><span class="p">;</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.row</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">flex</span><span class="p">;</span> <span class="nl">gap</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span> <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">12px</span> <span class="m">0</span><span class="p">;</span> <span class="nl">flex-wrap</span><span class="p">:</span> <span class="nb">wrap</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"number"</span><span class="o">]</span> <span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">120px</span><span class="p">;</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">button</span> <span class="p">{</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span> <span class="m">12px</span><span class="p">;</span> <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.stats</span> <span class="p">{</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">8px</span> <span class="m">0</span> <span class="m">16px</span><span class="p">;</span> <span class="nl">color</span><span class="p">:</span> <span class="nx">#333</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.chunk</span> <span class="p">{</span> <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="nx">#ddd</span><span class="p">;</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">12px</span> <span class="m">0</span><span class="p">;</span> <span class="nl">border-radius</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span> <span class="nl">background</span><span class="p">:</span> <span class="nx">#fafafa</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.chunk</span> <span class="nt">header</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">flex</span><span class="p">;</span> <span class="nl">justify-content</span><span class="p">:</span> <span class="nb">space-between</span><span class="p">;</span> <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span> <span class="nl">margin-bottom</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.chunk</span> <span class="nt">pre</span> <span class="p">{</span> <span class="nl">white-space</span><span class="p">:</span> <span class="nb">pre-wrap</span><span class="p">;</span> <span class="nl">word-break</span><span class="p">:</span> <span class="n">break-word</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.muted</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="nx">#666</span><span class="p">;</span> <span class="nl">font-size</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;h1&gt;</span>텍스트 분할 <span class="err">&amp;</span> 복사<span class="nt">&lt;/h1&gt;</span>

  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"input"</span><span class="nt">&gt;</span>원본 텍스트<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"input"</span> <span class="na">placeholder=</span><span class="s">"여기에 긴 텍스트를 붙여넣으세요"</span><span class="nt">&gt;&lt;/textarea&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"size"</span><span class="nt">&gt;</span>조각 글자 수<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"size"</span> <span class="na">type=</span><span class="s">"number"</span> <span class="na">min=</span><span class="s">"1"</span> <span class="na">step=</span><span class="s">"1"</span> <span class="na">value=</span><span class="s">"500"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"splitBtn"</span><span class="nt">&gt;</span>분할하기<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"copyAllBtn"</span> <span class="na">title=</span><span class="s">"모든 조각을 이어붙여서 복사"</span><span class="nt">&gt;</span>모두 복사<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"muted"</span><span class="nt">&gt;</span>
    * 한국어/이모지 등 묶음 문자가 깨지지 않도록 <span class="nt">&lt;code&gt;</span>Intl.Segmenter<span class="nt">&lt;/code&gt;</span>를 이용해 “문자(그래프림)” 단위로 자릅니다.
    (매우 오래된 브라우저에서는 일반 문자 길이로 대체)
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"stats"</span> <span class="na">class=</span><span class="s">"stats"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chunks"</span><span class="nt">&gt;&lt;/div&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">const</span> <span class="nx">$</span> <span class="o">=</span> <span class="p">(</span><span class="nx">sel</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="nx">sel</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">$$</span> <span class="o">=</span> <span class="p">(</span><span class="nx">sel</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="nx">sel</span><span class="p">));</span>
  <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#input</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">sizeEl</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#size</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">splitBtn</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#splitBtn</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">copyAllBtn</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#copyAllBtn</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">stats</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#stats</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#chunks</span><span class="dl">'</span><span class="p">);</span>

  <span class="c1">// 안전한 "문자(그래프림)" 단위 분할을 위한 세그멘터</span>
  <span class="kd">function</span> <span class="nf">getGraphemes</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="dl">'</span><span class="s1">Segmenter</span><span class="dl">'</span> <span class="k">in</span> <span class="nx">Intl</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">seg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Intl</span><span class="p">.</span><span class="nc">Segmenter</span><span class="p">(</span><span class="dl">'</span><span class="s1">ko</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">granularity</span><span class="p">:</span> <span class="dl">'</span><span class="s1">grapheme</span><span class="dl">'</span> <span class="p">});</span>
        <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">seg</span><span class="p">.</span><span class="nf">segment</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">segment</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* fallback below */</span> <span class="p">}</span>
    <span class="c1">// Fallback: code unit 기준 (이모지 결합문자에 완벽하진 않지만 동작은 함)</span>
    <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">chunkArray</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">out</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">n</span><span class="p">)</span> <span class="nx">out</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">n</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">out</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="kd">function</span> <span class="nf">copyText</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">clipboard</span><span class="p">.</span><span class="nf">writeText</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="c1">// Fallback: 임시 텍스트영역 이용</span>
      <span class="kd">const</span> <span class="nx">ta</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">textarea</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">ta</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">text</span><span class="p">;</span>
      <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">ta</span><span class="p">);</span>
      <span class="nx">ta</span><span class="p">.</span><span class="nf">select</span><span class="p">();</span>
      <span class="k">try</span> <span class="p">{</span> <span class="nb">document</span><span class="p">.</span><span class="nf">execCommand</span><span class="p">(</span><span class="dl">'</span><span class="s1">copy</span><span class="dl">'</span><span class="p">);</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">ta</span><span class="p">);</span> <span class="k">return</span> <span class="kc">true</span><span class="p">;</span> <span class="p">}</span>
      <span class="k">catch </span><span class="p">(</span><span class="nx">e2</span><span class="p">)</span> <span class="p">{</span> <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">ta</span><span class="p">);</span> <span class="k">return</span> <span class="kc">false</span><span class="p">;</span> <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">renderChunks</span><span class="p">(</span><span class="nx">chunks</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="nx">chunks</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">text</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">div</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">div</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">chunk</span><span class="dl">'</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">header</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">header</span><span class="dl">'</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">title</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">strong</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">title</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">`조각 </span><span class="p">${</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="s2"> / </span><span class="p">${</span><span class="nx">chunks</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">  (</span><span class="p">${</span><span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">자)`</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">btn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">btn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">이 조각 복사</span><span class="dl">'</span><span class="p">;</span>
      <span class="nx">btn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">ok</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">copyText</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
        <span class="nx">btn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">ok</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">복사됨!</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">복사 실패</span><span class="dl">'</span><span class="p">;</span>
        <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">btn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">이 조각 복사</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1200</span><span class="p">);</span>
      <span class="p">});</span>
      <span class="nx">header</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">title</span><span class="p">);</span>
      <span class="nx">header</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">btn</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">pre</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">pre</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">pre</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">text</span><span class="p">;</span>
      <span class="nx">div</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">header</span><span class="p">);</span>
      <span class="nx">div</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">pre</span><span class="p">);</span>
      <span class="nx">container</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">div</span><span class="p">);</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">splitNow</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">raw</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">value</span> <span class="o">??</span> <span class="dl">''</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">size</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nx">sizeEl</span><span class="p">.</span><span class="nx">value</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
    <span class="kd">const</span> <span class="nx">grams</span> <span class="o">=</span> <span class="nf">getGraphemes</span><span class="p">(</span><span class="nx">raw</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">chunks</span> <span class="o">=</span> <span class="nf">chunkArray</span><span class="p">(</span><span class="nx">grams</span><span class="p">,</span> <span class="nx">size</span><span class="p">);</span>
    <span class="nf">renderChunks</span><span class="p">(</span><span class="nx">chunks</span><span class="p">);</span>
    <span class="nx">stats</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">`전체 길이: </span><span class="p">${</span><span class="nx">grams</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">자 · 조각 개수: </span><span class="p">${</span><span class="nx">chunks</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2"> · 조각당 최대 </span><span class="p">${</span><span class="nx">size</span><span class="p">}</span><span class="s2">자`</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">splitBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">splitNow</span><span class="p">);</span>

  <span class="nx">copyAllBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">$</span><span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.chunk pre</span><span class="dl">'</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">joined</span> <span class="o">=</span> <span class="nx">pieces</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">ok</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">copyText</span><span class="p">(</span><span class="nx">joined</span><span class="p">);</span>
    <span class="nx">copyAllBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">ok</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">모두 복사됨!</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">복사 실패</span><span class="dl">'</span><span class="p">;</span>
    <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">copyAllBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">모두 복사</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1200</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">})();</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h3 id="사용-방법-step-by-step">사용 방법 (step-by-step)</h3>

<ol>
  <li>
    <p>위 코드를 <code class="language-plaintext highlighter-rouge">splitter.html</code>로 저장하고 더블클릭해 브라우저에서 엽니다.</p>
  </li>
  <li>
    <p>긴 텍스트를 상단 입력창에 붙여넣습니다.</p>
  </li>
  <li>
    <p>“조각 글자 수”에 원하는 숫자(예: 500)를 입력합니다.</p>
  </li>
  <li>
    <p>“분할하기”를 누르면 아래에 조각들이 생성됩니다.</p>
  </li>
  <li>
    <p>각 조각의 “이 조각 복사” 버튼으로 개별 복사하거나, “모두 복사”로 다시 이어붙인 전체를 복사할 수 있어요.</p>
  </li>
</ol>

<h3 id="참고">참고</h3>

<ul>
  <li>
    <p>기본적으로 한국어, 이모지 등 결합 문자를 안전하게 처리하도록 “문자(그래프림)” 단위로 자릅니다. 아주 오래된 브라우저에선 일반 문자 길이(<code class="language-plaintext highlighter-rouge">.length</code>)로 동작할 수 있습니다.</p>
  </li>
  <li>
    <p>필요하면 “조각당 N자” 외에도 “겹침(오버랩)”, “문단 단위로 자르되 최대 N자” 같은 옵션도 붙여드릴 수 있어요. 원하는 규칙이 있으면 알려주세요!</p>
  </li>
</ul>

<p class="chat--user">

좋아 잘 작동해. 전체적인 구조를 유지하되 두 가지 개선해야할 사항이 있어. 1. 버튼이 “복사됨!”으로 바뀐 뒤 다시 일정 시간 후 “이 조각 복사” 버튼으로 돌아가는데, 내가 어디까지 복사했는지 헷갈려. 내가 1번이라도 누른 것은 버튼 색을 바꾸거나 해서 내가 어디까지 했는지 알 수 있으면 좋겠어. 2. 각 조각을 8000자 정도로 하고 있는데 스크롤 내려야할 게 너무 길어. 각 미리보기 블럭을 접어두고 내가 원할때만 펴도 좋을 거 같아. 두 가지는 내가 생각하는 방향인데 너한테 더 좋은 아이디어가 있다면 반영해줘.

</p>

<p>좋아요! 말씀해주신 두 가지를 기준으로, 구조는 유지하면서 이렇게 개선했어요.</p>

<ul>
  <li>
    <p>#1 “내가 복사한 조각을 한눈에”: 어떤 조각이든 <strong>한 번이라도 복사에 성공하면</strong> 그 카드가 <strong>영구 표시(세션 내)</strong> 됩니다.</p>

    <ul>
      <li>
        <p>상단 요약줄에 ✅ 배지가 붙고, 카드 테두리가 강조됩니다(초록색).</p>
      </li>
      <li>
        <p>버튼 문구는 예전처럼 잠깐 “복사됨!”으로 바뀌지만, <strong>배지는 그대로</strong> 남아 “어디까지 했는지” 헷갈리지 않게 해요.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>#2 “스크롤 지옥 해방”: 각 조각을 <strong>접을 수 있는 미리보기(accordion)</strong> 로 바꿨습니다.</p>

    <ul>
      <li>
        <p>기본은 접힘 상태로 렌더링되고, 요약줄엔 <strong>조각 번호/총개수, 길이, 앞부분 미리보기</strong> 가 보여요.</p>
      </li>
      <li>
        <p>상단에 “<strong>모두 펼치기 / 모두 접기</strong> ” 토글도 추가했습니다.</p>
      </li>
    </ul>
  </li>
</ul>

<p>거기에 제안 하나 더!</p>

<ul>
  <li><strong>“다음 조각 열기”</strong> : 어떤 조각에서 복사 성공하면, <strong>다음 조각을 자동으로 펼쳐</strong> 작업 흐름이 매끄럽습니다(선택 가능 토글).</li>
</ul>

<p>아래 전체 코드만 <code class="language-plaintext highlighter-rouge">splitter.html</code>로 저장해 열면 바로 됩니다.</p>
<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!doctype html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"ko"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"utf-8"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;title&gt;</span>텍스트 분할 <span class="err">&amp;</span> 복사 (개선판)<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;style&gt;</span>
  <span class="nd">:root</span> <span class="p">{</span>
    <span class="py">--accent</span><span class="p">:</span> <span class="nx">#2e7d32</span><span class="p">;</span> <span class="c">/* 복사 완료 강조색 */</span>
    <span class="py">--muted</span><span class="p">:</span> <span class="nx">#666</span><span class="p">;</span>
    <span class="py">--border</span><span class="p">:</span> <span class="nx">#ddd</span><span class="p">;</span>
    <span class="py">--bg</span><span class="p">:</span> <span class="nx">#fafafa</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nt">body</span> <span class="p">{</span> <span class="nl">font-family</span><span class="p">:</span> <span class="n">system-ui</span><span class="p">,</span> <span class="o">-</span><span class="n">apple-system</span><span class="p">,</span> <span class="s1">"Segoe UI"</span><span class="p">,</span> <span class="n">Roboto</span><span class="p">,</span> <span class="s1">"Noto Sans KR"</span><span class="p">,</span> <span class="n">Arial</span><span class="p">,</span> <span class="nb">sans-serif</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">24px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">h1</span> <span class="p">{</span> <span class="nl">font-size</span><span class="p">:</span> <span class="m">20px</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span> <span class="m">0</span> <span class="m">16px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">textarea</span> <span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">100%</span><span class="p">;</span> <span class="nl">min-height</span><span class="p">:</span> <span class="m">180px</span><span class="p">;</span> <span class="nl">box-sizing</span><span class="p">:</span> <span class="nb">border-box</span><span class="p">;</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.row</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">flex</span><span class="p">;</span> <span class="nl">gap</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span> <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">12px</span> <span class="m">0</span><span class="p">;</span> <span class="nl">flex-wrap</span><span class="p">:</span> <span class="nb">wrap</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">input</span><span class="o">[</span><span class="nt">type</span><span class="o">=</span><span class="s1">"number"</span><span class="o">]</span> <span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">120px</span><span class="p">;</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nt">button</span> <span class="p">{</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">8px</span> <span class="m">12px</span><span class="p">;</span> <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.stats</span> <span class="p">{</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">8px</span> <span class="m">0</span> <span class="m">16px</span><span class="p">;</span> <span class="nl">color</span><span class="p">:</span> <span class="nx">#333</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.muted</span> <span class="p">{</span> <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="l">--muted</span><span class="p">);</span> <span class="nl">font-size</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span> <span class="p">}</span>

  <span class="c">/* 조각(접힘 카드) */</span>
  <span class="nt">details</span><span class="nc">.chunk</span> <span class="p">{</span>
    <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="nf">var</span><span class="p">(</span><span class="l">--border</span><span class="p">);</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span>
    <span class="nl">background</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="l">--bg</span><span class="p">);</span>
    <span class="nl">margin</span><span class="p">:</span> <span class="m">12px</span> <span class="m">0</span><span class="p">;</span>
    <span class="nl">transition</span><span class="p">:</span> <span class="n">border-color</span> <span class="m">.2s</span><span class="p">,</span> <span class="n">box-shadow</span> <span class="m">.2s</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">details</span><span class="nc">.chunk</span><span class="o">[</span><span class="nt">open</span><span class="o">]</span> <span class="p">{</span>
    <span class="nl">box-shadow</span><span class="p">:</span> <span class="m">0</span> <span class="m">1px</span> <span class="m">10px</span> <span class="nf">rgba</span><span class="p">(</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">0</span><span class="p">,</span><span class="m">.04</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="nt">details</span><span class="nc">.chunk.copied-once</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="l">--accent</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="c">/* 요약줄 */</span>
  <span class="nt">summary</span> <span class="p">{</span>
    <span class="nl">list-style</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">flex</span><span class="p">;</span>
    <span class="nl">gap</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span>
    <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span> <span class="m">12px</span><span class="p">;</span>
    <span class="nl">cursor</span><span class="p">:</span> <span class="nb">pointer</span><span class="p">;</span>
    <span class="py">user-select</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nt">summary</span><span class="nd">::-webkit-details-marker</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">none</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.summary-left</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">flex</span><span class="p">;</span> <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span> <span class="nl">gap</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span> <span class="nl">flex</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.badge</span> <span class="p">{</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">11px</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">2px</span> <span class="m">6px</span><span class="p">;</span>
    <span class="nl">border-radius</span><span class="p">:</span> <span class="m">999px</span><span class="p">;</span>
    <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="nf">var</span><span class="p">(</span><span class="l">--border</span><span class="p">);</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nx">#333</span><span class="p">;</span>
    <span class="nl">background</span><span class="p">:</span> <span class="nx">#fff</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.badge.ok</span> <span class="p">{</span>
    <span class="nl">border-color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="l">--accent</span><span class="p">);</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="l">--accent</span><span class="p">);</span>
    <span class="nl">font-weight</span><span class="p">:</span> <span class="m">600</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.snippet</span> <span class="p">{</span>
    <span class="nl">color</span><span class="p">:</span> <span class="nf">var</span><span class="p">(</span><span class="l">--muted</span><span class="p">);</span>
    <span class="nl">font-size</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span>
    <span class="nl">overflow</span><span class="p">:</span> <span class="nb">hidden</span><span class="p">;</span>
    <span class="nl">text-overflow</span><span class="p">:</span> <span class="n">ellipsis</span><span class="p">;</span>
    <span class="nl">white-space</span><span class="p">:</span> <span class="nb">nowrap</span><span class="p">;</span>
    <span class="nl">max-width</span><span class="p">:</span> <span class="m">40ch</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c">/* 본문 */</span>
  <span class="nc">.chunk-body</span> <span class="p">{</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">12px</span> <span class="m">12px</span> <span class="m">12px</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.actions</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">flex</span><span class="p">;</span> <span class="nl">gap</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span> <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">8px</span> <span class="m">0</span><span class="p">;</span> <span class="nl">flex-wrap</span><span class="p">:</span> <span class="nb">wrap</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.chunk</span> <span class="nt">pre</span> <span class="p">{</span> <span class="nl">white-space</span><span class="p">:</span> <span class="nb">pre-wrap</span><span class="p">;</span> <span class="nl">word-break</span><span class="p">:</span> <span class="n">break-word</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">0</span><span class="p">;</span> <span class="nl">padding</span><span class="p">:</span> <span class="m">10px</span><span class="p">;</span> <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="nf">var</span><span class="p">(</span><span class="l">--border</span><span class="p">);</span> <span class="nl">border-radius</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span> <span class="nl">background</span><span class="p">:</span> <span class="nx">#fff</span><span class="p">;</span> <span class="nl">max-height</span><span class="p">:</span> <span class="m">40vh</span><span class="p">;</span> <span class="nl">overflow</span><span class="p">:</span> <span class="nb">auto</span><span class="p">;</span> <span class="p">}</span>

  <span class="c">/* 상단 컨트롤 */</span>
  <span class="nc">.toolbar</span> <span class="p">{</span> <span class="nl">display</span><span class="p">:</span> <span class="nb">flex</span><span class="p">;</span> <span class="nl">gap</span><span class="p">:</span> <span class="m">8px</span><span class="p">;</span> <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span> <span class="nl">flex-wrap</span><span class="p">:</span> <span class="nb">wrap</span><span class="p">;</span> <span class="nl">margin</span><span class="p">:</span> <span class="m">8px</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
  <span class="nc">.toolbar</span> <span class="nc">.spacer</span> <span class="p">{</span> <span class="nl">flex</span><span class="p">:</span> <span class="m">1</span><span class="p">;</span> <span class="p">}</span>

  <span class="c">/* 작은 토글 스위치 */</span>
  <span class="nc">.toggle</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="nb">inline-flex</span><span class="p">;</span> <span class="nl">align-items</span><span class="p">:</span> <span class="nb">center</span><span class="p">;</span> <span class="nl">gap</span><span class="p">:</span> <span class="m">6px</span><span class="p">;</span> <span class="nl">font-size</span><span class="p">:</span> <span class="m">12px</span><span class="p">;</span> <span class="nl">color</span><span class="p">:</span> <span class="nx">#333</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nc">.toggle</span> <span class="nt">input</span> <span class="p">{</span> <span class="nl">width</span><span class="p">:</span> <span class="m">1.1rem</span><span class="p">;</span> <span class="nl">height</span><span class="p">:</span> <span class="m">1.1rem</span><span class="p">;</span> <span class="p">}</span>
<span class="nt">&lt;/style&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
  <span class="nt">&lt;h1&gt;</span>텍스트 분할 <span class="err">&amp;</span> 복사<span class="nt">&lt;/h1&gt;</span>

  <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"input"</span><span class="nt">&gt;</span>원본 텍스트<span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;textarea</span> <span class="na">id=</span><span class="s">"input"</span> <span class="na">placeholder=</span><span class="s">"여기에 긴 텍스트를 붙여넣으세요"</span><span class="nt">&gt;&lt;/textarea&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"row"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"size"</span><span class="nt">&gt;</span>조각 글자 수<span class="nt">&lt;/label&gt;</span>
    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"size"</span> <span class="na">type=</span><span class="s">"number"</span> <span class="na">min=</span><span class="s">"1"</span> <span class="na">step=</span><span class="s">"1"</span> <span class="na">value=</span><span class="s">"8000"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"splitBtn"</span><span class="nt">&gt;</span>분할하기<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"copyAllBtn"</span> <span class="na">title=</span><span class="s">"모든 조각을 이어붙여서 복사"</span><span class="nt">&gt;</span>모두 복사<span class="nt">&lt;/button&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"toolbar"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"expandAllBtn"</span><span class="nt">&gt;</span>모두 펼치기<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;button</span> <span class="na">id=</span><span class="s">"collapseAllBtn"</span><span class="nt">&gt;</span>모두 접기<span class="nt">&lt;/button&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"spacer"</span><span class="nt">&gt;&lt;/span&gt;</span>
    <span class="nt">&lt;label</span> <span class="na">class=</span><span class="s">"toggle"</span> <span class="na">title=</span><span class="s">"복사 성공 시 자동으로 다음 조각을 열어 작업 흐름을 빠르게 합니다."</span><span class="nt">&gt;</span>
      <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">"autoOpenNext"</span> <span class="na">type=</span><span class="s">"checkbox"</span> <span class="na">checked</span> <span class="nt">/&gt;</span>
      복사 후 다음 조각 자동 열기
    <span class="nt">&lt;/label&gt;</span>
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"muted"</span><span class="nt">&gt;</span>
    * 한국어/이모지 등 결합 문자가 깨지지 않도록 <span class="nt">&lt;code&gt;</span>Intl.Segmenter<span class="nt">&lt;/code&gt;</span>로 “문자(그래프림)” 단위로 자릅니다. (오래된 브라우저는 일반 길이로 대체)
  <span class="nt">&lt;/div&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"stats"</span> <span class="na">class=</span><span class="s">"stats"</span><span class="nt">&gt;&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">"chunks"</span><span class="nt">&gt;&lt;/div&gt;</span>

<span class="nt">&lt;script&gt;</span>
<span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
  <span class="kd">const</span> <span class="nx">$</span> <span class="o">=</span> <span class="p">(</span><span class="nx">sel</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">document</span><span class="p">.</span><span class="nf">querySelector</span><span class="p">(</span><span class="nx">sel</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">$$</span> <span class="o">=</span> <span class="p">(</span><span class="nx">sel</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nb">document</span><span class="p">.</span><span class="nf">querySelectorAll</span><span class="p">(</span><span class="nx">sel</span><span class="p">));</span>
  <span class="kd">const</span> <span class="nx">input</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#input</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">sizeEl</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#size</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">splitBtn</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#splitBtn</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">copyAllBtn</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#copyAllBtn</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">stats</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#stats</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#chunks</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">expandAllBtn</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#expandAllBtn</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">collapseAllBtn</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#collapseAllBtn</span><span class="dl">'</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">autoOpenNextEl</span> <span class="o">=</span> <span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#autoOpenNext</span><span class="dl">'</span><span class="p">);</span>

  <span class="kd">function</span> <span class="nf">getGraphemes</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">if </span><span class="p">(</span><span class="dl">'</span><span class="s1">Segmenter</span><span class="dl">'</span> <span class="k">in</span> <span class="nx">Intl</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">const</span> <span class="nx">seg</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Intl</span><span class="p">.</span><span class="nc">Segmenter</span><span class="p">(</span><span class="dl">'</span><span class="s1">ko</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">granularity</span><span class="p">:</span> <span class="dl">'</span><span class="s1">grapheme</span><span class="dl">'</span> <span class="p">});</span>
        <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">seg</span><span class="p">.</span><span class="nf">segment</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="nx">s</span> <span class="o">=&gt;</span> <span class="nx">s</span><span class="p">.</span><span class="nx">segment</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* fallback below */</span> <span class="p">}</span>
    <span class="k">return</span> <span class="nb">Array</span><span class="p">.</span><span class="k">from</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">chunkArray</span><span class="p">(</span><span class="nx">arr</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">out</span> <span class="o">=</span> <span class="p">[];</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="nx">n</span><span class="p">)</span> <span class="nx">out</span><span class="p">.</span><span class="nf">push</span><span class="p">(</span><span class="nx">arr</span><span class="p">.</span><span class="nf">slice</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="nx">i</span> <span class="o">+</span> <span class="nx">n</span><span class="p">).</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">));</span>
    <span class="k">return</span> <span class="nx">out</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">async</span> <span class="kd">function</span> <span class="nf">copyText</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">await</span> <span class="nb">navigator</span><span class="p">.</span><span class="nx">clipboard</span><span class="p">.</span><span class="nf">writeText</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
      <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">ta</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">textarea</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">ta</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">text</span><span class="p">;</span>
      <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">ta</span><span class="p">);</span>
      <span class="nx">ta</span><span class="p">.</span><span class="nf">select</span><span class="p">();</span>
      <span class="k">try</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nf">execCommand</span><span class="p">(</span><span class="dl">'</span><span class="s1">copy</span><span class="dl">'</span><span class="p">);</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">ta</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
      <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">e2</span><span class="p">)</span> <span class="p">{</span>
        <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nf">removeChild</span><span class="p">(</span><span class="nx">ta</span><span class="p">);</span>
        <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">makeSummaryLine</span><span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">total</span><span class="p">,</span> <span class="nx">text</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">snippet</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sr">/</span><span class="se">\s</span><span class="sr">+/g</span><span class="p">,</span> <span class="dl">'</span><span class="s1"> </span><span class="dl">'</span><span class="p">).</span><span class="nf">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">60</span><span class="p">);</span>
    <span class="k">return</span> <span class="p">{</span>
      <span class="na">title</span><span class="p">:</span> <span class="s2">`조각 </span><span class="p">${</span><span class="nx">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">}</span><span class="s2"> / </span><span class="p">${</span><span class="nx">total</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span>
      <span class="na">meta</span><span class="p">:</span> <span class="s2">`(</span><span class="p">${</span><span class="nx">len</span><span class="p">}</span><span class="s2">자)`</span><span class="p">,</span>
      <span class="nx">snippet</span>
    <span class="p">};</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">renderChunks</span><span class="p">(</span><span class="nx">chunks</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">container</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="nx">chunks</span><span class="p">.</span><span class="nf">forEach</span><span class="p">((</span><span class="nx">text</span><span class="p">,</span> <span class="nx">idx</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">details</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">details</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">details</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">chunk</span><span class="dl">'</span><span class="p">;</span>
      <span class="c1">// 기본: 접힘</span>
      <span class="nx">details</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>

      <span class="kd">const</span> <span class="nx">summary</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">summary</span><span class="dl">'</span><span class="p">);</span>
      <span class="kd">const</span> <span class="nx">left</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">left</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">summary-left</span><span class="dl">'</span><span class="p">;</span>

      <span class="kd">const</span> <span class="nx">b1</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">span</span><span class="dl">'</span><span class="p">);</span> <span class="nx">b1</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">badge</span><span class="dl">'</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">b2</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">span</span><span class="dl">'</span><span class="p">);</span> <span class="nx">b2</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">badge</span><span class="dl">'</span><span class="p">;</span>
      <span class="kd">const</span> <span class="nx">snip</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">span</span><span class="dl">'</span><span class="p">);</span> <span class="nx">snip</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">snippet</span><span class="dl">'</span><span class="p">;</span>

      <span class="kd">const</span> <span class="nx">meta</span> <span class="o">=</span> <span class="nf">makeSummaryLine</span><span class="p">(</span><span class="nx">idx</span><span class="p">,</span> <span class="nx">chunks</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span> <span class="nx">text</span><span class="p">);</span>
      <span class="nx">b1</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">title</span><span class="p">;</span>
      <span class="nx">b2</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">meta</span><span class="p">;</span>
      <span class="nx">snip</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">meta</span><span class="p">.</span><span class="nx">snippet</span><span class="p">;</span>

      <span class="nx">left</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">b1</span><span class="p">);</span> <span class="nx">left</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">b2</span><span class="p">);</span> <span class="nx">left</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">snip</span><span class="p">);</span>

      <span class="kd">const</span> <span class="nx">copiedBadge</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">span</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">copiedBadge</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">badge</span><span class="dl">'</span><span class="p">;</span>
      <span class="nx">copiedBadge</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">미복사</span><span class="dl">'</span><span class="p">;</span>

      <span class="nx">summary</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">left</span><span class="p">);</span>
      <span class="nx">summary</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">copiedBadge</span><span class="p">);</span>
      <span class="nx">details</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">summary</span><span class="p">);</span>

      <span class="kd">const</span> <span class="nx">body</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">body</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">chunk-body</span><span class="dl">'</span><span class="p">;</span>

      <span class="kd">const</span> <span class="nx">actions</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">div</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">actions</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">actions</span><span class="dl">'</span><span class="p">;</span>

      <span class="kd">const</span> <span class="nx">copyBtn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">copyBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">이 조각 복사</span><span class="dl">'</span><span class="p">;</span>

      <span class="kd">const</span> <span class="nx">copyAndNextBtn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">copyAndNextBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">복사하고 다음 펼치기</span><span class="dl">'</span><span class="p">;</span>

      <span class="kd">const</span> <span class="nx">markBtn</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">button</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">markBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">표시 해제</span><span class="dl">'</span><span class="p">;</span>

      <span class="nx">actions</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">copyBtn</span><span class="p">);</span>
      <span class="nx">actions</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">copyAndNextBtn</span><span class="p">);</span>
      <span class="nx">actions</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">markBtn</span><span class="p">);</span>

      <span class="kd">const</span> <span class="nx">pre</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nf">createElement</span><span class="p">(</span><span class="dl">'</span><span class="s1">pre</span><span class="dl">'</span><span class="p">);</span>
      <span class="nx">pre</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">text</span><span class="p">;</span>

      <span class="nx">body</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">actions</span><span class="p">);</span>
      <span class="nx">body</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">pre</span><span class="p">);</span>
      <span class="nx">details</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
      <span class="nx">container</span><span class="p">.</span><span class="nf">appendChild</span><span class="p">(</span><span class="nx">details</span><span class="p">);</span>

      <span class="c1">// 상태 마킹 함수</span>
      <span class="kd">function</span> <span class="nf">markCopiedOnce</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">details</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">copied-once</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">copiedBadge</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="dl">'</span><span class="s1">ok</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">copiedBadge</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">✅ 복사함</span><span class="dl">'</span><span class="p">;</span>
        <span class="nx">markBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">표시 해제</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="kd">function</span> <span class="nf">unmarkCopied</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">details</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">'</span><span class="s1">copied-once</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">copiedBadge</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="dl">'</span><span class="s1">ok</span><span class="dl">'</span><span class="p">);</span>
        <span class="nx">copiedBadge</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">미복사</span><span class="dl">'</span><span class="p">;</span>
        <span class="nx">markBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">표시하기</span><span class="dl">'</span><span class="p">;</span>
      <span class="p">}</span>

      <span class="c1">// 수동 토글 (원하실 때 직접 표시/해제)</span>
      <span class="nx">markBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span> <span class="c1">// summary 열림 방지</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">details</span><span class="p">.</span><span class="nx">classList</span><span class="p">.</span><span class="nf">contains</span><span class="p">(</span><span class="dl">'</span><span class="s1">copied-once</span><span class="dl">'</span><span class="p">))</span> <span class="nf">unmarkCopied</span><span class="p">();</span>
        <span class="k">else</span> <span class="nf">markCopiedOnce</span><span class="p">();</span>
      <span class="p">});</span>

      <span class="c1">// 복사 버튼</span>
      <span class="nx">copyBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span> <span class="c1">// summary 토글 방지</span>
        <span class="kd">const</span> <span class="nx">ok</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">copyText</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
        <span class="nx">copyBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">ok</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">복사됨!</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">복사 실패</span><span class="dl">'</span><span class="p">;</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">ok</span><span class="p">)</span> <span class="nf">markCopiedOnce</span><span class="p">();</span>
        <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">copyBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">이 조각 복사</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1200</span><span class="p">);</span>
      <span class="p">});</span>

      <span class="c1">// 복사 후 다음 펼치기(옵션)</span>
      <span class="nx">copyAndNextBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">e</span><span class="p">.</span><span class="nf">preventDefault</span><span class="p">();</span>
        <span class="kd">const</span> <span class="nx">ok</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">copyText</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
        <span class="nx">copyAndNextBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">ok</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">복사됨!</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">복사 실패</span><span class="dl">'</span><span class="p">;</span>
        <span class="k">if </span><span class="p">(</span><span class="nx">ok</span><span class="p">)</span> <span class="p">{</span>
          <span class="nf">markCopiedOnce</span><span class="p">();</span>
          <span class="k">if </span><span class="p">(</span><span class="nx">autoOpenNextEl</span><span class="p">.</span><span class="nx">checked</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">next</span> <span class="o">=</span> <span class="nx">details</span><span class="p">.</span><span class="nx">nextElementSibling</span><span class="p">;</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">next</span> <span class="o">&amp;&amp;</span> <span class="nx">next</span><span class="p">.</span><span class="nx">tagName</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">DETAILS</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
              <span class="nx">next</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
              <span class="nx">next</span><span class="p">.</span><span class="nf">scrollIntoView</span><span class="p">({</span> <span class="na">behavior</span><span class="p">:</span> <span class="dl">'</span><span class="s1">smooth</span><span class="dl">'</span><span class="p">,</span> <span class="na">block</span><span class="p">:</span> <span class="dl">'</span><span class="s1">start</span><span class="dl">'</span> <span class="p">});</span>
            <span class="p">}</span>
          <span class="p">}</span>
        <span class="p">}</span>
        <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">copyAndNextBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">복사하고 다음 펼치기</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1200</span><span class="p">);</span>
      <span class="p">});</span>
    <span class="p">});</span>
  <span class="p">}</span>

  <span class="kd">function</span> <span class="nf">splitNow</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">raw</span> <span class="o">=</span> <span class="nx">input</span><span class="p">.</span><span class="nx">value</span> <span class="o">??</span> <span class="dl">''</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">size</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">parseInt</span><span class="p">(</span><span class="nx">sizeEl</span><span class="p">.</span><span class="nx">value</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">,</span> <span class="mi">10</span><span class="p">));</span>
    <span class="kd">const</span> <span class="nx">grams</span> <span class="o">=</span> <span class="nf">getGraphemes</span><span class="p">(</span><span class="nx">raw</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">chunks</span> <span class="o">=</span> <span class="nf">chunkArray</span><span class="p">(</span><span class="nx">grams</span><span class="p">,</span> <span class="nx">size</span><span class="p">);</span>
    <span class="nf">renderChunks</span><span class="p">(</span><span class="nx">chunks</span><span class="p">);</span>
    <span class="nx">stats</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s2">`전체 길이: </span><span class="p">${</span><span class="nx">grams</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2">자 · 조각 개수: </span><span class="p">${</span><span class="nx">chunks</span><span class="p">.</span><span class="nx">length</span><span class="p">}</span><span class="s2"> · 조각당 최대 </span><span class="p">${</span><span class="nx">size</span><span class="p">}</span><span class="s2">자`</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="nx">splitBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="nx">splitNow</span><span class="p">);</span>

  <span class="nx">copyAllBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="k">async </span><span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">pieces</span> <span class="o">=</span> <span class="nx">$</span><span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">.chunk pre</span><span class="dl">'</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="nx">p</span> <span class="o">=&gt;</span> <span class="nx">p</span><span class="p">.</span><span class="nx">textContent</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">joined</span> <span class="o">=</span> <span class="nx">pieces</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="dl">''</span><span class="p">);</span>
    <span class="kd">const</span> <span class="nx">ok</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">copyText</span><span class="p">(</span><span class="nx">joined</span><span class="p">);</span>
    <span class="nx">copyAllBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="nx">ok</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">모두 복사됨!</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">복사 실패</span><span class="dl">'</span><span class="p">;</span>
    <span class="nf">setTimeout</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">copyAllBtn</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">모두 복사</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1200</span><span class="p">);</span>
  <span class="p">});</span>

  <span class="nx">expandAllBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">$</span><span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#chunks details.chunk</span><span class="dl">'</span><span class="p">).</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kc">true</span><span class="p">);</span>
  <span class="p">});</span>
  <span class="nx">collapseAllBtn</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">'</span><span class="s1">click</span><span class="dl">'</span><span class="p">,</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">$</span><span class="nf">$</span><span class="p">(</span><span class="dl">'</span><span class="s1">#chunks details.chunk</span><span class="dl">'</span><span class="p">).</span><span class="nf">forEach</span><span class="p">(</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">d</span><span class="p">.</span><span class="nx">open</span> <span class="o">=</span> <span class="kc">false</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">})();</span>
<span class="nt">&lt;/script&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h3 id="바뀐-점-요약-step-by-step">바뀐 점 요약 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>복사 진행 상황 표시</strong> : 한 번이라도 복사 성공하면 해당 카드가 초록 테두리 + <code class="language-plaintext highlighter-rouge">✅ 복사함</code> 배지로 <strong>영구 표시(세션 내)</strong> 됩니다.</p>
  </li>
  <li>
    <p><strong>접힘 UI</strong> : 각 조각은 <code class="language-plaintext highlighter-rouge">details/summary</code> 기반 <strong>접힘 카드</strong> 로 렌더링됩니다. 상단의 “모두 펼치기/모두 접기”로 일괄 제어 가능.</p>
  </li>
  <li>
    <p><strong>미리보기</strong> : 요약줄에 앞부분 60자 미리보기와 길이 표기가 들어가 <strong>스크롤 없이 훑어보기</strong> 가 쉬워졌습니다.</p>
  </li>
  <li>
    <p><strong>작업 흐름 가속</strong> : “복사하고 다음 펼치기” + (옵션) “복사 후 다음 조각 자동 열기” 토글로 <strong>연속 작업</strong> 이 부드럽습니다.</p>
  </li>
  <li>
    <p><strong>수동 표시/해제</strong> 버튼: 필요하면 복사 없이도 “표시하기/표시 해제”로 체크리스트처럼 쓸 수 있어요.</p>
  </li>
</ol>

<p>원하시면</p>

<ul>
  <li>
    <p><strong>오버랩 분할(예: 8000자, 오버랩 200자)</strong> ,</p>
  </li>
  <li>
    <p><strong>문단/문장 단위 최대 N자</strong>(자연어 경계 유지),</p>
  </li>
  <li>
    <p><strong>세션 간 진행상황 저장(localStorage)</strong><br />
같은 옵션도 바로 붙여드릴게요.</p>
  </li>
</ul>]]></content><author><name>hvppyarchive</name></author><category term="misc" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">PyVerilog AST 변환</title><link href="https://hvppyarchive.github.io/verilog/pyverilog-ir/" rel="alternate" type="text/html" title="PyVerilog AST 변환" /><published>2025-08-19T18:31:08+09:00</published><updated>2025-08-19T18:31:08+09:00</updated><id>https://hvppyarchive.github.io/verilog/pyverilog-ir</id><content type="html" xml:base="https://hvppyarchive.github.io/verilog/pyverilog-ir/"><![CDATA[<p class="chat--user">

PyVerilog의 ast가 생각보다 정규화(표준화) 되어 있지 않아서 예외처리할 것이 너무 많아.(e.g. port가 IO 포함인지, 본문에 써있는지 등등) 좀 더 표준화된 형식으로 쉽게 traverse할 수 있는 형태로 conversion 하는 기능을 개발하려고 해. 들어가야할 사항들: - port(순서, 포트명, width(msb, lsb), in/out/inout) - 내부 instance(submodule, port-argument mapping) - 내부 nets(width(msb, lsb)) 

</p>

<p>좋아요—PyVerilog AST의 들쭉날쭉함(ANSI/Non-ANSI 포트 선언, 포지셔널/네임드 인스턴스, width 표현식 등) 때문에 예외가 많죠. 아래처럼 <strong>표준화된 중간 표현(IR)</strong>로 변환하는 파이프라인을 제안합니다. 바로 쓸 수 있는 <strong>참조 구현 코드</strong> 도 넣었어요.</p>

<hr />

<h1 id="목표">목표</h1>

<ul>
  <li>
    <p>모듈 단위로 <strong>일관된 JSON IR</strong> 제공</p>
  </li>
  <li>
    <p>포트: <strong>순서(index), 이름, 방향, 폭(msb/lsb, 정수 평가 가능하면 width), signed 여부</strong></p>
  </li>
  <li>
    <p>내부 인스턴스: <strong>서브모듈명, 인스턴스명, 파라미터 override, 포트-아규먼트 매핑(포지셔널→네임드 자동 치환)</strong></p>
  </li>
  <li>
    <p>내부 nets: <strong>wire/reg 등, 이름, 폭(msb/lsb, width)</strong></p>
  </li>
</ul>

<hr />

<h1 id="설계-스텝별">설계 (스텝별)</h1>

<ol>
  <li><strong>IR 스키마 정의</strong></li>
</ol>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"modules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"&lt;modname&gt;"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"parameters"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"8"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">8</span><span class="p">}],</span><span class="w">
      </span><span class="nl">"ports"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"signed"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
         </span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"nets"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">,</span><span class="nl">"kind"</span><span class="p">:</span><span class="s2">"wire"</span><span class="p">,</span><span class="nl">"signed"</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span><span class="w">
         </span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"WIDTH-1"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">8</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"instances"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"inst"</span><span class="p">:</span><span class="s2">"u0"</span><span class="p">,</span><span class="nl">"module"</span><span class="p">:</span><span class="s2">"child"</span><span class="p">,</span><span class="nl">"param_overrides"</span><span class="p">:[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"4"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">4</span><span class="p">}],</span><span class="w">
         </span><span class="nl">"connections"</span><span class="p">:[{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"data[3:0]"</span><span class="p">},{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"b"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">}]}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">*_str</code>는 원본 표현식 문자열, <code class="language-plaintext highlighter-rouge">msb/lsb/width/value</code>는 <strong>가능하면 정수 평가</strong> , 실패 시 <code class="language-plaintext highlighter-rouge">null</code>.</p>
  </li>
  <li>
    <p>포지셔널 연결은 <strong>서브모듈 포트 순서</strong> 를 이용해 네임드로 변환.</p>
  </li>
</ul>

<ol>
  <li><strong>두 단계 수집</strong></li>
</ol>

<ul>
  <li>
    <p><strong>1패스</strong> : 모든 모듈의 포트 순서/기본 파라미터 테이블 생성(포지셔널 매핑용).</p>
  </li>
  <li>
    <p><strong>2패스</strong> : 각 모듈에 대해 포트/넷/인스턴스 표준화.</p>
  </li>
</ul>

<ol>
  <li><strong>포트 정규화</strong></li>
</ol>

<ul>
  <li>
    <p>ANSI(<code class="language-plaintext highlighter-rouge">Ioport</code>)와 Non-ANSI(<code class="language-plaintext highlighter-rouge">Port</code>+본문 <code class="language-plaintext highlighter-rouge">Input/Output/Inout</code> 선언) 모두 흡수.</p>
  </li>
  <li>
    <p>폭 미지정은 <code class="language-plaintext highlighter-rouge">1비트(msb=lsb=0)</code>로 통일. 방향 미상은 보수적으로 <code class="language-plaintext highlighter-rouge">inout</code> 대신 <strong>발견 실패 시 null</strong>(현실적으로 거의 없음).</p>
  </li>
</ul>

<ol>
  <li><strong>인스턴스 정규화</strong></li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">InstanceList</code>를 재귀 탐색(Generate 블록 내부 포함).</p>
  </li>
  <li>
    <p>포지셔널 연결은 1패스에서 모은 <strong>서브모듈 포트 순서</strong> 로 네임드 변환. 알 수 없는 외부 모듈은 인덱스 기반으로 남김(예: <code class="language-plaintext highlighter-rouge">__pos0</code>, <code class="language-plaintext highlighter-rouge">__pos1</code>).</p>
  </li>
</ul>

<ol>
  <li><strong>넷 정규화</strong></li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">wire/reg</code>(필요하면 <code class="language-plaintext highlighter-rouge">integer</code>)를 수집, 다중 선언은 개별 항목으로 분할.</p>
  </li>
  <li>
    <p>포트 선언에서 이미 등장한 식별자는 <strong>nets에서 중복 제외</strong>(요구사항이 “내부 nets”이므로).</p>
  </li>
</ul>

<ol>
  <li><strong>표현식 평가기</strong></li>
</ol>

<ul>
  <li>파라미터 환경을 사용해 <code class="language-plaintext highlighter-rouge">IntConst/Identifier/UnaryOp/BinaryOp</code> 중심으로 <strong>안전한 정수 평가</strong>(미지원 연산 시 값은 <code class="language-plaintext highlighter-rouge">null</code>, 원 문자열은 유지).</li>
</ul>

<hr />

<h1 id="레퍼런스-구현-python--pyverilog">레퍼런스 구현 (Python / PyVerilog)</h1>

<blockquote>
  <p>pip: <code class="language-plaintext highlighter-rouge">pyverilog</code> 필요. 파일 모음 입력 → 위 IR JSON 반환.
```python</p>
  <h1 id="vnormpy">vnorm.py</h1>
  <p>from <strong>future</strong> import annotations
from typing import Any, Dict, List, Tuple, Optional
import json
from pyverilog.vparser.parser import parse
from pyverilog.vparser import ast as vast
from pyverilog.ast_code_generator.codegen import ASTCodeGenerator</p>
</blockquote>

<p>codegen = ASTCodeGenerator()</p>

<h1 id="--utilities--">———- utilities ———-</h1>
<p>def to_str(node) -&gt; Optional[str]:
    if node is None:
        return None
    try:
        return codegen.visit(node)
    except Exception:
        return None</p>

<p>def int_from_intconst(intconst: str) -&gt; Optional[int]:
    # Handles decimal/hex/bin/octal Verilog ints like 8'hFF or 'd10.
    s = intconst.replace('_', '')
    try:
        # forms: 10, 8'hFF, 'd3
        if "'" not in s:
            return int(s, 10)
        width_base, val = s.split("'")
        base = val[0].lower()
        digits = val[1:]
        if base == 'd': return int(digits, 10)
        if base == 'h': return int(digits, 16)
        if base == 'b': return int(digits, 2)
        if base == 'o': return int(digits, 8)
        # unknown base
        return int(digits, 10)
    except Exception:
        return None</p>

<p>def eval_expr(node, env: Dict[str, int]) -&gt; Optional[int]:
    # conservative evaluator for width-ish integer expressions
    if node is None:
        return None
    if isinstance(node, vast.IntConst):
        return int_from_intconst(node.value)
    if isinstance(node, vast.Identifier):
        return env.get(node.name)
    if isinstance(node, vast.UnaryOperator):
        v = eval_expr(node.children()[0], env)
        if v is None: return None
        op = node.<strong>class</strong>.<strong>name</strong>
        if op in ("Uplus",): return +v
        if op in ("Uminus",): return -v
        if op in ("Ulnot","Unot"): return 0 if v else 1
        return None
    if isinstance(node, vast.Partselect) or isinstance(node, vast.Pointer):
        # treat as unknown integer
        return None
    if isinstance(node, vast.Concat) or isinstance(node, vast.Repeat):
        return None
    # Binary operators
    if isinstance(node, vast.BinaryOperator):
        a = eval_expr(node.left, env)
        b = eval_expr(node.right, env)
        if a is None or b is None:
            return None
        t = node.<strong>class</strong>.<strong>name</strong>
        try:
            if t == "Plus": return a + b
            if t == "Minus": return a - b
            if t == "Times": return a * b
            if t == "Div": return a // b if b != 0 else None
            if t == "Power": return a ** b
            if t == "Mod": return a % b if b != 0 else None
            if t == "Sll": return a « b
            if t == "Srl": return a » b
            if t == "And": return a &amp; b
            if t == "Or":  return a | b
            if t == "Xor": return a ^ b
        except Exception:
            return None
        return None
    return None</p>

<p>def width_tuple(width_node, env: Dict[str,int]):
    # returns (msb_str, lsb_str, msb_val, lsb_val, width_val)
    if width_node is None:
        return "0", "0", 0, 0, 1
    msb_n, lsb_n = width_node.msb, width_node.lsb
    msb_s, lsb_s = to_str(msb_n), to_str(lsb_n)
    msb_v, lsb_v = eval_expr(msb_n, env), eval_expr(lsb_n, env)
    width_v = None
    if msb_v is not None and lsb_v is not None:
        width_v = abs(msb_v - lsb_v) + 1
    return msb_s, lsb_s, msb_v, lsb_v, width_v</p>

<h1 id="--1st-pass-collect-module-port-order--param-defaults--">———- 1st pass: collect module port order &amp; param defaults ———-</h1>
<p>def collect_modules(ast_root) -&gt; Dict[str, vast.ModuleDef]:
    mods = {}
    for d in ast_root.description.definitions:
        if isinstance(d, vast.ModuleDef):
            mods[d.name] = d
    return mods</p>

<p>def collect_param_env(mod: vast.ModuleDef) -&gt; Dict[str,int]:
    env = {}
    # parameters in header
    if getattr(mod, "paramlist", None):
        for p in mod.paramlist.params:
            if isinstance(p, vast.Parameter):
                v = eval_expr(p.value, env)  # parameters can depend on earlier ones
                if v is not None:
                    env[p.name] = v
    # parameters in body declarations, if any
    for item in getattr(mod, "items", []) or []:
        if isinstance(item, vast.Decl):
            for e in item.list:
                if isinstance(e, vast.Parameter):
                    v = eval_expr(e.value, env)
                    if v is not None:
                        env[e.name] = v
    return env</p>

<p>def ordered_port_names(mod: vast.ModuleDef) -&gt; List[str]:
    names = []
    if mod.portlist is None:
        return names
    for p in mod.portlist.ports:
        # Ioport(first=Identifier, second=Input/Output/Inout)
        if isinstance(p, vast.Ioport):
            names.append(p.first.name)
        elif isinstance(p, vast.Port):
            # Port(name, arg=None) in non-ANSI
            names.append(p.name)
    return names</p>

<h1 id="--helpers-declaration-maps--">———- helpers: declaration maps ———-</h1>
<p>def build_io_decl_map(mod: vast.ModuleDef, env: Dict[str,int]):
    # name -&gt; (dir, signed, width_info)
    io_map = {}
    for item in getattr(mod, "items", []) or []:
        if not isinstance(item, vast.Decl):
            continue
        for e in item.list:
            if isinstance(e, (vast.Input, vast.Output, vast.Inout)):
                dir_ = "input" if isinstance(e, vast.Input) else ("output" if isinstance(e, vast.Output) else "inout")
                signed = bool(getattr(e, "signed", False))
                w = getattr(e, "width", None)
                msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
                for name in [n.name for n in e.children() if isinstance(n, vast.Identifier)]:
                    io_map[name] = (dir_, signed, (msb_s, lsb_s, msb_v, lsb_v, width_v))
    return io_map</p>

<p>def build_net_decl_list(mod: vast.ModuleDef, env: Dict[str,int]):
    nets = []
    for item in getattr(mod, "items", []) or []:
        if not isinstance(item, vast.Decl):
            continue
        for e in item.list:
            if isinstance(e, (vast.Wire, vast.Reg, vast.Integer)):
                kind = "wire" if isinstance(e, vast.Wire) else ("reg" if isinstance(e, vast.Reg) else "integer")
                signed = bool(getattr(e, "signed", False))
                w = getattr(e, "width", None)
                msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
                for n in e.children():
                    if isinstance(n, vast.Identifier):
                        nets.append({
                            "name": n.name, "kind": kind, "signed": signed,
                            "msb_str": msb_s, "lsb_str": lsb_s, "msb": msb_v, "lsb": lsb_v, "width": width_v
                        })
    return nets</p>

<h1 id="--recursive-walker-for-instancelist--">———- recursive walker for InstanceList ———-</h1>
<p>def iter_instancelists(node):
    # yield vast.InstanceList under any nesting (e.g., Generate blocks)
    if isinstance(node, vast.InstanceList):
        yield node
    for ch in getattr(node, "children", lambda: [])():
        yield from iter_instancelists(ch)</p>

<h1 id="--2nd-pass-build-ir-per-module--">———- 2nd pass: build IR per module ———-</h1>
<p>def normalize_module(mod: vast.ModuleDef, modlib_ports: Dict[str, List[str]]) -&gt; Dict[str,Any]:
    env = collect_param_env(mod)
    # parameters
    params = []
    # header params
    if getattr(mod, "paramlist", None):
        for p in mod.paramlist.params:
            if isinstance(p, vast.Parameter):
                params.append({
                    "name": p.name,
                    "value_str": to_str(p.value),
                    "value": eval_expr(p.value, env)
                })
    # body params (avoid duplicates)
    body_params = {}
    for item in getattr(mod, "items", []) or []:
        if isinstance(item, vast.Decl):
            for e in item.list:
                if isinstance(e, vast.Parameter) and e.name not in {x["name"] for x in params}:
                    body_params[e.name] = {
                        "name": e.name,
                        "value_str": to_str(e.value),
                        "value": eval_expr(e.value, env)
                    }
    params.extend(body_params.values())</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># ports
io_map = build_io_decl_map(mod, env)
ordered_names = ordered_port_names(mod)
ports = []
for idx, pname in enumerate(ordered_names):
    dir_, signed, winfo = None, False, None
    # ANSI Ioport case
    ansi_hit = False
    if mod.portlist and isinstance(mod.portlist.ports[idx], vast.Ioport):
        io = mod.portlist.ports[idx]
        decl = io.second  # Input/Output/Inout
        dir_ = "input" if isinstance(decl, vast.Input) else ("output" if isinstance(decl, vast.Output) else "inout")
        signed = bool(getattr(decl, "signed", False))
        w = getattr(decl, "width", None)
        msb_s, lsb_s, msb_v, lsb_v, width_v = width_tuple(w, env)
        winfo = (msb_s, lsb_s, msb_v, lsb_v, width_v)
        ansi_hit = True
    # Non-ANSI fallback via body decl map
    if not ansi_hit and pname in io_map:
        dir_, signed, winfo = io_map[pname]
    if winfo is None:
        winfo = width_tuple(None, env)
    msb_s, lsb_s, msb_v, lsb_v, width_v = winfo
    ports.append({
        "index": idx, "name": pname, "dir": dir_, "signed": signed,
        "msb_str": msb_s, "lsb_str": lsb_s, "msb": msb_v, "lsb": lsb_v, "width": width_v
    })

# nets (exclude names that are top-level ports)
nets_raw = build_net_decl_list(mod, env)
port_names_set = set(ordered_names)
nets = [n for n in nets_raw if n["name"] not in port_names_set]

# instances
instances = []
for il in iter_instancelists(mod):
    submod = il.module
    # parameter overrides (common across instances in the list)
    param_overrides = []
    if getattr(il, "paramlist", None):
        for pa in il.paramlist.params:
            # pa: vast.ParamArg(name, argname/value)
            name = pa.paramname if hasattr(pa, "paramname") else getattr(pa, "name", None)
            value_node = pa.argname if hasattr(pa, "argname") else getattr(pa, "value", None)
            param_overrides.append({
                "name": name,
                "value_str": to_str(value_node),
                "value": eval_expr(value_node, env)
            })
    for inst in il.instances:
        conns = []
        # PortArg(portname, argname)
        portargs = getattr(inst, "portlist", []) or []
        # decide positional vs named
        positional = any(getattr(pa, "portname", None) in (None, "") for pa in portargs)
        if positional:
            # map by index using lib
            lib_ports = modlib_ports.get(submod, [])
            for i, pa in enumerate(portargs):
                pname = lib_ports[i] if i &lt; len(lib_ports) else f"__pos{i}"
                conns.append({"port": pname, "expr_str": to_str(getattr(pa, "argname", None))})
        else:
            for pa in portargs:
                conns.append({"port": pa.portname, "expr_str": to_str(pa.argname)})
        instances.append({
            "inst": inst.name,
            "module": submod,
            "param_overrides": param_overrides,
            "connections": conns
        })

return {"parameters": params, "ports": ports, "nets": nets, "instances": instances}
</code></pre></div></div>

<p>def convert_to_vnorm(files: List[str]) -&gt; Dict[str,Any]:
    ast, _ = parse(files)
    mods = collect_modules(ast)
    modlib_ports = {name: ordered_port_names(m) for name, m in mods.items()}
    result = {"modules": {}}
    for name, m in mods.items():
        result["modules"][name] = normalize_module(m, modlib_ports)
    return result</p>

<p>if <strong>name</strong> == "<strong>main</strong>":
    import argparse, sys
    ap = argparse.ArgumentParser()
    ap.add_argument("verilog", nargs="+", help="Verilog source files")
    ap.add_argument("-o", "–out", default="-", help="Output JSON path (default: stdout)")
    args = ap.parse_args()
    ir = convert_to_vnorm(args.verilog)
    s = json.dumps(ir, indent=2)
    if args.out == "-" or args.out == "/dev/stdout":
        print(s)
    else:
        with open(args.out, "w") as f:
            f.write(s)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
* * *

# 사용 예시

**예제 Verilog**
```verilog
module child #(parameter WIDTH=8) (input clk, input [WIDTH-1:0] a, output y);
  assign y = a[0];
endmodule

module top (clk, rst, out);
  input clk, rst;
  output out;
  wire [7:0] data;
  child #(.WIDTH(8)) u0 (.clk(clk), .a(data), .y(out));
endmodule
</code></pre></div></div>

<p><strong>실행</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python vnorm.py top.v <span class="nt">-o</span> ir.json
</code></pre></div></div>

<p><strong>핵심 결과(발췌)</strong></p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"modules"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"top"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"ports"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"rst"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"input"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">},</span><span class="w">
        </span><span class="p">{</span><span class="nl">"index"</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"out"</span><span class="p">,</span><span class="nl">"dir"</span><span class="p">:</span><span class="s2">"output"</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span><span class="err">...</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"nets"</span><span class="p">:[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">,</span><span class="nl">"kind"</span><span class="p">:</span><span class="s2">"wire"</span><span class="p">,</span><span class="nl">"msb_str"</span><span class="p">:</span><span class="s2">"7"</span><span class="p">,</span><span class="nl">"lsb_str"</span><span class="p">:</span><span class="s2">"0"</span><span class="p">,</span><span class="nl">"msb"</span><span class="p">:</span><span class="mi">7</span><span class="p">,</span><span class="nl">"lsb"</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span><span class="nl">"width"</span><span class="p">:</span><span class="mi">8</span><span class="p">}</span><span class="w">
      </span><span class="p">],</span><span class="w">
      </span><span class="nl">"instances"</span><span class="p">:[</span><span class="w">
        </span><span class="p">{</span><span class="nl">"inst"</span><span class="p">:</span><span class="s2">"u0"</span><span class="p">,</span><span class="nl">"module"</span><span class="p">:</span><span class="s2">"child"</span><span class="p">,</span><span class="w">
         </span><span class="nl">"param_overrides"</span><span class="p">:[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"WIDTH"</span><span class="p">,</span><span class="nl">"value_str"</span><span class="p">:</span><span class="s2">"8"</span><span class="p">,</span><span class="nl">"value"</span><span class="p">:</span><span class="mi">8</span><span class="p">}],</span><span class="w">
         </span><span class="nl">"connections"</span><span class="p">:[</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"clk"</span><span class="p">},</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"a"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"data"</span><span class="p">},</span><span class="w">
           </span><span class="p">{</span><span class="nl">"port"</span><span class="p">:</span><span class="s2">"y"</span><span class="p">,</span><span class="nl">"expr_str"</span><span class="p">:</span><span class="s2">"out"</span><span class="p">}</span><span class="w">
         </span><span class="p">]}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="구현-포인트--엣지케이스-처리">구현 포인트 &amp; 엣지케이스 처리</h1>

<ul>
  <li>
    <p><strong>ANSI/Non-ANSI 포트</strong> : 둘 다 커버. Non-ANSI는 본문 <code class="language-plaintext highlighter-rouge">Decl</code> 탐색으로 방향/폭 채움.</p>
  </li>
  <li>
    <p><strong>폭 미지정</strong> : <code class="language-plaintext highlighter-rouge">msb=lsb=0</code>, <code class="language-plaintext highlighter-rouge">width=1</code>로 통일.</p>
  </li>
  <li>
    <p><strong>표현식 평가 실패</strong> : <code class="language-plaintext highlighter-rouge">*_str</code>만 보존하고 정수 필드는 <code class="language-plaintext highlighter-rouge">null</code>.</p>
  </li>
  <li>
    <p><strong>포지셔널 연결</strong> : 1패스에서 수집한 <strong>서브모듈 포트 순서</strong> 로 네임드화.</p>
  </li>
  <li>
    <p><strong>Generate 내부 인스턴스</strong> : 재귀 탐색으로 수집.</p>
  </li>
  <li>
    <p><strong>내부 nets</strong> : 포트 이름과 중복 제거.</p>
  </li>
  <li>
    <p><strong>파라미터</strong> : 헤더/본문 모두 수집, 가능한 경우 정수 평가.</p>
  </li>
</ul>

<hr />

<h1 id="다음-확장-아이디어">다음 확장 아이디어</h1>

<ul>
  <li>
    <p>SystemVerilog 일부 지원(가능 범위에서): <code class="language-plaintext highlighter-rouge">logic</code>, packed/unpacked 배열, interface 포트는 별 레이어로.</p>
  </li>
  <li>
    <p>폭/파라미터 <strong>완전 평가</strong> 를 위해 PyVerilog Dataflow 연계.</p>
  </li>
  <li>
    <p><strong>기본 nettype</strong>(<code class="language-plaintext highlighter-rouge">default_nettype none</code> 미사용 시) 암시적 net 감지 옵션.</p>
  </li>
  <li>
    <p><strong>소스 위치 정보</strong>(filename, lineno) 추가로 디버깅 편의성↑.</p>
  </li>
  <li>
    <p><strong>스키마 검증</strong>(pydantic/jsonschema)로 다운스트림 안정성 확보.</p>
  </li>
</ul>

<hr />

<p>필요하시면 이 IR로부터 <strong>Graphviz 모듈-인스턴스 다이어그램</strong> 이나 <strong>포트/넷 테이블</strong> 뽑는 코드도 바로 붙여드릴게요.</p>

<p class="chat--user">

JSON 말고 Python class로 변환하고 싶어

</p>

<p>좋지! JSON 대신 <strong>Python 클래스(IR)</strong>로 바로 다루게 만들자.<br />
아래는 (1) 타입 설계 → (2) 변환 파이프라인 → (3) 전체 구현 코드 → (4) 사용 예시 순서로 <strong>차근차근</strong> 정리했어.</p>

<hr />

<h1 id="1-목표-재정의-step-by-step">1) 목표 재정의 (Step-by-step)</h1>

<ul>
  <li>
    <p>PyVerilog AST → <strong>일관된 Python dataclass IR</strong> 반환</p>
  </li>
  <li>
    <p>포함 정보</p>

    <ul>
      <li>
        <p><strong>포트</strong> : 순서(index), 이름, 방향(in/out/inout), signed, 폭(msb/lsb/width)</p>
      </li>
      <li>
        <p><strong>인스턴스</strong> : 서브모듈명, 인스턴스명, 파라미터 override, 포트-아규먼트 매핑(포지셔널 → 네임드 자동 변환)</p>
      </li>
      <li>
        <p><strong>내부 nets</strong> : wire/reg/integer, signed, 폭(msb/lsb/width)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>표현식은 가능한 한 <strong>정수 평가</strong> , 실패하면 원문 문자열 유지</p>
  </li>
</ul>

<hr />

<h1 id="2-타입-설계-dataclass--enum">2) 타입 설계 (dataclass + Enum)</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DesignIR</code> (루트) → 모듈명 → <code class="language-plaintext highlighter-rouge">ModuleIR</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ModuleIR</code> 안에 <code class="language-plaintext highlighter-rouge">Parameter</code>, <code class="language-plaintext highlighter-rouge">Port</code>, <code class="language-plaintext highlighter-rouge">Net</code>, <code class="language-plaintext highlighter-rouge">Instance(Connection[])</code></p>
  </li>
  <li>
    <p>방향/넷 종류는 Enum으로 안정화</p>
  </li>
</ul>

<hr />

<h1 id="3-변환-파이프라인-두-패스-step-by-step">3) 변환 파이프라인 (두 패스, Step-by-step)</h1>

<ol>
  <li>
    <p><strong>1패스</strong> : 모든 모듈의</p>

    <ul>
      <li>
        <p>포트 순서 수집(포지셔널 매핑용)</p>
      </li>
      <li>
        <p>파라미터 기본값 환경(env) 구성(폭 평가용)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>2패스(모듈 단위)</strong> :</p>

    <ul>
      <li>
        <p>포트: ANSI/Non-ANSI 통합 정규화</p>
      </li>
      <li>
        <p>넷: 포트와 중복 제거, 다중 선언 분리</p>
      </li>
      <li>
        <p>인스턴스: Generate 내부 포함 재귀 수집, 포지셔널→네임드</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="4-전체-구현-코드-복붙해서-vnorm_classespy-로-저장">4) 전체 구현 코드 (복붙해서 <code class="language-plaintext highlighter-rouge">vnorm_classes.py</code> 로 저장)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># vnorm_classes.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span><span class="p">,</span> <span class="n">asdict</span>
<span class="kn">from</span> <span class="n">enum</span> <span class="kn">import</span> <span class="n">Enum</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">import</span> <span class="n">json</span>

<span class="kn">from</span> <span class="n">pyverilog.vparser.parser</span> <span class="kn">import</span> <span class="n">parse</span>
<span class="kn">from</span> <span class="n">pyverilog.vparser</span> <span class="kn">import</span> <span class="n">ast</span> <span class="k">as</span> <span class="n">vast</span>
<span class="kn">from</span> <span class="n">pyverilog.ast_code_generator.codegen</span> <span class="kn">import</span> <span class="n">ASTCodeGenerator</span>

<span class="n">codegen</span> <span class="o">=</span> <span class="nc">ASTCodeGenerator</span><span class="p">()</span>

<span class="c1"># -------------------- Typed IR --------------------
</span>
<span class="k">class</span> <span class="nc">Direction</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">INPUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">input</span><span class="sh">"</span>
    <span class="n">OUTPUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span>
    <span class="n">INOUT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">inout</span><span class="sh">"</span>

<span class="k">class</span> <span class="nc">NetKind</span><span class="p">(</span><span class="n">Enum</span><span class="p">):</span>
    <span class="n">WIRE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">wire</span><span class="sh">"</span>
    <span class="n">REG</span> <span class="o">=</span> <span class="sh">"</span><span class="s">reg</span><span class="sh">"</span>
    <span class="n">INTEGER</span> <span class="o">=</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Parameter</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">value_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">value</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Port</span><span class="p">:</span>
    <span class="n">index</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="nb">dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Direction</span><span class="p">]</span>          <span class="c1"># Non-ANSI에서 드물게 못찾으면 None
</span>    <span class="n">signed</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">msb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">lsb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">msb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">lsb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">width</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>              <span class="c1"># msb/lsb 둘 다 평가되면 abs(msb-lsb)+1
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Net</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">kind</span><span class="p">:</span> <span class="n">NetKind</span>
    <span class="n">signed</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">msb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">lsb_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">msb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">lsb</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>
    <span class="n">width</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Connection</span><span class="p">:</span>
    <span class="n">port</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">expr_str</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">Instance</span><span class="p">:</span>
    <span class="n">inst</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">module</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">param_overrides</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">connections</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Connection</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModuleIR</span><span class="p">:</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">nets</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>
    <span class="n">instances</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Instance</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>

    <span class="c1"># 편의 메서드
</span>    <span class="k">def</span> <span class="nf">port_by_name</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Port</span><span class="p">]:</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="o">==</span> <span class="n">name</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">p</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">ports_by_dir</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">dir_</span><span class="p">:</span> <span class="n">Direction</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">ports</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="o">==</span> <span class="n">dir_</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">DesignIR</span><span class="p">:</span>
    <span class="n">modules</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModuleIR</span><span class="p">]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">dict</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_json</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">indent</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">asdict</span><span class="p">(</span><span class="n">self</span><span class="p">),</span> <span class="n">indent</span><span class="o">=</span><span class="n">indent</span><span class="p">)</span>

<span class="c1"># -------------------- Helpers --------------------
</span>
<span class="k">def</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">node</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">codegen</span><span class="p">.</span><span class="nf">visit</span><span class="p">(</span><span class="n">node</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">int_from_intconst</span><span class="p">(</span><span class="n">intconst</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="n">intconst</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">,</span> <span class="sh">''</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="sh">"'"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">s</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="n">width_base</span><span class="p">,</span> <span class="n">val</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"'"</span><span class="p">)</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">lower</span><span class="p">()</span>
        <span class="n">digits</span> <span class="o">=</span> <span class="n">val</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">d</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">h</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">base</span> <span class="o">==</span> <span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">:</span> <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">digits</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">IntConst</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">int_from_intconst</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">env</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">UnaryOperator</span><span class="p">):</span>
        <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="nf">children</span><span class="p">()[</span><span class="mi">0</span><span class="p">],</span> <span class="n">env</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Uplus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="o">+</span><span class="n">v</span>
        <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Uminus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="o">-</span><span class="n">v</span>
        <span class="k">if</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">Ulnot</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Unot</span><span class="sh">"</span><span class="p">):</span> <span class="k">return</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">v</span> <span class="k">else</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">BinaryOperator</span><span class="p">):</span>
        <span class="n">a</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
        <span class="n">b</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">node</span><span class="p">.</span><span class="n">right</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">a</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">or</span> <span class="n">b</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span> <span class="k">return</span> <span class="bp">None</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">node</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Plus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Minus</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Times</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Div</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">//</span> <span class="n">b</span> <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Power</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">**</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Mod</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">%</span> <span class="n">b</span> <span class="k">if</span> <span class="n">b</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Sll</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Srl</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">And</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Or</span><span class="sh">"</span><span class="p">:</span>  <span class="k">return</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">Xor</span><span class="sh">"</span><span class="p">:</span> <span class="k">return</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="c1"># 기타 복합표현(Concat/Repeat/Partselect/Pointer)은 평가 보류
</span>    <span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">width_node</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]):</span>
    <span class="c1"># (msb_str, lsb_str, msb_val, lsb_val, width_val)
</span>    <span class="k">if</span> <span class="n">width_node</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>
    <span class="n">msb_n</span><span class="p">,</span> <span class="n">lsb_n</span> <span class="o">=</span> <span class="n">width_node</span><span class="p">.</span><span class="n">msb</span><span class="p">,</span> <span class="n">width_node</span><span class="p">.</span><span class="n">lsb</span>
    <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">msb_n</span><span class="p">),</span> <span class="nf">to_str</span><span class="p">(</span><span class="n">lsb_n</span><span class="p">)</span>
    <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">msb_n</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">lsb_n</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">if</span> <span class="n">msb_v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">width_v</span> <span class="o">=</span> <span class="nf">abs</span><span class="p">(</span><span class="n">msb_v</span> <span class="o">-</span> <span class="n">lsb_v</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span>

<span class="c1"># -------------------- 1st pass: module tables --------------------
</span>
<span class="k">def</span> <span class="nf">collect_modules</span><span class="p">(</span><span class="n">ast_root</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">]:</span>
    <span class="n">mods</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">d</span> <span class="ow">in</span> <span class="n">ast_root</span><span class="p">.</span><span class="n">description</span><span class="p">.</span><span class="n">definitions</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">):</span>
            <span class="n">mods</span><span class="p">[</span><span class="n">d</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span>
    <span class="k">return</span> <span class="n">mods</span>

<span class="k">def</span> <span class="nf">collect_param_env</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
    <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="c1"># 헤더 파라미터
</span>    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">env</span><span class="p">[</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="c1"># 바디 파라미터
</span>    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                    <span class="n">v</span> <span class="o">=</span> <span class="nf">eval_expr</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                    <span class="k">if</span> <span class="n">v</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">env</span><span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">env</span>

<span class="k">def</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="n">names</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">names</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">first</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
        <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Port</span><span class="p">):</span>
            <span class="n">names</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">names</span>

<span class="c1"># -------------------- Decl scans --------------------
</span>
<span class="k">def</span> <span class="nf">build_io_decl_map</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]):</span>
    <span class="c1"># name -&gt; (Direction|None, signed, width_info)
</span>    <span class="n">io_map</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="p">(</span><span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">)):</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
                <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
                <span class="k">else</span><span class="p">:</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
                <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
                <span class="n">w</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="c1"># e.children() contains Identifiers
</span>                <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">e</span><span class="p">.</span><span class="nf">children</span><span class="p">():</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                        <span class="n">io_map</span><span class="p">[</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">io_map</span>

<span class="k">def</span> <span class="nf">build_net_decl_list</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]:</span>
    <span class="n">nets</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Net</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
            <span class="n">kind</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">NetKind</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Wire</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">WIRE</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Reg</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">REG</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Integer</span><span class="p">):</span> <span class="n">kind</span> <span class="o">=</span> <span class="n">NetKind</span><span class="p">.</span><span class="n">INTEGER</span>
            <span class="k">if</span> <span class="n">kind</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
            <span class="n">w</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">e</span><span class="p">.</span><span class="nf">children</span><span class="p">():</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Identifier</span><span class="p">):</span>
                    <span class="n">nets</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Net</span><span class="p">(</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">kind</span><span class="o">=</span><span class="n">kind</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
                        <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
                    <span class="p">))</span>
    <span class="k">return</span> <span class="n">nets</span>

<span class="c1"># -------------------- Instance walker --------------------
</span>
<span class="k">def</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">node</span><span class="p">):</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">InstanceList</span><span class="p">):</span>
        <span class="k">yield</span> <span class="n">node</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="sh">"</span><span class="s">children</span><span class="sh">"</span><span class="p">,</span> <span class="k">lambda</span><span class="p">:</span> <span class="p">[])():</span>
        <span class="k">yield</span> <span class="k">from</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span>

<span class="c1"># -------------------- 2nd pass: normalize module --------------------
</span>
<span class="k">def</span> <span class="nf">normalize_module</span><span class="p">(</span><span class="n">mod</span><span class="p">:</span> <span class="n">vast</span><span class="p">.</span><span class="n">ModuleDef</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">ModuleIR</span><span class="p">:</span>
    <span class="n">env</span> <span class="o">=</span> <span class="nf">collect_param_env</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>

    <span class="c1"># parameters
</span>    <span class="n">params</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">mod</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">):</span>
                <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">),</span>
                    <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span>
                <span class="p">))</span>
    <span class="c1"># body params (dedupe)
</span>    <span class="n">header_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">params</span><span class="p">}</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Decl</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nb">list</span><span class="p">:</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Parameter</span><span class="p">)</span> <span class="ow">and</span> <span class="n">e</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">header_names</span><span class="p">:</span>
                    <span class="n">params</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                        <span class="n">name</span><span class="o">=</span><span class="n">e</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                        <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">),</span>
                        <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">env</span><span class="p">),</span>
                    <span class="p">))</span>

    <span class="c1"># ports
</span>    <span class="n">io_map</span> <span class="o">=</span> <span class="nf">build_io_decl_map</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">ordered_names</span> <span class="o">=</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">mod</span><span class="p">)</span>
    <span class="n">ports</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Port</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">pname</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">ordered_names</span><span class="p">):</span>
        <span class="n">dir_</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Direction</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">signed</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="n">msb_s</span> <span class="o">=</span> <span class="n">lsb_s</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">msb_v</span> <span class="o">=</span> <span class="n">lsb_v</span> <span class="o">=</span> <span class="n">width_v</span> <span class="o">=</span> <span class="bp">None</span>

        <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="n">vast</span><span class="p">.</span><span class="n">Ioport</span><span class="p">):</span>
            <span class="n">io</span> <span class="o">=</span> <span class="n">mod</span><span class="p">.</span><span class="n">portlist</span><span class="p">.</span><span class="n">ports</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span>
            <span class="n">decl</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">second</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Input</span><span class="p">):</span>  <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INPUT</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Output</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">OUTPUT</span>
            <span class="k">elif</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="n">vast</span><span class="p">.</span><span class="n">Inout</span><span class="p">):</span> <span class="n">dir_</span> <span class="o">=</span> <span class="n">Direction</span><span class="p">.</span><span class="n">INOUT</span>
            <span class="n">signed</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">signed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">False</span><span class="p">))</span>
            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="nf">width_tuple</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">decl</span><span class="p">,</span> <span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="n">env</span><span class="p">)</span>
            <span class="n">ansi_hit</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">ansi_hit</span> <span class="ow">and</span> <span class="n">pname</span> <span class="ow">in</span> <span class="n">io_map</span><span class="p">:</span>
            <span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="p">,</span> <span class="p">(</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span><span class="p">)</span> <span class="o">=</span> <span class="n">io_map</span><span class="p">[</span><span class="n">pname</span><span class="p">]</span>

        <span class="k">if</span> <span class="n">msb_s</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_s</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">msb_v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">lsb_v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">width_v</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># width unspecified -&gt; 1-bit
</span>            <span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb_v</span><span class="p">,</span> <span class="n">width_v</span> <span class="o">=</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">0</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span>

        <span class="n">ports</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Port</span><span class="p">(</span>
            <span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">dir_</span><span class="p">,</span> <span class="n">signed</span><span class="o">=</span><span class="n">signed</span><span class="p">,</span>
            <span class="n">msb_str</span><span class="o">=</span><span class="n">msb_s</span><span class="p">,</span> <span class="n">lsb_str</span><span class="o">=</span><span class="n">lsb_s</span><span class="p">,</span> <span class="n">msb</span><span class="o">=</span><span class="n">msb_v</span><span class="p">,</span> <span class="n">lsb</span><span class="o">=</span><span class="n">lsb_v</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="n">width_v</span>
        <span class="p">))</span>

    <span class="c1"># nets (exclude top ports)
</span>    <span class="n">nets_raw</span> <span class="o">=</span> <span class="nf">build_net_decl_list</span><span class="p">(</span><span class="n">mod</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
    <span class="n">port_names</span> <span class="o">=</span> <span class="p">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">ports</span><span class="p">}</span>
    <span class="n">nets</span> <span class="o">=</span> <span class="p">[</span><span class="n">n</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">nets_raw</span> <span class="k">if</span> <span class="n">n</span><span class="p">.</span><span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">port_names</span><span class="p">]</span>

    <span class="c1"># instances
</span>    <span class="n">instances</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Instance</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">il</span> <span class="ow">in</span> <span class="nf">iter_instancelists</span><span class="p">(</span><span class="n">mod</span><span class="p">):</span>
        <span class="n">submod</span> <span class="o">=</span> <span class="n">il</span><span class="p">.</span><span class="n">module</span>

        <span class="n">shared_param_ovrs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Parameter</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">il</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramlist</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">paramlist</span><span class="p">.</span><span class="n">params</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">paramname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">value_node</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">shared_param_ovrs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Parameter</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
                    <span class="n">value_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">value_node</span><span class="p">),</span>
                    <span class="n">value</span><span class="o">=</span><span class="nf">eval_expr</span><span class="p">(</span><span class="n">value_node</span><span class="p">,</span> <span class="n">env</span><span class="p">)</span>
                <span class="p">))</span>

        <span class="k">for</span> <span class="n">inst</span> <span class="ow">in</span> <span class="n">il</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
            <span class="n">conns</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Connection</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">portargs</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">inst</span><span class="p">,</span> <span class="sh">"</span><span class="s">portlist</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
            <span class="n">positional</span> <span class="o">=</span> <span class="nf">any</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">portname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">in</span> <span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">portargs</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">positional</span><span class="p">:</span>
                <span class="n">lib_ports</span> <span class="o">=</span> <span class="n">modlib_ports</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">submod</span><span class="p">,</span> <span class="p">[])</span>
                <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">pa</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">portargs</span><span class="p">):</span>
                    <span class="n">pname</span> <span class="o">=</span> <span class="n">lib_ports</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">lib_ports</span><span class="p">)</span> <span class="k">else</span> <span class="sa">f</span><span class="sh">"</span><span class="s">__pos</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">pa</span><span class="p">,</span> <span class="sh">"</span><span class="s">argname</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">))))</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">pa</span> <span class="ow">in</span> <span class="n">portargs</span><span class="p">:</span>
                    <span class="n">conns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Connection</span><span class="p">(</span><span class="n">port</span><span class="o">=</span><span class="n">pa</span><span class="p">.</span><span class="n">portname</span><span class="p">,</span> <span class="n">expr_str</span><span class="o">=</span><span class="nf">to_str</span><span class="p">(</span><span class="n">pa</span><span class="p">.</span><span class="n">argname</span><span class="p">)))</span>

            <span class="n">instances</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Instance</span><span class="p">(</span>
                <span class="n">inst</span><span class="o">=</span><span class="n">inst</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">module</span><span class="o">=</span><span class="n">submod</span><span class="p">,</span>
                <span class="n">param_overrides</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="n">shared_param_ovrs</span><span class="p">),</span>
                <span class="n">connections</span><span class="o">=</span><span class="n">conns</span>
            <span class="p">))</span>

    <span class="k">return</span> <span class="nc">ModuleIR</span><span class="p">(</span><span class="n">parameters</span><span class="o">=</span><span class="n">params</span><span class="p">,</span> <span class="n">ports</span><span class="o">=</span><span class="n">ports</span><span class="p">,</span> <span class="n">nets</span><span class="o">=</span><span class="n">nets</span><span class="p">,</span> <span class="n">instances</span><span class="o">=</span><span class="n">instances</span><span class="p">)</span>

<span class="c1"># -------------------- Public API --------------------
</span>
<span class="k">def</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">DesignIR</span><span class="p">:</span>
    <span class="n">ast</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">parse</span><span class="p">(</span><span class="n">files</span><span class="p">)</span>
    <span class="n">mods</span> <span class="o">=</span> <span class="nf">collect_modules</span><span class="p">(</span><span class="n">ast</span><span class="p">)</span>
    <span class="n">modlib_ports</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="nf">ordered_port_names</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
    <span class="n">design</span> <span class="o">=</span> <span class="nc">DesignIR</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">mods</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">design</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nf">normalize_module</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">modlib_ports</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">design</span>

<span class="c1"># CLI (optional)
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">argparse</span><span class="p">,</span> <span class="n">sys</span>
    <span class="n">ap</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">verilog</span><span class="sh">"</span><span class="p">,</span> <span class="n">nargs</span><span class="o">=</span><span class="sh">"</span><span class="s">+</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Verilog sources</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">ap</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">-o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">--out</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Dump as JSON (for debug)</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">ap</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>
    <span class="n">ir</span> <span class="o">=</span> <span class="nf">convert_to_design_ir</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">verilog</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">out</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">out</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">ir</span><span class="p">.</span><span class="nf">to_json</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Pretty print summary
</span>        <span class="k">for</span> <span class="n">mname</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">ir</span><span class="p">.</span><span class="n">modules</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[module] </span><span class="si">{</span><span class="n">mname</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  port[</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">index</span><span class="si">}</span><span class="s">] </span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="ow">and</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span><span class="p">.</span><span class="n">value</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">None</span><span class="sh">'</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> [</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">msb_str</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">lsb_str</span><span class="si">}</span><span class="s">] -&gt; width=</span><span class="si">{</span><span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">nets</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  net </span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">kind</span><span class="p">.</span><span class="n">value</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> [</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">msb_str</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">lsb_str</span><span class="si">}</span><span class="s">] -&gt; width=</span><span class="si">{</span><span class="n">n</span><span class="p">.</span><span class="n">width</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">  inst </span><span class="si">{</span><span class="n">i</span><span class="p">.</span><span class="n">inst</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">i</span><span class="p">.</span><span class="n">module</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">i</span><span class="p">.</span><span class="n">connections</span><span class="p">:</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">    .</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">port</span><span class="si">}</span><span class="s">(</span><span class="si">{</span><span class="n">c</span><span class="p">.</span><span class="n">expr_str</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="5-사용-예시-step-by-step">5) 사용 예시 (Step-by-step)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python vnorm_classes.py top.v            <span class="c"># 요약 출력</span>
python vnorm_classes.py top.v <span class="nt">-o</span> ir.json <span class="c"># 디버그용 JSON 덤프(옵션)</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 라이브러리처럼 사용
</span><span class="kn">from</span> <span class="n">vnorm_classes</span> <span class="kn">import</span> <span class="n">convert_to_design_ir</span><span class="p">,</span> <span class="n">Direction</span>

<span class="n">ir</span> <span class="o">=</span> <span class="nf">convert_to_design_ir</span><span class="p">([</span><span class="sh">"</span><span class="s">top.v</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">child.v</span><span class="sh">"</span><span class="p">])</span>
<span class="n">top</span> <span class="o">=</span> <span class="n">ir</span><span class="p">.</span><span class="n">modules</span><span class="p">[</span><span class="sh">"</span><span class="s">top</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># 포트 순회
</span><span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">top</span><span class="p">.</span><span class="n">ports</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span> <span class="ow">and</span> <span class="n">p</span><span class="p">.</span><span class="nb">dir</span><span class="p">.</span><span class="n">value</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">width</span><span class="p">)</span>

<span class="c1"># 인스턴스/연결 순회
</span><span class="k">for</span> <span class="n">inst</span> <span class="ow">in</span> <span class="n">top</span><span class="p">.</span><span class="n">instances</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">inst</span><span class="sh">"</span><span class="p">,</span> <span class="n">inst</span><span class="p">.</span><span class="n">inst</span><span class="p">,</span> <span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="p">,</span> <span class="n">inst</span><span class="p">.</span><span class="n">module</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inst</span><span class="p">.</span><span class="n">connections</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">  </span><span class="sh">"</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">port</span><span class="p">,</span> <span class="sh">"</span><span class="s">=&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">expr_str</span><span class="p">)</span>

<span class="c1"># 필요 시 JSON 직렬화도 가능 (테스트/로깅용)
</span><span class="nf">print</span><span class="p">(</span><span class="n">ir</span><span class="p">.</span><span class="nf">to_json</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="6-주의확장-step-by-step">6) 주의/확장 (Step-by-step)</h1>

<ul>
  <li>
    <p><strong>표현식 평가 실패</strong> : <code class="language-plaintext highlighter-rouge">value/width/msb/lsb</code>는 <code class="language-plaintext highlighter-rouge">None</code>이 될 수 있음. 원문은 <code class="language-plaintext highlighter-rouge">*_str</code>에 보존.</p>
  </li>
  <li>
    <p><strong>포지셔널 연결</strong> : 라이브러리에 해당 서브모듈이 없으면 <code class="language-plaintext highlighter-rouge">__pos0</code>처럼 보존.</p>
  </li>
  <li>
    <p><strong>SystemVerilog 확장</strong> : <code class="language-plaintext highlighter-rouge">logic</code>, packed/unpacked, interface 포트 등은 별 레이어로 확장 추천.</p>
  </li>
  <li>
    <p><strong>위치 정보</strong> : 필요하면 <code class="language-plaintext highlighter-rouge">lineno/coord</code>를 dataclass에 추가 가능.</p>
  </li>
  <li>
    <p><strong>검증</strong> : 큰 설계에서 스키마 보장 원하면 <code class="language-plaintext highlighter-rouge">pydantic</code>으로 교체 가능.</p>
  </li>
</ul>

<p>원하는 대로 <strong>직접 탐색 가능한 Python 클래스 IR</strong> 로 변환되도록 구성해 두었어.<br />
원하면 <code class="language-plaintext highlighter-rouge">Connection</code>에 좌표/소스파일 정보나, <code class="language-plaintext highlighter-rouge">ModuleIR</code>에 빠른 인덱스(예: <code class="language-plaintext highlighter-rouge">port_dict</code>)를 추가해주는 최적화 버전도 바로 만들어줄게.</p>

<p class="chat--user">

IR이 뭐야

</p>

<p>좋은 질문! <strong>IR(Intermediate Representation, 중간 표현)</strong>은 <em>소스 코드(또는 설계)를 한층 표준화된 형태로 담아두는 중간 단계의 데이터 구조</em> 예요. 파서가 만든 “문법 그대로”의 트리(AST)와, 그걸 써서 분석·변환·코드생성 같은 후처리 사이에 놓입니다.</p>

<p>아래처럼 <strong>차근차근</strong> 이해하면 편해요:</p>

<ol>
  <li>
    <p><strong>정의</strong></p>

    <ul>
      <li>IR = 분석·최적화·변환을 하기 쉽도록 만든 <strong>표준화된 내부 데이터 모델</strong>.</li>
    </ul>
  </li>
  <li>
    <p><strong>왜 필요한가</strong></p>

    <ul>
      <li>
        <p>언어 문법 차이/스타일(예: Verilog ANSI vs Non-ANSI 포트 선언)을 <strong>한 가지 규칙</strong> 으로 통일.</p>
      </li>
      <li>
        <p><strong>트래버스(순회) 쉬움</strong> : 필요한 정보가 같은 자리/형태에 있음.</p>
      </li>
      <li>
        <p><strong>모듈성</strong> : 프런트엔드(AST)와 백엔드(분석/생성)를 느슨하게 결합.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>AST와의 차이</strong></p>

    <ul>
      <li>
        <p><strong>AST</strong> : 원문 문법을 거의 그대로 반영(케이스가 많고 예외 처리 필요).</p>
      </li>
      <li>
        <p><strong>IR</strong> : 의미 중심으로 <strong>정규화/정리</strong>(예: 포지셔널 인스턴스 → 네임드로 변환, 폭 미지정→1비트로 통일, 상수 가능하면 평가).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>일반적인 IR의 형태</strong></p>

    <ul>
      <li>
        <p>컴파일러: SSA, 3-address code, CFG/DFG 등</p>
      </li>
      <li>
        <p>하드웨어: <strong>넷리스트-유사 구조</strong> , 파라미터 평가 결과, 모듈/인스턴스/연결 관계 등</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>당신의 프로젝트에서의 IR</strong></p>

    <ul>
      <li>
        <p>우리가 설계한 <strong>Python dataclass IR</strong> 이 곧 IR:</p>

        <ul>
          <li>
            <p><code class="language-plaintext highlighter-rouge">ModuleIR</code> 안에 <code class="language-plaintext highlighter-rouge">ports</code>, <code class="language-plaintext highlighter-rouge">nets</code>, <code class="language-plaintext highlighter-rouge">instances</code>, <code class="language-plaintext highlighter-rouge">parameters</code></p>
          </li>
          <li>
            <p>포트 방향/폭, 내부 넷 폭, 인스턴스의 포트 매핑을 <strong>일관된 스키마</strong> 로 제공</p>
          </li>
          <li>
            <p>가능한 범위에서 <strong>정수 평가</strong>(<code class="language-plaintext highlighter-rouge">width</code>, <code class="language-plaintext highlighter-rouge">msb/lsb</code>) 적용, 실패해도 원문(<code class="language-plaintext highlighter-rouge">*_str</code>) 보존</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>얻는 이점</strong></p>

    <ul>
      <li>
        <p>이후 단계(예: 연결 검사, 자동 배선, 문서화, 코드 생성, 시각화)를 <strong>예외처리 거의 없이</strong> 구현 가능.</p>
      </li>
      <li>
        <p>도구 간 <strong>재사용</strong> ·확장 용이.</p>
      </li>
    </ul>
  </li>
</ol>

<p>한 줄 요약: <strong>IR은 “다루기 쉬운 표준형 설계 스냅샷”</strong>이고, 지금 만들고 있는 Python 클래스들이 바로 그 IR이에요.</p>]]></content><author><name>hvppyarchive</name></author><category term="verilog" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">OpenWebUI 셋업 방법</title><link href="https://hvppyarchive.github.io/llm/openwebui-serve/" rel="alternate" type="text/html" title="OpenWebUI 셋업 방법" /><published>2025-08-12T19:21:35+09:00</published><updated>2025-08-12T19:21:35+09:00</updated><id>https://hvppyarchive.github.io/llm/openwebui-serve</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/openwebui-serve/"><![CDATA[<p class="chat--user">

endpoint 주소들을 이미 알고 있을 때 개인용 openwebui 셋업 하는 법 알려줘

</p>

<p>좋아요. “엔드포인트 주소는 이미 알고 있다”는 전제로, <strong>빠르게 개인용 Open WebUI</strong> 를 띄우고 각종(OpenAI·Ollama·vLLM·OpenRouter 등) <strong>커스텀 엔드포인트를 붙이는 최소 셋업</strong> 을 step‑by‑step으로 정리해드릴게요.</p>

<hr />

<h1 id="1-설치-방식-고르기-docker-추천">1) 설치 방식 고르기 (Docker 추천)</h1>

<p>가장 간단한 건 Docker입니다. Open WebUI 공식 퀵스타트도 Docker를 권장해요. <a href="https://docs.openwebui.com/getting-started/quick-start/?utm_source=chatgpt.com">Open WebUI</a></p>

<h3 id="a-docker-compose-권장">A. Docker Compose (권장)</h3>

<p>프로젝트 폴더에서 아래 파일을 저장하세요: <code class="language-plaintext highlighter-rouge">docker-compose.yml</code></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">services</span><span class="pi">:</span>
  <span class="na">openwebui</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">ghcr.io/open-webui/open-webui:main</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">openwebui</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3000:8080"</span>          <span class="c1"># 브라우저 접속은 http://localhost:3000</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./openwebui-data:/app/backend/data</span>   <span class="c1"># 채팅/설정 영속화</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="c1"># 필요 시 기본값만으로 시작하고, 이후 UI에서 세팅하는 것을 권장</span>
      <span class="c1"># 최초 실행 후 일부 항목은 'PersistentConfig'로 내부에 저장됩니다.</span>
      <span class="c1"># (아래 5) 참고)</span>
      <span class="na">WEBUI_URL</span><span class="pi">:</span> <span class="s2">"</span><span class="s">http://localhost:3000"</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
</code></pre></div></div>

<p>실행:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker compose up <span class="nt">-d</span>
</code></pre></div></div>

<h3 id="b-단일-명령으로-실행docker-run">B. 단일 명령으로 실행(docker run)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">--name</span> openwebui <span class="se">\</span>
  <span class="nt">-p</span> 3000:8080 <span class="se">\</span>
  <span class="nt">-v</span> <span class="si">$(</span><span class="nb">pwd</span><span class="si">)</span>/openwebui-data:/app/backend/data <span class="se">\</span>
  ghcr.io/open-webui/open-webui:main
</code></pre></div></div>

<p>공식 퀵스타트의 기본 흐름과 동일합니다. <a href="https://docs.openwebui.com/getting-started/quick-start/?utm_source=chatgpt.com">Open WebUI</a></p>

<hr />

<h1 id="2-최초-접속">2) 최초 접속</h1>

<p>브라우저에서 <code class="language-plaintext highlighter-rouge">http://localhost:3000</code>으로 들어가세요. 이후 계정/관리자 생성 절차는 기본 UI 흐름을 따릅니다(로그인/회원가입 토글 등은 환경변수로 제어 가능). 관련 일반/보안 변수는 “Environment Variable Configuration” 문서에 정리돼 있습니다. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>

<hr />

<h1 id="3-모델-제공자provider-추가--엔드포인트-붙이기">3) 모델 제공자(Provider) 추가 → “엔드포인트 붙이기”</h1>

<p>Open WebUI는 <strong>여러 개의 OpenAI‑호환/로컬 엔진 엔드포인트를 동시에 등록</strong> 할 수 있습니다.</p>

<h3 id="a-openai호환예-openai-openrouter-vllm-lm-studio-등">A. OpenAI‑호환(예: OpenAI, OpenRouter, vLLM, LM Studio 등)</h3>

<ol>
  <li>
    <p><strong>Settings → Models → Providers</strong> 로 이동</p>
  </li>
  <li>
    <p><strong>OpenAI Compatible</strong> 유형 추가</p>
  </li>
  <li>
    <p><strong>Base URL</strong>(이미 알고 계신 엔드포인트)과 <strong>API Key</strong> 입력 → 저장<br />
공식 “Starting With OpenAI” 가이드가 이 경로를 정확히 안내합니다. <a href="https://docs.openwebui.com/getting-started/quick-start/starting-with-openai/?utm_source=chatgpt.com">Open WebUI</a></p>
  </li>
</ol>

<blockquote>
  <p>팁: vLLM/LM Studio처럼 OpenAI‑호환 서버는 보통 <code class="language-plaintext highlighter-rouge">http(s)://HOST:PORT/v1</code> 형태의 Base URL을 씁니다. 모델 이름은 해당 서버에서 노출되는 이름 그대로 적어야 목록에 뜹니다(모델 리스트 캐시 TTL도 조정 가능). <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
</blockquote>

<h3 id="b-ollama로컬-사용-시">B. Ollama(로컬) 사용 시</h3>

<p>방법 2가지 중 편한 쪽으로:</p>

<ul>
  <li>
    <p><strong>UI에서</strong> Provider로 “Ollama” 추가 후 <strong>Base URL</strong>(예: <code class="language-plaintext highlighter-rouge">http://&lt;서버IP&gt;:11434</code>) 지정</p>
  </li>
  <li>
    <p><strong>환경변수로</strong> 미리 넘기기: <code class="language-plaintext highlighter-rouge">OLLAMA_BASE_URL=http://&lt;서버IP&gt;:11434</code><br />
공식 Ollama 연동 가이드 참조. <a href="https://docs.openwebui.com/getting-started/quick-start/starting-with-ollama/?utm_source=chatgpt.com">Open WebUI</a></p>
  </li>
</ul>

<blockquote>
  <p>주의: Docker로 분리 배치했다면 <code class="language-plaintext highlighter-rouge">127.0.0.1</code> 대신 <strong>컨테이너에서 접근 가능한 주소</strong>(예: 브리지 네트워크의 서비스명 또는 호스트 IP)를 써야 합니다. 모델 리스트 타임아웃/캐시는 <code class="language-plaintext highlighter-rouge">AIOHTTP_CLIENT_TIMEOUT_*</code>, <code class="language-plaintext highlighter-rouge">MODELS_CACHE_TTL</code>로 조절 가능합니다. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
</blockquote>

<hr />

<h1 id="4-선택-인증싱글유저도메인-설정">4) (선택) 인증/싱글유저/도메인 설정</h1>

<ul>
  <li>
    <p><strong>WEBUI_URL</strong> : OAuth/SSO 등을 쓸 계획이면 <strong>도메인으로 미리</strong> 지정하세요(중요). <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
  </li>
  <li>
    <p>회원가입/로그인 폼 표시, 기본 역할 등은 <code class="language-plaintext highlighter-rouge">ENABLE_SIGNUP</code>, <code class="language-plaintext highlighter-rouge">ENABLE_LOGIN_FORM</code>, <code class="language-plaintext highlighter-rouge">DEFAULT_USER_ROLE</code> 등으로 제어합니다. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
  </li>
</ul>

<hr />

<h1 id="5-환경변수와-persistentconfig-동작-이해중요">5) 환경변수와 “PersistentConfig” 동작 이해(중요)</h1>

<p>Open WebUI는 <strong>최초 기동 시점</strong> 에 일부 설정(‘PersistentConfig’ 표시된 항목)을 <strong>내부 DB에 영구 저장</strong> 합니다. 그 뒤에는 같은 환경변수를 바꿔도 내부 저장값이 우선됩니다. 필요하면 <code class="language-plaintext highlighter-rouge">ENABLE_PERSISTENT_CONFIG=False</code>로 비활성화하거나, <strong>관리자 UI에서 값을 변경</strong> 하세요. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>

<hr />

<h1 id="6-선택-외부-노출https-traefik-예시">6) (선택) 외부 노출/HTTPS (Traefik 예시)</h1>

<p>여러 서비스와 함께 쓰거나 Let’s Encrypt로 자동 HTTPS를 원하면 Traefik을 리버스 프록시로 두면 편합니다. Compose 예제와 기본 구성 흐름은 Traefik 문서에 잘 정리돼 있어요. <a href="https://doc.traefik.io/traefik/user-guides/docker-compose/basic-example/?utm_source=chatgpt.com">doc.traefik.io+1</a></p>

<hr />

<h1 id="7-업데이트백업">7) 업데이트/백업</h1>

<ul>
  <li>
    <p><strong>데이터 경로</strong> : <code class="language-plaintext highlighter-rouge">./openwebui-data</code> 볼륨에 채팅/설정이 저장됩니다(Compose 예제 기준).</p>
  </li>
  <li>
    <p>업데이트는 이미지 재풀/재시작으로 충분합니다. 설정 항목 대부분은 위 <strong>PersistentConfig 규칙</strong> 을 따릅니다. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
  </li>
</ul>

<hr />

<h2 id="자주-막히는-포인트짧게">자주 막히는 포인트(짧게)</h2>

<ul>
  <li>
    <p><strong>모델이 안 보임</strong> : Base URL/키가 맞는지, 컨테이너 간 네트워크 경로가 맞는지 확인. 모델리스트 캐시/타임아웃 조정. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
  </li>
  <li>
    <p><strong>로컬 Ollama 연결</strong> : Docker 분리 배치 시 <code class="language-plaintext highlighter-rouge">localhost</code> 대신 <strong>호스트 IP</strong> 또는 <strong>도커 네트워크의 서비스명</strong> 사용. <a href="https://docs.openwebui.com/getting-started/quick-start/starting-with-ollama/?utm_source=chatgpt.com">Open WebUI</a></p>
  </li>
</ul>

<hr />

<p>필요하시면 <strong>현재 가지고 계신 엔드포인트(Base URL/키/모델명) 조합</strong> 에 맞춰 <code class="language-plaintext highlighter-rouge">docker-compose.yml</code>을 바로 맞춤 생성해 드릴게요.</p>

<p class="chat--user">

pip 설치 방식으로 가이드해줘

</p>

<p>좋습니다. pip 기반으로 Open WebUI를 설치하고, 이미 알고 계신 엔드포인트를 붙이는 방법을 단계별로 정리해드릴게요.</p>

<hr />

<h2 id="1-python-환경-준비">1) Python 환경 준비</h2>

<ul>
  <li><strong>Python 3.10 이상</strong> 이 필요합니다. (venv 권장)</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv .venv
<span class="nb">source</span> .venv/bin/activate
pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip
</code></pre></div></div>

<hr />

<h2 id="2-open-webui-설치">2) Open WebUI 설치</h2>

<p>공식 저장소에서 PyPI 배포 버전을 설치합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>open-webui
</code></pre></div></div>

<p>설치 후, CLI 명령어 <code class="language-plaintext highlighter-rouge">open-webui</code>가 등록됩니다.</p>

<hr />

<h2 id="3-실행">3) 실행</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>open-webui serve
</code></pre></div></div>

<p>기본적으로 <code class="language-plaintext highlighter-rouge">http://127.0.0.1:8080</code>에서 실행됩니다.<br />
원한다면 포트 변경:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>open-webui serve <span class="nt">--port</span> 3000
</code></pre></div></div>

<hr />

<h2 id="4-최초-접속--관리자-계정-생성">4) 최초 접속 &amp; 관리자 계정 생성</h2>

<p>브라우저에서 <code class="language-plaintext highlighter-rouge">http://localhost:3000</code> → 첫 로그인 시 관리자 계정을 만듭니다.</p>

<hr />

<h2 id="5-엔드포인트-등록-openai-호환--ollama-등">5) 엔드포인트 등록 (OpenAI 호환 / Ollama 등)</h2>

<h3 id="a-ui에서-설정">A. UI에서 설정</h3>

<ol>
  <li>
    <p><strong>Settings → Models → Providers</strong></p>
  </li>
  <li>
    <p><strong>Add Provider</strong> → "OpenAI Compatible" 선택</p>
  </li>
  <li>
    <p><strong>Base URL</strong> : 알고 계신 엔드포인트 주소 입력</p>
  </li>
  <li>
    <p><strong>API Key</strong> : 해당 서비스의 키 입력</p>
  </li>
  <li>
    <p>저장 후 모델 목록을 불러와 선택</p>
  </li>
</ol>

<blockquote>
  <p>vLLM/LM Studio의 경우 Base URL이 <code class="language-plaintext highlighter-rouge">http://HOST:PORT/v1</code> 형식인 경우가 많습니다.</p>
</blockquote>

<hr />

<h3 id="b-환경변수로-미리-세팅-선택">B. 환경변수로 미리 세팅 (선택)</h3>

<p>실행 전에 아래 예시처럼 환경변수를 설정하면 UI에서 자동으로 반영됩니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OPENAI_API_BASE_URL</span><span class="o">=</span><span class="s2">"https://your-endpoint.example.com/v1"</span>
<span class="nb">export </span><span class="nv">OPENAI_API_KEY</span><span class="o">=</span><span class="s2">"sk-xxxxxxxxxxxxxxxx"</span>
open-webui serve
</code></pre></div></div>

<p>Ollama 사용 시:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OLLAMA_BASE_URL</span><span class="o">=</span><span class="s2">"http://localhost:11434"</span>
</code></pre></div></div>

<hr />

<h2 id="6-데이터-영속화">6) 데이터 영속화</h2>

<p>pip 실행은 기본적으로 현재 디렉터리의 <code class="language-plaintext highlighter-rouge">.open-webui</code> 폴더에 데이터(채팅 기록, 설정)를 저장합니다.</p>

<ul>
  <li>다른 위치에 저장하려면:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>open-webui serve <span class="nt">--data-dir</span> /path/to/data
</code></pre></div></div>

<hr />

<h2 id="7-선택-https--외부-접근">7) (선택) HTTPS &amp; 외부 접근</h2>

<ul>
  <li>
    <p>로컬에서만 쓰는 경우 무관하지만, 외부 접근 시 <strong>리버스 프록시(Nginx/Traefik)</strong> + HTTPS 적용을 권장합니다.</p>
  </li>
  <li>
    <p>도메인 기반 접근 시 <code class="language-plaintext highlighter-rouge">WEBUI_URL</code> 환경변수를 세팅하면 OAuth/SSO 연동 시 편합니다.</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">WEBUI_URL</span><span class="o">=</span><span class="s2">"https://chat.example.com"</span>
</code></pre></div></div>

<hr />

<h2 id="8-업데이트">8) 업데이트</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">--upgrade</span> open-webui
</code></pre></div></div>

<hr />

<p>원하시면 제가 <strong>pip 설치용 + 환경변수 엔드포인트 자동 세팅이 포함된 실행 스크립트</strong> 를 만들어 드릴 수 있습니다.<br />
그렇게 하면 매번 UI에서 입력할 필요 없이 엔드포인트와 키가 자동 등록된 상태로 Open WebUI가 실행됩니다.</p>

<p class="chat--user">

Your system has an unsupported version of sqlite3. Chroma requires sqlite3 &gt;= 3.35.0

</p>

<p>이 오류는 Open WebUI가 내부에서 사용하는 <strong>Chroma DB</strong> 가 최신 SQLite 기능(3.35.0 이상)을 요구하는데,<br />
현재 OS에 설치된 Python이 <strong>너무 구버전 SQLite</strong> 를 내장하고 있어서 발생하는 문제입니다.</p>

<p><code class="language-plaintext highlighter-rouge">pip install</code>로 설치했을 때 Python은 <strong>내장된 sqlite3 라이브러리</strong> 를 사용하므로, OS에 sqlite3을 새로 깔아도 Python이 그걸 자동으로 쓰지 않습니다.<br />
해결 방법은 크게 두 가지가 있습니다.</p>

<hr />

<h2 id="1-python-자체를-최신-빌드로-교체-권장">1) Python 자체를 최신 빌드로 교체 (권장)</h2>

<p>가장 깔끔한 방법입니다. Python 3.10+ 최신 빌드는 sqlite3 3.35.0 이상을 포함합니다.</p>

<p><strong>Ubuntu/Debian 예시</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>python3.11 python3.11-venv python3.11-dev
</code></pre></div></div>

<p>그리고 새 venv에서 다시 설치:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3.11 <span class="nt">-m</span> venv .venv
<span class="nb">source</span> .venv/bin/activate
pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip
pip <span class="nb">install </span>open-webui
</code></pre></div></div>

<p><strong>macOS(Homebrew) 예시</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>python@3.11
brew <span class="nb">link </span>python@3.11 <span class="nt">--force</span>
</code></pre></div></div>

<hr />

<h2 id="2-os에-최신-sqlite3-설치-후-python-재빌드">2) OS에 최신 sqlite3 설치 후 Python 재빌드</h2>

<p>만약 Python 버전을 그대로 쓰고 싶다면:</p>

<ol>
  <li>
    <p>최신 sqlite3 설치</p>

    <ul>
      <li>Ubuntu/Debian:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>sqlite3 libsqlite3-dev
</code></pre></div>        </div>
      </li>
      <li>macOS:
        <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>sqlite
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>Python을 재빌드하여 새 sqlite3을 링크<br />
(소스 빌드 시 <code class="language-plaintext highlighter-rouge">libsqlite3-dev</code>를 설치한 상태여야 함)</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv <span class="nb">install </span>3.11.9
pyenv global 3.11.9
</code></pre></div>    </div>
  </li>
</ol>

<hr />

<h2 id="3-conda-환경을-이용-간단-대안">3) conda 환경을 이용 (간단 대안)</h2>

<p>conda는 최신 sqlite를 자동 포함하므로, 설치가 간단합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> openwebui <span class="nv">python</span><span class="o">=</span>3.11
conda activate openwebui
pip <span class="nb">install </span>open-webui
</code></pre></div></div>

<hr />

<p>💡 <strong>추천 순서</strong></p>

<ol>
  <li>
    <p>가능하면 Python을 최신으로 갈아타세요(방법 1).</p>
  </li>
  <li>
    <p>OS-level sqlite만 업데이트해선 해결 안 되니, Python 재설치/재빌드가 필요합니다.</p>
  </li>
  <li>
    <p>복잡하면 conda로 환경 만드는 게 제일 빠릅니다.</p>
  </li>
</ol>

<hr />

<p>원하시면 제가 <strong>현재 OS/Python 버전과 sqlite 버전 확인 명령</strong> 을 드려서<br />
지금 환경에서 어떤 경로가 제일 빠른지 바로 판단해드릴 수 있습니다.<br />
그걸 해드릴까요?</p>

<p class="chat--user">

현재 설치된 sqlite3 버전 보는 법 알려줘. 내가 설치한 파이썬이 3.11.12 라서 상당히 최신 버전인데. venv로 가상환경 만들어서 하고 있는데 이게 이슈가 될 수도 있나?

</p>

<p>네, Python 3.11.12면 상당히 최신이지만,<br />
<strong>venv 환경 안에서도 Python이 빌드될 때 포함된 SQLite 버전</strong> 을 그대로 쓰기 때문에,<br />
OS의 sqlite 버전과는 별개로 문제가 날 수 있습니다.</p>

<p>확인 방법은 두 가지가 있습니다.</p>

<hr />

<h2 id="1-python이-쓰는-sqlite3-버전-확인">1) Python이 쓰는 sqlite3 버전 확인</h2>

<p>가상환경 안에서 아래 명령 실행:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-c</span> <span class="s2">"import sqlite3; print(sqlite3.sqlite_version)"</span>
</code></pre></div></div>

<p>이 값이 <strong>3.35.0 이상</strong> 이어야 Chroma가 동작합니다.</p>

<hr />

<h2 id="2-os-시스템-sqlite-버전-확인-참고">2) OS 시스템 sqlite 버전 확인 (참고)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqlite3 <span class="nt">--version</span>
</code></pre></div></div>

<p>이건 OS에 설치된 <code class="language-plaintext highlighter-rouge">sqlite3</code> CLI 버전입니다.<br />
Python 내부에서 사용하는 라이브러리 버전과 다를 수 있습니다.</p>

<hr />

<p>💡 <strong>중요 포인트</strong></p>

<ul>
  <li>
    <p>venv는 <strong>현재 Python 실행 파일</strong> 과 그에 내장된 sqlite3를 그대로 복사해서 씁니다.</p>
  </li>
  <li>
    <p>따라서 Python 3.11이라도, 해당 Python이 구버전 sqlite로 빌드되었으면 venv 안에서도 그대로 구버전을 씁니다.</p>
  </li>
  <li>
    <p>해결하려면 최신 sqlite로 빌드된 Python을 쓰거나(예: pyenv, conda), 시스템 Python을 교체해야 합니다.</p>
  </li>
</ul>

<hr />

<p>원하시면 제가 <strong>현재 venv에서 동작하는 sqlite 버전 확인 후, 바로 업그레이드 방법</strong> 까지 이어서 정리해 드릴까요?<br />
그러면 바로 Chroma 오류도 해결됩니다.</p>

<p class="chat--user">

그렇네 둘 다 3.26.0 으로 되고 있어. 내가 sudo 권한도 없고 인터넷 연결도 안 된 redhat 8.x OS야. 이거에 맞춰서 sqlite3 설치하고 파이썬 3.11 버전 다시 빌드 하는 방법 차근차근 알려줘

</p>

<p>좋아요—<strong>sudo 없음 + 외부 인터넷 없음 + RHEL 8.x</strong> 환경을 전제로, <strong>사용자 홈 디렉터리</strong> 에 최신 sqlite3를 소스에서 설치하고, 그걸 링크해서 <strong>Python 3.11을 다시 빌드</strong> 하는 절차를 <strong>완전 오프라인</strong> 기준으로 차근차근 정리했습니다.<br />
(핵심은: Python이 링크하는 sqlite를 3.35.0 이상으로 교체하는 것!)</p>

<hr />

<h1 id="전체-흐름-한눈에">전체 흐름 한눈에</h1>

<ol>
  <li>
    <p>다른 네트워크 가능한 PC에서 <strong>소스 tar.gz</strong> 받아오기 → 사내망/USB로 서버에 복사</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">$HOME/opt/sqlite-&lt;버전&gt;</code>에 sqlite3 설치 (사용자 권한)</p>
  </li>
  <li>
    <p>그 sqlite를 가리키도록 <strong>환경변수(헤더/라이브러리 경로)</strong> 잡고 Python 3.11.12를 <strong>재빌드 + 사용자 경로에 설치</strong></p>
  </li>
  <li>
    <p>새 Python으로 venv 다시 만들고, <code class="language-plaintext highlighter-rouge">python -c "import sqlite3; print(sqlite3.sqlite_version)"</code>가 <strong>3.35+</strong>인지 확인</p>
  </li>
</ol>

<hr />

<h1 id="0-준비-디렉터리변수">0) 준비: 디렉터리/변수</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 홈 디렉터리 아래에 설치 경로를 잡습니다.</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/src <span class="nv">$HOME</span>/opt
<span class="c"># 아래 버전은 예시입니다. (3.45.3 등 3.35.0 이상이면 OK)</span>
<span class="nb">export </span><span class="nv">SQLITE_VER</span><span class="o">=</span>3.45.4
<span class="nb">export </span><span class="nv">PY_VER</span><span class="o">=</span>3.11.12

<span class="c"># 설치 prefix</span>
<span class="nb">export </span><span class="nv">SQLITE_PREFIX</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/sqlite-</span><span class="nv">$SQLITE_VER</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">PY_PREFIX</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/python-</span><span class="nv">$PY_VER</span><span class="s2">"</span>
</code></pre></div></div>

<hr />

<h1 id="1-오프라인-파일-준비-다른-pc에서-다운로드">1) 오프라인 파일 준비 (다른 PC에서 다운로드)</h1>

<p>외부 인터넷 가능한 PC에서 아래 두 개(이상)를 받아 USB/사내망으로 <strong>서버의<code class="language-plaintext highlighter-rouge">$HOME/src</code></strong> 로 옮깁니다.</p>

<ul>
  <li>
    <p><strong>SQLite</strong> : <code class="language-plaintext highlighter-rouge">sqlite-autoconf-&lt;X&gt;.tar.gz</code></p>

    <ul>
      <li>
        <p>파일명 숫자 <code class="language-plaintext highlighter-rouge">&lt;X&gt;</code>는 버전 넘버를 붙인 값입니다. 예: 3.45.4 → <code class="language-plaintext highlighter-rouge">3450400</code></p>
      </li>
      <li>
        <p>예시 파일명: <code class="language-plaintext highlighter-rouge">sqlite-autoconf-3450400.tar.gz</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Python 3.11.12</strong> : <code class="language-plaintext highlighter-rouge">Python-3.11.12.tgz</code></p>
  </li>
</ul>

<blockquote>
  <p>(선택) pip를 쓸 계획이면, 나중에 필요한 패키지들 <strong>whl/tar.gz</strong> 도 같이 받아오세요. 오프라인 설치 시 <code class="language-plaintext highlighter-rouge">pip install --no-index --find-links</code>로 설치합니다.</p>
</blockquote>

<p>서버에 파일이 도착하면:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-1</span> <span class="nv">$HOME</span>/src
<span class="c"># sqlite-autoconf-3450400.tar.gz</span>
<span class="c"># Python-3.11.12.tgz</span>
</code></pre></div></div>

<hr />

<h1 id="2-sqlite3-335-사용자-디렉터리에-빌드설치">2) sqlite3 (&gt;=3.35) 사용자 디렉터리에 빌드/설치</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$HOME</span>/src
<span class="nb">tar </span>xf sqlite-autoconf-3450400.tar.gz
<span class="nb">cd </span>sqlite-autoconf-3450400

<span class="c"># fPIC으로 빌드, prefix는 사용자 디렉터리</span>
<span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">"-O2 -fPIC"</span> ./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">"</span>
make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>

<span class="c"># 설치 확인</span>
<span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/bin/sqlite3"</span> <span class="nt">--version</span>
<span class="c"># 3.45.4 ... 같이 3.35.0 이상이 출력되어야 합니다.</span>
</code></pre></div></div>

<hr />

<h1 id="3-python-31112를-새-sqlite에-링크해서-재빌드설치">3) Python 3.11.12를 새 sqlite에 링크해서 재빌드/설치</h1>

<p>Python이 새 sqlite 헤더/라이브러리를 보도록 <strong>컴파일 환경변수</strong> 를 줍니다. 또한 실행 시 라이브러리 탐색이 되도록 <strong>rpath</strong> 를 심어두면 편합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$HOME</span>/src
<span class="nb">tar </span>xf Python-3.11.12.tgz
<span class="nb">cd </span>Python-3.11.12

<span class="c"># 컴파일러가 새 sqlite를 찾도록 경로 지정</span>
<span class="nb">export </span><span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">"-I</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/include"</span>
<span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">"-L</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib -Wl,-rpath,</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">"</span>

<span class="c"># 최적화/ensurepip 포함하여 빌드</span>
./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PY_PREFIX</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--enable-optimizations</span> <span class="se">\</span>
  <span class="nt">--with-lto</span> <span class="se">\</span>
  <span class="nt">--with-ensurepip</span><span class="o">=</span><span class="nb">install

</span>make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>
</code></pre></div></div>

<h2 id="빌드가-끝난-뒤-경로-적용--버전-확인">빌드가 끝난 뒤 경로 적용 &amp; 버전 확인</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 새 파이썬을 PATH 앞에 두기 (쉘 프로필에 추가 권장)</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PY_PREFIX</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>

<span class="c"># 파이썬이 바라보는 sqlite 버전 확인</span>
python3 <span class="nt">-c</span> <span class="s2">"import sqlite3; print(sqlite3.sqlite_version)"</span>
<span class="c"># =&gt; 3.45.4 (또는 3.35.0 이상) 가 나와야 성공</span>
</code></pre></div></div>

<blockquote>
  <p>만약 위에서 여전히 3.26.0이 나온다면, Python이 새 sqlite를 못 찾은 것입니다.</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">CPPFLAGS/LDFLAGS/LD_LIBRARY_PATH</code>가 올바른지 점검</p>
    </li>
    <li>
      <p>아래 “문제 해결 팁”의 <strong>A. _sqlite3 모듈 강제 구성</strong> 을 참고해 모듈을 명시적으로 빌드</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="4-새-python으로-venv-다시-만들기-중요">4) 새 Python으로 venv 다시 만들기 (중요)</h1>

<p>기존 venv는 <strong>예전 파이썬 바이너리/라이브러리</strong> 를 기준으로 만들어졌기 때문에 <strong>새로 만들어야</strong> 합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># (선택) 이전 venv 비활성화</span>
deactivate 2&gt;/dev/null <span class="o">||</span> <span class="nb">true</span>

<span class="c"># 새 venv 생성</span>
python3 <span class="nt">-m</span> venv <span class="nv">$HOME</span>/venvs/openwebui
<span class="nb">source</span> <span class="nv">$HOME</span>/venvs/openwebui/bin/activate

<span class="c"># pip 자체 업그레이드 (오프라인이면 생략)</span>
pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip

<span class="c"># 최종 확인 (venv 내부에서도)</span>
python <span class="nt">-c</span> <span class="s2">"import sqlite3; print(sqlite3.sqlite_version)"</span>
<span class="c"># =&gt; 3.35.0 이상인지 재확인</span>
</code></pre></div></div>

<p>이제 이 venv에서 Open WebUI/Chroma를 쓰면 <strong>sqlite 버전 오류 없이</strong> 동작합니다.</p>

<hr />

<h1 id="5-오프라인-pip-설치-팁">5) (오프라인) pip 설치 팁</h1>

<p>외부에서 의존성들을 미리 받아 왔다면:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 오프라인 저장소 폴더(예: /path/pkgs)에 whl/tar.gz 모아둔 경우</span>
pip <span class="nb">install</span> <span class="nt">--no-index</span> <span class="nt">--find-links</span> /path/pkgs open-webui
</code></pre></div></div>

<ul>
  <li>
    <p>SSL 모듈(_ssl) 없이 빌드했다면 <strong>https 다운로드는 불가</strong> 하므로, 필요한 패키지는 <strong>사전 다운로드</strong> 가 필요합니다.</p>
  </li>
  <li>
    <p>나중에 인터넷이 가능해지면 OpenSSL 헤더/라이브러리를 사용자 영역에 빌드한 뒤, Python을 다시 빌드해 <code class="language-plaintext highlighter-rouge">_ssl</code> 모듈을 붙일 수 있습니다(옵션).</p>
  </li>
</ul>

<hr />

<h2 id="문제-해결-팁-troubleshooting">문제 해결 팁 (Troubleshooting)</h2>

<h3 id="a-_sqlite3-모듈이-not-found로-스킵되는-경우">A) <code class="language-plaintext highlighter-rouge">_sqlite3</code> 모듈이 “not found”로 스킵되는 경우</h3>

<p>Python 빌드 로그 마지막 부분에 “The necessary bits to build these optional modules were not found” 목록에 <code class="language-plaintext highlighter-rouge">_sqlite3</code>가 포함되어 있으면, SQLite 헤더/라이브러리를 못 찾은 것입니다. 가장 확실한 방법은 <strong>모듈 빌드 지시를 명시</strong> 하는 것입니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$HOME</span>/src/Python-3.11.12/Modules

<span class="c"># Setup.local 파일에 명시적으로 _sqlite3 모듈 빌드 지시 추가</span>
<span class="nb">cat</span> <span class="o">&gt;</span> Setup.local <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">EOF</span><span class="sh">'
_sqlite3 _sqlite/module.c -I</span><span class="nv">$SQLITE_PREFIX</span><span class="sh">/include -L</span><span class="nv">$SQLITE_PREFIX</span><span class="sh">/lib -lsqlite3
</span><span class="no">EOF

</span><span class="c"># 환경변수는 여전히 설정된 상태여야 함 (CPPFLAGS/LDFLAGS/LD_LIBRARY_PATH)</span>
<span class="nb">cd</span> ..
make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>
</code></pre></div></div>

<p>다시 <code class="language-plaintext highlighter-rouge">python -c "import sqlite3; print(sqlite3.sqlite_version)"</code>로 확인해 보세요.</p>

<h3 id="b-매번-ld_library_path-잡기-싫을-때">B) 매번 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> 잡기 싫을 때</h3>

<p>위에서 <code class="language-plaintext highlighter-rouge">LDFLAGS="-Wl,-rpath,$SQLITE_PREFIX/lib"</code>를 줬다면 보통은 필요 없습니다.<br />
혹시 빠뜨렸다면, 아래처럼 <strong>rpath 포함 재빌드</strong> 하거나, 셸 프로필(<code class="language-plaintext highlighter-rouge">~/.bashrc</code>)에 다음을 추가하세요.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PY_PREFIX</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="c-여러-버전-공존">C) 여러 버전 공존</h3>

<ul>
  <li>
    <p>다른 작업에 시스템 Python이 필요하면, 단순히 PATH/LD_LIBRARY_PATH를 <strong>활성화/비활성화</strong> 하여 전환하면 됩니다.</p>
  </li>
  <li>
    <p>충돌을 피하려면 항상 <code class="language-plaintext highlighter-rouge">which python</code>으로 현재 쓰는 바이너리가 어디인지 확인하세요.</p>
  </li>
</ul>

<hr />

<h2 id="최종-체크리스트">최종 체크리스트</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">$SQLITE_PREFIX/bin/sqlite3 --version</code>이 <strong>3.35+</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">python -c "import sqlite3; print(sqlite3.sqlite_version)"</code>가 <strong>3.35+</strong></p>
  </li>
  <li>
    <p>새 <strong>venv</strong> 에서 동일 결과 확인</p>
  </li>
  <li>
    <p>Open WebUI/Chroma 다시 실행 시 더 이상 <code class="language-plaintext highlighter-rouge">sqlite3 &gt;= 3.35.0</code> 에러가 나오지 않음</p>
  </li>
</ul>

<p>필요하면, 위 과정을 <strong>복붙 가능한 스크립트</strong>(버전/경로만 변수로 바꾸면 되는 형태)로 만들어 드릴게요.</p>

<p class="chat--user">

혹시 이거 말고 다른 dependency가 있을까? 미리 다 준비해서 한 번에 설치하고 싶어.

</p>

<p>좋은 질문이에요. “한 번에” 끝내려면 <strong>(A) Python 자체를 빌드할 때 필요한 네이티브 라이브러리</strong> 와 <strong>(B) Open WebUI/Chroma 파이썬 패키지 측 의존성(가능하면 휠로 미리 받아오기)</strong> 두 축으로 준비하면 됩니다. 아래를 <strong>차근차근</strong> 따라오세요.</p>

<hr />

<h1 id="a-python-311을-기능-빠짐없이-빌드하기-위한-네이티브-의존성">A) Python 3.11을 기능 빠짐없이 빌드하기 위한 네이티브 의존성</h1>

<blockquote>
  <p>목표: <code class="language-plaintext highlighter-rouge">_sqlite3</code>, <code class="language-plaintext highlighter-rouge">_ssl</code>, <code class="language-plaintext highlighter-rouge">_bz2</code>, <code class="language-plaintext highlighter-rouge">_lzma</code>, <code class="language-plaintext highlighter-rouge">_readline</code>, <code class="language-plaintext highlighter-rouge">ctypes</code> 등 <strong>표준 모듈이 빠지지 않게</strong> 하려면, 해당 C 라이브러리를 <strong>사용자 경로</strong> 에 먼저 설치하고, 그 경로를 가리키며 Python을 빌드해야 합니다. (sudo/인터넷 없음 가정)</p>
</blockquote>

<p>필수/강력권장 라이브러리:</p>

<table>
  <thead>
    <tr>
      <th>라이브러리</th>
      <th>기능(파이썬 내 모듈)</th>
      <th>없을 때 증상</th>
      <th>오프라인 준비 요령(요지)</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>OpenSSL ≥1.1.1/3.0</strong></td>
      <td><code class="language-plaintext highlighter-rouge">ssl</code>, <code class="language-plaintext highlighter-rouge">hashlib</code> 가속</td>
      <td>HTTPS 불가 → pip 다운로드/인증서 문제</td>
      <td>소스 tar.gz → <code class="language-plaintext highlighter-rouge">$HOME/opt/openssl-&lt;ver&gt;</code>에 설치 후 <code class="language-plaintext highlighter-rouge">./configure</code> 시 <code class="language-plaintext highlighter-rouge">--with-openssl</code> 또는 <code class="language-plaintext highlighter-rouge">CPPFLAGS/LDFLAGS</code>로 경로 지정</td>
    </tr>
    <tr>
      <td><strong>zlib</strong></td>
      <td><code class="language-plaintext highlighter-rouge">zlib</code></td>
      <td>압축 관련 일부 기능 제한</td>
      <td><code class="language-plaintext highlighter-rouge">zlib</code> 소스 빌드 → <code class="language-plaintext highlighter-rouge">$HOME/opt/zlib</code></td>
    </tr>
    <tr>
      <td><strong>bzip2 (libbz2)</strong></td>
      <td><code class="language-plaintext highlighter-rouge">_bz2</code></td>
      <td><code class="language-plaintext highlighter-rouge">.bz2</code> 핸들링 불가</td>
      <td><code class="language-plaintext highlighter-rouge">bzip2</code> 소스 빌드 → <code class="language-plaintext highlighter-rouge">$HOME/opt/bzip2</code></td>
    </tr>
    <tr>
      <td><strong>xz (liblzma)</strong></td>
      <td><code class="language-plaintext highlighter-rouge">_lzma</code></td>
      <td><code class="language-plaintext highlighter-rouge">.xz</code> 핸들링 불가</td>
      <td><code class="language-plaintext highlighter-rouge">xz</code>(xz-utils) 소스 빌드 → <code class="language-plaintext highlighter-rouge">$HOME/opt/xz</code></td>
    </tr>
    <tr>
      <td><strong>readline + ncurses</strong></td>
      <td><code class="language-plaintext highlighter-rouge">readline</code></td>
      <td>REPL 히스토리/라인편집 미작동</td>
      <td><code class="language-plaintext highlighter-rouge">readline</code>, <code class="language-plaintext highlighter-rouge">ncurses</code> 소스 빌드</td>
    </tr>
    <tr>
      <td><strong>libffi</strong></td>
      <td><code class="language-plaintext highlighter-rouge">_ctypes</code></td>
      <td><code class="language-plaintext highlighter-rouge">ctypes</code> 미구성</td>
      <td><code class="language-plaintext highlighter-rouge">libffi</code> 소스 빌드</td>
    </tr>
    <tr>
      <td><strong>sqlite3 ≥3.35</strong></td>
      <td><code class="language-plaintext highlighter-rouge">_sqlite3</code></td>
      <td>(이미 보신) Chroma 에러</td>
      <td>위에서 진행하신 대로 소스 빌드</td>
    </tr>
    <tr>
      <td><strong>expat</strong></td>
      <td><code class="language-plaintext highlighter-rouge">pyexpat</code></td>
      <td>XML 파싱 미동작</td>
      <td><code class="language-plaintext highlighter-rouge">expat</code> 소스 빌드</td>
    </tr>
    <tr>
      <td><strong>gdbm</strong>(선택)</td>
      <td><code class="language-plaintext highlighter-rouge">dbm.gnu</code></td>
      <td>GNU DBM 미사용</td>
      <td>필요 시만</td>
    </tr>
    <tr>
      <td><strong>uuid</strong>(libuuid, 선택)</td>
      <td><code class="language-plaintext highlighter-rouge">uuid</code>(OS 백엔드)</td>
      <td>순수 파이썬 대체</td>
      <td>선택</td>
    </tr>
  </tbody>
</table>

<h3 id="설치-순서권장">설치 순서(권장)</h3>

<ol>
  <li>
    <p>zlib → bzip2 → xz → readline/ncurses → libffi → <strong>sqlite</strong> → <strong>OpenSSL</strong> → expat</p>
  </li>
  <li>
    <p>각 라이브러리마다 <code class="language-plaintext highlighter-rouge">--prefix="$HOME/opt/&lt;name&gt;-&lt;ver&gt;"</code>로 설치</p>
  </li>
  <li>
    <p>Python 빌드 전에 아래처럼 경로를 한 번에 잡습니다:</p>
  </li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PKGROOTS</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/zlib:</span><span class="nv">$HOME</span><span class="s2">/opt/bzip2:</span><span class="nv">$HOME</span><span class="s2">/opt/xz:</span><span class="nv">$HOME</span><span class="s2">/opt/readline:</span><span class="nv">$HOME</span><span class="s2">/opt/ncurses:</span><span class="nv">$HOME</span><span class="s2">/opt/libffi:</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">:</span><span class="nv">$HOME</span><span class="s2">/opt/openssl:</span><span class="nv">$HOME</span><span class="s2">/opt/expat"</span>
<span class="nb">export </span><span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">printf</span> <span class="nt">--</span> <span class="s1">' -I%s/include'</span> <span class="k">${</span><span class="nv">PKGROOTS</span><span class="p">//</span>:/<span class="p"> </span><span class="k">}</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">printf</span> <span class="nt">--</span> <span class="s1">' -L%s/lib'</span> <span class="k">${</span><span class="nv">PKGROOTS</span><span class="p">//</span>:/<span class="p"> </span><span class="k">}</span><span class="si">)</span><span class="s2"> -Wl,-rpath,</span><span class="nv">$HOME</span><span class="s2">/opt/zlib/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/bzip2/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/xz/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/readline/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/ncurses/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/libffi/lib:</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/openssl/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/expat/lib"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/zlib/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/bzip2/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/xz/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/readline/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/ncurses/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/libffi/lib:</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/openssl/lib:</span><span class="nv">$HOME</span><span class="s2">/opt/expat/lib:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">"</span>
</code></pre></div></div>

<ol>
  <li>그런 다음 Python <code class="language-plaintext highlighter-rouge">./configure</code>:</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PY_PREFIX</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--enable-optimizations</span> <span class="nt">--with-lto</span> <span class="se">\</span>
  <span class="nt">--with-ensurepip</span><span class="o">=</span><span class="nb">install</span> <span class="se">\</span>
  <span class="nt">--with-openssl</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/openssl-&lt;ver&gt;"</span>  <span class="c"># 있으면 명시, 없으면 CPP/LDFLAGS에 의존</span>
make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> make <span class="nb">install</span>
</code></pre></div></div>

<ol>
  <li>빌드 후 확인(반드시 venv 새로 생성):<br />
<code class="language-plaintext highlighter-rouge">python -c "import sqlite3, ssl, bz2, lzma, readline, ctypes, xml.parsers.expat as e; print(sqlite3.sqlite_version, ssl.OPENSSL_VERSION)"</code></li>
</ol>

<blockquote>
  <p><strong>팁</strong> : <code class="language-plaintext highlighter-rouge">_sqlite3</code>처럼 빠지는 모듈이 있다면, 위 경로/변수 누락이 원인입니다. 필요하면 <code class="language-plaintext highlighter-rouge">Modules/Setup.local</code>에 모듈 빌드 라인(예: <code class="language-plaintext highlighter-rouge">_sqlite3 ... -lsqlite3</code>)을 <strong>명시</strong> 하고 <code class="language-plaintext highlighter-rouge">make install</code>을 다시 실행하세요.</p>
</blockquote>

<hr />

<h1 id="b-open-webui--chroma-파이썬-패키지-쪽-의존성오프라인-휠-준비">B) Open WebUI / Chroma 파이썬 패키지 쪽 의존성(오프라인 휠 준비)</h1>

<blockquote>
  <p>목표: RHEL 8.x + Python 3.11에서 <strong>빌드 없이 설치</strong> 되도록, 가능한 한 <strong>미리 컴파일된 wheel</strong>(manylinux2014_x86_64 등)을 모아 <strong>오프라인 저장소</strong>(wheelhouse)를 준비합니다. (sudo/인터넷 없음 가정)</p>
</blockquote>

<h3 id="1-핵심-패키지">1) 핵심 패키지</h3>

<ul>
  <li>
    <p><strong>open-webui</strong> (백엔드 FastAPI/uvicorn 등 포함)</p>
  </li>
  <li>
    <p><strong>chromadb</strong> (벡터DB: SQLite/duckdb + <strong>hnswlib</strong> 등)</p>
  </li>
  <li>
    <p>다음은 종속성에 자주 포함되며 <strong>컴파일이 필요한 경우</strong> 가 있는 것들:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">hnswlib</code>(C++11)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">uvloop</code>, <code class="language-plaintext highlighter-rouge">httptools</code>, <code class="language-plaintext highlighter-rouge">watchfiles</code>(C/Rust 빌드 필요 가능)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">orjson</code>(Rust) 또는 <code class="language-plaintext highlighter-rouge">ujson</code>(C)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">numpy</code>, <code class="language-plaintext highlighter-rouge">scipy</code>, <code class="language-plaintext highlighter-rouge">pandas</code> (BLAS 연동/컴파일 이슈 → <strong>반드시 wheel</strong> 로)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">pydantic</code>, <code class="language-plaintext highlighter-rouge">fastapi</code>, <code class="language-plaintext highlighter-rouge">starlette</code>, <code class="language-plaintext highlighter-rouge">uvicorn</code> 등은 보통 pure-Python이지만, <code class="language-plaintext highlighter-rouge">uvicorn[standard]</code>라면 위 네이티브 패키지를 추가로 끌어옵니다.</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="2-오프라인-다운로드사전-준비-방법">2) 오프라인 다운로드(사전 준비) 방법</h3>

<p><strong>외부 인터넷 가능한 동일/유사 리눅스(x86_64, glibc) 머신</strong> 에서:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3.11 <span class="nt">-m</span> venv dl <span class="o">&amp;&amp;</span> <span class="nb">source </span>dl/bin/activate
pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip wheel

<span class="c"># 목적지 폴더</span>
<span class="nb">mkdir</span> <span class="nt">-p</span> /tmp/wheelhouse

<span class="c"># 가장 쉬운 방법: 직접 종속성을 해석하게 맡김</span>
pip download <span class="nt">--dest</span> /tmp/wheelhouse open-webui chromadb

<span class="c"># 만약 아키텍처가 다르거나 강제로 휠만 받고 싶다면 (고급)</span>
pip download <span class="nt">--only-binary</span><span class="o">=</span>:all: <span class="se">\</span>
  <span class="nt">--platform</span> manylinux2014_x86_64 <span class="nt">--implementation</span> <span class="nb">cp</span> <span class="nt">--python-version</span> 311 <span class="se">\</span>
  <span class="nt">--dest</span> /tmp/wheelhouse open-webui chromadb
</code></pre></div></div>

<ul>
  <li>
    <p>오류가 나면, 메시지에 나온 패키지를 <strong>개별적으로 추가</strong> 해 다시 <code class="language-plaintext highlighter-rouge">pip download</code> 하세요(예: <code class="language-plaintext highlighter-rouge">numpy</code>, <code class="language-plaintext highlighter-rouge">hnswlib</code>, <code class="language-plaintext highlighter-rouge">orjson</code> 등).</p>
  </li>
  <li>
    <p><strong>Rust toolchain 없이 설치하려면</strong> 반드시 <code class="language-plaintext highlighter-rouge">orjson</code>, <code class="language-plaintext highlighter-rouge">watchfiles</code> 등 <strong>미리 빌드된 wheel</strong> 을 확보해야 합니다.</p>
  </li>
</ul>

<p>서버로 복사 후, 오프라인 설치:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">--no-index</span> <span class="nt">--find-links</span> /path/to/wheelhouse open-webui chromadb
</code></pre></div></div>

<h3 id="3-chromachromadb-관련-주의점">3) Chroma(Chromadb) 관련 주의점</h3>

<ul>
  <li>
    <p>현재 에러의 원인인 <strong>sqlite3 ≥ 3.35</strong> 는 이미 A)에서 해결.</p>
  </li>
  <li>
    <p><strong>hnswlib</strong> 휠이 없으면 소스 빌드가 시도됩니다(오프라인/컴파일러 문제로 실패하기 쉬움). <strong>반드시 휠로 가져오세요.</strong></p>
  </li>
  <li>
    <p>성능을 위해 <code class="language-plaintext highlighter-rouge">numpy</code>도 <strong>휠</strong> 을 강력 추천합니다. (소스 빌드는 BLAS/LAPACK 등 추가 지뢰가 많음)</p>
  </li>
</ul>

<hr />

<h1 id="c-도구-체인컴파일러-등">C) 도구 체인(컴파일러 등)</h1>

<ul>
  <li>
    <p><strong>필수</strong> : <code class="language-plaintext highlighter-rouge">gcc</code>, <code class="language-plaintext highlighter-rouge">g++</code>, <code class="language-plaintext highlighter-rouge">make</code>, <code class="language-plaintext highlighter-rouge">tar</code>, <code class="language-plaintext highlighter-rouge">xz</code>, <code class="language-plaintext highlighter-rouge">patch</code>, <code class="language-plaintext highlighter-rouge">pkg-config</code></p>

    <ul>
      <li>대부분 RHEL 8에는 기본 제공되지만, 만약 사용자 PATH에 없다면 <strong>관리자에게 설치 요청</strong> 필요합니다(이 부분은 sudo/오프라인 환경에서 사용자 설치가 현실적으로 어렵습니다).</li>
    </ul>
  </li>
  <li>
    <p>선택(소스 빌드 많을 때 유용): <code class="language-plaintext highlighter-rouge">cmake</code>(일부 라이브러리), <code class="language-plaintext highlighter-rouge">ninja</code>(선택)</p>
  </li>
</ul>

<hr />

<h1 id="d-한-번에-끝내기-체크리스트">D) “한 번에 끝내기” 체크리스트</h1>

<ol>
  <li>
    <p>(외부 PC) 아래 소스/휠 다운로드</p>

    <ul>
      <li>
        <p>소스: <code class="language-plaintext highlighter-rouge">sqlite</code>, <code class="language-plaintext highlighter-rouge">openssl</code>, <code class="language-plaintext highlighter-rouge">zlib</code>, <code class="language-plaintext highlighter-rouge">bzip2</code>, <code class="language-plaintext highlighter-rouge">xz</code>, <code class="language-plaintext highlighter-rouge">readline</code>, <code class="language-plaintext highlighter-rouge">ncurses</code>, <code class="language-plaintext highlighter-rouge">libffi</code>, <code class="language-plaintext highlighter-rouge">expat</code>, <code class="language-plaintext highlighter-rouge">Python-3.11.12.tgz</code></p>
      </li>
      <li>
        <p>휠: <code class="language-plaintext highlighter-rouge">open-webui</code>, <code class="language-plaintext highlighter-rouge">chromadb</code>, <code class="language-plaintext highlighter-rouge">hnswlib</code>, <code class="language-plaintext highlighter-rouge">numpy</code>, <code class="language-plaintext highlighter-rouge">uvicorn</code>, <code class="language-plaintext highlighter-rouge">fastapi</code>, <code class="language-plaintext highlighter-rouge">pydantic</code>, <code class="language-plaintext highlighter-rouge">starlette</code>, <code class="language-plaintext highlighter-rouge">watchfiles</code>, <code class="language-plaintext highlighter-rouge">orjson</code>(또는 <code class="language-plaintext highlighter-rouge">ujson</code>), 기타 자동으로 끌려오는 것들 전부</p>
      </li>
    </ul>
  </li>
  <li>
    <p>(서버) A 순서대로 <strong>네이티브 라이브러리</strong> 를 <code class="language-plaintext highlighter-rouge">$HOME/opt/...</code>에 설치</p>
  </li>
  <li>
    <p>(서버) 환경변수로 include/lib/rpath 셋업 후 <strong>Python 빌드</strong></p>
  </li>
  <li>
    <p>(서버) 새 <strong>venv 생성</strong> → <code class="language-plaintext highlighter-rouge">pip install --no-index --find-links …</code>로 <strong>휠</strong> 설치</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">python -c "import sqlite3; print(sqlite3.sqlite_version)"</code>가 3.35+인지 확인</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">open-webui serve</code> 실행 테스트</p>
  </li>
</ol>

<hr />

<p>필요하시면, 위 라이브러리들 <strong>오프라인 빌드 자동화 스크립트(하나의 bash 파일)</strong>와, <strong>pip wheelhouse 만들기용 명령어 세트</strong> 를 사용자 환경에 맞춰 뽑아드릴게요. 어떤 버전 조합으로 가실지 알려주시면 바로 만들어 드립니다.</p>

<p class="chat--user">

으악 너무 많아. 저것들이 다 꼭 필요한거야? 난 오류만 안나면 돼

</p>

<p>확실히 많았죠 😂 “오류만 안 나게”가 목표라면 <strong>딱 하나만</strong> 해결하면 됩니다:</p>

<h2 id="핵심만-sqlite만-새로-깔고-python을-그걸로-다시-빌드">핵심만: SQLite만 새로 깔고, Python을 그걸로 다시 빌드</h2>

<p>Chroma 에러의 <strong>직접 원인</strong> 은 <code class="language-plaintext highlighter-rouge">sqlite3 &lt; 3.35</code>뿐이에요.<br />
즉, <strong>다른 라이브러리들을 전혀 건드리지 않아도</strong> 됩니다.</p>

<h3 id="0-변수폴더">0) 변수/폴더</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/src <span class="nv">$HOME</span>/opt
<span class="nb">export </span><span class="nv">SQLITE_VER</span><span class="o">=</span>3.45.4              <span class="c"># 3.35.0 이상이면 OK</span>
<span class="nb">export </span><span class="nv">PY_VER</span><span class="o">=</span>3.11.12

<span class="nb">export </span><span class="nv">SQLITE_PREFIX</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/sqlite-</span><span class="nv">$SQLITE_VER</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">PY_PREFIX</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/python-</span><span class="nv">$PY_VER</span><span class="s2">"</span>
</code></pre></div></div>

<h3 id="1-오프라인에서-가져온-소스-업로드">1) (오프라인에서 가져온) 소스 업로드</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">sqlite-autoconf-&lt;NNNNNNN&gt;.tar.gz</code> (예: 3.45.4 → 3450400)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">Python-3.11.12.tgz</code><br />
이 두 개만 있으면 충분합니다.</p>
  </li>
</ul>

<h3 id="2-sqlite만-사용자-경로에-설치">2) SQLite만 사용자 경로에 설치</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$HOME</span>/src
<span class="nb">tar </span>xf sqlite-autoconf-3450400.tar.gz
<span class="nb">cd </span>sqlite-autoconf-3450400

<span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">"-O2 -fPIC"</span> ./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">"</span>
make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>

<span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/bin/sqlite3"</span> <span class="nt">--version</span>    <span class="c"># 3.35.0 이상 확인</span>
</code></pre></div></div>

<h3 id="3-python을-그-sqlite로만-링크해서-재빌드">3) Python을 “그 SQLite”로만 링크해서 재빌드</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> <span class="nv">$HOME</span>/src
<span class="nb">tar </span>xf Python-3.11.12.tgz
<span class="nb">cd </span>Python-3.11.12

<span class="c"># 컴파일러가 새 sqlite를 보게 경로 지정 + rpath 심기</span>
<span class="nb">export </span><span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">"-I</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/include"</span>
<span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">"-L</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib -Wl,-rpath,</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">"</span>

./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PY_PREFIX</span><span class="s2">"</span> <span class="nt">--with-ensurepip</span><span class="o">=</span><span class="nb">install
</span>make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>
</code></pre></div></div>

<h3 id="4-경로-적용--버전-확인">4) 경로 적용 + 버전 확인</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PY_PREFIX</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>

python3 <span class="nt">-c</span> <span class="s2">"import sqlite3; print(sqlite3.sqlite_version)"</span>
<span class="c"># &gt;&gt;&gt; 3.35.0 이상 나오면 끝!</span>
</code></pre></div></div>

<h3 id="5-venv-새로-만들기-중요">5) venv 새로 만들기 (중요)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv <span class="nv">$HOME</span>/venvs/openwebui
<span class="nb">source</span> <span class="nv">$HOME</span>/venvs/openwebui/bin/activate
python <span class="nt">-c</span> <span class="s2">"import sqlite3; print(sqlite3.sqlite_version)"</span>  <span class="c"># 다시 3.35+ 확인</span>
</code></pre></div></div>

<p>이제 <strong>같은 에러 없이</strong> Open WebUI / Chroma 돌릴 수 있습니다.</p>

<hr />

<h2 id="혹시-생길-수-있는-딱-두-가지-추가-오류만-메모">혹시 생길 수 있는 “딱 두 가지” 추가 오류만 메모</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ssl</code> 모듈 없다는 에러 → <strong>온라인 pip 필요할 때만</strong> 발생. 지금은 오프라인이라면 무시해도 OK.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">readline</code> 히스토리 안 먹음 → 기능상 불편이지만 <strong>치명적 아님</strong>. 필요할 때만 나중에 해결.</p>
  </li>
</ul>

<blockquote>
  <p>요약: <strong>지금은 SQLite만</strong> 해결하세요. 나머지는 문제 생기면 그때 최소만 붙이면 돼요.</p>
</blockquote>

<p>원하면 위 절차를 <strong>복붙용 한 파일 스크립트</strong> 로 묶어 드릴게요.</p>

<p class="chat--user">

sqlite Precomiled Binary가 있는데 그냥 이거 받아서 써도 되나?

</p>

<p>네, 전제 조건만 맞으면 <strong>Precompiled Binary</strong>(미리 컴파일된 sqlite3) 써도 됩니다.<br />
다만 Python은 실행 시 시스템 PATH에 있는 <code class="language-plaintext highlighter-rouge">sqlite3</code> CLI가 아니라, <strong>빌드 시점에 링크된 libsqlite3.so</strong> 를 씁니다.</p>

<p>즉, 단순히 sqlite3 실행파일만 받아서 두는 건 의미 없고, <strong>라이브러리(.so)와 헤더(.h)</strong> 까지 있어야 합니다.</p>

<hr />

<h2 id="1-필요한-구성-요소">1) 필요한 구성 요소</h2>

<p>SQLite precompiled package 안에 보통 다음이 있어야 합니다:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">sqlite3</code> 실행파일 (CLI)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">libsqlite3.so</code> (또는 .a)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">sqlite3.h</code> 등 개발용 헤더 파일</p>
  </li>
</ul>

<p>만약 제공된 게 <strong>CLI 실행파일만</strong> 이라면 → Python 재빌드에는 못 씁니다.</p>

<hr />

<h2 id="2-쓸-수-있는-경우">2) 쓸 수 있는 경우</h2>

<ul>
  <li>
    <p>precompiled bundle이 <code class="language-plaintext highlighter-rouge">include/</code> 와 <code class="language-plaintext highlighter-rouge">lib/</code> 디렉터리를 함께 제공</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">libsqlite3.so</code>가 <strong>3.35.0 이상</strong></p>
  </li>
  <li>
    <p>해당 빌드가 <strong>RHEL 8.x glibc 호환</strong></p>
  </li>
</ul>

<p>설치 예:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="nv">$HOME</span>/opt/sqlite-prebuilt
<span class="nb">tar </span>xf sqlite-precompiled.tar.gz <span class="nt">-C</span> <span class="nv">$HOME</span>/opt/sqlite-prebuilt

<span class="nb">export </span><span class="nv">SQLITE_PREFIX</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/sqlite-prebuilt"</span>
<span class="nb">export </span><span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">"-I</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/include"</span>
<span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">"-L</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib -Wl,-rpath,</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">"</span>

<span class="c"># 이후 Python 빌드</span>
<span class="nb">cd </span>Python-3.11.12
./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/python-3.11.12"</span> <span class="nt">--with-ensurepip</span><span class="o">=</span><span class="nb">install
</span>make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>
</code></pre></div></div>

<hr />

<h2 id="3-주의할-점">3) 주의할 점</h2>

<ul>
  <li>
    <p>precompiled binary의 <code class="language-plaintext highlighter-rouge">.so</code> 파일이 <strong>정적 경로</strong>(<code class="language-plaintext highlighter-rouge">/usr/lib</code> 등)에 깔린 게 아니므로,<br />
실행 시 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> 또는 rpath로 경로를 알려줘야 합니다.</p>
  </li>
  <li>
    <p>glibc 버전 호환성이 안 맞으면 <code class="language-plaintext highlighter-rouge">symbol not found</code> 같은 런타임 오류가 날 수 있습니다.</p>
  </li>
  <li>
    <p>Python 빌드 시 <code class="language-plaintext highlighter-rouge">_sqlite3</code> 모듈이 안 잡히면, 헤더(<code class="language-plaintext highlighter-rouge">sqlite3.h</code>) 경로가 CPPFLAGS에 잡혀 있는지 확인해야 합니다.</p>
  </li>
</ul>

<hr />

<p>📌 결론:</p>

<ul>
  <li>
    <p><strong>라이브러리+헤더 포함된 패키지</strong> 면 문제 없이 사용 가능</p>
  </li>
  <li>
    <p>CLI만 있는 패키지는 Chroma 문제 해결 불가</p>
  </li>
  <li>
    <p>Python 빌드시 새 sqlite를 명시적으로 링크해야만 적용됨</p>
  </li>
</ul>

<hr />

<p>원하시면, 제가 <strong>precompiled binary가 쓸 수 있는지 체크하는 명령어 세트</strong> 를 드릴 수 있습니다.<br />
그걸로 지금 가지고 있는 패키지가 Python 빌드에 바로 쓸 수 있는지 바로 확인할 수 있어요.<br />
그거 드릴까요?</p>

<p class="chat--user">

응 so가 없네

</p>

<p>그럼 그 precompiled binary는 <strong>Python 빌드에는 못 씁니다</strong>.</p>

<p>Python이 사용하는 <code class="language-plaintext highlighter-rouge">_sqlite3</code> 모듈은</p>

<ul>
  <li>
    <p><strong>sqlite3.h</strong>(헤더 파일)</p>
  </li>
  <li>
    <p><strong>libsqlite3.so</strong>(공유 라이브러리)</p>
  </li>
</ul>

<p>이 두 가지가 <strong>빌드 시점에 필요</strong> 합니다.<br />
CLI 실행파일(<code class="language-plaintext highlighter-rouge">sqlite3</code>)만으로는 전혀 적용이 안 돼요.<br />
그래서 결국 SQLite 소스를 받아서 직접 빌드해야 합니다.</p>

<hr />

<p>📌 <strong>정리</strong></p>

<ul>
  <li>
    <p>지금 상황(so 없음) → Python 재빌드 시 구버전 시스템 라이브러리를 그대로 링크 → Chroma 에러 재발</p>
  </li>
  <li>
    <p>해결 방법 → SQLite 소스 tar.gz 받아서 <code class="language-plaintext highlighter-rouge">$HOME/opt/sqlite-&lt;ver&gt;</code>에 설치 후, Python 빌드할 때 그 경로를 연결</p>
  </li>
</ul>

<hr />

<p>원하면 제가 <strong>딱 SQLite만</strong> 빌드하고 Python에 붙이는 최소 스크립트**를 만들어서<br />
그대로 복붙해서 쓰면 되게 해드릴까요?<br />
그렇게 하면 다른 의존성 건드릴 필요 없이 한 번에 끝납니다.</p>

<p class="chat--user">

sqlite 빌드할 때 내가 설치한 GCC 사용하고 싶어.

</p>

<p>좋지! <strong>sudo 없이, 내가 설치한 GCC로만</strong> SQLite를 빌드해서 <code class="language-plaintext highlighter-rouge">.so</code>까지 만들고, 그걸로 파이썬을 다시 빌드하는 최소 절차를 딱 정리해줄게. (RHEL 8.x, 오프라인 가정)</p>

<hr />

<h1 id="0-전제-내가-설치한-gcc-위치">0) 전제: 내가 설치한 GCC 위치</h1>

<p>아래처럼 경로만 너 환경에 맞게 바꿔줘.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 내가 설치한 GCC 루트(예: $HOME/opt/gcc-12.3.0)</span>
<span class="nb">export </span><span class="nv">TOOLCHAIN_ROOT</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/gcc-12.3.0"</span>

<span class="c"># PATH와 런타임 라이브러리 경로(중요)</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLCHAIN_ROOT</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLCHAIN_ROOT</span><span class="s2">/lib64:</span><span class="nv">$TOOLCHAIN_ROOT</span><span class="s2">/lib:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">"</span>

<span class="c"># 확인</span>
which gcc
gcc <span class="nt">--version</span>
</code></pre></div></div>

<blockquote>
  <p>필요하면 binutils까지 같이 쓴다는 의미로 <code class="language-plaintext highlighter-rouge">AR/RANLIB/LD</code>도 지정 가능:<br />
 <code class="language-plaintext highlighter-rouge">export AR="$TOOLCHAIN_ROOT/bin/ar"; export RANLIB="$TOOLCHAIN_ROOT/bin/ranlib"</code></p>
</blockquote>

<hr />

<h1 id="1-sqlite를-내-gcc로-빌드공유-라이브러리-so-생성">1) SQLite를 “내 GCC”로 빌드(+공유 라이브러리 .so 생성)</h1>

<p>오프라인으로 가져온 <code class="language-plaintext highlighter-rouge">sqlite-autoconf-&lt;NNNNNNN&gt;.tar.gz</code> 기준.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 설치 위치(원하는 곳으로)</span>
<span class="nb">export </span><span class="nv">SQLITE_PREFIX</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/sqlite-3.45.4"</span>

<span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/src"</span> <span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">"</span>
<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/src"</span>
<span class="nb">tar </span>xf sqlite-autoconf-3450400.tar.gz
<span class="nb">cd </span>sqlite-autoconf-3450400

<span class="c"># ★ 핵심: CC를 내 GCC로 지정, -fPIC, rpath까지 준비</span>
<span class="nb">export </span><span class="nv">CC</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLCHAIN_ROOT</span><span class="s2">/bin/gcc"</span>
<span class="nb">export </span><span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">"-O2 -fPIC </span><span class="se">\</span><span class="s2">
-DSQLITE_ENABLE_FTS5 </span><span class="se">\</span><span class="s2">
-DSQLITE_ENABLE_JSON1 </span><span class="se">\</span><span class="s2">
-DSQLITE_ENABLE_COLUMN_METADATA </span><span class="se">\</span><span class="s2">
-DSQLITE_ENABLE_RTREE </span><span class="se">\</span><span class="s2">
-DSQLITE_THREADSAFE=1"</span>
<span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">"-Wl,-rpath,</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib"</span>

<span class="c"># configure → build → install</span>
./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">"</span> <span class="nt">--enable-shared</span> <span class="nt">--disable-static</span>
make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>

<span class="c"># 검증</span>
<span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/bin/sqlite3"</span> <span class="nt">--version</span>            <span class="c"># 3.35.0 이상</span>
<span class="nb">ls</span> <span class="nt">-l</span> <span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib/libsqlite3.so"</span>          <span class="c"># .so 존재 확인</span>
ldd <span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib/libsqlite3.so"</span> | <span class="nb">head</span>     <span class="c"># 내 GCC의 libgcc_s 등 링크 확인</span>
</code></pre></div></div>

<blockquote>
  <p>TIP</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">--enable-shared</code>로 <code class="language-plaintext highlighter-rouge">.so</code> 생성 확실히.</p>
    </li>
    <li>
      <p>rpath는 나중에 파이썬이 이 <code class="language-plaintext highlighter-rouge">.so</code>를 찾을 수 있게 하는 안전장치.</p>
    </li>
    <li>
      <p>만약 <code class="language-plaintext highlighter-rouge">ldd</code>에서 이상한 시스템 lib로 엮이면 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>가 제대로 잡혔는지 다시 확인.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="2-파이썬을-그-sqlite-so헤더로-링크해서-재빌드">2) 파이썬을 “그 SQLite .so/헤더”로 링크해서 재빌드</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 파이썬 설치 경로</span>
<span class="nb">export </span><span class="nv">PY_PREFIX</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/opt/python-3.11.12"</span>

<span class="c"># 컴파일/링크에 SQLite 경로 반영 + 런타임 rpath</span>
<span class="nb">export </span><span class="nv">CPPFLAGS</span><span class="o">=</span><span class="s2">"-I</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/include"</span>
<span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">"-L</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib -Wl,-rpath,</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib:</span><span class="nv">$TOOLCHAIN_ROOT</span><span class="s2">/lib64:</span><span class="nv">$TOOLCHAIN_ROOT</span><span class="s2">/lib:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">"</span>

<span class="c"># (옵션) 파이썬도 내 GCC로</span>
<span class="nb">export </span><span class="nv">CC</span><span class="o">=</span><span class="s2">"</span><span class="nv">$TOOLCHAIN_ROOT</span><span class="s2">/bin/gcc"</span>

<span class="nb">cd</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/src"</span>
<span class="nb">tar </span>xf Python-3.11.12.tgz
<span class="nb">cd </span>Python-3.11.12

./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PY_PREFIX</span><span class="s2">"</span> <span class="nt">--with-ensurepip</span><span class="o">=</span><span class="nb">install
</span>make <span class="nt">-n</span> <span class="o">&gt;</span> /dev/null 2&gt;&amp;1  <span class="c"># (캐시 생성용 살짝 돌리기; 생략 가능)</span>
make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>

<span class="c"># PATH 적용 및 확인</span>
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PY_PREFIX</span><span class="s2">/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
python3 <span class="nt">-c</span> <span class="s2">"import sqlite3; print(sqlite3.sqlite_version)"</span>
<span class="c"># ==&gt; 3.35.0 이상 나오면 성공!</span>
</code></pre></div></div>

<blockquote>
  <p>만약 <code class="language-plaintext highlighter-rouge">_sqlite3</code>가 빠졌다는 메시지가 나오면:</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">CPPFLAGS/LDFLAGS/LD_LIBRARY_PATH</code>가 맞는지 확인</p>
    </li>
    <li>
      <p>필요 시 <code class="language-plaintext highlighter-rouge">Modules/Setup.local</code>에 아래 한 줄 추가 후 <code class="language-plaintext highlighter-rouge">make install</code> 다시 실행</p>
      <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
    
_sqlite3 _sqlite/module.c -I$SQLITE_PREFIX/include -L$SQLITE_PREFIX/lib -lsqlite3
    
</code></pre></div>      </div>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="3-venv-새로-만들기-중요">3) venv 새로 만들기 (중요)</h1>

<p>기존 venv는 구버전 파이썬 기준이므로 새로 생성해야 해.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 <span class="nt">-m</span> venv <span class="nv">$HOME</span>/venvs/openwebui
<span class="nb">source</span> <span class="nv">$HOME</span>/venvs/openwebui/bin/activate
python <span class="nt">-c</span> <span class="s2">"import sqlite3; print(sqlite3.sqlite_version)"</span>  <span class="c"># 3.35+ 재확인</span>
</code></pre></div></div>

<hr />

<h2 id="자주-묻는-포인트-진짜-핵심만">자주 묻는 포인트 (진짜 핵심만)</h2>

<ul>
  <li>
    <p><strong>Q. 그냥 sqlite3 실행파일만 있으면 안 돼?</strong><br />
A. 안 돼. 파이썬 빌드에는 <code class="language-plaintext highlighter-rouge">libsqlite3.so</code> + <code class="language-plaintext highlighter-rouge">sqlite3.h</code>가 필요.</p>
  </li>
  <li>
    <p><strong>Q. 꼭 내 GCC여야 하나?</strong><br />
A. 네. 네이티브 툴체인 혼용하면 런타임에 <code class="language-plaintext highlighter-rouge">symbol not found</code> 날 수 있음. PATH/LD_LIBRARY_PATH를 내 GCC로 먼저 잡아.</p>
  </li>
  <li>
    <p><strong>Q. rpath 꼭 넣어야 해?</strong><br />
A. 강추. 그러면 이후에 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> 깜박해도 파이썬이 <code class="language-plaintext highlighter-rouge">libsqlite3.so</code>를 바로 찾음.</p>
  </li>
</ul>

<hr />

<p>필요하면 위 과정을 <strong>복붙만 하면 되는 단일 bash 스크립트</strong> 로 만들어 줄게. 경로랑 버전만 바꾸면 바로 돌아가게!</p>

<p class="chat--user">

-W1,-rpath 이건 뭐하는 옵션이야?

</p>

<p>아마 제가 적은 건 <code class="language-plaintext highlighter-rouge">-Wl,-rpath</code> 인데, 그건 타이핑이 조금 비슷해서 헷갈린 걸 거예요.<br />
(<code class="language-plaintext highlighter-rouge">-W1</code>은 의미 없고, <code class="language-plaintext highlighter-rouge">-Wl</code>이 맞습니다. 여기서 소문자 L은 “linker”의 L)</p>

<hr />

<h2 id="-wl-rpath경로-의미"><code class="language-plaintext highlighter-rouge">-Wl,-rpath,&lt;경로&gt;</code> 의미</h2>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">-Wl,</code></strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">gcc</code>나 <code class="language-plaintext highlighter-rouge">g++</code> 같은 컴파일 드라이버에 <strong>링커 옵션을 그대로 전달</strong> 하라는 뜻입니다.</p>
      </li>
      <li>
        <p>즉, <code class="language-plaintext highlighter-rouge">-Wl,옵션</code> → “이 옵션은 링커(ld)에게 주는 거야”라는 의미.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">-rpath,&lt;경로&gt;</code></strong></p>

    <ul>
      <li>
        <p><strong>런타임 라이브러리 검색 경로</strong> 를 바이너리에 <strong>직접 박아 넣음</strong>.</p>
      </li>
      <li>
        <p>실행 파일이 만들어질 때 ELF 헤더의 <code class="language-plaintext highlighter-rouge">RPATH</code>(또는 <code class="language-plaintext highlighter-rouge">RUNPATH</code>)에 <code class="language-plaintext highlighter-rouge">&lt;경로&gt;</code>를 기록합니다.</p>
      </li>
      <li>
        <p>그래서 실행할 때 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>를 따로 안 잡아도 해당 경로에서 <code class="language-plaintext highlighter-rouge">.so</code>를 자동으로 찾습니다.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h3 id="예시">예시</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gcc main.c <span class="nt">-L</span><span class="nv">$HOME</span>/opt/sqlite/lib <span class="nt">-lsqlite3</span> <span class="se">\</span>
    <span class="nt">-Wl</span>,-rpath,<span class="nv">$HOME</span>/opt/sqlite/lib
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-L…</code> : 빌드할 때 라이브러리 검색 경로</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-Wl,-rpath,…</code> : 실행할 때도 이 경로를 기억해서 libsqlite3.so 찾음</p>
  </li>
</ul>

<hr />

<h3 id="왜-pythonsqlite-빌드에-쓰나">왜 Python/SQLite 빌드에 쓰나?</h3>

<ul>
  <li>
    <p>홈 디렉토리 같은 <strong>비표준 경로</strong> 에 설치한 <code class="language-plaintext highlighter-rouge">.so</code>는 기본 런타임 경로에 없어요.</p>
  </li>
  <li>
    <p>매번 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH=$HOME/opt/sqlite/lib</code> 설정하는 건 번거롭죠.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-Wl,-rpath</code>를 빌드 시 넣어두면 <strong>그 파이썬 실행 파일이 항상 그 경로에서 먼저 .so를 찾게 됩니다</strong>.</p>
  </li>
</ul>

<hr />

<p>원하시면 제가 <strong><code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> 없이도 동작하게 rpath 넣은 Python+SQLite 빌드 스크립트</strong>를 바로 만들어드릴게요.<br />
그럼 환경변수 깜빡해도 안전합니다.</p>

<p class="chat--user">

근데 sqlite할 때도 LDFLAGS를 넣어줘야해?

</p>

<p>SQLite 빌드할 때는 <strong>상황에 따라 다릅니다</strong> 👍</p>

<hr />

<h2 id="1-기본적으로는-ldflags-없어도-빌드됨">1. 기본적으로는 LDFLAGS 없어도 빌드됨</h2>

<ul>
  <li>
    <p>SQLite 자체는 외부 라이브러리 의존성이 거의 없어요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">./configure --prefix=…</code>만으로도 <code class="language-plaintext highlighter-rouge">libsqlite3.so</code> 잘 만들어집니다.</p>
  </li>
  <li>
    <p>그래서 <strong>순수 SQLite 빌드</strong> 라면 <code class="language-plaintext highlighter-rouge">LDFLAGS</code>를 안 줘도 무방합니다.</p>
  </li>
</ul>

<hr />

<h2 id="2-그런데-내가-원하는-rpath를-박고-싶다면-ldflags-필요">2. 그런데 내가 원하는 rpath를 박고 싶다면 LDFLAGS 필요</h2>

<ul>
  <li>
    <p>SQLite를 설치한 <strong>비표준 경로</strong> 를 Python 빌드 시 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code> 없이 사용하고 싶으면,<br />
SQLite를 빌드할 때도 <code class="language-plaintext highlighter-rouge">.so</code> 안에 rpath를 넣을 수 있습니다.</p>
  </li>
  <li>
    <p>예:</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">"-Wl,-rpath,</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib"</span>
</code></pre></div></div>

<p>이렇게 하면 SQLite CLI(<code class="language-plaintext highlighter-rouge">sqlite3</code>)나 SQLite를 링크한 프로그램이 실행될 때<br />
<code class="language-plaintext highlighter-rouge">$SQLITE_PREFIX/lib</code>를 자동으로 검색합니다.</p>

<hr />

<h2 id="3-python-빌드에서는-ldflags-필수">3. Python 빌드에서는 LDFLAGS 필수</h2>

<ul>
  <li>Python이 <code class="language-plaintext highlighter-rouge">_sqlite3</code> 모듈을 만들 때 <code class="language-plaintext highlighter-rouge">libsqlite3.so</code>를 어디서 찾을지 알아야 해서,<br />
Python 빌드할 때는 반드시
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">LDFLAGS</span><span class="o">=</span><span class="s2">"-L</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib -Wl,-rpath,</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/lib"</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>처럼 넣어주는 게 안전합니다.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-L…</code> → 컴파일/링크 시 검색 경로</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-Wl,-rpath,…</code> → 런타임 검색 경로</p>
  </li>
</ul>

<hr />

<p>✅ <strong>정리</strong></p>

<ul>
  <li>
    <p><strong>SQLite 빌드:</strong> LDFLAGS 없이도 가능. rpath를 넣고 싶으면 추가.</p>
  </li>
  <li>
    <p><strong>Python 빌드:</strong> LDFLAGS 필수. 최소한 <code class="language-plaintext highlighter-rouge">-L&lt;sqlite lib&gt;</code> + <code class="language-plaintext highlighter-rouge">-Wl,-rpath,&lt;sqlite lib&gt;</code>는 꼭 넣어야 안전.</p>
  </li>
</ul>

<hr />

<p>원하면 제가 <strong>SQLite 빌드 때 rpath 없이, Python 빌드 때만 rpath 넣는 최소 설치 스크립트</strong> 를 바로 짜 드릴 수 있습니다.<br />
그렇게 하면 불필요한 옵션은 안 쓰면서도 Python에서만 경로를 기억하게 할 수 있어요.</p>

<p class="chat--user">

그런데 왜 이렇게 설정할 것이 많아? configure의 default로 어느정도 reasonable한 설정이 들어가있는거 아니야?

</p>

<p>맞아요 — <code class="language-plaintext highlighter-rouge">./configure</code>가 이미 꽤 <strong>reasonable한 기본값</strong> 을 넣어주긴 합니다.</p>

<p>그런데 우리가 지금 설정을 많이 건드리는 이유는 <strong>기본값이 "시스템에 이미 깔린 것" 기준</strong> 이기 때문이에요.<br />
RHEL 8처럼 오래된 OS + sudo 불가 환경에서는 그 기본값이 <strong>원하는 최신 라이브러리를 전혀 안 봅니다</strong>.</p>

<hr />

<h2 id="1-configure의-기본-동작">1. <code class="language-plaintext highlighter-rouge">configure</code>의 기본 동작</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">./configure</code>는 <code class="language-plaintext highlighter-rouge">PATH</code>와 표준 라이브러리 경로(<code class="language-plaintext highlighter-rouge">/usr/include</code>, <code class="language-plaintext highlighter-rouge">/usr/lib64</code> 등)에서 헤더와 .so를 찾습니다.</p>
  </li>
  <li>
    <p>최신 라이브러리를 <strong>비표준 경로</strong>(<code class="language-plaintext highlighter-rouge">$HOME/opt/...</code>)에 설치해도, 특별히 알려주지 않으면 그냥 무시하고 시스템 기본 구버전을 씁니다.</p>
  </li>
  <li>
    <p>예: Python이 <code class="language-plaintext highlighter-rouge">_sqlite3</code> 모듈을 빌드할 때 <code class="language-plaintext highlighter-rouge">/usr/include/sqlite3.h</code> + <code class="language-plaintext highlighter-rouge">/usr/lib64/libsqlite3.so</code>를 찾아서 링크 → 결과적으로 3.26.0.</p>
  </li>
</ul>

<hr />

<h2 id="2-왜-우리가-cppflagsldflags를-주나">2. 왜 우리가 CPPFLAGS/LDFLAGS를 주나?</h2>

<ul>
  <li>
    <p>"야, 헤더는 여기 있다!" → <code class="language-plaintext highlighter-rouge">CPPFLAGS="-I$SQLITE_PREFIX/include"</code></p>
  </li>
  <li>
    <p>"라이브러리는 여기 있다!" → <code class="language-plaintext highlighter-rouge">LDFLAGS="-L$SQLITE_PREFIX/lib"</code></p>
  </li>
  <li>
    <p>"실행할 때도 여기서 찾아라!" → <code class="language-plaintext highlighter-rouge">-Wl,-rpath,$SQLITE_PREFIX/lib</code></p>
  </li>
  <li>
    <p>이걸 안 하면, 빌드 시 <strong>컴파일러는 최신 헤더를 못 보고</strong> ,<br />
실행 시 <strong>런타임 로더는 최신 .so를 못 찾습니다</strong>.</p>
  </li>
</ul>

<hr />

<h2 id="3-rpath까지-넣는-이유">3. rpath까지 넣는 이유</h2>

<ul>
  <li>
    <p>기본적으로 실행 시 <code class="language-plaintext highlighter-rouge">.so</code>는 <code class="language-plaintext highlighter-rouge">/lib</code>, <code class="language-plaintext highlighter-rouge">/usr/lib</code>, <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>에서 찾습니다.</p>
  </li>
  <li>
    <p>홈 디렉토리에 깔린 <code class="language-plaintext highlighter-rouge">.so</code>는 기본 검색 경로에 없어요.</p>
  </li>
  <li>
    <p>매번 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>를 세팅하지 않으려면 rpath로 박아두는 게 편리.</p>
  </li>
</ul>

<hr />

<h2 id="4-요약-비유">4. 요약 비유</h2>

<p>기본 <code class="language-plaintext highlighter-rouge">configure</code>는 <strong>"부엌(시스템 기본 경로)에 있는 재료만"</strong> 씁니다.<br />
우리가 한 건 <strong>"냉장고(홈 디렉토리)에 있는 최신 재료도 써!"</strong> 하고 경로를 알려주는 거예요.</p>

<hr />

<p>원하면 제가 <strong>이 경로 설정을 최소화해서, SQLite 최신판만 쓰게 하는 configure 예제</strong> 를 아주 간단히 정리해 드릴까요?<br />
그러면 지금처럼 CPPFLAGS/LDFLAGS를 여러 줄 쓰지 않고도 깔끔하게 됩니다.</p>

<p class="chat--user">

아니 rpath나 라이브러리는 다 이해해 export CFLAGS="-O2 -fPIC \ -DSQLITE_ENABLE_FTS5 \ -DSQLITE_ENABLE_JSON1 \ -DSQLITE_ENABLE_COLUMN_METADATA \ -DSQLITE_ENABLE_RTREE \ -DSQLITE_THREADSAFE=1" 이거는 좀 귀찮아서 안넣었어 근데

</p>

<p>괜찮아—저 플래그들(<strong>FTS5/JSON1/RTREE/COLUMN_METADATA/THREADSAFE</strong>)은 “기능 토글”일 뿐이고, <strong>Chroma + Open WebUI가 돌아가는데 필수는 아니야.</strong><br />
현재 목표(에러만 안 나게)는 <strong>버전 ≥ 3.35.0</strong> 이 핵심이고, 빌드에선 <strong><code class="language-plaintext highlighter-rouge">-fPIC</code></strong> 정도만 챙기면 충분합니다.</p>

<h2 id="결론-먼저">결론 먼저</h2>

<ul>
  <li>
    <p><strong>지금 당장은</strong> <code class="language-plaintext highlighter-rouge">CFLAGS="-O2 -fPIC"</code> 만 줘도 OK.</p>
  </li>
  <li>
    <p>추가 기능이 필요할 때만 그때 다시 켜면 됩니다. (다시 빌드해도 Python 쪽 큰 수정 필요 없음)</p>
  </li>
</ul>

<h2 id="각-옵션이-실제로-뭘-켜는지-필요할-때만">각 옵션이 실제로 뭘 켜는지 (필요할 때만!)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SQLITE_ENABLE_FTS5</code> : 풀텍스트 검색(FTS5) 엔진. 대부분의 앱에 <strong>필수 아님</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SQLITE_ENABLE_JSON1</code> : JSON 함수(<code class="language-plaintext highlighter-rouge">json_extract</code> 등). 쿼리에서 JSON 다룰 때만 필요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SQLITE_ENABLE_RTREE</code> : R-Tree 인덱스(공간/범위). 특수한 경우에만.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SQLITE_ENABLE_COLUMN_METADATA</code> : 컬럼 메타데이터 API. 일반 사용엔 거의 불필요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SQLITE_THREADSAFE=1</code> : 스레드 세이프. <strong>기본값이 1</strong> 이므로 굳이 지정 안 해도 됨.</p>
  </li>
</ul>

<h2 id="최소-안전-빌드-예시">“최소 안전” 빌드 예시</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 최소만: 성능 + 공유라이브러리 생성</span>
<span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">"-O2 -fPIC"</span> <span class="se">\</span>
./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">"</span> <span class="nt">--enable-shared</span> <span class="nt">--disable-static</span>
make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> make <span class="nb">install</span>
</code></pre></div></div>

<h2 id="나중에-기능이-필요해지면선택">나중에 기능이 필요해지면(선택)</h2>

<p>귀찮은 매크로 대신 <strong>configure 플래그</strong> 로 켜도 됩니다:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">"-O2 -fPIC"</span> <span class="se">\</span>
./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">"</span> <span class="nt">--enable-shared</span> <span class="nt">--disable-static</span> <span class="se">\</span>
  <span class="nt">--enable-fts5</span> <span class="nt">--enable-json1</span> <span class="nt">--enable-rtree</span>
make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span> <span class="o">&amp;&amp;</span> make <span class="nb">install</span>
</code></pre></div></div>

<p>(= 내부적으로 위 매크로들을 정의해줍니다)</p>

<h2 id="현재-빌드에-뭐가-켜졌는지-확인">현재 빌드에 뭐가 켜졌는지 확인</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$SQLITE_PREFIX</span>/bin/sqlite3 <span class="nt">-cmd</span> <span class="s2">"PRAGMA compile_options;"</span> <span class="s2">":memory:"</span> <span class="s2">".quit"</span>
<span class="c"># 또는</span>
<span class="nv">$SQLITE_PREFIX</span>/bin/sqlite3 <span class="nt">-line</span> <span class="s2">":memory:"</span> <span class="s2">"PRAGMA compile_options;"</span>
</code></pre></div></div>

<p>여기에 <code class="language-plaintext highlighter-rouge">ENABLE_FTS5</code>, <code class="language-plaintext highlighter-rouge">ENABLE_JSON1</code> 같은 항목이 뜨면 켜진 것.</p>

<hr />

<h3 id="요약">요약</h3>

<ul>
  <li>
    <p><strong>지금은 CFLAGS 최소(-O2 -fPIC)만</strong> 넣고 진행해도 무방.</p>
  </li>
  <li>
    <p>Chroma 에러는 “버전” 이슈였고, 부가 기능 플래그는 필수 아님.</p>
  </li>
  <li>
    <p>나중에 필요해지면 <code class="language-plaintext highlighter-rouge">--enable-fts5/json1/rtree</code>로 다시 빌드하면 끝.</p>
  </li>
</ul>

<p class="chat--user">

no such module: fts5 enable 을 해야하나본

</p>

<p>맞아요—그 메시지는 <strong>FTS5가 꺼져 있어서</strong> 나는 거예요.<br />
이미 한 번 빌드하셨다면, <strong>SQLite만 다시 컴파일</strong> 해서 <code class="language-plaintext highlighter-rouge">libsqlite3.so</code>를 교체하면 됩니다. (Python은 다시 안 빌려도 됨—같은 경로의 <code class="language-plaintext highlighter-rouge">.so</code>를 런타임에 쓰니까요)</p>

<h2 id="빠른-해결-컴파일에-포함시키는-방법">빠른 해결 (컴파일에 포함시키는 방법)</h2>

<p>아래처럼 <code class="language-plaintext highlighter-rouge">--enable-fts5</code>만 추가해서 <strong>다시 빌드·설치</strong> 하세요.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 전제: 이전과 같은 PREFIX를 사용 (예: $SQLITE_PREFIX)</span>
<span class="nb">cd</span> <span class="nv">$HOME</span>/src/sqlite-autoconf-3450400   <span class="c"># 소스 디렉터리로 이동</span>

<span class="c"># (내 GCC를 쓰는 중이라면) CC/LD_LIBRARY_PATH를 이전과 동일하게 잡아두세요.</span>
<span class="c"># export CC="$TOOLCHAIN_ROOT/bin/gcc"</span>
<span class="c"># export LD_LIBRARY_PATH="$TOOLCHAIN_ROOT/lib64:$LD_LIBRARY_PATH"</span>

<span class="c"># 최소 옵션 + FTS5만 켜기</span>
<span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">"-O2 -fPIC"</span> <span class="se">\</span>
./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--enable-shared</span> <span class="nt">--disable-static</span> <span class="se">\</span>
  <span class="nt">--enable-fts5</span>

make <span class="nt">-j</span><span class="s2">"</span><span class="si">$(</span><span class="nb">nproc</span><span class="si">)</span><span class="s2">"</span>
make <span class="nb">install</span>
</code></pre></div></div>

<h3 id="켜졌는지-확인">켜졌는지 확인</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/bin/sqlite3"</span> <span class="nt">-line</span> <span class="s2">":memory:"</span> <span class="s2">"PRAGMA compile_options;"</span>
<span class="c"># 출력에 ENABLE_FTS5 가 보이면 OK</span>
</code></pre></div></div>

<h3 id="간단-실전-테스트">간단 실전 테스트</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">/bin/sqlite3"</span> <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">SQL</span><span class="sh">'
CREATE VIRTUAL TABLE t USING fts5(content);
INSERT INTO t(content) VALUES ('hello world'), ('hello sqlite'), ('fts5 works');
SELECT rowid, content FROM t WHERE t MATCH 'hello';
</span><span class="no">SQL
</span></code></pre></div></div>

<h2 id="python-쪽도-되는지-확인">Python 쪽도 되는지 확인</h2>

<p><code class="language-plaintext highlighter-rouge">rpath</code> 또는 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>가 이미 잡혀 있다면, <strong>Python은 자동으로 새 libsqlite3.so</strong> 를 사용합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python - <span class="o">&lt;&lt;</span><span class="sh">'</span><span class="no">PY</span><span class="sh">'
import sqlite3
con = sqlite3.connect(':memory:')
con.execute("CREATE VIRTUAL TABLE t USING fts5(content)")
con.executemany("INSERT INTO t(content) VALUES (?)", [('hello world',), ('hello sqlite',), ('fts5 works',)])
print(list(con.execute("SELECT rowid, content FROM t WHERE t MATCH 'hello'")))
</span><span class="no">PY
</span></code></pre></div></div>

<h2 id="참고-옵션">참고 (옵션)</h2>

<ul>
  <li>JSON 함수도 필요하면 다음처럼 같이 켤 수 있어요:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">CFLAGS</span><span class="o">=</span><span class="s2">"-O2 -fPIC"</span> ./configure <span class="nt">--prefix</span><span class="o">=</span><span class="s2">"</span><span class="nv">$SQLITE_PREFIX</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">--enable-shared</span> <span class="nt">--disable-static</span> <span class="se">\</span>
  <span class="nt">--enable-fts5</span> <span class="nt">--enable-json1</span>
</code></pre></div>    </div>
  </li>
  <li><strong>재빌드 후 Python 재설치는 불필요</strong> 합니다. 단, <strong>다른 경로</strong> 에 설치했다면 <code class="language-plaintext highlighter-rouge">LD_LIBRARY_PATH</code>나 <code class="language-plaintext highlighter-rouge">-Wl,-rpath,&lt;경로&gt;</code>로 새 경로를 보이게 해야 해요.</li>
</ul>

<p>필요하면 위 과정을 <strong>한 번에 도는 짧은 스크립트</strong> 로 묶어 드릴게요.</p>

<p class="chat--user">

OperationalError: table embeddings already exists

</p>

<p>오류 메시지 그대로 해석하면, 지금 사용 중인 SQLite DB 안에 <strong><code class="language-plaintext highlighter-rouge">embeddings</code> 테이블이 이미 있어서</strong> 새로 만드는 쿼리(아마 <code class="language-plaintext highlighter-rouge">CREATE TABLE embeddings (...)</code>)가 다시 실행되며 터진 겁니다. 보통 ① 같은 DB 파일을 두 번 초기화했거나, ② 예전 데이터가 남아 있는데 마이그레이션 로직이 <code class="language-plaintext highlighter-rouge">IF NOT EXISTS</code> 없이 실행될 때 생겨요.</p>

<p>아래 중 편한 걸로 해결하세요 — “에러만 안 나게” 기준으로 <strong>가장 빨리 끝나는 순서</strong> 예요.</p>

<hr />

<h2 id="1-가장-빠름-새-데이터-디렉터리db로-시작">1) 가장 빠름: 새 데이터 디렉터리/DB로 시작</h2>

<p>(Open WebUI/Chroma가 쓰는 <strong>데이터 폴더</strong> 만 새로 쓰면 바로 해결)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 예: Open WebUI를 새 데이터 폴더로</span>
open-webui serve <span class="nt">--data-dir</span> <span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/openwebui-data-clean"</span>
</code></pre></div></div>

<p>혹은(Chroma를 직접 쓰는 경우):</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Chroma 영속 디렉터리를 새로</span>
<span class="nb">export </span><span class="nv">CHROMA_PERSIST_DIRECTORY</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/chroma-data-clean"</span>
<span class="c"># 앱/스크립트 재실행</span>
</code></pre></div></div>

<blockquote>
  <p>장점: 기존 파일 건드리지 않음.<br />
 단점: 이전 대화/인덱스는 새 폴더로 분리됨(필요하면 나중에 옮길 수 있음).</p>
</blockquote>

<hr />

<h2 id="2-기존-db에서-해당-테이블만-삭제">2) 기존 DB에서 해당 테이블만 삭제</h2>

<p>“그 DB 파일을 그대로 쓰되, 충돌 테이블만 정리”하는 방법입니다. (데이터가 날아갈 수 있으니 <strong>진짜 필요 없을 때만</strong>)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># DB 파일 위치 파악</span>
<span class="c"># (예: open-webui의 --data-dir 안, chroma.sqlite / chroma.db / app.db 등)</span>
<span class="c"># 못 찾겠으면:</span>
<span class="c"># find "$HOME" -maxdepth 3 -type f \( -name "*.db" -o -name "*.sqlite*" \)</span>

<span class="c"># 스키마 확인</span>
sqlite3 /path/to/your.db <span class="s2">".tables"</span>
sqlite3 /path/to/your.db <span class="s2">".schema embeddings"</span>

<span class="c"># 정말 삭제해도 되는지 건수 확인</span>
sqlite3 /path/to/your.db <span class="s2">"SELECT COUNT(*) FROM embeddings;"</span>

<span class="c"># 삭제 (주의: 복구 어려움)</span>
sqlite3 /path/to/your.db <span class="s2">"DROP TABLE embeddings;"</span>
</code></pre></div></div>

<p>그 다음 앱을 다시 실행해 보세요. 초기화/마이그레이션 단계에서 테이블을 다시 만들 겁니다.</p>

<hr />

<h2 id="3-코드설정-쪽에서-이미-있으면-건너뛰기">3) 코드/설정 쪽에서 “이미 있으면 건너뛰기”</h2>

<p>만약 <strong>직접 작성한 스크립트</strong> 가 테이블을 만드는 거라면, 쿼리를 바꿔주세요:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sql

CREATE TABLE IF NOT EXISTS embeddings ( ... );
</code></pre></div></div>

<p>(가상 테이블 FTS5의 경우엔 <code class="language-plaintext highlighter-rouge">CREATE VIRTUAL TABLE IF NOT EXISTS</code> 지원 버전이 제한적일 수 있으니, 확실히 하려면 실행 전에 존재 여부를 체크해서 분기하세요.)</p>

<hr />

<h3 id="체크-포인트-왜-다시-생겼는지">체크 포인트 (왜 다시 생겼는지)</h3>

<ul>
  <li>
    <p><strong>같은 DB 파일을 두 프로세스가</strong> 각각 “초기화” 로직으로 시작 → 충돌.</p>
  </li>
  <li>
    <p>예전 버전/다른 앱이 같은 DB 파일을 사용 → 스키마 이름 겹침.</p>
  </li>
  <li>
    <p>마이그레이션 스크립트에 <code class="language-plaintext highlighter-rouge">IF NOT EXISTS</code>가 빠짐.</p>
  </li>
</ul>

<hr />

<p>필요하면 지금 쓰는 <strong>DB 파일 경로를 같이 점검</strong> 하고, “드랍 vs 새 폴더로 시작” 중 어떤 게 안전한지 바로 판단해 드릴게요. 사용 중인 데이터 디렉터리/DB 파일 경로만 알려주면 됩니다.</p>

<p class="chat--user">

openwebui를 분리된 공간망에서 서비스할거야. 뭐 따로 옵션을 주거나 해야할 것 있어?

</p>

<p>좋아—<strong>분리된 폐쇄망(air‑gapped/내부망)</strong>에서 Open WebUI를 안정적으로 돌릴 때 “꼭 챙기면 좋은 옵션”만 딱 정리해 줄게. 전부 pip 실행 기준이지만 Docker/쿠버네티스도 동일한 ENV 개념이야.</p>

<hr />

<h2 id="핵심만-6줄-요약">핵심만 6줄 요약</h2>

<ol>
  <li>
    <p><strong>OFFLINE_MODE</strong> 켜서 버전체크/외부 다운로드 비활성화</p>
  </li>
  <li>
    <p><strong>내부 도메인으로 WEBUI_URL</strong> 지정(SSO/리다이렉트용)</p>
  </li>
  <li>
    <p><strong>회원가입/권한 통제</strong> : ENABLE_SIGNUP, DEFAULT_USER_ROLE</p>
  </li>
  <li>
    <p><strong>웹검색/RAG 외부 호출</strong> 을 꺼두거나 내부 검색엔진만 허용</p>
  </li>
  <li>
    <p><strong>모델/임베딩</strong> 은 미리 캐시(모델 파일을 내부 경로에 준비)</p>
  </li>
  <li>
    <p><strong>PersistentConfig 주의</strong> : 처음 값이 DB에 저장됨(바꾸려면 UI에서 수정)</p>
  </li>
</ol>

<p>이게 전부야. 아래에 바로 쓸 수 있는 예시 붙일게.</p>

<hr />

<h2 id="최소-권장-환경변수-폐쇄망-안전판">최소 권장 환경변수 (폐쇄망 안전판)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) 오프라인 모드: 버전 체크/허깅페이스 자동 다운 등 비활성화</span>
<span class="nb">export </span><span class="nv">OFFLINE_MODE</span><span class="o">=</span>True  <span class="c"># 오프라인 동작 가이드에 명시됨 :contentReference[oaicite:0]{index=0}</span>

<span class="c"># 2) 내부 URL 명시(SSO/리다이렉트, 일부 기능에서 필수)</span>
<span class="nb">export </span><span class="nv">WEBUI_URL</span><span class="o">=</span><span class="s2">"https://openwebui.internal.example"</span>  <span class="c"># PersistentConfig 항목 :contentReference[oaicite:1]{index=1}</span>

<span class="c"># 3) 사용자 만들기 정책</span>
<span class="nb">export </span><span class="nv">ENABLE_SIGNUP</span><span class="o">=</span>False                  <span class="c"># 신규 가입 막기(초기 관리자만) :contentReference[oaicite:2]{index=2}</span>
<span class="nb">export </span><span class="nv">DEFAULT_USER_ROLE</span><span class="o">=</span><span class="s2">"pending"</span>          <span class="c"># 가입 허용 시에도 기본은 보류 권장 :contentReference[oaicite:3]{index=3}</span>

<span class="c"># 4) 웹검색 완전 차단(기본 False지만, 명시해 두면 좋음)</span>
<span class="nb">export </span><span class="nv">ENABLE_WEB_SEARCH</span><span class="o">=</span>False              <span class="c"># 웹검색 토글(퍼시스턴트) :contentReference[oaicite:4]{index=4}</span>

<span class="c"># 5) CORS/쿠키(내부 HTTPS라면 Secure 쿠키 사용 권장)</span>
<span class="nb">export </span><span class="nv">CORS_ALLOW_ORIGIN</span><span class="o">=</span><span class="s2">"https://openwebui.internal.example"</span>  <span class="c"># 기본은 * → 내부만 허용으로 조이기 :contentReference[oaicite:5]{index=5}</span>
<span class="nb">export </span><span class="nv">WEBUI_AUTH_COOKIE_SECURE</span><span class="o">=</span>True        <span class="c"># 내부망이더라도 HTTPS면 True 권장 :contentReference[oaicite:6]{index=6}</span>

<span class="c"># 6) 데이터 경로(영속)</span>
<span class="nb">export </span><span class="nv">DATA_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.open-webui"</span>         <span class="c"># 데이터 영속 경로 권장 설정 문서에 언급 :contentReference[oaicite:7]{index=7}</span>

<span class="c"># (pip 실행)</span>
open-webui serve <span class="nt">--port</span> 8080
</code></pre></div></div>

<blockquote>
  <p>참고: <strong>OFFLINE_MODE=True</strong> 로 두면 자동 업데이트 체크/임베딩 모델 자동 다운로드 등이 꺼지고, 오프라인에서도 오류 없이 동작하도록 보호해줘. 단, 외부 API·OAuth·웹검색 자체를 “기능적으로 막는” 스위치는 아니야. 네가 직접 끄거나 내부 리소스로만 연결해야 해. <a href="https://docs.openwebui.com/tutorials/offline-mode/">Open WebUI</a></p>
</blockquote>

<hr />

<h2 id="선택-내부-검색툴만-허용하고-싶다면">(선택) 내부 검색/툴만 허용하고 싶다면</h2>

<ul>
  <li>
    <p><strong>웹검색 완전 금지</strong> : <code class="language-plaintext highlighter-rouge">ENABLE_WEB_SEARCH=False</code> 유지. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
  </li>
  <li>
    <p><strong>내부 SearXNG만 사용</strong> : 자체 SearXNG를 세워서</p>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ENABLE_WEB_SEARCH</span><span class="o">=</span>True
<span class="nb">export </span><span class="nv">WEB_SEARCH_ENGINE</span><span class="o">=</span>searxng
<span class="nb">export </span><span class="nv">SEARXNG_QUERY_URL</span><span class="o">=</span><span class="s2">"http://searxng.internal/search?q=&lt;query&gt;&amp;format=json"</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>처럼 내부 엔드포인트만 쓰게 해도 돼. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>

<hr />

<h2 id="선택-내부-llm-엔드포인트만-쓰기">(선택) 내부 LLM 엔드포인트만 쓰기</h2>

<p>OpenAI‑호환 서버(예: 사내 vLLM/LM Studio/프록시 등)를 <strong>Connections</strong> 에서 추가하면 돼. Base URL을 내부 주소로만 잡으면 외부로 못 나가. 가이드는 “OpenAI/호환 서버 시작하기”에 있어. <a href="https://docs.openwebui.com/getting-started/quick-start/starting-with-openai/?utm_source=chatgpt.com">Open WebUI+1</a></p>

<hr />

<h2 id="임베딩whisper-같은-모델은-사전-캐시">임베딩/Whisper 같은 모델은 “사전 캐시”</h2>

<p>오프라인 모드에선 허깅페이스에서 <strong>자동 다운로드가 막히므로</strong> , 모델 파일을 <strong>미리</strong> 받아서 Open WebUI 캐시 경로에 넣어둬야 해:</p>

<ul>
  <li>
    <p>임베딩 모델: <code class="language-plaintext highlighter-rouge">/app/backend/data/cache/embedding/models/</code></p>
  </li>
  <li>
    <p>whisper: <code class="language-plaintext highlighter-rouge">/app/backend/data/cache/whisper/models/</code><br />
환경변수로 디폴트 모델도 지정 가능(<code class="language-plaintext highlighter-rouge">RAG_EMBEDDING_MODEL</code>, <code class="language-plaintext highlighter-rouge">WHISPER_MODEL</code>). <a href="https://docs.openwebui.com/tutorials/offline-mode/">Open WebUI</a></p>
  </li>
</ul>

<hr />

<h2 id="보안운영-팁필요한-것만">보안/운영 팁(필요한 것만)</h2>

<ul>
  <li>
    <p><strong>첫 계정이 관리자</strong> : 초기 셋업 때 만든 첫 계정이 Admin이라 사용자 승인/정책을 제어할 수 있어. <a href="https://docs.openwebui.com/getting-started/quick-start/?utm_source=chatgpt.com">Open WebUI</a></p>
  </li>
  <li>
    <p><strong>API 키 제어</strong> : 필요하면 <strong>API Key Endpoint Restrictions</strong> 로 허용 엔드포인트를 제한할 수 있어(내부 API만 허용 목록으로). <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
  </li>
  <li>
    <p><strong>PersistentConfig 주의</strong> : <code class="language-plaintext highlighter-rouge">ENABLE_SIGNUP</code>, <code class="language-plaintext highlighter-rouge">WEBUI_URL</code> 등은 <strong>처음 값이 내부 DB에 저장</strong> 돼. 나중에 바꾸려면 Admin UI에서 수정하거나 <code class="language-plaintext highlighter-rouge">ENABLE_PERSISTENT_CONFIG=False</code>로 일시 해제 후 적용. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
  </li>
  <li>
    <p><strong>프록시가 있는 내부망</strong> : 웹로더/웹검색이 내부 프록시만 통과하도록 <code class="language-plaintext highlighter-rouge">http_proxy/https_proxy/no_proxy</code>를 지원해. <a href="https://docs.openwebui.com/getting-started/env-configuration/">Open WebUI</a></p>
  </li>
</ul>

<hr />

<h2 id="체크리스트-진짜-최소">체크리스트 (진짜 최소)</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">OFFLINE_MODE=True</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">WEBUI_URL</code>을 내부 도메인으로 지정</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ENABLE_SIGNUP=False</code> 또는 기본 권한을 <code class="language-plaintext highlighter-rouge">pending</code>으로</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ENABLE_WEB_SEARCH=False</code>(또는 내부 SearXNG로 한정)</p>
  </li>
  <li>
    <p>임베딩/Whisper 모델 <strong>사전 캐시</strong> 완료</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DATA_DIR</code>로 영속 경로 지정</p>
  </li>
</ul>

<p>원하면 네 환경 변수/내부 엔드포인트에 맞춘 <strong>한 줄 실행 스크립트</strong>(pip용)를 바로 만들어 줄게.</p>

<p class="chat--user">

기본 포트 번호가 뭐야

</p>

<p>pip로 설치해서 <code class="language-plaintext highlighter-rouge">open-webui serve</code>로 실행하면 <strong>기본 포트는 8080</strong> 이에요.</p>

<ul>
  <li>
    <p>그래서 브라우저에서 <code class="language-plaintext highlighter-rouge">http://localhost:8080</code>으로 접속하면 됩니다.</p>
  </li>
  <li>
    <p>포트를 바꾸고 싶으면:</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>open-webui serve <span class="nt">--port</span> 3000
</code></pre></div></div>

<p>처럼 <code class="language-plaintext highlighter-rouge">--port</code> 옵션을 주면 돼요.</p>

<p class="chat--user">

endpoint로 모델 추가하는 법

</p>

<p>오케이—엔드포인트를 이미 알고 있다는 전제로, <strong>Open WebUI에 모델(프로바이더) 추가</strong> 하는 가장 쉬운 방법을 빠르게 정리할게요. (pip 설치 기준, 폐쇄망도 OK)</p>

<hr />

<h2 id="1-ui에서-추가-가장-간단">1) UI에서 추가 (가장 간단)</h2>

<ol>
  <li>
    <p>브라우저에서 Open WebUI 접속 → <strong>Settings → Models → Providers</strong></p>
  </li>
  <li>
    <p><strong>Add Provider</strong> 클릭 → 유형에서 <strong>OpenAI Compatible</strong>(또는 <strong>Ollama</strong>) 선택</p>
  </li>
  <li>
    <p>입력:</p>

    <ul>
      <li>
        <p><strong>Base URL</strong> : 예) <code class="language-plaintext highlighter-rouge">http://&lt;host&gt;:&lt;port&gt;/v1</code></p>
      </li>
      <li>
        <p><strong>API Key</strong> : 엔드포인트 키 (필요 없으면 빈 값/토큰형식에 맞게)</p>
      </li>
      <li>
        <p>(옵션) <strong>Custom Headers</strong> : 사내 프록시/게이트웨이에서 헤더 요구 시 추가</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Save</strong> → <strong>Refresh/Sync models</strong>(모델 목록 새로고침)</p>

    <ul>
      <li>목록이 비면 “<strong>Model name</strong> ”을 직접 입력해 수동으로 추가(엔진이 노출하는 정확한 모델 ID 필요)</li>
    </ul>
  </li>
  <li>
    <p>원하는 모델에 <strong>Set as default</strong>(기본 모델 지정)</p>
  </li>
</ol>

<blockquote>
  <p>vLLM/LM Studio/프록시류는 대부분 <code class="language-plaintext highlighter-rouge">…/v1</code>가 Base URL이고, 모델 ID는 서버가 가진 이름 그대로 써야 목록에 잘 뜹니다.</p>
</blockquote>

<hr />

<h2 id="2-환경변수로-미리-박아두고-실행-초기-자동-설정">2) 환경변수로 미리 박아두고 실행 (초기 자동 설정)</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># OpenAI-호환 엔드포인트 예시</span>
<span class="nb">export </span><span class="nv">OPENAI_API_BASE_URL</span><span class="o">=</span><span class="s2">"http://&lt;host&gt;:&lt;port&gt;/v1"</span>
<span class="nb">export </span><span class="nv">OPENAI_API_KEY</span><span class="o">=</span><span class="s2">"sk-xxxxxxxx"</span>   <span class="c"># 필요 없으면 생략 가능</span>
open-webui serve <span class="nt">--port</span> 8080
</code></pre></div></div>

<ul>
  <li>
    <p>실행 후 <strong>Settings → Models</strong> 에 들어가면 위 값이 반영되어 있음.</p>
  </li>
  <li>
    <p>여러 엔드포인트를 쓰려면 UI에서 프로바이더를 추가로 더 등록하세요.</p>
  </li>
</ul>

<hr />

<h2 id="3-선택-ollama-전용">3) (선택) Ollama 전용</h2>

<ul>
  <li>
    <p>UI에서 <strong>Ollama</strong> 유형 선택 후 <strong>Base URL</strong> : <code class="language-plaintext highlighter-rouge">http://&lt;host&gt;:11434</code></p>
  </li>
  <li>
    <p>또는</p>
  </li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OLLAMA_BASE_URL</span><span class="o">=</span><span class="s2">"http://&lt;host&gt;:11434"</span>
open-webui serve
</code></pre></div></div>

<hr />

<h2 id="4-연결-전-엔드포인트-정상인지-빠른-자가테스트">4) 연결 전 “엔드포인트 정상인지” 빠른 자가테스트</h2>

<h3 id="모델-목록-확인-openai-호환-표준">모델 목록 확인 (OpenAI 호환 표준)</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-sS</span> <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$OPENAI_API_KEY</span><span class="s2">"</span> <span class="se">\</span>
  &lt;BASE_URL&gt;/models
</code></pre></div></div>

<ul>
  <li>
    <p>200 OK + 모델 리스트가 나오면 OK.</p>
  </li>
  <li>
    <p>에러면 <strong>Base URL 끝에<code class="language-plaintext highlighter-rouge">/v1</code> 누락</strong>, 키/헤더, CORS/프록시 등을 점검.</p>
  </li>
</ul>

<hr />

<h2 id="5-흔한-이슈--바로-해결">5) 흔한 이슈 &amp; 바로 해결</h2>

<ul>
  <li>
    <p><strong>모델이 안 뜸</strong> :</p>

    <ul>
      <li>
        <p>Base URL이 <code class="language-plaintext highlighter-rouge">/v1</code>인지 확인</p>
      </li>
      <li>
        <p>내부망이면 <strong>모델 리스트 캐시</strong> 때문에 안 보일 수 → Settings에서 <strong>Refresh/Sync</strong></p>
      </li>
      <li>
        <p>그래도 안 뜨면 <strong>모델 ID 수동 입력</strong>(서버에서 쓰는 정확한 이름)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>401/403</strong> : 키 또는 커스텀 헤더 불일치. 게이트웨이가 요구하는 헤더를 <strong>Custom Headers</strong> 에 추가.</p>
  </li>
  <li>
    <p><strong>연결은 되는데 응답 에러</strong> :</p>

    <ul>
      <li>
        <p>엔진이 OpenAI Chat Completions 스펙 지원하는지 확인(vLLM/LM Studio는 보통 지원)</p>
      </li>
      <li>
        <p><strong>timeout</strong> 늘리기(서버가 느릴 때)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>폐쇄망</strong> : 외부 검색/다운로드가 필요 없게</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ENABLE_WEB_SEARCH=False</code>, <code class="language-plaintext highlighter-rouge">OFFLINE_MODE=True</code></p>
      </li>
      <li>
        <p>임베딩/Whisper 모델은 <strong>미리 캐시</strong>(필요 시)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="6-최소-예시가장-흔한-vllmlm-studio">6) 최소 예시(가장 흔한 vLLM/LM Studio)</h2>

<ul>
  <li>
    <p>Base URL: <code class="language-plaintext highlighter-rouge">http://10.0.0.5:8000/v1</code></p>
  </li>
  <li>
    <p>API Key: (없으면 비움)</p>
  </li>
  <li>
    <p>모델 ID: 서버가 노출하는 이름(예: <code class="language-plaintext highlighter-rouge">Meta-Llama-3-8B-Instruct</code>)</p>
  </li>
  <li>
    <p>저장 → Refresh → 기본 모델로 지정</p>
  </li>
</ul>

<hr />

<p>필요하면 <strong>당신이 가진 엔드포인트/모델ID/키 형식</strong> 에 맞춰서,<br />
한 번에 붙는 <strong>환경변수 스니펫</strong> 이나 <strong>UI 입력값 표</strong> 를 맞춤으로 뽑아줄게.</p>

<p class="chat--user">

모델 목록 새로고침은 어디있어?

</p>

<p>Open WebUI에서 <strong>모델 목록 새로고침(Refresh/Sync)</strong> 버튼은 <strong>Settings → Models</strong> 화면에 있습니다.</p>

<p>정확히는 이렇게 찾으면 돼요:</p>

<ol>
  <li>
    <p><strong>브라우저에서 Open WebUI 접속</strong></p>
  </li>
  <li>
    <p>좌측 메뉴에서 <strong>⚙ Settings</strong> 클릭</p>
  </li>
  <li>
    <p>상단 탭 중에서 <strong>Models</strong> 선택<br />
(여기서 이미 등록한 Provider들이 보입니다)</p>
  </li>
  <li>
    <p>각 Provider 카드(예: "OpenAI Compatible") 오른쪽 위에 <strong>⟳</strong> 아이콘(또는 "Refresh"/"Sync Models" 버튼)이 있어요.</p>
  </li>
  <li>
    <p>클릭하면 해당 엔드포인트에 <code class="language-plaintext highlighter-rouge">/models</code> 요청을 보내서 새로 모델 목록을 불러옵니다.</p>
  </li>
</ol>

<p>💡 참고:</p>

<ul>
  <li>
    <p>새로고침 후에도 목록에 안 뜨면, 해당 엔드포인트가 <strong>/models</strong> 응답에 모델 ID를 반환하지 않는 경우일 수 있습니다.<br />
이럴 땐 <strong>"Add model"</strong> 기능으로 모델 ID를 수동으로 넣어줘야 해요.</p>
  </li>
  <li>
    <p>목록 캐시는 내부적으로 TTL이 있어서, 버튼 없이도 일정 시간 지나면 갱신되지만, 수동으로 바로 보고 싶으면 여기서 눌러주면 됩니다.</p>
  </li>
</ul>

<hr />

<p>원하면 내가 UI 스크린샷처럼 생긴 구조를 그려서, <strong>Refresh 버튼이 정확히 어디 있는지</strong> 바로 보이게 해줄까요?<br />
그러면 한 번에 찾을 수 있을 거예요.</p>

<p class="chat--user">

이거 서버 꺼도 설정은 저장되지?

</p>

<p>네, <strong>서버 꺼도 설정은 저장됩니다.</strong></p>

<p>Open WebUI는 설정(모델 엔드포인트, 사용자 계정, UI 환경설정 등)을 <strong>백엔드 데이터베이스</strong> 에 저장합니다.</p>

<ul>
  <li>
    <p>pip 설치 시 기본 경로: <code class="language-plaintext highlighter-rouge">~/.open-webui</code> (또는 <code class="language-plaintext highlighter-rouge">--data-dir</code>로 지정한 경로)</p>
  </li>
  <li>
    <p>Docker 실행 시: <code class="language-plaintext highlighter-rouge">/app/backend/data</code> 볼륨</p>
  </li>
</ul>

<p>여기 안에는 SQLite DB(<code class="language-plaintext highlighter-rouge">app.db</code>), 캐시, 업로드 파일 등이 들어 있고,<br />
서버를 꺼도 이 디렉터리만 유지되면 다음 실행 시 그대로 복원됩니다.</p>

<hr />

<p>📌 <strong>주의할 점</strong></p>

<ul>
  <li>
    <p>Docker로 띄울 땐 <strong>볼륨 마운트</strong> 안 하면 컨테이너 삭제 시 데이터도 같이 날아갑니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ENABLE_PERSISTENT_CONFIG=True</code>(기본값)일 때는 환경변수 값도 최초 기동 시점에 DB에 저장돼서, 이후 서버 재시작해도 DB 값이 우선됩니다.</p>
  </li>
  <li>
    <p>설정 초기화하고 싶으면 <code class="language-plaintext highlighter-rouge">--data-dir</code> 새로 지정하거나 <code class="language-plaintext highlighter-rouge">app.db</code>만 지우면 됩니다.</p>
  </li>
</ul>

<hr />

<p>원하면 내가 <strong>현재 Open WebUI가 설정 저장하는 경로를 확인하는 방법</strong> 도 알려줄게.<br />
그러면 껐다 켜도 그대로 유지되는지 바로 테스트할 수 있어요.</p>

<p class="chat--user">

아레나 모델은 뭐야?

</p>

<p>아, “Arena Model(Arena 모드)”에 대해 물어보신 거군요! Open WebUI에서 제공하는 <strong>모델 평가 기능</strong> 으로, <strong>A/B 테스팅</strong> 을 쉽게 할 수 있는 모드입니다.</p>

<hr />

<h2 id="arena-model이란">Arena Model이란?</h2>

<ul>
  <li>
    <p><strong>여러 모델을 묶은 그룹</strong> 에서 <strong>무작위로 하나를 선택</strong> 해 응답을 생성하는 모드입니다. <a href="https://docs.openwebui.com/features/evaluation/?utm_source=chatgpt.com">Open WebUI+10</a><a href="https://github.com/open-webui/open-webui/discussions/6538?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p>생성된 응답에는 <strong>어떤 모델이 썼는지 숨겨진 상태</strong> 여서, <strong>블라인드 테스트</strong> 처럼 비교할 수 있어요.</p>
  </li>
  <li>
    <p>내가 그 응답에 "<strong>좋아요/싫어요</strong> "를 누르면, 어떤 모델이 썼는지 나중에 확인할 수 있고, 리더보드를 통해 <strong>모델 간 성능 순위</strong> 를 확인할 수 있습니다. <a href="https://docs.openwebui.com/features/evaluation/?utm_source=chatgpt.com">Open WebUI</a><a href="https://github.com/open-webui/open-webui/discussions/6538?utm_source=chatgpt.com">GitHub</a></p>
  </li>
</ul>

<hr />

<h2 id="arena-model-사용법-요약">Arena Model 사용법 요약</h2>

<ol>
  <li>
    <p><strong>Admin Panel → Settings → Evaluations</strong> 에서 <strong>Arena Model</strong> 그룹을 설정합니다.</p>
  </li>
  <li>
    <p>평가에 포함할 모델들을 선택해 그룹에 추가합니다.</p>
  </li>
  <li>
    <p>챗 화면에서 <strong>Arena Model</strong> 을 선택하면, 랜덤으로 모델이 하나 뽑혀 응답 생성.</p>
  </li>
  <li>
    <p>응답에 <strong>좋아요/싫어요</strong> 클릭 → 뒤에 어떤 모델이 답했는지 확인 가능.</p>
  </li>
  <li>
    <p>리더보드를 통해 각 모델의 비교 성능을 시각화할 수 있습니다. <a href="https://docs.openwebui.com/features/evaluation/?utm_source=chatgpt.com">Open WebUI+5</a></p>
  </li>
</ol>

<hr />

<h2 id="왜-유용할까">왜 유용할까?</h2>

<ul>
  <li>
    <p><strong>편견 없는 비교</strong> : 사용자가 모델 이름을 몰라서 선입견 없이 평가 가능.</p>
  </li>
  <li>
    <p><strong>행동 기반 선호</strong> : 좋아요/싫어요가 자동으로 더 좋은 모델을 띄워줌.</p>
  </li>
  <li>
    <p><strong>리더보드 제공</strong> : 설정한 모델 그룹 내에서 <strong>어떤 모델이 강한지 한눈에 확인 가능</strong>.</p>
  </li>
</ul>

<hr />

<p>필요하시면, <strong>관리자 설정 화면 스크린샷</strong> , 혹은 실제 Arena Model을 켜고 사용하는 예시 절차 스크립트까지 만들어드릴 수 있어요. 필요하신가요?</p>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Reasoning effort 실험 계획</title><link href="https://hvppyarchive.github.io/llm/reasoning-effort-test/" rel="alternate" type="text/html" title="Reasoning effort 실험 계획" /><published>2025-08-11T17:59:44+09:00</published><updated>2025-08-11T17:59:44+09:00</updated><id>https://hvppyarchive.github.io/llm/reasoning-effort-test</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/reasoning-effort-test/"><![CDATA[<p class="chat--user">

LLM 모델의 Reasoning 강도 설정을 바꿔보며 어떤 차이가 나는지 실험을 해보고 싶어. 내가 쓰는 모델은 “Reasoning effort: High"를 넣어주면 설정을 바꿀 수있어. medium, Low도 가능해. endpoint url이 주어졌을 때 실험 계획을 세우고 스텝 바이 스텝으로 알려줘.

</p>

<p>좋아요! “Reasoning effort: High/Medium/Low”를 바꿔가며 <strong>어떤 차이가 실제로 나는지</strong> 확인하려면, 변수·지표·실험 설계를 딱 정해 놓고 돌리는 게 핵심입니다. 아래는 <strong>엔드포인트 URL만 있으면</strong> 그대로 따라 할 수 있는 <strong>스텝-바이-스텝 실험 계획</strong> 이에요.</p>

<hr />

<h1 id="1-목적과-가설-정하기">1) 목적과 가설 정하기</h1>

<ol>
  <li>
    <p><strong>목적:</strong> Reasoning effort 수준에 따라 <strong>정확도/추론 성공률</strong> , <strong>지연 시간(latency)</strong> , <strong>토큰/비용</strong> 이 어떻게 달라지는지 정량 비교.</p>
  </li>
  <li>
    <p><strong>가설(예시):</strong></p>

    <ul>
      <li>
        <p>High &gt; Medium &gt; Low 순으로 정확도↑, 반대로 지연 시간·비용은 High가 가장 큼.</p>
      </li>
      <li>
        <p>난도 높은 문제(멀티스텝, 함정 포함)는 High의 이점이 더 큼.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="2-비교할-조건-정의">2) 비교할 조건 정의</h1>

<ul>
  <li>
    <p><strong>독립변수:</strong> <code class="language-plaintext highlighter-rouge">reasoning_effort ∈ {low, medium, high}</code></p>
  </li>
  <li>
    <p><strong>통제변수:</strong> 동일 모델/버전, temperature(예: 0.2), max_tokens, 시스템 프롬프트, seed(가능하면 고정), API 엔드포인트.</p>
  </li>
  <li>
    <p><strong>반복수:</strong> 각 프롬프트×effort별 <strong>n=3~5회 반복</strong>(랜덤성 평균화).</p>
  </li>
  <li>
    <p><strong>평가 세트:</strong> 3개 버킷 권장</p>

    <ul>
      <li>
        <p>(A) <strong>정확/오답이 명확한 문제:</strong> 예) 수학/논리(정답 존재) 50~100문항</p>
      </li>
      <li>
        <p>(B) <strong>장문 요약/분류/정보추출:</strong> 기준 답안 또는 스코어러 있음</p>
      </li>
      <li>
        <p>(C) <strong>코딩/퍼즐/툴-이용 시나리오:</strong> 테스트케이스로 채점 가능</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>샘플 크기:</strong> 각 버킷당 최소 50개(가능하면 100개). 적을수록 반복수를 늘려 불확실성 보완.</p>
  </li>
</ul>

<hr />

<h1 id="3-지표-설계">3) 지표 설계</h1>

<p><strong>핵심 지표</strong></p>

<ul>
  <li>
    <p><strong>정확도/스코어</strong> : 정답률, F1/ROUGE/BLEU, 테스트케이스 통과율 등 태스크별 자동 채점.</p>
  </li>
  <li>
    <p><strong>지연 시간</strong> : end-to-end(요청~응답 수신) ms.</p>
  </li>
  <li>
    <p><strong>비용/토큰</strong> : input/output/reasoning 토큰(가능 시) 및 총 비용.</p>
  </li>
  <li>
    <p><strong>실패율</strong> : 타임아웃/에러율.</p>
  </li>
</ul>

<p><strong>보조 지표</strong></p>

<ul>
  <li>
    <p><strong>스텝 수 추정</strong> : 응답 길이(토큰)로 간접 추정.</p>
  </li>
  <li>
    <p><strong>일관성</strong> : 반복 응답 간 편차(분산).</p>
  </li>
</ul>

<hr />

<h1 id="4-실험-디자인">4) 실험 디자인</h1>

<ol>
  <li>
    <p><strong>페어드 테스트(권장):</strong> 같은 프롬프트를 Low/Med/High 모두에 돌려 <strong>쌍대 비교</strong>.</p>
  </li>
  <li>
    <p><strong>무작위 순서화:</strong> (프롬프트 i)×(effort j) 실행 순서를 무작위로 섞음(순서 효과 제거).</p>
  </li>
  <li>
    <p><strong>라틴 스퀘어(선택):</strong> 순서 편향이 걱정되면 적용.</p>
  </li>
  <li>
    <p><strong>리트라이 규칙:</strong> 타임아웃/429는 <strong>지수 백오프</strong> 로 2~3회 재시도, 실패는 로그에 표기.</p>
  </li>
</ol>

<hr />

<h1 id="5-데이터-포맷로그-스키마">5) 데이터 포맷(로그 스키마)</h1>

<p>각 호출마다 아래를 저장하세요(JSON line 추천).</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"prompt_id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"A_023"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"bucket"</span><span class="p">:</span><span class="w"> </span><span class="s2">"math"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"effort"</span><span class="p">:</span><span class="w"> </span><span class="s2">"high|medium|low"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"trial"</span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
  </span><span class="nl">"request_ts"</span><span class="p">:</span><span class="w"> </span><span class="s2">"..."</span><span class="p">,</span><span class="w">
  </span><span class="nl">"latency_ms"</span><span class="p">:</span><span class="w"> </span><span class="mi">842</span><span class="p">,</span><span class="w">
  </span><span class="nl">"input_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">312</span><span class="p">,</span><span class="w">
  </span><span class="nl">"output_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">521</span><span class="p">,</span><span class="w">
  </span><span class="nl">"reasoning_tokens"</span><span class="p">:</span><span class="w"> </span><span class="mi">409</span><span class="p">,</span><span class="w">     </span><span class="err">//</span><span class="w"> </span><span class="err">제공되면</span><span class="w">
  </span><span class="nl">"cost_usd"</span><span class="p">:</span><span class="w"> </span><span class="mf">0.0123</span><span class="p">,</span><span class="w">          </span><span class="err">//</span><span class="w"> </span><span class="err">단가표로</span><span class="w"> </span><span class="err">계산</span><span class="w">
  </span><span class="nl">"response_text"</span><span class="p">:</span><span class="w"> </span><span class="s2">"..."</span><span class="p">,</span><span class="w">
  </span><span class="nl">"tool_calls"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">            </span><span class="err">//</span><span class="w"> </span><span class="err">있으면</span><span class="w">
  </span><span class="nl">"error"</span><span class="p">:</span><span class="w"> </span><span class="kc">null</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<hr />

<h1 id="6-실행-방법엔드포인트-예시">6) 실행 방법(엔드포인트 예시)</h1>

<p>아래에서 <code class="language-plaintext highlighter-rouge">ENDPOINT_URL</code>과 <code class="language-plaintext highlighter-rouge">API_KEY</code>만 바꿔 쓰면 됩니다.<br />
Effort는 <strong>요청 바디</strong> 에 <code class="language-plaintext highlighter-rouge">reasoning_effort</code> 필드로 넣는다고 가정했습니다. (예: <code class="language-plaintext highlighter-rouge">"high"|"medium"|"low"</code>)</p>

<h2 id="a-curl-단건-테스트">(A) cURL 단건 테스트</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> POST <span class="s2">"</span><span class="nv">$ENDPOINT_URL</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$API_KEY</span><span class="s2">"</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{
    "model": "your-model-id",
    "reasoning_effort": "high",
    "temperature": 0.2,
    "max_tokens": 1024,
    "seed": 42,
    "messages": [
      {"role": "system", "content": "You are a helpful assistant."},
      {"role": "user", "content": "문제: 12개의 사과를 3명에게 공평하게 나누면 한 사람당 몇 개인가?"}
    ]
  }'</span>
</code></pre></div></div>

<h2 id="b-파이썬-배치-스크립트재현-가능-로그-저장">(B) 파이썬 배치 스크립트(재현 가능, 로그 저장)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">random</span><span class="p">,</span> <span class="n">uuid</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="n">ENDPOINT_URL</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">ENDPOINT_URL</span><span class="sh">"</span><span class="p">)</span>
<span class="n">API_KEY</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">API_KEY</span><span class="sh">"</span><span class="p">)</span>
<span class="n">MODEL</span> <span class="o">=</span> <span class="sh">"</span><span class="s">your-model-id</span><span class="sh">"</span>

<span class="n">HEADERS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">Authorization</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Bearer </span><span class="si">{</span><span class="n">API_KEY</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">Content-Type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">application/json</span><span class="sh">"</span>
<span class="p">}</span>

<span class="n">EFFORTS</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">low</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">medium</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">high</span><span class="sh">"</span><span class="p">]</span>
<span class="n">TEMPERATURE</span> <span class="o">=</span> <span class="mf">0.2</span>
<span class="n">SEED</span> <span class="o">=</span> <span class="mi">42</span>
<span class="n">MAX_TOKENS</span> <span class="o">=</span> <span class="mi">1024</span>
<span class="n">REPEATS</span> <span class="o">=</span> <span class="mi">3</span>  <span class="c1"># 각 프롬프트×effort 반복 수
</span>
<span class="c1"># 프롬프트 목록 예시
</span><span class="n">dataset</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">prompt_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">M_001</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bucket</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">math</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">세 수의 평균이 10이고...</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">{</span><span class="sh">"</span><span class="s">prompt_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">S_014</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bucket</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">summary</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">아래 글을 1문장으로 요약...</span><span class="sh">"</span><span class="p">},</span>
    <span class="c1"># ... (CSV/JSON에서 로드 권장)
</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">call_model</span><span class="p">(</span><span class="n">user_text</span><span class="p">,</span> <span class="n">effort</span><span class="p">):</span>
    <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">MODEL</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">reasoning_effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">effort</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">:</span> <span class="n">TEMPERATURE</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="n">MAX_TOKENS</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">seed</span><span class="sh">"</span><span class="p">:</span> <span class="n">SEED</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_text</span><span class="p">}</span>
        <span class="p">]</span>
    <span class="p">}</span>
    <span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">ENDPOINT_URL</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">HEADERS</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">)</span>
    <span class="n">dt</span> <span class="o">=</span> <span class="nf">int</span><span class="p">((</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">t0</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="n">status_code</span> <span class="o">!=</span> <span class="mi">200</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">dt</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">status_code</span><span class="p">,</span> <span class="sh">"</span><span class="s">body</span><span class="sh">"</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">text</span><span class="p">}</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
    <span class="c1"># API 사양에 맞게 파싱하세요
</span>    <span class="n">out_text</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">choices</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">usage</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">usage</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
    <span class="k">return</span> <span class="n">dt</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">out_text</span><span class="p">,</span> <span class="sh">"</span><span class="s">usage</span><span class="sh">"</span><span class="p">:</span> <span class="n">usage</span><span class="p">},</span> <span class="bp">None</span>

<span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">2025</span><span class="p">)</span>
<span class="n">rows</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">pairs</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">dataset</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">eff</span> <span class="ow">in</span> <span class="n">EFFORTS</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">trial</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">REPEATS</span><span class="p">):</span>
            <span class="n">pairs</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">item</span><span class="p">,</span> <span class="n">eff</span><span class="p">,</span> <span class="n">trial</span><span class="p">))</span>

<span class="n">random</span><span class="p">.</span><span class="nf">shuffle</span><span class="p">(</span><span class="n">pairs</span><span class="p">)</span>

<span class="k">for</span> <span class="n">item</span><span class="p">,</span> <span class="n">eff</span><span class="p">,</span> <span class="n">trial</span> <span class="ow">in</span> <span class="n">pairs</span><span class="p">:</span>
    <span class="n">latency_ms</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="nf">call_model</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">],</span> <span class="n">eff</span><span class="p">)</span>
    <span class="n">row</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">uuid</span><span class="p">.</span><span class="nf">uuid4</span><span class="p">()),</span>
        <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(),</span>
        <span class="sh">"</span><span class="s">prompt_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">item</span><span class="p">[</span><span class="sh">"</span><span class="s">prompt_id</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">bucket</span><span class="sh">"</span><span class="p">:</span> <span class="n">item</span><span class="p">[</span><span class="sh">"</span><span class="s">bucket</span><span class="sh">"</span><span class="p">],</span>
        <span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">eff</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">trial</span><span class="sh">"</span><span class="p">:</span> <span class="n">trial</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">latency_ms</span><span class="sh">"</span><span class="p">:</span> <span class="n">latency_ms</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">input_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">usage</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">prompt_tokens</span><span class="sh">"</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">output_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">usage</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">completion_tokens</span><span class="sh">"</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">reasoning_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">usage</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">reasoning_tokens</span><span class="sh">"</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">cost_usd</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span>  <span class="c1"># 단가표로 후처리 계산
</span>        <span class="sh">"</span><span class="s">response_text</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">result</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="n">err</span>
    <span class="p">}</span>
    <span class="n">rows</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">item</span><span class="p">[</span><span class="sh">"</span><span class="s">prompt_id</span><span class="sh">"</span><span class="p">],</span> <span class="n">eff</span><span class="p">,</span> <span class="n">trial</span><span class="p">,</span> <span class="sh">"</span><span class="s">latency:</span><span class="sh">"</span><span class="p">,</span> <span class="n">latency_ms</span><span class="p">,</span> <span class="sh">"</span><span class="s">ms</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ok</span><span class="sh">"</span> <span class="k">if</span> <span class="ow">not</span> <span class="n">err</span> <span class="k">else</span> <span class="sh">"</span><span class="s">ERR</span><span class="sh">"</span><span class="p">)</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">runs.jsonl</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Saved runs.jsonl</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="7-자동-채점품질-평가">7) 자동 채점/품질 평가</h1>

<ul>
  <li>
    <p><strong>정답형 문제:</strong> 정답 키와 딱 매칭(문자 정규화 후).</p>
  </li>
  <li>
    <p><strong>요약/분류:</strong> 정답 레이블/참조 요약과 비교(F1/ROUGE 등).</p>
  </li>
  <li>
    <p><strong>코딩:</strong> 테스트케이스 실행 통과율.</p>
  </li>
  <li>
    <p><strong>주관형 품질(선택):</strong> 블라인드 <strong>휴먼 평가 가이드</strong> 예시</p>

    <ul>
      <li>
        <p>관련성(0–5), 사실성(0–5), 구조/명료성(0–5), 과잉추론/환각(감점).</p>
      </li>
      <li>
        <p>평가자는 effort 값을 모른 채로 평가(이중맹검).</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="8-분석-계획스텝별">8) 분석 계획(스텝별)</h1>

<ol>
  <li>
    <p><strong>전처리:</strong> 프롬프트·effort·trial로 그룹핑, trial 평균(또는 중위) 계산.</p>
  </li>
  <li>
    <p><strong>기본 통계:</strong> effort별 평균 정확도/지연/비용 표·박스플롯.</p>
  </li>
  <li>
    <p><strong>쌍대 비교:</strong> 같은 프롬프트 기준으로</p>

    <ul>
      <li>
        <p>정량지표(정답률 등): <strong>윌콕슨 부호순위 검정</strong> 또는 <strong>짝지은 t-검정</strong></p>
      </li>
      <li>
        <p>effort 3수준 동시 비교: <strong>반복측정 ANOVA</strong> 또는 <strong>프리드먼 검정</strong></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>효과크기 산출:</strong> Cliff’s delta / Cohen’s d.</p>
  </li>
  <li>
    <p><strong>신뢰구간:</strong> 부트스트랩(프롬프트 단위 리샘플) 95% CI.</p>
  </li>
  <li>
    <p><strong>난이도 교호작용:</strong> 버킷(A/B/C)별로 분리해서 동일 분석.</p>
  </li>
  <li>
    <p><strong>비용-효용 곡선:</strong> x축=비용(또는 토큰), y축=정확도(또는 승률)로 <strong>프런티어</strong> 시각화.</p>
  </li>
</ol>

<hr />

<h1 id="9-결론-도출-체크리스트">9) 결론 도출 체크리스트</h1>

<ul>
  <li>
    <p>High가 <strong>얼마나</strong> 더 정확한가? (절대/상대 개선 %)</p>
  </li>
  <li>
    <p>그 개선이 <strong>통계적으로 유의</strong> 한가? (p값/CI)</p>
  </li>
  <li>
    <p><strong>추가 지연/비용 대비 가치</strong> 가 있는가? (업무 케이스별)</p>
  </li>
  <li>
    <p>어떤 <strong>태스크</strong> 에서 High의 이득이 특히 큰가?</p>
  </li>
  <li>
    <p>운영 권장치(예: “기본 Medium, 실패/난해 시 High 재시도”).</p>
  </li>
</ul>

<hr />

<h1 id="10-리스크주의-사항">10) 리스크/주의 사항</h1>

<ul>
  <li>
    <p><strong>일관된 시드·온도</strong> 로 공정성 확보.</p>
  </li>
  <li>
    <p><strong>프롬프트 누수 방지:</strong> 정답/해설을 시스템/컨텍스트에 포함하지 않기.</p>
  </li>
  <li>
    <p><strong>체인오브소트(내적추론) 노출</strong> 은 평가에 포함하되, 외부 배포/저장 정책 준수.</p>
  </li>
  <li>
    <p><strong>레이트 리밋</strong> 과 <strong>타임아웃</strong> 대비(백오프, 큐잉).</p>
  </li>
  <li>
    <p><strong>데이터 보호:</strong> 민감 데이터 비익명 전송 금지.</p>
  </li>
</ul>

<hr />

<h1 id="11-산출물템플릿">11) 산출물(템플릿)</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">runs.jsonl</code> 원시 로그</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">metrics.csv</code> (프롬프트×effort 집계표)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">report.md</code> (요약: 설정, 데이터, 결과, 결론, 한계)</p>
  </li>
</ul>

<hr />

<h1 id="12-빠른-파일럿30분-컷">12) 빠른 파일럿(30분 컷)</h1>

<ol>
  <li>
    <p>버킷 A에서 30문항만 추려서 Low/Med/High 각 2회씩.</p>
  </li>
  <li>
    <p>정확도·지연·토큰만 우선 비교.</p>
  </li>
  <li>
    <p>효과 있으면 전체 배치 확장.</p>
  </li>
</ol>

<hr />

<p>필요하면 <strong>채점 스크립트/리포트 노트북(그래프 포함)</strong>도 만들어 드릴게요.<br />
엔드포인트 사양이 약간 다르면(예: <code class="language-plaintext highlighter-rouge">reasoning_effort</code> 키 이름, usage 필드 명) 알려주시면 위 코드/스키마를 맞춰 드리겠습니다.</p>

<p class="chat--user">

데이터가 없어 이런 걸 하는 라이브러리 없나?

</p>

<p>LLM의 “Reasoning effort” 설정을 직접 비교해 보고 싶은데, 직접 데이터가 없어 번거로우시죠? 다행히, 이미 다양한 <strong>LLM 평가 라이브러리</strong> 가 있어 실험 기반 마련에 훨씬 수월하게 접근할 수 있어요.</p>

<hr />

<h2 id="주요-오픈소스-평가-라이브러리-소개">주요 오픈소스 평가 라이브러리 소개</h2>

<h3 id="1-openai-evals">1. <strong>OpenAI Evals</strong></h3>

<ul>
  <li>OpenAI에서 제공하는 공식 <strong>평가 프레임워크</strong> 로, 기본 벤치마크부터 커스텀 평가까지 지원합니다.<a href="https://github.com/openai/evals?utm_source=chatgpt.com">GitHub</a></li>
</ul>

<h3 id="2-eleutherais-lm-evaluation-harness">2. <strong>EleutherAI’s lm-evaluation-harness</strong></h3>

<ul>
  <li>수십여 개의 학술 벤치마크를 한 곳에서 실행 가능하고, 자체 API뿐 아니라 Hugging Face 모델, GPT‑NeoX, Megatron‑DeepSpeed 등 다양한 모델을 지원합니다.<a href="https://github.com/EleutherAI/lm-evaluation-harness?utm_source=chatgpt.com">GitHub</a></li>
</ul>

<h3 id="3-deepeval-confident-ai">3. <strong>DeepEval (Confident AI)</strong></h3>

<ul>
  <li>Pytest 기반으로 다양한 메트릭(요약, 환각 등)을 제공하여 손쉽게 LLM 출력을 테스트할 수 있는 오픈소스 프레임워크입니다.<a href="https://www.reddit.com/r/LLMDevs/comments/1i6r1h9/top_6_open_source_llm_evaluation_frameworks/?utm_source=chatgpt.com">Reddit</a><a href="https://medium.com/%40zilliz_learn/top-10-rag-llm-evaluation-tools-you-dont-want-to-miss-a0bfabe9ae19?utm_source=chatgpt.com">Medium</a></li>
</ul>

<h3 id="4-lighteval-hugging-face">4. <strong>LightEval (Hugging Face)</strong></h3>

<ul>
  <li>다양한 벤치마크와 메트릭을 하나의 파이프라인으로 통합한 평가 툴킷으로, Transformers, Accelerate, Hugging Face Hub와 유기적으로 연동됩니다.<a href="https://www.cohorte.co/blog/lighteval-deep-dive-hugging-faces-all-in-one-framework-for-llm-evaluation?utm_source=chatgpt.com">Cohorte</a></li>
</ul>

<h3 id="5-evidently-llm-as-a-judge">5. <strong>Evidently (LLM-as-a-Judge)</strong></h3>

<ul>
  <li>LLM을 평가자로 사용하는 “LLM‑as‑a‑Judge” 방식에 특화된 오픈소스 라이브러리로, 상세한 평가 기준과 대시보드를 제공하며 최근까지도 업데이트되고 있어요.<a href="https://www.evidentlyai.com/llm-guide/llm-as-a-judge?utm_source=chatgpt.com">Evidently AI+3</a></li>
</ul>

<h3 id="6-verdict">6. <strong>Verdict</strong></h3>

<ul>
  <li>“LLM-as-a-Judge” 접근을 강화한 오픈소스 라이브러리로, 검증, 토론(debate), 집계(aggregation) 같은 모듈 기반 평가 파이프라인을 제공해 평가 신뢰도를 높입니다.<a href="https://arxiv.org/abs/2502.18018?utm_source=chatgpt.com">arXiv</a></li>
</ul>

<h3 id="7-llm-reasoners--autorace">7. <strong>LLM Reasoners + AutoRace</strong></h3>

<ul>
  <li>체인 오브 추론(chain-of‑thought)처럼 단계별 reasoning을 자동으로 평가하는 프레임워크이며, reasoning 알고리즘을 모듈화한 라이브러리도 포함되어 있습니다.<a href="https://arxiv.org/abs/2404.05221?utm_source=chatgpt.com">arXiv</a></li>
</ul>

<h3 id="8-openr">8. <strong>OpenR</strong></h3>

<ul>
  <li>오픈소스 프레임워크로, 추론능력을 향상시키기 위한 강화학습(RL), test-time compute, 과정 감독(process supervision) 등을 통합한 플랫폼입니다.<a href="https://arxiv.org/abs/2410.09671?utm_source=chatgpt.com">arXiv</a></li>
</ul>

<hr />

<h2 id="추천-실험-활용-방안">추천 실험 활용 방안</h2>

<table>
  <thead>
    <tr>
      <th>목표</th>
      <th>추천 라이브러리</th>
      <th>활용법</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>기본적인 정확도·지연·토큰 비교</td>
      <td><strong>lm-evaluation-harness</strong> , <strong>OpenAI Evals</strong> , <strong>LightEval</strong></td>
      <td>벤치마크 태스크로 실험 자동화.</td>
    </tr>
    <tr>
      <td>출력의 질적 평가 (환각, 요약 퀄리티 등)</td>
      <td><strong>DeepEval</strong> , <strong>Evidently</strong></td>
      <td>Pytest 기반 테스트 또는 LLM-judge 활용.</td>
    </tr>
    <tr>
      <td>Reasoning 과정 분석</td>
      <td><strong>LLM Reasoners + AutoRace</strong></td>
      <td>reasoning 단계별 성능 정량화.</td>
    </tr>
    <tr>
      <td>고급 신뢰도 높은 평가</td>
      <td><strong>Verdict</strong></td>
      <td>평가자의 검증 및 합의 절차 포함.</td>
    </tr>
    <tr>
      <td>전체적인 reasoning pipeline 강화</td>
      <td><strong>OpenR</strong></td>
      <td>test-time compute + RL 통합 실험 설계.</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="요약">요약</h2>

<p>물리적인 데이터셋 없이도, 위와 같은 오픈소스 <strong>評價 라이브러리</strong> 들을 활용하면 “Reasoning effort” 설정에 따른 비교 실험 설계가 훨씬 간편해져요.</p>

<p>— <strong>기본 비교</strong> 에는 <code class="language-plaintext highlighter-rouge">lm-evaluation-harness</code> 나 <code class="language-plaintext highlighter-rouge">OpenAI Evals</code> 추천<br />
— <strong>정성적 평가</strong> 엔 <code class="language-plaintext highlighter-rouge">DeepEval</code>, <code class="language-plaintext highlighter-rouge">Evidently</code><br />
— <strong>특화된 reasoning 평가</strong> 엔 <code class="language-plaintext highlighter-rouge">LLM Reasoners</code>, <code class="language-plaintext highlighter-rouge">Verdict</code><br />
— <strong>훈련/추론 중심 통합 실험</strong> 엔 <code class="language-plaintext highlighter-rouge">OpenR</code></p>

<p>필요하시면 해당 라이브러리 중 하나를 골라 <strong>설치부터 실험 코드 예제</strong> 까지 도와 드릴게요!</p>

<p class="chat--user">

할게 너무 많네 내가 실험하려는 모델은 gpt oss야 이미 한 사람 없을까? 우리 default 모델이 어떤 reasoning level이 default인지 간단히 실험해보고 싶어

</p>

<p>맞아요—이미 해본 사람들이 있고, 문서에도 <strong>기본값은 보통 “medium”</strong> 으로 명시돼요. 예컨대 Databricks의 reasoning 모델 가이드에 <code class="language-plaintext highlighter-rouge">reasoning_effort</code> 값으로 <code class="language-plaintext highlighter-rouge">"low"</code>, <strong><code class="language-plaintext highlighter-rouge">"medium"(default)</code></strong> , <code class="language-plaintext highlighter-rouge">"high"</code>가 나온다고 되어 있어요. 또 gpt-oss 소개/모델 카드에서도 세 레벨을 지원한다고 합니다. <a href="https://docs.databricks.com/aws/en/machine-learning/model-serving/query-reason-models?utm_source=chatgpt.com">Databricks Documentation</a><a href="https://openai.com/index/introducing-gpt-oss/?utm_source=chatgpt.com">OpenAI+1</a></p>

<p>다만 “우리 인프라/엔드포인트”의 <strong>실제 기본값</strong> 은 게이트웨이나 프록시에서 덮어쓸 수도 있으니, <strong>초미니 검증 실험</strong> 으로 확정하는 게 제일 깔끔해요. 아래 그대로 돌려보면 5분 컷.</p>

<hr />

<h1 id="초간단-검증-플랜-step-by-step">초간단 검증 플랜 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>테스트 프롬프트 고정</strong></p>

    <ul>
      <li>짧고 정답이 있는 문제 1–2개(예: 간단 산수, 상식 문제).</li>
    </ul>
  </li>
  <li>
    <p><strong>네 가지 호출 수행</strong></p>

    <ul>
      <li>
        <p>A: <code class="language-plaintext highlighter-rouge">reasoning_effort</code> <strong>미지정</strong> (실제 기본값 체크)</p>
      </li>
      <li>
        <p>B: <code class="language-plaintext highlighter-rouge">"medium"</code></p>
      </li>
      <li>
        <p>C: <code class="language-plaintext highlighter-rouge">"low"</code></p>
      </li>
      <li>
        <p>D: <code class="language-plaintext highlighter-rouge">"high"</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>로그로 비교할 항목</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">latency_ms</code>, <code class="language-plaintext highlighter-rouge">usage.reasoning_tokens</code>(지원 시), <code class="language-plaintext highlighter-rouge">completion_tokens</code>, 응답 길이/정확도.</p>
      </li>
      <li>
        <p>A와 B가 거의 동일하면 <strong>기본값=medium</strong> 으로 판단.</p>
      </li>
      <li>
        <p>C &lt; B &lt; D 순으로 <code class="language-plaintext highlighter-rouge">reasoning_tokens</code>와 지연이 증가하면 파라미터 정상 동작.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="curl-예시-엔드포인트만-바꾸면-됨">cURL 예시 (엔드포인트만 바꾸면 됨)</h2>

<p>A) 기본값 확인 (미지정)</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> <span class="nt">-X</span> POST <span class="s2">"</span><span class="nv">$ENDPOINT_URL</span><span class="s2">"</span> <span class="se">\</span>
 <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="nv">$API_KEY</span><span class="s2">"</span> <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
 <span class="nt">-d</span> <span class="s1">'{
   "model":"gpt-oss-20b",
   "temperature":0.2,
   "messages":[
     {"role":"system","content":"You are a helpful assistant."},
     {"role":"user","content":"12개의 사과를 3명에게 공평하게 나누면?"}
   ]
 }'</span>
</code></pre></div></div>

<p>B) Medium</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-d</span> <span class="s1">'{
  "model":"gpt-oss-20b",
  "reasoning_effort":"medium",
  "temperature":0.2,
  "messages":[{"role":"system","content":"You are a helpful assistant."},
              {"role":"user","content":"12개의 사과를 3명에게 공평하게 나누면?"}]
}'</span>
</code></pre></div></div>

<p>C) Low / D) High는 <code class="language-plaintext highlighter-rouge">"reasoning_effort"</code> 값만 각각 <code class="language-plaintext highlighter-rouge">"low"</code>, <code class="language-plaintext highlighter-rouge">"high"</code>로 바꾸면 됩니다.</p>

<hr />

<h2 id="파이썬-스니펫-결과를-표로-비교">파이썬 스니펫 (결과를 표로 비교)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">requests</span>
<span class="n">URL</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">ENDPOINT_URL</span><span class="sh">"</span><span class="p">);</span> <span class="n">KEY</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">API_KEY</span><span class="sh">"</span><span class="p">)</span>
<span class="n">headers</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">Authorization</span><span class="sh">"</span><span class="p">:</span><span class="sa">f</span><span class="sh">"</span><span class="s">Bearer </span><span class="si">{</span><span class="n">KEY</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">Content-Type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">application/json</span><span class="sh">"</span><span class="p">}</span>
<span class="n">payload_base</span><span class="o">=</span><span class="p">{</span>
    <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">gpt-oss-20b</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">:</span><span class="mf">0.2</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">You are a helpful assistant.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">12개의 사과를 3명에게 공평하게 나누면?</span><span class="sh">"</span><span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span>
<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
    <span class="n">t0</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">r</span><span class="o">=</span><span class="n">requests</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">URL</span><span class="p">,</span><span class="n">headers</span><span class="o">=</span><span class="n">headers</span><span class="p">,</span><span class="n">json</span><span class="o">=</span><span class="n">p</span><span class="p">,</span><span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">)</span>
    <span class="n">dt</span><span class="o">=</span><span class="nf">round</span><span class="p">((</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">t0</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">)</span>
    <span class="n">j</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
    <span class="n">u</span><span class="o">=</span><span class="n">j</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">usage</span><span class="sh">"</span><span class="p">,{})</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span><span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">reasoning_effort</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">&lt;unspecified&gt;</span><span class="sh">"</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">latency_ms</span><span class="sh">"</span><span class="p">:</span><span class="n">dt</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">reasoning_tokens</span><span class="sh">"</span><span class="p">:</span><span class="n">u</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">reasoning_tokens</span><span class="sh">"</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">in_tokens</span><span class="sh">"</span><span class="p">:</span><span class="n">u</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">prompt_tokens</span><span class="sh">"</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">out_tokens</span><span class="sh">"</span><span class="p">:</span><span class="n">u</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">completion_tokens</span><span class="sh">"</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span><span class="n">j</span><span class="p">[</span><span class="sh">"</span><span class="s">choices</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">][:</span><span class="mi">80</span><span class="p">]</span>
    <span class="p">}</span>

<span class="n">rows</span><span class="o">=</span><span class="p">[]</span>
<span class="k">for</span> <span class="n">effort</span> <span class="ow">in</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span><span class="sh">"</span><span class="s">medium</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">low</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">high</span><span class="sh">"</span><span class="p">]:</span>
    <span class="n">p</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">payload_base</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">effort</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span> <span class="n">p</span><span class="p">[</span><span class="sh">"</span><span class="s">reasoning_effort</span><span class="sh">"</span><span class="p">]</span><span class="o">=</span><span class="n">effort</span>
    <span class="n">rows</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">run</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>

<span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="기대되는-판별-기준">기대되는 판별 기준</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">effort=미지정</code> 과 <code class="language-plaintext highlighter-rouge">medium</code>의 <strong>지연/토큰 수가 거의 동일</strong> ⇒ 실 기본값은 <strong>medium</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">low</code>는 더 짧고 토큰 적음, <code class="language-plaintext highlighter-rouge">high</code>는 더 길고 토큰 많음 ⇒ 레벨 스위치 정상.</p>
  </li>
</ul>

<hr />

<h2 id="이미-한-사람-없을까에-대한-짧은-정리">“이미 한 사람 없을까?”에 대한 짧은 정리</h2>

<ul>
  <li>gpt-oss 출시 소개/모델 카드/플랫폼 문서에서 <strong>세 레벨(저·중·고)</strong> 지원과 <strong>기본값 medium</strong> 을 확인할 수 있습니다. 다만 배포 환경에 따라 기본값이 바뀔 수 있으니 위 미니 테스트로 <strong>우리 환경의 실제 기본값</strong> 을 확정하는 걸 권장합니다. <a href="https://openai.com/index/introducing-gpt-oss/?utm_source=chatgpt.com">OpenAI+1</a><a href="https://docs.databricks.com/aws/en/machine-learning/model-serving/query-reason-models?utm_source=chatgpt.com">Databricks Documentation</a></li>
</ul>

<p>원하시면 위 파이썬 스니펫을 <strong>CSV 저장/간단 그래프</strong> 까지 확장해 드릴게요.</p>

<p class="chat--user">

너무 질문이 간단한거 아니야? 그건 문제가 안돼?

</p>

<p>질문이 간단해도 <strong>기본값 확인</strong> 에는 아무 문제가 없어요.<br />
여기서 우리가 보고 싶은 건 <strong>추론 정확도</strong> 가 아니라 <strong>reasoning_effort 설정에 따른 토큰·지연 시간 변화</strong> 이기 때문이에요.</p>

<hr />

<h2 id="왜-간단한-질문이-괜찮은지">왜 간단한 질문이 괜찮은지</h2>

<ol>
  <li>
    <p><strong>목표가 “default 값이 무엇인지 확인”</strong> → 정답 여부보다 <em>응답 패턴</em> 이 핵심</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">reasoning_effort</code>를 바꿨을 때 reasoning tokens 수나 latency가 달라지는지 확인하면 충분.</li>
    </ul>
  </li>
  <li>
    <p>복잡한 질문은 오히려 변수 증가</p>

    <ul>
      <li>난이도 높은 질문은 랜덤성·창의성 요소가 커서 비교 잡음(noise) 증가.</li>
    </ul>
  </li>
  <li>
    <p>단순 질문도 reasoning 단계 수에 영향을 줄 수 있음</p>

    <ul>
      <li>High일 경우, 불필요하게도 더 장황하게 chain-of-thought을 생성할 수 있음 → 토큰/시간 차이 명확히 관찰 가능.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="다만-이런-점-주의">다만 이런 점 주의</h2>

<ul>
  <li>
    <p>너무 trivial해서 <strong>토큰·시간 차이가 거의 없는 경우</strong> 가 있을 수 있음.<br />
→ 그럴 땐 난이도를 살짝 올린 <strong>짧은 논리 퍼즐/두세 단계 산수 문제</strong> 추천.</p>
  </li>
  <li>
    <p>같은 문제를 Low/Medium/High 모두 돌려야 비교 가능.</p>
  </li>
  <li>
    <p>결과 해석 시 <em>절대값</em> 보다 <strong>상대 비교</strong> 를 보아야 함.</p>
  </li>
</ul>

<hr />

<p>원하시면 제가 <strong>짧지만 reasoning 차이를 잘 드러내는 질문 세트</strong> 를 만들어 드릴 수 있어요.<br />
예를 들어 5~10초 내로 풀 수 있지만, reasoning effort가 높으면 불필요하게 더 풀어쓰는 문제들요.</p>

<p class="chat--user">

너무 trivial 하잖아. 유치원생 레벨

</p>

<p>맞아요 😂 “12개의 사과 나누기”는 너무 유치원 급이라 High·Medium·Low 차이가 거의 안 날 수 있어요.<br />
기본값 확인이 목적이라도, <strong>짧지만 추론 단계를 2~4단계 거치게 만드는 질문</strong> 을 쓰면 차이가 훨씬 잘 드러납니다.</p>

<hr />

<h2 id="reasoning-차이를-잘-드러내는-간단짧은-예시">Reasoning 차이를 잘 드러내는 간단·짧은 예시</h2>

<ol>
  <li><strong>2단계 산수 퍼즐</strong></li>
</ol>

<blockquote>
  <p>3개의 상자에 각각 4, 7, 9개의 사탕이 있다. 상자 2에서 5개를 꺼내 상자 1에 넣고, 상자 3에서 2개를 꺼내 상자 2에 넣으면, 각 상자에는 몇 개씩 남는가?</p>
</blockquote>

<ol>
  <li><strong>간단 논리 문제</strong></li>
</ol>

<blockquote>
  <p>철수, 영희, 민수는 달리기 시합을 했다. 철수는 영희보다 빠르고, 영희는 민수보다 느리다. 누가 1등인가?</p>
</blockquote>

<ol>
  <li><strong>날짜 계산</strong></li>
</ol>

<blockquote>
  <p>오늘이 2025년 8월 11일이라면, 45일 후는 무슨 요일인가?</p>
</blockquote>

<ol>
  <li><strong>짧은 조건 추론</strong></li>
</ol>

<blockquote>
  <p>사과는 500g, 배는 700g이다. 사과 3개와 배 2개의 총 무게는 몇 kg인가?</p>
</blockquote>

<ol>
  <li><strong>패턴 완성</strong></li>
</ol>

<blockquote>
  <p>수열 2, 4, 8, 16, ? 다음 숫자는?</p>
</blockquote>

<hr />

<h2 id="이유">이유</h2>

<ul>
  <li>
    <p>이런 문제들은 <strong>High reasoning effort</strong> 일 때 불필요하게 세세한 Chain-of-Thought을 생성하므로 토큰·지연 차이가 확연.</p>
  </li>
  <li>
    <p>Medium은 필요한 계산만, Low는 더 요약된 추론만 제공하는 경향.</p>
  </li>
  <li>
    <p>정답이 명확해서 비교 시 혼동 없음.</p>
  </li>
</ul>

<hr />

<p>원하시면 제가 이 문제들로 <strong>미니 default 값 검증 스크립트</strong> 를 만들어 드릴게요.<br />
그러면 바로 한 번에 Low/Medium/High &amp; 미지정 네 가지 호출을 비교할 수 있습니다.<br />
그렇게 할까요?</p>

<p class="chat--user">

응 스크립트 만들어줘

</p>

<p>완료! 바로 돌릴 수 있는 <strong>미니 기본값 검증 스크립트</strong> 를 만들어 놨어요.</p>

<p>Download the script (gpt_oss_effort_smoke_test.py)</p>

<h3 id="어떻게-쓰나요-step-by-step">어떻게 쓰나요? (step-by-step)</h3>

<ol>
  <li>환경변수 설정</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ENDPOINT_URL</span><span class="o">=</span><span class="s2">"https://&lt;your-endpoint&gt;"</span>
<span class="nb">export </span><span class="nv">API_KEY</span><span class="o">=</span><span class="s2">"sk-..."</span>
</code></pre></div></div>

<ol>
  <li>실행</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python gpt_oss_effort_smoke_test.py <span class="nt">--model</span> gpt-oss-20b <span class="nt">--repeats</span> 2
</code></pre></div></div>

<ul>
  <li>
    <p>각 프롬프트에 대해 <strong>effort 미지정 / low / medium / high</strong> 4가지로 호출합니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">runs.jsonl</code>(원시 로그)과 <code class="language-plaintext highlighter-rouge">summary.csv</code>(요약 평균치)를 저장하고, 콘솔에 노력수준별 평균 <strong>latency / tokens</strong> 를 표로 출력합니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">usage.reasoning_tokens</code>가 API에 있으면 같이 집계합니다.</p>
  </li>
</ul>

<h3 id="해석-팁">해석 팁</h3>

<ul>
  <li>
    <p>콘솔 표에서 <strong><code class="language-plaintext highlighter-rouge">&lt;unspecified&gt;</code>와 <code class="language-plaintext highlighter-rouge">medium</code>이 거의 동일</strong>하면, 여러분 환경의 <strong>기본값=medium</strong> 일 가능성이 높습니다.</p>
  </li>
  <li>
    <p>보통 토큰/지연은 <strong>low &lt; medium &lt; high</strong> 순으로 증가합니다.</p>
  </li>
</ul>

<p>원하면 <code class="language-plaintext highlighter-rouge">CSV → 그래프(plot)</code> 버전도 바로 만들어 드릴게요.</p>

<p class="chat--user">

<code class="language-plaintext highlighter-rouge">python
# Create a ready-to-run Python script for mini default verification of reasoning_effort.
script = r'''#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gpt_oss_effort_smoke_test.py

Mini smoke test to infer the default reasoning_effort for your GPT-OSS endpoint
and verify Low/Medium/High switches affect latency and tokens.

USAGE
-----
1) Set environment variables:
   export ENDPOINT_URL="https://&lt;your-endpoint&gt;"
   export API_KEY="sk-..."
2) (Optional) Choose model id via CLI: --model gpt-oss-20b
3) Run:
   python gpt_oss_effort_smoke_test.py --repeats 2

This will:
- Send a compact set of short-but-not-trivial prompts.
- Call the endpoint with four variants per prompt:
    A) effort unspecified  (to detect actual DEFAULT)
    B) effort = "medium"
    C) effort = "low"
    D) effort = "high"
- Log per-call latency, tokens, and short text preview.
- Save results to runs.jsonl and summary.csv.
- Print a quick table showing means by effort (latency / tokens).

Notes
-----
- The script assumes an OpenAI-compatible chat completions API that returns:
    { choices: [{ message: { content: str }}],
      usage: { prompt_tokens, completion_tokens, reasoning_tokens? } }
- If your API names differ, adjust parse_usage().
- The script retries transient HTTP errors with backoff.
"""

import argparse
import json
import os
import random
import sys
import time
from datetime import datetime
from typing import Any, Dict, Optional

import requests

# ---------- Configurable defaults ----------

DEFAULT_MODEL = "gpt-oss-20b"
DEFAULT_TEMPERATURE = 0.2
DEFAULT_MAX_TOKENS = 512
DEFAULT_SEED = 42
DEFAULT_TIMEOUT = 60
DEFAULT_REPEATS = 2

PROMPTS = [
    {
        "id": "math_boxes",
        "text": (
            "3개의 상자에 각각 4, 7, 9개의 사탕이 있다. "
            "상자 2에서 5개를 꺼내 상자 1에 넣고, 상자 3에서 2개를 꺼내 상자 2에 넣으면, "
            "각 상자에는 몇 개씩 남는가? 최종 결과만 한국어로 말해줘."
        ),
    },
    {
        "id": "logic_race",
        "text": (
            "철수, 영희, 민수는 달리기 시합을 했다. 철수는 영희보다 빠르고, "
            "영희는 민수보다 느리다. 누가 1등인가? 한 단어로만 답해."
        ),
    },
    {
        "id": "date_calc",
        "text": (
            "오늘이 2025년 8월 11일이라면, 45일 후는 무슨 요일인가?"
            " 한국 시간대를 기준으로, 요일만 한국어로 답해."
        ),
    },
    {
        "id": "weight_sum",
        "text": (
            "사과는 500g, 배는 700g이다. 사과 3개와 배 2개의 총 무게는 몇 kg인가? "
            "소수점 둘째 자리까지 kg 단위로만 답해."
        ),
    },
    {
        "id": "sequence",
        "text": "수열 2, 4, 8, 16, ? 다음 숫자는? 숫자만."
    },
]

EFFORT_LEVELS = [None, "medium", "low", "high"]  # None = unspecified (to detect actual default)

# ---------- Helpers ----------

def env(key: str, default: Optional[str] = None) -&gt; str:
    val = os.getenv(key, default)
    if val is None:
        print(f"[ERROR] Missing environment variable: {key}", file=sys.stderr)
        sys.exit(1)
    return val

def parse_usage(obj: Dict[str, Any]) -&gt; Dict[str, Optional[int]]:
    usage = obj.get("usage", {}) or {}
    return {
        "prompt_tokens": usage.get("prompt_tokens"),
        "completion_tokens": usage.get("completion_tokens"),
        "reasoning_tokens": usage.get("reasoning_tokens"),  # optional
        "total_tokens": usage.get("total_tokens"),
    }

def short(s: Optional[str], n: int = 80) -&gt; str:
    if not s:
        return ""
    s = s.replace("\n", " ").strip()
    return s[:n] + ("…" if len(s) &gt; n else "")

def post_with_retries(url: str, headers: Dict[str, str], payload: Dict[str, Any], timeout: int) -&gt; requests.Response:
    backoffs = [0.5, 1.0, 2.0]
    for i, delay in enumerate([0.0] + backoffs):
        if delay:
            time.sleep(delay)
        try:
            resp = requests.post(url, headers=headers, json=payload, timeout=timeout)
            if resp.status_code in (429, 500, 502, 503, 504):
                # transient; let the loop retry
                last = resp
                continue
            return resp
        except requests.RequestException as e:
            last = e  # type: ignore[assignment]
    # On failure after retries, raise or return last response if available
    if isinstance(last, requests.Response):
        return last
    raise RuntimeError(f"HTTP error after retries: {last}")

def call_once(endpoint: str, api_key: str, model: str, user_text: str,
              effort: Optional[str], temperature: float, max_tokens: int,
              seed: Optional[int], timeout: int) -&gt; Dict[str, Any]:
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
    }
    messages = [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": user_text},
    ]
    body: Dict[str, Any] = {
        "model": model,
        "temperature": temperature,
        "max_tokens": max_tokens,
        "messages": messages,
    }
    if seed is not None:
        body["seed"] = seed
    if effort is not None:
        body["reasoning_effort"] = effort

    t0 = time.time()
    resp = post_with_retries(endpoint, headers, body, timeout=timeout)
    elapsed_ms = int(round((time.time() - t0) * 1000))

    result: Dict[str, Any] = {
        "status": resp.status_code,
        "latency_ms": elapsed_ms,
        "response_text": None,
        "usage": None,
        "raw": None,
        "error": None,
    }

    try:
        data = resp.json()
    except Exception as e:
        result["error"] = f"Non-JSON response: {resp.text[:200]} ({e})"
        return result

    result["raw"] = data
    if resp.status_code != 200:
        result["error"] = data
        return result

    try:
        text = data["choices"][0]["message"]["content"]
    except Exception:
        text = None
    result["response_text"] = text
    result["usage"] = parse_usage(data)
    return result

def mean(xs):
    vals = [x for x in xs if isinstance(x, (int, float))]
    return sum(vals)/len(vals) if vals else None

def safe_int(x):
    return int(x) if isinstance(x, (int, float)) else None

# ---------- Main ----------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", default=DEFAULT_MODEL)
    parser.add_argument("--repeats", type=int, default=DEFAULT_REPEATS,
                        help="Number of repeats per (prompt, effort) pair")
    parser.add_argument("--timeout", type=int, default=DEFAULT_TIMEOUT)
    parser.add_argument("--temperature", type=float, default=DEFAULT_TEMPERATURE)
    parser.add_argument("--max_tokens", type=int, default=DEFAULT_MAX_TOKENS)
    parser.add_argument("--no_seed", action="store_true", help="Do not send seed")
    args = parser.parse_args()

    endpoint = env("ENDPOINT_URL")
    api_key = env("API_KEY")
    model = args.model
    seed = None if args.no_seed else DEFAULT_SEED

    random.seed(2025)
    pairs = []
    for p in PROMPTS:
        for eff in EFFORT_LEVELS:
            for trial in range(args.repeats):
                pairs.append((p, eff, trial))
    random.shuffle(pairs)

    runs_path = "runs.jsonl"
    summary_rows = []
    n_ok = 0
    n_err = 0

    with open(runs_path, "w", encoding="utf-8") as f:
        for p, eff, trial in pairs:
            res = call_once(
                endpoint=endpoint, api_key=api_key, model=model,
                user_text=p["text"], effort=eff, temperature=args.temperature,
                max_tokens=args.max_tokens, seed=seed, timeout=args.timeout
            )
            row = {
                "ts": datetime.utcnow().isoformat(),
                "prompt_id": p["id"],
                "effort": eff if eff is not None else "&lt;unspecified&gt;",
                "trial": trial,
                "status": res["status"],
                "latency_ms": res["latency_ms"],
                "prompt_tokens": (res["usage"] or {}).get("prompt_tokens") if res["usage"] else None,
                "completion_tokens": (res["usage"] or {}).get("completion_tokens") if res["usage"] else None,
                "reasoning_tokens": (res["usage"] or {}).get("reasoning_tokens") if res["usage"] else None,
                "total_tokens": (res["usage"] or {}).get("total_tokens") if res["usage"] else None,
                "text_preview": short(res["response_text"], 120),
                "error": res["error"],
            }
            f.write(json.dumps(row, ensure_ascii=False) + "\n")
            if res["error"]:
                n_err += 1
            else:
                n_ok += 1
            summary_rows.append(row)

    # Aggregate means by effort
    by_effort = {}
    for r in summary_rows:
        e = r["effort"]
        by_effort.setdefault(e, {"latency": [], "comp": [], "reason": [], "total": []})
        if r["latency_ms"] is not None:
            by_effort[e]["latency"].append(r["latency_ms"])
        if r["completion_tokens"] is not None:
            by_effort[e]["comp"].append(r["completion_tokens"])
        if r["reasoning_tokens"] is not None:
            by_effort[e]["reason"].append(r["reasoning_tokens"])
        if r["total_tokens"] is not None:
            by_effort[e]["total"].append(r["total_tokens"])

    # Print quick table
    print("\n=== Quick Means by Effort ===")
    print("Effort           | Latency(ms) | OutTokens | ReasoningTokens | TotalTokens")
    print("-----------------+-------------+-----------+------------------+------------")
    def fmt(x):
        return f"{x:.1f}" if isinstance(x, (int, float)) else "-"
    for e in ["&lt;unspecified&gt;", "low", "medium", "high"]:
        mlat = mean(by_effort.get(e, {}).get("latency", []))
        mout = mean(by_effort.get(e, {}).get("comp", []))
        mrea = mean(by_effort.get(e, {}).get("reason", []))
        mtot = mean(by_effort.get(e, {}).get("total", []))
        print(f"{e:16} | {fmt(mlat):&gt;11} | {fmt(mout):&gt;9} | {fmt(mrea):&gt;16} | {fmt(mtot):&gt;10}")

    # Save a compact CSV summary
    csv_path = "summary.csv"
    try:
        import csv
        with open(csv_path, "w", newline="", encoding="utf-8") as cf:
            writer = csv.writer(cf)
            writer.writerow(["effort","mean_latency_ms","mean_completion_tokens","mean_reasoning_tokens","mean_total_tokens"])
            for e in ["&lt;unspecified&gt;", "low", "medium", "high"]:
                mlat = mean(by_effort.get(e, {}).get("latency", []))
                mout = mean(by_effort.get(e, {}).get("comp", []))
                mrea = mean(by_effort.get(e, {}).get("reason", []))
                mtot = mean(by_effort.get(e, {}).get("total", []))
                writer.writerow([e, f"{mlat:.1f}" if mlat else "", f"{mout:.1f}" if mout else "", f"{mrea:.1f}" if mrea else "", f"{mtot:.1f}" if mtot else ""])
        print(f"\nSaved: {csv_path}")
    except Exception as e:
        print(f"[WARN] CSV write failed: {e}")

    print(f"\nSaved raw runs to: {runs_path}")
    print(f"OK: {n_ok}, ERR: {n_err}")
    print("\nInterpretation tip:")
    print("- If '&lt;unspecified&gt;' and 'medium' are nearly identical across latency/tokens, your gateway default is likely 'medium'.")
    print("- Expect tokens/latency trend: low &lt; medium &lt; high (if reasoning tokens are exposed, same order).")

if __name__ == "__main__":
    main()
'''
with open('/mnt/data/gpt_oss_effort_smoke_test.py', 'w', encoding='utf-8') as f:
    f.write(script)
print("Script written to /mnt/data/gpt_oss_effort_smoke_test.py")
</code>

</p>

<p>네, 이 코드 그대로 <code class="language-plaintext highlighter-rouge">/mnt/data/gpt_oss_effort_smoke_test.py</code> 에 저장돼 있어서 바로 다운로드 후 실행하시면 돼요.</p>

<p>📥 gpt_oss_effort_smoke_test.py 받기</p>

<hr />

<h3 id="실행-방법-요약">실행 방법 요약</h3>

<ol>
  <li>환경변수 설정</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ENDPOINT_URL</span><span class="o">=</span><span class="s2">"https://&lt;your-endpoint&gt;"</span>
<span class="nb">export </span><span class="nv">API_KEY</span><span class="o">=</span><span class="s2">"sk-..."</span>
</code></pre></div></div>

<ol>
  <li>스크립트 실행</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python gpt_oss_effort_smoke_test.py <span class="nt">--model</span> gpt-oss-20b <span class="nt">--repeats</span> 2
</code></pre></div></div>

<ol>
  <li>결과 확인</li>
</ol>

<ul>
  <li>
    <p>콘솔 표: effort별 평균 <strong>latency / tokens</strong></p>
  </li>
  <li>
    <p>파일:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">runs.jsonl</code>: 모든 호출 기록</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">summary.csv</code>: 평균치 요약</p>
      </li>
    </ul>
  </li>
</ul>

<p><strong>팁</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">&lt;unspecified&gt;</code>와 <code class="language-plaintext highlighter-rouge">medium</code>이 비슷하면 default가 medium일 가능성 높음</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">low &lt; medium &lt; high</code> 순으로 reasoning_tokens와 latency가 증가하는지 확인</p>
  </li>
</ul>

<p class="chat--user">

<code class="language-plaintext highlighter-rouge">python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
gpt_oss_effort_smoke_test.py

Mini smoke test to infer the default reasoning_effort for your GPT-OSS endpoint
and verify Low/Medium/High switches affect latency and tokens.

USAGE
-----
1) Set environment variables:
   export ENDPOINT_URL="https://&lt;your-endpoint&gt;"
   export API_KEY="sk-..."
2) (Optional) Choose model id via CLI: --model gpt-oss-20b
3) Run:
   python gpt_oss_effort_smoke_test.py --repeats 2

This will:
- Send a compact set of short-but-not-trivial prompts.
- Call the endpoint with four variants per prompt:
    A) effort unspecified  (to detect actual DEFAULT)
    B) effort = "medium"
    C) effort = "low"
    D) effort = "high"
- Log per-call latency, tokens, and short text preview.
- Save results to runs.jsonl and summary.csv.
- Print a quick table showing means by effort (latency / tokens).

Notes
-----
- The script assumes an OpenAI-compatible chat completions API that returns:
    { choices: [{ message: { content: str }}],
      usage: { prompt_tokens, completion_tokens, reasoning_tokens? } }
- If your API names differ, adjust parse_usage().
- The script retries transient HTTP errors with backoff.
"""

import argparse
import json
import os
import random
import sys
import time
from datetime import datetime
from typing import Any, Dict, Optional

import requests

# ---------- Configurable defaults ----------

DEFAULT_MODEL = "gpt-oss-20b"
DEFAULT_TEMPERATURE = 0.2
DEFAULT_MAX_TOKENS = 512
DEFAULT_SEED = 42
DEFAULT_TIMEOUT = 60
DEFAULT_REPEATS = 2

PROMPTS = [
    {
        "id": "math_boxes",
        "text": (
            "3개의 상자에 각각 4, 7, 9개의 사탕이 있다. "
            "상자 2에서 5개를 꺼내 상자 1에 넣고, 상자 3에서 2개를 꺼내 상자 2에 넣으면, "
            "각 상자에는 몇 개씩 남는가? 최종 결과만 한국어로 말해줘."
        ),
    },
    {
        "id": "logic_race",
        "text": (
            "철수, 영희, 민수는 달리기 시합을 했다. 철수는 영희보다 빠르고, "
            "영희는 민수보다 느리다. 누가 1등인가? 한 단어로만 답해."
        ),
    },
    {
        "id": "date_calc",
        "text": (
            "오늘이 2025년 8월 11일이라면, 45일 후는 무슨 요일인가?"
            " 한국 시간대를 기준으로, 요일만 한국어로 답해."
        ),
    },
    {
        "id": "weight_sum",
        "text": (
            "사과는 500g, 배는 700g이다. 사과 3개와 배 2개의 총 무게는 몇 kg인가? "
            "소수점 둘째 자리까지 kg 단위로만 답해."
        ),
    },
    {
        "id": "sequence",
        "text": "수열 2, 4, 8, 16, ? 다음 숫자는? 숫자만."
    },
]

EFFORT_LEVELS = [None, "medium", "low", "high"]  # None = unspecified (to detect actual default)

# ---------- Helpers ----------

def env(key: str, default: Optional[str] = None) -&gt; str:
    val = os.getenv(key, default)
    if val is None:
        print(f"[ERROR] Missing environment variable: {key}", file=sys.stderr)
        sys.exit(1)
    return val

def parse_usage(obj: Dict[str, Any]) -&gt; Dict[str, Optional[int]]:
    usage = obj.get("usage", {}) or {}
    return {
        "prompt_tokens": usage.get("prompt_tokens"),
        "completion_tokens": usage.get("completion_tokens"),
        "reasoning_tokens": usage.get("reasoning_tokens"),  # optional
        "total_tokens": usage.get("total_tokens"),
    }

def short(s: Optional[str], n: int = 80) -&gt; str:
    if not s:
        return ""
    s = s.replace("\n", " ").strip()
    return s[:n] + ("…" if len(s) &gt; n else "")

def post_with_retries(url: str, headers: Dict[str, str], payload: Dict[str, Any], timeout: int) -&gt; requests.Response:
    backoffs = [0.5, 1.0, 2.0]
    for i, delay in enumerate([0.0] + backoffs):
        if delay:
            time.sleep(delay)
        try:
            resp = requests.post(url, headers=headers, json=payload, timeout=timeout)
            if resp.status_code in (429, 500, 502, 503, 504):
                # transient; let the loop retry
                last = resp
                continue
            return resp
        except requests.RequestException as e:
            last = e  # type: ignore[assignment]
    # On failure after retries, raise or return last response if available
    if isinstance(last, requests.Response):
        return last
    raise RuntimeError(f"HTTP error after retries: {last}")

def call_once(endpoint: str, api_key: str, model: str, user_text: str,
              effort: Optional[str], temperature: float, max_tokens: int,
              seed: Optional[int], timeout: int) -&gt; Dict[str, Any]:
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
    }
    messages = [
        {"role": "system", "content": "You are a helpful assistant."},
        {"role": "user", "content": user_text},
    ]
    body: Dict[str, Any] = {
        "model": model,
        "temperature": temperature,
        "max_tokens": max_tokens,
        "messages": messages,
    }
    if seed is not None:
        body["seed"] = seed
    if effort is not None:
        body["reasoning_effort"] = effort

    t0 = time.time()
    resp = post_with_retries(endpoint, headers, body, timeout=timeout)
    elapsed_ms = int(round((time.time() - t0) * 1000))

    result: Dict[str, Any] = {
        "status": resp.status_code,
        "latency_ms": elapsed_ms,
        "response_text": None,
        "usage": None,
        "raw": None,
        "error": None,
    }

    try:
        data = resp.json()
    except Exception as e:
        result["error"] = f"Non-JSON response: {resp.text[:200]} ({e})"
        return result

    result["raw"] = data
    if resp.status_code != 200:
        result["error"] = data
        return result

    try:
        text = data["choices"][0]["message"]["content"]
    except Exception:
        text = None
    result["response_text"] = text
    result["usage"] = parse_usage(data)
    return result

def mean(xs):
    vals = [x for x in xs if isinstance(x, (int, float))]
    return sum(vals)/len(vals) if vals else None

def safe_int(x):
    return int(x) if isinstance(x, (int, float)) else None

# ---------- Main ----------

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--model", default=DEFAULT_MODEL)
    parser.add_argument("--repeats", type=int, default=DEFAULT_REPEATS,
                        help="Number of repeats per (prompt, effort) pair")
    parser.add_argument("--timeout", type=int, default=DEFAULT_TIMEOUT)
    parser.add_argument("--temperature", type=float, default=DEFAULT_TEMPERATURE)
    parser.add_argument("--max_tokens", type=int, default=DEFAULT_MAX_TOKENS)
    parser.add_argument("--no_seed", action="store_true", help="Do not send seed")
    args = parser.parse_args()

    endpoint = env("ENDPOINT_URL")
    api_key = env("API_KEY")
    model = args.model
    seed = None if args.no_seed else DEFAULT_SEED

    random.seed(2025)
    pairs = []
    for p in PROMPTS:
        for eff in EFFORT_LEVELS:
            for trial in range(args.repeats):
                pairs.append((p, eff, trial))
    random.shuffle(pairs)

    runs_path = "runs.jsonl"
    summary_rows = []
    n_ok = 0
    n_err = 0

    with open(runs_path, "w", encoding="utf-8") as f:
        for p, eff, trial in pairs:
            res = call_once(
                endpoint=endpoint, api_key=api_key, model=model,
                user_text=p["text"], effort=eff, temperature=args.temperature,
                max_tokens=args.max_tokens, seed=seed, timeout=args.timeout
            )
            row = {
                "ts": datetime.utcnow().isoformat(),
                "prompt_id": p["id"],
                "effort": eff if eff is not None else "&lt;unspecified&gt;",
                "trial": trial,
                "status": res["status"],
                "latency_ms": res["latency_ms"],
                "prompt_tokens": (res["usage"] or {}).get("prompt_tokens") if res["usage"] else None,
                "completion_tokens": (res["usage"] or {}).get("completion_tokens") if res["usage"] else None,
                "reasoning_tokens": (res["usage"] or {}).get("reasoning_tokens") if res["usage"] else None,
                "total_tokens": (res["usage"] or {}).get("total_tokens") if res["usage"] else None,
                "text_preview": short(res["response_text"], 120),
                "error": res["error"],
            }
            f.write(json.dumps(row, ensure_ascii=False) + "\n")
            if res["error"]:
                n_err += 1
            else:
                n_ok += 1
            summary_rows.append(row)

    # Aggregate means by effort
    by_effort = {}
    for r in summary_rows:
        e = r["effort"]
        by_effort.setdefault(e, {"latency": [], "comp": [], "reason": [], "total": []})
        if r["latency_ms"] is not None:
            by_effort[e]["latency"].append(r["latency_ms"])
        if r["completion_tokens"] is not None:
            by_effort[e]["comp"].append(r["completion_tokens"])
        if r["reasoning_tokens"] is not None:
            by_effort[e]["reason"].append(r["reasoning_tokens"])
        if r["total_tokens"] is not None:
            by_effort[e]["total"].append(r["total_tokens"])

    # Print quick table
    print("\n=== Quick Means by Effort ===")
    print("Effort           | Latency(ms) | OutTokens | ReasoningTokens | TotalTokens")
    print("-----------------+-------------+-----------+------------------+------------")
    def fmt(x):
        return f"{x:.1f}" if isinstance(x, (int, float)) else "-"
    for e in ["&lt;unspecified&gt;", "low", "medium", "high"]:
        mlat = mean(by_effort.get(e, {}).get("latency", []))
        mout = mean(by_effort.get(e, {}).get("comp", []))
        mrea = mean(by_effort.get(e, {}).get("reason", []))
        mtot = mean(by_effort.get(e, {}).get("total", []))
        print(f"{e:16} | {fmt(mlat):&gt;11} | {fmt(mout):&gt;9} | {fmt(mrea):&gt;16} | {fmt(mtot):&gt;10}")

    # Save a compact CSV summary
    csv_path = "summary.csv"
    try:
        import csv
        with open(csv_path, "w", newline="", encoding="utf-8") as cf:
            writer = csv.writer(cf)
            writer.writerow(["effort","mean_latency_ms","mean_completion_tokens","mean_reasoning_tokens","mean_total_tokens"])
            for e in ["&lt;unspecified&gt;", "low", "medium", "high"]:
                mlat = mean(by_effort.get(e, {}).get("latency", []))
                mout = mean(by_effort.get(e, {}).get("comp", []))
                mrea = mean(by_effort.get(e, {}).get("reason", []))
                mtot = mean(by_effort.get(e, {}).get("total", []))
                writer.writerow([e, f"{mlat:.1f}" if mlat else "", f"{mout:.1f}" if mout else "", f"{mrea:.1f}" if mrea else "", f"{mtot:.1f}" if mtot else ""])
        print(f"\nSaved: {csv_path}")
    except Exception as e:
        print(f"[WARN] CSV write failed: {e}")

    print(f"\nSaved raw runs to: {runs_path}")
    print(f"OK: {n_ok}, ERR: {n_err}")
    print("\nInterpretation tip:")
    print("- If '&lt;unspecified&gt;' and 'medium' are nearly identical across latency/tokens, your gateway default is likely 'medium'.")
    print("- Expect tokens/latency trend: low &lt; medium &lt; high (if reasoning tokens are exposed, same order).")

if __name__ == "__main__":
    main()
</code>

</p>

<p>이 스크립트는 그대로 실행해도 <code class="language-plaintext highlighter-rouge">gpt-oss</code> 기본 reasoning_effort 값을 빠르게 확인할 수 있게 잘 짜여 있어요.</p>

<h3 id="요약-1">요약</h3>

<ul>
  <li>
    <p><strong>프롬프트</strong> : 너무 trivial하지 않고 reasoning 차이를 드러낼 수 있는 5문항.</p>
  </li>
  <li>
    <p><strong>비교 모드</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">&lt;unspecified&gt;</code> (미지정 → default 값 확인)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">low</code>, <code class="language-plaintext highlighter-rouge">medium</code>, <code class="language-plaintext highlighter-rouge">high</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>측정 지표</strong> :</p>

    <ul>
      <li>
        <p>latency(ms)</p>
      </li>
      <li>
        <p>prompt/completion/reasoning/total tokens</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>출력</strong> :</p>

    <ul>
      <li>
        <p>콘솔에 평균 표</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">runs.jsonl</code> (원시 로그)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">summary.csv</code> (평균 요약)</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="실행-방법">실행 방법</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">ENDPOINT_URL</span><span class="o">=</span><span class="s2">"https://&lt;your-endpoint&gt;"</span>
<span class="nb">export </span><span class="nv">API_KEY</span><span class="o">=</span><span class="s2">"sk-..."</span>

python gpt_oss_effort_smoke_test.py <span class="nt">--model</span> gpt-oss-20b <span class="nt">--repeats</span> 2
</code></pre></div></div>

<h3 id="결과-해석">결과 해석</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">&lt;unspecified&gt;</code>와 <code class="language-plaintext highlighter-rouge">medium</code>이 거의 동일 → default = medium 가능성 큼</p>
  </li>
  <li>
    <p>reasoning_tokens / latency 순서: <code class="language-plaintext highlighter-rouge">low &lt; medium &lt; high</code>이면 정상 동작</p>
  </li>
</ul>

<p>원하면 여기에 <strong>CSV 결과를 시각화하는 플롯 코드</strong> 를 붙여서, 한눈에 비교할 수 있게 만들어 드릴까요?</p>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry></feed>