<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://hvppyarchive.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hvppyarchive.github.io/" rel="alternate" type="text/html" /><updated>2025-10-27T11:05:53+09:00</updated><id>https://hvppyarchive.github.io/feed.xml</id><title type="html">ARCHIVE</title><subtitle>An amazing archive.</subtitle><author><name>hvppyarchive</name></author><entry><title type="html"></title><link href="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/" rel="alternate" type="text/html" title="" /><published>2025-10-27T11:05:53+09:00</published><updated>2025-10-27T11:05:53+09:00</updated><id>https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str</id><content type="html" xml:base="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/"><![CDATA[<p class="chat--user">

Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 함수와 <code class="language-plaintext highlighter-rouge">__str__</code> 함수의 차이점

</p>

<p>Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 과 <code class="language-plaintext highlighter-rouge">__str__</code> 의 차이점은 <strong>객체를 문자열로 표현하는 목적</strong> 에서 달라집니다. 차이를 단계적으로 정리해드릴게요.</p>

<hr />

<h2 id="1-__repr__-의-목적">1. <code class="language-plaintext highlighter-rouge">__repr__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>개발자 중심</strong> : 객체를 "개발자"가 보고 이해할 수 있도록 표현합니다.</p>
  </li>
  <li>
    <p><strong>재현 가능(reproducible)</strong> : 가능한 한 객체를 다시 만들 수 있는 코드 형태로 보여주는 것이 목표입니다.</p>
  </li>
  <li>
    <p>보통 <code class="language-plaintext highlighter-rouge">eval(repr(obj)) == obj</code> 가 성립하는 형태를 지향합니다 (꼭 항상 그런 건 아니지만 권장).</p>
  </li>
  <li>
    <p>디버깅할 때 주로 사용됩니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Person(name=</span><span class="sh">'</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s">, age=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>  <span class="c1"># Person(name='Alice', age=30)
</span></code></pre></div></div>

<hr />

<h2 id="2-__str__-의-목적">2. <code class="language-plaintext highlighter-rouge">__str__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>사용자 중심</strong> : 객체를 "사용자"가 보기 좋은 문자열로 표현합니다.</p>
  </li>
  <li>
    <p>읽기 쉽고 깔끔하게 출력하는 데 초점을 둡니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">print(obj)</code> 를 호출했을 때 보여지는 값이 <code class="language-plaintext highlighter-rouge">__str__</code> 입니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># Alice (30 years old)
</span></code></pre></div></div>

<hr />

<h2 id="3-__repr__-vs-__str__-비교">3. <code class="language-plaintext highlighter-rouge">__repr__</code> vs <code class="language-plaintext highlighter-rouge">__str__</code> 비교</h2>

<table>
  <thead>
    <tr>
      <th>특징</th>
      <th><code class="language-plaintext highlighter-rouge">__repr__</code></th>
      <th><code class="language-plaintext highlighter-rouge">__str__</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>목적</td>
      <td>개발자용, 디버깅</td>
      <td>사용자용, 가독성</td>
    </tr>
    <tr>
      <td>출력 대상</td>
      <td><code class="language-plaintext highlighter-rouge">repr(obj)</code>, 대화형 쉘에서 기본</td>
      <td><code class="language-plaintext highlighter-rouge">str(obj)</code>, <code class="language-plaintext highlighter-rouge">print(obj)</code></td>
    </tr>
    <tr>
      <td>형식</td>
      <td>객체 재현 가능하거나 상세</td>
      <td>읽기 쉬운 설명 위주</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="4-구현-시-주의사항">4. 구현 시 주의사항</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code> 가 없으면 <code class="language-plaintext highlighter-rouge">__repr__</code> 가 대신 사용</strong>됩니다.</p>
  </li>
  <li>
    <p>따라서 최소한 <code class="language-plaintext highlighter-rouge">__repr__</code> 은 정의해 두는 것이 좋습니다.</p>
  </li>
</ul>

<hr />

<p>👉 정리하면,</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__repr__</code></strong> : “개발자가 디버깅할 때” 객체의 정확한 표현.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code></strong> : “사용자가 출력물을 볼 때” 보기 좋게 표현.</p>
  </li>
</ul>

<hr />

<p>원하시면 <code class="language-plaintext highlighter-rouge">__repr__</code> 와 <code class="language-plaintext highlighter-rouge">__str__</code> 를 동시에 구현했을 때 <code class="language-plaintext highlighter-rouge">print(obj)</code> 와 <code class="language-plaintext highlighter-rouge">obj</code> (쉘 출력) 의 차이를 직접 실행해 보여드릴 수도 있는데, 예제 코드 시연을 원하시나요?</p>]]></content><author><name>hvppyarchive</name></author></entry><entry><title type="html">OpenAI 함수 호출 테스트</title><link href="https://hvppyarchive.github.io/llm/openai-function-call-examples/" rel="alternate" type="text/html" title="OpenAI 함수 호출 테스트" /><published>2025-10-27T11:05:47+09:00</published><updated>2025-10-27T11:05:47+09:00</updated><id>https://hvppyarchive.github.io/llm/openai-function-call-examples</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/openai-function-call-examples/"><![CDATA[<p class="chat--user">

openai package를 사용하는 테스트 코드 작성할거야. 목표: 2가지 모델에 대해 2가지 api type(completions, responses)에 대해 function calling 테스트를 하고 싶어. 총 4개 조합에 대해 설정할 수 있게 코드 작성 하자. 툴은 간단히 특정 폴더의 파일 조회, 특정 폴더의 파일 읽기 두 가지 툴을 구현할거야 2개 모델에 대한 엔드포인트, api 키, 모델명을 코드 내에서 설정할 수 있도록 할 것.

</p>

<p>좋아! 아래는 “두 모델 × 두 API 타입(completions, responses) × 함수 호출(function calling)” 조합을 한 파일에서 모두 테스트할 수 있는 파이썬 스크립트야.<br />
요구사항 정리대로</p>

<ol>
  <li>
    <p>두 가지 파일 관련 툴(폴더 내 파일 목록 조회, 파일 읽기)</p>
  </li>
  <li>
    <p>2개 모델에 대한 엔드포인트·API 키·모델명을 코드 내에서 설정 가능</p>
  </li>
  <li>
    <p>4가지 조합을 원하는 대로 실행 가능</p>
  </li>
</ol>

<p>을 모두 담았어. 최신 OpenAI Python SDK의 사용법과 Responses API의 툴 호출 흐름은 공식 문서의 구조를 따랐어. 참고: function calling과 tools 정의 방식은 공식 가이드와 동일하고, Chat Completions API에서는 tool_calls를 message에, Responses API에서는 output 항목과 tool_calls를 통해 주고받는 형태야. 관련 문서: Function Calling 가이드와 Responses API 레퍼런스. <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼+1</a></p>

<p>스크립트는 다음처럼 동작해</p>

<ul>
  <li>
    <p>MODELS 섹션에서 model A/B의 endpoint, api_key, model 이름을 채워둔다(예시 포함).</p>
  </li>
  <li>
    <p>TOOL 정의는 공통(JSON Schema).</p>
  </li>
  <li>
    <p>run_with_chat_completions(…), run_with_responses(…) 두 함수가 각각 함수 호출 루프를 수행.</p>
  </li>
  <li>
    <p>main에서 네 가지 조합을 순차 실행하거나, 원하는 조합만 선택 실행하도록 CLI 옵션 제공.</p>
  </li>
</ul>

<p>코드 복사해서 test_openai_tools.py로 저장한 뒤, samples 폴더에 테스트용 파일을 몇 개 넣고 돌려봐.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_openai_tools.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# 1) 구성(모델/엔드포인트/키)
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>               <span class="c1"># ex) "https://api.openai.com/v1"
</span>    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>                <span class="c1"># ex) os.getenv("OPENAI_API_KEY")
</span>
<span class="c1"># 여기서 두 모델에 대한 엔드포인트/키/모델명을 설정하세요.
# 실제 키를 코드에 하드코딩하지 말고, 환경변수를 권장합니다.
</span><span class="n">MODELS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">,</span>          <span class="c1"># 예시 (원하는 최신 모델명으로 변경)
</span>        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>           <span class="c1"># 예시 (원하는 최신 모델명으로 변경)
</span>        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =====================================
# 2) 로컬 파일 툴(폴더 목록/파일 읽기)
# =====================================
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">지정 폴더 내 파일 목록 반환(파일만).</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">items</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))]</span>
    <span class="k">return</span> <span class="n">files</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">지정 경로의 텍스트 파일 내용 반환(UTF-8 가정).</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
        <span class="c1"># 바이너리 등 텍스트가 아닌 경우
</span>        <span class="k">return</span> <span class="sh">""</span>

<span class="c1"># 공통 툴 스키마(JSON Schema; Chat Completions/Responses에서 그대로 사용)
</span><span class="n">TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content as a string.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># 툴 디스패처
</span><span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder</span><span class="p">),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">file_path</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># =====================================
# 3) Chat Completions로 함수 호출 테스트
# =====================================
</span>
<span class="k">def</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Chat Completions API로 function calling 테스트.
    - tools: TOOLS
    - tool_choice: </span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="s"> 권장
    - tool_calls -&gt; 실제 파이썬 함수 실행 -&gt; tool 메시지 첨부 -&gt; 재호출
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="c1"># 1차 호출
</span>    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tool_choice</span>  <span class="c1"># 'auto' or {'type':'function','function':{'name':'...'}}
</span>    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="c1"># 함수 호출 루프
</span>    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>

            <span class="c1"># tool 메시지 첨부
</span>            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_output</span>
            <span class="p">})</span>

        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="c1"># 후속 호출(최종 답변 유도)
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =====================================
# 4) Responses API로 함수 호출 테스트
#    - 최신 SDK 규약에 맞춰 비스트리밍 루프 구성
# =====================================
</span>
<span class="k">def</span> <span class="nf">extract_text_from_responses_output</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Responses API의 output 배열에서 자연어 텍스트만 모아 반환.</span><span class="sh">"""</span>
    <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="c1"># item.type == "message" 인 경우, item.content[*] 중 type == "output_text"
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="c1"># 일부 모델은 최종에 바로 output_text만 내보내기도 함
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">extract_tool_calls_from_responses_output</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 output에서 tool_call 이벤트를 수집.
    각 항목은 {id, name, arguments} 형태로 정규화해서 반환.
    </span><span class="sh">"""</span>
    <span class="n">calls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="c1"># 케이스1: item.type == "tool_call"
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">tool_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tc</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}</span>
            <span class="p">}</span>
            <span class="c1"># arguments는 문자열/딕셔너리 모두 가능성 고려
</span>            <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tc</span><span class="p">)</span>

        <span class="c1"># 케이스2: item.type == "message" 내부 content[*]에 tool_calls 묶여있을 수 있음
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="c1"># 일부 SDK 버전에서 item.tool_calls 또는 item.content[*].tool_calls 형태
</span>            <span class="n">inner_calls</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner_calls</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner_calls</span><span class="p">:</span>
                    <span class="n">arg_obj</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{}</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">arg_obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">arg_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">arg_obj</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">arg_obj</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">arg_obj</span> <span class="ow">or</span> <span class="p">{}</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Responses API로 function calling 테스트.
    흐름:
      1) responses.create(input=[{role:user, content:...}], tools=TOOLS, tool_choice=...)
      2) tool_call이 있으면 로컬 함수 실행
      3) responses.create(..., tool_outputs=[{tool_call_id, output}], response_id=prev.id) 로 이어서 호출
         (최신 문서의 규약을 따름)
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="c1"># 1차 호출
</span>    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}],</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tool_choice</span>
    <span class="p">)</span>

    <span class="c1"># 루프: 도구 호출이 끝날 때까지
</span>    <span class="n">final_text_parts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>  <span class="c1"># 안전 상한
</span>        <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">tool_calls</span> <span class="o">=</span> <span class="nf">extract_tool_calls_from_responses_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="n">plain_text</span> <span class="o">=</span> <span class="nf">extract_text_from_responses_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="n">plain_text</span><span class="p">:</span>
            <span class="n">final_text_parts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">plain_text</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">tool_calls</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">tool_outputs_payload</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs_payload</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span>
            <span class="p">})</span>

        <span class="c1"># 이전 response와 이어 붙여 툴 결과를 전달
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
            <span class="n">response_id</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs_payload</span>
        <span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">final_text_parts</span> <span class="k">if</span> <span class="n">p</span><span class="p">])</span>

<span class="c1"># =====================================
# 5) 실행부(4가지 조합)
# =====================================
</span>
<span class="n">DEFAULT_USER_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더 안의 파일 목록을 보여주고, 텍스트 파일이 하나라도 있으면 </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">그 중 하나의 내용을 읽어서 핵심만 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">combo_api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [</span><span class="si">{</span><span class="n">combo_api</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] with Model </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">) ===</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">combo_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">combo_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">combo_api must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Test function-calling with OpenAI (4-way matrix).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Which API type to run.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Which model to use.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_USER_TASK</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">User task/prompt.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">apis</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">api</span><span class="p">]</span>
    <span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">]</span>

    <span class="c1"># 샘플 폴더 안내
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">apis</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="nf">run_one</span><span class="p">(</span><span class="n">api</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 방법 간단 정리</p>

<ol>
  <li>환경 변수 세팅(권장)</li>
</ol>

<ul>
  <li>
    <p>Model A</p>

    <ul>
      <li>
        <p>OPENAI_API_KEY=…</p>
      </li>
      <li>
        <p>OPENAI_BASE_URL=https://api.openai.com/v1</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Model B</p>

    <ul>
      <li>
        <p>OPENAI_API_KEY_B=…</p>
      </li>
      <li>
        <p>OPENAI_BASE_URL_B=https://api.openai.com/v1</p>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>테스트 파일 준비</li>
</ol>

<ul>
  <li>프로젝트 루트에 samples 폴더를 만들고, 텍스트 파일을 1개 이상 넣는다. 예: samples/readme.txt</li>
</ul>

<ol>
  <li>실행</li>
</ol>

<ul>
  <li>
    <p>네 조합 모두:<br />
python test_openai_tools.py</p>
  </li>
  <li>
    <p>특정 API만:<br />
python test_openai_tools.py –api completions<br />
python test_openai_tools.py –api responses</p>
  </li>
  <li>
    <p>특정 모델만:<br />
python test_openai_tools.py –model A<br />
python test_openai_tools.py –model B</p>
  </li>
  <li>
    <p>프롬프트 커스터마이즈:<br />
python test_openai_tools.py –task "여기에 원하는 테스트 지시문"</p>
  </li>
</ul>

<p>구현 포인트 설명(필요 시 점검할 체크리스트)</p>

<ul>
  <li>
    <p>Chat Completions: response.choices[0].message.tool_calls를 확인하고, 각 툴을 실행한 뒤 tool 메시지를 추가해서 재호출하는 전형적 루프를 사용했어. 이것은 Function Calling 가이드의 권고 패턴이야. <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Responses API: responses.create(…) → output에서 tool_call 이벤트를 수집 → 실제 함수 실행 → tool_outputs와 이전 response_id를 함께 넘겨 후속 responses.create(…) 호출로 이어 붙이는 패턴이야. 이 흐름은 공식 Responses API 레퍼런스가 안내하는 방식과 맞물려 있어. <a href="https://platform.openai.com/docs/api-reference/responses/create">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>tools 스키마는 두 API에서 동일하게 재사용.</p>
  </li>
  <li>
    <p>로컬 파일 I/O는 안전하게 예외 처리했고, 텍스트 파일로 가정(UTF-8)했지만 디코딩 실패 시 빈 문자열을 반환해 모델이 적절히 안내하도록 했어.</p>
  </li>
</ul>

<p>문서 참고 링크</p>

<ul>
  <li>
    <p>Function Calling 가이드(툴 정의/호출 흐름) <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Responses API 레퍼런스(응답 구조, tool_outputs 전달 방식) <a href="https://platform.openai.com/docs/api-reference/responses/create">OpenAI 플랫폼</a></p>
  </li>
</ul>

<p>필요하면</p>

<ul>
  <li>
    <p>모델명만 바꿔서(예: 최신 gpt-4.1 계열 등) 즉시 시험 가능</p>
  </li>
  <li>
    <p>tool_choice를 "any"로 바꾸면 여러 툴 병렬 호출 경향을 더 시험할 수 있어</p>
  </li>
  <li>
    <p>samples 폴더 경로나 읽을 파일 선택 로직을 더 엄격하게 지정하고 싶다면, 프롬프트를 고정(seed task)하거나 시스템 메시지쪽에 규칙을 더해도 좋아</p>
  </li>
</ul>

<p>원하는 부분 더 바꿔드릴게.</p>

<p class="chat--user">

아니 내가 조사했을 때 responses용 툴 json이 있고, completion용이 따로 있어 조금 다르게 생겼던데 찾아서 반영해줘

</p>

<p>좋은 지적이야. 실제로 “도구 정의(tools JSON)”는 두 API가 거의 같지만, Responses API는 실행·상태 전파 방식(response_id, tool_outputs 등)과 출력 구조가 다르고, 가이드에선 Responses 예시에서 엄격 파싱(strict) 옵션을 곁들여 쓰는 패턴이 자주 보여서 모양이 살짝 달라 보일 수 있어. 그래서 아래처럼 아예 두 벌의 스키마를 분리해 두고, Responses 쪽엔 엄격 파싱을 넣는 식으로 반영했어. 또한 Responses는 tool_outputs와 response_id를 통해 단계적으로 이어붙이는 점을 코드에 명확히 했어. 참고 문서: Function Calling 가이드와 Responses API 레퍼런스. <a href="https://platform.openai.com/docs/guides/function-calling/supported-models?utm_source=chatgpt.com">OpenAI 플랫폼+2</a></p>

<p>아래 스크립트는 네 가지 조합(모델 A/B × completions/responses) 모두 함수 호출을 시험하고, 두 종류의 파일 툴을 제공해. 변경 포인트는 1) CHAT_TOOLS vs RESPONSES_TOOLS 분리, 2) Responses 루프에서 tool_outputs·response_id 사용을 더 엄격히, 3) Responses 출력 파서 보강이야.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_openai_tools_split_tools.py
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># 공통 실제 구현 함수
</span><span class="kn">import</span> <span class="n">os</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))]</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># Chat Completions 전용 도구 JSON
# - 전통적인 function calling 스키마
</span><span class="n">CHAT_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Path to the text file.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># Responses 전용 도구 JSON
# - 스키마 필드는 유사하지만, Responses 예제 관례에 맞춰 strict를 켬
#   (모델이 schema에 정확히 맞춰 인자 생성하도록 강제)
</span><span class="n">RESPONSES_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Path to the text file.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">CHAT_TOOLS</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="n">tools_choice</span>
    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># 각 툴 실행
</span>        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">output</span><span class="p">})</span>
        <span class="c1"># 대화 이어붙이기
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># Responses 출력 파서
</span><span class="k">def</span> <span class="nf">_extract_text</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">_extract_tool_calls</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">tool_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner_calls</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner_calls</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner_calls</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}],</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">RESPONSES_TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tools_choice</span>
    <span class="p">)</span>

    <span class="n">final_text</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># Responses는 tool_outputs + response_id로 상태를 이어서 보낸다.
</span>    <span class="c1"># 이어붙이기 패턴은 공식 레퍼런스의 흐름과 동일. :contentReference[oaicite:1]{index=1}
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>  <span class="c1"># 안전 상한
</span>        <span class="n">txt</span> <span class="o">=</span> <span class="nf">_extract_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="n">txt</span><span class="p">:</span>
            <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="n">calls</span> <span class="o">=</span> <span class="nf">_extract_tool_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">})</span>

        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">RESPONSES_TOOLS</span><span class="p">,</span>
            <span class="n">response_id</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>          <span class="c1"># 이전 응답과 연결
</span>            <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs</span>  <span class="c1"># 툴 실행 결과 전달
</span>        <span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나 골라 내용을 읽고 2~3문장 요약. 필요하면 툴 사용.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">which_api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [</span><span class="si">{</span><span class="n">which_api</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] Model </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">) ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">which_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">which_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">which_api must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">apis</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">api</span><span class="p">]</span>
    <span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">apis</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="nf">run_one</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
</code></pre></div></div>

<p>핵심 차이 정리 단계별</p>

<ol>
  <li>
    <p>도구 정의 자체는 필드 구조가 동일(type=function, function.name/description/parameters)하되, Responses 쪽 예시에서는 strict를 켜서 JSON Schema를 엄격히 지키게 하는 패턴이 널리 쓰인다. 그래서 스키마가 “조금 다르게 생긴 것처럼” 보일 수 있다. <a href="https://platform.openai.com/docs/guides/function-calling/supported-models?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>Chat Completions는 messages 배열에 assistant.tool_calls가 나오고, 각 call.id에 대응하는 tool 메시지를 넣어 다시 chat.completions.create를 호출한다.</p>
  </li>
  <li>
    <p>Responses는 output에 tool_call 항목이 나오며, 실제 도구 실행 후 tool_outputs 배열과 이전 응답의 response_id를 포함해 responses.create를 다시 호출해 상태를 이어 붙인다. 이게 가장 큰 차이점이다. <a href="https://platform.openai.com/docs/api-reference/responses-streaming/response?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ol>

<p>이 버전으로 돌려보고, Responses에서 strict를 끄고 싶으면 RESPONSES_TOOLS에서 "strict": True만 빼면 돼. 모델·엔드포인트·키는 상단 MODELS에서 조정 가능하고, samples 폴더에 테스트 파일만 있으면 바로 네 조합을 모두 확인할 수 있어.</p>

<p class="chat--user">

아니 예시를 좀 찾아봐.. from openai import OpenAI import json client = OpenAI() # 1. Define a list of callable tools for the model tools = [ { "type": "function", "name": "get_horoscope", "description": "Get today's horoscope for an astrological sign.", "parameters": { "type": "object", "properties": { "sign": { "type": "string", "description": "An astrological sign like Taurus or Aquarius", }, }, "required": ["sign"], }, }, ] def get_horoscope(sign): return f"{sign}: Next Tuesday you will befriend a baby otter." # Create a running input list we will add to over time input_list = [ {"role": "user", "content": "What is my horoscope? I am an Aquarius."} ] # 2. Prompt the model with tools defined response = client.responses.create( model="gpt-5", tools=tools, input=input_list, ) # Save function call outputs for subsequent requests input_list += response.output for item in response.output: if item.type == "function_call": if item.name == "get_horoscope": # 3. Execute the function logic for get_horoscope horoscope = get_horoscope(json.loads(item.arguments)) # 4. Provide function call results to the model input_list.append({ "type": "function_call_output", "call_id": item.call_id, "output": json.dumps({ "horoscope": horoscope }) }) print("Final input:") print(input_list) response = client.responses.create( model="gpt-5", instructions="Respond only with a horoscope generated by a tool.", tools=tools, input=input_list, ) # 5. The model should be able to give a response! print("Final output:") print(response.model_dump_json(indent=2)) print("\n" + response.output_text) 그러면 총 8개 조합이 나오지? 모델 x API 타입(completion, responses) x json 형태 이 8개 조합에 대해 각각 테스트하는 코드를 짜줘 이 때 실행 중 에러가 나는 경우에는 에러만 출력하고 나머지가 잘 수행되게 해줘.

</p>

<p>좋아. “2개 모델 × 2개 API(completions, responses) × 2가지 tools JSON 형태(Completions 스타일 vs Responses 스타일)” = 총 8개 조합을 한 번에 돌려보는 테스트 스크립트를 준비했어. 각 조합은 개별 try/except로 감싸 에러가 나더라도 나머지가 계속 수행돼. tools JSON은 네가 준 Responses 스타일 예시(평평한 형태: type/name/parameters가 최상위)와, Chat Completions에서 흔히 쓰는 중첩 형태({"type":"function","function":{…}})를 각각 분리해 두었고, 일부 조합은 의도적으로 “맞지 않는 형태”를 넣었기 때문에 실패할 수도 있어(그 경우 에러만 출력). 참고로 Responses와 Chat Completions의 차이, strict 옵션 등은 최신 가이드에 정리돼 있어. <a href="https://platform.openai.com/docs/guides/responses-vs-chat-completions?utm_source=chatgpt.com">OpenAI 플랫폼+2</a></p>

<p>아래 파일을 test_8combos_tools.py로 저장해서 실행하면 돼.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_8combos_tools.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# 0) 모델 설정
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =========================
# 1) 로컬 툴 구현
# =========================
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    모든 툴의 결과를 dict로 통일해서 반환.
    Responses의 function_call_output에 넣기 좋게 {</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="s">: ...} 형태로 감싸준다.
    </span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder</span><span class="p">)}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">path</span><span class="p">)}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># =========================
# 2) tools JSON 두 가지 형태
# =========================
</span>
<span class="c1"># (A) Chat Completions 스타일: function 필드에 중첩
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># (B) Responses 스타일: 네가 준 예시처럼 평평한 형태(일부 문서/예시에서 보이는 포맷)
</span><span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True  # 필요 시 켜서 인자 스키마 준수 강제 (도움말 참조)
</span>    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True
</span>    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># =========================
# 3) Chat Completions 쪽 함수 호출 루프
# =========================
</span>
<span class="k">def</span> <span class="nf">run_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s">  -&gt; CHAT_STYLE_TOOLS 사용 (권장)
    </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s"> -&gt; RESPONSES_STYLE_TOOLS 사용 (의도적 비호환 가능)
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="c1"># tool_calls 루프
</span>    <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>
        <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="c1"># arguments는 문자열일 수 있음
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>

            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
            <span class="p">})</span>

        <span class="c1"># 대화 이어붙이기
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
        <span class="p">})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =========================
# 4) Responses 쪽 함수 호출 루프
# =========================
</span>
<span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 output 배열에서 function_call / tool_call 류 이벤트를 추출.
    다양한 케이스를 최대한 관대하게 처리한다.
    </span><span class="sh">"""</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

        <span class="c1"># 케이스 A: item.type == "function_call"
</span>        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
            <span class="p">})</span>

        <span class="c1"># 케이스 B: 일부 모델이 "tool_call" / item.message.tool_calls 형태로 줄 때
</span>        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s"> -&gt; RESPONSES_STYLE_TOOLS 사용 (권장)
    </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s">      -&gt; CHAT_STYLE_TOOLS 사용 (의도적 비호환 가능)
    순수 Responses 방식: 네가 준 예시 패턴(input_list 축적 + function_call_output)로 구현.
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="c1"># running input_list
</span>    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}</span>
    <span class="p">]</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># function_call 처리
</span>    <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

    <span class="c1"># call들을 찾아 실행하고, function_call_output을 이어 붙임
</span>    <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
        <span class="p">})</span>

    <span class="c1"># 최종 응답 시도(지시문을 추가적으로 줄 수도 있음)
</span>    <span class="n">r2</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">Respond with a short summary of what you found.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># 텍스트 추출(중간/최종)
</span>    <span class="n">final_text</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">txt1</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">if</span> <span class="n">txt1</span><span class="p">:</span> <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt1</span><span class="p">)</span>
    <span class="n">txt2</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r2</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">if</span> <span class="n">txt2</span><span class="p">:</span> <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt2</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =========================
# 5) 8개 조합 실행기
# =========================
</span>
<span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나 골라 내용을 읽고 2~3문장 요약. 필요하면 도구를 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools_json=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">run_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 8 combinations: 2 models × 2 APIs × 2 tools JSON styles.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># tools_variant를 "both"로 두면 각 API에서 chat/​responses 두 가지 툴 JSON 모두 시도 → 8조합
</span>    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># 샘플 폴더 생성 안내
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>

    <span class="c1"># 8조합: 2모델 × 2API × 2JSON
</span>    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="nf">run_one</span><span class="p">(</span><span class="n">api</span><span class="p">,</span> <span class="n">mk</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>실행 예시<br />
python test_8combos_tools.py<br />
python test_8combos_tools.py –apis completions –tools both<br />
python test_8combos_tools.py –models A –apis responses –tools responses</p>

<p>포인트 요약</p>

<ol>
  <li>
    <p>CHAT_STYLE_TOOLS와 RESPONSES_STYLE_TOOLS를 분리해 두었고, Responses 루프는 네가 붙여준 예시처럼 input_list에 function_call과 function_call_output을 누적하는 방식으로 구현했어. 일부 문서/예시에선 strict를 켜 JSON 스키마를 강제하니 필요하면 해당 키를 켜면 돼. <a href="https://platform.openai.com/docs/guides/function-calling?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>일부 조합은 의도적으로 호환되지 않아 에러가 날 수 있어(예: Chat Completions에 Responses 스타일 tools). 모든 run은 try/except로 감싸 실패해도 나머지가 이어진다.</p>
  </li>
  <li>
    <p>최신 차이점과 권장 흐름은 Responses vs Chat Completions 가이드에서 비교 가능해. <a href="https://platform.openai.com/docs/guides/responses-vs-chat-completions?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ol>

<p>더 엄격하게 Responses의 “response_id + tool_outputs” 방식으로 이어붙이는 버전도 원하면 따로 추가해줄게.</p>

<p class="chat--user">

개선 필요 사항 1. responses api에서도 여러 번 콜을 하고 각 대화를 다 출력하고 싶어. 2. 입력 전체를 그냥 json으로 출력하고, 출력 전체도 그냥 json으로 다 저장해줘. 단, 콘솔 출력 색깔 지정을 통해서 (1) 입력 (2) 툴 요청 (3) 출력 이 구분되면 좋겠어. 3. 추가적으로 json formatting (structured json)도 추가해줘. structured json이 있는 버젼과 없는 버젼 각각 추가해주면 좋겠어. 총 16가지 조합이 될 거야. 각 api에 대한 structured formatting 예시는 아래 코드를 참고해 chat completions 
<code class="language-plaintext highlighter-rouge">
from pydantic import BaseModel
from openai import OpenAI

client = OpenAI()

class CalendarEvent(BaseModel):
    name: str
    date: str
    participants: list[str]

completion = client.chat.completions.parse(
    model="gpt-4o-2024-08-06",
    messages=[
        {"role": "system", "content": "Extract the event information."},
        {"role": "user", "content": "Alice and Bob are going to a science fair on Friday."},
    ],
    response_format=CalendarEvent,
)

event = completion.choices[0].message.parsed
</code>

responses 
<code class="language-plaintext highlighter-rouge">
from openai import OpenAI
from pydantic import BaseModel

client = OpenAI()

class CalendarEvent(BaseModel):
    name: str
    date: str
    participants: list[str]

response = client.responses.parse(
    model="gpt-4o-2024-08-06",
    input=[
        {"role": "system", "content": "Extract the event information."},
        {
            "role": "user",
            "content": "Alice and Bob are going to a science fair on Friday.",
        },
    ],
    text_format=CalendarEvent,
)

event = response.output_parsed
</code>

</p>

<p>좋아, 요구사항(2모델 × 2 API 타입 × 2 Tools JSON 스타일 × 2 Structured 포맷 유무 = 16조합)을 모두 만족하는 단일 실행 스크립트를 준비했어. 다음을 보장해.</p>

<ol>
  <li>
    <p>Responses API에서 여러 번 호출(툴 호출 발생 시 루프)하며, 매 스텝의 대화 전개를 콘솔에 모두 출력.</p>
  </li>
  <li>
    <p>각 조합마다 “입력 전체”와 “출력 전체”를 JSON으로 파일로 저장. 콘솔에선 색상으로 (입력 / 툴요청 / 출력) 구분.</p>
  </li>
  <li>
    <p>Structured JSON 파싱 버전과 일반 버전 각각 제공.</p>
  </li>
  <li>
    <p>에러는 조합별로 try/except로 고립 처리하여, 실패해도 나머지 조합 계속 실행.</p>
  </li>
</ol>

<p>아래 코드를 test_16combos.py로 저장해서 실행해. samples 폴더에 텍스트 파일 몇 개 두면 툴 동작을 쉽게 확인할 수 있어.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_16combos.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# ANSI 색상 유틸
# =========================
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># 입력
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># 툴 요청/툴 출력
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># 모델 출력
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># 에러
</span>
<span class="c1"># =========================
# 모델/엔드포인트/키 설정
# =========================
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =========================
# 로컬 툴 구현
# =========================
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># =========================
# Tools JSON 2가지 스타일
# =========================
# Chat Completions 스타일 (function 필드 중첩)
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># Responses 스타일 (평평한 형태; 일부 예시 포맷)
</span><span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True  # 필요 시 활성화
</span>    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True
</span>    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># =========================
# Structured JSON 포맷용 Pydantic
# =========================
</span><span class="k">class</span> <span class="nc">FileTaskResult</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">chosen_file</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">summary</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># =========================
# 공통: 출력/저장 헬퍼
# =========================
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">label_for</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="sh">'</span><span class="s">structured</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">plain</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># =========================
# Chat Completions 러너 (plain/structured)
# =========================
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="c1"># 대화 시작
</span>    <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="c1"># 입력/출력 전체 저장을 위한 구조
</span>    <span class="n">input_snapshot</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># structured: parse() 사용
</span>        <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># function calling 루프 (parse 결과에서도 tool_calls 접근 가능하도록 시도)
</span>        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># 최종 구조화 결과
</span>        <span class="n">parsed</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">FileTaskResult</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_to_print</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">:</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="bp">None</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat Completions, structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_to_print</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># plain: create() 사용
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat Completions, plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="c1"># 파일 저장
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># =========================
# Responses 러너 (plain/structured)
# - 여러 번 호출하며 매 스텝 출력
# =========================
</span><span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>

        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># structured: responses.parse(text_format=...)
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">text_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># 툴 호출 탐지 → 실행 → function_call_output 추가 → 이어서 또 parse
</span>        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># 최종 파싱 결과
</span>        <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># plain: responses.create()
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="c1"># function_call_output을 input에 누적
</span>                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="c1"># 다음 턴
</span>            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">final_text</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_text</span><span class="p">})</span>

    <span class="c1"># 파일 저장
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># =========================
# 16개 조합 실행기
#   2 모델 × 2 API × 2 Tools JSON × 2 Structured
# =========================
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span>
    <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">combo_label</span> <span class="o">=</span> <span class="nf">label_for</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">combo_label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> structured=</span><span class="si">{</span><span class="sh">'</span><span class="s">on</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
        <span class="c1"># 에러만 출력하고 계속
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 16 combos: 2 models × 2 APIs × 2 Tools JSON × 2 Structured.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--structured</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">structured_opts</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">structured_opts</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">st</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용법 요약</p>

<ol>
  <li>환경 변수 설정(예시)</li>
</ol>

<ul>
  <li>
    <p>모델 A:<br />
OPENAI_API_KEY_A, OPENAI_BASE_URL_A=https://api.openai.com/v1, MODEL_A_NAME</p>
  </li>
  <li>
    <p>모델 B:<br />
OPENAI_API_KEY_B, OPENAI_BASE_URL_B=https://api.openai.com/v1, MODEL_B_NAME</p>
  </li>
</ul>

<ol>
  <li>
    <p>샘플 준비<br />
프로젝트 루트에 samples 폴더를 만들고 텍스트 파일을 1개 이상 넣어둔다.</p>
  </li>
  <li>
    <p>실행 예시</p>
  </li>
</ol>

<ul>
  <li>
    <p>16개 전체 조합 실행<br />
python test_16combos.py</p>
  </li>
  <li>
    <p>Responses만, structured/plain 둘 다, tools는 responses 스타일만<br />
python test_16combos.py –apis responses –tools responses –structured both</p>
  </li>
  <li>
    <p>모델 A만, Chat Completions만, structured만<br />
python test_16combos.py –models A –apis completions –structured on</p>
  </li>
</ul>

<p>동작 정리</p>

<ul>
  <li>
    <p>콘솔 색상으로 입력(청록), 툴 요청(노랑), 출력(초록)을 구분.</p>
  </li>
  <li>
    <p>각 조합은 runs/타임스탬프/모델_API_tools_structured/ 아래에 input.json, outputs.json 저장.</p>
  </li>
  <li>
    <p>Responses API는 툴 호출이 계속 나오면 루프를 반복하고 매 스텝 출력 및 누적 저장.</p>
  </li>
  <li>
    <p>Structured 모드에선 chat.completions.parse / responses.parse를 사용해 Pydantic 모델(FileTaskResult)로 결과를 파싱해 별도 요약도 콘솔에 표시.</p>
  </li>
</ul>

<p>원하는 추가 포맷(예: 파일명 규칙, 더 자세한 로깅, strict 옵션 상시 on 등)이 있으면 알려줘.</p>

<p class="chat--user">

출력 json 포맷은 task에서 요청한 걸 대답할 수 있게 해주면 좋을 것 같아. 예를 들어 filename: 파일명 contents: 내용 

</p>

<p>좋아! “결과 JSON 포맷을 task에 바로 쓰이게(filename, contents)”로 맞춘 버전을 아래처럼 업데이트했어. 핵심은 structured 모드에서 파싱 모델을 <code class="language-plaintext highlighter-rouge">{"filename": str, "contents": str}</code>로 고정하고, 모델에게 “contents에는 요약을 넣어라”라고 지시하는 것. plain 모드에서는 기존 그대로 자유 텍스트를 출력하고 전체 원시 JSON 로그만 저장하며, structured 모드에서는 추가로 <code class="language-plaintext highlighter-rouge">result.json</code>에 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code>를 저장해.</p>

<p>아래 스크립트는 이전 16조합 실행기(test_16combos.py)를 대체하는 완전판이야. 바뀐 점만 빠르게 요약하고 바로 코드 줄게.</p>

<p>변경 요약</p>

<ol>
  <li>Structured 파싱 모델 교체</li>
</ol>

<ul>
  <li>
    <p>Pydantic 모델을 <code class="language-plaintext highlighter-rouge">TaskAnswer</code>로 정의하고 필드를 filename, contents 두 개로 통일.</p>
  </li>
  <li>
    <p>contents는 “읽은 파일의 2~3문장 요약”을 넣도록 system/instructions에 명확히 지시.</p>
  </li>
</ul>

<ol>
  <li>Structured 모드에서 결과 JSON 저장</li>
</ol>

<ul>
  <li>
    <p>각 조합 폴더에 <code class="language-plaintext highlighter-rouge">result.json</code>으로 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code> 저장.</p>
  </li>
  <li>
    <p>기존처럼 <code class="language-plaintext highlighter-rouge">input.json</code>, <code class="language-plaintext highlighter-rouge">outputs.json</code>도 계속 저장.</p>
  </li>
</ul>

<ol>
  <li>콘솔 색상 출력은 동일하게 유지</li>
</ol>

<ul>
  <li>입력(CYAN), 툴 요청(YELLOW), 출력(GREEN)으로 구분.</li>
</ul>

<ol>
  <li>Responses API는 다단 호출 유지</li>
</ol>

<ul>
  <li>각 step의 출력과 툴 요청을 모두 콘솔에 표시하고, outputs.json에 누적 저장.</li>
</ul>

<p>코드</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_16combos_v2.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># ===== ANSI 색상 =====
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># 입력
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># 툴 요청/툴 출력
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># 모델 출력
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># 에러
</span>
<span class="c1"># ===== 모델 설정 =====
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># ===== 로컬 툴 구현 =====
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># ===== Tools JSON 2가지 =====
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># ===== Structured JSON 스키마 =====
</span><span class="k">class</span> <span class="nc">TaskAnswer</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">filename</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">contents</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># 선택된 파일의 2~3문장 요약(모델이 생성)
</span>
<span class="c1"># ===== 유틸 =====
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span> <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="sh">'</span><span class="s">structured</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">plain</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># ===== Chat Completions 러너 =====
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="n">system_msg</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: Show files under ./samples, pick one text file, read it, and provide a 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If using structured output, respond ONLY with JSON having keys: filename, contents.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_msg</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="n">parsed</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TaskAnswer</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># ===== Responses 러너 =====
</span><span class="k">def</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="n">system_inst</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: Show files under ./samples, pick one text file, read it, and provide a 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If structured parsing is enabled, respond ONLY with JSON having keys: filename, contents.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_inst</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">final_text</span> <span class="o">=</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_text</span><span class="p">})</span>

    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># ===== 16개 조합 실행기 =====
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">label</span> <span class="o">=</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> structured=</span><span class="si">{</span><span class="sh">'</span><span class="s">on</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>  <span class="c1"># 에러만 출력하고 계속
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 16 combos with JSON result format {filename, contents}.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--structured</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">structured_opts</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">structured_opts</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">st</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 포인트</p>

<ul>
  <li>
    <p>structured 모드일 때만 <code class="language-plaintext highlighter-rouge">result.json</code>을 생성하며 내용은 반드시 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code>로 저장돼.</p>
  </li>
  <li>
    <p>contents에는 “선택한 파일의 2~3문장 요약”이 들어가도록 시스템 메시지에서 강제했어.</p>
  </li>
  <li>
    <p>plain 모드에선 자유 형식 출력이지만, 입력과 모든 원시 응답은 <code class="language-plaintext highlighter-rouge">input.json</code>, <code class="language-plaintext highlighter-rouge">outputs.json</code>로 저장돼.</p>
  </li>
  <li>
    <p>각 단계의 콘솔 출력은 색상으로 구분돼서 입력/툴요청/출력이 한눈에 보여.</p>
  </li>
</ul>

<p>원하면 contents를 “파일 전문”으로 바꾸는 옵션 스위치도 추가해줄 수 있어.</p>

<p class="chat--user">

Completions(structured)에서 ValueError list_files_in_folder is not strict. Only <code class="language-plaintext highlighter-rouge">strict</code> function tools can be auto-parsed.

</p>

<p>좋은 피드백이야. 에러 원인은 chat.completions.parse를 사용할 때 툴이 strict 모드가 아니면 자동 파싱이 불가능해서야. 즉, structured 모드에서 함수 툴 정의에 strict=True가 반드시 들어가야 해.</p>

<p>수정 방향 요약 단계별</p>

<ol>
  <li>
    <p>tools_variant와 structured 여부에 따라 툴 JSON에 strict를 주입하는 헬퍼를 만든다.</p>
  </li>
  <li>
    <p>Chat 스타일일 땐 tool["function"]["strict"]=True, Responses 스타일일 땐 tool["strict"]=True를 넣는다.</p>
  </li>
  <li>
    <p>run_chat / run_responses에서 기존 정적 TOOLS 대신 이 헬퍼로 반환된 툴을 사용한다.</p>
  </li>
</ol>

<p>아래 변경만 적용하면 돼. 나머지 로직은 그대로 둬도 동작한다.</p>

<p>추가 함수 및 변경점</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">copy</span>

<span class="k">def</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">'</span><span class="s">chat</span><span class="sh">'</span><span class="s"> | </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'</span><span class="s">
    structured가 True면 strict 플래그를 주입한다.
    </span><span class="sh">"""</span>
    <span class="n">base</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># Chat 스타일: "function" 블록 안에 strict
</span>        <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span> <span class="ow">and</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">t</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="c1"># Responses 스타일: 최상위에 strict
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">[</span><span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="n">tools</span>
</code></pre></div></div>

<p>run_chat 내부에서 툴 선택 부분 교체</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기존
# tools = CHAT_STYLE_TOOLS if tools_variant == "chat" else RESPONSES_STYLE_TOOLS
# 변경
</span><span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
</code></pre></div></div>

<p>run_responses 내부에서도 동일하게 교체</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기존
# tools = RESPONSES_STYLE_TOOLS if tools_variant == "responses" else CHAT_STYLE_TOOLS
# 변경
</span><span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
</code></pre></div></div>

<p>추가 참고</p>

<ul>
  <li>
    <p>이 변경으로 Completions(structured) 뿐만 아니라 Responses(structured)에서도 일관되게 엄격 파싱이 보장돼.</p>
  </li>
  <li>
    <p>plain 모드에선 strict가 없어도 되지만, 위 헬퍼는 structured일 때만 strict를 주입하므로 기존 동작을 해치지 않아.</p>
  </li>
  <li>
    <p>tools JSON을 동적으로 주입하므로, 새 함수만 추가하고 두 곳 호출부만 바꾸면 끝나.</p>
  </li>
</ul>

<p>이렇게 수정하면 “ValueError list_files_in_folder is not strict. Only <code class="language-plaintext highlighter-rouge">strict</code> function tools can be auto-parsed.” 에러는 사라지고 16개 조합 모두 정상적으로 순회할 수 있어.</p>

<p class="chat--user">

그래도 계속 에러가 나네. 일단 넘어가고 json scheme을 지정하는 방식은 동작을 잘 안하네 일반 json 모드를 켜보고 싶어. 총 3가지 sweep(no structured, json_mode, structured)로 실험해보자. 예시 responses 
<code class="language-plaintext highlighter-rouge">
we_did_not_specify_stop_tokens = True

try:
    response = client.responses.create(
        model="gpt-3.5-turbo-0125",
        input=[
            {"role": "system", "content": "You are a helpful assistant designed to output JSON."},
            {"role": "user", "content": "Who won the world series in 2020? Please respond in the format {winner: ...}"}
        ],
        text={"format": {"type": "json_object"}}
    )

    # Check if the conversation was too long for the context window, resulting in incomplete JSON 
    if response.status == "incomplete" and response.incomplete_details.reason == "max_output_tokens":
        # your code should handle this error case
        pass

    # Check if the OpenAI safety system refused the request and generated a refusal instead
    if response.output[0].content[0].type == "refusal":
        # your code should handle this error case
        # In this case, the .content field will contain the explanation (if any) that the model generated for why it is refusing
        print(response.output[0].content[0]["refusal"])

    # Check if the model's output included restricted content, so the generation of JSON was halted and may be partial
    if response.status == "incomplete" and response.incomplete_details.reason == "content_filter":
        # your code should handle this error case
        pass

    if response.status == "completed":
        # In this case the model has either successfully finished generating the JSON object according to your schema, or the model generated one of the tokens you provided as a "stop token"

        if we_did_not_specify_stop_tokens:
            # If you didn't specify any stop tokens, then the generation is complete and the content key will contain the serialized JSON object
            # This will parse successfully and should now contain  "{"winner": "Los Angeles Dodgers"}"
            print(response.output_text)
        else:
            # Check if the response.output_text ends with one of your stop tokens and handle appropriately
            pass
except Exception as e:
    # Your code should handle errors here, for example a network error calling the API
    print(e)
</code>

completions 
<code class="language-plaintext highlighter-rouge">
response = client.chat.completions.create(
  model="gpt-4-1106-preview",
  messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "LangChain은 무엇을 하는 라이브러리지? JSON으로 답해줘. JSON 키워드는 Description, Features, Usage로 해줘."}
  ],
  response_format = {'type':"json_object"}
)
</code>

</p>

<p>좋아. strict 기반의 JSON Schema 파싱은 접고, 세 모드로 스윕하도록 전체 스크립트를 업데이트했어.</p>

<p>스윕 축: 2모델 × 2 API(completions/responses) × 2 Tools JSON(chat-style/responses-style) × 3 모드(plain, json_mode, structured) = 총 24조합.</p>

<p>핵심</p>

<ul>
  <li>
    <p>plain: 자유 출력. 전체 입력/출력 원본 JSON을 저장.</p>
  </li>
  <li>
    <p>json_mode: 모델에게 “무조건 JSON”을 요구. 출력은 {"filename","contents"} 형식. 저장 시 result.json 생성.</p>

    <ul>
      <li>
        <p>Chat Completions: response_format={'type': 'json_object'}</p>
      </li>
      <li>
        <p>Responses: text={"format":{"type":"json_object"}}</p>
      </li>
    </ul>
  </li>
  <li>
    <p>structured: 이전처럼 parse 사용. 여전히 모델/SDK에 따라 strict 요구로 실패할 수도 있으니 try/except로 격리. 성공 시 result.json 생성.</p>
  </li>
  <li>
    <p>Responses API는 툴 호출이 나오면 여러 번 호출되며 매 스텝 콘솔 출력. 콘솔은 색상으로 입력(CYAN), 툴 요청(YELLOW), 출력(GREEN) 구분.</p>
  </li>
  <li>
    <p>모든 조합은 runs/타임스탬프/모델_API_tools_mode/ 폴더에 input.json, outputs.json 저장. json_mode/structured는 result.json 추가 저장.</p>
  </li>
  <li>
    <p>에러는 조합별로만 출력하고 나머지 계속 진행.</p>
  </li>
</ul>

<p>코드: test_24combos.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_24combos.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">copy</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># ===== ANSI colors =====
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># input
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># tool
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># output
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># error
</span>
<span class="c1"># ===== Model configs =====
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># ===== Local tools =====
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># ===== Tools JSON (two shapes) =====
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># ===== Structured JSON schema (optional) =====
</span><span class="k">class</span> <span class="nc">TaskAnswer</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">filename</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">contents</span><span class="p">:</span> <span class="nb">str</span>

<span class="c1"># ===== Helpers =====
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span> <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">mode</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="c1"># structured에서 strict 문제를 피하기 위해 여기선 strict 주입을 끔
</span>    <span class="c1"># (structured는 parse() 사용 시 여전히 실패할 수 있으므로 try/except로 감싼다)
</span>    <span class="n">base</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>
    <span class="k">return</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>

<span class="c1"># ===== Common parsing for Responses =====
</span><span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="c1"># ===== Chat Completions runner =====
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>  <span class="c1"># "plain" | "json_mode" | "structured"
</span>    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="o">=</span><span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">))</span>

    <span class="n">system_msg</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: List files in ./samples, pick a text file, read it, and return a short 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">When asked to answer in JSON, reply only with an object: {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string}.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_msg</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">,</span> <span class="sh">"</span><span class="s">mode</span><span class="sh">"</span><span class="p">:</span> <span class="n">mode</span><span class="p">}</span>
    <span class="n">outputs_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
                <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

            <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                    <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                    <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                    <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                      <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
                <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                                 <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
                <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

                <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span>
                <span class="p">)</span>
                <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

            <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
            <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR(Chat structured) ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

    <span class="k">elif</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># Force JSON output
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># Try to parse JSON
</span>        <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat json_mode)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">result_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">result_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>  <span class="c1"># plain
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="c1"># Save IO logs
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">outputs_dump</span><span class="p">)</span>

<span class="c1"># ===== Responses runner =====
</span><span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>  <span class="c1"># "plain" | "json_mode" | "structured"
</span>    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="o">=</span><span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">))</span>

    <span class="n">system_inst</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: List files in ./samples, pick a text file, read it, and return a short 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If JSON is requested, reply only with an object: {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string}.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_inst</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">,</span> <span class="sh">"</span><span class="s">mode</span><span class="sh">"</span><span class="p">:</span> <span class="n">mode</span><span class="p">}</span>
    <span class="n">outputs_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

            <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                    <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                        <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                    <span class="p">})</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span>
                <span class="p">)</span>
                <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

            <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))}</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
            <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR(Responses structured) ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

    <span class="k">elif</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">}},</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">}},</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># Try to parse JSON text
</span>        <span class="n">result_text</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">output_text</span> <span class="ow">or</span> <span class="sh">""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">result_text</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">result_text</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses json_mode)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">result_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">result_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>  <span class="c1"># plain
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))})</span>

    <span class="c1"># Save IO logs
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">outputs_dump</span><span class="p">)</span>

<span class="c1"># ===== 24-combo driver =====
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">가능하다면 JSON으로 {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string} 형태로 답해줘.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">label</span> <span class="o">=</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> mode=</span><span class="si">{</span><span class="n">mode</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 24 combos: 2 models × 2 APIs × 2 tool JSONs × 3 modes.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--modes</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">plain</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">mode_list</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">plain</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">modes</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">modes</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">md</span> <span class="ow">in</span> <span class="n">mode_list</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 팁</p>

<ul>
  <li>
    <p>json_mode가 가장 안정적으로 {"filename","contents"}를 뱉어 줄 거야. structured는 SDK/모델의 strict 정책에 따라 여전히 실패할 수 있지만, 스크립트는 개별 조합별로 에러를 삼키고 계속 진행한다.</p>
  </li>
  <li>
    <p>모든 조합의 입력/출력(raw)을 저장해서 리그레션 비교가 가능해. json_mode/structured는 result.json을 따로 저장하므로 바로 사용할 수 있어.</p>
  </li>
  <li>
    <p>필요하면 system 메시지의 지시를 수정해서 contents에 “요약” 대신 “원문 전체”를 넣도록 바꿀 수도 있어.</p>
  </li>
</ul>

<p class="chat--user">

둘 다 json 관련 포매팅은 잘 안먹히네 일단 일반 텍스트 출력만 생각하자. 이제 소프트웨어 아키텍트 디자인 측면에서 한 번 보자. 조합 1. GPT OSS + responses 형식 call + 신규 tool json 형식 조합 2. Qwen + completions 형식 call + 과거 tool json 형식 이거야. 그런데 나는 사용자가 일종의 콤보 박스로 GPT OSS를 쓸 것인지, Qwen을 쓸 것인지 선택하고 나머지는 그 때 그 때 잘 동작하게 하고 싶어. 뭔가 디자인 패턴적인 것을 써서 깔끔하게 이를 구현하는 방법이 있을까? function call tool도 어떤 식으로 구현하면 좋을까 파이썬 고수의 입장에서 이런 점을 고려해서 깔끔한 코드 만들어줘.

</p>

<p>좋아. 요구 조합과 사용성(콤보박스로 엔진 선택)까지 고려해서 “전략(Strategy) + 툴 스키마 빌더(Factory) + 레지스트리 + 어댑터” 조합으로 깔끔하게 설계한 파이썬 예시를 줄게.</p>

<p>핵심 아이디어 요약(간결):</p>

<ol>
  <li>Strategy 패턴: 서로 다른 호출 방식 차이를 캡슐화</li>
</ol>

<ul>
  <li>
    <p>ResponsesStrategy(GPT OSS, responses 호출, “신규/평평한” tool JSON)</p>
  </li>
  <li>
    <p>CompletionsStrategy(Qwen, chat.completions 호출, “과거/중첩” tool JSON)</p>
  </li>
</ul>

<ol>
  <li>ToolRegistry + ToolSchemaBuilder(Factory):</li>
</ol>

<ul>
  <li>
    <p>ToolRegistry는 파이썬 함수를 등록/실행</p>
  </li>
  <li>
    <p>ToolSchemaBuilder가 등록된 툴을 각 엔진이 요구하는 JSON 모양으로 변환</p>

    <ul>
      <li>
        <p>NewToolJSONBuilder: responses용 flat JSON</p>
      </li>
      <li>
        <p>OldToolJSONBuilder: completions용 nested JSON</p>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>Output 어댑터(단순화):</li>
</ol>

<ul>
  <li>두 전략은 모두 최종적으로 str을 반환. 내부의 tool_call 파싱 차이는 전략에서 숨김.</li>
</ul>

<ol>
  <li>설정 주입:</li>
</ol>

<ul>
  <li>엔드포인트·API 키·모델명을 config로 주입.</li>
</ul>

<p>바로 실행 가능한 단일 파일 예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># arch_combo_clean.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# Config &amp; DTO
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">RunConfig</span><span class="p">:</span>
    <span class="n">engine</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># "gpt-oss" | "qwen"
</span>    <span class="n">task</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">samples_dir</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span>

<span class="c1"># =========================
# Tool layer
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ToolSpec</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># JSON schema for parameters
</span>    <span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># executes with parsed args
</span>
<span class="k">class</span> <span class="nc">ToolRegistry</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ToolSpec</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">spec</span><span class="p">:</span> <span class="n">ToolSpec</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">spec</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Tool already registered: </span><span class="si">{</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">spec</span>

    <span class="k">def</span> <span class="nf">specs</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">func</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="c1"># =========================
# Tool JSON schema builders (Factory)
# =========================
</span>
<span class="k">class</span> <span class="nc">ToolJSONBuilder</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">NewToolJSONBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Responses API에서 자주 보이는 </span><span class="sh">'</span><span class="s">평평한(flat)</span><span class="sh">'</span><span class="s"> 툴 정의
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">tools</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">tools</span>

<span class="k">class</span> <span class="nc">OldToolJSONBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Chat Completions API에서 자주 보이는 </span><span class="sh">'</span><span class="s">중첩(nested)</span><span class="sh">'</span><span class="s"> 툴 정의
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">:{ </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} } }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">tools</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">tools</span>

<span class="c1"># =========================
# Strategy layer
# =========================
</span>
<span class="k">class</span> <span class="nc">EngineStrategy</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span> <span class="n">builder</span><span class="p">:</span> <span class="n">ToolJSONBuilder</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span> <span class="o">=</span> <span class="n">builder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="c1"># ---- GPT OSS + Responses Strategy ----
</span>
<span class="k">class</span> <span class="nc">ResponsesStrategy</span><span class="p">(</span><span class="n">EngineStrategy</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    - responses.create 사용
    - 툴 정의: NewToolJSONBuilder(flat)
    - function_call → 로컬 툴 실행 → function_call_output를 input에 append → 다시 responses.create
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
        <span class="p">]</span>
        <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>

        <span class="c1"># 첫 호출
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="c1"># 누적 텍스트와 루프
</span>        <span class="n">final_text_chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="c1"># 출력 텍스트 수집
</span>            <span class="n">final_text_chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_collect_text</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>

            <span class="c1"># 툴 호출 수집
</span>            <span class="n">calls</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_collect_function_calls</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="c1"># 툴 실행 → function_call_output 추가
</span>            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">]</span>
                <span class="n">args</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="c1"># 다음 턴
</span>            <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span>
            <span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text_chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="c1"># Helpers
</span>    <span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span><span class="p">})</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                        <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                            <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                                      <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                                      <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">calls</span>

<span class="c1"># ---- Qwen + Chat Completions Strategy ----
</span>
<span class="k">class</span> <span class="nc">CompletionsStrategy</span><span class="p">(</span><span class="n">EngineStrategy</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    - chat.completions.create 사용
    - 툴 정의: OldToolJSONBuilder(nested)
    - assistant.tool_calls → 로컬 툴 실행 → tool 메시지 첨부 → 다시 completions
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>
        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
        <span class="p">]</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">final_text_chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
            <span class="p">})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
            <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                <span class="n">final_text_chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text_chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="c1"># =========================
# Tool implementations
# =========================
</span>
<span class="k">def</span> <span class="nf">list_files_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_text_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">build_registry</span><span class="p">(</span><span class="n">samples_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ToolRegistry</span><span class="p">:</span>
    <span class="n">reg</span> <span class="o">=</span> <span class="nc">ToolRegistry</span><span class="p">()</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">list_files_tool</span>
    <span class="p">))</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">read_text_tool</span>
    <span class="p">))</span>
    <span class="k">return</span> <span class="n">reg</span>

<span class="c1"># =========================
# Engine factory / selector
# =========================
</span>
<span class="k">def</span> <span class="nf">make_engine</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">RunConfig</span><span class="p">,</span> <span class="n">model_cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">registry</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">EngineStrategy</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    콤보박스에서 </span><span class="sh">'</span><span class="s">gpt-oss</span><span class="sh">'</span><span class="s"> 또는 </span><span class="sh">'</span><span class="s">qwen</span><span class="sh">'</span><span class="s">을 선택하면,
    내부적으로 알맞은 Strategy + ToolJSONBuilder를 구성해서 반환.
    </span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">cfg</span><span class="p">.</span><span class="n">engine</span> <span class="o">==</span> <span class="sh">"</span><span class="s">gpt-oss</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># Responses + New(flat) tool JSON
</span>        <span class="k">return</span> <span class="nc">ResponsesStrategy</span><span class="p">(</span><span class="n">model_cfg</span><span class="p">,</span> <span class="n">registry</span><span class="p">,</span> <span class="nc">NewToolJSONBuilder</span><span class="p">())</span>
    <span class="k">elif</span> <span class="n">cfg</span><span class="p">.</span><span class="n">engine</span> <span class="o">==</span> <span class="sh">"</span><span class="s">qwen</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># Completions + Old(nested) tool JSON
</span>        <span class="k">return</span> <span class="nc">CompletionsStrategy</span><span class="p">(</span><span class="n">model_cfg</span><span class="p">,</span> <span class="n">registry</span><span class="p">,</span> <span class="nc">OldToolJSONBuilder</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">Unknown engine. Choose </span><span class="sh">'</span><span class="s">gpt-oss</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">qwen</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># =========================
# Example main
# =========================
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># 실제에 맞게 환경 변수로 분리
</span>    <span class="n">gpt_oss</span> <span class="o">=</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_OSS_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_OSS_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_OSS_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_GPT_OSS</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">qwen</span> <span class="o">=</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">qwen2.5</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_QWEN</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="c1"># 콤보박스 선택을 CLI로 가정 (실서비스라면 UI에서 이 값만 바꿔 주입)
</span>    <span class="kn">import</span> <span class="n">argparse</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--engine</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">gpt-oss</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">qwen</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-oss</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">samples 디렉토리 내 파일을 보여주고 하나를 읽어 2~3문장 요약해줘. 필요하면 툴 사용.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># 모델 선택: UI에서 엔진을 바꾸면 이 매핑도 바꿔치기
</span>    <span class="n">model_cfg</span> <span class="o">=</span> <span class="n">gpt_oss</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">engine</span> <span class="o">==</span> <span class="sh">"</span><span class="s">gpt-oss</span><span class="sh">"</span> <span class="k">else</span> <span class="n">qwen</span>
    <span class="n">run_cfg</span> <span class="o">=</span> <span class="nc">RunConfig</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">engine</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">samples_dir</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">samples</span><span class="p">)</span>

    <span class="c1"># 레지스트리 구성(필요시 엔진별 추가/삭제도 가능)
</span>    <span class="n">registry</span> <span class="o">=</span> <span class="nf">build_registry</span><span class="p">(</span><span class="n">run_cfg</span><span class="p">.</span><span class="n">samples_dir</span><span class="p">)</span>

    <span class="c1"># 전략 생성
</span>    <span class="n">engine</span> <span class="o">=</span> <span class="nf">make_engine</span><span class="p">(</span><span class="n">run_cfg</span><span class="p">,</span> <span class="n">model_cfg</span><span class="p">,</span> <span class="n">registry</span><span class="p">)</span>

    <span class="c1"># 실행
</span>    <span class="n">result_text</span> <span class="o">=</span> <span class="n">engine</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">run_cfg</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== FINAL OUTPUT ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">result_text</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="c1"># 샘플 폴더 보장
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>적용 포인트(설계 관점):</p>

<ul>
  <li>
    <p>확장성: 새 엔진이 늘어나도 Strategy만 추가하면 됨. 각 엔진의 호출 차이(Responses vs Completions, tool loop 프로토콜)를 캡슐화했어.</p>
  </li>
  <li>
    <p>책임 분리: ToolRegistry는 등록·실행만, ToolJSONBuilder는 JSON 모양만, Strategy는 대화 루프만 책임.</p>
  </li>
  <li>
    <p>UI 연동: 콤보박스 선택값을 RunConfig.engine으로 주입 → make_engine이 올바른 전략을 리턴.</p>
  </li>
  <li>
    <p>안전성: 루프에 guard로 폭주 방지. arguments는 json.loads로 관대하게 파싱.</p>
  </li>
  <li>
    <p>구성 가능성: 모델명/엔드포인트/키는 ModelConfig로 분리. 환경변수나 설정파일로 치환 용이.</p>
  </li>
</ul>

<p>원한다면</p>

<ul>
  <li>
    <p>로깅 인터페이스를 추가해 단계별(입력/툴요청/출력) 로그를 공통 포맷으로 남기기</p>
  </li>
  <li>
    <p>ToolRegistry에 권한/샌드박스 층(파일 접근 화이트리스트) 추가</p>
  </li>
  <li>
    <p>결과를 항상 {filename, contents} 포맷으로 어댑팅하는 OutputAdapter 추가</p>
  </li>
  <li>
    <p>async 버전(토큰 절약/동시성)을 위한 비동기 전략 추가</p>
  </li>
</ul>

<p>까지도 같은 패턴으로 깔끔하게 확장 가능해.</p>

<p class="chat--user">

조금 더 파이썬과 소프트웨어 아키텍트가 되어서 잘 생각해보자. if gpt-oss가 들어간 거 부터 좀 악취가 나. 추후에 새로운 모델이 들어오고 그 모델은 어떤 조합에서 잘 동작할지 모르잖아? 새로운 모델이 10개쯤 더 추가돼도 잘 관리될 수 있는 구조를 짜주면 좋겠어

</p>

<p>좋아. “모델이 계속 늘어나도 관리 가능한 구조”에 초점을 맞춰 아키텍처를 재정리했어. 핵심은 “조합(Protocol × Tool JSON 형태)”을 모델에서 분리하고, 모델마다 “능력/선호(capabilities &amp; preferences)”만 선언하도록 만드는 거야. 실행 전략은 조합에 따라 자동 선택·실행되며, 실패 시 합리적으로 폴백해.</p>

<p>아래 순서로 설명하고 바로 동작 가능한 예시 코드를 제공할게.</p>

<ol>
  <li>설계 요점</li>
</ol>

<ul>
  <li>
    <p>모델 무관 추상화</p>

    <ul>
      <li>
        <p>ProtocolStrategy: 호출 방식의 차이를 캡슐화. 현재 두 개 구현</p>

        <ul>
          <li>
            <p>ResponsesProtocol (responses.create 루프)</p>
          </li>
          <li>
            <p>CompletionsProtocol (chat.completions.create 루프)</p>
          </li>
        </ul>
      </li>
      <li>
        <p>ToolSchemaBuilder: Tool JSON 모양을 캡슐화. 두 개 구현</p>

        <ul>
          <li>
            <p>FlatStyle (responses에서 흔한 평평한 스키마)</p>
          </li>
          <li>
            <p>NestedStyle (completions에서 흔한 function 중첩)</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>조합(Plan) 단위 실행</p>

    <ul>
      <li>
        <p>Plan(protocol=…, tool_schema=…)</p>
      </li>
      <li>
        <p>Orchestrator가 ModelProfile의 preference에 따라 Plan을 선택하고 실행. 실패 시 fallback Plans 순서대로 시도</p>
      </li>
    </ul>
  </li>
  <li>
    <p>ModelProfile은 “모델명/엔드포인트/키” + “capabilities &amp; preferences”만 정의</p>

    <ul>
      <li>
        <p>새 모델 추가 = ModelProfile 하나 등록</p>
      </li>
      <li>
        <p>모델이 어느 조합에서 잘 동작하는지 모르면, preferences는 비워 두고 Orchestrator가 표준 우선순위(Responses+Flat → Completions+Nested)를 적용</p>
      </li>
    </ul>
  </li>
  <li>
    <p>ToolRegistry로 툴 구현/등록을 분리</p>

    <ul>
      <li>툴 함수 추가/변경이 모델/프로토콜 코드에 전혀 영향 없도록</li>
    </ul>
  </li>
</ul>

<ol>
  <li>실제 동작 흐름</li>
</ol>

<ul>
  <li>
    <p>UI 콤보박스에서 “모델 키”만 선택 → Orchestrator.run(model_key, task)</p>
  </li>
  <li>
    <p>Orchestrator는 ModelCatalog에서 프로필 조회 → Plan 결정 → 해당 Strategy와 ToolSchemaBuilder를 결합해 실행</p>
  </li>
  <li>
    <p>responses 프로토콜은 function_call_output 루프, completions 프로토콜은 tool 메시지 루프 수행</p>
  </li>
  <li>
    <p>최종 결과는 일반 텍스트(plain)로 통일</p>
  </li>
</ul>

<ol>
  <li>코드<br />
아래 파일 하나로 실행 가능. samples 폴더에 텍스트 파일 몇 개 두고 돌려봐.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># arch_flexible_orchestrator.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# Basic Configs &amp; DTOs
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelCapabilities</span><span class="p">:</span>
    <span class="c1"># 가능한 프로토콜
</span>    <span class="n">supports_responses</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">supports_completions</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="c1"># 선호/권장 조합(Plan)을 우선 시도. 비워두면 기본 우선순위가 적용됨
</span>    <span class="n">preferred_plans</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>  <span class="c1"># e.g. [("responses","flat"), ("completions","nested")]
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelProfile</span><span class="p">:</span>
    <span class="n">key</span><span class="p">:</span> <span class="nb">str</span>                <span class="c1"># UI 콤보박스용 ID
</span>    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span>
    <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span>

<span class="c1"># =========================
# Tool Layer
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ToolSpec</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># JSON schema
</span>    <span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">Any</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">ToolRegistry</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ToolSpec</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">spec</span><span class="p">:</span> <span class="n">ToolSpec</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">spec</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Tool already registered: </span><span class="si">{</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">spec</span>

    <span class="k">def</span> <span class="nf">specs</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">func</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="c1"># 기본 툴 2개
</span><span class="k">def</span> <span class="nf">list_files_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_text_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">build_default_registry</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ToolRegistry</span><span class="p">:</span>
    <span class="n">reg</span> <span class="o">=</span> <span class="nc">ToolRegistry</span><span class="p">()</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">list_files_tool</span>
    <span class="p">))</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">read_text_tool</span>
    <span class="p">))</span>
    <span class="k">return</span> <span class="n">reg</span>

<span class="c1"># =========================
# Tool JSON Schema Builders
# =========================
</span>
<span class="k">class</span> <span class="nc">ToolJSONBuilder</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">FlatStyleBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Responses에서 자주 쓰는 평평한 툴 형식:
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">NestedStyleBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Completions에서 자주 쓰는 중첩 툴 형식:
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">:{ </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} } }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="c1"># =========================
# Protocol Strategies
# =========================
</span>
<span class="k">class</span> <span class="nc">ProtocolStrategy</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span> <span class="n">builder</span><span class="p">:</span> <span class="n">ToolJSONBuilder</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span> <span class="o">=</span> <span class="n">builder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="c1"># Responses 프로토콜
</span><span class="k">class</span> <span class="nc">ResponsesProtocol</span><span class="p">(</span><span class="n">ProtocolStrategy</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">input_list</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
        <span class="p">]</span>
        <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>

        <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_collect_text</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span>
            <span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span><span class="p">})</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                        <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                            <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                                      <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                                      <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">calls</span>

<span class="c1"># Completions 프로토콜
</span><span class="k">class</span> <span class="nc">CompletionsProtocol</span><span class="p">(</span><span class="n">ProtocolStrategy</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>
        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
        <span class="p">]</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
            <span class="p">})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
            <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="c1"># =========================
# Planning (조합 결정)
# =========================
</span>
<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Plan</span><span class="p">:</span>
    <span class="n">protocol</span><span class="p">:</span> <span class="nb">str</span>         <span class="c1"># "responses" | "completions"
</span>    <span class="n">tool_schema</span><span class="p">:</span> <span class="nb">str</span>      <span class="c1"># "flat" | "nested"
</span>
<span class="k">class</span> <span class="nc">Orchestrator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">profiles</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelProfile</span><span class="p">],</span> <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">profiles</span> <span class="o">=</span> <span class="n">profiles</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">model_key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">profiles</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown model key: </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">profile</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">profiles</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>

        <span class="n">plans</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_candidate_plans</span><span class="p">(</span><span class="n">profile</span><span class="p">.</span><span class="n">caps</span><span class="p">)</span>
        <span class="n">last_error</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">Exception</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">plan</span> <span class="ow">in</span> <span class="n">plans</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">strategy</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_strategy</span><span class="p">(</span><span class="n">profile</span><span class="p">.</span><span class="n">cfg</span><span class="p">,</span> <span class="n">plan</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">strategy</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">last_error</span> <span class="o">=</span> <span class="n">e</span>
                <span class="c1"># 다음 플랜으로 시도
</span>                <span class="k">continue</span>
        <span class="k">if</span> <span class="n">last_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">last_error</span>
        <span class="k">return</span> <span class="sh">""</span>

    <span class="k">def</span> <span class="nf">_candidate_plans</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Plan</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Plan</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># 1) 명시된 선호 플랜 우선
</span>        <span class="k">for</span> <span class="n">proto</span><span class="p">,</span> <span class="n">schema</span> <span class="ow">in</span> <span class="n">caps</span><span class="p">.</span><span class="n">preferred_plans</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_supported</span><span class="p">(</span><span class="n">proto</span><span class="p">,</span> <span class="n">caps</span><span class="p">):</span>
                <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Plan</span><span class="p">(</span><span class="n">proto</span><span class="p">,</span> <span class="n">schema</span><span class="p">))</span>
        <span class="c1"># 2) 기본 폴백 순서
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">),</span>   <span class="c1"># 혹시 특정 모델이 nested를 요구한다면
</span>            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">),</span>
        <span class="p">]</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">defaults</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_supported</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">protocol</span><span class="p">,</span> <span class="n">caps</span><span class="p">)</span> <span class="ow">and</span> <span class="n">p</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
                <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">_supported</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">proto</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">proto</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">caps</span><span class="p">.</span><span class="n">supports_responses</span><span class="p">)</span> <span class="ow">or</span> \
               <span class="p">(</span><span class="n">proto</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">caps</span><span class="p">.</span><span class="n">supports_completions</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_make_strategy</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">plan</span><span class="p">:</span> <span class="n">Plan</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ProtocolStrategy</span><span class="p">:</span>
        <span class="n">builder</span><span class="p">:</span> <span class="n">ToolJSONBuilder</span> <span class="o">=</span> <span class="nc">FlatStyleBuilder</span><span class="p">()</span> <span class="k">if</span> <span class="n">plan</span><span class="p">.</span><span class="n">tool_schema</span> <span class="o">==</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span> <span class="k">else</span> <span class="nc">NestedStyleBuilder</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">plan</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">ResponsesProtocol</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span> <span class="n">builder</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">plan</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">CompletionsProtocol</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span> <span class="n">builder</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown protocol: </span><span class="si">{</span><span class="n">plan</span><span class="p">.</span><span class="n">protocol</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># =========================
# Model Catalog (등록/확장 지점)
# =========================
</span>
<span class="k">def</span> <span class="nf">build_catalog</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelProfile</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    새 모델을 추가하려면 아래 dict에 항목 1줄만 더 넣으면 됨.
    - 모델 키(key): UI 콤보박스에서 쓰는 식별자
    - name/base_url/api_key: 환경변수로 주입(다른 벤더 SDK여도 OpenAI 호환이면 그대로 가능)
    - 캡능/선호(preferred_plans): 조합을 몰라도 비워두면 기본 순서대로 자동 시도
    </span><span class="sh">"""</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="c1"># 예시1: GPT-계열(Responses 선호)
</span>        <span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">)]</span>  <span class="c1"># 먼저 responses+flat 시도
</span>            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># 예시2: Qwen-계열(Completions 선호)
</span>        <span class="sh">"</span><span class="s">qwen_like</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">qwen_like</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">qwen2.5</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">)]</span>  <span class="c1"># 먼저 completions+nested 시도
</span>            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># 예시3: Responses만 되는 모델
</span>        <span class="sh">"</span><span class="s">resp_only</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">resp_only</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">some-resp-model</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># 예시4: Completions만 되는 모델
</span>        <span class="sh">"</span><span class="s">chat_only</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_only</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">some-chat-model</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
    <span class="p">}</span>

<span class="c1"># =========================
# Example main (UI 콤보박스 대체)
# =========================
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">argparse</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Flexible model orchestrator (plain text, tools).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model-key</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Model key from catalog (e.g., gpt_like, qwen_like, resp_only, chat_only)</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">samples 폴더 파일 목록을 보여주고, 텍스트 파일을 하나 읽어 2~3문장으로 요약해줘. 필요하면 툴 사용.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># 준비
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">registry</span> <span class="o">=</span> <span class="nf">build_default_registry</span><span class="p">()</span>
    <span class="n">catalog</span> <span class="o">=</span> <span class="nf">build_catalog</span><span class="p">()</span>
    <span class="n">orch</span> <span class="o">=</span> <span class="nc">Orchestrator</span><span class="p">(</span><span class="n">catalog</span><span class="p">,</span> <span class="n">registry</span><span class="p">)</span>

    <span class="c1"># 실행
</span>    <span class="n">out</span> <span class="o">=</span> <span class="n">orch</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">model_key</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== FINAL OUTPUT ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<ol>
  <li>이 설계가 확장에 유리한 이유</li>
</ol>

<ul>
  <li>
    <p>새 모델 추가 시 변경 범위가 매우 작음</p>

    <ul>
      <li>
        <p>ModelCatalog에 ModelProfile 1줄 추가(이름/엔드포인트/키, 캡능/선호)</p>
      </li>
      <li>
        <p>조합을 몰라도 OK: preferred_plans 비우면 Orchestrator가 표준 우선순위로 자동 시도</p>
      </li>
    </ul>
  </li>
  <li>
    <p>조합 폭발에도 견고</p>

    <ul>
      <li>
        <p>Plan을 독립 타입으로 관리해서 Protocol × ToolSchema를 명시적으로 표기</p>
      </li>
      <li>
        <p>실패 시 다음 Plan으로 폴백하는 일관된 로직</p>
      </li>
    </ul>
  </li>
  <li>
    <p>관심사 분리</p>

    <ul>
      <li>
        <p>ToolRegistry/ToolSpec: 툴 구현과 파라미터 스키마만 관리</p>
      </li>
      <li>
        <p>ToolJSONBuilder: JSON 모양만 담당(Flat/Nested 추가 쉬움)</p>
      </li>
      <li>
        <p>ProtocolStrategy: 호출/루프/파싱 차이만 담당</p>
      </li>
      <li>
        <p>Orchestrator: 모델 선택과 플랜 선정/폴백만 담당</p>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>커스터마이징 힌트</li>
</ol>

<ul>
  <li>
    <p>모델별 “도구 정책”이 다르면 ModelProfile에 tool_policy 콜백을 추가해 특정 툴만 노출 가능</p>
  </li>
  <li>
    <p>로깅/메트릭스: ProtocolStrategy.run 내부에서 콜 카운트/지연/토큰 사용량(응답 필드에 있으면) 수집 후 공통 인터페이스로 리턴</p>
  </li>
  <li>
    <p>안전 모드: 파일 접근 화이트리스트(예: samples 하위만 허용)를 ToolRegistry.call에 주입</p>
  </li>
  <li>
    <p>후일 JSON 모드/Structured가 안정화되면 Plan에 “output_format” 축을 추가해 전략적으로 선택 가능</p>
  </li>
</ul>

<p>필요하면 이 구조로 테스트 하네스(여러 모델×플랜을 한 번에 돌려 결과 비교)도 바로 얹어줄게.</p>

<p class="chat--user">

추가 요청 사항 1. Async 통신만 사용해줘. 
<code class="language-plaintext highlighter-rouge">
async with AsyncOpenAI(
    ..., http_clinet=httpx.AsyncClient(event_hooks=hooks) as client:
    client....
</code>

2. 유저가 인터럽트하면 중지가 되어야 해. 예를 들어 주기적으로 user.processing_interrupted() 함수를 호출해서 취소 여부를 확인하고 그에 따라 client도 깔끔하게 취소가 되어야 해. 3. 주석은 영문으로 써줘. 4. 모든 코드를 써줘.

</p>

<p>아래는 확장성에 초점을 둔 비동기(Async) 오케스트레이션 샘플이야.<br />
설계 포인트 요약</p>

<ul>
  <li>
    <p>모델 수가 늘어나도 변경 최소화: 새 모델은 ModelProfile만 추가하면 됨.</p>
  </li>
  <li>
    <p>조합(Protocol × Tool-JSON-Style)을 모델과 분리: Orchestrator가 Plan을 자동 선택·폴백.</p>
  </li>
  <li>
    <p>순수 비동기 통신만 사용: AsyncOpenAI + httpx.AsyncClient.</p>
  </li>
  <li>
    <p>사용자 인터럽트 지원: user.processing_interrupted()를 주기적으로 확인하고, 진행 중 요청은 asyncio Task 취소로 깔끔히 중단.</p>
  </li>
</ul>

<p>코드는 한 파일로 동작하며 일반 텍스트 출력만을 반환한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># async_arch_orchestrator.py
# Python 3.10+
# pip install --upgrade openai httpx
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="c1"># ============================================================
# Exceptions / Interrupt
# ============================================================
</span>
<span class="k">class</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Raised when the user has interrupted the processing.</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">UserInterruptController</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    A simple interrupt controller.
    - Call `trigger()` to mark as interrupted (e.g., SIGINT handler).
    - Frameworks/UI can override processing_interrupted() to integrate with their own state.
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">processing_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Return True if the user has requested cancellation.</span><span class="sh">"""</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_event</span><span class="p">.</span><span class="nf">is_set</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">trigger</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Externally trigger an interrupt (e.g., from a signal handler or UI callback).</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_event</span><span class="p">.</span><span class="nf">set</span><span class="p">()</span>

<span class="c1"># ============================================================
# Configs &amp; Profiles
# ============================================================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelCapabilities</span><span class="p">:</span>
    <span class="c1"># Supported protocols
</span>    <span class="n">supports_responses</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">supports_completions</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="c1"># Preferred plans, empty ⇒ Orchestrator applies default order.
</span>    <span class="n">preferred_plans</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>  <span class="c1"># e.g. [("responses", "flat"), ("completions", "nested")]
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelProfile</span><span class="p">:</span>
    <span class="n">key</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span>
    <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span>

<span class="c1"># ============================================================
# Tool Layer
# ============================================================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ToolSpec</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># JSON schema object
</span>    <span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># Sync function (fast local I/O)
</span>
<span class="k">class</span> <span class="nc">ToolRegistry</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Keeps tool specs and executes them by name.</span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ToolSpec</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">spec</span><span class="p">:</span> <span class="n">ToolSpec</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">spec</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Tool already registered: </span><span class="si">{</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">spec</span>

    <span class="k">def</span> <span class="nf">specs</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">func</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="c1"># Default file tools
</span>
<span class="k">def</span> <span class="nf">list_files_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_text_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">build_default_registry</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ToolRegistry</span><span class="p">:</span>
    <span class="n">reg</span> <span class="o">=</span> <span class="nc">ToolRegistry</span><span class="p">()</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">list_files_tool</span>
    <span class="p">))</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">read_text_tool</span>
    <span class="p">))</span>
    <span class="k">return</span> <span class="n">reg</span>

<span class="c1"># ============================================================
# Tool JSON builders (Factory)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">ToolJSONBuilder</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">FlatStyleBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    </span><span class="sh">"</span><span class="s">New</span><span class="sh">"</span><span class="s"> / flat tool JSON (often used with Responses-style examples):
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">NestedStyleBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    </span><span class="sh">"</span><span class="s">Old</span><span class="sh">"</span><span class="s"> / nested tool JSON (common in Chat Completions examples):
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">:{ </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} } }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="c1"># ============================================================
# Async helpers (HTTP client, cancellation wrapper)
# ============================================================
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">call_with_interrupt</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">interrupt_cb</span><span class="p">,</span> <span class="n">poll_interval</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Run an awaitable while periodically checking for user interruption.
    If interrupted, cancel the task and raise UserCancelledError.
    </span><span class="sh">"""</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">task</span><span class="p">},</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">task</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>
            <span class="c1"># Periodically check interrupt
</span>            <span class="k">if</span> <span class="k">await</span> <span class="nf">interrupt_cb</span><span class="p">():</span>
                <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">task</span>
                <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
                    <span class="k">pass</span>
                <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">raise</span>

<span class="k">def</span> <span class="nf">build_httpx_hooks</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="n">Callable</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Create httpx AsyncClient event hooks.
    You can add logging or tracing here if desired.
    </span><span class="sh">"""</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">on_request</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
        <span class="c1"># Example: print(f"[httpx] -&gt; {request.method} {request.url}")
</span>        <span class="k">return</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">on_response</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
        <span class="c1"># Example: print(f"[httpx] &lt;- {response.status_code} {response.request.url}")
</span>        <span class="k">return</span>

    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">on_request</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">on_response</span><span class="p">]}</span>

<span class="c1"># ============================================================
# Protocol Strategies (Async)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">ProtocolStrategy</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Base class for protocol strategies.
    Each strategy must:
      - Use AsyncOpenAI only
      - Respect user interruption at reasonable checkpoints
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">model</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
        <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span>
        <span class="n">builder</span><span class="p">:</span> <span class="n">ToolJSONBuilder</span><span class="p">,</span>
        <span class="n">interrupt</span><span class="p">:</span> <span class="n">UserInterruptController</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span> <span class="o">=</span> <span class="n">builder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span> <span class="o">=</span> <span class="n">interrupt</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">ResponsesProtocol</span><span class="p">(</span><span class="n">ProtocolStrategy</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Async implementation of a Responses-style loop:
      - responses.create
      - process output_text
      - if tool calls exist: execute local tool(s), append function_call_output, repeat
    </span><span class="sh">"""</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                    <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
                <span class="p">})</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                        <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                            <span class="k">try</span><span class="p">:</span>
                                <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                                <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                            <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
                        <span class="p">})</span>
        <span class="k">return</span> <span class="n">calls</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">hooks</span> <span class="o">=</span> <span class="nf">build_httpx_hooks</span><span class="p">()</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="n">httpx</span><span class="p">.</span><span class="nc">Timeout</span><span class="p">(</span><span class="mf">60.0</span><span class="p">),</span> <span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">)</span> <span class="k">as</span> <span class="n">http_client</span><span class="p">:</span>
            <span class="k">async</span> <span class="k">with</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">api_key</span><span class="p">,</span> <span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
                <span class="n">input_list</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
                <span class="p">]</span>
                <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>

                <span class="c1"># First call
</span>                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>
                <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                    <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                        <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                        <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
                        <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
                    <span class="p">),</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                <span class="p">)</span>

                <span class="c1"># Loop
</span>                <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                    <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_collect_text</span><span class="p">(</span><span class="n">resp</span><span class="p">))</span>

                    <span class="n">calls</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
                    <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                        <span class="k">break</span>

                    <span class="c1"># Execute tools locally and append outputs
</span>                    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                        <span class="c1"># Check for interruption between tool calls as well
</span>                        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>

                        <span class="n">name</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">]</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span>
                        <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
                        <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                            <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                        <span class="p">})</span>

                    <span class="c1"># Next turn
</span>                    <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>
                    <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                        <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
                        <span class="p">),</span>
                        <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                    <span class="p">)</span>

                <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_guard_interrupt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">CompletionsProtocol</span><span class="p">(</span><span class="n">ProtocolStrategy</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Async implementation of a Chat Completions-style loop:
      - chat.completions.create
      - assistant.tool_calls → execute tools → append tool messages → repeat
    </span><span class="sh">"""</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">hooks</span> <span class="o">=</span> <span class="nf">build_httpx_hooks</span><span class="p">()</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="n">httpx</span><span class="p">.</span><span class="nc">Timeout</span><span class="p">(</span><span class="mf">60.0</span><span class="p">),</span> <span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">)</span> <span class="k">as</span> <span class="n">http_client</span><span class="p">:</span>
            <span class="k">async</span> <span class="k">with</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">api_key</span><span class="p">,</span> <span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
                <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>
                <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
                <span class="p">]</span>

                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>
                <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                    <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                        <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                        <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
                        <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
                    <span class="p">),</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                <span class="p">)</span>
                <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
                <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">]</span>
                <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>

                <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                    <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>

                    <span class="c1"># Prepare tool messages
</span>                    <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
                    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>

                        <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                        <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                        <span class="p">})</span>

                    <span class="c1"># Append assistant tool_calls echo + tool outputs
</span>                    <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
                    <span class="p">})</span>
                    <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

                    <span class="c1"># Next turn
</span>                    <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>
                    <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                        <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                        <span class="p">),</span>
                        <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                    <span class="p">)</span>
                    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
                    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                        <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

                <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_guard_interrupt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ============================================================
# Planning (Protocol × Tool-JSON combination)
# ============================================================
</span>
<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Plan</span><span class="p">:</span>
    <span class="n">protocol</span><span class="p">:</span> <span class="nb">str</span>        <span class="c1"># "responses" | "completions"
</span>    <span class="n">tool_schema</span><span class="p">:</span> <span class="nb">str</span>     <span class="c1"># "flat" | "nested"
</span>
<span class="k">class</span> <span class="nc">Orchestrator</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Chooses and executes the best Plan for a given model, with fallback.
    Fully async and interruption-aware.
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">profiles</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelProfile</span><span class="p">],</span> <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">:</span> <span class="n">UserInterruptController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">profiles</span> <span class="o">=</span> <span class="n">profiles</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span> <span class="o">=</span> <span class="n">interrupt</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">model_key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">profiles</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown model key: </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">profile</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">profiles</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>

        <span class="n">plans</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_candidate_plans</span><span class="p">(</span><span class="n">profile</span><span class="p">.</span><span class="n">caps</span><span class="p">)</span>
        <span class="n">last_error</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">Exception</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">plan</span> <span class="ow">in</span> <span class="n">plans</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">strategy</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_strategy</span><span class="p">(</span><span class="n">profile</span><span class="p">.</span><span class="n">cfg</span><span class="p">,</span> <span class="n">plan</span><span class="p">)</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">strategy</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">UserCancelledError</span><span class="p">:</span>
                <span class="c1"># Bubble up immediately on user cancellation
</span>                <span class="k">raise</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">last_error</span> <span class="o">=</span> <span class="n">e</span>
                <span class="c1"># Try next plan on failure
</span>                <span class="k">continue</span>
        <span class="k">if</span> <span class="n">last_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">last_error</span>
        <span class="k">return</span> <span class="sh">""</span>

    <span class="k">def</span> <span class="nf">_candidate_plans</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Plan</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Plan</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># 1) Preferred plans first
</span>        <span class="k">for</span> <span class="n">proto</span><span class="p">,</span> <span class="n">schema</span> <span class="ow">in</span> <span class="n">caps</span><span class="p">.</span><span class="n">preferred_plans</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_supported</span><span class="p">(</span><span class="n">proto</span><span class="p">,</span> <span class="n">caps</span><span class="p">):</span>
                <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Plan</span><span class="p">(</span><span class="n">proto</span><span class="p">,</span> <span class="n">schema</span><span class="p">))</span>
        <span class="c1"># 2) Default fallback order
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">),</span>
        <span class="p">]</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">defaults</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_supported</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">protocol</span><span class="p">,</span> <span class="n">caps</span><span class="p">)</span> <span class="ow">and</span> <span class="n">p</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
                <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">_supported</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">proto</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">proto</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">caps</span><span class="p">.</span><span class="n">supports_responses</span><span class="p">)</span> <span class="ow">or</span> \
               <span class="p">(</span><span class="n">proto</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">caps</span><span class="p">.</span><span class="n">supports_completions</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_make_strategy</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">plan</span><span class="p">:</span> <span class="n">Plan</span><span class="p">):</span>
        <span class="n">builder</span> <span class="o">=</span> <span class="nc">FlatStyleBuilder</span><span class="p">()</span> <span class="k">if</span> <span class="n">plan</span><span class="p">.</span><span class="n">tool_schema</span> <span class="o">==</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span> <span class="k">else</span> <span class="nc">NestedStyleBuilder</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">plan</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">ResponsesProtocol</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span> <span class="n">builder</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">plan</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">CompletionsProtocol</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span> <span class="n">builder</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown protocol: </span><span class="si">{</span><span class="n">plan</span><span class="p">.</span><span class="n">protocol</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ============================================================
# Model Catalog (extensible)
# ============================================================
</span>
<span class="k">def</span> <span class="nf">build_catalog</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelProfile</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    To add a new model, just create another ModelProfile entry here.
    If you don</span><span class="sh">'</span><span class="s">t know which combo works best, leave `preferred_plans` empty;
    Orchestrator will try the defaults in a safe order.
    </span><span class="sh">"""</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="c1"># Example: GPT-like model (prefers Responses + flat tools)
</span>        <span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># Example: Qwen-like model (prefers Completions + nested tools)
</span>        <span class="sh">"</span><span class="s">qwen_like</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">qwen_like</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">qwen2.5</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># Example: responses-only vendor
</span>        <span class="sh">"</span><span class="s">resp_only</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">resp_only</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">some-resp-model</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># Example: completions-only vendor
</span>        <span class="sh">"</span><span class="s">chat_only</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_only</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">some-chat-model</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
    <span class="p">}</span>

<span class="c1"># ============================================================
# Main (async) with signal-based interrupt wiring
# ============================================================
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">amain</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">argparse</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Async flexible orchestrator (plain text + tool calling).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model-key</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Pick from catalog: gpt_like, qwen_like, resp_only, chat_only</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">List files under ./samples, pick a text file, read it, and return a 2-3 sentence summary. Use tools if needed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># Build tool registry (you can scope tools per model if required)
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">samples</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">build_default_registry</span><span class="p">()</span>

    <span class="c1"># Build catalog and orchestrator
</span>    <span class="n">catalog</span> <span class="o">=</span> <span class="nf">build_catalog</span><span class="p">()</span>
    <span class="n">interrupt</span> <span class="o">=</span> <span class="nc">UserInterruptController</span><span class="p">()</span>

    <span class="c1"># OS signal → user interrupt (Ctrl+C)
</span>    <span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">loop</span><span class="p">.</span><span class="nf">add_signal_handler</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">.</span><span class="n">trigger</span><span class="p">)</span>
        <span class="n">loop</span><span class="p">.</span><span class="nf">add_signal_handler</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">.</span><span class="n">trigger</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">NotImplementedError</span><span class="p">:</span>
        <span class="c1"># add_signal_handler may not be available on some platforms (e.g., Windows in some envs)
</span>        <span class="k">pass</span>

    <span class="n">orch</span> <span class="o">=</span> <span class="nc">Orchestrator</span><span class="p">(</span><span class="n">catalog</span><span class="p">,</span> <span class="n">tools</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="n">orch</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">model_key</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== FINAL OUTPUT ===</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">UserCancelledError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== INTERRUPTED ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== ERROR ===</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">amain</span><span class="p">())</span>
</code></pre></div></div>

<p>확장 방법</p>

<ul>
  <li>
    <p>새 모델 추가: build_catalog()에 ModelProfile 한 줄만 추가. preferred_plans가 비어도 Orchestrator가 기본 순서대로 시도.</p>
  </li>
  <li>
    <p>툴 추가: ToolRegistry.register(…)만 호출. 파라미터 스키마와 함수 구현을 붙이면 자동으로 모든 전략에서 사용.</p>
  </li>
  <li>
    <p>인터럽트 연동: UI 스레드에서 interrupt.trigger()를 호출하거나, UserInterruptController를 구현해 processing_interrupted()가 True를 반환하도록 만들면 된다.</p>
  </li>
  <li>
    <p>로깅/메트릭/리트라이: call_with_interrupt()나 각 ProtocolStrategy.run() 내부에 쉽게 주입 가능.</p>
  </li>
</ul>

<p class="chat--user">

responses와 completions에서 parameter 넣는 방식은 똑같아? 예를 들어 reasoning_effort나 max_tokens 같은 것들

</p>

<p>짧은 답: 완전히 같지 않아. 공통 파라미터도 있지만, 길이·추론 제어 계열은 엔드포인트마다 이름이 다르다.</p>

<p>핵심 정리</p>

<ul>
  <li>
    <p>출력 길이 상한</p>

    <ul>
      <li>
        <p>Responses API: max_output_tokens 사용. <a href="https://platform.openai.com/docs/api-reference/realtime-server-events/response?_ga=2.241776386.1079907819.1650361546-70707626.1649909918&amp;_ga=2.36908453.440971442.1659710882-965169732.1659710882">OpenAI 플랫폼</a></p>
      </li>
      <li>
        <p>Chat Completions: 모델에 따라 다름</p>

        <ul>
          <li>
            <p>추론형(o*, GPT-5 계열 등): max_completion_tokens 권장</p>
          </li>
          <li>
            <p>일반 채팅 모델: 기존 max_tokens<br />
실제로 서로 바꿔 쓰면 무시되거나 에러가 난다. 공식 Chat API 문서는 max_tokens 계열을, Responses/Realtime 쪽 문서는 max_output_tokens를 각각 다룬다. <a href="https://platform.openai.com/docs/api-reference/introduction?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>추론 강도(“얼마나 깊게 생각할지”)</p>

    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>최신 가이드라인은 reasoning 객체 아래 effort 필드를 쓰는 형태가 표준이다. 예: reasoning={"effort": "low</td>
              <td>medium</td>
              <td>high"} 또는 일부 최신 모델에서 "minimal" 추가. 두 엔드포인트 모두 같은 모양으로 붙이되, 모델이 지원할 때만 적용된다. <a href="https://platform.openai.com/docs/guides/reasoning?utm_source=chatgpt.com">OpenAI 플랫폼</a></td>
            </tr>
          </tbody>
        </table>
      </li>
    </ul>
  </li>
  <li>
    <p>그 외 공통으로 거의 동일하게 쓰는 것<br />
temperature, top_p, stop, tools 정의 자체 등은 두 엔드포인트 모두 유사하게 동작한다. 차이는 메시지 컨테이너가 responses는 input, chat completions는 messages라는 점 정도다. <a href="https://platform.openai.com/docs/api-reference/introduction?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ul>

<p>권장 사용 패턴</p>

<ul>
  <li>
    <p>Responses API 예시</p>

    <ul>
      <li>
        <p>max_output_tokens와 reasoning.effort를 함께 설정</p>
      </li>
      <li>
        <p>메시지는 input=[{role, content}, …]</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Chat Completions 예시</p>

    <ul>
      <li>
        <p>추론 모델이면 max_completion_tokens 사용, 일반 모델이면 max_tokens</p>
      </li>
      <li>
        <p>메시지는 messages=[{role, content}, …]</p>
      </li>
      <li>
        <p>reasoning.effort는 지원 모델에서만</p>
      </li>
    </ul>
  </li>
</ul>

<p>간단 예시</p>

<p>Python, Responses API</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-5-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">요약해줘</span><span class="sh">"</span><span class="p">}],</span>
    <span class="n">max_output_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>
    <span class="n">reasoning</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">medium</span><span class="sh">"</span><span class="p">},</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:{...}}],</span>
<span class="p">)</span>
</code></pre></div></div>

<p>Python, Chat Completions</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">o3-mini</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># 추론형 모델
</span>    <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">요약해줘</span><span class="sh">"</span><span class="p">}],</span>
    <span class="n">max_completion_tokens</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span>   <span class="c1"># 추론형이면 이걸 사용
</span>    <span class="n">reasoning</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">medium</span><span class="sh">"</span><span class="p">},</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:{...}}}],</span>
<span class="p">)</span>
<span class="c1"># 일반 채팅 모델이라면 max_tokens를 사용
</span></code></pre></div></div>

<p>요약 체크리스트</p>

<ul>
  <li>
    <p>Responses → max_output_tokens</p>
  </li>
  <li>
    <p>Chat Completions → 추론형: max_completion_tokens / 일반: max_tokens</p>
  </li>
  <li>
    <p>reasoning.effort는 모델이 지원할 때만 적용</p>
  </li>
  <li>
    <p>공통 파라미터(temperature, top_p, stop 등)는 거의 동일하고, 컨테이너만 input vs messages가 다름</p>
  </li>
</ul>

<p>참고 문서</p>

<ul>
  <li>
    <p>Chat Completions API 레퍼런스(파라미터 전반, messages 등). <a href="https://platform.openai.com/docs/api-reference/introduction?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Reasoning 가이드(추론 모델과 effort 개념). <a href="https://platform.openai.com/docs/guides/reasoning?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Realtime/Responses 계열에서 max_output_tokens 명시. <a href="https://platform.openai.com/docs/api-reference/realtime-server-events/response?_ga=2.241776386.1079907819.1650361546-70707626.1649909918&amp;_ga=2.36908453.440971442.1659710882-965169732.1659710882">OpenAI 플랫폼</a></p>
  </li>
</ul>

<p class="chat--user">

왜 이렇게 api를 짜증나게 만들었을까

</p>

<p>그 마음 100% 이해해. 엔드포인트마다 이름이 미묘하게 다르고, 모델마다 지원/비지원이 달라서 매번 “이건 max_output_tokens였지? 아니면 max_tokens였나…?” 하게 만들죠.</p>

<p>왜 이런 일이 생기냐(현실적인 배경)</p>

<ol>
  <li>
    <p>레거시와 진화가 동시에 굴러감<br />
초기 Chat Completions의 설계가 이미 광범위하게 쓰인 뒤, Responses 계열이 “더 범용(멀티모달·툴·스트리밍·상태전달)” 관점으로 나왔어요. 과거 API를 깨지 않으려니 파라미터/컨테이너 이름이 달라졌습니다.</p>
  </li>
  <li>
    <p>모델 계열별 제약이 달라요<br />
“추론형(reasoning) 모델”은 토큰·추론깊이 제어가 별도라 max_completion_tokens, reasoning.effort 같은 필드가 추가되고, 일반 채팅 모델과 동작이 달라요.</p>
  </li>
  <li>
    <p>안전·비용·속도 정책이 독립적으로 변함<br />
각 엔드포인트가 검열·중단·비용제어 사양을 따로 발전시키다 보니 교집합이 어긋납니다.</p>
  </li>
  <li>
    <p>도구(tool) 생태계의 빠른 변화<br />
함수 호출 스키마가 “nested” → “flat”로, 혹은 strict 모드 추가처럼 사용성 개선을 반복하면서 예시와 실제가 엇갈리는 시기가 생겨요.</p>
  </li>
</ol>

<p>그래서 어떻게 덜 짜증나게 쓰냐(실전 팁)</p>

<ol>
  <li>
    <p>어댑터 + 전략 패턴으로 API 차이를 가둬두기<br />
호출부엔 “내가 원하는 공통 파라미터”만 쓰고, 엔드포인트별로 맞는 실제 파라미터로 변환하는 얇은 레이어를 둡니다.</p>
  </li>
  <li>
    <p>파라미터 정규화기(Parameter Normalizer)<br />
length, temp, top_p, stop, reasoning_effort 같은 “중립 이름”을 입력받아 completions/responses/모델종류에 맞춰 매핑합니다.</p>
  </li>
  <li>
    <p>툴 스키마 빌더<br />
동일한 ToolRegistry를 두고, “flat”과 “nested” 스키마로 빌드만 갈라서 뿌립니다.</p>
  </li>
  <li>
    <p>기능 감지와 폴백<br />
모델 프로필에 capabilities를 선언하고, 우선 시도할 조합 목록을 정해 실패 시 다음 조합으로 자동 폴백합니다.</p>
  </li>
  <li>
    <p>계약 테스트(작은 매트릭스 러너)<br />
대표 프롬프트 하나로 “모델×프로토콜×툴스키마×파라미터세트”를 돌려 빨갛게 실패하는 조합을 미리 파악해둡니다.</p>
  </li>
</ol>

<p>아래는 “딱 이것만” 넣으면 스트레스가 급감하는 최소 어댑터 예시야. 비동기 기준, 호출부는 공통 파라미터만 건네고 내부에서 알아서 매핑합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># adapters.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>

<span class="k">def</span> <span class="nf">build_tools_flat</span><span class="p">(</span><span class="n">tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="c1"># input tools: [{"name", "description", "parameters"}]
</span>    <span class="k">return</span> <span class="p">[{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="o">**</span><span class="n">t</span><span class="p">}</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">build_tools_nested</span><span class="p">(</span><span class="n">tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="k">return</span> <span class="p">[{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="n">t</span><span class="p">}</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">ParamNormalizer</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Normalize neutral params -&gt; endpoint-specific params.
    neutral:
      - length (int): desired max tokens
      - temperature (float), top_p (float), stop (list[str])
      - reasoning_effort (None|</span><span class="sh">"</span><span class="s">low</span><span class="sh">"</span><span class="s">|</span><span class="sh">"</span><span class="s">medium</span><span class="sh">"</span><span class="s">|</span><span class="sh">"</span><span class="s">high</span><span class="sh">"</span><span class="s">)
      - tool_json_style (</span><span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="s">|</span><span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="s">)
    endpoint:
      - responses: max_output_tokens, input, tools(flat)
      - completions: max_completion_tokens or max_tokens, messages, tools(nested)
    </span><span class="sh">"""</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">for_responses</span><span class="p">(</span>
        <span class="n">neutral</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span>
        <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>  <span class="c1"># [{role, content}]
</span>        <span class="n">tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>     <span class="c1"># normalized {"name", "description", "parameters"}
</span>    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="nf">build_tools_flat</span><span class="p">(</span><span class="n">tools</span><span class="p">),</span>
        <span class="p">}</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">L</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">length</span><span class="sh">"</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">max_output_tokens</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">t</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">p</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">st</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">eff</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">reasoning_effort</span><span class="sh">"</span><span class="p">)):</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">eff</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">for_completions</span><span class="p">(</span>
        <span class="n">neutral</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span>
        <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
        <span class="n">tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_reasoning_model</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="nf">build_tools_nested</span><span class="p">(</span><span class="n">tools</span><span class="p">),</span>
        <span class="p">}</span>
        <span class="c1"># token cap
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">L</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">length</span><span class="sh">"</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">max_completion_tokens</span><span class="sh">"</span> <span class="k">if</span> <span class="n">is_reasoning_model</span> <span class="k">else</span> <span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
        <span class="c1"># common
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">t</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">p</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">st</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">))</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span>
        <span class="c1"># reasoning
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">eff</span> <span class="p">:</span><span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">reasoning_effort</span><span class="sh">"</span><span class="p">))</span> <span class="ow">and</span> <span class="n">is_reasoning_model</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">eff</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<p>간단 사용 예시(비동기):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># use_case.py
</span><span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">from</span> <span class="n">adapters</span> <span class="kn">import</span> <span class="n">ParamNormalizer</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Be helpful.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List ./samples and summarize one file.</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{...}},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{...}},</span>
    <span class="p">]</span>
    <span class="n">neutral</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">reasoning_effort</span><span class="o">=</span><span class="sh">"</span><span class="s">medium</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">params</span> <span class="o">=</span> <span class="n">ParamNormalizer</span><span class="p">.</span><span class="nf">for_responses</span><span class="p">(</span><span class="n">neutral</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">http_client</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">,</span> <span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span> <span class="o">**</span><span class="n">params</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">r</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_completions</span><span class="p">(</span><span class="n">model</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">is_reasoning_model</span><span class="p">:</span> <span class="nb">bool</span><span class="p">):</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Be helpful.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List ./samples and summarize one file.</span><span class="sh">"</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{...}},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{...}},</span>
    <span class="p">]</span>
    <span class="n">neutral</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">length</span><span class="o">=</span><span class="mi">400</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">reasoning_effort</span><span class="o">=</span><span class="sh">"</span><span class="s">medium</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">params</span> <span class="o">=</span> <span class="n">ParamNormalizer</span><span class="p">.</span><span class="nf">for_completions</span><span class="p">(</span><span class="n">neutral</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="p">,</span> <span class="n">is_reasoning_model</span><span class="o">=</span><span class="n">is_reasoning_model</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">()</span> <span class="k">as</span> <span class="n">http_client</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">,</span> <span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span> <span class="o">**</span><span class="n">params</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">r</span>
</code></pre></div></div>

<p>마이그레이션 체크리스트</p>

<ol>
  <li>
    <p>호출부엔 neutral 파라미터만 노출한다(length, temperature, reasoning_effort 등).</p>
  </li>
  <li>
    <p>엔진/모델 선택에 따라 ParamNormalizer가 실제 필드로 변환한다.</p>
  </li>
  <li>
    <p>모델 능력 플래그(예: is_reasoning_model)는 ModelProfile에 넣고 Orchestrator가 주입한다.</p>
  </li>
  <li>
    <p>실패 시 다른 Plan으로 폴백한다(Responses+flat → Completions+nested 같은 순서).</p>
  </li>
  <li>
    <p>계약 테스트를 CI에 넣어 눈으로 확인하기 전에 “어느 조합이 깨졌는지” 자동으로 경고받는다.</p>
  </li>
</ol>

<p>API의 불일치는 우리 잘못이 아니니, 작은 어댑터/전략 레이어로 “짜증”을 코드 경계 밖에 가둬두는 게 정답이에요. 이 레이어 한 번 만들어두면 새 모델 10개가 들어와도 호출부는 거의 손댈 일이 없어집니다.</p>

<p class="chat--user">

근데 너가 말한것도 못 믿겠어. 실제 내 서빙 환경과 api 패키지 설치 환경에서 테스트해봐야할 것 같아. 그런데 top_p 같은 것은 테스트해봐도 이게 반영이 된 건지 안 된 건지 내가 알 수가 있나?

</p>

<p>완전 공감. 파라미터가 “들어가긴 했는지, 모델이 실제로 반영했는지”는 말만으론 못 믿죠. 그래서 실제 서빙 환경에서 직접 검증하는 비동기 테스트 하네스를 줘요. 핵심은 두 축입니다.</p>

<ol>
  <li>
    <p>전송 검증: HTTP 요청 바디에 top_p, temperature 등이 실제로 포함되는지 로깅</p>
  </li>
  <li>
    <p>효과 검증: 동일 프롬프트로 여러 번 샘플링하여 top_p 스윕에 따라 출력 다양성이 통계적으로 달라지는지 확인</p>
  </li>
</ol>

<p>아래 코드는 둘 다 합니다. Responses와 Completions를 선택해 같은 방식으로 돌릴 수 있고, 각 top_p 구간에서 N회 샘플링하여 텍스트 다양성 지표를 계산합니다. logprobs 지원 모델이면 상위 토큰 분포도 같이 덤프해 “누클리어스 컷(top_p 이하 누적확률)” 영향도 간접 확인합니다. 모두 비동기 AsyncOpenAI + httpx.AsyncClient 사용, 이벤트 훅으로 실제 전송 JSON을 캡처합니다.</p>

<p>설명 요약</p>

<ul>
  <li>
    <p>전송 로깅: httpx 이벤트 훅에서 요청 JSON을 파싱해 주요 필드만 출력 및 파일 저장</p>
  </li>
  <li>
    <p>다양성 지표: 타입-토큰 비율(TTR), 평균 길이, 응답 쌍 간 3-그램 자카드 거리 평균</p>
  </li>
  <li>
    <p>스윕: 예) top_p ∈ {0.1, 0.3, 0.7, 0.95}, temperature 고정(예: 0.8), 각 구간 N회 샘플</p>
  </li>
  <li>
    <p>기대 패턴: top_p가 커질수록 평균 자카드 거리, TTR이 증가하는 경향. 전혀 변화가 없다면 모델/엔드포인트에서 파라미터가 무시되었을 가능성</p>
  </li>
  <li>
    <p>안전장치: Ctrl+C 등 인터럽트 시 즉시 중지</p>
  </li>
</ul>

<p>코드 전체</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># async_param_probe.py
# Python 3.10+
# pip install --upgrade openai httpx
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">math</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="c1"># =========================
# Interrupt support
# =========================
</span>
<span class="k">class</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Raised when the user has interrupted the processing.</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">Interruptor</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Simple async interrupt flag that can be triggered by signals or UI.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">trigger</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_event</span><span class="p">.</span><span class="nf">set</span><span class="p">()</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">processing_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_event</span><span class="p">.</span><span class="nf">is_set</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">call_with_interrupt</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">interrupt_cb</span><span class="p">,</span> <span class="n">poll</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.25</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Await a coroutine while polling interruption.</span><span class="sh">"""</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">task</span><span class="p">},</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">task</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>
            <span class="k">if</span> <span class="k">await</span> <span class="nf">interrupt_cb</span><span class="p">():</span>
                <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">task</span>
                <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
                    <span class="k">pass</span>
                <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Interrupted by user</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">raise</span>

<span class="c1"># =========================
# Request capture via httpx hooks
# =========================
</span>
<span class="k">class</span> <span class="nc">RequestCapture</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Capture outgoing JSON payloads for inspection.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">last_payload</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="n">self</span><span class="p">.</span><span class="n">all_payloads</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">def</span> <span class="nf">get_hooks</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">def</span> <span class="nf">on_request</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content-type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">).</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">application/json</span><span class="sh">"</span><span class="p">):</span>
                    <span class="n">body</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">request</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">)</span> <span class="k">else</span> <span class="n">request</span><span class="p">.</span><span class="n">content</span>
                    <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">body</span><span class="p">)</span> <span class="k">if</span> <span class="n">body</span> <span class="k">else</span> <span class="p">{}</span>
                    <span class="c1"># Keep only notable fields to keep logs readable
</span>                    <span class="n">filtered</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="n">request</span><span class="p">.</span><span class="n">url</span><span class="p">.</span><span class="n">path</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">max_completion_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_completion_tokens</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">max_output_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_output_tokens</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">logprobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">logprobs</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">top_logprobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">top_logprobs</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">tool_choice</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">tool_choice</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">response_format</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">response_format</span><span class="sh">"</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">),</span>
                    <span class="p">}</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">last_payload</span> <span class="o">=</span> <span class="n">filtered</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">all_payloads</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">filtered</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="c1"># Best effort; never block the request
</span>                <span class="k">pass</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">on_response</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
            <span class="k">return</span>

        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">on_request</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">on_response</span><span class="p">]}</span>

<span class="c1"># =========================
# Diversity metrics
# =========================
</span>
<span class="k">def</span> <span class="nf">tokenize_words</span><span class="p">(</span><span class="n">text</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">c</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="k">if</span> <span class="n">c</span><span class="p">.</span><span class="nf">isalnum</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">text</span><span class="p">]).</span><span class="nf">split</span><span class="p">()</span> <span class="k">if</span> <span class="n">w</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">ngrams</span><span class="p">(</span><span class="n">tokens</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]]:</span>
    <span class="k">if</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="nf">len</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="p">[</span><span class="nf">tuple</span><span class="p">(</span><span class="n">tokens</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="n">n</span><span class="p">])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span><span class="o">-</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">jaccard</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]],</span> <span class="n">b</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="p">...]])</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">a</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">b</span><span class="p">:</span>
        <span class="k">return</span> <span class="mf">0.0</span>
    <span class="n">sa</span><span class="p">,</span> <span class="n">sb</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nf">set</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="n">inter</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">sa</span> <span class="o">&amp;</span> <span class="n">sb</span><span class="p">)</span>
    <span class="n">union</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">sa</span> <span class="o">|</span> <span class="n">sb</span><span class="p">)</span> <span class="ow">or</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="p">(</span><span class="n">inter</span> <span class="o">/</span> <span class="n">union</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">ttr</span><span class="p">(</span><span class="n">tokens</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">tokens</span><span class="p">:</span>
        <span class="k">return</span> <span class="mf">0.0</span>
    <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">tokens</span><span class="p">))</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">tokens</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">pairwise_avg_jaccard</span><span class="p">(</span><span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">n</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">3</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">texts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
        <span class="k">return</span> <span class="mf">0.0</span>
    <span class="n">total</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">grams</span> <span class="o">=</span> <span class="p">[</span><span class="nf">ngrams</span><span class="p">(</span><span class="nf">tokenize_words</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">texts</span><span class="p">)):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">texts</span><span class="p">)):</span>
            <span class="n">total</span> <span class="o">+=</span> <span class="nf">jaccard</span><span class="p">(</span><span class="n">grams</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">grams</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">total</span> <span class="o">/</span> <span class="nf">max</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">summarize_diversity</span><span class="p">(</span><span class="n">samples</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">toks</span> <span class="o">=</span> <span class="p">[</span><span class="nf">tokenize_words</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">samples</span><span class="p">]</span>
    <span class="n">lengths</span> <span class="o">=</span> <span class="p">[</span><span class="nf">len</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">toks</span><span class="p">]</span>
    <span class="n">ttrs</span> <span class="o">=</span> <span class="p">[</span><span class="nf">ttr</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">toks</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">num_samples</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">samples</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">avg_len_tokens</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="n">lengths</span><span class="p">)</span> <span class="o">/</span> <span class="nf">max</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">lengths</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">2</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">avg_ttr</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="n">ttrs</span><span class="p">)</span> <span class="o">/</span> <span class="nf">max</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ttrs</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">4</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">pairwise_jaccard_3gram</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="nf">pairwise_avg_jaccard</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="mi">4</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">pairwise_jaccard_2gram</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="nf">pairwise_avg_jaccard</span><span class="p">(</span><span class="n">samples</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="mi">4</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">unique_ratio</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">samples</span><span class="p">))</span> <span class="o">/</span> <span class="nf">max</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">samples</span><span class="p">),</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">4</span><span class="p">),</span>
    <span class="p">}</span>

<span class="c1"># =========================
# Probers
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ProbeConfig</span><span class="p">:</span>
    <span class="n">model</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">protocol</span><span class="p">:</span> <span class="nb">str</span>                  <span class="c1"># "responses" | "completions"
</span>    <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">temperature</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.8</span>
    <span class="n">top_p_grid</span><span class="p">:</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="p">...]</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.3</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">)</span>
    <span class="n">samples_per_setting</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span>
    <span class="n">request_log_dir</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./probe_logs</span><span class="sh">"</span>
    <span class="n">use_logprobs</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>      <span class="c1"># Only for completions if model supports it
</span>
<span class="k">def</span> <span class="nf">sanitize_filename</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">c</span> <span class="k">if</span> <span class="n">c</span><span class="p">.</span><span class="nf">isalnum</span><span class="p">()</span> <span class="ow">or</span> <span class="n">c</span> <span class="ow">in</span> <span class="sh">"</span><span class="s">-_.</span><span class="sh">"</span> <span class="k">else</span> <span class="sh">"</span><span class="s">_</span><span class="sh">"</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">s</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">sample_once_responses</span><span class="p">(</span><span class="n">client</span><span class="p">:</span> <span class="n">AsyncOpenAI</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">temperature</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">top_p</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">client</span><span class="p">.</span><span class="n">_client</span><span class="p">.</span><span class="n">_base_url</span><span class="p">,</span>  <span class="c1"># wrong; fix below
</span>    <span class="p">)</span>
    <span class="c1"># We will implement properly in the caller using **params normalization; keep explicit here.
</span>    <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Use run_responses_batch; do not call directly.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_responses_batch</span><span class="p">(</span><span class="n">client</span><span class="p">:</span> <span class="n">AsyncOpenAI</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">temperature</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">top_p</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">:</span> <span class="n">Interruptor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">input_list</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Be helpful and concise.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
        <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">client</span><span class="p">.</span><span class="n">_client</span><span class="p">.</span><span class="n">_headers</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">x-stainless-model</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">unknown-model</span><span class="sh">"</span><span class="p">,</span>
            <span class="c1"># The AsyncOpenAI SDK requires model at call-site; we provide it via partial elsewhere.
</span>        <span class="p">),</span>
        <span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">resp</span><span class="p">.</span><span class="n">output_text</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_completions_batch</span><span class="p">(</span><span class="n">client</span><span class="p">:</span> <span class="n">AsyncOpenAI</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">temperature</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">top_p</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">use_logprobs</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">:</span> <span class="n">Interruptor</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
        <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[</span>
                <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Be helpful and concise.</span><span class="sh">"</span><span class="p">},</span>
                <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">},</span>
            <span class="p">],</span>
            <span class="n">temperature</span><span class="o">=</span><span class="n">temperature</span><span class="p">,</span>
            <span class="n">top_p</span><span class="o">=</span><span class="n">top_p</span><span class="p">,</span>
            <span class="c1"># Logprobs is model-dependent; if unsupported it will raise. Handle at caller.
</span>            <span class="o">**</span><span class="p">({</span><span class="sh">"</span><span class="s">logprobs</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">top_logprobs</span><span class="sh">"</span><span class="p">:</span> <span class="mi">5</span><span class="p">}</span> <span class="k">if</span> <span class="n">use_logprobs</span> <span class="k">else</span> <span class="p">{}),</span>
        <span class="p">),</span>
        <span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
    <span class="p">)</span>
    <span class="n">out_text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>
    <span class="n">out_logprobs</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="sh">"</span><span class="s">logprobs</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">out_text</span><span class="p">,</span> <span class="sh">"</span><span class="s">logprobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">out_logprobs</span><span class="p">}</span>

<span class="c1"># =========================
# Runner
# =========================
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">run_probe</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ProbeConfig</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">:</span> <span class="n">Interruptor</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">request_log_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="n">capture</span> <span class="o">=</span> <span class="nc">RequestCapture</span><span class="p">()</span>
    <span class="n">hooks</span> <span class="o">=</span> <span class="n">capture</span><span class="p">.</span><span class="nf">get_hooks</span><span class="p">()</span>

    <span class="c1"># Build AsyncOpenAI client with httpx hooks
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="n">httpx</span><span class="p">.</span><span class="nc">Timeout</span><span class="p">(</span><span class="mf">60.0</span><span class="p">),</span> <span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">)</span> <span class="k">as</span> <span class="n">http_client</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">,</span> <span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
            <span class="n">results</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

            <span class="k">if</span> <span class="n">cfg</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
                <span class="c1"># For Responses we construct the call per-sample to vary top_p.
</span>                <span class="k">for</span> <span class="n">tp</span> <span class="ow">in</span> <span class="n">cfg</span><span class="p">.</span><span class="n">top_p_grid</span><span class="p">:</span>
                    <span class="k">await</span> <span class="nf">_guard</span><span class="p">(</span><span class="n">interrupt</span><span class="p">)</span>
                    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
                    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">samples_per_setting</span><span class="p">):</span>
                        <span class="k">await</span> <span class="nf">_guard</span><span class="p">(</span><span class="n">interrupt</span><span class="p">)</span>
                        <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                            <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
                                <span class="nb">input</span><span class="o">=</span><span class="p">[</span>
                                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Be helpful and concise.</span><span class="sh">"</span><span class="p">},</span>
                                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">cfg</span><span class="p">.</span><span class="n">prompt</span><span class="p">},</span>
                                <span class="p">],</span>
                                <span class="n">temperature</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">temperature</span><span class="p">,</span>
                                <span class="n">top_p</span><span class="o">=</span><span class="n">tp</span><span class="p">,</span>
                            <span class="p">),</span>
                            <span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                        <span class="p">)</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">output_text</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">)</span>
                    <span class="n">stats</span> <span class="o">=</span> <span class="nf">summarize_diversity</span><span class="p">(</span><span class="n">texts</span><span class="p">)</span>
                    <span class="n">results</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="s">top_p=</span><span class="si">{</span><span class="n">tp</span><span class="si">}</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">samples</span><span class="sh">"</span><span class="p">:</span> <span class="n">texts</span><span class="p">,</span> <span class="sh">"</span><span class="s">stats</span><span class="sh">"</span><span class="p">:</span> <span class="n">stats</span><span class="p">}</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[responses] top_p=</span><span class="si">{</span><span class="n">tp</span><span class="si">}</span><span class="s"> =&gt; </span><span class="si">{</span><span class="n">stats</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

            <span class="k">elif</span> <span class="n">cfg</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">tp</span> <span class="ow">in</span> <span class="n">cfg</span><span class="p">.</span><span class="n">top_p_grid</span><span class="p">:</span>
                    <span class="k">await</span> <span class="nf">_guard</span><span class="p">(</span><span class="n">interrupt</span><span class="p">)</span>
                    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
                    <span class="n">first_logprobs</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
                    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">samples_per_setting</span><span class="p">):</span>
                        <span class="k">await</span> <span class="nf">_guard</span><span class="p">(</span><span class="n">interrupt</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_completions_batch</span><span class="p">(</span>
                                <span class="n">client</span><span class="p">,</span> <span class="n">cfg</span><span class="p">.</span><span class="n">model</span><span class="p">,</span> <span class="n">cfg</span><span class="p">.</span><span class="n">prompt</span><span class="p">,</span> <span class="n">cfg</span><span class="p">.</span><span class="n">temperature</span><span class="p">,</span> <span class="n">tp</span><span class="p">,</span> <span class="n">use_logprobs</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">use_logprobs</span> <span class="ow">and</span> <span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="n">interrupt</span><span class="o">=</span><span class="n">interrupt</span>
                            <span class="p">)</span>
                            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">])</span>
                            <span class="k">if</span> <span class="n">first_logprobs</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                                <span class="n">first_logprobs</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">logprobs</span><span class="sh">"</span><span class="p">]</span>
                        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                            <span class="c1"># Fallback if logprobs not supported or param rejected
</span>                            <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_completions_batch</span><span class="p">(</span>
                                <span class="n">client</span><span class="p">,</span> <span class="n">cfg</span><span class="p">.</span><span class="n">model</span><span class="p">,</span> <span class="n">cfg</span><span class="p">.</span><span class="n">prompt</span><span class="p">,</span> <span class="n">cfg</span><span class="p">.</span><span class="n">temperature</span><span class="p">,</span> <span class="n">tp</span><span class="p">,</span> <span class="n">use_logprobs</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">interrupt</span><span class="o">=</span><span class="n">interrupt</span>
                            <span class="p">)</span>
                            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">])</span>
                            <span class="n">first_logprobs</span> <span class="o">=</span> <span class="bp">None</span>
                    <span class="n">stats</span> <span class="o">=</span> <span class="nf">summarize_diversity</span><span class="p">(</span><span class="n">texts</span><span class="p">)</span>
                    <span class="n">results</span><span class="p">[</span><span class="sa">f</span><span class="sh">"</span><span class="s">top_p=</span><span class="si">{</span><span class="n">tp</span><span class="si">}</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">samples</span><span class="sh">"</span><span class="p">:</span> <span class="n">texts</span><span class="p">,</span> <span class="sh">"</span><span class="s">stats</span><span class="sh">"</span><span class="p">:</span> <span class="n">stats</span><span class="p">,</span> <span class="sh">"</span><span class="s">first_logprobs</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_maybe_slim_logprobs</span><span class="p">(</span><span class="n">first_logprobs</span><span class="p">)}</span>
                    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[completions] top_p=</span><span class="si">{</span><span class="n">tp</span><span class="si">}</span><span class="s"> =&gt; </span><span class="si">{</span><span class="n">stats</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

            <span class="c1"># Persist request payloads and results
</span>            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">request_log_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">requests_</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">protocol</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="nf">sanitize_filename</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">model</span><span class="p">)</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">capture</span><span class="p">.</span><span class="n">all_payloads</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">request_log_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">results_</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">protocol</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="nf">sanitize_filename</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">model</span><span class="p">)</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">results</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">Saved logs under: </span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">request_log_dir</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Key check 1: Open requests_*.json to confirm top_p/temperature got sent.</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Key check 2: Inspect stats monotonicity across top_p grid. If flat, top_p may be ignored.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_maybe_slim_logprobs</span><span class="p">(</span><span class="n">lp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Reduce logprobs payload size for storage, keeping only first 10 tokens.</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">lp</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">lp</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="n">lp</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
            <span class="c1"># OpenAI SDK returns a structured object; convert to dict and trim
</span>            <span class="n">d</span> <span class="o">=</span> <span class="n">lp</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span>
            <span class="k">if</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">d</span> <span class="ow">and</span> <span class="n">d</span><span class="p">[</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">]:</span>
                <span class="n">d</span><span class="p">[</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">d</span><span class="p">[</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">][:</span><span class="mi">10</span><span class="p">]</span>
            <span class="k">return</span> <span class="n">d</span>
        <span class="c1"># If already dict-like
</span>        <span class="k">return</span> <span class="n">lp</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_guard</span><span class="p">(</span><span class="n">interrupt</span><span class="p">:</span> <span class="n">Interruptor</span><span class="p">):</span>
    <span class="k">if</span> <span class="k">await</span> <span class="n">interrupt</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>
        <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Interrupted by user</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># =========================
# CLI
# =========================
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">amain</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">argparse</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Async parameter probe for top_p/temperature (Responses or Completions).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--protocol</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">))</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--base-url</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">))</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api-key</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">))</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--prompt</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">Write a two-sentence review of a fictional cafe. Be creative.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--temperature</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mf">0.8</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--top-p</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">0.1,0.3,0.7,0.95</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Comma-separated values to sweep.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--n</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Samples per setting.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--logdir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">./probe_logs</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--no-logprobs</span><span class="sh">"</span><span class="p">,</span> <span class="n">action</span><span class="o">=</span><span class="sh">"</span><span class="s">store_true</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Disable logprobs even if supported (completions only).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">interrupt</span> <span class="o">=</span> <span class="nc">Interruptor</span><span class="p">()</span>
    <span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">loop</span><span class="p">.</span><span class="nf">add_signal_handler</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">.</span><span class="n">trigger</span><span class="p">)</span>
        <span class="n">loop</span><span class="p">.</span><span class="nf">add_signal_handler</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">.</span><span class="n">trigger</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">NotImplementedError</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="n">cfg</span> <span class="o">=</span> <span class="nc">ProbeConfig</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">api_key</span><span class="p">,</span>
        <span class="n">protocol</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">protocol</span><span class="p">,</span>
        <span class="n">prompt</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">prompt</span><span class="p">,</span>
        <span class="n">temperature</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">temperature</span><span class="p">,</span>
        <span class="n">top_p_grid</span><span class="o">=</span><span class="nf">tuple</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">args</span><span class="p">.</span><span class="n">top_p</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)),</span>
        <span class="n">samples_per_setting</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">n</span><span class="p">,</span>
        <span class="n">request_log_dir</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">logdir</span><span class="p">,</span>
        <span class="n">use_logprobs</span><span class="o">=</span><span class="ow">not</span> <span class="n">args</span><span class="p">.</span><span class="n">no_logprobs</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># Build client and run
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="k">await</span> <span class="nf">run_probe</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">UserCancelledError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Interrupted by user.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">ERROR:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">amain</span><span class="p">())</span>
</code></pre></div></div>

<p>어떻게 해석하면 되나</p>

<ol>
  <li>
    <p>requests__.json을 열어 실제 요청 바디에 top_p, temperature, max__ 가 들어갔는지 먼저 확인합니다. 이건 “전송은 됐다”를 보장합니다.</p>
  </li>
  <li>
    <p>results_*.json의 stats를 봅니다. top_p가 커질수록 pairwise_jaccard_3gram, avg_ttr, unique_ratio가 보통 증가합니다. 변동이 거의 없다면 모델이 top_p를 무시하는지, temperature가 너무 낮은지, 프롬프트가 지나치게 결정적인지(사실상 한 가지 답) 점검하세요.</p>
  </li>
  <li>
    <p>Completions에서 logprobs가 지원되면 first_logprobs로 토큰 후보와 확률이 들어옵니다. top_p가 낮을 때는 상위 토큰에 확률 질량이 더 집중되는 경향을 간접적으로 볼 수 있습니다. 지원 안 되면 코드가 자동으로 끄고 진행합니다.</p>
  </li>
</ol>

<p>실험 팁</p>

<ul>
  <li>
    <p>temperature를 0.7~0.9 정도로 두고 top_p를 스윕하면 차이가 가장 잘 드러납니다. temperature가 0이면 샘플링 자체가 거의 결정적이라 차이가 안 보입니다.</p>
  </li>
  <li>
    <p>프롬프트는 “사실상 정답 한 개”인 지식질문보다, 창의적 생성이나 요약-재서술이 다양성 측정에 유리합니다.</p>
  </li>
  <li>
    <p>max_* 제한을 너무 빡빡하게 주면 모든 샘플이 짧아져 차이가 줄어듭니다.</p>
  </li>
  <li>
    <p>파라미터 오류를 의도적으로 보내 검증해도 좋습니다. 예를 들어 top_p=-1 같은 값은 서버에서 거절돼야 합니다. 거절되지 않으면 해당 엔드포인트가 파라미터를 무시하거나 자체 정규화할 가능성이 있습니다.</p>
  </li>
</ul>

<p>이 하네스로 실제 서빙 환경과 설치된 SDK에서 “전송 여부”와 “효과 존재 여부”를 모두 계량적으로 확인할 수 있어요.</p>

<p class="chat--user">

종합해서, 내가 말한 모든 것들을 만족하는 파이썬 코드 설계하고 만들어줘. 1. Response/Chat Completions API 선택 + tool JSON format 선택 + LLM Parameter로부터 argument 변환 법 선택 2. Config 파일에 여러 모델 설정에 대해 각각의 모델 + API + JSON 포맷을 미리 정의해둘 거야 (config.toml 파일로 생각 중 - 이 조합 1개를 api_provider라고 부를거고 name(유저가 보는 이름), 모델(호출 시 쓰이는 모델명), base_url, api_key, api 형식, 툴 형식, argument 어댑터 형식을 기입할거야) 그걸 읽어와서 유저가 api_provider name만 보고 고르고 user prompt(+system prompt)와 툴 선택만 하고 실행하면 잘 동작하도록 구성해줘. 

</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># orchestrator_async_configurable.py
# Python 3.10+
# Dependencies: pip install --upgrade openai httpx
#
# -------------------------------------------------------------
# What this file provides
# -------------------------------------------------------------
# 1) A clean, extensible design to run tool-calling LLMs with:
#    - API choice: Responses vs Chat Completions
#    - Tool JSON shape choice: "flat" (new) vs "nested" (legacy)
#    - Argument mapping (neutral → endpoint-specific) strategy choice
# 2) Async-only I/O (AsyncOpenAI + httpx.AsyncClient with hooks)
# 3) User interrupt support via user.processing_interrupted()
# 4) Providers are defined in a config.toml, each called an "api_provider".
#    Users pick a provider by name; system/user prompts and tool selection
#    are provided at runtime.
#
# -------------------------------------------------------------
# Example config.toml (put this next to the script)
# -------------------------------------------------------------
# [[api_provider]]
# name = "OSS GPT (Responses + Flat + RespAdapter)"
# model = "gpt-4.1-mini"
# base_url = "https://api.openai.com/v1"
# api_key_env = "OPENAI_API_KEY"   # or use: api_key = "sk-..."
# api = "responses"                # "responses" | "completions"
# tool_json = "flat"               # "flat" | "nested"
# arg_adapter = "responses"        # "responses" | "completions" | "completions_reasoning"
#
# [[api_provider]]
# name = "Qwen-like (Completions + Nested + CompAdapter)"
# model = "qwen2.5"
# base_url = "https://api.openai.com/v1"
# api_key_env = "QWEN_API_KEY"
# api = "completions"
# tool_json = "nested"
# arg_adapter = "completions"
#
# -------------------------------------------------------------
# CLI usage examples
# -------------------------------------------------------------
# python orchestrator_async_configurable.py \
#   --config ./config.toml \
#   --provider "OSS GPT (Responses + Flat + RespAdapter)" \
#   --system "You are a helpful assistant that uses tools when needed." \
#   --user "List files under ./samples, pick a text file, read it, and summarize in 2-3 sentences." \
#   --enable-tools list_files_in_folder,read_text_file \
#   --length 400 --temperature 0.7 --top-p 0.9
#
# -------------------------------------------------------------
# Notes
# -------------------------------------------------------------
# - This script outputs plain text only (no JSON-mode / structured parsing).
# - Tools are executed locally and results are passed back to the model.
# - Interrupts: SIGINT/SIGTERM will stop ongoing requests cleanly.
# - If tomllib is not available (Python &lt;3.11), you can `pip install tomli`.
#
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="c1"># TOML loader with fallback
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomllib</span>  <span class="c1"># Python 3.11+
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">tomllib</span> <span class="o">=</span> <span class="bp">None</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">tomli</span>  <span class="c1"># fallback
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">tomli</span> <span class="o">=</span> <span class="bp">None</span>

<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="c1"># ============================================================
# Interrupt support
# ============================================================
</span>
<span class="k">class</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Raised when the user has interrupted the processing.</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">UserInterface</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Minimal user interface object that exposes `processing_interrupted()`.
    Replace/extend this for GUI/Server integration if needed.
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">trigger_interrupt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_event</span><span class="p">.</span><span class="nf">set</span><span class="p">()</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">processing_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_event</span><span class="p">.</span><span class="nf">is_set</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">call_with_interrupt</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">user</span><span class="p">:</span> <span class="n">UserInterface</span><span class="p">,</span> <span class="n">poll_interval</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Await a coroutine while periodically checking user.processing_interrupted().
    If interrupted, cancel the task and raise UserCancelledError.
    </span><span class="sh">"""</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">task</span><span class="p">},</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">task</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>
            <span class="k">if</span> <span class="k">await</span> <span class="n">user</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>
                <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">task</span>
                <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
                    <span class="k">pass</span>
                <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">raise</span>

<span class="c1"># ============================================================
# Model &amp; Provider profiles from config
# ============================================================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ProviderProfile</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Single provider (api_provider) loaded from config.toml.</span><span class="sh">"""</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">model</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api</span><span class="p">:</span> <span class="nb">str</span>         <span class="c1"># "responses" | "completions"
</span>    <span class="n">tool_json</span><span class="p">:</span> <span class="nb">str</span>   <span class="c1"># "flat" | "nested"
</span>    <span class="n">arg_adapter</span><span class="p">:</span> <span class="nb">str</span> <span class="c1"># "responses" | "completions" | "completions_reasoning"
</span>
<span class="k">def</span> <span class="nf">load_providers</span><span class="p">(</span><span class="n">config_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ProviderProfile</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    Load providers from config.toml (or .json if needed).
    Returns a dict mapping provider name -&gt; profile.
    </span><span class="sh">"""</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">config_path</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">FileNotFoundError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Config not found: </span><span class="si">{</span><span class="n">config_path</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Read bytes
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">config_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">raw</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>

    <span class="c1"># Parse TOML (preferred)
</span>    <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">config_path</span><span class="p">.</span><span class="nf">lower</span><span class="p">().</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">.toml</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">tomllib</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">tomllib</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">elif</span> <span class="n">tomli</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">tomli</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sh">"</span><span class="s">TOML parser not available. Install Python 3.11+ or `pip install tomli`.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Fallback: JSON
</span>        <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">))</span>

    <span class="n">providers_data</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_provider</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_providers</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">providers_data</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">Invalid config: expected [[api_provider]] entries.</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ProviderProfile</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">providers_data</span><span class="p">:</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_url</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">base_url</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">api_key</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_key</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">api_key_env</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api_key_env</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">api</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">api</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">tool_json</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">tool_json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">arg_adapter</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">arg_adapter</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">name</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">model</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">base_url</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">api</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">tool_json</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">arg_adapter</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Invalid provider entry: </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># Resolve API key: direct string takes precedence; else from env var.
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">api_key</span> <span class="ow">and</span> <span class="n">api_key_env</span><span class="p">:</span>
            <span class="n">api_key</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="n">api_key_env</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">api_key</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">API key missing for provider </span><span class="sh">'</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s">. Use api_key or api_key_env.</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">profile</span> <span class="o">=</span> <span class="nc">ProviderProfile</span><span class="p">(</span>
            <span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span>
            <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
            <span class="n">base_url</span><span class="o">=</span><span class="n">base_url</span><span class="p">,</span>
            <span class="n">api_key</span><span class="o">=</span><span class="n">api_key</span><span class="p">,</span>
            <span class="n">api</span><span class="o">=</span><span class="n">api</span><span class="p">,</span>
            <span class="n">tool_json</span><span class="o">=</span><span class="n">tool_json</span><span class="p">,</span>
            <span class="n">arg_adapter</span><span class="o">=</span><span class="n">arg_adapter</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">out</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">profile</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="c1"># ============================================================
# Tool layer
# ============================================================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ToolSpec</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Single tool spec + local implementation.</span><span class="sh">"""</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>
    <span class="n">func</span><span class="p">:</span> <span class="n">Any</span>  <span class="c1"># Callable[[Dict[str, Any]], Any]
</span>
<span class="k">class</span> <span class="nc">ToolRegistry</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Holds tools and executes them by name.</span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ToolSpec</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">spec</span><span class="p">:</span> <span class="n">ToolSpec</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">spec</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Tool already registered: </span><span class="si">{</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">spec</span>

    <span class="k">def</span> <span class="nf">select</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">names</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">names</span><span class="p">:</span>
            <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>
        <span class="n">selected</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">names</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
                <span class="n">selected</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">n</span><span class="p">])</span>
        <span class="k">return</span> <span class="n">selected</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">func</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="c1"># Concrete tools (fast local I/O)
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder_impl</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_text_file_impl</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">build_default_tools</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ToolRegistry</span><span class="p">:</span>
    <span class="n">reg</span> <span class="o">=</span> <span class="nc">ToolRegistry</span><span class="p">()</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">list_files_in_folder_impl</span>
    <span class="p">))</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to a text file.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">read_text_file_impl</span>
    <span class="p">))</span>
    <span class="k">return</span> <span class="n">reg</span>

<span class="c1"># ============================================================
# Tool JSON builders (Factory)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">ToolJSONBuilder</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">FlatToolJSONBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Flat tool JSON: { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} }</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">NestedToolJSONBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Nested tool JSON: { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">:{...} }</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">get_tool_builder</span><span class="p">(</span><span class="n">kind</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ToolJSONBuilder</span><span class="p">:</span>
    <span class="n">kind</span> <span class="o">=</span> <span class="p">(</span><span class="n">kind</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">FlatToolJSONBuilder</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">NestedToolJSONBuilder</span><span class="p">()</span>
    <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool_json type: </span><span class="si">{</span><span class="n">kind</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ============================================================
# Neutral → Endpoint-specific parameter mapping (Adapters)
# ============================================================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">NeutralParams</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Neutral params that callers can pass without worrying about endpoint differences.</span><span class="sh">"""</span>
    <span class="n">length</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">temperature</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">top_p</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">stop</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">reasoning_effort</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># "low"|"medium"|"high" (if supported)
</span>
<span class="k">class</span> <span class="nc">ArgAdapter</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build_for_responses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neutral</span><span class="p">:</span> <span class="n">NeutralParams</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="bp">...</span>
    <span class="k">def</span> <span class="nf">build_for_completions</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neutral</span><span class="p">:</span> <span class="n">NeutralParams</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">ResponsesArgAdapter</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Use max_output_tokens + reasoning in Responses; reasonable defaults elsewhere.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build_for_responses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neutral</span><span class="p">:</span> <span class="n">NeutralParams</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">}</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">length</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">max_output_tokens</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">build_for_completions</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neutral</span><span class="p">:</span> <span class="n">NeutralParams</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">}</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">length</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span>
        <span class="c1"># reasoning may be ignored by non-reasoning chat models
</span>        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">CompletionsArgAdapter</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Use max_tokens for completions; map others as common fields.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build_for_responses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neutral</span><span class="p">:</span> <span class="n">NeutralParams</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="c1"># If someone forces this adapter onto Responses: do a best-effort mapping
</span>        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">}</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">length</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">max_output_tokens</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">build_for_completions</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neutral</span><span class="p">:</span> <span class="n">NeutralParams</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">}</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">length</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">max_tokens</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">CompletionsReasoningArgAdapter</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Use max_completion_tokens + reasoning for reasoning-friendly chat models.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build_for_responses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neutral</span><span class="p">:</span> <span class="n">NeutralParams</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">}</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">length</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">max_output_tokens</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">build_for_completions</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">neutral</span><span class="p">:</span> <span class="n">NeutralParams</span><span class="p">,</span> <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">}</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">length</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">max_completion_tokens</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">temperature</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">temperature</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">neutral</span><span class="p">.</span><span class="n">top_p</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">stop</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">neutral</span><span class="p">.</span><span class="n">stop</span>
        <span class="k">if</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">reasoning</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">effort</span><span class="sh">"</span><span class="p">:</span> <span class="n">neutral</span><span class="p">.</span><span class="n">reasoning_effort</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">get_arg_adapter</span><span class="p">(</span><span class="n">kind</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ArgAdapter</span><span class="p">:</span>
    <span class="n">kind</span> <span class="o">=</span> <span class="p">(</span><span class="n">kind</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">ResponsesArgAdapter</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">CompletionsArgAdapter</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">kind</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions_reasoning</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">CompletionsReasoningArgAdapter</span><span class="p">()</span>
    <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown arg_adapter: </span><span class="si">{</span><span class="n">kind</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ============================================================
# Protocol strategies (Async, plain-text only)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">ProtocolStrategy</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">client</span><span class="p">:</span> <span class="n">AsyncOpenAI</span><span class="p">,</span>
        <span class="n">model</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
        <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
        <span class="n">payload_args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">UserInterface</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">ResponsesStrategy</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    responses.create loop:
      - Send input + tools
      - Collect text
      - If function calls appear: execute locally and append function_call_output
      - Repeat until no more tool calls
    </span><span class="sh">"""</span>
    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                        <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                            <span class="k">try</span><span class="p">:</span>
                                <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                                <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                                      <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                                      <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">return</span> <span class="n">calls</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">registry</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">registry</span> <span class="o">=</span> <span class="n">registry</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">client</span><span class="p">:</span> <span class="n">AsyncOpenAI</span><span class="p">,</span>
        <span class="n">model</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
        <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
        <span class="n">payload_args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">UserInterface</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="c1"># First call
</span>        <span class="n">args</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">model</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tool_choice</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="o">**</span><span class="n">payload_args</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
            <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="o">**</span><span class="n">args</span><span class="p">),</span>
            <span class="n">user</span>
        <span class="p">)</span>

        <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_collect_text</span><span class="p">(</span><span class="n">resp</span><span class="p">))</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="c1"># Execute tools and append outputs into input messages
</span>            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="c1"># Check for user interrupt between tool calls
</span>                <span class="k">if</span> <span class="k">await</span> <span class="n">user</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>
                    <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">registry</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="c1"># Next turn
</span>            <span class="n">args</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">model</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">,</span>
                <span class="o">**</span><span class="n">payload_args</span><span class="p">,</span>
            <span class="p">}</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="o">**</span><span class="n">args</span><span class="p">),</span>
                <span class="n">user</span>
            <span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">class</span> <span class="nc">CompletionsStrategy</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    chat.completions.create loop:
      - Send messages + tools
      - If tool_calls appear: execute locally and append tool messages
      - Repeat until no more tool_calls
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">registry</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">registry</span> <span class="o">=</span> <span class="n">registry</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">client</span><span class="p">:</span> <span class="n">AsyncOpenAI</span><span class="p">,</span>
        <span class="n">model</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
        <span class="n">tools_json</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span>
        <span class="n">payload_args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">],</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">UserInterface</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">model</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools_json</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tool_choice</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="o">**</span><span class="n">payload_args</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
            <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="o">**</span><span class="n">args</span><span class="p">),</span>
            <span class="n">user</span>
        <span class="p">)</span>

        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>

            <span class="n">tool_msgs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="k">if</span> <span class="k">await</span> <span class="n">user</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>
                    <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">registry</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
            <span class="p">})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">args</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">model</span><span class="sh">"</span><span class="p">:</span> <span class="n">model</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">,</span>
                <span class="o">**</span><span class="n">payload_args</span><span class="p">,</span>
            <span class="p">}</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="o">**</span><span class="n">args</span><span class="p">),</span>
                <span class="n">user</span>
            <span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
            <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">get_protocol_strategy</span><span class="p">(</span><span class="n">api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">registry</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ProtocolStrategy</span><span class="p">:</span>
    <span class="n">api</span> <span class="o">=</span> <span class="p">(</span><span class="n">api</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">ResponsesStrategy</span><span class="p">(</span><span class="n">registry</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nc">CompletionsStrategy</span><span class="p">(</span><span class="n">registry</span><span class="p">)</span>
    <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown api type: </span><span class="si">{</span><span class="n">api</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ============================================================
# HTTPX hooks (optional request logging)
# ============================================================
</span>
<span class="k">def</span> <span class="nf">build_httpx_hooks</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">]]:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">on_request</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
        <span class="c1"># Uncomment to debug requests:
</span>        <span class="c1"># if request.headers.get("content-type","").startswith("application/json"):
</span>        <span class="c1">#     print("[httpx] -&gt;", request.method, request.url)
</span>        <span class="k">return</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">on_response</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
        <span class="c1"># Uncomment to debug responses:
</span>        <span class="c1"># print("[httpx] &lt;-", response.status_code, response.request.url)
</span>        <span class="k">return</span>

    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">on_request</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">on_response</span><span class="p">]}</span>

<span class="c1"># ============================================================
# Orchestrator (ties everything together)
# ============================================================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">RunOptions</span><span class="p">:</span>
    <span class="n">system_prompt</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">user_prompt</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">enabled_tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">neutral_params</span><span class="p">:</span> <span class="n">NeutralParams</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_with_provider</span><span class="p">(</span>
    <span class="n">provider</span><span class="p">:</span> <span class="n">ProviderProfile</span><span class="p">,</span>
    <span class="n">options</span><span class="p">:</span> <span class="n">RunOptions</span><span class="p">,</span>
    <span class="n">registry</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span>
    <span class="n">user</span><span class="p">:</span> <span class="n">UserInterface</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Single-shot run given a ProviderProfile and run options.
    </span><span class="sh">"""</span>
    <span class="c1"># Select tools
</span>    <span class="n">specs</span> <span class="o">=</span> <span class="n">registry</span><span class="p">.</span><span class="nf">select</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">enabled_tools</span><span class="p">)</span>
    <span class="c1"># Build tool JSON
</span>    <span class="n">tools_builder</span> <span class="o">=</span> <span class="nf">get_tool_builder</span><span class="p">(</span><span class="n">provider</span><span class="p">.</span><span class="n">tool_json</span><span class="p">)</span>
    <span class="n">tools_json</span> <span class="o">=</span> <span class="n">tools_builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">specs</span><span class="p">)</span>

    <span class="c1"># Build messages
</span>    <span class="k">if</span> <span class="n">provider</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># Responses expects "input" messages (role/content pair objects)
</span>        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">options</span><span class="p">.</span><span class="n">system_prompt</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">options</span><span class="p">.</span><span class="n">user_prompt</span><span class="p">},</span>
        <span class="p">]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Completions expects chat "messages"
</span>        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">options</span><span class="p">.</span><span class="n">system_prompt</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">options</span><span class="p">.</span><span class="n">user_prompt</span><span class="p">},</span>
        <span class="p">]</span>

    <span class="c1"># Build endpoint-specific argument payload
</span>    <span class="n">adapter</span> <span class="o">=</span> <span class="nf">get_arg_adapter</span><span class="p">(</span><span class="n">provider</span><span class="p">.</span><span class="n">arg_adapter</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">provider</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">payload_args</span> <span class="o">=</span> <span class="n">adapter</span><span class="p">.</span><span class="nf">build_for_responses</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">neutral_params</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="n">tools_json</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">payload_args</span> <span class="o">=</span> <span class="n">adapter</span><span class="p">.</span><span class="nf">build_for_completions</span><span class="p">(</span><span class="n">options</span><span class="p">.</span><span class="n">neutral_params</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="n">tools_json</span><span class="p">)</span>

    <span class="c1"># Strategy by API
</span>    <span class="n">strategy</span> <span class="o">=</span> <span class="nf">get_protocol_strategy</span><span class="p">(</span><span class="n">provider</span><span class="p">.</span><span class="n">api</span><span class="p">,</span> <span class="n">registry</span><span class="p">)</span>

    <span class="c1"># Async client creation (single session) with hooks
</span>    <span class="n">hooks</span> <span class="o">=</span> <span class="nf">build_httpx_hooks</span><span class="p">()</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="n">httpx</span><span class="p">.</span><span class="nc">Timeout</span><span class="p">(</span><span class="mf">60.0</span><span class="p">),</span> <span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">)</span> <span class="k">as</span> <span class="n">http_client</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">provider</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">provider</span><span class="p">.</span><span class="n">api_key</span><span class="p">,</span> <span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
            <span class="c1"># Run and return final plain text
</span>            <span class="k">return</span> <span class="k">await</span> <span class="n">strategy</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span>
                <span class="n">client</span><span class="o">=</span><span class="n">client</span><span class="p">,</span>
                <span class="n">model</span><span class="o">=</span><span class="n">provider</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">tools_json</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
                <span class="n">payload_args</span><span class="o">=</span><span class="n">payload_args</span><span class="p">,</span>
                <span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">,</span>
            <span class="p">)</span>

<span class="c1"># ============================================================
# CLI entry point
# ============================================================
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">amain</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">argparse</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Async LLM Orchestrator with configurable API/Tools/Arg adapters.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--config</span><span class="sh">"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Path to config.toml (or .json fallback).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--provider</span><span class="sh">"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">api_provider name from the config.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--system</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--user</span><span class="sh">"</span><span class="p">,</span> <span class="n">required</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">User prompt to run.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--enable-tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">list_files_in_folder,read_text_file</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Comma-separated tool names (subset of registered).</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># Neutral params
</span>    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--length</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Neutral length cap (mapped to endpoint-specific).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--temperature</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--top-p</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">dest</span><span class="o">=</span><span class="sh">"</span><span class="s">top_p</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--stop</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Comma-separated stop tokens.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--reasoning-effort</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">'</span><span class="s">One of </span><span class="sh">"</span><span class="s">low</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="s">medium</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="s">high</span><span class="sh">"</span><span class="s"> (if supported).</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># Build the user interrupt controller and wire OS signals
</span>    <span class="n">user</span> <span class="o">=</span> <span class="nc">UserInterface</span><span class="p">()</span>
    <span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">loop</span><span class="p">.</span><span class="nf">add_signal_handler</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">trigger_interrupt</span><span class="p">)</span>
        <span class="n">loop</span><span class="p">.</span><span class="nf">add_signal_handler</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">user</span><span class="p">.</span><span class="n">trigger_interrupt</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">NotImplementedError</span><span class="p">:</span>
        <span class="c1"># Some platforms (e.g., certain Windows envs) may not support this
</span>        <span class="k">pass</span>

    <span class="c1"># Load providers
</span>    <span class="n">providers</span> <span class="o">=</span> <span class="nf">load_providers</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">config</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">provider</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">providers</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Provider </span><span class="sh">'</span><span class="si">{</span><span class="n">args</span><span class="p">.</span><span class="n">provider</span><span class="si">}</span><span class="sh">'</span><span class="s"> not found in config. Available: </span><span class="si">{</span><span class="nf">list</span><span class="p">(</span><span class="n">providers</span><span class="p">.</span><span class="nf">keys</span><span class="p">())</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">provider</span> <span class="o">=</span> <span class="n">providers</span><span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">provider</span><span class="p">]</span>

    <span class="c1"># Prepare tools
</span>    <span class="n">registry</span> <span class="o">=</span> <span class="nf">build_default_tools</span><span class="p">()</span>
    <span class="n">enabled_tools</span> <span class="o">=</span> <span class="p">[</span><span class="n">t</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">args</span><span class="p">.</span><span class="n">enable_tools</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">enable_tools</span> <span class="k">else</span> <span class="p">[]</span>
    <span class="n">stop</span> <span class="o">=</span> <span class="p">[</span><span class="n">s</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">stop</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">stop</span> <span class="k">else</span> <span class="p">[])</span> <span class="k">if</span> <span class="n">s</span><span class="p">]</span>

    <span class="c1"># Prepare neutral params
</span>    <span class="n">neutral</span> <span class="o">=</span> <span class="nc">NeutralParams</span><span class="p">(</span>
        <span class="n">length</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">length</span><span class="p">,</span>
        <span class="n">temperature</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">temperature</span><span class="p">,</span>
        <span class="n">top_p</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">top_p</span><span class="p">,</span>
        <span class="n">stop</span><span class="o">=</span><span class="n">stop</span> <span class="k">if</span> <span class="n">stop</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">reasoning_effort</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">reasoning_effort</span>
    <span class="p">)</span>

    <span class="n">options</span> <span class="o">=</span> <span class="nc">RunOptions</span><span class="p">(</span>
        <span class="n">system_prompt</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">system</span><span class="p">,</span>
        <span class="n">user_prompt</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">user</span><span class="p">,</span>
        <span class="n">enabled_tools</span><span class="o">=</span><span class="n">enabled_tools</span><span class="p">,</span>
        <span class="n">neutral_params</span><span class="o">=</span><span class="n">neutral</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">output_text</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_with_provider</span><span class="p">(</span><span class="n">provider</span><span class="p">,</span> <span class="n">options</span><span class="p">,</span> <span class="n">registry</span><span class="p">,</span> <span class="n">user</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== FINAL OUTPUT ===</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">output_text</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">UserCancelledError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== INTERRUPTED ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== ERROR ===</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">amain</span><span class="p">())</span>
</code></pre></div></div>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">OpenAI 함수 호출 테스트</title><link href="https://hvppyarchive.github.io/llm/openai-function-call-examples/" rel="alternate" type="text/html" title="OpenAI 함수 호출 테스트" /><published>2025-10-24T16:39:17+09:00</published><updated>2025-10-24T16:39:17+09:00</updated><id>https://hvppyarchive.github.io/llm/openai-function-call-examples</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/openai-function-call-examples/"><![CDATA[<p class="chat--user">

openai package를 사용하는 테스트 코드 작성할거야. 목표: 2가지 모델에 대해 2가지 api type(completions, responses)에 대해 function calling 테스트를 하고 싶어. 총 4개 조합에 대해 설정할 수 있게 코드 작성 하자. 툴은 간단히 특정 폴더의 파일 조회, 특정 폴더의 파일 읽기 두 가지 툴을 구현할거야 2개 모델에 대한 엔드포인트, api 키, 모델명을 코드 내에서 설정할 수 있도록 할 것.

</p>

<p>좋아! 아래는 “두 모델 × 두 API 타입(completions, responses) × 함수 호출(function calling)” 조합을 한 파일에서 모두 테스트할 수 있는 파이썬 스크립트야.<br />
요구사항 정리대로</p>

<ol>
  <li>
    <p>두 가지 파일 관련 툴(폴더 내 파일 목록 조회, 파일 읽기)</p>
  </li>
  <li>
    <p>2개 모델에 대한 엔드포인트·API 키·모델명을 코드 내에서 설정 가능</p>
  </li>
  <li>
    <p>4가지 조합을 원하는 대로 실행 가능</p>
  </li>
</ol>

<p>을 모두 담았어. 최신 OpenAI Python SDK의 사용법과 Responses API의 툴 호출 흐름은 공식 문서의 구조를 따랐어. 참고: function calling과 tools 정의 방식은 공식 가이드와 동일하고, Chat Completions API에서는 tool_calls를 message에, Responses API에서는 output 항목과 tool_calls를 통해 주고받는 형태야. 관련 문서: Function Calling 가이드와 Responses API 레퍼런스. <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼+1</a></p>

<p>스크립트는 다음처럼 동작해</p>

<ul>
  <li>
    <p>MODELS 섹션에서 model A/B의 endpoint, api_key, model 이름을 채워둔다(예시 포함).</p>
  </li>
  <li>
    <p>TOOL 정의는 공통(JSON Schema).</p>
  </li>
  <li>
    <p>run_with_chat_completions(…), run_with_responses(…) 두 함수가 각각 함수 호출 루프를 수행.</p>
  </li>
  <li>
    <p>main에서 네 가지 조합을 순차 실행하거나, 원하는 조합만 선택 실행하도록 CLI 옵션 제공.</p>
  </li>
</ul>

<p>코드 복사해서 test_openai_tools.py로 저장한 뒤, samples 폴더에 테스트용 파일을 몇 개 넣고 돌려봐.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_openai_tools.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# 1) 구성(모델/엔드포인트/키)
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>               <span class="c1"># ex) "https://api.openai.com/v1"
</span>    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>                <span class="c1"># ex) os.getenv("OPENAI_API_KEY")
</span>
<span class="c1"># 여기서 두 모델에 대한 엔드포인트/키/모델명을 설정하세요.
# 실제 키를 코드에 하드코딩하지 말고, 환경변수를 권장합니다.
</span><span class="n">MODELS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">,</span>          <span class="c1"># 예시 (원하는 최신 모델명으로 변경)
</span>        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>           <span class="c1"># 예시 (원하는 최신 모델명으로 변경)
</span>        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =====================================
# 2) 로컬 파일 툴(폴더 목록/파일 읽기)
# =====================================
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">지정 폴더 내 파일 목록 반환(파일만).</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">items</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))]</span>
    <span class="k">return</span> <span class="n">files</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">지정 경로의 텍스트 파일 내용 반환(UTF-8 가정).</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
        <span class="c1"># 바이너리 등 텍스트가 아닌 경우
</span>        <span class="k">return</span> <span class="sh">""</span>

<span class="c1"># 공통 툴 스키마(JSON Schema; Chat Completions/Responses에서 그대로 사용)
</span><span class="n">TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content as a string.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># 툴 디스패처
</span><span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder</span><span class="p">),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">file_path</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># =====================================
# 3) Chat Completions로 함수 호출 테스트
# =====================================
</span>
<span class="k">def</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Chat Completions API로 function calling 테스트.
    - tools: TOOLS
    - tool_choice: </span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="s"> 권장
    - tool_calls -&gt; 실제 파이썬 함수 실행 -&gt; tool 메시지 첨부 -&gt; 재호출
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="c1"># 1차 호출
</span>    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tool_choice</span>  <span class="c1"># 'auto' or {'type':'function','function':{'name':'...'}}
</span>    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="c1"># 함수 호출 루프
</span>    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>

            <span class="c1"># tool 메시지 첨부
</span>            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_output</span>
            <span class="p">})</span>

        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="c1"># 후속 호출(최종 답변 유도)
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =====================================
# 4) Responses API로 함수 호출 테스트
#    - 최신 SDK 규약에 맞춰 비스트리밍 루프 구성
# =====================================
</span>
<span class="k">def</span> <span class="nf">extract_text_from_responses_output</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Responses API의 output 배열에서 자연어 텍스트만 모아 반환.</span><span class="sh">"""</span>
    <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="c1"># item.type == "message" 인 경우, item.content[*] 중 type == "output_text"
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="c1"># 일부 모델은 최종에 바로 output_text만 내보내기도 함
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">extract_tool_calls_from_responses_output</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 output에서 tool_call 이벤트를 수집.
    각 항목은 {id, name, arguments} 형태로 정규화해서 반환.
    </span><span class="sh">"""</span>
    <span class="n">calls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="c1"># 케이스1: item.type == "tool_call"
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">tool_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tc</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}</span>
            <span class="p">}</span>
            <span class="c1"># arguments는 문자열/딕셔너리 모두 가능성 고려
</span>            <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tc</span><span class="p">)</span>

        <span class="c1"># 케이스2: item.type == "message" 내부 content[*]에 tool_calls 묶여있을 수 있음
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="c1"># 일부 SDK 버전에서 item.tool_calls 또는 item.content[*].tool_calls 형태
</span>            <span class="n">inner_calls</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner_calls</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner_calls</span><span class="p">:</span>
                    <span class="n">arg_obj</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{}</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">arg_obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">arg_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">arg_obj</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">arg_obj</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">arg_obj</span> <span class="ow">or</span> <span class="p">{}</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Responses API로 function calling 테스트.
    흐름:
      1) responses.create(input=[{role:user, content:...}], tools=TOOLS, tool_choice=...)
      2) tool_call이 있으면 로컬 함수 실행
      3) responses.create(..., tool_outputs=[{tool_call_id, output}], response_id=prev.id) 로 이어서 호출
         (최신 문서의 규약을 따름)
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="c1"># 1차 호출
</span>    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}],</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tool_choice</span>
    <span class="p">)</span>

    <span class="c1"># 루프: 도구 호출이 끝날 때까지
</span>    <span class="n">final_text_parts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>  <span class="c1"># 안전 상한
</span>        <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">tool_calls</span> <span class="o">=</span> <span class="nf">extract_tool_calls_from_responses_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="n">plain_text</span> <span class="o">=</span> <span class="nf">extract_text_from_responses_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="n">plain_text</span><span class="p">:</span>
            <span class="n">final_text_parts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">plain_text</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">tool_calls</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">tool_outputs_payload</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs_payload</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span>
            <span class="p">})</span>

        <span class="c1"># 이전 response와 이어 붙여 툴 결과를 전달
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
            <span class="n">response_id</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs_payload</span>
        <span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">final_text_parts</span> <span class="k">if</span> <span class="n">p</span><span class="p">])</span>

<span class="c1"># =====================================
# 5) 실행부(4가지 조합)
# =====================================
</span>
<span class="n">DEFAULT_USER_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더 안의 파일 목록을 보여주고, 텍스트 파일이 하나라도 있으면 </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">그 중 하나의 내용을 읽어서 핵심만 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">combo_api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [</span><span class="si">{</span><span class="n">combo_api</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] with Model </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">) ===</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">combo_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">combo_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">combo_api must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Test function-calling with OpenAI (4-way matrix).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Which API type to run.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Which model to use.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_USER_TASK</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">User task/prompt.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">apis</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">api</span><span class="p">]</span>
    <span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">]</span>

    <span class="c1"># 샘플 폴더 안내
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">apis</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="nf">run_one</span><span class="p">(</span><span class="n">api</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 방법 간단 정리</p>

<ol>
  <li>환경 변수 세팅(권장)</li>
</ol>

<ul>
  <li>
    <p>Model A</p>

    <ul>
      <li>
        <p>OPENAI_API_KEY=…</p>
      </li>
      <li>
        <p>OPENAI_BASE_URL=https://api.openai.com/v1</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Model B</p>

    <ul>
      <li>
        <p>OPENAI_API_KEY_B=…</p>
      </li>
      <li>
        <p>OPENAI_BASE_URL_B=https://api.openai.com/v1</p>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>테스트 파일 준비</li>
</ol>

<ul>
  <li>프로젝트 루트에 samples 폴더를 만들고, 텍스트 파일을 1개 이상 넣는다. 예: samples/readme.txt</li>
</ul>

<ol>
  <li>실행</li>
</ol>

<ul>
  <li>
    <p>네 조합 모두:<br />
python test_openai_tools.py</p>
  </li>
  <li>
    <p>특정 API만:<br />
python test_openai_tools.py –api completions<br />
python test_openai_tools.py –api responses</p>
  </li>
  <li>
    <p>특정 모델만:<br />
python test_openai_tools.py –model A<br />
python test_openai_tools.py –model B</p>
  </li>
  <li>
    <p>프롬프트 커스터마이즈:<br />
python test_openai_tools.py –task "여기에 원하는 테스트 지시문"</p>
  </li>
</ul>

<p>구현 포인트 설명(필요 시 점검할 체크리스트)</p>

<ul>
  <li>
    <p>Chat Completions: response.choices[0].message.tool_calls를 확인하고, 각 툴을 실행한 뒤 tool 메시지를 추가해서 재호출하는 전형적 루프를 사용했어. 이것은 Function Calling 가이드의 권고 패턴이야. <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Responses API: responses.create(…) → output에서 tool_call 이벤트를 수집 → 실제 함수 실행 → tool_outputs와 이전 response_id를 함께 넘겨 후속 responses.create(…) 호출로 이어 붙이는 패턴이야. 이 흐름은 공식 Responses API 레퍼런스가 안내하는 방식과 맞물려 있어. <a href="https://platform.openai.com/docs/api-reference/responses/create">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>tools 스키마는 두 API에서 동일하게 재사용.</p>
  </li>
  <li>
    <p>로컬 파일 I/O는 안전하게 예외 처리했고, 텍스트 파일로 가정(UTF-8)했지만 디코딩 실패 시 빈 문자열을 반환해 모델이 적절히 안내하도록 했어.</p>
  </li>
</ul>

<p>문서 참고 링크</p>

<ul>
  <li>
    <p>Function Calling 가이드(툴 정의/호출 흐름) <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Responses API 레퍼런스(응답 구조, tool_outputs 전달 방식) <a href="https://platform.openai.com/docs/api-reference/responses/create">OpenAI 플랫폼</a></p>
  </li>
</ul>

<p>필요하면</p>

<ul>
  <li>
    <p>모델명만 바꿔서(예: 최신 gpt-4.1 계열 등) 즉시 시험 가능</p>
  </li>
  <li>
    <p>tool_choice를 "any"로 바꾸면 여러 툴 병렬 호출 경향을 더 시험할 수 있어</p>
  </li>
  <li>
    <p>samples 폴더 경로나 읽을 파일 선택 로직을 더 엄격하게 지정하고 싶다면, 프롬프트를 고정(seed task)하거나 시스템 메시지쪽에 규칙을 더해도 좋아</p>
  </li>
</ul>

<p>원하는 부분 더 바꿔드릴게.</p>

<p class="chat--user">

아니 내가 조사했을 때 responses용 툴 json이 있고, completion용이 따로 있어 조금 다르게 생겼던데 찾아서 반영해줘

</p>

<p>좋은 지적이야. 실제로 “도구 정의(tools JSON)”는 두 API가 거의 같지만, Responses API는 실행·상태 전파 방식(response_id, tool_outputs 등)과 출력 구조가 다르고, 가이드에선 Responses 예시에서 엄격 파싱(strict) 옵션을 곁들여 쓰는 패턴이 자주 보여서 모양이 살짝 달라 보일 수 있어. 그래서 아래처럼 아예 두 벌의 스키마를 분리해 두고, Responses 쪽엔 엄격 파싱을 넣는 식으로 반영했어. 또한 Responses는 tool_outputs와 response_id를 통해 단계적으로 이어붙이는 점을 코드에 명확히 했어. 참고 문서: Function Calling 가이드와 Responses API 레퍼런스. <a href="https://platform.openai.com/docs/guides/function-calling/supported-models?utm_source=chatgpt.com">OpenAI 플랫폼+2</a></p>

<p>아래 스크립트는 네 가지 조합(모델 A/B × completions/responses) 모두 함수 호출을 시험하고, 두 종류의 파일 툴을 제공해. 변경 포인트는 1) CHAT_TOOLS vs RESPONSES_TOOLS 분리, 2) Responses 루프에서 tool_outputs·response_id 사용을 더 엄격히, 3) Responses 출력 파서 보강이야.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_openai_tools_split_tools.py
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># 공통 실제 구현 함수
</span><span class="kn">import</span> <span class="n">os</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))]</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># Chat Completions 전용 도구 JSON
# - 전통적인 function calling 스키마
</span><span class="n">CHAT_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Path to the text file.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># Responses 전용 도구 JSON
# - 스키마 필드는 유사하지만, Responses 예제 관례에 맞춰 strict를 켬
#   (모델이 schema에 정확히 맞춰 인자 생성하도록 강제)
</span><span class="n">RESPONSES_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Path to the text file.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">CHAT_TOOLS</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="n">tools_choice</span>
    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># 각 툴 실행
</span>        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">output</span><span class="p">})</span>
        <span class="c1"># 대화 이어붙이기
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># Responses 출력 파서
</span><span class="k">def</span> <span class="nf">_extract_text</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">_extract_tool_calls</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">tool_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner_calls</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner_calls</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner_calls</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}],</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">RESPONSES_TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tools_choice</span>
    <span class="p">)</span>

    <span class="n">final_text</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># Responses는 tool_outputs + response_id로 상태를 이어서 보낸다.
</span>    <span class="c1"># 이어붙이기 패턴은 공식 레퍼런스의 흐름과 동일. :contentReference[oaicite:1]{index=1}
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>  <span class="c1"># 안전 상한
</span>        <span class="n">txt</span> <span class="o">=</span> <span class="nf">_extract_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="n">txt</span><span class="p">:</span>
            <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="n">calls</span> <span class="o">=</span> <span class="nf">_extract_tool_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">})</span>

        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">RESPONSES_TOOLS</span><span class="p">,</span>
            <span class="n">response_id</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>          <span class="c1"># 이전 응답과 연결
</span>            <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs</span>  <span class="c1"># 툴 실행 결과 전달
</span>        <span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나 골라 내용을 읽고 2~3문장 요약. 필요하면 툴 사용.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">which_api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [</span><span class="si">{</span><span class="n">which_api</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] Model </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">) ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">which_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">which_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">which_api must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">apis</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">api</span><span class="p">]</span>
    <span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">apis</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="nf">run_one</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
</code></pre></div></div>

<p>핵심 차이 정리 단계별</p>

<ol>
  <li>
    <p>도구 정의 자체는 필드 구조가 동일(type=function, function.name/description/parameters)하되, Responses 쪽 예시에서는 strict를 켜서 JSON Schema를 엄격히 지키게 하는 패턴이 널리 쓰인다. 그래서 스키마가 “조금 다르게 생긴 것처럼” 보일 수 있다. <a href="https://platform.openai.com/docs/guides/function-calling/supported-models?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>Chat Completions는 messages 배열에 assistant.tool_calls가 나오고, 각 call.id에 대응하는 tool 메시지를 넣어 다시 chat.completions.create를 호출한다.</p>
  </li>
  <li>
    <p>Responses는 output에 tool_call 항목이 나오며, 실제 도구 실행 후 tool_outputs 배열과 이전 응답의 response_id를 포함해 responses.create를 다시 호출해 상태를 이어 붙인다. 이게 가장 큰 차이점이다. <a href="https://platform.openai.com/docs/api-reference/responses-streaming/response?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ol>

<p>이 버전으로 돌려보고, Responses에서 strict를 끄고 싶으면 RESPONSES_TOOLS에서 "strict": True만 빼면 돼. 모델·엔드포인트·키는 상단 MODELS에서 조정 가능하고, samples 폴더에 테스트 파일만 있으면 바로 네 조합을 모두 확인할 수 있어.</p>

<p class="chat--user">

아니 예시를 좀 찾아봐.. from openai import OpenAI import json client = OpenAI() # 1. Define a list of callable tools for the model tools = [ { "type": "function", "name": "get_horoscope", "description": "Get today's horoscope for an astrological sign.", "parameters": { "type": "object", "properties": { "sign": { "type": "string", "description": "An astrological sign like Taurus or Aquarius", }, }, "required": ["sign"], }, }, ] def get_horoscope(sign): return f"{sign}: Next Tuesday you will befriend a baby otter." # Create a running input list we will add to over time input_list = [ {"role": "user", "content": "What is my horoscope? I am an Aquarius."} ] # 2. Prompt the model with tools defined response = client.responses.create( model="gpt-5", tools=tools, input=input_list, ) # Save function call outputs for subsequent requests input_list += response.output for item in response.output: if item.type == "function_call": if item.name == "get_horoscope": # 3. Execute the function logic for get_horoscope horoscope = get_horoscope(json.loads(item.arguments)) # 4. Provide function call results to the model input_list.append({ "type": "function_call_output", "call_id": item.call_id, "output": json.dumps({ "horoscope": horoscope }) }) print("Final input:") print(input_list) response = client.responses.create( model="gpt-5", instructions="Respond only with a horoscope generated by a tool.", tools=tools, input=input_list, ) # 5. The model should be able to give a response! print("Final output:") print(response.model_dump_json(indent=2)) print("\n" + response.output_text) 그러면 총 8개 조합이 나오지? 모델 x API 타입(completion, responses) x json 형태 이 8개 조합에 대해 각각 테스트하는 코드를 짜줘 이 때 실행 중 에러가 나는 경우에는 에러만 출력하고 나머지가 잘 수행되게 해줘.

</p>

<p>좋아. “2개 모델 × 2개 API(completions, responses) × 2가지 tools JSON 형태(Completions 스타일 vs Responses 스타일)” = 총 8개 조합을 한 번에 돌려보는 테스트 스크립트를 준비했어. 각 조합은 개별 try/except로 감싸 에러가 나더라도 나머지가 계속 수행돼. tools JSON은 네가 준 Responses 스타일 예시(평평한 형태: type/name/parameters가 최상위)와, Chat Completions에서 흔히 쓰는 중첩 형태({"type":"function","function":{…}})를 각각 분리해 두었고, 일부 조합은 의도적으로 “맞지 않는 형태”를 넣었기 때문에 실패할 수도 있어(그 경우 에러만 출력). 참고로 Responses와 Chat Completions의 차이, strict 옵션 등은 최신 가이드에 정리돼 있어. <a href="https://platform.openai.com/docs/guides/responses-vs-chat-completions?utm_source=chatgpt.com">OpenAI 플랫폼+2</a></p>

<p>아래 파일을 test_8combos_tools.py로 저장해서 실행하면 돼.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_8combos_tools.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# 0) 모델 설정
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =========================
# 1) 로컬 툴 구현
# =========================
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    모든 툴의 결과를 dict로 통일해서 반환.
    Responses의 function_call_output에 넣기 좋게 {</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="s">: ...} 형태로 감싸준다.
    </span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder</span><span class="p">)}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">path</span><span class="p">)}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># =========================
# 2) tools JSON 두 가지 형태
# =========================
</span>
<span class="c1"># (A) Chat Completions 스타일: function 필드에 중첩
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># (B) Responses 스타일: 네가 준 예시처럼 평평한 형태(일부 문서/예시에서 보이는 포맷)
</span><span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True  # 필요 시 켜서 인자 스키마 준수 강제 (도움말 참조)
</span>    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True
</span>    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># =========================
# 3) Chat Completions 쪽 함수 호출 루프
# =========================
</span>
<span class="k">def</span> <span class="nf">run_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s">  -&gt; CHAT_STYLE_TOOLS 사용 (권장)
    </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s"> -&gt; RESPONSES_STYLE_TOOLS 사용 (의도적 비호환 가능)
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="c1"># tool_calls 루프
</span>    <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>
        <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="c1"># arguments는 문자열일 수 있음
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>

            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
            <span class="p">})</span>

        <span class="c1"># 대화 이어붙이기
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
        <span class="p">})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =========================
# 4) Responses 쪽 함수 호출 루프
# =========================
</span>
<span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 output 배열에서 function_call / tool_call 류 이벤트를 추출.
    다양한 케이스를 최대한 관대하게 처리한다.
    </span><span class="sh">"""</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

        <span class="c1"># 케이스 A: item.type == "function_call"
</span>        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
            <span class="p">})</span>

        <span class="c1"># 케이스 B: 일부 모델이 "tool_call" / item.message.tool_calls 형태로 줄 때
</span>        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s"> -&gt; RESPONSES_STYLE_TOOLS 사용 (권장)
    </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s">      -&gt; CHAT_STYLE_TOOLS 사용 (의도적 비호환 가능)
    순수 Responses 방식: 네가 준 예시 패턴(input_list 축적 + function_call_output)로 구현.
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="c1"># running input_list
</span>    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}</span>
    <span class="p">]</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># function_call 처리
</span>    <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

    <span class="c1"># call들을 찾아 실행하고, function_call_output을 이어 붙임
</span>    <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
        <span class="p">})</span>

    <span class="c1"># 최종 응답 시도(지시문을 추가적으로 줄 수도 있음)
</span>    <span class="n">r2</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">Respond with a short summary of what you found.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># 텍스트 추출(중간/최종)
</span>    <span class="n">final_text</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">txt1</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">if</span> <span class="n">txt1</span><span class="p">:</span> <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt1</span><span class="p">)</span>
    <span class="n">txt2</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r2</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">if</span> <span class="n">txt2</span><span class="p">:</span> <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt2</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =========================
# 5) 8개 조합 실행기
# =========================
</span>
<span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나 골라 내용을 읽고 2~3문장 요약. 필요하면 도구를 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools_json=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">run_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 8 combinations: 2 models × 2 APIs × 2 tools JSON styles.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># tools_variant를 "both"로 두면 각 API에서 chat/​responses 두 가지 툴 JSON 모두 시도 → 8조합
</span>    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># 샘플 폴더 생성 안내
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>

    <span class="c1"># 8조합: 2모델 × 2API × 2JSON
</span>    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="nf">run_one</span><span class="p">(</span><span class="n">api</span><span class="p">,</span> <span class="n">mk</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>실행 예시<br />
python test_8combos_tools.py<br />
python test_8combos_tools.py –apis completions –tools both<br />
python test_8combos_tools.py –models A –apis responses –tools responses</p>

<p>포인트 요약</p>

<ol>
  <li>
    <p>CHAT_STYLE_TOOLS와 RESPONSES_STYLE_TOOLS를 분리해 두었고, Responses 루프는 네가 붙여준 예시처럼 input_list에 function_call과 function_call_output을 누적하는 방식으로 구현했어. 일부 문서/예시에선 strict를 켜 JSON 스키마를 강제하니 필요하면 해당 키를 켜면 돼. <a href="https://platform.openai.com/docs/guides/function-calling?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>일부 조합은 의도적으로 호환되지 않아 에러가 날 수 있어(예: Chat Completions에 Responses 스타일 tools). 모든 run은 try/except로 감싸 실패해도 나머지가 이어진다.</p>
  </li>
  <li>
    <p>최신 차이점과 권장 흐름은 Responses vs Chat Completions 가이드에서 비교 가능해. <a href="https://platform.openai.com/docs/guides/responses-vs-chat-completions?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ol>

<p>더 엄격하게 Responses의 “response_id + tool_outputs” 방식으로 이어붙이는 버전도 원하면 따로 추가해줄게.</p>

<p class="chat--user">

개선 필요 사항 1. responses api에서도 여러 번 콜을 하고 각 대화를 다 출력하고 싶어. 2. 입력 전체를 그냥 json으로 출력하고, 출력 전체도 그냥 json으로 다 저장해줘. 단, 콘솔 출력 색깔 지정을 통해서 (1) 입력 (2) 툴 요청 (3) 출력 이 구분되면 좋겠어. 3. 추가적으로 json formatting (structured json)도 추가해줘. structured json이 있는 버젼과 없는 버젼 각각 추가해주면 좋겠어. 총 16가지 조합이 될 거야. 각 api에 대한 structured formatting 예시는 아래 코드를 참고해 chat completions 
<code class="language-plaintext highlighter-rouge">
from pydantic import BaseModel
from openai import OpenAI

client = OpenAI()

class CalendarEvent(BaseModel):
    name: str
    date: str
    participants: list[str]

completion = client.chat.completions.parse(
    model="gpt-4o-2024-08-06",
    messages=[
        {"role": "system", "content": "Extract the event information."},
        {"role": "user", "content": "Alice and Bob are going to a science fair on Friday."},
    ],
    response_format=CalendarEvent,
)

event = completion.choices[0].message.parsed
</code>

responses 
<code class="language-plaintext highlighter-rouge">
from openai import OpenAI
from pydantic import BaseModel

client = OpenAI()

class CalendarEvent(BaseModel):
    name: str
    date: str
    participants: list[str]

response = client.responses.parse(
    model="gpt-4o-2024-08-06",
    input=[
        {"role": "system", "content": "Extract the event information."},
        {
            "role": "user",
            "content": "Alice and Bob are going to a science fair on Friday.",
        },
    ],
    text_format=CalendarEvent,
)

event = response.output_parsed
</code>

</p>

<p>좋아, 요구사항(2모델 × 2 API 타입 × 2 Tools JSON 스타일 × 2 Structured 포맷 유무 = 16조합)을 모두 만족하는 단일 실행 스크립트를 준비했어. 다음을 보장해.</p>

<ol>
  <li>
    <p>Responses API에서 여러 번 호출(툴 호출 발생 시 루프)하며, 매 스텝의 대화 전개를 콘솔에 모두 출력.</p>
  </li>
  <li>
    <p>각 조합마다 “입력 전체”와 “출력 전체”를 JSON으로 파일로 저장. 콘솔에선 색상으로 (입력 / 툴요청 / 출력) 구분.</p>
  </li>
  <li>
    <p>Structured JSON 파싱 버전과 일반 버전 각각 제공.</p>
  </li>
  <li>
    <p>에러는 조합별로 try/except로 고립 처리하여, 실패해도 나머지 조합 계속 실행.</p>
  </li>
</ol>

<p>아래 코드를 test_16combos.py로 저장해서 실행해. samples 폴더에 텍스트 파일 몇 개 두면 툴 동작을 쉽게 확인할 수 있어.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_16combos.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# ANSI 색상 유틸
# =========================
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># 입력
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># 툴 요청/툴 출력
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># 모델 출력
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># 에러
</span>
<span class="c1"># =========================
# 모델/엔드포인트/키 설정
# =========================
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =========================
# 로컬 툴 구현
# =========================
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># =========================
# Tools JSON 2가지 스타일
# =========================
# Chat Completions 스타일 (function 필드 중첩)
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># Responses 스타일 (평평한 형태; 일부 예시 포맷)
</span><span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True  # 필요 시 활성화
</span>    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True
</span>    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># =========================
# Structured JSON 포맷용 Pydantic
# =========================
</span><span class="k">class</span> <span class="nc">FileTaskResult</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">chosen_file</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">summary</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># =========================
# 공통: 출력/저장 헬퍼
# =========================
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">label_for</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="sh">'</span><span class="s">structured</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">plain</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># =========================
# Chat Completions 러너 (plain/structured)
# =========================
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="c1"># 대화 시작
</span>    <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="c1"># 입력/출력 전체 저장을 위한 구조
</span>    <span class="n">input_snapshot</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># structured: parse() 사용
</span>        <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># function calling 루프 (parse 결과에서도 tool_calls 접근 가능하도록 시도)
</span>        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># 최종 구조화 결과
</span>        <span class="n">parsed</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">FileTaskResult</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_to_print</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">:</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="bp">None</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat Completions, structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_to_print</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># plain: create() 사용
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat Completions, plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="c1"># 파일 저장
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># =========================
# Responses 러너 (plain/structured)
# - 여러 번 호출하며 매 스텝 출력
# =========================
</span><span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>

        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># structured: responses.parse(text_format=...)
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">text_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># 툴 호출 탐지 → 실행 → function_call_output 추가 → 이어서 또 parse
</span>        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># 최종 파싱 결과
</span>        <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># plain: responses.create()
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="c1"># function_call_output을 input에 누적
</span>                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="c1"># 다음 턴
</span>            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">final_text</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_text</span><span class="p">})</span>

    <span class="c1"># 파일 저장
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># =========================
# 16개 조합 실행기
#   2 모델 × 2 API × 2 Tools JSON × 2 Structured
# =========================
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span>
    <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">combo_label</span> <span class="o">=</span> <span class="nf">label_for</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">combo_label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> structured=</span><span class="si">{</span><span class="sh">'</span><span class="s">on</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
        <span class="c1"># 에러만 출력하고 계속
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 16 combos: 2 models × 2 APIs × 2 Tools JSON × 2 Structured.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--structured</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">structured_opts</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">structured_opts</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">st</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용법 요약</p>

<ol>
  <li>환경 변수 설정(예시)</li>
</ol>

<ul>
  <li>
    <p>모델 A:<br />
OPENAI_API_KEY_A, OPENAI_BASE_URL_A=https://api.openai.com/v1, MODEL_A_NAME</p>
  </li>
  <li>
    <p>모델 B:<br />
OPENAI_API_KEY_B, OPENAI_BASE_URL_B=https://api.openai.com/v1, MODEL_B_NAME</p>
  </li>
</ul>

<ol>
  <li>
    <p>샘플 준비<br />
프로젝트 루트에 samples 폴더를 만들고 텍스트 파일을 1개 이상 넣어둔다.</p>
  </li>
  <li>
    <p>실행 예시</p>
  </li>
</ol>

<ul>
  <li>
    <p>16개 전체 조합 실행<br />
python test_16combos.py</p>
  </li>
  <li>
    <p>Responses만, structured/plain 둘 다, tools는 responses 스타일만<br />
python test_16combos.py –apis responses –tools responses –structured both</p>
  </li>
  <li>
    <p>모델 A만, Chat Completions만, structured만<br />
python test_16combos.py –models A –apis completions –structured on</p>
  </li>
</ul>

<p>동작 정리</p>

<ul>
  <li>
    <p>콘솔 색상으로 입력(청록), 툴 요청(노랑), 출력(초록)을 구분.</p>
  </li>
  <li>
    <p>각 조합은 runs/타임스탬프/모델_API_tools_structured/ 아래에 input.json, outputs.json 저장.</p>
  </li>
  <li>
    <p>Responses API는 툴 호출이 계속 나오면 루프를 반복하고 매 스텝 출력 및 누적 저장.</p>
  </li>
  <li>
    <p>Structured 모드에선 chat.completions.parse / responses.parse를 사용해 Pydantic 모델(FileTaskResult)로 결과를 파싱해 별도 요약도 콘솔에 표시.</p>
  </li>
</ul>

<p>원하는 추가 포맷(예: 파일명 규칙, 더 자세한 로깅, strict 옵션 상시 on 등)이 있으면 알려줘.</p>

<p class="chat--user">

출력 json 포맷은 task에서 요청한 걸 대답할 수 있게 해주면 좋을 것 같아. 예를 들어 filename: 파일명 contents: 내용 

</p>

<p>좋아! “결과 JSON 포맷을 task에 바로 쓰이게(filename, contents)”로 맞춘 버전을 아래처럼 업데이트했어. 핵심은 structured 모드에서 파싱 모델을 <code class="language-plaintext highlighter-rouge">{"filename": str, "contents": str}</code>로 고정하고, 모델에게 “contents에는 요약을 넣어라”라고 지시하는 것. plain 모드에서는 기존 그대로 자유 텍스트를 출력하고 전체 원시 JSON 로그만 저장하며, structured 모드에서는 추가로 <code class="language-plaintext highlighter-rouge">result.json</code>에 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code>를 저장해.</p>

<p>아래 스크립트는 이전 16조합 실행기(test_16combos.py)를 대체하는 완전판이야. 바뀐 점만 빠르게 요약하고 바로 코드 줄게.</p>

<p>변경 요약</p>

<ol>
  <li>Structured 파싱 모델 교체</li>
</ol>

<ul>
  <li>
    <p>Pydantic 모델을 <code class="language-plaintext highlighter-rouge">TaskAnswer</code>로 정의하고 필드를 filename, contents 두 개로 통일.</p>
  </li>
  <li>
    <p>contents는 “읽은 파일의 2~3문장 요약”을 넣도록 system/instructions에 명확히 지시.</p>
  </li>
</ul>

<ol>
  <li>Structured 모드에서 결과 JSON 저장</li>
</ol>

<ul>
  <li>
    <p>각 조합 폴더에 <code class="language-plaintext highlighter-rouge">result.json</code>으로 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code> 저장.</p>
  </li>
  <li>
    <p>기존처럼 <code class="language-plaintext highlighter-rouge">input.json</code>, <code class="language-plaintext highlighter-rouge">outputs.json</code>도 계속 저장.</p>
  </li>
</ul>

<ol>
  <li>콘솔 색상 출력은 동일하게 유지</li>
</ol>

<ul>
  <li>입력(CYAN), 툴 요청(YELLOW), 출력(GREEN)으로 구분.</li>
</ul>

<ol>
  <li>Responses API는 다단 호출 유지</li>
</ol>

<ul>
  <li>각 step의 출력과 툴 요청을 모두 콘솔에 표시하고, outputs.json에 누적 저장.</li>
</ul>

<p>코드</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_16combos_v2.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># ===== ANSI 색상 =====
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># 입력
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># 툴 요청/툴 출력
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># 모델 출력
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># 에러
</span>
<span class="c1"># ===== 모델 설정 =====
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># ===== 로컬 툴 구현 =====
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># ===== Tools JSON 2가지 =====
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># ===== Structured JSON 스키마 =====
</span><span class="k">class</span> <span class="nc">TaskAnswer</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">filename</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">contents</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># 선택된 파일의 2~3문장 요약(모델이 생성)
</span>
<span class="c1"># ===== 유틸 =====
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span> <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="sh">'</span><span class="s">structured</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">plain</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># ===== Chat Completions 러너 =====
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="n">system_msg</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: Show files under ./samples, pick one text file, read it, and provide a 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If using structured output, respond ONLY with JSON having keys: filename, contents.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_msg</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="n">parsed</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TaskAnswer</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># ===== Responses 러너 =====
</span><span class="k">def</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="n">system_inst</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: Show files under ./samples, pick one text file, read it, and provide a 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If structured parsing is enabled, respond ONLY with JSON having keys: filename, contents.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_inst</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">final_text</span> <span class="o">=</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_text</span><span class="p">})</span>

    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># ===== 16개 조합 실행기 =====
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">label</span> <span class="o">=</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> structured=</span><span class="si">{</span><span class="sh">'</span><span class="s">on</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>  <span class="c1"># 에러만 출력하고 계속
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 16 combos with JSON result format {filename, contents}.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--structured</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">structured_opts</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">structured_opts</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">st</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 포인트</p>

<ul>
  <li>
    <p>structured 모드일 때만 <code class="language-plaintext highlighter-rouge">result.json</code>을 생성하며 내용은 반드시 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code>로 저장돼.</p>
  </li>
  <li>
    <p>contents에는 “선택한 파일의 2~3문장 요약”이 들어가도록 시스템 메시지에서 강제했어.</p>
  </li>
  <li>
    <p>plain 모드에선 자유 형식 출력이지만, 입력과 모든 원시 응답은 <code class="language-plaintext highlighter-rouge">input.json</code>, <code class="language-plaintext highlighter-rouge">outputs.json</code>로 저장돼.</p>
  </li>
  <li>
    <p>각 단계의 콘솔 출력은 색상으로 구분돼서 입력/툴요청/출력이 한눈에 보여.</p>
  </li>
</ul>

<p>원하면 contents를 “파일 전문”으로 바꾸는 옵션 스위치도 추가해줄 수 있어.</p>

<p class="chat--user">

Completions(structured)에서 ValueError list_files_in_folder is not strict. Only <code class="language-plaintext highlighter-rouge">strict</code> function tools can be auto-parsed.

</p>

<p>좋은 피드백이야. 에러 원인은 chat.completions.parse를 사용할 때 툴이 strict 모드가 아니면 자동 파싱이 불가능해서야. 즉, structured 모드에서 함수 툴 정의에 strict=True가 반드시 들어가야 해.</p>

<p>수정 방향 요약 단계별</p>

<ol>
  <li>
    <p>tools_variant와 structured 여부에 따라 툴 JSON에 strict를 주입하는 헬퍼를 만든다.</p>
  </li>
  <li>
    <p>Chat 스타일일 땐 tool["function"]["strict"]=True, Responses 스타일일 땐 tool["strict"]=True를 넣는다.</p>
  </li>
  <li>
    <p>run_chat / run_responses에서 기존 정적 TOOLS 대신 이 헬퍼로 반환된 툴을 사용한다.</p>
  </li>
</ol>

<p>아래 변경만 적용하면 돼. 나머지 로직은 그대로 둬도 동작한다.</p>

<p>추가 함수 및 변경점</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">copy</span>

<span class="k">def</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">'</span><span class="s">chat</span><span class="sh">'</span><span class="s"> | </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'</span><span class="s">
    structured가 True면 strict 플래그를 주입한다.
    </span><span class="sh">"""</span>
    <span class="n">base</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># Chat 스타일: "function" 블록 안에 strict
</span>        <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span> <span class="ow">and</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">t</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="c1"># Responses 스타일: 최상위에 strict
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">[</span><span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="n">tools</span>
</code></pre></div></div>

<p>run_chat 내부에서 툴 선택 부분 교체</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기존
# tools = CHAT_STYLE_TOOLS if tools_variant == "chat" else RESPONSES_STYLE_TOOLS
# 변경
</span><span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
</code></pre></div></div>

<p>run_responses 내부에서도 동일하게 교체</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기존
# tools = RESPONSES_STYLE_TOOLS if tools_variant == "responses" else CHAT_STYLE_TOOLS
# 변경
</span><span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
</code></pre></div></div>

<p>추가 참고</p>

<ul>
  <li>
    <p>이 변경으로 Completions(structured) 뿐만 아니라 Responses(structured)에서도 일관되게 엄격 파싱이 보장돼.</p>
  </li>
  <li>
    <p>plain 모드에선 strict가 없어도 되지만, 위 헬퍼는 structured일 때만 strict를 주입하므로 기존 동작을 해치지 않아.</p>
  </li>
  <li>
    <p>tools JSON을 동적으로 주입하므로, 새 함수만 추가하고 두 곳 호출부만 바꾸면 끝나.</p>
  </li>
</ul>

<p>이렇게 수정하면 “ValueError list_files_in_folder is not strict. Only <code class="language-plaintext highlighter-rouge">strict</code> function tools can be auto-parsed.” 에러는 사라지고 16개 조합 모두 정상적으로 순회할 수 있어.</p>

<p class="chat--user">

그래도 계속 에러가 나네. 일단 넘어가고 json scheme을 지정하는 방식은 동작을 잘 안하네 일반 json 모드를 켜보고 싶어. 총 3가지 sweep(no structured, json_mode, structured)로 실험해보자. 예시 responses 
<code class="language-plaintext highlighter-rouge">
we_did_not_specify_stop_tokens = True

try:
    response = client.responses.create(
        model="gpt-3.5-turbo-0125",
        input=[
            {"role": "system", "content": "You are a helpful assistant designed to output JSON."},
            {"role": "user", "content": "Who won the world series in 2020? Please respond in the format {winner: ...}"}
        ],
        text={"format": {"type": "json_object"}}
    )

    # Check if the conversation was too long for the context window, resulting in incomplete JSON 
    if response.status == "incomplete" and response.incomplete_details.reason == "max_output_tokens":
        # your code should handle this error case
        pass

    # Check if the OpenAI safety system refused the request and generated a refusal instead
    if response.output[0].content[0].type == "refusal":
        # your code should handle this error case
        # In this case, the .content field will contain the explanation (if any) that the model generated for why it is refusing
        print(response.output[0].content[0]["refusal"])

    # Check if the model's output included restricted content, so the generation of JSON was halted and may be partial
    if response.status == "incomplete" and response.incomplete_details.reason == "content_filter":
        # your code should handle this error case
        pass

    if response.status == "completed":
        # In this case the model has either successfully finished generating the JSON object according to your schema, or the model generated one of the tokens you provided as a "stop token"

        if we_did_not_specify_stop_tokens:
            # If you didn't specify any stop tokens, then the generation is complete and the content key will contain the serialized JSON object
            # This will parse successfully and should now contain  "{"winner": "Los Angeles Dodgers"}"
            print(response.output_text)
        else:
            # Check if the response.output_text ends with one of your stop tokens and handle appropriately
            pass
except Exception as e:
    # Your code should handle errors here, for example a network error calling the API
    print(e)
</code>

completions 
<code class="language-plaintext highlighter-rouge">
response = client.chat.completions.create(
  model="gpt-4-1106-preview",
  messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "LangChain은 무엇을 하는 라이브러리지? JSON으로 답해줘. JSON 키워드는 Description, Features, Usage로 해줘."}
  ],
  response_format = {'type':"json_object"}
)
</code>

</p>

<p>좋아. strict 기반의 JSON Schema 파싱은 접고, 세 모드로 스윕하도록 전체 스크립트를 업데이트했어.</p>

<p>스윕 축: 2모델 × 2 API(completions/responses) × 2 Tools JSON(chat-style/responses-style) × 3 모드(plain, json_mode, structured) = 총 24조합.</p>

<p>핵심</p>

<ul>
  <li>
    <p>plain: 자유 출력. 전체 입력/출력 원본 JSON을 저장.</p>
  </li>
  <li>
    <p>json_mode: 모델에게 “무조건 JSON”을 요구. 출력은 {"filename","contents"} 형식. 저장 시 result.json 생성.</p>

    <ul>
      <li>
        <p>Chat Completions: response_format={'type': 'json_object'}</p>
      </li>
      <li>
        <p>Responses: text={"format":{"type":"json_object"}}</p>
      </li>
    </ul>
  </li>
  <li>
    <p>structured: 이전처럼 parse 사용. 여전히 모델/SDK에 따라 strict 요구로 실패할 수도 있으니 try/except로 격리. 성공 시 result.json 생성.</p>
  </li>
  <li>
    <p>Responses API는 툴 호출이 나오면 여러 번 호출되며 매 스텝 콘솔 출력. 콘솔은 색상으로 입력(CYAN), 툴 요청(YELLOW), 출력(GREEN) 구분.</p>
  </li>
  <li>
    <p>모든 조합은 runs/타임스탬프/모델_API_tools_mode/ 폴더에 input.json, outputs.json 저장. json_mode/structured는 result.json 추가 저장.</p>
  </li>
  <li>
    <p>에러는 조합별로만 출력하고 나머지 계속 진행.</p>
  </li>
</ul>

<p>코드: test_24combos.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_24combos.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">copy</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># ===== ANSI colors =====
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># input
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># tool
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># output
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># error
</span>
<span class="c1"># ===== Model configs =====
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># ===== Local tools =====
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># ===== Tools JSON (two shapes) =====
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># ===== Structured JSON schema (optional) =====
</span><span class="k">class</span> <span class="nc">TaskAnswer</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">filename</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">contents</span><span class="p">:</span> <span class="nb">str</span>

<span class="c1"># ===== Helpers =====
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span> <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">mode</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="c1"># structured에서 strict 문제를 피하기 위해 여기선 strict 주입을 끔
</span>    <span class="c1"># (structured는 parse() 사용 시 여전히 실패할 수 있으므로 try/except로 감싼다)
</span>    <span class="n">base</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>
    <span class="k">return</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>

<span class="c1"># ===== Common parsing for Responses =====
</span><span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="c1"># ===== Chat Completions runner =====
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>  <span class="c1"># "plain" | "json_mode" | "structured"
</span>    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="o">=</span><span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">))</span>

    <span class="n">system_msg</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: List files in ./samples, pick a text file, read it, and return a short 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">When asked to answer in JSON, reply only with an object: {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string}.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_msg</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">,</span> <span class="sh">"</span><span class="s">mode</span><span class="sh">"</span><span class="p">:</span> <span class="n">mode</span><span class="p">}</span>
    <span class="n">outputs_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
                <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

            <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                    <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                    <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                    <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                      <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
                <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                                 <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
                <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

                <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span>
                <span class="p">)</span>
                <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

            <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
            <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR(Chat structured) ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

    <span class="k">elif</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># Force JSON output
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># Try to parse JSON
</span>        <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat json_mode)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">result_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">result_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>  <span class="c1"># plain
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="c1"># Save IO logs
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">outputs_dump</span><span class="p">)</span>

<span class="c1"># ===== Responses runner =====
</span><span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>  <span class="c1"># "plain" | "json_mode" | "structured"
</span>    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="o">=</span><span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">))</span>

    <span class="n">system_inst</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: List files in ./samples, pick a text file, read it, and return a short 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If JSON is requested, reply only with an object: {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string}.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_inst</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">,</span> <span class="sh">"</span><span class="s">mode</span><span class="sh">"</span><span class="p">:</span> <span class="n">mode</span><span class="p">}</span>
    <span class="n">outputs_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

            <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                    <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                        <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                    <span class="p">})</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span>
                <span class="p">)</span>
                <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

            <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))}</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
            <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR(Responses structured) ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

    <span class="k">elif</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">}},</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">}},</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># Try to parse JSON text
</span>        <span class="n">result_text</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">output_text</span> <span class="ow">or</span> <span class="sh">""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">result_text</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">result_text</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses json_mode)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">result_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">result_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>  <span class="c1"># plain
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))})</span>

    <span class="c1"># Save IO logs
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">outputs_dump</span><span class="p">)</span>

<span class="c1"># ===== 24-combo driver =====
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">가능하다면 JSON으로 {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string} 형태로 답해줘.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">label</span> <span class="o">=</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> mode=</span><span class="si">{</span><span class="n">mode</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 24 combos: 2 models × 2 APIs × 2 tool JSONs × 3 modes.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--modes</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">plain</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">mode_list</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">plain</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">modes</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">modes</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">md</span> <span class="ow">in</span> <span class="n">mode_list</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 팁</p>

<ul>
  <li>
    <p>json_mode가 가장 안정적으로 {"filename","contents"}를 뱉어 줄 거야. structured는 SDK/모델의 strict 정책에 따라 여전히 실패할 수 있지만, 스크립트는 개별 조합별로 에러를 삼키고 계속 진행한다.</p>
  </li>
  <li>
    <p>모든 조합의 입력/출력(raw)을 저장해서 리그레션 비교가 가능해. json_mode/structured는 result.json을 따로 저장하므로 바로 사용할 수 있어.</p>
  </li>
  <li>
    <p>필요하면 system 메시지의 지시를 수정해서 contents에 “요약” 대신 “원문 전체”를 넣도록 바꿀 수도 있어.</p>
  </li>
</ul>

<p class="chat--user">

둘 다 json 관련 포매팅은 잘 안먹히네 일단 일반 텍스트 출력만 생각하자. 이제 소프트웨어 아키텍트 디자인 측면에서 한 번 보자. 조합 1. GPT OSS + responses 형식 call + 신규 tool json 형식 조합 2. Qwen + completions 형식 call + 과거 tool json 형식 이거야. 그런데 나는 사용자가 일종의 콤보 박스로 GPT OSS를 쓸 것인지, Qwen을 쓸 것인지 선택하고 나머지는 그 때 그 때 잘 동작하게 하고 싶어. 뭔가 디자인 패턴적인 것을 써서 깔끔하게 이를 구현하는 방법이 있을까? function call tool도 어떤 식으로 구현하면 좋을까 파이썬 고수의 입장에서 이런 점을 고려해서 깔끔한 코드 만들어줘.

</p>

<p>좋아. 요구 조합과 사용성(콤보박스로 엔진 선택)까지 고려해서 “전략(Strategy) + 툴 스키마 빌더(Factory) + 레지스트리 + 어댑터” 조합으로 깔끔하게 설계한 파이썬 예시를 줄게.</p>

<p>핵심 아이디어 요약(간결):</p>

<ol>
  <li>Strategy 패턴: 서로 다른 호출 방식 차이를 캡슐화</li>
</ol>

<ul>
  <li>
    <p>ResponsesStrategy(GPT OSS, responses 호출, “신규/평평한” tool JSON)</p>
  </li>
  <li>
    <p>CompletionsStrategy(Qwen, chat.completions 호출, “과거/중첩” tool JSON)</p>
  </li>
</ul>

<ol>
  <li>ToolRegistry + ToolSchemaBuilder(Factory):</li>
</ol>

<ul>
  <li>
    <p>ToolRegistry는 파이썬 함수를 등록/실행</p>
  </li>
  <li>
    <p>ToolSchemaBuilder가 등록된 툴을 각 엔진이 요구하는 JSON 모양으로 변환</p>

    <ul>
      <li>
        <p>NewToolJSONBuilder: responses용 flat JSON</p>
      </li>
      <li>
        <p>OldToolJSONBuilder: completions용 nested JSON</p>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>Output 어댑터(단순화):</li>
</ol>

<ul>
  <li>두 전략은 모두 최종적으로 str을 반환. 내부의 tool_call 파싱 차이는 전략에서 숨김.</li>
</ul>

<ol>
  <li>설정 주입:</li>
</ol>

<ul>
  <li>엔드포인트·API 키·모델명을 config로 주입.</li>
</ul>

<p>바로 실행 가능한 단일 파일 예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># arch_combo_clean.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# Config &amp; DTO
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">RunConfig</span><span class="p">:</span>
    <span class="n">engine</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># "gpt-oss" | "qwen"
</span>    <span class="n">task</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">samples_dir</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span>

<span class="c1"># =========================
# Tool layer
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ToolSpec</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># JSON schema for parameters
</span>    <span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># executes with parsed args
</span>
<span class="k">class</span> <span class="nc">ToolRegistry</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ToolSpec</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">spec</span><span class="p">:</span> <span class="n">ToolSpec</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">spec</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Tool already registered: </span><span class="si">{</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">spec</span>

    <span class="k">def</span> <span class="nf">specs</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">func</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="c1"># =========================
# Tool JSON schema builders (Factory)
# =========================
</span>
<span class="k">class</span> <span class="nc">ToolJSONBuilder</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">NewToolJSONBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Responses API에서 자주 보이는 </span><span class="sh">'</span><span class="s">평평한(flat)</span><span class="sh">'</span><span class="s"> 툴 정의
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">tools</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">tools</span>

<span class="k">class</span> <span class="nc">OldToolJSONBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Chat Completions API에서 자주 보이는 </span><span class="sh">'</span><span class="s">중첩(nested)</span><span class="sh">'</span><span class="s"> 툴 정의
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">:{ </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} } }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">tools</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">tools</span>

<span class="c1"># =========================
# Strategy layer
# =========================
</span>
<span class="k">class</span> <span class="nc">EngineStrategy</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span> <span class="n">builder</span><span class="p">:</span> <span class="n">ToolJSONBuilder</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span> <span class="o">=</span> <span class="n">builder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="c1"># ---- GPT OSS + Responses Strategy ----
</span>
<span class="k">class</span> <span class="nc">ResponsesStrategy</span><span class="p">(</span><span class="n">EngineStrategy</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    - responses.create 사용
    - 툴 정의: NewToolJSONBuilder(flat)
    - function_call → 로컬 툴 실행 → function_call_output를 input에 append → 다시 responses.create
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
        <span class="p">]</span>
        <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>

        <span class="c1"># 첫 호출
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="c1"># 누적 텍스트와 루프
</span>        <span class="n">final_text_chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="c1"># 출력 텍스트 수집
</span>            <span class="n">final_text_chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_collect_text</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>

            <span class="c1"># 툴 호출 수집
</span>            <span class="n">calls</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_collect_function_calls</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="c1"># 툴 실행 → function_call_output 추가
</span>            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">]</span>
                <span class="n">args</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="c1"># 다음 턴
</span>            <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span>
            <span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text_chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="c1"># Helpers
</span>    <span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span><span class="p">})</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                        <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                            <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                                      <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                                      <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">calls</span>

<span class="c1"># ---- Qwen + Chat Completions Strategy ----
</span>
<span class="k">class</span> <span class="nc">CompletionsStrategy</span><span class="p">(</span><span class="n">EngineStrategy</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    - chat.completions.create 사용
    - 툴 정의: OldToolJSONBuilder(nested)
    - assistant.tool_calls → 로컬 툴 실행 → tool 메시지 첨부 → 다시 completions
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>
        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
        <span class="p">]</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">final_text_chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
            <span class="p">})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
            <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                <span class="n">final_text_chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text_chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="c1"># =========================
# Tool implementations
# =========================
</span>
<span class="k">def</span> <span class="nf">list_files_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_text_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">build_registry</span><span class="p">(</span><span class="n">samples_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ToolRegistry</span><span class="p">:</span>
    <span class="n">reg</span> <span class="o">=</span> <span class="nc">ToolRegistry</span><span class="p">()</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">list_files_tool</span>
    <span class="p">))</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">read_text_tool</span>
    <span class="p">))</span>
    <span class="k">return</span> <span class="n">reg</span>

<span class="c1"># =========================
# Engine factory / selector
# =========================
</span>
<span class="k">def</span> <span class="nf">make_engine</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">RunConfig</span><span class="p">,</span> <span class="n">model_cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">registry</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">EngineStrategy</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    콤보박스에서 </span><span class="sh">'</span><span class="s">gpt-oss</span><span class="sh">'</span><span class="s"> 또는 </span><span class="sh">'</span><span class="s">qwen</span><span class="sh">'</span><span class="s">을 선택하면,
    내부적으로 알맞은 Strategy + ToolJSONBuilder를 구성해서 반환.
    </span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">cfg</span><span class="p">.</span><span class="n">engine</span> <span class="o">==</span> <span class="sh">"</span><span class="s">gpt-oss</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># Responses + New(flat) tool JSON
</span>        <span class="k">return</span> <span class="nc">ResponsesStrategy</span><span class="p">(</span><span class="n">model_cfg</span><span class="p">,</span> <span class="n">registry</span><span class="p">,</span> <span class="nc">NewToolJSONBuilder</span><span class="p">())</span>
    <span class="k">elif</span> <span class="n">cfg</span><span class="p">.</span><span class="n">engine</span> <span class="o">==</span> <span class="sh">"</span><span class="s">qwen</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># Completions + Old(nested) tool JSON
</span>        <span class="k">return</span> <span class="nc">CompletionsStrategy</span><span class="p">(</span><span class="n">model_cfg</span><span class="p">,</span> <span class="n">registry</span><span class="p">,</span> <span class="nc">OldToolJSONBuilder</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">Unknown engine. Choose </span><span class="sh">'</span><span class="s">gpt-oss</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">qwen</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># =========================
# Example main
# =========================
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># 실제에 맞게 환경 변수로 분리
</span>    <span class="n">gpt_oss</span> <span class="o">=</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_OSS_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_OSS_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_OSS_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_GPT_OSS</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="n">qwen</span> <span class="o">=</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">qwen2.5</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_QWEN</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

    <span class="c1"># 콤보박스 선택을 CLI로 가정 (실서비스라면 UI에서 이 값만 바꿔 주입)
</span>    <span class="kn">import</span> <span class="n">argparse</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--engine</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">gpt-oss</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">qwen</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-oss</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">samples 디렉토리 내 파일을 보여주고 하나를 읽어 2~3문장 요약해줘. 필요하면 툴 사용.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># 모델 선택: UI에서 엔진을 바꾸면 이 매핑도 바꿔치기
</span>    <span class="n">model_cfg</span> <span class="o">=</span> <span class="n">gpt_oss</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">engine</span> <span class="o">==</span> <span class="sh">"</span><span class="s">gpt-oss</span><span class="sh">"</span> <span class="k">else</span> <span class="n">qwen</span>
    <span class="n">run_cfg</span> <span class="o">=</span> <span class="nc">RunConfig</span><span class="p">(</span><span class="n">engine</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">engine</span><span class="p">,</span> <span class="n">task</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">samples_dir</span><span class="o">=</span><span class="n">args</span><span class="p">.</span><span class="n">samples</span><span class="p">)</span>

    <span class="c1"># 레지스트리 구성(필요시 엔진별 추가/삭제도 가능)
</span>    <span class="n">registry</span> <span class="o">=</span> <span class="nf">build_registry</span><span class="p">(</span><span class="n">run_cfg</span><span class="p">.</span><span class="n">samples_dir</span><span class="p">)</span>

    <span class="c1"># 전략 생성
</span>    <span class="n">engine</span> <span class="o">=</span> <span class="nf">make_engine</span><span class="p">(</span><span class="n">run_cfg</span><span class="p">,</span> <span class="n">model_cfg</span><span class="p">,</span> <span class="n">registry</span><span class="p">)</span>

    <span class="c1"># 실행
</span>    <span class="n">result_text</span> <span class="o">=</span> <span class="n">engine</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">run_cfg</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== FINAL OUTPUT ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">result_text</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="c1"># 샘플 폴더 보장
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>적용 포인트(설계 관점):</p>

<ul>
  <li>
    <p>확장성: 새 엔진이 늘어나도 Strategy만 추가하면 됨. 각 엔진의 호출 차이(Responses vs Completions, tool loop 프로토콜)를 캡슐화했어.</p>
  </li>
  <li>
    <p>책임 분리: ToolRegistry는 등록·실행만, ToolJSONBuilder는 JSON 모양만, Strategy는 대화 루프만 책임.</p>
  </li>
  <li>
    <p>UI 연동: 콤보박스 선택값을 RunConfig.engine으로 주입 → make_engine이 올바른 전략을 리턴.</p>
  </li>
  <li>
    <p>안전성: 루프에 guard로 폭주 방지. arguments는 json.loads로 관대하게 파싱.</p>
  </li>
  <li>
    <p>구성 가능성: 모델명/엔드포인트/키는 ModelConfig로 분리. 환경변수나 설정파일로 치환 용이.</p>
  </li>
</ul>

<p>원한다면</p>

<ul>
  <li>
    <p>로깅 인터페이스를 추가해 단계별(입력/툴요청/출력) 로그를 공통 포맷으로 남기기</p>
  </li>
  <li>
    <p>ToolRegistry에 권한/샌드박스 층(파일 접근 화이트리스트) 추가</p>
  </li>
  <li>
    <p>결과를 항상 {filename, contents} 포맷으로 어댑팅하는 OutputAdapter 추가</p>
  </li>
  <li>
    <p>async 버전(토큰 절약/동시성)을 위한 비동기 전략 추가</p>
  </li>
</ul>

<p>까지도 같은 패턴으로 깔끔하게 확장 가능해.</p>

<p class="chat--user">

조금 더 파이썬과 소프트웨어 아키텍트가 되어서 잘 생각해보자. if gpt-oss가 들어간 거 부터 좀 악취가 나. 추후에 새로운 모델이 들어오고 그 모델은 어떤 조합에서 잘 동작할지 모르잖아? 새로운 모델이 10개쯤 더 추가돼도 잘 관리될 수 있는 구조를 짜주면 좋겠어

</p>

<p>좋아. “모델이 계속 늘어나도 관리 가능한 구조”에 초점을 맞춰 아키텍처를 재정리했어. 핵심은 “조합(Protocol × Tool JSON 형태)”을 모델에서 분리하고, 모델마다 “능력/선호(capabilities &amp; preferences)”만 선언하도록 만드는 거야. 실행 전략은 조합에 따라 자동 선택·실행되며, 실패 시 합리적으로 폴백해.</p>

<p>아래 순서로 설명하고 바로 동작 가능한 예시 코드를 제공할게.</p>

<ol>
  <li>설계 요점</li>
</ol>

<ul>
  <li>
    <p>모델 무관 추상화</p>

    <ul>
      <li>
        <p>ProtocolStrategy: 호출 방식의 차이를 캡슐화. 현재 두 개 구현</p>

        <ul>
          <li>
            <p>ResponsesProtocol (responses.create 루프)</p>
          </li>
          <li>
            <p>CompletionsProtocol (chat.completions.create 루프)</p>
          </li>
        </ul>
      </li>
      <li>
        <p>ToolSchemaBuilder: Tool JSON 모양을 캡슐화. 두 개 구현</p>

        <ul>
          <li>
            <p>FlatStyle (responses에서 흔한 평평한 스키마)</p>
          </li>
          <li>
            <p>NestedStyle (completions에서 흔한 function 중첩)</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p>조합(Plan) 단위 실행</p>

    <ul>
      <li>
        <p>Plan(protocol=…, tool_schema=…)</p>
      </li>
      <li>
        <p>Orchestrator가 ModelProfile의 preference에 따라 Plan을 선택하고 실행. 실패 시 fallback Plans 순서대로 시도</p>
      </li>
    </ul>
  </li>
  <li>
    <p>ModelProfile은 “모델명/엔드포인트/키” + “capabilities &amp; preferences”만 정의</p>

    <ul>
      <li>
        <p>새 모델 추가 = ModelProfile 하나 등록</p>
      </li>
      <li>
        <p>모델이 어느 조합에서 잘 동작하는지 모르면, preferences는 비워 두고 Orchestrator가 표준 우선순위(Responses+Flat → Completions+Nested)를 적용</p>
      </li>
    </ul>
  </li>
  <li>
    <p>ToolRegistry로 툴 구현/등록을 분리</p>

    <ul>
      <li>툴 함수 추가/변경이 모델/프로토콜 코드에 전혀 영향 없도록</li>
    </ul>
  </li>
</ul>

<ol>
  <li>실제 동작 흐름</li>
</ol>

<ul>
  <li>
    <p>UI 콤보박스에서 “모델 키”만 선택 → Orchestrator.run(model_key, task)</p>
  </li>
  <li>
    <p>Orchestrator는 ModelCatalog에서 프로필 조회 → Plan 결정 → 해당 Strategy와 ToolSchemaBuilder를 결합해 실행</p>
  </li>
  <li>
    <p>responses 프로토콜은 function_call_output 루프, completions 프로토콜은 tool 메시지 루프 수행</p>
  </li>
  <li>
    <p>최종 결과는 일반 텍스트(plain)로 통일</p>
  </li>
</ul>

<ol>
  <li>코드<br />
아래 파일 하나로 실행 가능. samples 폴더에 텍스트 파일 몇 개 두고 돌려봐.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># arch_flexible_orchestrator.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# Basic Configs &amp; DTOs
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelCapabilities</span><span class="p">:</span>
    <span class="c1"># 가능한 프로토콜
</span>    <span class="n">supports_responses</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">supports_completions</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="c1"># 선호/권장 조합(Plan)을 우선 시도. 비워두면 기본 우선순위가 적용됨
</span>    <span class="n">preferred_plans</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>  <span class="c1"># e.g. [("responses","flat"), ("completions","nested")]
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelProfile</span><span class="p">:</span>
    <span class="n">key</span><span class="p">:</span> <span class="nb">str</span>                <span class="c1"># UI 콤보박스용 ID
</span>    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span>
    <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span>

<span class="c1"># =========================
# Tool Layer
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ToolSpec</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># JSON schema
</span>    <span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">Any</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">ToolRegistry</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ToolSpec</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">spec</span><span class="p">:</span> <span class="n">ToolSpec</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">spec</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Tool already registered: </span><span class="si">{</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">spec</span>

    <span class="k">def</span> <span class="nf">specs</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">func</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="c1"># 기본 툴 2개
</span><span class="k">def</span> <span class="nf">list_files_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_text_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">build_default_registry</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ToolRegistry</span><span class="p">:</span>
    <span class="n">reg</span> <span class="o">=</span> <span class="nc">ToolRegistry</span><span class="p">()</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">list_files_tool</span>
    <span class="p">))</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">read_text_tool</span>
    <span class="p">))</span>
    <span class="k">return</span> <span class="n">reg</span>

<span class="c1"># =========================
# Tool JSON Schema Builders
# =========================
</span>
<span class="k">class</span> <span class="nc">ToolJSONBuilder</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">FlatStyleBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Responses에서 자주 쓰는 평평한 툴 형식:
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">NestedStyleBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Completions에서 자주 쓰는 중첩 툴 형식:
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">:{ </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} } }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="c1"># =========================
# Protocol Strategies
# =========================
</span>
<span class="k">class</span> <span class="nc">ProtocolStrategy</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span> <span class="n">builder</span><span class="p">:</span> <span class="n">ToolJSONBuilder</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span> <span class="o">=</span> <span class="n">builder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="c1"># Responses 프로토콜
</span><span class="k">class</span> <span class="nc">ResponsesProtocol</span><span class="p">(</span><span class="n">ProtocolStrategy</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">input_list</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
        <span class="p">]</span>
        <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>

        <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>

        <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_collect_text</span><span class="p">(</span><span class="n">r</span><span class="p">))</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span>
            <span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">def</span> <span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                              <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span><span class="p">})</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                        <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                            <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                                      <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                                      <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">calls</span>

<span class="c1"># Completions 프로토콜
</span><span class="k">class</span> <span class="nc">CompletionsProtocol</span><span class="p">(</span><span class="n">ProtocolStrategy</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>
        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
        <span class="p">]</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">]</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
            <span class="p">})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
            <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

        <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="c1"># =========================
# Planning (조합 결정)
# =========================
</span>
<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Plan</span><span class="p">:</span>
    <span class="n">protocol</span><span class="p">:</span> <span class="nb">str</span>         <span class="c1"># "responses" | "completions"
</span>    <span class="n">tool_schema</span><span class="p">:</span> <span class="nb">str</span>      <span class="c1"># "flat" | "nested"
</span>
<span class="k">class</span> <span class="nc">Orchestrator</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">profiles</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelProfile</span><span class="p">],</span> <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">profiles</span> <span class="o">=</span> <span class="n">profiles</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">model_key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">profiles</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown model key: </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">profile</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">profiles</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>

        <span class="n">plans</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_candidate_plans</span><span class="p">(</span><span class="n">profile</span><span class="p">.</span><span class="n">caps</span><span class="p">)</span>
        <span class="n">last_error</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">Exception</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">plan</span> <span class="ow">in</span> <span class="n">plans</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">strategy</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_strategy</span><span class="p">(</span><span class="n">profile</span><span class="p">.</span><span class="n">cfg</span><span class="p">,</span> <span class="n">plan</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">strategy</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">last_error</span> <span class="o">=</span> <span class="n">e</span>
                <span class="c1"># 다음 플랜으로 시도
</span>                <span class="k">continue</span>
        <span class="k">if</span> <span class="n">last_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">last_error</span>
        <span class="k">return</span> <span class="sh">""</span>

    <span class="k">def</span> <span class="nf">_candidate_plans</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Plan</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Plan</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># 1) 명시된 선호 플랜 우선
</span>        <span class="k">for</span> <span class="n">proto</span><span class="p">,</span> <span class="n">schema</span> <span class="ow">in</span> <span class="n">caps</span><span class="p">.</span><span class="n">preferred_plans</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_supported</span><span class="p">(</span><span class="n">proto</span><span class="p">,</span> <span class="n">caps</span><span class="p">):</span>
                <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Plan</span><span class="p">(</span><span class="n">proto</span><span class="p">,</span> <span class="n">schema</span><span class="p">))</span>
        <span class="c1"># 2) 기본 폴백 순서
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">),</span>   <span class="c1"># 혹시 특정 모델이 nested를 요구한다면
</span>            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">),</span>
        <span class="p">]</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">defaults</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_supported</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">protocol</span><span class="p">,</span> <span class="n">caps</span><span class="p">)</span> <span class="ow">and</span> <span class="n">p</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
                <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">_supported</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">proto</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">proto</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">caps</span><span class="p">.</span><span class="n">supports_responses</span><span class="p">)</span> <span class="ow">or</span> \
               <span class="p">(</span><span class="n">proto</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">caps</span><span class="p">.</span><span class="n">supports_completions</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_make_strategy</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">plan</span><span class="p">:</span> <span class="n">Plan</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">ProtocolStrategy</span><span class="p">:</span>
        <span class="n">builder</span><span class="p">:</span> <span class="n">ToolJSONBuilder</span> <span class="o">=</span> <span class="nc">FlatStyleBuilder</span><span class="p">()</span> <span class="k">if</span> <span class="n">plan</span><span class="p">.</span><span class="n">tool_schema</span> <span class="o">==</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span> <span class="k">else</span> <span class="nc">NestedStyleBuilder</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">plan</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">ResponsesProtocol</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span> <span class="n">builder</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">plan</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">CompletionsProtocol</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span> <span class="n">builder</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown protocol: </span><span class="si">{</span><span class="n">plan</span><span class="p">.</span><span class="n">protocol</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># =========================
# Model Catalog (등록/확장 지점)
# =========================
</span>
<span class="k">def</span> <span class="nf">build_catalog</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelProfile</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    새 모델을 추가하려면 아래 dict에 항목 1줄만 더 넣으면 됨.
    - 모델 키(key): UI 콤보박스에서 쓰는 식별자
    - name/base_url/api_key: 환경변수로 주입(다른 벤더 SDK여도 OpenAI 호환이면 그대로 가능)
    - 캡능/선호(preferred_plans): 조합을 몰라도 비워두면 기본 순서대로 자동 시도
    </span><span class="sh">"""</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="c1"># 예시1: GPT-계열(Responses 선호)
</span>        <span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">)]</span>  <span class="c1"># 먼저 responses+flat 시도
</span>            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># 예시2: Qwen-계열(Completions 선호)
</span>        <span class="sh">"</span><span class="s">qwen_like</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">qwen_like</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">qwen2.5</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">)]</span>  <span class="c1"># 먼저 completions+nested 시도
</span>            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># 예시3: Responses만 되는 모델
</span>        <span class="sh">"</span><span class="s">resp_only</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">resp_only</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">some-resp-model</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># 예시4: Completions만 되는 모델
</span>        <span class="sh">"</span><span class="s">chat_only</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_only</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">some-chat-model</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
    <span class="p">}</span>

<span class="c1"># =========================
# Example main (UI 콤보박스 대체)
# =========================
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">argparse</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Flexible model orchestrator (plain text, tools).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model-key</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Model key from catalog (e.g., gpt_like, qwen_like, resp_only, chat_only)</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">samples 폴더 파일 목록을 보여주고, 텍스트 파일을 하나 읽어 2~3문장으로 요약해줘. 필요하면 툴 사용.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># 준비
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">registry</span> <span class="o">=</span> <span class="nf">build_default_registry</span><span class="p">()</span>
    <span class="n">catalog</span> <span class="o">=</span> <span class="nf">build_catalog</span><span class="p">()</span>
    <span class="n">orch</span> <span class="o">=</span> <span class="nc">Orchestrator</span><span class="p">(</span><span class="n">catalog</span><span class="p">,</span> <span class="n">registry</span><span class="p">)</span>

    <span class="c1"># 실행
</span>    <span class="n">out</span> <span class="o">=</span> <span class="n">orch</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">model_key</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== FINAL OUTPUT ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<ol>
  <li>이 설계가 확장에 유리한 이유</li>
</ol>

<ul>
  <li>
    <p>새 모델 추가 시 변경 범위가 매우 작음</p>

    <ul>
      <li>
        <p>ModelCatalog에 ModelProfile 1줄 추가(이름/엔드포인트/키, 캡능/선호)</p>
      </li>
      <li>
        <p>조합을 몰라도 OK: preferred_plans 비우면 Orchestrator가 표준 우선순위로 자동 시도</p>
      </li>
    </ul>
  </li>
  <li>
    <p>조합 폭발에도 견고</p>

    <ul>
      <li>
        <p>Plan을 독립 타입으로 관리해서 Protocol × ToolSchema를 명시적으로 표기</p>
      </li>
      <li>
        <p>실패 시 다음 Plan으로 폴백하는 일관된 로직</p>
      </li>
    </ul>
  </li>
  <li>
    <p>관심사 분리</p>

    <ul>
      <li>
        <p>ToolRegistry/ToolSpec: 툴 구현과 파라미터 스키마만 관리</p>
      </li>
      <li>
        <p>ToolJSONBuilder: JSON 모양만 담당(Flat/Nested 추가 쉬움)</p>
      </li>
      <li>
        <p>ProtocolStrategy: 호출/루프/파싱 차이만 담당</p>
      </li>
      <li>
        <p>Orchestrator: 모델 선택과 플랜 선정/폴백만 담당</p>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>커스터마이징 힌트</li>
</ol>

<ul>
  <li>
    <p>모델별 “도구 정책”이 다르면 ModelProfile에 tool_policy 콜백을 추가해 특정 툴만 노출 가능</p>
  </li>
  <li>
    <p>로깅/메트릭스: ProtocolStrategy.run 내부에서 콜 카운트/지연/토큰 사용량(응답 필드에 있으면) 수집 후 공통 인터페이스로 리턴</p>
  </li>
  <li>
    <p>안전 모드: 파일 접근 화이트리스트(예: samples 하위만 허용)를 ToolRegistry.call에 주입</p>
  </li>
  <li>
    <p>후일 JSON 모드/Structured가 안정화되면 Plan에 “output_format” 축을 추가해 전략적으로 선택 가능</p>
  </li>
</ul>

<p>필요하면 이 구조로 테스트 하네스(여러 모델×플랜을 한 번에 돌려 결과 비교)도 바로 얹어줄게.</p>

<p class="chat--user">

추가 요청 사항 1. Async 통신만 사용해줘. 
<code class="language-plaintext highlighter-rouge">
async with AsyncOpenAI(
    ..., http_clinet=httpx.AsyncClient(event_hooks=hooks) as client:
    client....
</code>

2. 유저가 인터럽트하면 중지가 되어야 해. 예를 들어 주기적으로 user.processing_interrupted() 함수를 호출해서 취소 여부를 확인하고 그에 따라 client도 깔끔하게 취소가 되어야 해. 3. 주석은 영문으로 써줘. 4. 모든 코드를 써줘.

</p>

<p>아래는 확장성에 초점을 둔 비동기(Async) 오케스트레이션 샘플이야.<br />
설계 포인트 요약</p>

<ul>
  <li>
    <p>모델 수가 늘어나도 변경 최소화: 새 모델은 ModelProfile만 추가하면 됨.</p>
  </li>
  <li>
    <p>조합(Protocol × Tool-JSON-Style)을 모델과 분리: Orchestrator가 Plan을 자동 선택·폴백.</p>
  </li>
  <li>
    <p>순수 비동기 통신만 사용: AsyncOpenAI + httpx.AsyncClient.</p>
  </li>
  <li>
    <p>사용자 인터럽트 지원: user.processing_interrupted()를 주기적으로 확인하고, 진행 중 요청은 asyncio Task 취소로 깔끔히 중단.</p>
  </li>
</ul>

<p>코드는 한 파일로 동작하며 일반 텍스트 출력만을 반환한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># async_arch_orchestrator.py
# Python 3.10+
# pip install --upgrade openai httpx
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">signal</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span><span class="p">,</span> <span class="n">field</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Protocol</span><span class="p">,</span> <span class="n">Tuple</span>
<span class="kn">from</span> <span class="n">abc</span> <span class="kn">import</span> <span class="n">ABC</span><span class="p">,</span> <span class="n">abstractmethod</span>

<span class="kn">import</span> <span class="n">httpx</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="c1"># ============================================================
# Exceptions / Interrupt
# ============================================================
</span>
<span class="k">class</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Raised when the user has interrupted the processing.</span><span class="sh">"""</span>

<span class="k">class</span> <span class="nc">UserInterruptController</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    A simple interrupt controller.
    - Call `trigger()` to mark as interrupted (e.g., SIGINT handler).
    - Frameworks/UI can override processing_interrupted() to integrate with their own state.
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">processing_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Return True if the user has requested cancellation.</span><span class="sh">"""</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_event</span><span class="p">.</span><span class="nf">is_set</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">trigger</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">Externally trigger an interrupt (e.g., from a signal handler or UI callback).</span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_event</span><span class="p">.</span><span class="nf">set</span><span class="p">()</span>

<span class="c1"># ============================================================
# Configs &amp; Profiles
# ============================================================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelCapabilities</span><span class="p">:</span>
    <span class="c1"># Supported protocols
</span>    <span class="n">supports_responses</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">supports_completions</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="c1"># Preferred plans, empty ⇒ Orchestrator applies default order.
</span>    <span class="n">preferred_plans</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="nf">field</span><span class="p">(</span><span class="n">default_factory</span><span class="o">=</span><span class="nb">list</span><span class="p">)</span>  <span class="c1"># e.g. [("responses", "flat"), ("completions", "nested")]
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelProfile</span><span class="p">:</span>
    <span class="n">key</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span>
    <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span>

<span class="c1"># ============================================================
# Tool Layer
# ============================================================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ToolSpec</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">parameters</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># JSON schema object
</span>    <span class="n">func</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]],</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># Sync function (fast local I/O)
</span>
<span class="k">class</span> <span class="nc">ToolRegistry</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Keeps tool specs and executes them by name.</span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ToolSpec</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">register</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">spec</span><span class="p">:</span> <span class="n">ToolSpec</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">spec</span><span class="p">.</span><span class="n">name</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Tool already registered: </span><span class="si">{</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">spec</span><span class="p">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="n">spec</span>

    <span class="k">def</span> <span class="nf">specs</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">]:</span>
        <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

    <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Any</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_tools</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">func</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>

<span class="c1"># Default file tools
</span>
<span class="k">def</span> <span class="nf">list_files_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_text_tool</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()}</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">build_default_registry</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">ToolRegistry</span><span class="p">:</span>
    <span class="n">reg</span> <span class="o">=</span> <span class="nc">ToolRegistry</span><span class="p">()</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">list_files_tool</span>
    <span class="p">))</span>
    <span class="n">reg</span><span class="p">.</span><span class="nf">register</span><span class="p">(</span><span class="nc">ToolSpec</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">parameters</span><span class="o">=</span><span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
        <span class="p">},</span>
        <span class="n">func</span><span class="o">=</span><span class="n">read_text_tool</span>
    <span class="p">))</span>
    <span class="k">return</span> <span class="n">reg</span>

<span class="c1"># ============================================================
# Tool JSON builders (Factory)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">ToolJSONBuilder</span><span class="p">(</span><span class="n">Protocol</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">FlatStyleBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    </span><span class="sh">"</span><span class="s">New</span><span class="sh">"</span><span class="s"> / flat tool JSON (often used with Responses-style examples):
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="k">class</span> <span class="nc">NestedStyleBuilder</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    </span><span class="sh">"</span><span class="s">Old</span><span class="sh">"</span><span class="s"> / nested tool JSON (common in Chat Completions examples):
    { </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">:{ </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">:..., </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">:{...} } }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">specs</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">ToolSpec</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">specs</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">description</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">parameters</span><span class="p">,</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="c1"># ============================================================
# Async helpers (HTTP client, cancellation wrapper)
# ============================================================
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">call_with_interrupt</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">interrupt_cb</span><span class="p">,</span> <span class="n">poll_interval</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Run an awaitable while periodically checking for user interruption.
    If interrupted, cancel the task and raise UserCancelledError.
    </span><span class="sh">"""</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">task</span><span class="p">},</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">task</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>
            <span class="c1"># Periodically check interrupt
</span>            <span class="k">if</span> <span class="k">await</span> <span class="nf">interrupt_cb</span><span class="p">():</span>
                <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">task</span>
                <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
                    <span class="k">pass</span>
                <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">raise</span>

<span class="k">def</span> <span class="nf">build_httpx_hooks</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">List</span><span class="p">[</span><span class="n">Callable</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Create httpx AsyncClient event hooks.
    You can add logging or tracing here if desired.
    </span><span class="sh">"""</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">on_request</span><span class="p">(</span><span class="n">request</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Request</span><span class="p">):</span>
        <span class="c1"># Example: print(f"[httpx] -&gt; {request.method} {request.url}")
</span>        <span class="k">return</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">on_response</span><span class="p">(</span><span class="n">response</span><span class="p">:</span> <span class="n">httpx</span><span class="p">.</span><span class="n">Response</span><span class="p">):</span>
        <span class="c1"># Example: print(f"[httpx] &lt;- {response.status_code} {response.request.url}")
</span>        <span class="k">return</span>

    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">request</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">on_request</span><span class="p">],</span> <span class="sh">"</span><span class="s">response</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">on_response</span><span class="p">]}</span>

<span class="c1"># ============================================================
# Protocol Strategies (Async)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">ProtocolStrategy</span><span class="p">(</span><span class="n">ABC</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Base class for protocol strategies.
    Each strategy must:
      - Use AsyncOpenAI only
      - Respect user interruption at reasonable checkpoints
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">model</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
        <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span>
        <span class="n">builder</span><span class="p">:</span> <span class="n">ToolJSONBuilder</span><span class="p">,</span>
        <span class="n">interrupt</span><span class="p">:</span> <span class="n">UserInterruptController</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">builder</span> <span class="o">=</span> <span class="n">builder</span>
        <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span> <span class="o">=</span> <span class="n">interrupt</span>

    <span class="nd">@abstractmethod</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="bp">...</span>

<span class="k">class</span> <span class="nc">ResponsesProtocol</span><span class="p">(</span><span class="n">ProtocolStrategy</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Async implementation of a Responses-style loop:
      - responses.create
      - process output_text
      - if tool calls exist: execute local tool(s), append function_call_output, repeat
    </span><span class="sh">"""</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
            <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="nd">@staticmethod</span>
    <span class="k">def</span> <span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">resp</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
            <span class="n">t</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                    <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
                <span class="p">})</span>
            <span class="k">if</span> <span class="n">t</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                        <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                            <span class="k">try</span><span class="p">:</span>
                                <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                                <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                            <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
                        <span class="p">})</span>
        <span class="k">return</span> <span class="n">calls</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">hooks</span> <span class="o">=</span> <span class="nf">build_httpx_hooks</span><span class="p">()</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="n">httpx</span><span class="p">.</span><span class="nc">Timeout</span><span class="p">(</span><span class="mf">60.0</span><span class="p">),</span> <span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">)</span> <span class="k">as</span> <span class="n">http_client</span><span class="p">:</span>
            <span class="k">async</span> <span class="k">with</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">api_key</span><span class="p">,</span> <span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
                <span class="n">input_list</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
                <span class="p">]</span>
                <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>

                <span class="c1"># First call
</span>                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>
                <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                    <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                        <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                        <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
                        <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
                    <span class="p">),</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                <span class="p">)</span>

                <span class="c1"># Loop
</span>                <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                    <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_collect_text</span><span class="p">(</span><span class="n">resp</span><span class="p">))</span>

                    <span class="n">calls</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_collect_tool_calls</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
                    <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                        <span class="k">break</span>

                    <span class="c1"># Execute tools locally and append outputs
</span>                    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                        <span class="c1"># Check for interruption between tool calls as well
</span>                        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>

                        <span class="n">name</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">]</span>
                        <span class="n">args</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span>
                        <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
                        <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                            <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                        <span class="p">})</span>

                    <span class="c1"># Next turn
</span>                    <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>
                    <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                        <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                            <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
                        <span class="p">),</span>
                        <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                    <span class="p">)</span>

                <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_guard_interrupt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">CompletionsProtocol</span><span class="p">(</span><span class="n">ProtocolStrategy</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Async implementation of a Chat Completions-style loop:
      - chat.completions.create
      - assistant.tool_calls → execute tools → append tool messages → repeat
    </span><span class="sh">"""</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">hooks</span> <span class="o">=</span> <span class="nf">build_httpx_hooks</span><span class="p">()</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">httpx</span><span class="p">.</span><span class="nc">AsyncClient</span><span class="p">(</span><span class="n">timeout</span><span class="o">=</span><span class="n">httpx</span><span class="p">.</span><span class="nc">Timeout</span><span class="p">(</span><span class="mf">60.0</span><span class="p">),</span> <span class="n">event_hooks</span><span class="o">=</span><span class="n">hooks</span><span class="p">)</span> <span class="k">as</span> <span class="n">http_client</span><span class="p">:</span>
            <span class="k">async</span> <span class="k">with</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">api_key</span><span class="p">,</span> <span class="n">http_client</span><span class="o">=</span><span class="n">http_client</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
                <span class="n">tools_json</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">builder</span><span class="p">.</span><span class="nf">build</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">specs</span><span class="p">())</span>
                <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">task</span><span class="p">},</span>
                <span class="p">]</span>

                <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>
                <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                    <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                        <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                        <span class="n">tools</span><span class="o">=</span><span class="n">tools_json</span><span class="p">,</span>
                        <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
                    <span class="p">),</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                <span class="p">)</span>
                <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
                <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">]</span>
                <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>

                <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                    <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>

                    <span class="c1"># Prepare tool messages
</span>                    <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
                    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>

                        <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                        <span class="n">result</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">.</span><span class="nf">call</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                        <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                        <span class="p">})</span>

                    <span class="c1"># Append assistant tool_calls echo + tool outputs
</span>                    <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
                    <span class="p">})</span>
                    <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

                    <span class="c1"># Next turn
</span>                    <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guard_interrupt</span><span class="p">()</span>
                    <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">call_with_interrupt</span><span class="p">(</span>
                        <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                            <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                        <span class="p">),</span>
                        <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="n">processing_interrupted</span>
                    <span class="p">)</span>
                    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
                    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                        <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">)</span>

                <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_guard_interrupt</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nc">UserCancelledError</span><span class="p">(</span><span class="sh">"</span><span class="s">Processing interrupted by user.</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ============================================================
# Planning (Protocol × Tool-JSON combination)
# ============================================================
</span>
<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">Plan</span><span class="p">:</span>
    <span class="n">protocol</span><span class="p">:</span> <span class="nb">str</span>        <span class="c1"># "responses" | "completions"
</span>    <span class="n">tool_schema</span><span class="p">:</span> <span class="nb">str</span>     <span class="c1"># "flat" | "nested"
</span>
<span class="k">class</span> <span class="nc">Orchestrator</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Chooses and executes the best Plan for a given model, with fallback.
    Fully async and interruption-aware.
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">profiles</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelProfile</span><span class="p">],</span> <span class="n">tools</span><span class="p">:</span> <span class="n">ToolRegistry</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">:</span> <span class="n">UserInterruptController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">profiles</span> <span class="o">=</span> <span class="n">profiles</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span> <span class="o">=</span> <span class="n">interrupt</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">model_key</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">profiles</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown model key: </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">profile</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">profiles</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>

        <span class="n">plans</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_candidate_plans</span><span class="p">(</span><span class="n">profile</span><span class="p">.</span><span class="n">caps</span><span class="p">)</span>
        <span class="n">last_error</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">Exception</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">plan</span> <span class="ow">in</span> <span class="n">plans</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">strategy</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_make_strategy</span><span class="p">(</span><span class="n">profile</span><span class="p">.</span><span class="n">cfg</span><span class="p">,</span> <span class="n">plan</span><span class="p">)</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">strategy</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">UserCancelledError</span><span class="p">:</span>
                <span class="c1"># Bubble up immediately on user cancellation
</span>                <span class="k">raise</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">last_error</span> <span class="o">=</span> <span class="n">e</span>
                <span class="c1"># Try next plan on failure
</span>                <span class="k">continue</span>
        <span class="k">if</span> <span class="n">last_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">last_error</span>
        <span class="k">return</span> <span class="sh">""</span>

    <span class="k">def</span> <span class="nf">_candidate_plans</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Plan</span><span class="p">]:</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Plan</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="c1"># 1) Preferred plans first
</span>        <span class="k">for</span> <span class="n">proto</span><span class="p">,</span> <span class="n">schema</span> <span class="ow">in</span> <span class="n">caps</span><span class="p">.</span><span class="n">preferred_plans</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_supported</span><span class="p">(</span><span class="n">proto</span><span class="p">,</span> <span class="n">caps</span><span class="p">):</span>
                <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nc">Plan</span><span class="p">(</span><span class="n">proto</span><span class="p">,</span> <span class="n">schema</span><span class="p">))</span>
        <span class="c1"># 2) Default fallback order
</span>        <span class="n">defaults</span> <span class="o">=</span> <span class="p">[</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">),</span>
            <span class="nc">Plan</span><span class="p">(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">),</span>
        <span class="p">]</span>
        <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">defaults</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_supported</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">protocol</span><span class="p">,</span> <span class="n">caps</span><span class="p">)</span> <span class="ow">and</span> <span class="n">p</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">out</span><span class="p">:</span>
                <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="k">def</span> <span class="nf">_supported</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">proto</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">caps</span><span class="p">:</span> <span class="n">ModelCapabilities</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">proto</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">caps</span><span class="p">.</span><span class="n">supports_responses</span><span class="p">)</span> <span class="ow">or</span> \
               <span class="p">(</span><span class="n">proto</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span> <span class="ow">and</span> <span class="n">caps</span><span class="p">.</span><span class="n">supports_completions</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_make_strategy</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">plan</span><span class="p">:</span> <span class="n">Plan</span><span class="p">):</span>
        <span class="n">builder</span> <span class="o">=</span> <span class="nc">FlatStyleBuilder</span><span class="p">()</span> <span class="k">if</span> <span class="n">plan</span><span class="p">.</span><span class="n">tool_schema</span> <span class="o">==</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span> <span class="k">else</span> <span class="nc">NestedStyleBuilder</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">plan</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">ResponsesProtocol</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span> <span class="n">builder</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">plan</span><span class="p">.</span><span class="n">protocol</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">return</span> <span class="nc">CompletionsProtocol</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span> <span class="n">builder</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">interrupt</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown protocol: </span><span class="si">{</span><span class="n">plan</span><span class="p">.</span><span class="n">protocol</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ============================================================
# Model Catalog (extensible)
# ============================================================
</span>
<span class="k">def</span> <span class="nf">build_catalog</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelProfile</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    To add a new model, just create another ModelProfile entry here.
    If you don</span><span class="sh">'</span><span class="s">t know which combo works best, leave `preferred_plans` empty;
    Orchestrator will try the defaults in a safe order.
    </span><span class="sh">"""</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="c1"># Example: GPT-like model (prefers Responses + flat tools)
</span>        <span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">GPT_LIKE_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># Example: Qwen-like model (prefers Completions + nested tools)
</span>        <span class="sh">"</span><span class="s">qwen_like</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">qwen_like</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">qwen2.5</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">QWEN_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># Example: responses-only vendor
</span>        <span class="sh">"</span><span class="s">resp_only</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">resp_only</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">some-resp-model</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">RESP_ONLY_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">flat</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
        <span class="c1"># Example: completions-only vendor
</span>        <span class="sh">"</span><span class="s">chat_only</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelProfile</span><span class="p">(</span>
            <span class="n">key</span><span class="o">=</span><span class="sh">"</span><span class="s">chat_only</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">cfg</span><span class="o">=</span><span class="nc">ModelConfig</span><span class="p">(</span>
                <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">some-chat-model</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">CHAT_ONLY_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY</span><span class="sh">"</span><span class="p">),</span>
            <span class="p">),</span>
            <span class="n">caps</span><span class="o">=</span><span class="nc">ModelCapabilities</span><span class="p">(</span>
                <span class="n">supports_responses</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                <span class="n">supports_completions</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">preferred_plans</span><span class="o">=</span><span class="p">[(</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">nested</span><span class="sh">"</span><span class="p">)]</span>
            <span class="p">)</span>
        <span class="p">),</span>
    <span class="p">}</span>

<span class="c1"># ============================================================
# Main (async) with signal-based interrupt wiring
# ============================================================
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">amain</span><span class="p">():</span>
    <span class="kn">import</span> <span class="n">argparse</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Async flexible orchestrator (plain text + tool calling).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model-key</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt_like</span><span class="sh">"</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Pick from catalog: gpt_like, qwen_like, resp_only, chat_only</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">List files under ./samples, pick a text file, read it, and return a 2-3 sentence summary. Use tools if needed.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># Build tool registry (you can scope tools per model if required)
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">samples</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">build_default_registry</span><span class="p">()</span>

    <span class="c1"># Build catalog and orchestrator
</span>    <span class="n">catalog</span> <span class="o">=</span> <span class="nf">build_catalog</span><span class="p">()</span>
    <span class="n">interrupt</span> <span class="o">=</span> <span class="nc">UserInterruptController</span><span class="p">()</span>

    <span class="c1"># OS signal → user interrupt (Ctrl+C)
</span>    <span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">loop</span><span class="p">.</span><span class="nf">add_signal_handler</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGINT</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">.</span><span class="n">trigger</span><span class="p">)</span>
        <span class="n">loop</span><span class="p">.</span><span class="nf">add_signal_handler</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">.</span><span class="n">trigger</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">NotImplementedError</span><span class="p">:</span>
        <span class="c1"># add_signal_handler may not be available on some platforms (e.g., Windows in some envs)
</span>        <span class="k">pass</span>

    <span class="n">orch</span> <span class="o">=</span> <span class="nc">Orchestrator</span><span class="p">(</span><span class="n">catalog</span><span class="p">,</span> <span class="n">tools</span><span class="p">,</span> <span class="n">interrupt</span><span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="n">orch</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">model_key</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== FINAL OUTPUT ===</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">UserCancelledError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== INTERRUPTED ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== ERROR ===</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">amain</span><span class="p">())</span>
</code></pre></div></div>

<p>확장 방법</p>

<ul>
  <li>
    <p>새 모델 추가: build_catalog()에 ModelProfile 한 줄만 추가. preferred_plans가 비어도 Orchestrator가 기본 순서대로 시도.</p>
  </li>
  <li>
    <p>툴 추가: ToolRegistry.register(…)만 호출. 파라미터 스키마와 함수 구현을 붙이면 자동으로 모든 전략에서 사용.</p>
  </li>
  <li>
    <p>인터럽트 연동: UI 스레드에서 interrupt.trigger()를 호출하거나, UserInterruptController를 구현해 processing_interrupted()가 True를 반환하도록 만들면 된다.</p>
  </li>
  <li>
    <p>로깅/메트릭/리트라이: call_with_interrupt()나 각 ProtocolStrategy.run() 내부에 쉽게 주입 가능.</p>
  </li>
</ul>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">OpenAI 함수 호출 테스트</title><link href="https://hvppyarchive.github.io/llm/openai-api-examples/" rel="alternate" type="text/html" title="OpenAI 함수 호출 테스트" /><published>2025-10-24T14:08:27+09:00</published><updated>2025-10-24T14:08:27+09:00</updated><id>https://hvppyarchive.github.io/llm/openai-api-examples</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/openai-api-examples/"><![CDATA[<p class="chat--user">

openai package를 사용하는 테스트 코드 작성할거야. 목표: 2가지 모델에 대해 2가지 api type(completions, responses)에 대해 function calling 테스트를 하고 싶어. 총 4개 조합에 대해 설정할 수 있게 코드 작성 하자. 툴은 간단히 특정 폴더의 파일 조회, 특정 폴더의 파일 읽기 두 가지 툴을 구현할거야 2개 모델에 대한 엔드포인트, api 키, 모델명을 코드 내에서 설정할 수 있도록 할 것.

</p>

<p>좋아! 아래는 “두 모델 × 두 API 타입(completions, responses) × 함수 호출(function calling)” 조합을 한 파일에서 모두 테스트할 수 있는 파이썬 스크립트야.<br />
요구사항 정리대로</p>

<ol>
  <li>
    <p>두 가지 파일 관련 툴(폴더 내 파일 목록 조회, 파일 읽기)</p>
  </li>
  <li>
    <p>2개 모델에 대한 엔드포인트·API 키·모델명을 코드 내에서 설정 가능</p>
  </li>
  <li>
    <p>4가지 조합을 원하는 대로 실행 가능</p>
  </li>
</ol>

<p>을 모두 담았어. 최신 OpenAI Python SDK의 사용법과 Responses API의 툴 호출 흐름은 공식 문서의 구조를 따랐어. 참고: function calling과 tools 정의 방식은 공식 가이드와 동일하고, Chat Completions API에서는 tool_calls를 message에, Responses API에서는 output 항목과 tool_calls를 통해 주고받는 형태야. 관련 문서: Function Calling 가이드와 Responses API 레퍼런스. <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼+1</a></p>

<p>스크립트는 다음처럼 동작해</p>

<ul>
  <li>
    <p>MODELS 섹션에서 model A/B의 endpoint, api_key, model 이름을 채워둔다(예시 포함).</p>
  </li>
  <li>
    <p>TOOL 정의는 공통(JSON Schema).</p>
  </li>
  <li>
    <p>run_with_chat_completions(…), run_with_responses(…) 두 함수가 각각 함수 호출 루프를 수행.</p>
  </li>
  <li>
    <p>main에서 네 가지 조합을 순차 실행하거나, 원하는 조합만 선택 실행하도록 CLI 옵션 제공.</p>
  </li>
</ul>

<p>코드 복사해서 test_openai_tools.py로 저장한 뒤, samples 폴더에 테스트용 파일을 몇 개 넣고 돌려봐.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_openai_tools.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# 1) 구성(모델/엔드포인트/키)
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>               <span class="c1"># ex) "https://api.openai.com/v1"
</span>    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>                <span class="c1"># ex) os.getenv("OPENAI_API_KEY")
</span>
<span class="c1"># 여기서 두 모델에 대한 엔드포인트/키/모델명을 설정하세요.
# 실제 키를 코드에 하드코딩하지 말고, 환경변수를 권장합니다.
</span><span class="n">MODELS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">,</span>          <span class="c1"># 예시 (원하는 최신 모델명으로 변경)
</span>        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>           <span class="c1"># 예시 (원하는 최신 모델명으로 변경)
</span>        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =====================================
# 2) 로컬 파일 툴(폴더 목록/파일 읽기)
# =====================================
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">지정 폴더 내 파일 목록 반환(파일만).</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">items</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))]</span>
    <span class="k">return</span> <span class="n">files</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">지정 경로의 텍스트 파일 내용 반환(UTF-8 가정).</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
        <span class="c1"># 바이너리 등 텍스트가 아닌 경우
</span>        <span class="k">return</span> <span class="sh">""</span>

<span class="c1"># 공통 툴 스키마(JSON Schema; Chat Completions/Responses에서 그대로 사용)
</span><span class="n">TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content as a string.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># 툴 디스패처
</span><span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder</span><span class="p">),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">file_path</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># =====================================
# 3) Chat Completions로 함수 호출 테스트
# =====================================
</span>
<span class="k">def</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Chat Completions API로 function calling 테스트.
    - tools: TOOLS
    - tool_choice: </span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="s"> 권장
    - tool_calls -&gt; 실제 파이썬 함수 실행 -&gt; tool 메시지 첨부 -&gt; 재호출
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="c1"># 1차 호출
</span>    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tool_choice</span>  <span class="c1"># 'auto' or {'type':'function','function':{'name':'...'}}
</span>    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="c1"># 함수 호출 루프
</span>    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>

            <span class="c1"># tool 메시지 첨부
</span>            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_output</span>
            <span class="p">})</span>

        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="c1"># 후속 호출(최종 답변 유도)
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =====================================
# 4) Responses API로 함수 호출 테스트
#    - 최신 SDK 규약에 맞춰 비스트리밍 루프 구성
# =====================================
</span>
<span class="k">def</span> <span class="nf">extract_text_from_responses_output</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Responses API의 output 배열에서 자연어 텍스트만 모아 반환.</span><span class="sh">"""</span>
    <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="c1"># item.type == "message" 인 경우, item.content[*] 중 type == "output_text"
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="c1"># 일부 모델은 최종에 바로 output_text만 내보내기도 함
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">extract_tool_calls_from_responses_output</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 output에서 tool_call 이벤트를 수집.
    각 항목은 {id, name, arguments} 형태로 정규화해서 반환.
    </span><span class="sh">"""</span>
    <span class="n">calls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="c1"># 케이스1: item.type == "tool_call"
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">tool_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tc</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}</span>
            <span class="p">}</span>
            <span class="c1"># arguments는 문자열/딕셔너리 모두 가능성 고려
</span>            <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tc</span><span class="p">)</span>

        <span class="c1"># 케이스2: item.type == "message" 내부 content[*]에 tool_calls 묶여있을 수 있음
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="c1"># 일부 SDK 버전에서 item.tool_calls 또는 item.content[*].tool_calls 형태
</span>            <span class="n">inner_calls</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner_calls</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner_calls</span><span class="p">:</span>
                    <span class="n">arg_obj</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{}</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">arg_obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">arg_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">arg_obj</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">arg_obj</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">arg_obj</span> <span class="ow">or</span> <span class="p">{}</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Responses API로 function calling 테스트.
    흐름:
      1) responses.create(input=[{role:user, content:...}], tools=TOOLS, tool_choice=...)
      2) tool_call이 있으면 로컬 함수 실행
      3) responses.create(..., tool_outputs=[{tool_call_id, output}], response_id=prev.id) 로 이어서 호출
         (최신 문서의 규약을 따름)
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="c1"># 1차 호출
</span>    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}],</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tool_choice</span>
    <span class="p">)</span>

    <span class="c1"># 루프: 도구 호출이 끝날 때까지
</span>    <span class="n">final_text_parts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>  <span class="c1"># 안전 상한
</span>        <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">tool_calls</span> <span class="o">=</span> <span class="nf">extract_tool_calls_from_responses_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="n">plain_text</span> <span class="o">=</span> <span class="nf">extract_text_from_responses_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="n">plain_text</span><span class="p">:</span>
            <span class="n">final_text_parts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">plain_text</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">tool_calls</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">tool_outputs_payload</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs_payload</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span>
            <span class="p">})</span>

        <span class="c1"># 이전 response와 이어 붙여 툴 결과를 전달
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
            <span class="n">response_id</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs_payload</span>
        <span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">final_text_parts</span> <span class="k">if</span> <span class="n">p</span><span class="p">])</span>

<span class="c1"># =====================================
# 5) 실행부(4가지 조합)
# =====================================
</span>
<span class="n">DEFAULT_USER_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더 안의 파일 목록을 보여주고, 텍스트 파일이 하나라도 있으면 </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">그 중 하나의 내용을 읽어서 핵심만 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">combo_api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [</span><span class="si">{</span><span class="n">combo_api</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] with Model </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">) ===</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">combo_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">combo_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">combo_api must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Test function-calling with OpenAI (4-way matrix).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Which API type to run.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Which model to use.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_USER_TASK</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">User task/prompt.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">apis</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">api</span><span class="p">]</span>
    <span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">]</span>

    <span class="c1"># 샘플 폴더 안내
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">apis</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="nf">run_one</span><span class="p">(</span><span class="n">api</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 방법 간단 정리</p>

<ol>
  <li>환경 변수 세팅(권장)</li>
</ol>

<ul>
  <li>
    <p>Model A</p>

    <ul>
      <li>
        <p>OPENAI_API_KEY=…</p>
      </li>
      <li>
        <p>OPENAI_BASE_URL=https://api.openai.com/v1</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Model B</p>

    <ul>
      <li>
        <p>OPENAI_API_KEY_B=…</p>
      </li>
      <li>
        <p>OPENAI_BASE_URL_B=https://api.openai.com/v1</p>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>테스트 파일 준비</li>
</ol>

<ul>
  <li>프로젝트 루트에 samples 폴더를 만들고, 텍스트 파일을 1개 이상 넣는다. 예: samples/readme.txt</li>
</ul>

<ol>
  <li>실행</li>
</ol>

<ul>
  <li>
    <p>네 조합 모두:<br />
python test_openai_tools.py</p>
  </li>
  <li>
    <p>특정 API만:<br />
python test_openai_tools.py –api completions<br />
python test_openai_tools.py –api responses</p>
  </li>
  <li>
    <p>특정 모델만:<br />
python test_openai_tools.py –model A<br />
python test_openai_tools.py –model B</p>
  </li>
  <li>
    <p>프롬프트 커스터마이즈:<br />
python test_openai_tools.py –task "여기에 원하는 테스트 지시문"</p>
  </li>
</ul>

<p>구현 포인트 설명(필요 시 점검할 체크리스트)</p>

<ul>
  <li>
    <p>Chat Completions: response.choices[0].message.tool_calls를 확인하고, 각 툴을 실행한 뒤 tool 메시지를 추가해서 재호출하는 전형적 루프를 사용했어. 이것은 Function Calling 가이드의 권고 패턴이야. <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Responses API: responses.create(…) → output에서 tool_call 이벤트를 수집 → 실제 함수 실행 → tool_outputs와 이전 response_id를 함께 넘겨 후속 responses.create(…) 호출로 이어 붙이는 패턴이야. 이 흐름은 공식 Responses API 레퍼런스가 안내하는 방식과 맞물려 있어. <a href="https://platform.openai.com/docs/api-reference/responses/create">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>tools 스키마는 두 API에서 동일하게 재사용.</p>
  </li>
  <li>
    <p>로컬 파일 I/O는 안전하게 예외 처리했고, 텍스트 파일로 가정(UTF-8)했지만 디코딩 실패 시 빈 문자열을 반환해 모델이 적절히 안내하도록 했어.</p>
  </li>
</ul>

<p>문서 참고 링크</p>

<ul>
  <li>
    <p>Function Calling 가이드(툴 정의/호출 흐름) <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Responses API 레퍼런스(응답 구조, tool_outputs 전달 방식) <a href="https://platform.openai.com/docs/api-reference/responses/create">OpenAI 플랫폼</a></p>
  </li>
</ul>

<p>필요하면</p>

<ul>
  <li>
    <p>모델명만 바꿔서(예: 최신 gpt-4.1 계열 등) 즉시 시험 가능</p>
  </li>
  <li>
    <p>tool_choice를 "any"로 바꾸면 여러 툴 병렬 호출 경향을 더 시험할 수 있어</p>
  </li>
  <li>
    <p>samples 폴더 경로나 읽을 파일 선택 로직을 더 엄격하게 지정하고 싶다면, 프롬프트를 고정(seed task)하거나 시스템 메시지쪽에 규칙을 더해도 좋아</p>
  </li>
</ul>

<p>원하는 부분 더 바꿔드릴게.</p>

<p class="chat--user">

아니 내가 조사했을 때 responses용 툴 json이 있고, completion용이 따로 있어 조금 다르게 생겼던데 찾아서 반영해줘

</p>

<p>좋은 지적이야. 실제로 “도구 정의(tools JSON)”는 두 API가 거의 같지만, Responses API는 실행·상태 전파 방식(response_id, tool_outputs 등)과 출력 구조가 다르고, 가이드에선 Responses 예시에서 엄격 파싱(strict) 옵션을 곁들여 쓰는 패턴이 자주 보여서 모양이 살짝 달라 보일 수 있어. 그래서 아래처럼 아예 두 벌의 스키마를 분리해 두고, Responses 쪽엔 엄격 파싱을 넣는 식으로 반영했어. 또한 Responses는 tool_outputs와 response_id를 통해 단계적으로 이어붙이는 점을 코드에 명확히 했어. 참고 문서: Function Calling 가이드와 Responses API 레퍼런스. <a href="https://platform.openai.com/docs/guides/function-calling/supported-models?utm_source=chatgpt.com">OpenAI 플랫폼+2</a></p>

<p>아래 스크립트는 네 가지 조합(모델 A/B × completions/responses) 모두 함수 호출을 시험하고, 두 종류의 파일 툴을 제공해. 변경 포인트는 1) CHAT_TOOLS vs RESPONSES_TOOLS 분리, 2) Responses 루프에서 tool_outputs·response_id 사용을 더 엄격히, 3) Responses 출력 파서 보강이야.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_openai_tools_split_tools.py
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># 공통 실제 구현 함수
</span><span class="kn">import</span> <span class="n">os</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))]</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># Chat Completions 전용 도구 JSON
# - 전통적인 function calling 스키마
</span><span class="n">CHAT_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Path to the text file.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># Responses 전용 도구 JSON
# - 스키마 필드는 유사하지만, Responses 예제 관례에 맞춰 strict를 켬
#   (모델이 schema에 정확히 맞춰 인자 생성하도록 강제)
</span><span class="n">RESPONSES_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Path to the text file.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">CHAT_TOOLS</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="n">tools_choice</span>
    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># 각 툴 실행
</span>        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">output</span><span class="p">})</span>
        <span class="c1"># 대화 이어붙이기
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># Responses 출력 파서
</span><span class="k">def</span> <span class="nf">_extract_text</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">_extract_tool_calls</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">tool_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner_calls</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner_calls</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner_calls</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}],</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">RESPONSES_TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tools_choice</span>
    <span class="p">)</span>

    <span class="n">final_text</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># Responses는 tool_outputs + response_id로 상태를 이어서 보낸다.
</span>    <span class="c1"># 이어붙이기 패턴은 공식 레퍼런스의 흐름과 동일. :contentReference[oaicite:1]{index=1}
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>  <span class="c1"># 안전 상한
</span>        <span class="n">txt</span> <span class="o">=</span> <span class="nf">_extract_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="n">txt</span><span class="p">:</span>
            <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="n">calls</span> <span class="o">=</span> <span class="nf">_extract_tool_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">})</span>

        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">RESPONSES_TOOLS</span><span class="p">,</span>
            <span class="n">response_id</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>          <span class="c1"># 이전 응답과 연결
</span>            <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs</span>  <span class="c1"># 툴 실행 결과 전달
</span>        <span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나 골라 내용을 읽고 2~3문장 요약. 필요하면 툴 사용.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">which_api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [</span><span class="si">{</span><span class="n">which_api</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] Model </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">) ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">which_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">which_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">which_api must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">apis</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">api</span><span class="p">]</span>
    <span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">apis</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="nf">run_one</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
</code></pre></div></div>

<p>핵심 차이 정리 단계별</p>

<ol>
  <li>
    <p>도구 정의 자체는 필드 구조가 동일(type=function, function.name/description/parameters)하되, Responses 쪽 예시에서는 strict를 켜서 JSON Schema를 엄격히 지키게 하는 패턴이 널리 쓰인다. 그래서 스키마가 “조금 다르게 생긴 것처럼” 보일 수 있다. <a href="https://platform.openai.com/docs/guides/function-calling/supported-models?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>Chat Completions는 messages 배열에 assistant.tool_calls가 나오고, 각 call.id에 대응하는 tool 메시지를 넣어 다시 chat.completions.create를 호출한다.</p>
  </li>
  <li>
    <p>Responses는 output에 tool_call 항목이 나오며, 실제 도구 실행 후 tool_outputs 배열과 이전 응답의 response_id를 포함해 responses.create를 다시 호출해 상태를 이어 붙인다. 이게 가장 큰 차이점이다. <a href="https://platform.openai.com/docs/api-reference/responses-streaming/response?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ol>

<p>이 버전으로 돌려보고, Responses에서 strict를 끄고 싶으면 RESPONSES_TOOLS에서 "strict": True만 빼면 돼. 모델·엔드포인트·키는 상단 MODELS에서 조정 가능하고, samples 폴더에 테스트 파일만 있으면 바로 네 조합을 모두 확인할 수 있어.</p>

<p class="chat--user">

아니 예시를 좀 찾아봐.. from openai import OpenAI import json client = OpenAI() # 1. Define a list of callable tools for the model tools = [ { "type": "function", "name": "get_horoscope", "description": "Get today's horoscope for an astrological sign.", "parameters": { "type": "object", "properties": { "sign": { "type": "string", "description": "An astrological sign like Taurus or Aquarius", }, }, "required": ["sign"], }, }, ] def get_horoscope(sign): return f"{sign}: Next Tuesday you will befriend a baby otter." # Create a running input list we will add to over time input_list = [ {"role": "user", "content": "What is my horoscope? I am an Aquarius."} ] # 2. Prompt the model with tools defined response = client.responses.create( model="gpt-5", tools=tools, input=input_list, ) # Save function call outputs for subsequent requests input_list += response.output for item in response.output: if item.type == "function_call": if item.name == "get_horoscope": # 3. Execute the function logic for get_horoscope horoscope = get_horoscope(json.loads(item.arguments)) # 4. Provide function call results to the model input_list.append({ "type": "function_call_output", "call_id": item.call_id, "output": json.dumps({ "horoscope": horoscope }) }) print("Final input:") print(input_list) response = client.responses.create( model="gpt-5", instructions="Respond only with a horoscope generated by a tool.", tools=tools, input=input_list, ) # 5. The model should be able to give a response! print("Final output:") print(response.model_dump_json(indent=2)) print("\n" + response.output_text) 그러면 총 8개 조합이 나오지? 모델 x API 타입(completion, responses) x json 형태 이 8개 조합에 대해 각각 테스트하는 코드를 짜줘 이 때 실행 중 에러가 나는 경우에는 에러만 출력하고 나머지가 잘 수행되게 해줘.

</p>

<p>좋아. “2개 모델 × 2개 API(completions, responses) × 2가지 tools JSON 형태(Completions 스타일 vs Responses 스타일)” = 총 8개 조합을 한 번에 돌려보는 테스트 스크립트를 준비했어. 각 조합은 개별 try/except로 감싸 에러가 나더라도 나머지가 계속 수행돼. tools JSON은 네가 준 Responses 스타일 예시(평평한 형태: type/name/parameters가 최상위)와, Chat Completions에서 흔히 쓰는 중첩 형태({"type":"function","function":{…}})를 각각 분리해 두었고, 일부 조합은 의도적으로 “맞지 않는 형태”를 넣었기 때문에 실패할 수도 있어(그 경우 에러만 출력). 참고로 Responses와 Chat Completions의 차이, strict 옵션 등은 최신 가이드에 정리돼 있어. <a href="https://platform.openai.com/docs/guides/responses-vs-chat-completions?utm_source=chatgpt.com">OpenAI 플랫폼+2</a></p>

<p>아래 파일을 test_8combos_tools.py로 저장해서 실행하면 돼.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_8combos_tools.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# 0) 모델 설정
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =========================
# 1) 로컬 툴 구현
# =========================
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    모든 툴의 결과를 dict로 통일해서 반환.
    Responses의 function_call_output에 넣기 좋게 {</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="s">: ...} 형태로 감싸준다.
    </span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder</span><span class="p">)}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">path</span><span class="p">)}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># =========================
# 2) tools JSON 두 가지 형태
# =========================
</span>
<span class="c1"># (A) Chat Completions 스타일: function 필드에 중첩
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># (B) Responses 스타일: 네가 준 예시처럼 평평한 형태(일부 문서/예시에서 보이는 포맷)
</span><span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True  # 필요 시 켜서 인자 스키마 준수 강제 (도움말 참조)
</span>    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True
</span>    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># =========================
# 3) Chat Completions 쪽 함수 호출 루프
# =========================
</span>
<span class="k">def</span> <span class="nf">run_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s">  -&gt; CHAT_STYLE_TOOLS 사용 (권장)
    </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s"> -&gt; RESPONSES_STYLE_TOOLS 사용 (의도적 비호환 가능)
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="c1"># tool_calls 루프
</span>    <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>
        <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="c1"># arguments는 문자열일 수 있음
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>

            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
            <span class="p">})</span>

        <span class="c1"># 대화 이어붙이기
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
        <span class="p">})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =========================
# 4) Responses 쪽 함수 호출 루프
# =========================
</span>
<span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 output 배열에서 function_call / tool_call 류 이벤트를 추출.
    다양한 케이스를 최대한 관대하게 처리한다.
    </span><span class="sh">"""</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

        <span class="c1"># 케이스 A: item.type == "function_call"
</span>        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
            <span class="p">})</span>

        <span class="c1"># 케이스 B: 일부 모델이 "tool_call" / item.message.tool_calls 형태로 줄 때
</span>        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s"> -&gt; RESPONSES_STYLE_TOOLS 사용 (권장)
    </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s">      -&gt; CHAT_STYLE_TOOLS 사용 (의도적 비호환 가능)
    순수 Responses 방식: 네가 준 예시 패턴(input_list 축적 + function_call_output)로 구현.
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="c1"># running input_list
</span>    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}</span>
    <span class="p">]</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># function_call 처리
</span>    <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

    <span class="c1"># call들을 찾아 실행하고, function_call_output을 이어 붙임
</span>    <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
        <span class="p">})</span>

    <span class="c1"># 최종 응답 시도(지시문을 추가적으로 줄 수도 있음)
</span>    <span class="n">r2</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">Respond with a short summary of what you found.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># 텍스트 추출(중간/최종)
</span>    <span class="n">final_text</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">txt1</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">if</span> <span class="n">txt1</span><span class="p">:</span> <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt1</span><span class="p">)</span>
    <span class="n">txt2</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r2</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">if</span> <span class="n">txt2</span><span class="p">:</span> <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt2</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =========================
# 5) 8개 조합 실행기
# =========================
</span>
<span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나 골라 내용을 읽고 2~3문장 요약. 필요하면 도구를 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools_json=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">run_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 8 combinations: 2 models × 2 APIs × 2 tools JSON styles.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># tools_variant를 "both"로 두면 각 API에서 chat/​responses 두 가지 툴 JSON 모두 시도 → 8조합
</span>    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># 샘플 폴더 생성 안내
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>

    <span class="c1"># 8조합: 2모델 × 2API × 2JSON
</span>    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="nf">run_one</span><span class="p">(</span><span class="n">api</span><span class="p">,</span> <span class="n">mk</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>실행 예시<br />
python test_8combos_tools.py<br />
python test_8combos_tools.py –apis completions –tools both<br />
python test_8combos_tools.py –models A –apis responses –tools responses</p>

<p>포인트 요약</p>

<ol>
  <li>
    <p>CHAT_STYLE_TOOLS와 RESPONSES_STYLE_TOOLS를 분리해 두었고, Responses 루프는 네가 붙여준 예시처럼 input_list에 function_call과 function_call_output을 누적하는 방식으로 구현했어. 일부 문서/예시에선 strict를 켜 JSON 스키마를 강제하니 필요하면 해당 키를 켜면 돼. <a href="https://platform.openai.com/docs/guides/function-calling?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>일부 조합은 의도적으로 호환되지 않아 에러가 날 수 있어(예: Chat Completions에 Responses 스타일 tools). 모든 run은 try/except로 감싸 실패해도 나머지가 이어진다.</p>
  </li>
  <li>
    <p>최신 차이점과 권장 흐름은 Responses vs Chat Completions 가이드에서 비교 가능해. <a href="https://platform.openai.com/docs/guides/responses-vs-chat-completions?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ol>

<p>더 엄격하게 Responses의 “response_id + tool_outputs” 방식으로 이어붙이는 버전도 원하면 따로 추가해줄게.</p>

<p class="chat--user">

개선 필요 사항 1. responses api에서도 여러 번 콜을 하고 각 대화를 다 출력하고 싶어. 2. 입력 전체를 그냥 json으로 출력하고, 출력 전체도 그냥 json으로 다 저장해줘. 단, 콘솔 출력 색깔 지정을 통해서 (1) 입력 (2) 툴 요청 (3) 출력 이 구분되면 좋겠어. 3. 추가적으로 json formatting (structured json)도 추가해줘. structured json이 있는 버젼과 없는 버젼 각각 추가해주면 좋겠어. 총 16가지 조합이 될 거야. 각 api에 대한 structured formatting 예시는 아래 코드를 참고해 chat completions 
<code class="language-plaintext highlighter-rouge">
from pydantic import BaseModel
from openai import OpenAI

client = OpenAI()

class CalendarEvent(BaseModel):
    name: str
    date: str
    participants: list[str]

completion = client.chat.completions.parse(
    model="gpt-4o-2024-08-06",
    messages=[
        {"role": "system", "content": "Extract the event information."},
        {"role": "user", "content": "Alice and Bob are going to a science fair on Friday."},
    ],
    response_format=CalendarEvent,
)

event = completion.choices[0].message.parsed
</code>

responses 
<code class="language-plaintext highlighter-rouge">
from openai import OpenAI
from pydantic import BaseModel

client = OpenAI()

class CalendarEvent(BaseModel):
    name: str
    date: str
    participants: list[str]

response = client.responses.parse(
    model="gpt-4o-2024-08-06",
    input=[
        {"role": "system", "content": "Extract the event information."},
        {
            "role": "user",
            "content": "Alice and Bob are going to a science fair on Friday.",
        },
    ],
    text_format=CalendarEvent,
)

event = response.output_parsed
</code>

</p>

<p>좋아, 요구사항(2모델 × 2 API 타입 × 2 Tools JSON 스타일 × 2 Structured 포맷 유무 = 16조합)을 모두 만족하는 단일 실행 스크립트를 준비했어. 다음을 보장해.</p>

<ol>
  <li>
    <p>Responses API에서 여러 번 호출(툴 호출 발생 시 루프)하며, 매 스텝의 대화 전개를 콘솔에 모두 출력.</p>
  </li>
  <li>
    <p>각 조합마다 “입력 전체”와 “출력 전체”를 JSON으로 파일로 저장. 콘솔에선 색상으로 (입력 / 툴요청 / 출력) 구분.</p>
  </li>
  <li>
    <p>Structured JSON 파싱 버전과 일반 버전 각각 제공.</p>
  </li>
  <li>
    <p>에러는 조합별로 try/except로 고립 처리하여, 실패해도 나머지 조합 계속 실행.</p>
  </li>
</ol>

<p>아래 코드를 test_16combos.py로 저장해서 실행해. samples 폴더에 텍스트 파일 몇 개 두면 툴 동작을 쉽게 확인할 수 있어.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_16combos.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# ANSI 색상 유틸
# =========================
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># 입력
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># 툴 요청/툴 출력
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># 모델 출력
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># 에러
</span>
<span class="c1"># =========================
# 모델/엔드포인트/키 설정
# =========================
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =========================
# 로컬 툴 구현
# =========================
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># =========================
# Tools JSON 2가지 스타일
# =========================
# Chat Completions 스타일 (function 필드 중첩)
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># Responses 스타일 (평평한 형태; 일부 예시 포맷)
</span><span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True  # 필요 시 활성화
</span>    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True
</span>    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># =========================
# Structured JSON 포맷용 Pydantic
# =========================
</span><span class="k">class</span> <span class="nc">FileTaskResult</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">files</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">chosen_file</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">summary</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># =========================
# 공통: 출력/저장 헬퍼
# =========================
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">label_for</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="sh">'</span><span class="s">structured</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">plain</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># =========================
# Chat Completions 러너 (plain/structured)
# =========================
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="c1"># 대화 시작
</span>    <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="c1"># 입력/출력 전체 저장을 위한 구조
</span>    <span class="n">input_snapshot</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># structured: parse() 사용
</span>        <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># function calling 루프 (parse 결과에서도 tool_calls 접근 가능하도록 시도)
</span>        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># 최종 구조화 결과
</span>        <span class="n">parsed</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">FileTaskResult</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_to_print</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">:</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="bp">None</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat Completions, structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_to_print</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># plain: create() 사용
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat Completions, plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="c1"># 파일 저장
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># =========================
# Responses 러너 (plain/structured)
# - 여러 번 호출하며 매 스텝 출력
# =========================
</span><span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>

        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># structured: responses.parse(text_format=...)
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">text_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># 툴 호출 탐지 → 실행 → function_call_output 추가 → 이어서 또 parse
</span>        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text_format</span><span class="o">=</span><span class="n">FileTaskResult</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># 최종 파싱 결과
</span>        <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># plain: responses.create()
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="bp">True</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="c1"># function_call_output을 input에 누적
</span>                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>

            <span class="c1"># 다음 턴
</span>            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">final_text</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_text</span><span class="p">})</span>

    <span class="c1"># 파일 저장
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># =========================
# 16개 조합 실행기
#   2 모델 × 2 API × 2 Tools JSON × 2 Structured
# =========================
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span>
    <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span>
    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">combo_label</span> <span class="o">=</span> <span class="nf">label_for</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">combo_label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> structured=</span><span class="si">{</span><span class="sh">'</span><span class="s">on</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>
        <span class="c1"># 에러만 출력하고 계속
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 16 combos: 2 models × 2 APIs × 2 Tools JSON × 2 Structured.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--structured</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">structured_opts</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">structured_opts</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">st</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용법 요약</p>

<ol>
  <li>환경 변수 설정(예시)</li>
</ol>

<ul>
  <li>
    <p>모델 A:<br />
OPENAI_API_KEY_A, OPENAI_BASE_URL_A=https://api.openai.com/v1, MODEL_A_NAME</p>
  </li>
  <li>
    <p>모델 B:<br />
OPENAI_API_KEY_B, OPENAI_BASE_URL_B=https://api.openai.com/v1, MODEL_B_NAME</p>
  </li>
</ul>

<ol>
  <li>
    <p>샘플 준비<br />
프로젝트 루트에 samples 폴더를 만들고 텍스트 파일을 1개 이상 넣어둔다.</p>
  </li>
  <li>
    <p>실행 예시</p>
  </li>
</ol>

<ul>
  <li>
    <p>16개 전체 조합 실행<br />
python test_16combos.py</p>
  </li>
  <li>
    <p>Responses만, structured/plain 둘 다, tools는 responses 스타일만<br />
python test_16combos.py –apis responses –tools responses –structured both</p>
  </li>
  <li>
    <p>모델 A만, Chat Completions만, structured만<br />
python test_16combos.py –models A –apis completions –structured on</p>
  </li>
</ul>

<p>동작 정리</p>

<ul>
  <li>
    <p>콘솔 색상으로 입력(청록), 툴 요청(노랑), 출력(초록)을 구분.</p>
  </li>
  <li>
    <p>각 조합은 runs/타임스탬프/모델_API_tools_structured/ 아래에 input.json, outputs.json 저장.</p>
  </li>
  <li>
    <p>Responses API는 툴 호출이 계속 나오면 루프를 반복하고 매 스텝 출력 및 누적 저장.</p>
  </li>
  <li>
    <p>Structured 모드에선 chat.completions.parse / responses.parse를 사용해 Pydantic 모델(FileTaskResult)로 결과를 파싱해 별도 요약도 콘솔에 표시.</p>
  </li>
</ul>

<p>원하는 추가 포맷(예: 파일명 규칙, 더 자세한 로깅, strict 옵션 상시 on 등)이 있으면 알려줘.</p>

<p class="chat--user">

출력 json 포맷은 task에서 요청한 걸 대답할 수 있게 해주면 좋을 것 같아. 예를 들어 filename: 파일명 contents: 내용 

</p>

<p>좋아! “결과 JSON 포맷을 task에 바로 쓰이게(filename, contents)”로 맞춘 버전을 아래처럼 업데이트했어. 핵심은 structured 모드에서 파싱 모델을 <code class="language-plaintext highlighter-rouge">{"filename": str, "contents": str}</code>로 고정하고, 모델에게 “contents에는 요약을 넣어라”라고 지시하는 것. plain 모드에서는 기존 그대로 자유 텍스트를 출력하고 전체 원시 JSON 로그만 저장하며, structured 모드에서는 추가로 <code class="language-plaintext highlighter-rouge">result.json</code>에 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code>를 저장해.</p>

<p>아래 스크립트는 이전 16조합 실행기(test_16combos.py)를 대체하는 완전판이야. 바뀐 점만 빠르게 요약하고 바로 코드 줄게.</p>

<p>변경 요약</p>

<ol>
  <li>Structured 파싱 모델 교체</li>
</ol>

<ul>
  <li>
    <p>Pydantic 모델을 <code class="language-plaintext highlighter-rouge">TaskAnswer</code>로 정의하고 필드를 filename, contents 두 개로 통일.</p>
  </li>
  <li>
    <p>contents는 “읽은 파일의 2~3문장 요약”을 넣도록 system/instructions에 명확히 지시.</p>
  </li>
</ul>

<ol>
  <li>Structured 모드에서 결과 JSON 저장</li>
</ol>

<ul>
  <li>
    <p>각 조합 폴더에 <code class="language-plaintext highlighter-rouge">result.json</code>으로 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code> 저장.</p>
  </li>
  <li>
    <p>기존처럼 <code class="language-plaintext highlighter-rouge">input.json</code>, <code class="language-plaintext highlighter-rouge">outputs.json</code>도 계속 저장.</p>
  </li>
</ul>

<ol>
  <li>콘솔 색상 출력은 동일하게 유지</li>
</ol>

<ul>
  <li>입력(CYAN), 툴 요청(YELLOW), 출력(GREEN)으로 구분.</li>
</ul>

<ol>
  <li>Responses API는 다단 호출 유지</li>
</ol>

<ul>
  <li>각 step의 출력과 툴 요청을 모두 콘솔에 표시하고, outputs.json에 누적 저장.</li>
</ul>

<p>코드</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_16combos_v2.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># ===== ANSI 색상 =====
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># 입력
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># 툴 요청/툴 출력
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># 모델 출력
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># 에러
</span>
<span class="c1"># ===== 모델 설정 =====
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># ===== 로컬 툴 구현 =====
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># ===== Tools JSON 2가지 =====
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># ===== Structured JSON 스키마 =====
</span><span class="k">class</span> <span class="nc">TaskAnswer</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">filename</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">contents</span><span class="p">:</span> <span class="nb">str</span>  <span class="c1"># 선택된 파일의 2~3문장 요약(모델이 생성)
</span>
<span class="c1"># ===== 유틸 =====
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span> <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="sh">'</span><span class="s">structured</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">plain</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># ===== Chat Completions 러너 =====
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="n">system_msg</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: Show files under ./samples, pick one text file, read it, and provide a 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If using structured output, respond ONLY with JSON having keys: filename, contents.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_msg</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="n">parsed</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">TaskAnswer</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>

            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># ===== Responses 러너 =====
</span><span class="k">def</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="n">system_inst</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: Show files under ./samples, pick one text file, read it, and provide a 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If structured parsing is enabled, respond ONLY with JSON having keys: filename, contents.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_inst</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">}</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="n">responses_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">)</span>
            <span class="n">responses_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">final_text</span> <span class="o">=</span> <span class="nf">_collect_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_text</span><span class="p">})</span>

    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">responses_dump</span><span class="p">)</span>

<span class="c1"># ===== 16개 조합 실행기 =====
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">label</span> <span class="o">=</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> structured=</span><span class="si">{</span><span class="sh">'</span><span class="s">on</span><span class="sh">'</span> <span class="k">if</span> <span class="n">structured</span> <span class="k">else</span> <span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>  <span class="c1"># 에러만 출력하고 계속
</span>
<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 16 combos with JSON result format {filename, contents}.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--structured</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">structured_opts</span> <span class="o">=</span> <span class="p">[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">structured</span> <span class="o">==</span> <span class="sh">"</span><span class="s">on</span><span class="sh">"</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">structured_opts</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">st</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 포인트</p>

<ul>
  <li>
    <p>structured 모드일 때만 <code class="language-plaintext highlighter-rouge">result.json</code>을 생성하며 내용은 반드시 <code class="language-plaintext highlighter-rouge">{"filename","contents"}</code>로 저장돼.</p>
  </li>
  <li>
    <p>contents에는 “선택한 파일의 2~3문장 요약”이 들어가도록 시스템 메시지에서 강제했어.</p>
  </li>
  <li>
    <p>plain 모드에선 자유 형식 출력이지만, 입력과 모든 원시 응답은 <code class="language-plaintext highlighter-rouge">input.json</code>, <code class="language-plaintext highlighter-rouge">outputs.json</code>로 저장돼.</p>
  </li>
  <li>
    <p>각 단계의 콘솔 출력은 색상으로 구분돼서 입력/툴요청/출력이 한눈에 보여.</p>
  </li>
</ul>

<p>원하면 contents를 “파일 전문”으로 바꾸는 옵션 스위치도 추가해줄 수 있어.</p>

<p class="chat--user">

Completions(structured)에서 ValueError list_files_in_folder is not strict. Only <code class="language-plaintext highlighter-rouge">strict</code> function tools can be auto-parsed.

</p>

<p>좋은 피드백이야. 에러 원인은 chat.completions.parse를 사용할 때 툴이 strict 모드가 아니면 자동 파싱이 불가능해서야. 즉, structured 모드에서 함수 툴 정의에 strict=True가 반드시 들어가야 해.</p>

<p>수정 방향 요약 단계별</p>

<ol>
  <li>
    <p>tools_variant와 structured 여부에 따라 툴 JSON에 strict를 주입하는 헬퍼를 만든다.</p>
  </li>
  <li>
    <p>Chat 스타일일 땐 tool["function"]["strict"]=True, Responses 스타일일 땐 tool["strict"]=True를 넣는다.</p>
  </li>
  <li>
    <p>run_chat / run_responses에서 기존 정적 TOOLS 대신 이 헬퍼로 반환된 툴을 사용한다.</p>
  </li>
</ol>

<p>아래 변경만 적용하면 돼. 나머지 로직은 그대로 둬도 동작한다.</p>

<p>추가 함수 및 변경점</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">copy</span>

<span class="k">def</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">'</span><span class="s">chat</span><span class="sh">'</span><span class="s"> | </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'</span><span class="s">
    structured가 True면 strict 플래그를 주입한다.
    </span><span class="sh">"""</span>
    <span class="n">base</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">structured</span><span class="p">:</span>
        <span class="c1"># Chat 스타일: "function" 블록 안에 strict
</span>        <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span> <span class="ow">and</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">t</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="c1"># Responses 스타일: 최상위에 strict
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">t</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">t</span><span class="p">[</span><span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">return</span> <span class="n">tools</span>
</code></pre></div></div>

<p>run_chat 내부에서 툴 선택 부분 교체</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기존
# tools = CHAT_STYLE_TOOLS if tools_variant == "chat" else RESPONSES_STYLE_TOOLS
# 변경
</span><span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
</code></pre></div></div>

<p>run_responses 내부에서도 동일하게 교체</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기존
# tools = RESPONSES_STYLE_TOOLS if tools_variant == "responses" else CHAT_STYLE_TOOLS
# 변경
</span><span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="p">)</span>
</code></pre></div></div>

<p>추가 참고</p>

<ul>
  <li>
    <p>이 변경으로 Completions(structured) 뿐만 아니라 Responses(structured)에서도 일관되게 엄격 파싱이 보장돼.</p>
  </li>
  <li>
    <p>plain 모드에선 strict가 없어도 되지만, 위 헬퍼는 structured일 때만 strict를 주입하므로 기존 동작을 해치지 않아.</p>
  </li>
  <li>
    <p>tools JSON을 동적으로 주입하므로, 새 함수만 추가하고 두 곳 호출부만 바꾸면 끝나.</p>
  </li>
</ul>

<p>이렇게 수정하면 “ValueError list_files_in_folder is not strict. Only <code class="language-plaintext highlighter-rouge">strict</code> function tools can be auto-parsed.” 에러는 사라지고 16개 조합 모두 정상적으로 순회할 수 있어.</p>

<p class="chat--user">

그래도 계속 에러가 나네. 일단 넘어가고 json scheme을 지정하는 방식은 동작을 잘 안하네 일반 json 모드를 켜보고 싶어. 총 3가지 sweep(no structured, json_mode, structured)로 실험해보자. 예시 responses 
<code class="language-plaintext highlighter-rouge">
we_did_not_specify_stop_tokens = True

try:
    response = client.responses.create(
        model="gpt-3.5-turbo-0125",
        input=[
            {"role": "system", "content": "You are a helpful assistant designed to output JSON."},
            {"role": "user", "content": "Who won the world series in 2020? Please respond in the format {winner: ...}"}
        ],
        text={"format": {"type": "json_object"}}
    )

    # Check if the conversation was too long for the context window, resulting in incomplete JSON 
    if response.status == "incomplete" and response.incomplete_details.reason == "max_output_tokens":
        # your code should handle this error case
        pass

    # Check if the OpenAI safety system refused the request and generated a refusal instead
    if response.output[0].content[0].type == "refusal":
        # your code should handle this error case
        # In this case, the .content field will contain the explanation (if any) that the model generated for why it is refusing
        print(response.output[0].content[0]["refusal"])

    # Check if the model's output included restricted content, so the generation of JSON was halted and may be partial
    if response.status == "incomplete" and response.incomplete_details.reason == "content_filter":
        # your code should handle this error case
        pass

    if response.status == "completed":
        # In this case the model has either successfully finished generating the JSON object according to your schema, or the model generated one of the tokens you provided as a "stop token"

        if we_did_not_specify_stop_tokens:
            # If you didn't specify any stop tokens, then the generation is complete and the content key will contain the serialized JSON object
            # This will parse successfully and should now contain  "{"winner": "Los Angeles Dodgers"}"
            print(response.output_text)
        else:
            # Check if the response.output_text ends with one of your stop tokens and handle appropriately
            pass
except Exception as e:
    # Your code should handle errors here, for example a network error calling the API
    print(e)
</code>

completions 
<code class="language-plaintext highlighter-rouge">
response = client.chat.completions.create(
  model="gpt-4-1106-preview",
  messages=[
    {"role": "system", "content": "You are a helpful assistant."},
    {"role": "user", "content": "LangChain은 무엇을 하는 라이브러리지? JSON으로 답해줘. JSON 키워드는 Description, Features, Usage로 해줘."}
  ],
  response_format = {'type':"json_object"}
)
</code>

</p>

<p>좋아. strict 기반의 JSON Schema 파싱은 접고, 세 모드로 스윕하도록 전체 스크립트를 업데이트했어.</p>

<p>스윕 축: 2모델 × 2 API(completions/responses) × 2 Tools JSON(chat-style/responses-style) × 3 모드(plain, json_mode, structured) = 총 24조합.</p>

<p>핵심</p>

<ul>
  <li>
    <p>plain: 자유 출력. 전체 입력/출력 원본 JSON을 저장.</p>
  </li>
  <li>
    <p>json_mode: 모델에게 “무조건 JSON”을 요구. 출력은 {"filename","contents"} 형식. 저장 시 result.json 생성.</p>

    <ul>
      <li>
        <p>Chat Completions: response_format={'type': 'json_object'}</p>
      </li>
      <li>
        <p>Responses: text={"format":{"type":"json_object"}}</p>
      </li>
    </ul>
  </li>
  <li>
    <p>structured: 이전처럼 parse 사용. 여전히 모델/SDK에 따라 strict 요구로 실패할 수도 있으니 try/except로 격리. 성공 시 result.json 생성.</p>
  </li>
  <li>
    <p>Responses API는 툴 호출이 나오면 여러 번 호출되며 매 스텝 콘솔 출력. 콘솔은 색상으로 입력(CYAN), 툴 요청(YELLOW), 출력(GREEN) 구분.</p>
  </li>
  <li>
    <p>모든 조합은 runs/타임스탬프/모델_API_tools_mode/ 폴더에 input.json, outputs.json 저장. json_mode/structured는 result.json 추가 저장.</p>
  </li>
  <li>
    <p>에러는 조합별로만 출력하고 나머지 계속 진행.</p>
  </li>
</ul>

<p>코드: test_24combos.py</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_24combos.py
# Python 3.10+
# pip install --upgrade openai pydantic
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">copy</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">pydantic</span> <span class="kn">import</span> <span class="n">BaseModel</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># ===== ANSI colors =====
</span><span class="n">RESET</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[0m</span><span class="sh">"</span>
<span class="n">CYAN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[36m</span><span class="sh">"</span>      <span class="c1"># input
</span><span class="n">YELLOW</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[33m</span><span class="sh">"</span>    <span class="c1"># tool
</span><span class="n">GREEN</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[32m</span><span class="sh">"</span>     <span class="c1"># output
</span><span class="n">RED</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\033</span><span class="s">[31m</span><span class="sh">"</span>       <span class="c1"># error
</span>
<span class="c1"># ===== Model configs =====
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># ===== Local tools =====
</span><span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># ===== Tools JSON (two shapes) =====
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># ===== Structured JSON schema (optional) =====
</span><span class="k">class</span> <span class="nc">TaskAnswer</span><span class="p">(</span><span class="n">BaseModel</span><span class="p">):</span>
    <span class="n">filename</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">contents</span><span class="p">:</span> <span class="nb">str</span>

<span class="c1"># ===== Helpers =====
</span><span class="k">def</span> <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span> <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">write_json</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">now_id</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span> <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d-%H%M%S</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">print_section</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">color</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="n">Any</span><span class="p">):</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">color</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[</span><span class="si">{</span><span class="n">title</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">api_type</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">mode</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">structured</span><span class="p">:</span> <span class="nb">bool</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="c1"># structured에서 strict 문제를 피하기 위해 여기선 strict 주입을 끔
</span>    <span class="c1"># (structured는 parse() 사용 시 여전히 실패할 수 있으므로 try/except로 감싼다)
</span>    <span class="n">base</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>
    <span class="k">return</span> <span class="n">copy</span><span class="p">.</span><span class="nf">deepcopy</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>

<span class="c1"># ===== Common parsing for Responses =====
</span><span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{}})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="c1"># ===== Chat Completions runner =====
</span><span class="k">def</span> <span class="nf">run_chat</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>  <span class="c1"># "plain" | "json_mode" | "structured"
</span>    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="o">=</span><span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">))</span>

    <span class="n">system_msg</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: List files in ./samples, pick a text file, read it, and return a short 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">When asked to answer in JSON, reply only with an object: {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string}.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_msg</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">messages</span><span class="sh">"</span><span class="p">:</span> <span class="n">messages</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">,</span> <span class="sh">"</span><span class="s">mode</span><span class="sh">"</span><span class="p">:</span> <span class="n">mode</span><span class="p">}</span>
    <span class="n">outputs_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Chat Completions)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
                <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

            <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                    <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                    <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                    <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                      <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
                <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                                 <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
                <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

                <span class="n">completion</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">response_format</span><span class="o">=</span><span class="n">TaskAnswer</span>
                <span class="p">)</span>
                <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">completion</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="n">msg</span> <span class="o">=</span> <span class="n">completion</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

            <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
            <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR(Chat structured) ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

    <span class="k">elif</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># Force JSON output
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">response_format</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">response_format</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="c1"># Try to parse JSON
</span>        <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat json_mode)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">result_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">result_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>  <span class="c1"># plain
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Chat)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_args</span><span class="p">})</span>
                <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                                  <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                             <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Chat plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">})</span>

    <span class="c1"># Save IO logs
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">outputs_dump</span><span class="p">)</span>

<span class="c1"># ===== Responses runner =====
</span><span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span>
    <span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span>
    <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>  <span class="c1"># "plain" | "json_mode" | "structured"
</span>    <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">run_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">make_tools</span><span class="p">(</span><span class="n">tools_variant</span><span class="p">,</span> <span class="n">structured</span><span class="o">=</span><span class="p">(</span><span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">))</span>

    <span class="n">system_inst</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Task: List files in ./samples, pick a text file, read it, and return a short 2-3 sentence summary. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">If JSON is requested, reply only with an object: {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string}.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_inst</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">input_snapshot</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">input</span><span class="sh">"</span><span class="p">:</span> <span class="n">input_list</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="sh">"</span><span class="s">tools</span><span class="sh">"</span><span class="p">:</span> <span class="n">tools</span><span class="p">,</span> <span class="sh">"</span><span class="s">mode</span><span class="sh">"</span><span class="p">:</span> <span class="n">mode</span><span class="p">}</span>
    <span class="n">outputs_dump</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">입력(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">input_snapshot</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

            <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
                <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                    <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                    <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                    <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                        <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                    <span class="p">})</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span> <span class="n">text_format</span><span class="o">=</span><span class="n">TaskAnswer</span>
                <span class="p">)</span>
                <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
                <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

            <span class="n">parsed</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output_parsed</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">out_obj</span> <span class="o">=</span> <span class="n">parsed</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="n">parsed</span> <span class="k">else</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))}</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses structured)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">out_obj</span><span class="p">)</span>
            <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">out_obj</span><span class="p">)</span>

        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR(Responses structured) ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

    <span class="k">elif</span> <span class="n">mode</span> <span class="o">==</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">text</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">}},</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">text</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">format</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">json_object</span><span class="sh">"</span><span class="p">}},</span>
            <span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="c1"># Try to parse JSON text
</span>        <span class="n">result_text</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">output_text</span> <span class="ow">or</span> <span class="sh">""</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">result_text</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">result_obj</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">filename</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">contents</span><span class="sh">"</span><span class="p">:</span> <span class="n">result_text</span><span class="p">}</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses json_mode)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">result_obj</span><span class="p">)</span>
        <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">result.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">result_obj</span><span class="p">)</span>

    <span class="k">else</span><span class="p">:</span>  <span class="c1"># plain
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses step 1)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
        <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">:</span>
            <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">툴 요청(Responses)</span><span class="sh">"</span><span class="p">,</span> <span class="n">YELLOW</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]})</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">})</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">)</span>
            <span class="n">outputs_dump</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력(Responses next)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">model_dump_json</span><span class="p">()))</span>
            <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

        <span class="nf">print_section</span><span class="p">(</span><span class="sh">"</span><span class="s">출력 요약(Responses plain)</span><span class="sh">"</span><span class="p">,</span> <span class="n">GREEN</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))})</span>

    <span class="c1"># Save IO logs
</span>    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">input.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">input_snapshot</span><span class="p">)</span>
    <span class="nf">write_json</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">run_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">outputs.json</span><span class="sh">"</span><span class="p">),</span> <span class="n">outputs_dump</span><span class="p">)</span>

<span class="c1"># ===== 24-combo driver =====
</span><span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나를 골라 내용을 읽고 2~3문장으로 요약해줘. </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">가능하다면 JSON으로 {</span><span class="se">\"</span><span class="s">filename</span><span class="se">\"</span><span class="s">: string, </span><span class="se">\"</span><span class="s">contents</span><span class="se">\"</span><span class="s">: string} 형태로 답해줘.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">mode</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">base_runs_dir</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">label</span> <span class="o">=</span> <span class="nf">combo_label</span><span class="p">(</span><span class="n">model_key</span><span class="p">,</span> <span class="n">api_type</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">)</span>
    <span class="n">run_dir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_runs_dir</span><span class="p">,</span> <span class="n">label</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">run_dir</span><span class="p">)</span>

    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="s"> mode=</span><span class="si">{</span><span class="n">mode</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_chat</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">,</span> <span class="n">mode</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">run_dir</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">RED</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span> <span class="o">+</span> <span class="n">RESET</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 24 combos: 2 models × 2 APIs × 2 tool JSONs × 3 modes.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--modes</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">plain</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--runs_dir</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">./runs/</span><span class="si">{</span><span class="nf">now_id</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">ensure_dirs</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>
    <span class="n">mode_list</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">plain</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">json_mode</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">structured</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">modes</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">modes</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">md</span> <span class="ow">in</span> <span class="n">mode_list</span><span class="p">:</span>
                    <span class="nf">run_one</span><span class="p">(</span><span class="n">mk</span><span class="p">,</span> <span class="n">api</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">runs_dir</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 팁</p>

<ul>
  <li>
    <p>json_mode가 가장 안정적으로 {"filename","contents"}를 뱉어 줄 거야. structured는 SDK/모델의 strict 정책에 따라 여전히 실패할 수 있지만, 스크립트는 개별 조합별로 에러를 삼키고 계속 진행한다.</p>
  </li>
  <li>
    <p>모든 조합의 입력/출력(raw)을 저장해서 리그레션 비교가 가능해. json_mode/structured는 result.json을 따로 저장하므로 바로 사용할 수 있어.</p>
  </li>
  <li>
    <p>필요하면 system 메시지의 지시를 수정해서 contents에 “요약” 대신 “원문 전체”를 넣도록 바꿀 수도 있어.</p>
  </li>
</ul>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">OpenAI 함수 호출 테스트</title><link href="https://hvppyarchive.github.io/llm/openai-function-call-examples/" rel="alternate" type="text/html" title="OpenAI 함수 호출 테스트" /><published>2025-10-22T16:55:18+09:00</published><updated>2025-10-22T16:55:18+09:00</updated><id>https://hvppyarchive.github.io/llm/openai-function-call-examples</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/openai-function-call-examples/"><![CDATA[<p class="chat--user">

openai package를 사용하는 테스트 코드 작성할거야. 목표: 2가지 모델에 대해 2가지 api type(completions, responses)에 대해 function calling 테스트를 하고 싶어. 총 4개 조합에 대해 설정할 수 있게 코드 작성 하자. 툴은 간단히 특정 폴더의 파일 조회, 특정 폴더의 파일 읽기 두 가지 툴을 구현할거야 2개 모델에 대한 엔드포인트, api 키, 모델명을 코드 내에서 설정할 수 있도록 할 것.

</p>

<p>좋아! 아래는 “두 모델 × 두 API 타입(completions, responses) × 함수 호출(function calling)” 조합을 한 파일에서 모두 테스트할 수 있는 파이썬 스크립트야.<br />
요구사항 정리대로</p>

<ol>
  <li>
    <p>두 가지 파일 관련 툴(폴더 내 파일 목록 조회, 파일 읽기)</p>
  </li>
  <li>
    <p>2개 모델에 대한 엔드포인트·API 키·모델명을 코드 내에서 설정 가능</p>
  </li>
  <li>
    <p>4가지 조합을 원하는 대로 실행 가능</p>
  </li>
</ol>

<p>을 모두 담았어. 최신 OpenAI Python SDK의 사용법과 Responses API의 툴 호출 흐름은 공식 문서의 구조를 따랐어. 참고: function calling과 tools 정의 방식은 공식 가이드와 동일하고, Chat Completions API에서는 tool_calls를 message에, Responses API에서는 output 항목과 tool_calls를 통해 주고받는 형태야. 관련 문서: Function Calling 가이드와 Responses API 레퍼런스. <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼+1</a></p>

<p>스크립트는 다음처럼 동작해</p>

<ul>
  <li>
    <p>MODELS 섹션에서 model A/B의 endpoint, api_key, model 이름을 채워둔다(예시 포함).</p>
  </li>
  <li>
    <p>TOOL 정의는 공통(JSON Schema).</p>
  </li>
  <li>
    <p>run_with_chat_completions(…), run_with_responses(…) 두 함수가 각각 함수 호출 루프를 수행.</p>
  </li>
  <li>
    <p>main에서 네 가지 조합을 순차 실행하거나, 원하는 조합만 선택 실행하도록 CLI 옵션 제공.</p>
  </li>
</ul>

<p>코드 복사해서 test_openai_tools.py로 저장한 뒤, samples 폴더에 테스트용 파일을 몇 개 넣고 돌려봐.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_openai_tools.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# 1) 구성(모델/엔드포인트/키)
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>               <span class="c1"># ex) "https://api.openai.com/v1"
</span>    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>                <span class="c1"># ex) os.getenv("OPENAI_API_KEY")
</span>
<span class="c1"># 여기서 두 모델에 대한 엔드포인트/키/모델명을 설정하세요.
# 실제 키를 코드에 하드코딩하지 말고, 환경변수를 권장합니다.
</span><span class="n">MODELS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">,</span>          <span class="c1"># 예시 (원하는 최신 모델명으로 변경)
</span>        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>           <span class="c1"># 예시 (원하는 최신 모델명으로 변경)
</span>        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =====================================
# 2) 로컬 파일 툴(폴더 목록/파일 읽기)
# =====================================
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">지정 폴더 내 파일 목록 반환(파일만).</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">items</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">items</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))]</span>
    <span class="k">return</span> <span class="n">files</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">지정 경로의 텍스트 파일 내용 반환(UTF-8 가정).</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
        <span class="c1"># 바이너리 등 텍스트가 아닌 경우
</span>        <span class="k">return</span> <span class="sh">""</span>

<span class="c1"># 공통 툴 스키마(JSON Schema; Chat Completions/Responses에서 그대로 사용)
</span><span class="n">TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content as a string.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative path to the text file.</span><span class="sh">"</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># 툴 디스패처
</span><span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder</span><span class="p">),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">file_path</span> <span class="o">=</span> <span class="n">arguments</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># =====================================
# 3) Chat Completions로 함수 호출 테스트
# =====================================
</span>
<span class="k">def</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Chat Completions API로 function calling 테스트.
    - tools: TOOLS
    - tool_choice: </span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="s"> 권장
    - tool_calls -&gt; 실제 파이썬 함수 실행 -&gt; tool 메시지 첨부 -&gt; 재호출
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="c1"># 1차 호출
</span>    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tool_choice</span>  <span class="c1"># 'auto' or {'type':'function','function':{'name':'...'}}
</span>    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="c1"># 함수 호출 루프
</span>    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>

            <span class="c1"># tool 메시지 첨부
</span>            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_output</span>
            <span class="p">})</span>

        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="c1"># 후속 호출(최종 답변 유도)
</span>        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =====================================
# 4) Responses API로 함수 호출 테스트
#    - 최신 SDK 규약에 맞춰 비스트리밍 루프 구성
# =====================================
</span>
<span class="k">def</span> <span class="nf">extract_text_from_responses_output</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Responses API의 output 배열에서 자연어 텍스트만 모아 반환.</span><span class="sh">"""</span>
    <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="c1"># item.type == "message" 인 경우, item.content[*] 중 type == "output_text"
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="c1"># 일부 모델은 최종에 바로 output_text만 내보내기도 함
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">extract_tool_calls_from_responses_output</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 output에서 tool_call 이벤트를 수집.
    각 항목은 {id, name, arguments} 형태로 정규화해서 반환.
    </span><span class="sh">"""</span>
    <span class="n">calls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="c1"># 케이스1: item.type == "tool_call"
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">tool_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">tc</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}</span>
            <span class="p">}</span>
            <span class="c1"># arguments는 문자열/딕셔너리 모두 가능성 고려
</span>            <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">tc</span><span class="p">)</span>

        <span class="c1"># 케이스2: item.type == "message" 내부 content[*]에 tool_calls 묶여있을 수 있음
</span>        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="c1"># 일부 SDK 버전에서 item.tool_calls 또는 item.content[*].tool_calls 형태
</span>            <span class="n">inner_calls</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner_calls</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner_calls</span><span class="p">:</span>
                    <span class="n">arg_obj</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="p">{}</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">arg_obj</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">arg_obj</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">arg_obj</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">arg_obj</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">arg_obj</span> <span class="ow">or</span> <span class="p">{}</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tool_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Responses API로 function calling 테스트.
    흐름:
      1) responses.create(input=[{role:user, content:...}], tools=TOOLS, tool_choice=...)
      2) tool_call이 있으면 로컬 함수 실행
      3) responses.create(..., tool_outputs=[{tool_call_id, output}], response_id=prev.id) 로 이어서 호출
         (최신 문서의 규약을 따름)
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="c1"># 1차 호출
</span>    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}],</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tool_choice</span>
    <span class="p">)</span>

    <span class="c1"># 루프: 도구 호출이 끝날 때까지
</span>    <span class="n">final_text_parts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="p">:</span>  <span class="c1"># 안전 상한
</span>        <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">tool_calls</span> <span class="o">=</span> <span class="nf">extract_tool_calls_from_responses_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="n">plain_text</span> <span class="o">=</span> <span class="nf">extract_text_from_responses_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="n">plain_text</span><span class="p">:</span>
            <span class="n">final_text_parts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">plain_text</span><span class="p">)</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">tool_calls</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">tool_outputs_payload</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs_payload</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span>
            <span class="p">})</span>

        <span class="c1"># 이전 response와 이어 붙여 툴 결과를 전달
</span>        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">,</span>
            <span class="n">response_id</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs_payload</span>
        <span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">p</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">final_text_parts</span> <span class="k">if</span> <span class="n">p</span><span class="p">])</span>

<span class="c1"># =====================================
# 5) 실행부(4가지 조합)
# =====================================
</span>
<span class="n">DEFAULT_USER_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더 안의 파일 목록을 보여주고, 텍스트 파일이 하나라도 있으면 </span><span class="sh">"</span>
    <span class="sh">"</span><span class="s">그 중 하나의 내용을 읽어서 핵심만 2~3문장으로 요약해줘. 필요하면 툴을 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">combo_api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [</span><span class="si">{</span><span class="n">combo_api</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] with Model </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">) ===</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">combo_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">combo_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">combo_api must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Test function-calling with OpenAI (4-way matrix).</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Which API type to run.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">,</span>
                        <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">Which model to use.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="nb">str</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_USER_TASK</span><span class="p">,</span> <span class="n">help</span><span class="o">=</span><span class="sh">"</span><span class="s">User task/prompt.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">apis</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">api</span><span class="p">]</span>
    <span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">]</span>

    <span class="c1"># 샘플 폴더 안내
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">apis</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="nf">run_one</span><span class="p">(</span><span class="n">api</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>사용 방법 간단 정리</p>

<ol>
  <li>환경 변수 세팅(권장)</li>
</ol>

<ul>
  <li>
    <p>Model A</p>

    <ul>
      <li>
        <p>OPENAI_API_KEY=…</p>
      </li>
      <li>
        <p>OPENAI_BASE_URL=https://api.openai.com/v1</p>
      </li>
    </ul>
  </li>
  <li>
    <p>Model B</p>

    <ul>
      <li>
        <p>OPENAI_API_KEY_B=…</p>
      </li>
      <li>
        <p>OPENAI_BASE_URL_B=https://api.openai.com/v1</p>
      </li>
    </ul>
  </li>
</ul>

<ol>
  <li>테스트 파일 준비</li>
</ol>

<ul>
  <li>프로젝트 루트에 samples 폴더를 만들고, 텍스트 파일을 1개 이상 넣는다. 예: samples/readme.txt</li>
</ul>

<ol>
  <li>실행</li>
</ol>

<ul>
  <li>
    <p>네 조합 모두:<br />
python test_openai_tools.py</p>
  </li>
  <li>
    <p>특정 API만:<br />
python test_openai_tools.py –api completions<br />
python test_openai_tools.py –api responses</p>
  </li>
  <li>
    <p>특정 모델만:<br />
python test_openai_tools.py –model A<br />
python test_openai_tools.py –model B</p>
  </li>
  <li>
    <p>프롬프트 커스터마이즈:<br />
python test_openai_tools.py –task "여기에 원하는 테스트 지시문"</p>
  </li>
</ul>

<p>구현 포인트 설명(필요 시 점검할 체크리스트)</p>

<ul>
  <li>
    <p>Chat Completions: response.choices[0].message.tool_calls를 확인하고, 각 툴을 실행한 뒤 tool 메시지를 추가해서 재호출하는 전형적 루프를 사용했어. 이것은 Function Calling 가이드의 권고 패턴이야. <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Responses API: responses.create(…) → output에서 tool_call 이벤트를 수집 → 실제 함수 실행 → tool_outputs와 이전 response_id를 함께 넘겨 후속 responses.create(…) 호출로 이어 붙이는 패턴이야. 이 흐름은 공식 Responses API 레퍼런스가 안내하는 방식과 맞물려 있어. <a href="https://platform.openai.com/docs/api-reference/responses/create">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>tools 스키마는 두 API에서 동일하게 재사용.</p>
  </li>
  <li>
    <p>로컬 파일 I/O는 안전하게 예외 처리했고, 텍스트 파일로 가정(UTF-8)했지만 디코딩 실패 시 빈 문자열을 반환해 모델이 적절히 안내하도록 했어.</p>
  </li>
</ul>

<p>문서 참고 링크</p>

<ul>
  <li>
    <p>Function Calling 가이드(툴 정의/호출 흐름) <a href="https://platform.openai.com/docs/guides/function-calling">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>Responses API 레퍼런스(응답 구조, tool_outputs 전달 방식) <a href="https://platform.openai.com/docs/api-reference/responses/create">OpenAI 플랫폼</a></p>
  </li>
</ul>

<p>필요하면</p>

<ul>
  <li>
    <p>모델명만 바꿔서(예: 최신 gpt-4.1 계열 등) 즉시 시험 가능</p>
  </li>
  <li>
    <p>tool_choice를 "any"로 바꾸면 여러 툴 병렬 호출 경향을 더 시험할 수 있어</p>
  </li>
  <li>
    <p>samples 폴더 경로나 읽을 파일 선택 로직을 더 엄격하게 지정하고 싶다면, 프롬프트를 고정(seed task)하거나 시스템 메시지쪽에 규칙을 더해도 좋아</p>
  </li>
</ul>

<p>원하는 부분 더 바꿔드릴게.</p>

<p class="chat--user">

아니 내가 조사했을 때 responses용 툴 json이 있고, completion용이 따로 있어 조금 다르게 생겼던데 찾아서 반영해줘

</p>

<p>좋은 지적이야. 실제로 “도구 정의(tools JSON)”는 두 API가 거의 같지만, Responses API는 실행·상태 전파 방식(response_id, tool_outputs 등)과 출력 구조가 다르고, 가이드에선 Responses 예시에서 엄격 파싱(strict) 옵션을 곁들여 쓰는 패턴이 자주 보여서 모양이 살짝 달라 보일 수 있어. 그래서 아래처럼 아예 두 벌의 스키마를 분리해 두고, Responses 쪽엔 엄격 파싱을 넣는 식으로 반영했어. 또한 Responses는 tool_outputs와 response_id를 통해 단계적으로 이어붙이는 점을 코드에 명확히 했어. 참고 문서: Function Calling 가이드와 Responses API 레퍼런스. <a href="https://platform.openai.com/docs/guides/function-calling/supported-models?utm_source=chatgpt.com">OpenAI 플랫폼+2</a></p>

<p>아래 스크립트는 네 가지 조합(모델 A/B × completions/responses) 모두 함수 호출을 시험하고, 두 종류의 파일 툴을 제공해. 변경 포인트는 1) CHAT_TOOLS vs RESPONSES_TOOLS 분리, 2) Responses 루프에서 tool_outputs·response_id 사용을 더 엄격히, 3) Responses 출력 파서 보강이야.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_openai_tools_split_tools.py
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># 공통 실제 구현 함수
</span><span class="kn">import</span> <span class="n">os</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))]</span>
    <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">UnicodeDecodeError</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span>

<span class="c1"># Chat Completions 전용 도구 JSON
# - 전통적인 function calling 스키마
</span><span class="n">CHAT_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Path to the text file.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># Responses 전용 도구 JSON
# - 스키마 필드는 유사하지만, Responses 예제 관례에 맞춰 strict를 켬
#   (모델이 schema에 정확히 맞춰 인자 생성하도록 강제)
</span><span class="n">RESPONSES_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Path to the text file.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">strict</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">CHAT_TOOLS</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="n">tools_choice</span>
    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># 각 툴 실행
</span>        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>
            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">output</span><span class="p">})</span>
        <span class="c1"># 대화 이어붙이기
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># Responses 출력 파서
</span><span class="k">def</span> <span class="nf">_extract_text</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">chunks</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">_extract_tool_calls</span><span class="p">(</span><span class="n">output_items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output_items</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">tool_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}})</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner_calls</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner_calls</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner_calls</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span> <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span> <span class="ow">or</span> <span class="p">{}</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_choice</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}],</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">RESPONSES_TOOLS</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="n">tools_choice</span>
    <span class="p">)</span>

    <span class="n">final_text</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="c1"># Responses는 tool_outputs + response_id로 상태를 이어서 보낸다.
</span>    <span class="c1"># 이어붙이기 패턴은 공식 레퍼런스의 흐름과 동일. :contentReference[oaicite:1]{index=1}
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>  <span class="c1"># 안전 상한
</span>        <span class="n">txt</span> <span class="o">=</span> <span class="nf">_extract_text</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="n">txt</span><span class="p">:</span>
            <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt</span><span class="p">)</span>

        <span class="n">calls</span> <span class="o">=</span> <span class="nf">_extract_tool_calls</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
            <span class="k">break</span>

        <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">})</span>

        <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">RESPONSES_TOOLS</span><span class="p">,</span>
            <span class="n">response_id</span><span class="o">=</span><span class="n">r</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>          <span class="c1"># 이전 응답과 연결
</span>            <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs</span>  <span class="c1"># 툴 실행 결과 전달
</span>        <span class="p">)</span>

    <span class="k">return</span> <span class="sh">"</span><span class="se">\n\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나 골라 내용을 읽고 2~3문장 요약. 필요하면 툴 사용.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">which_api</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [</span><span class="si">{</span><span class="n">which_api</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] Model </span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s">) ===</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">which_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">which_api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">out</span> <span class="o">=</span> <span class="nf">run_with_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">which_api must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">()</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--api</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--model</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="n">apis</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">api</span> <span class="o">==</span> <span class="sh">"</span><span class="s">all</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">api</span><span class="p">]</span>
    <span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">model</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">model</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">apis</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">models</span><span class="p">:</span>
            <span class="nf">run_one</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>
</code></pre></div></div>

<p>핵심 차이 정리 단계별</p>

<ol>
  <li>
    <p>도구 정의 자체는 필드 구조가 동일(type=function, function.name/description/parameters)하되, Responses 쪽 예시에서는 strict를 켜서 JSON Schema를 엄격히 지키게 하는 패턴이 널리 쓰인다. 그래서 스키마가 “조금 다르게 생긴 것처럼” 보일 수 있다. <a href="https://platform.openai.com/docs/guides/function-calling/supported-models?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>Chat Completions는 messages 배열에 assistant.tool_calls가 나오고, 각 call.id에 대응하는 tool 메시지를 넣어 다시 chat.completions.create를 호출한다.</p>
  </li>
  <li>
    <p>Responses는 output에 tool_call 항목이 나오며, 실제 도구 실행 후 tool_outputs 배열과 이전 응답의 response_id를 포함해 responses.create를 다시 호출해 상태를 이어 붙인다. 이게 가장 큰 차이점이다. <a href="https://platform.openai.com/docs/api-reference/responses-streaming/response?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ol>

<p>이 버전으로 돌려보고, Responses에서 strict를 끄고 싶으면 RESPONSES_TOOLS에서 "strict": True만 빼면 돼. 모델·엔드포인트·키는 상단 MODELS에서 조정 가능하고, samples 폴더에 테스트 파일만 있으면 바로 네 조합을 모두 확인할 수 있어.</p>

<p class="chat--user">

아니 예시를 좀 찾아봐.. from openai import OpenAI import json client = OpenAI() # 1. Define a list of callable tools for the model tools = [ { "type": "function", "name": "get_horoscope", "description": "Get today's horoscope for an astrological sign.", "parameters": { "type": "object", "properties": { "sign": { "type": "string", "description": "An astrological sign like Taurus or Aquarius", }, }, "required": ["sign"], }, }, ] def get_horoscope(sign): return f"{sign}: Next Tuesday you will befriend a baby otter." # Create a running input list we will add to over time input_list = [ {"role": "user", "content": "What is my horoscope? I am an Aquarius."} ] # 2. Prompt the model with tools defined response = client.responses.create( model="gpt-5", tools=tools, input=input_list, ) # Save function call outputs for subsequent requests input_list += response.output for item in response.output: if item.type == "function_call": if item.name == "get_horoscope": # 3. Execute the function logic for get_horoscope horoscope = get_horoscope(json.loads(item.arguments)) # 4. Provide function call results to the model input_list.append({ "type": "function_call_output", "call_id": item.call_id, "output": json.dumps({ "horoscope": horoscope }) }) print("Final input:") print(input_list) response = client.responses.create( model="gpt-5", instructions="Respond only with a horoscope generated by a tool.", tools=tools, input=input_list, ) # 5. The model should be able to give a response! print("Final output:") print(response.model_dump_json(indent=2)) print("\n" + response.output_text) 그러면 총 8개 조합이 나오지? 모델 x API 타입(completion, responses) x json 형태 이 8개 조합에 대해 각각 테스트하는 코드를 짜줘 이 때 실행 중 에러가 나는 경우에는 에러만 출력하고 나머지가 잘 수행되게 해줘.

</p>

<p>좋아. “2개 모델 × 2개 API(completions, responses) × 2가지 tools JSON 형태(Completions 스타일 vs Responses 스타일)” = 총 8개 조합을 한 번에 돌려보는 테스트 스크립트를 준비했어. 각 조합은 개별 try/except로 감싸 에러가 나더라도 나머지가 계속 수행돼. tools JSON은 네가 준 Responses 스타일 예시(평평한 형태: type/name/parameters가 최상위)와, Chat Completions에서 흔히 쓰는 중첩 형태({"type":"function","function":{…}})를 각각 분리해 두었고, 일부 조합은 의도적으로 “맞지 않는 형태”를 넣었기 때문에 실패할 수도 있어(그 경우 에러만 출력). 참고로 Responses와 Chat Completions의 차이, strict 옵션 등은 최신 가이드에 정리돼 있어. <a href="https://platform.openai.com/docs/guides/responses-vs-chat-completions?utm_source=chatgpt.com">OpenAI 플랫폼+2</a></p>

<p>아래 파일을 test_8combos_tools.py로 저장해서 실행하면 돼.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test_8combos_tools.py
# Python 3.10+
# pip install --upgrade openai
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">argparse</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Optional</span>

<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># =========================
# 0) 모델 설정
# =========================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">ModelConfig</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">base_url</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">api_key</span><span class="p">:</span> <span class="nb">str</span>

<span class="n">MODELS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">ModelConfig</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_A_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4.1-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_A</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
    <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">:</span> <span class="nc">ModelConfig</span><span class="p">(</span>
        <span class="n">name</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL_B_NAME</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">https://api.openai.com/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY_B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">YOUR_KEY_FOR_MODEL_B</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">),</span>
<span class="p">}</span>

<span class="c1"># =========================
# 1) 로컬 툴 구현
# =========================
</span>
<span class="k">def</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">sorted</span><span class="p">([</span>
            <span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">folder_path</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">folder_path</span><span class="p">,</span> <span class="n">f</span><span class="p">))</span>
        <span class="p">])</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">file_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">file_path</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="sh">""</span>

<span class="k">def</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    모든 툴의 결과를 dict로 통일해서 반환.
    Responses의 function_call_output에 넣기 좋게 {</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="s">: ...} 형태로 감싸준다.
    </span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">folder</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">list_files_in_folder</span><span class="p">(</span><span class="n">folder</span><span class="p">)}</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">path</span> <span class="o">=</span> <span class="n">args</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">read_text_file</span><span class="p">(</span><span class="n">path</span><span class="p">)}</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># =========================
# 2) tools JSON 두 가지 형태
# =========================
</span>
<span class="c1"># (A) Chat Completions 스타일: function 필드에 중첩
</span><span class="n">CHAT_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># (B) Responses 스타일: 네가 준 예시처럼 평평한 형태(일부 문서/예시에서 보이는 포맷)
</span><span class="n">RESPONSES_STYLE_TOOLS</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_files_in_folder</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List file names (not directories) inside a given folder path.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative folder path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">folder_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True  # 필요 시 켜서 인자 스키마 준수 강제 (도움말 참조)
</span>    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text_file</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a UTF-8 text file and return its content.</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Absolute or relative file path.</span><span class="sh">"</span><span class="p">}</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">file_path</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="c1"># "strict": True
</span>    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># =========================
# 3) Chat Completions 쪽 함수 호출 루프
# =========================
</span>
<span class="k">def</span> <span class="nf">run_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s">  -&gt; CHAT_STYLE_TOOLS 사용 (권장)
    </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s"> -&gt; RESPONSES_STYLE_TOOLS 사용 (의도적 비호환 가능)
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">CHAT_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">chat</span><span class="sh">"</span> <span class="k">else</span> <span class="n">RESPONSES_STYLE_TOOLS</span>

    <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You are a helpful assistant that uses tools when needed.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="c1"># tool_calls 루프
</span>    <span class="n">guard</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="n">guard</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>
        <span class="n">guard</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">fn_name</span> <span class="o">=</span> <span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="c1"># arguments는 문자열일 수 있음
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">fn_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">fn_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">tool_output</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">fn_name</span><span class="p">,</span> <span class="n">fn_args</span><span class="p">)</span>

            <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">fn_name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">tool_output</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
            <span class="p">})</span>

        <span class="c1"># 대화 이어붙이기
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="n">tc</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">for</span> <span class="n">tc</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">],</span>
        <span class="p">})</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>

    <span class="k">return</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =========================
# 4) Responses 쪽 함수 호출 루프
# =========================
</span>
<span class="k">def</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 output 배열에서 function_call / tool_call 류 이벤트를 추출.
    다양한 케이스를 최대한 관대하게 처리한다.
    </span><span class="sh">"""</span>
    <span class="n">calls</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="n">itype</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

        <span class="c1"># 케이스 A: item.type == "function_call"
</span>        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
            <span class="p">})</span>

        <span class="c1"># 케이스 B: 일부 모델이 "tool_call" / item.message.tool_calls 형태로 줄 때
</span>        <span class="k">if</span> <span class="n">itype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">inner</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inner</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">inner</span><span class="p">:</span>
                    <span class="n">nm</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                    <span class="n">args</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}),</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">args</span> <span class="o">=</span> <span class="p">{}</span>
                    <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                        <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">nm</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">args</span> <span class="ow">or</span> <span class="p">{},</span>
                    <span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="n">output</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">texts</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">output</span> <span class="ow">or</span> <span class="p">[]:</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[]:</span>
                <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                    <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">:</span> <span class="n">ModelConfig</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tools_variant: </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s"> 또는 </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="s"> -&gt; RESPONSES_STYLE_TOOLS 사용 (권장)
    </span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="s">      -&gt; CHAT_STYLE_TOOLS 사용 (의도적 비호환 가능)
    순수 Responses 방식: 네가 준 예시 패턴(input_list 축적 + function_call_output)로 구현.
    </span><span class="sh">"""</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">base_url</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">api_key</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="n">RESPONSES_STYLE_TOOLS</span> <span class="k">if</span> <span class="n">tools_variant</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span> <span class="k">else</span> <span class="n">CHAT_STYLE_TOOLS</span>

    <span class="c1"># running input_list
</span>    <span class="n">input_list</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_task</span><span class="p">}</span>
    <span class="p">]</span>

    <span class="n">r</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># function_call 처리
</span>    <span class="n">input_list</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span> <span class="ow">or</span> <span class="p">[])</span>

    <span class="c1"># call들을 찾아 실행하고, function_call_output을 이어 붙임
</span>    <span class="n">calls</span> <span class="o">=</span> <span class="nf">_collect_function_calls_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">dispatch_tool</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">input_list</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function_call_output</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
            <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
        <span class="p">})</span>

    <span class="c1"># 최종 응답 시도(지시문을 추가적으로 줄 수도 있음)
</span>    <span class="n">r2</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
        <span class="n">instructions</span><span class="o">=</span><span class="sh">"</span><span class="s">Respond with a short summary of what you found.</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">input_list</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># 텍스트 추출(중간/최종)
</span>    <span class="n">final_text</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">txt1</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">if</span> <span class="n">txt1</span><span class="p">:</span> <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt1</span><span class="p">)</span>
    <span class="n">txt2</span> <span class="o">=</span> <span class="nf">_collect_text_from_output</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">r2</span><span class="p">,</span> <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]))</span>
    <span class="k">if</span> <span class="n">txt2</span><span class="p">:</span> <span class="n">final_text</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">txt2</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">final_text</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="c1"># =========================
# 5) 8개 조합 실행기
# =========================
</span>
<span class="n">DEFAULT_TASK</span> <span class="o">=</span> <span class="p">(</span>
    <span class="sh">"</span><span class="s">테스트: ./samples 폴더의 파일 목록을 보여주고, 텍스트 파일이 있으면 하나 골라 내용을 읽고 2~3문장 요약. 필요하면 도구를 사용해.</span><span class="sh">"</span>
<span class="p">)</span>

<span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">api_type</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model_key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">user_task</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">cfg</span> <span class="o">=</span> <span class="n">MODELS</span><span class="p">[</span><span class="n">model_key</span><span class="p">]</span>
    <span class="n">header</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">[</span><span class="si">{</span><span class="n">api_type</span><span class="p">.</span><span class="nf">upper</span><span class="p">()</span><span class="si">}</span><span class="s">] model=</span><span class="si">{</span><span class="n">model_key</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">cfg</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> tools_json=</span><span class="si">{</span><span class="n">tools_variant</span><span class="si">}</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s"> </span><span class="si">{</span><span class="n">header</span><span class="si">}</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="o">*</span> <span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">header</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">))</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">run_chat_completions</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">api_type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">out</span> <span class="o">=</span> <span class="nf">run_responses</span><span class="p">(</span><span class="n">cfg</span><span class="p">,</span> <span class="n">user_task</span><span class="p">,</span> <span class="n">tools_variant</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">api_type must be </span><span class="sh">'</span><span class="s">completions</span><span class="sh">'</span><span class="s"> or </span><span class="sh">'</span><span class="s">responses</span><span class="sh">'"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- OUTPUT ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">(empty)</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">--- ERROR ---</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">e</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">parser</span> <span class="o">=</span> <span class="n">argparse</span><span class="p">.</span><span class="nc">ArgumentParser</span><span class="p">(</span><span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">Run 8 combinations: 2 models × 2 APIs × 2 tools JSON styles.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--task</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">DEFAULT_TASK</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--models</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--apis</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="c1"># tools_variant를 "both"로 두면 각 API에서 chat/​responses 두 가지 툴 JSON 모두 시도 → 8조합
</span>    <span class="n">parser</span><span class="p">.</span><span class="nf">add_argument</span><span class="p">(</span><span class="sh">"</span><span class="s">--tools</span><span class="sh">"</span><span class="p">,</span> <span class="n">choices</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">],</span> <span class="n">default</span><span class="o">=</span><span class="sh">"</span><span class="s">both</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="nf">parse_args</span><span class="p">()</span>

    <span class="c1"># 샘플 폴더 생성 안내
</span>    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./samples</span><span class="sh">"</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="n">model_keys</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">models</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">models</span><span class="p">]</span>
    <span class="n">api_types</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">completions</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">apis</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">apis</span><span class="p">]</span>
    <span class="n">tool_variants</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">chat</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">responses</span><span class="sh">"</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span><span class="p">.</span><span class="n">tools</span> <span class="o">==</span> <span class="sh">"</span><span class="s">both</span><span class="sh">"</span> <span class="k">else</span> <span class="p">[</span><span class="n">args</span><span class="p">.</span><span class="n">tools</span><span class="p">]</span>

    <span class="c1"># 8조합: 2모델 × 2API × 2JSON
</span>    <span class="k">for</span> <span class="n">mk</span> <span class="ow">in</span> <span class="n">model_keys</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">api</span> <span class="ow">in</span> <span class="n">api_types</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">tv</span> <span class="ow">in</span> <span class="n">tool_variants</span><span class="p">:</span>
                <span class="nf">run_one</span><span class="p">(</span><span class="n">api</span><span class="p">,</span> <span class="n">mk</span><span class="p">,</span> <span class="n">tv</span><span class="p">,</span> <span class="n">args</span><span class="p">.</span><span class="n">task</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="nf">main</span><span class="p">()</span>
</code></pre></div></div>

<p>실행 예시<br />
python test_8combos_tools.py<br />
python test_8combos_tools.py –apis completions –tools both<br />
python test_8combos_tools.py –models A –apis responses –tools responses</p>

<p>포인트 요약</p>

<ol>
  <li>
    <p>CHAT_STYLE_TOOLS와 RESPONSES_STYLE_TOOLS를 분리해 두었고, Responses 루프는 네가 붙여준 예시처럼 input_list에 function_call과 function_call_output을 누적하는 방식으로 구현했어. 일부 문서/예시에선 strict를 켜 JSON 스키마를 강제하니 필요하면 해당 키를 켜면 돼. <a href="https://platform.openai.com/docs/guides/function-calling?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>일부 조합은 의도적으로 호환되지 않아 에러가 날 수 있어(예: Chat Completions에 Responses 스타일 tools). 모든 run은 try/except로 감싸 실패해도 나머지가 이어진다.</p>
  </li>
  <li>
    <p>최신 차이점과 권장 흐름은 Responses vs Chat Completions 가이드에서 비교 가능해. <a href="https://platform.openai.com/docs/guides/responses-vs-chat-completions?utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ol>

<p>더 엄격하게 Responses의 “response_id + tool_outputs” 방식으로 이어붙이는 버전도 원하면 따로 추가해줄게.</p>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">OpenAI MCP</title><link href="https://hvppyarchive.github.io/llm/openai-mcp/" rel="alternate" type="text/html" title="OpenAI MCP" /><published>2025-10-22T15:49:23+09:00</published><updated>2025-10-22T15:49:23+09:00</updated><id>https://hvppyarchive.github.io/llm/openai-mcp</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/openai-mcp/"><![CDATA[<p class="chat--user">

openai package에서 responses 쿼리있잖아

</p>

<p>맞아요. 최신 OpenAI Python SDK(패키지명: openai)에는 “Responses API”가 있고, 파이썬에선 <code class="language-plaintext highlighter-rouge">client.responses.create(...)</code>로 호출합니다. 핵심 포인트만 단계별로 정리해 드릴게요.</p>

<ol>
  <li>기본 호출<br />
파이썬에서 한 줄 문자열 입력이면 가장 간단합니다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">()</span>

<span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">input</span><span class="o">=</span><span class="sh">"</span><span class="s">안녕! 오늘 뭐할까?</span><span class="sh">"</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">output_text</span><span class="p">)</span>
</code></pre></div></div>

<p>이 방식과 파라미터의 의미는 공식 레퍼런스 “Responses API → create”에 정리돼 있습니다. <a href="https://platform.openai.com/docs/api-reference/responses">OpenAI 플랫폼+1</a></p>

<ol>
  <li>스트리밍(토큰 단위로 받아보기)<br />
토큰이 생성될 때마다 이벤트를 받아 출력합니다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">()</span>

<span class="n">stream</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">input</span><span class="o">=</span><span class="sh">"</span><span class="s">한 줄씩 실시간으로 보내줘.</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>

<span class="n">final</span> <span class="o">=</span> <span class="bp">None</span>
<span class="k">for</span> <span class="n">event</span> <span class="ow">in</span> <span class="n">stream</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">response.output_text.delta</span><span class="sh">"</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">event</span><span class="p">.</span><span class="n">delta</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="sh">""</span><span class="p">)</span>
    <span class="k">elif</span> <span class="n">event</span><span class="p">.</span><span class="nb">type</span> <span class="o">==</span> <span class="sh">"</span><span class="s">response.completed</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">final</span> <span class="o">=</span> <span class="n">event</span><span class="p">.</span><span class="n">response</span>
<span class="c1"># 필요하면 final에 완료된 전체 응답 객체가 들어있음
</span></code></pre></div></div>

<p>스트리밍 이벤트 타입과 사용 예시는 공식 문서에 나옵니다. <a href="https://platform.openai.com/docs/api-reference/responses">OpenAI 플랫폼</a></p>

<ol>
  <li>여러 메시지(역할·컨텍스트) 넣기<br />
간단히는 문자열 하나지만, 대화 맥락을 주고 싶으면 <code class="language-plaintext highlighter-rouge">input</code>에 리스트로 메시지를 전달할 수 있습니다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">input</span><span class="o">=</span><span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">너는 간결하게 답하는 한국어 도우미야.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Responses API로 스트리밍은 어떻게 해?</span><span class="sh">"</span><span class="p">}</span>
    <span class="p">],</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">output_text</span><span class="p">)</span>
</code></pre></div></div>

<p>역할 기반 입력을 <code class="language-plaintext highlighter-rouge">input</code> 배열로 주는 포맷은 Responses API 레퍼런스에 명시돼 있습니다. <a href="https://platform.openai.com/docs/api-reference/responses">OpenAI 플랫폼</a></p>

<ol>
  <li>함수 호출(툴 호출)<br />
외부 함수를 스키마로 선언해 모델이 필요할 때 호출하게 할 수 있습니다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">tools</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">get_weather</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">도시 현재 날씨 조회</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">city</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">city</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">},</span>
        <span class="p">},</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">input</span><span class="o">=</span><span class="sh">"</span><span class="s">서울 날씨 알려줘.</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
    <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="c1"># resp.output[0] 안의 tool_call(또는 스트리밍 이벤트)로 함수 인자 확인 후 직접 실행 → 결과를 다시 모델에 피드백
</span></code></pre></div></div>

<p>툴(함수) 스키마와 동작은 Responses API 문서에서 확인할 수 있습니다. <a href="https://platform.openai.com/docs/api-reference/responses">OpenAI 플랫폼</a></p>

<ol>
  <li>기타 팁</li>
</ol>

<ul>
  <li>
    <p>응답 객체는 ID를 가지며, 필요 시 조회(또는 취소) 엔드포인트로 상태를 다룰 수 있습니다. <a href="https://platform.openai.com/docs/api-reference/responses">OpenAI 플랫폼</a></p>
  </li>
  <li>
    <p>최신 SDK와 예제들은 GitHub 레포에서도 확인 가능합니다(동일 API에 맞춘 코드 스타일). <a href="https://github.com/openai/openai-python?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p>빠르게 전체 흐름을 보고 싶으면 Quickstart의 Responses 모드가 도움이 됩니다. <a href="https://platform.openai.com/docs/quickstart?api-mode=responses&amp;utm_source=chatgpt.com">OpenAI 플랫폼</a></p>
  </li>
</ul>

<p>원하시는 게 “문법만 확인”인지, “스트리밍·툴 호출 포함해서 실전 스니펫 만들기”인지 알려주시면 거기에 맞춰 바로 코드 틀을 만들어 드릴게요.</p>

<p class="chat--user">

chat completion에도 tool이 있었는데 차이점

</p>

<p>좋은 질문이에요. 한마디로 요약하면, Chat Completions의 tool은 “함수 호출만” 깔끔히 붙이는 전통 방식이고, Responses의 tool은 그 위에 “빌트인 도구(코드 실행, 파일/웹 검색, 이미지 생성 등) + 더 유연한 스트리밍/출력 접근”까지 얹은 통합 설계입니다. 차이를 단계별로 정리해 드릴게요.</p>

<ol>
  <li>
    <p>철학과 범위<br />
Chat Completions: 대화 메시지 배열을 입력하고, 도구(tool=functions)로 외부 함수를 호출하는 심플한 패턴에 초점. 지금도 계속 지원됩니다. <a href="https://platform.openai.com/docs/api-reference/chat?utm_source=chatgpt.com">OpenAI 플랫폼+1</a><br />
Responses: “에이전틱” 워크플로우를 한 호출에 담기 위해 설계. 함수 호출은 물론이고, 웹/파일 검색, 이미지 생성, 코드 실행 같은 빌트인 툴을 모델이 필요할 때 조합해 쓰도록 지원합니다. 또한 SDK에서 <code class="language-plaintext highlighter-rouge">response.output_text</code> 같은 헬퍼로 결과 접근이 단순화됐습니다. <a href="https://openai.com/index/new-tools-for-building-agents/?utm_source=chatgpt.com">OpenAI+2</a></p>
  </li>
  <li>
    <p>지원 도구(툴) 종류<br />
Chat Completions: 툴 목록에 “functions”만 정의하고, 모델이 JSON 인자를 채워줍니다. 병렬 호출, <code class="language-plaintext highlighter-rouge">tool_choice</code> 강제 같은 옵션을 함께 사용합니다. <a href="https://platform.openai.com/docs/api-reference/chat?utm_source=chatgpt.com">OpenAI 플랫폼+1</a><br />
Responses: 사용자 정의 함수 호출은 기본이고, 여기에 Code Interpreter, 파일 검색, 이미지 생성, MCP 서버 연동 등 “빌트인 툴”을 공식적으로 붙일 수 있습니다. <a href="https://openai.com/index/new-tools-and-features-in-the-responses-api/?utm_source=chatgpt.com">OpenAI+1</a></p>
  </li>
  <li>
    <p>입력/출력 모델<br />
Chat Completions: 항상 메시지 리스트(messages) 스키마. 함수 반환을 “tool” 역할 메시지로 다시 넣어 이어가기. <a href="https://platform.openai.com/docs/api-reference/chat?utm_source=chatgpt.com">OpenAI 플랫폼</a><br />
Responses: 입력이 문자열·메시지 배열 모두 가능하고, 출력은 이벤트 기반 스트리밍과 “아이템” 단위로 구성됩니다. SDK는 <code class="language-plaintext highlighter-rouge">response.output_text</code> 등 통일된 접근기를 제공합니다. <a href="https://github.com/openai/openai-python?utm_source=chatgpt.com">GitHub+1</a></p>
  </li>
  <li>
    <p>스트리밍과 이벤트<br />
Chat Completions: 서버센트 이벤트(SSE)로 토큰 스트리밍. 도구 호출 신호도 메시지로 표현. <a href="https://platform.openai.com/docs/api-reference/chat?utm_source=chatgpt.com">OpenAI 플랫폼</a><br />
Responses: 세분화된 이벤트 타입으로 텍스트 델타, 툴 호출/출력, 완료 등을 구분해 받습니다. 복수 툴을 오가며 작업하는 흐름을 표준화했습니다. <a href="https://openai.com/index/new-tools-for-building-agents/?utm_source=chatgpt.com">OpenAI+1</a></p>
  </li>
  <li>
    <p>스키마 차이(툴 정의)<br />
Chat Completions 예시:<br />
tools=[{"type":"function","function":{"name":"get_weather","parameters":{…}}}] 처럼 함수가 function 키 아래에 들어갑니다. <a href="https://platform.openai.com/docs/api-reference/chat?utm_source=chatgpt.com">OpenAI 플랫폼+1</a><br />
Responses 예시:<br />
최신 SDK/스펙에서는 빌트인 툴과의 일관성을 위해 툴 정의 방식과 이벤트 구조가 통합되어 있고, SDK 레벨에서 단일 <code class="language-plaintext highlighter-rouge">responses.create(...)</code> 호출로 다룹니다. 구현 디테일은 버전에 따라 조금씩 바뀌므로 레퍼런스를 확인하는 게 안전합니다. <a href="https://github.com/openai/openai-python?utm_source=chatgpt.com">GitHub+1</a></p>
  </li>
  <li>
    <p>언제 무엇을 쓰나<br />
이미 Chat Completions로 함수 호출만 필요한 봇을 안정적으로 운영 중이면 그대로 써도 됩니다. 복합 툴(코드 실행, 파일/웹 검색, 이미지 생성 등)을 모델이 자율적으로 섞어 쓰는 “작업형” 에이전트를 만들려면 Responses가 더 편하고 설계가 맞습니다. <a href="https://openai.com/index/new-tools-for-building-agents/?utm_source=chatgpt.com">OpenAI</a></p>
  </li>
  <li>
    <p>마이그레이션 고려사항<br />
메시지 포맷 차이, 툴 정의 위치/명세, 스트리밍 이벤트 처리, 그리고 함수 결과를 다시 모델에게 피드백하는 루프 처리만 맞추면 됩니다. Responses는 SDK 헬퍼와 빌트인 툴 덕에 보일러플레이트가 줄어듭니다. <a href="https://github.com/openai/openai-python?utm_source=chatgpt.com">GitHub+1</a></p>
  </li>
</ol>

<p>원하시면 같은 기능을 Chat Completions와 Responses로 각각 구현한 최소 예제(함수 정의 → 호출 → 결과 반영 → 최종 응답)를 나란히 만들어 드릴게요.</p>

<p class="chat--user">

아직도 차이를 잘 모르겠는데 chat completions도 파일 탐색 같은거 가능한거 아니야?

</p>

<p>좋은 포인트를 짚으셨어요. 혼동이 생기기 쉬운 부분인데, 핵심 차이는 이겁니다:</p>

<h3 id="1-chat-completions에서의-tool">1. Chat Completions에서의 tool</h3>

<ul>
  <li>
    <p>Chat Completions API는 <strong>“function calling”</strong> 개념만 제공합니다.</p>
  </li>
  <li>
    <p>즉, 개발자가 정의한 <strong>외부 함수(툴)</strong> 의 JSON 스키마를 모델에게 알려주면, 모델이 필요할 때 <code class="language-plaintext highlighter-rouge">{"name": "...", "arguments": {...}}</code> 형태로 호출 제안을 합니다.</p>
  </li>
  <li>
    <p>그 결과를 받아서 <strong>개발자(호스트 앱)가 직접 실행</strong> 해야 합니다.</p>
  </li>
  <li>
    <p>모델은 파일을 직접 읽거나 웹을 탐색하지 못합니다. 개발자가 구현해야만 합니다.</p>
  </li>
</ul>

<h3 id="2-responses-api에서의-tool">2. Responses API에서의 tool</h3>

<ul>
  <li>
    <p>Responses API는 위의 함수 호출 기능을 포함하면서, 여기에 <strong>“빌트인 툴”</strong> 개념이 들어 있습니다.</p>
  </li>
  <li>
    <p>예시: Code Interpreter(코드 실행), File Search(벡터 DB/검색), Web Search, Image generation 같은 도구들이 공식 지원됩니다.</p>
  </li>
  <li>
    <p>즉, 모델이 <code class="language-plaintext highlighter-rouge">file_search.query</code> 같은 툴을 직접 호출하면, OpenAI 플랫폼이 그 결과를 모델 컨텍스트에 바로 넣어주는 구조예요.</p>
  </li>
  <li>
    <p>개발자가 모든 기능을 직접 짜지 않아도 되고, 여러 툴을 혼합하는 “에이전트적 워크플로우”를 바로 구성할 수 있습니다.</p>
  </li>
</ul>

<h3 id="3-실제-차이를-예로-보면">3. 실제 차이를 예로 보면</h3>

<ul>
  <li>
    <p><strong>Chat Completions</strong></p>

    <ul>
      <li>
        <p>유저: “내 구글 드라이브에서 프로젝트 문서 찾아줘.”</p>
      </li>
      <li>
        <p>모델: “<code class="language-plaintext highlighter-rouge">search_drive</code> 함수 호출 필요. 인자: {query: '프로젝트'}”</p>
      </li>
      <li>
        <p>→ 이때 <strong>드라이브 검색 코드를 짜서 직접 실행</strong> 해야 하고, 결과를 다시 모델에 넣어줘야 합니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Responses</strong></p>

    <ul>
      <li>
        <p>유저: “내 프로젝트 문서 찾아줘.”</p>
      </li>
      <li>
        <p>모델: <code class="language-plaintext highlighter-rouge">file_search.query</code> 빌트인 툴을 호출.</p>
      </li>
      <li>
        <p>→ OpenAI SDK가 <strong>자동으로 검색 결과를 모델에게 다시 피드백</strong> 합니다.</p>
      </li>
      <li>
        <p>개발자가 할 일은 결과를 UI에 뿌리거나 후처리하는 것뿐입니다.</p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="4-정리">4. 정리</h3>

<ul>
  <li>
    <p>Chat Completions = <strong>모델이 “이 함수 불러줘” 신호만 주고, 실행은 전적으로 개발자 몫.</strong></p>
  </li>
  <li>
    <p>Responses = <strong>모델이 빌트인 툴까지 직접 제어 가능. 외부 함수도 정의 가능하지만, 기본적으로 플랫폼이 실행/피드백을 다 처리.</strong></p>
  </li>
</ul>

<p>즉, Chat Completions만으로는 <strong>파일 탐색, 웹 검색 같은 건 직접 구현해야</strong> 하고, Responses에서는 <strong>OpenAI가 제공하는 표준 툴을 곧바로 붙여서 사용할 수 있다</strong> 는 점이 가장 큰 차이입니다.</p>

<p>혹시 원하시면 제가 “같은 기능(예: 파일 검색)”을 <strong>Chat Completions 방식</strong> 과 <strong>Responses 방식</strong> 으로 각각 어떻게 구현하는지 코드 비교 예제를 만들어 드릴까요?</p>

<p class="chat--user">

내가 직접 툴 함수를 선언해서 한다면 어떤 차이가 있어?

</p>

<p>좋은 질문이에요.<br />
“내가 직접 툴(함수)을 선언한다”는 상황만 딱 놓고 보면, Chat Completions과 Responses는 <strong>기본 동작은 거의 똑같습니다</strong>. 모델이 함수 호출 JSON을 만들어주고, 그걸 앱(개발자)이 실행해서 다시 모델에 결과를 넘겨주는 구조죠. 하지만 차이가 나는 부분이 몇 가지 있어요:</p>

<hr />

<h3 id="1-입력-구조-차이">1. 입력 구조 차이</h3>

<ul>
  <li>
    <p><strong>Chat Completions</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">messages=[{"role":"system",...}, {"role":"user",...}]</code> 배열 형태 고정.</p>
      </li>
      <li>
        <p>툴 정의는 <code class="language-plaintext highlighter-rouge">tools=[{"type":"function", "function":{...}}]</code> 로 별도 필드에 넣습니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Responses</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">input</code> 파라미터가 문자열·메시지 배열 둘 다 허용.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">tools</code> 역시 Chat Completions과 거의 동일하게 선언할 수 있습니다.</p>
      </li>
      <li>
        <p>SDK에서 <code class="language-plaintext highlighter-rouge">response.output_text</code> 같은 헬퍼가 있어서 출력 핸들링이 더 단순합니다.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="2-실행-루프-처리">2. 실행 루프 처리</h3>

<ul>
  <li>
    <p><strong>Chat Completions</strong></p>

    <ul>
      <li>
        <p>함수 호출이 나오면, <code class="language-plaintext highlighter-rouge">message.role=="assistant", message.content==null, message.tool_calls=[...]</code> 같은 포맷으로 옵니다.</p>
      </li>
      <li>
        <p>개발자가 직접 <code class="language-plaintext highlighter-rouge">call_tool()</code> → <code class="language-plaintext highlighter-rouge">append result 메시지</code> → 다시 <code class="language-plaintext highlighter-rouge">chat.completions.create(...)</code> 를 호출해야 합니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Responses</strong></p>

    <ul>
      <li>
        <p>똑같이 함수 호출 JSON이 나오고, 역시 개발자가 실행해서 다시 모델에 주입해야 합니다.</p>
      </li>
      <li>
        <p>다만 Responses는 <strong>이벤트 스트리밍 구조</strong> 가 더 세분화되어 있어서, “지금 툴 호출 나왔다 → 실행 결과 보내라” 흐름이 명확합니다.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="3-빌트인-툴과의-통합">3. 빌트인 툴과의 통합</h3>

<ul>
  <li>
    <p><strong>Chat Completions</strong></p>

    <ul>
      <li>
        <p>항상 내가 정의한 함수만 사용.</p>
      </li>
      <li>
        <p>파일 검색/웹 검색 등을 붙이려면, 전부 내가 직접 구현해야 함.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Responses</strong></p>

    <ul>
      <li>
        <p>내가 정의한 툴(function)과, OpenAI가 제공하는 빌트인 툴(코드 실행, 파일 검색, 이미지 생성 등)을 <strong>같은 인터페이스 안에서</strong> 혼합 가능.</p>
      </li>
      <li>
        <p>즉, “내 함수 + 기본 제공 툴”을 하나의 도구 세트처럼 모델이 오가며 사용 가능.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h3 id="4-sdk-사용성">4. SDK 사용성</h3>

<ul>
  <li>
    <p><strong>Chat Completions</strong> : 출력 파싱은 내가 직접 <code class="language-plaintext highlighter-rouge">choices[0].message.tool_calls</code> 같은 걸 봐야 합니다.</p>
  </li>
  <li>
    <p><strong>Responses</strong> : 출력은 <code class="language-plaintext highlighter-rouge">resp.output_text</code> 또는 이벤트 타입(event.type=="response.output_text.delta") 같은 통일된 헬퍼로 처리 가능.</p>
  </li>
</ul>

<hr />

<h3 id="5-정리">5. 정리</h3>

<ul>
  <li>
    <p>내가 <strong>툴만 직접 선언</strong> 한다면, 두 API의 차이는 <strong>입력/출력 포맷과 SDK 헬퍼 수준</strong> 에서만 느껴집니다.</p>
  </li>
  <li>
    <p>하지만 Responses 쪽은 <strong>빌트인 툴 통합</strong> 과 <strong>세분화된 스트리밍 이벤트</strong> 덕에, 나중에 복잡한 워크플로우를 붙이기가 더 쉽습니다.</p>
  </li>
  <li>
    <p>단순 함수 호출만 쓴다면 Chat Completions도 충분히 쓸 수 있고, Responses는 “함수 + 확장성”을 고려할 때 선택하는 게 좋아요.</p>
  </li>
</ul>

<hr />

<p>원하시면 제가 “같은 함수 툴 호출”을 Chat Completions 버전과 Responses 버전으로 코드 예제를 나란히 만들어서 보여드릴까요?</p>

<p class="chat--user">

harmony 형식을 쓰는 gpt oss는 chat completions 툴은 못쓰나? 관계가 있어?

</p>

<p>아주 중요한 포인트를 짚으셨어요. 정리해보면 이렇게 이해하시면 됩니다:</p>

<hr />

<h3 id="1-harmony-포맷이란">1. Harmony 포맷이란?</h3>

<ul>
  <li>
    <p><strong>Harmony</strong> 는 OpenAI가 내부적으로 통합하려는 <strong>대화/툴 호출 데이터 포맷</strong> 이에요.</p>
  </li>
  <li>
    <p>JSON 기반으로, <code class="language-plaintext highlighter-rouge">role</code>, <code class="language-plaintext highlighter-rouge">content</code>, <code class="language-plaintext highlighter-rouge">tool</code> 호출 등을 하나의 일관된 구조로 표현하려고 만든 스펙입니다.</p>
  </li>
  <li>
    <p>Responses API는 이 Harmony 스타일을 따릅니다. 그래서 Responses의 출력/스트리밍 이벤트는 Harmony 규격과 직접적으로 매핑됩니다.</p>
  </li>
</ul>

<hr />

<h3 id="2-chat-completions와의-관계">2. Chat Completions와의 관계</h3>

<ul>
  <li>
    <p><strong>Chat Completions</strong> API는 원래부터 OpenAI가 만든 “메시지 배열 + function calling” 방식이고, Harmony가 나오기 전 포맷이에요.</p>
  </li>
  <li>
    <p>Chat Completions의 <code class="language-plaintext highlighter-rouge">tools</code>/<code class="language-plaintext highlighter-rouge">functions</code> 필드는 Harmony 포맷과 <strong>직접 호환되진 않습니다.</strong> (비슷하게 보이지만 JSON 스키마 정의와 출력 구조가 다름)</p>
  </li>
  <li>
    <p>다만 개념적으로는 같은 일을 합니다: 모델이 “툴 호출”을 JSON으로 내보내고, 개발자가 그걸 실행해서 다시 모델에 넣는 구조.</p>
  </li>
</ul>

<hr />

<h3 id="3-gpt-오픈소스-모델oss와-harmony">3. GPT 오픈소스 모델(OSS)와 Harmony</h3>

<ul>
  <li>
    <p>OSS GPT류 모델 중에 “Harmony 포맷”으로 학습되거나 시연되는 경우가 있습니다. 즉, 메시지나 툴 호출을 <strong>Harmony 규격 JSON</strong> 으로 이해하고 출력하는 거죠.</p>
  </li>
  <li>
    <p>이 경우 Chat Completions API의 <code class="language-plaintext highlighter-rouge">tools/functions</code>는 그대로 못 쓰고, 대신 Responses처럼 Harmony 이벤트/JSON을 직접 해석해야 합니다.</p>
  </li>
  <li>
    <p>요약하면 <strong>Harmony 기반 OSS 모델은 Chat Completions 툴 호출 방식과는 무관</strong> 하고, Responses/Harmony 스타일과 맞닿아 있다고 보는 게 맞습니다.</p>
  </li>
</ul>

<hr />

<h3 id="4-결론">4. 결론</h3>

<ul>
  <li>
    <p>Chat Completions의 툴 호출 포맷 ≠ Harmony 포맷.</p>
  </li>
  <li>
    <p>Responses API = Harmony 포맷을 공식 채택.</p>
  </li>
  <li>
    <p>OSS GPT가 Harmony를 따른다면, Chat Completions 툴 호출은 그대로 쓸 수 없고, Harmony 스펙을 맞춰야 합니다.</p>
  </li>
  <li>
    <p>즉, 관계는 “동일 목적(툴 호출)인데, 표현 포맷만 다르다”는 정도입니다.</p>
  </li>
</ul>

<hr />

<p>혹시 제가 <strong>동일한 함수 호출</strong> 을 Chat Completions 방식(JSON) vs Harmony/Responses 방식(JSON)으로 어떻게 다르게 표현되는지 예시를 보여드릴까요?</p>

<p class="chat--user">

harmony 포맷이 뭔데

</p>

<p>좋아요 — OpenAI Harmony(이하 “Harmony 포맷”)에 대해 <strong>단계별로</strong> , “무엇인지”, “왜 나왔는지”, “주요 구성요소” 순서대로 정리해 드릴게요.</p>

<hr />

<h2 id="1-harmony-포맷이란-1">1. Harmony 포맷이란</h2>

<p>Harmony 포맷은 gpt‑oss 모델 시리즈(예: <code class="language-plaintext highlighter-rouge">openai/gpt-oss-20b</code>, <code class="language-plaintext highlighter-rouge">openai/gpt-oss-120b</code>)가 <strong>입력/출력 메시지 구조</strong> , 채널, 툴 호출 등을 일관되게 다루기 위해 설계된 규격입니다. <a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">cookbook.openai.com+2</a><br />
즉, 단순히 “대화 메시지”만 있는 게 아니라, 모델 내부의 추론(chain-of-thought), 툴 호출(tool calls), 역할(roles) 등이 명확히 구분된 형식이에요. <a href="https://huggingface.co/blog/kuotient/chatml-vs-harmony?utm_source=chatgpt.com">Hugging Face+1</a></p>

<hr />

<h2 id="2-왜-필요했나">2. 왜 필요했나</h2>

<ul>
  <li>
    <p>오픈소스 모델들은 다양한 프롬프트, 다양한 API와 통합되는데, 포맷이 제각각이어서 “툴 호출”, “추론 과정”, “최종 응답” 등을 일관성 있게 다루기 어려웠어요.</p>
  </li>
  <li>
    <p>Harmony 포맷은 이러한 문제를 해결하고, 구조화된 출력(예: 툴 호출 JSON, 분석 단계, 최종 응답)을 모델이 <strong>훈련-생성 가능하게</strong> 만든 설계입니다. <a href="https://cobusgreyling.medium.com/what-is-gpt-oss-harmony-response-format-a29f266d6672?utm_source=chatgpt.com">Medium+1</a></p>
  </li>
  <li>
    <p>또한, OpenAI Responses API 같은 상용 API 포맷과도 호환성을 가질 수 있게 설계되었어요. <a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">cookbook.openai.com+1</a></p>
  </li>
</ul>

<hr />

<h2 id="3-주요-구성요소">3. 주요 구성요소</h2>

<p>Harmony 포맷에는 다음과 같은 핵심 개념들이 있어요:</p>

<h3 id="a-역할roles">a) 역할(Roles)</h3>

<p>메시지가 갖는 주체 또는 맥락을 나타내는 역할이 구분되어 있습니다. 대표적으로:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">system</code> : 전체 시스템 조건이나 지침. <a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">cookbook.openai.com+1</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">developer</code> : 개발자가 모델에 주는 지침 또는 함수 정의 등. <a href="https://github.com/openai/harmony?utm_source=chatgpt.com">GitHub+1</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">user</code> : 사용자 입력. <a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">cookbook.openai.com+1</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">assistant</code> : 모델이 생성하는 응답. <a href="https://github.com/openai/harmony?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tool</code> : 툴 호출 결과나 툴 실행 메시지. <a href="https://cobusgreyling.medium.com/what-is-gpt-oss-harmony-response-format-a29f266d6672?utm_source=chatgpt.com">Medium</a></p>
  </li>
</ul>

<h3 id="b-채널channels">b) 채널(Channels)</h3>

<p>출력 메시지가 어떤 “용도”로 생성되었는지를 나타내는 채널이 있습니다. 대표적 채널:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">analysis</code> : 모델이 내부적으로 생각하거나 추론하는 과정 (Chain-of-Thought) 용도. <a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">cookbook.openai.com</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">commentary</code> : 툴 호출 전후의 해설 또는 보조 메시지 용도. <a href="https://huggingface.co/blog/kuotient/chatml-vs-harmony?utm_source=chatgpt.com">Hugging Face</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">final</code> : 사용자에게 보여지는 최종 응답. <a href="https://www.skool.com/data-alchemy/openai-harmony-response-format-for-its-open-weight-model-series?utm_source=chatgpt.com">skool.com</a></p>
  </li>
</ul>

<p>예컨대, 사용자가 질문하면 모델이 <code class="language-plaintext highlighter-rouge">analysis</code> 채널에서 “내가 뭐 해야 하지?”라며 생각하고, <code class="language-plaintext highlighter-rouge">tool</code> 역할로 외부 함수 호출이 필요하면 <code class="language-plaintext highlighter-rouge">commentary</code> 채널에서 그 전과 후를 기록한 뒤, <code class="language-plaintext highlighter-rouge">final</code> 채널에서 사용자에게 결과를 주는 식이에요.</p>

<h3 id="c-특수-토큰-및-메시지-구조">c) 특수 토큰 및 메시지 구조</h3>

<p>Harmony는 채팅 메시지마다 아래 같은 구조 마커(markers)를 사용해요:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pgsql

&lt;|start|&gt;{header}&lt;|message|&gt;{content}&lt;|end|&gt;
</code></pre></div></div>

<p>예:</p>
<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;|</span><span class="n">start</span><span class="p">|&gt;</span><span class="n">assistant</span><span class="p">&lt;|</span><span class="n">channel</span><span class="p">|&gt;</span><span class="k">final</span><span class="p">&lt;|</span><span class="n">message</span><span class="p">|&gt;</span><span class="err">…</span><span class="p">&lt;|</span><span class="k">return</span><span class="p">|&gt;</span>
</code></pre></div></div>

<p><a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">cookbook.openai.com+1</a><br />
그리고 툴 호출이나 JSON 스키마 등도 TypeScript-스타일이나 특정 네임스페이스 형식을 쓸 수 있어요. <a href="https://huggingface.co/blog/kuotient/chatml-vs-harmony?utm_source=chatgpt.com">Hugging Face+1</a></p>

<h3 id="d-툴functions네임스페이스">d) 툴(Functions)/네임스페이스</h3>

<p>툴 호출을 정의할 때 JSON Schema 형식 외에도, Harmony에서는 TypeScript-유사 문법으로 네임스페이스 선언을 할 수 있어요. 예:</p>
<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">namespace</span> <span class="nx">functions</span> <span class="p">{</span>
  <span class="kd">type</span> <span class="nx">get_weather</span> <span class="o">=</span> <span class="p">(</span><span class="nx">_</span><span class="p">:</span> <span class="p">{</span> <span class="nl">location</span><span class="p">:</span> <span class="kr">string</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="kr">any</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p><a href="https://huggingface.co/blog/kuotient/chatml-vs-harmony?utm_source=chatgpt.com">Hugging Face+1</a></p>

<hr />

<h2 id="4-실제-예시">4. 실제 예시</h2>

<p>사용자 질문 → 내부 추론 → 툴 호출 → 최종 응답 으로 흐름이 구성된 예시는 이렇게 생겼어요:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sql

&lt;|start|&gt;user&lt;|message|&gt;What is 2 + 2?&lt;|end|&gt;
&lt;|start|&gt;assistant&lt;|channel|&gt;analysis&lt;|message|&gt;I should compute simple arithmetic.&lt;|end|&gt;
&lt;|start|&gt;assistant&lt;|channel|&gt;final&lt;|message|&gt;2 + 2 = 4.&lt;|return|&gt;
</code></pre></div></div>

<p><a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">cookbook.openai.com</a></p>

<p>또 툴 호출 포함되는 경우:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wasm

&lt;|start|&gt;assistant&lt;|channel|&gt;commentary&lt;|message|&gt;Calling tool get_current_weather&lt;|end|&gt;
&lt;|start|&gt;assistant&lt;|channel|&gt;commentary&lt;|message|&gt;{ "tool": "get_current_weather", "arguments": { "location": "Seoul" } }&lt;|end|&gt;
&lt;|start|&gt;tool&lt;|message|&gt;{ "location": "Seoul", "temperature": "15°C" }&lt;|end|&gt;
&lt;|start|&gt;assistant&lt;|channel|&gt;final&lt;|message|&gt;서울의 현재 기온은 15°C 입니다.&lt;|return|&gt;
</code></pre></div></div>

<p>(형식은 단순화됨)</p>

<hr />

<h2 id="5-유의사항">5. 유의사항</h2>

<ul>
  <li>
    <p>중요한 점: Harmony 포맷은 <strong>그대로 사용자가 임의로 변형해서 모델에 입력하면 안 돼요</strong>. 해당 모델이 이 포맷으로 <strong>훈련되어 있기 때문에</strong> , 포맷이 맞지 않으면 성능이 크게 떨어질 수 있어요. <a href="https://cookbook.openai.com/articles/gpt-oss/verifying-implementations?utm_source=chatgpt.com">cookbook.openai.com+1</a></p>
  </li>
  <li>
    <p>만약 당신이 일반적인 OpenAI API(예: Chat Completions)만 쓰는 경우라면, 내부적으로 이 포맷을 신경쓰지 않아도 되는 경우가 많아요. “저수준 인퍼런스” 환경이나 OSS 모델 직접 돌릴 때 특히 중요해요. <a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">cookbook.openai.com+1</a></p>
  </li>
</ul>

<hr />

<p>필요하다면 한글로 <strong>Harmony 포맷으로 프롬프트/입력/출력 템플릿</strong> 을 만들어 드릴까요? 그렇게 하면 실전 적용이 더 쉬울 거예요.</p>

<p class="chat--user">

과거의 툴 호출과 이 형식의 차이는?

</p>

<p>좋은 질문이에요. “과거 툴 호출(Chat Completions function calling)”과 “Harmony 형식(Responses API 기반)”의 차이를 크게 네 가지로 정리할 수 있습니다.</p>

<hr />

<h2 id="1-표현-방식-메시지-포맷">1. 표현 방식 (메시지 포맷)</h2>

<ul>
  <li>
    <p><strong>과거(Chat Completions)</strong></p>

    <ul>
      <li>단순 메시지 배열:
        <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="w">
  </span><span class="p">{</span><span class="nl">"role"</span><span class="p">:</span><span class="s2">"user"</span><span class="p">,</span><span class="nl">"content"</span><span class="p">:</span><span class="s2">"서울 날씨 알려줘"</span><span class="p">},</span><span class="w">
  </span><span class="p">{</span><span class="nl">"role"</span><span class="p">:</span><span class="s2">"assistant"</span><span class="p">,</span><span class="nl">"tool_calls"</span><span class="p">:[{</span><span class="nl">"name"</span><span class="p">:</span><span class="s2">"get_weather"</span><span class="p">,</span><span class="nl">"arguments"</span><span class="p">:</span><span class="s2">"{</span><span class="se">\"</span><span class="s2">city</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">서울</span><span class="se">\"</span><span class="s2">}"</span><span class="p">}]}</span><span class="w">
</span><span class="p">]</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">tool_calls</code> 필드에 함수 호출이 JSON으로 들어감.</p>
      </li>
      <li>호출 결과는 <code class="language-plaintext highlighter-rouge">role: tool</code> 메시지로 다시 넣어줘야 함.</li>
    </ul>
  </li>
  <li>
    <p><strong>Harmony (Responses/Harmony 포맷)</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">&lt;|start|&gt;role&lt;|channel|&gt;...&lt;|message|&gt;...&lt;|end|&gt;</code> 같은 <strong>명시적 태그 기반 구조</strong>.</p>
      </li>
      <li>
        <p>툴 호출은 보통 <code class="language-plaintext highlighter-rouge">commentary</code> 채널에서 JSON으로 표현되고, 실행 결과는 <code class="language-plaintext highlighter-rouge">tool</code> 역할 메시지로 붙음.</p>
      </li>
      <li>
        <p>예시:</p>
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wasm
      
&lt;|start|&gt;assistant&lt;|channel|&gt;commentary&lt;|message|&gt;{"tool":"get_weather","arguments":{"city":"서울"}}&lt;|end|&gt;
&lt;|start|&gt;tool&lt;|message|&gt;{"city":"서울","temperature":"15°C"}&lt;|end|&gt;
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="2-채널-개념의-유무">2. 채널 개념의 유무</h2>

<ul>
  <li>
    <p><strong>과거</strong> : <code class="language-plaintext highlighter-rouge">system</code>, <code class="language-plaintext highlighter-rouge">user</code>, <code class="language-plaintext highlighter-rouge">assistant</code>, <code class="language-plaintext highlighter-rouge">tool</code> 네 가지 역할만 존재. 내부 추론(Chain-of-Thought)이나 중간 해설은 숨기거나 임의로 작성해야 했음.</p>
  </li>
  <li>
    <p><strong>Harmony</strong> : <code class="language-plaintext highlighter-rouge">analysis</code>, <code class="language-plaintext highlighter-rouge">commentary</code>, <code class="language-plaintext highlighter-rouge">final</code> 같은 <strong>채널</strong> 개념을 도입.</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">analysis</code>: 모델의 내부 추론 (평소에는 숨겨져야 함).</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">commentary</code>: 툴 호출 전후의 맥락.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">final</code>: 사용자에게 보여줄 최종 답변.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>따라서 모델이 “생각하기 → 도구 호출 → 결과 활용 → 최종 답변” 과정을 <strong>구조적으로</strong> 구분 가능.</p>
  </li>
</ul>

<hr />

<h2 id="3-실행-루프-처리">3. 실행 루프 처리</h2>

<ul>
  <li>
    <p><strong>과거</strong> : 모델이 <code class="language-plaintext highlighter-rouge">tool_calls</code> JSON만 던짐 → 개발자가 실행 → <code class="language-plaintext highlighter-rouge">role: tool</code> 메시지를 다시 모델에 공급 → 다음 ChatCompletion 호출. <strong>루프를 직접 구현</strong> 해야 했음.</p>
  </li>
  <li>
    <p><strong>Harmony/Responses</strong> : 이벤트 스트리밍 구조로 “툴 호출 이벤트 발생 → 실행 → 응답 반영” 흐름이 표준화됨. Responses SDK가 이런 이벤트 타입(<code class="language-plaintext highlighter-rouge">response.output_text.delta</code>, <code class="language-plaintext highlighter-rouge">response.tool_call.delta</code> 등)을 제공해서 <strong>개발자가 제어하기 더 쉬움</strong>.</p>
  </li>
</ul>

<hr />

<h2 id="4-빌트인-툴과-확장성">4. 빌트인 툴과 확장성</h2>

<ul>
  <li>
    <p><strong>과거</strong> : 모든 툴은 내가 정의한 “functions”뿐. 파일 탐색, 코드 실행 등은 전부 내가 직접 구현해야 했음.</p>
  </li>
  <li>
    <p><strong>Harmony/Responses</strong> : 내가 선언한 함수형 툴 외에도, OpenAI가 제공하는 <strong>빌트인 툴(Code Interpreter, File Search, Web Search, Image Generation 등)</strong> 을 같은 포맷으로 사용 가능.</p>
  </li>
  <li>
    <p>즉, <strong>내 툴 + 플랫폼 툴</strong> 을 혼합한 에이전트 구성이 가능.</p>
  </li>
</ul>

<hr />

<h2 id="결론">결론</h2>

<ul>
  <li>
    <p><strong>Chat Completions 툴 호출</strong> = “함수 호출 JSON만” 주고받는 단순 구조.</p>
  </li>
  <li>
    <p><strong>Harmony 형식 툴 호출</strong> = “역할+채널+이벤트”로 나뉘는 <strong>더 풍부한 포맷</strong>. 추론/호출/결과/최종응답이 구분되고, 빌트인 툴까지 지원.</p>
  </li>
</ul>

<hr />

<p>원하시면 제가 같은 “서울 날씨 조회” 시나리오를 <strong>Chat Completions 방식</strong> 과 <strong>Harmony 방식</strong> 으로 나란히 코드/출력 예시를 비교해 드릴까요?</p>

<p class="chat--user">

흠 api 단계에서는 큰 차이가 없는거 같은데 서빙하는 서버에서 다뤄줘야하는거 아닌가

</p>

<p>네, 정확히 보셨어요.<br />
API 단계(=모델 엔드포인트 호출)에서 보면 <strong>둘 다 “툴 호출 JSON이 나오고 → 내가 실행 → 결과를 다시 모델에 공급”</strong> 하는 구조라 큰 차이는 없습니다.<br />
차이는 주로 <strong>서빙 레이어(중간 서버, 에이전트 실행기)</strong> 에서 어떻게 다루느냐에서 드러납니다.</p>

<hr />

<h2 id="1-chat-completions-function-calling">1. Chat Completions function calling</h2>

<ul>
  <li>
    <p>API는 단순히 <code class="language-plaintext highlighter-rouge">tool_calls</code> JSON만 던져줍니다.</p>
  </li>
  <li>
    <p>서버(혹은 어플리케이션)가 해야 할 일:</p>

    <ol>
      <li>
        <p>툴 호출 JSON 파싱</p>
      </li>
      <li>
        <p>해당 함수 실행</p>
      </li>
      <li>
        <p>결과를 <code class="language-plaintext highlighter-rouge">{"role":"tool","content":"..."}</code> 메시지로 다시 모델에 공급</p>
      </li>
      <li>
        <p>필요하다면 이 루프를 여러 번 돌림</p>
      </li>
    </ol>
  </li>
  <li>
    <p>즉 <strong>“함수 실행 루프”를 직접 짜야 하는 부담</strong> 이 있습니다.</p>
  </li>
</ul>

<hr />

<h2 id="2-responsesharmony-포맷">2. Responses/Harmony 포맷</h2>

<ul>
  <li>
    <p>API는 “툴 호출 이벤트”, “내부 추론”, “최종 응답”을 <strong>구조화된 이벤트 스트림</strong> 으로 흘려줍니다.</p>
  </li>
  <li>
    <p>서버가 해야 할 일:</p>

    <ol>
      <li>
        <p>이벤트 스트림에서 “tool_call” 이벤트를 잡음</p>
      </li>
      <li>
        <p>툴 실행 후 <code class="language-plaintext highlighter-rouge">tool</code> 이벤트로 결과를 다시 모델에 공급</p>
      </li>
      <li>
        <p>최종적으로 “final” 채널 응답을 사용자에게 전달</p>
      </li>
    </ol>
  </li>
  <li>
    <p>Responses SDK는 이 이벤트 루프를 <strong>표준화된 방식으로 이미 제공</strong> 하므로, 개발자가 직접 “메시지 포맷 맞춰서 루프 돌리는 코드”를 많이 줄일 수 있습니다.</p>
  </li>
  <li>
    <p>즉, 서버는 “이벤트 핸들링”에 집중하면 되고, 반복 호출 구조를 직접 구현하지 않아도 됩니다.</p>
  </li>
</ul>

<hr />

<h2 id="3-서버-관점-차이-요약">3. 서버 관점 차이 요약</h2>

<ul>
  <li>
    <p><strong>Chat Completions</strong> : 서버가 <strong>직접 툴 루프 엔진</strong> 을 구현해야 함.</p>
  </li>
  <li>
    <p><strong>Responses/Harmony</strong> : 서버는 <strong>SDK가 주는 이벤트를 처리하는 핸들러만 붙이면 됨</strong> , 빌트인 툴도 같은 방식으로 관리 가능.</p>
  </li>
</ul>

<hr />

<h2 id="4-결론-1">4. 결론</h2>

<p>말씀하신 대로 API 레벨에서 보면 “툴 호출 JSON → 결과 주입”은 본질적으로 같습니다.<br />
그러나 <strong>Harmony/Responses는 이걸 서버에서 쉽게 다룰 수 있게 표준화한 것</strong> 이고, <strong>Chat Completions는 루프를 서버에서 전부 직접 짜야 하는 것</strong> 이 차이라고 할 수 있어요.</p>

<hr />

<p>혹시 원하시면 제가 “같은 서버”에서 <strong>Chat Completions 루프를 직접 짠 코드</strong> vs <strong>Responses 이벤트 핸들링 서버 코드</strong> 를 비교 예시로 보여드릴까요?</p>

<p class="chat--user">

잘 모르겟네 responses api랑 harmony가 뭐가 다르지 gpt5 같은 경우 responses+툴 chat completions+툴 두 개 모두 동작해?

</p>

<p>좋은 질문이에요. 지금 헷갈리는 지점을 정리해드릴게요.</p>

<hr />

<h2 id="1-responses-api와-harmony-관계">1. Responses API와 Harmony 관계</h2>

<ul>
  <li>
    <p><strong>Responses API</strong></p>

    <ul>
      <li>
        <p>OpenAI가 새로 내놓은 “통합 응답 API”입니다.</p>
      </li>
      <li>
        <p>텍스트 답변, 스트리밍, 툴 호출, 멀티모달 입력까지 모두 이 API 하나로 처리할 수 있게 설계됐습니다.</p>
      </li>
      <li>
        <p>SDK에서는 <code class="language-plaintext highlighter-rouge">client.responses.create(...)</code> 로 호출합니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>Harmony</strong></p>

    <ul>
      <li>
        <p>OpenAI가 <strong>내부적으로 사용하는 메시지/출력 포맷</strong> 이에요.</p>
      </li>
      <li>
        <p>모델이 훈련된 데이터 형식이기도 하고, Responses API의 이벤트/출력 구조가 바로 이 Harmony 포맷을 기반으로 나옵니다.</p>
      </li>
      <li>
        <p>즉, Responses는 “API”, Harmony는 그 API가 쓰는 “표준 포맷”이라고 보면 됩니다.</p>
      </li>
      <li>
        <p>사용자는 Responses API를 쓰지만, 내부적으로 주고받는 구조가 Harmony 형식일 뿐이에요.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="2-chat-completions--툴-호출">2. Chat Completions + 툴 호출</h2>

<ul>
  <li>
    <p>예전부터 있던 방식.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">client.chat.completions.create(...)</code> 로 쓰고, <code class="language-plaintext highlighter-rouge">tools=[...]</code> 정의해주면 모델이 JSON 호출을 반환합니다.</p>
  </li>
  <li>
    <p>지금도 지원되고 있고, 많은 코드/서비스가 이 방식을 그대로 씁니다.</p>
  </li>
</ul>

<hr />

<h2 id="3-gpt-5-같은-최신-모델에서-가능한-것">3. GPT-5 같은 최신 모델에서 가능한 것</h2>

<ul>
  <li>
    <p><strong>Responses + 툴</strong> → 지원됨. Responses는 최신 API이므로 GPT-4.1, GPT-4o, GPT-5 계열 모델과 잘 맞습니다.</p>
  </li>
  <li>
    <p><strong>Chat Completions + 툴</strong> → 여전히 지원됨. GPT-5 같은 최신 모델도 chat.completions 엔드포인트를 통해 툴 호출을 할 수 있습니다.</p>
  </li>
</ul>

<p>즉, <strong>두 방식 모두 동작합니다.</strong></p>

<hr />

<h2 id="4-차이를-정리하면">4. 차이를 정리하면</h2>

<ul>
  <li>
    <p><strong>Chat Completions</strong> = 기존 메시지 배열 + 함수 호출 JSON. → 단순하고 익숙하지만, 추론/이벤트 흐름은 내가 직접 구현.</p>
  </li>
  <li>
    <p><strong>Responses (+Harmony)</strong> = 더 최신 API, 내부 포맷이 Harmony라서 추론/툴 호출/최종 응답을 <strong>구조적으로 이벤트 스트리밍</strong> 으로 받음. → 서버에서 다루기 편리하고, 빌트인 툴 통합 가능.</p>
  </li>
</ul>

<hr />

<p>정리하면</p>

<ul>
  <li>
    <p><strong>Responses = API (Harmony 포맷 기반)</strong></p>
  </li>
  <li>
    <p><strong>Harmony = Responses가 쓰는 메시지/출력 표준 포맷</strong></p>
  </li>
  <li>
    <p><strong>Chat Completions = 구방식 API지만 아직도 지원</strong></p>
  </li>
  <li>
    <p>GPT-5는 <strong>둘 다 사용 가능</strong> 합니다.</p>
  </li>
</ul>

<hr />

<p>혹시 원하시면 제가 <strong>같은 툴 호출 예제(예: get_weather 함수)</strong> 를 Chat Completions 방식과 Responses 방식으로 나란히 보여드릴까요?</p>

<p class="chat--user">

그럼 어쨌든 둘 다 돼야하는거잖아 gpt oss는 왜 안되는건데

</p>

<p>좋은 질문이에요. 여기서 핵심 차이는 <strong>“OpenAI API 모델”</strong>과 <strong>“GPT OSS(Open-Source)” 모델</strong> 의 <strong>훈련 포맷과 지원 인터페이스</strong> 차이 때문이에요.</p>

<hr />

<h2 id="1-openai-api-모델-예-gpt-4o-gpt-5">1. OpenAI API 모델 (예: GPT-4o, GPT-5)</h2>

<ul>
  <li>
    <p>OpenAI가 제공하는 상용 API 모델은 <strong>Chat Completions</strong> 과 <strong>Responses(Harmony 기반)</strong> <strong>모두 지원</strong> 합니다.</p>
  </li>
  <li>
    <p>왜냐하면 이 모델들은 OpenAI가 직접 훈련할 때 <strong>ChatML 포맷(예전)</strong>과 <strong>Harmony 포맷(신규)</strong> 양쪽을 다 이해할 수 있게 조정해놨기 때문이에요.</p>
  </li>
  <li>
    <p>그래서 같은 GPT-5 모델도 <code class="language-plaintext highlighter-rouge">chat.completions.create(...)</code> 호출이 되고, <code class="language-plaintext highlighter-rouge">responses.create(...)</code> 호출도 되는 겁니다.</p>
  </li>
</ul>

<hr />

<h2 id="2-gpt-oss-open-source-series-예-gpt-oss-7b-20b-">2. GPT OSS (Open-Source Series, 예: gpt-oss-7b, 20b …)</h2>

<ul>
  <li>
    <p>이건 OpenAI가 공개한 <strong>오픈 웨이트(모델 파라미터)</strong> 모델이에요.</p>
  </li>
  <li>
    <p>OSS 모델은 <strong>Harmony 포맷으로만 훈련</strong> 되어 있습니다.</p>

    <ul>
      <li>즉, 입력/출력을 Harmony 토큰 마커(<code class="language-plaintext highlighter-rouge">&lt;|start|&gt;...&lt;|end|&gt;</code>)와 채널(<code class="language-plaintext highlighter-rouge">analysis</code>, <code class="language-plaintext highlighter-rouge">final</code>, <code class="language-plaintext highlighter-rouge">commentary</code>)로 구분하는 데이터로 학습된 거예요.</li>
    </ul>
  </li>
  <li>
    <p>따라서 이 모델에게 Chat Completions 형식(<code class="language-plaintext highlighter-rouge">{"role":"user","content":"..."}</code> 배열)으로 던지면 잘 반응하지 못하거나 성능이 급격히 떨어집니다.</p>
  </li>
</ul>

<hr />

<h2 id="3-왜-chat-completions이-안-되나">3. 왜 Chat Completions이 안 되나?</h2>

<ul>
  <li>
    <p>GPT OSS는 <strong>ChatML 포맷(예전 API 포맷)</strong> 으로 학습되지 않았습니다.</p>
  </li>
  <li>
    <p>Chat Completions 방식은 기본적으로 ChatML 포맷(<code class="language-plaintext highlighter-rouge">system</code>, <code class="language-plaintext highlighter-rouge">user</code>, <code class="language-plaintext highlighter-rouge">assistant</code>, <code class="language-plaintext highlighter-rouge">tool</code> 메시지 배열)을 기대하는데, OSS 모델은 이를 “본 적이 없는” 상태입니다.</p>
  </li>
  <li>
    <p>반대로 Harmony는 OSS 모델의 기본 언어라서, Responses API처럼 Harmony를 따르는 구조여야만 정상 동작합니다.</p>
  </li>
</ul>

<hr />

<h2 id="4-정리-1">4. 정리</h2>

<ul>
  <li>
    <p>상용 OpenAI API 모델(GPT-4o, GPT-5 등): Chat Completions + Responses 모두 지원 (하위호환성 확보).</p>
  </li>
  <li>
    <p>오픈소스 GPT OSS 모델: Harmony 포맷으로만 학습 → Responses(Harmony 기반)만 제대로 지원. Chat Completions 포맷은 지원 안 됨.</p>
  </li>
</ul>

<hr />

<p>즉, <strong>“왜 GPT OSS는 Chat Completions 안 돼?”</strong> →<br />
훈련 데이터와 출력 포맷이 Harmony에 맞춰져 있기 때문입니다.</p>

<hr />

<p>제가 원하시면, <strong>같은 요청(예: 날씨 조회)</strong> 을</p>

<ul>
  <li>
    <p>Chat Completions 포맷</p>
  </li>
  <li>
    <p>Harmony 포맷</p>
  </li>
</ul>

<p>으로 각각 어떻게 생겼는지 실제 메시지 예시를 나란히 보여드릴까요?</p>

<p class="chat--user">

responses(input=…) 이건 하모니로 변환 가능 completions(messages=) 이건 하모니로 변환 불가능? 둘 다 비슷한데 왜 completions는 안되는건지

</p>

<p>좋은 질문이에요. 한줄 요약부터 말하면:</p>

<p>Responses(input=…) → Harmony 포맷과 “자연스럽게” 1:1 매핑됨<br />
Chat Completions(messages=…) → 이론상 래핑해서 Harmony처럼 “보이게” 만들 수는 있지만, 모델이 Harmony로 학습되지 않았다면 실전에서 잘 안 먹힘</p>

<p>왜 그런지를 단계별로 풀어볼게요.</p>

<ol>
  <li>둘의 출발점이 다름</li>
</ol>

<ul>
  <li>
    <p>Responses는 설계 자체가 Harmony 이벤트·채널을 전제로 되어 있어요. SDK가 내보내는 스트리밍 이벤트 타입, 최종 텍스트 접근자, 툴 호출 이벤트 등 모든 구조가 Harmony에 바로 대응됩니다. 그래서 input을 넣으면 내부적으로 곧바로 Harmony 스타일 토큰 시퀀스로 바뀝니다.</p>
  </li>
  <li>
    <p>Chat Completions는 예전의 ChatML 메시지 배열을 전제로 해요. role/user/assistant/tool로만 오가고, analysis/commentary/final 같은 Harmony 채널 분리는 없습니다.</p>
  </li>
</ul>

<ol>
  <li>“변환”의 본질은 모델 학습·토크나이저 정합성</li>
</ol>

<ul>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Harmony를 잘 쓰려면 모델이 Harmony 특수 토큰(&lt;</td>
          <td>start</td>
          <td>&gt;, &lt;</td>
          <td>channel</td>
          <td>&gt;, &lt;</td>
          <td>message</td>
          <td>&gt;, &lt;</td>
          <td>end</td>
          <td>&gt;, &lt;</td>
          <td>return</td>
          <td>&gt; 등)과 채널 의미에 맞춰 학습되어 있어야 해요. 토크나이저에도 이 토큰들이 등록돼 있어야 하고요.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>OpenAI 호스티드 최신 모델(GPT-4o/5 등)은 내부적으로 ChatML과 Harmony 둘 다 이해할 수 있게 정렬되어 있어서, Chat Completions도 되고 Responses도 됩니다.</p>
  </li>
  <li>GPT-OSS는 Harmony로만 학습되어 있어요. 그러니 ChatML(messages=…)을 그대로 던지면 분포 바깥 입력이 되어 성능이 급락하거나 툴 호출 포맷을 제대로 못 냅니다.</li>
</ul>

<ol>
  <li>“completions → harmony”는 이론상 가능하지만, 성공 조건이 까다로움</li>
</ol>

<ul>
  <li>
    <p>메시지 배열을 다음처럼 감쌀 수는 있어요.<br />
system → &lt;|start|&gt;system … &lt;|end|&gt;<br />
user → &lt;|start|&gt;user … &lt;|end|&gt;<br />
assistant(이전 답변) → 보통 &lt;|start|&gt;assistant&lt;|channel|&gt;final … 또는 commentary로 매핑<br />
tool 호출/결과 → assistant(commentary)에서 JSON으로 호출, tool 역할로 결과</p>
  </li>
  <li>
    <p>하지만 이것만으로 성능이 올라가진 않아요. 모델이 “그 포맷을 정답으로 학습”했어야 합니다. 즉, 단순 프롬프트 트랜스파일은 가능하지만, 모델 정렬(alignment)+토크나이저 특수 토큰 지원이 없으면 실전 품질을 보장하지 못합니다.</p>
  </li>
</ul>

<ol>
  <li>툴 호출 표현의 간극</li>
</ol>

<ul>
  <li>
    <p>Chat Completions: tools/functions 아래 JSON 스키마를 주고, 모델이 message.tool_calls로 name+arguments를 내보냅니다.</p>
  </li>
  <li>
    <p>Harmony/Responses: 채널(대개 commentary)에서 툴 호출 이벤트를 내고, 별도의 tool 역할 메시지로 실행 결과가 들어옵니다. 이벤트 타입과 채널 분리가 전제라서 로그/스트리밍/재시도 처리가 표준화되어 있어요.</p>
  </li>
  <li>
    <p>이 구조 차이를 단순히 문자열 치환으로 메울 수는 있지만, 결국 모델이 그 프로토콜을 “몸으로” 익혔느냐가 관건입니다.</p>
  </li>
</ul>

<ol>
  <li>그래서 결론</li>
</ol>

<ul>
  <li>
    <p>Responses(input=…): Harmony “네이티브”. 변환이라기보다 그냥 본연의 형태.</p>
  </li>
  <li>
    <p>Completions(messages=…): OpenAI 호스티드 최신 모델은 내부 브리지 덕분에 여전히 잘 동작. 그러나 GPT-OSS는 Harmony 전용이라 ChatML을 그냥 주면 안 맞습니다.</p>
  </li>
  <li>
    <p>“둘 다 비슷한데 왜 completions는 안 돼?”의 핵심은 API 문법이 아니라 “모델이 어떤 포맷으로 학습·정렬되어 있느냐”예요.</p>
  </li>
</ul>

<p>실용 가이드</p>

<ul>
  <li>
    <p>OpenAI 호스티드 최신 모델을 쓴다: 둘 다 가능. 새 프로젝트면 Responses 권장.</p>
  </li>
  <li>
    <p>GPT-OSS를 자가 호스팅한다: Harmony 포맷을 그대로 쓰세요. Chat Completions 스타일을 억지로 얹지 말고, 서버에서 Harmony 이벤트 루프(analysis/commentary/final, tool 호출/응답)를 처리하는 러너를 두는 게 정석입니다.</p>
  </li>
  <li>
    <p>양쪽을 동시에 지원해야 한다: 서버에서 어댑터 계층을 두어 ChatML↔Harmony를 상호 변환하되, 모델별로 “권장 포맷”을 유지하세요. 변환은 호환성을 위한 차선책일 뿐, 품질은 권장 포맷이 제일 좋습니다.</p>
  </li>
</ul>

<p>원하시면 Chat Completions messages를 Harmony 템플릿으로 감싸는 최소 어댑터 의사코드와, Harmony 툴 호출 루프 핸들러 예제를 바로 만들어 드릴게요.</p>

<p class="chat--user">

툴 안쓰는 chat completions도 gpt oss 성능이 떨어질수 있어?

</p>

<p>네, 맞습니다. 툴을 안 쓴 “순수 대화(Chat Completions 스타일)”만 보더라도 <strong>GPT-OSS(Open-Source Series)</strong> 모델은 성능이 떨어질 수 있습니다. 이유는 간단히 말해 <strong>훈련 포맷</strong> 때문이에요.</p>

<hr />

<h2 id="1-gpt-oss가-학습된-포맷">1. GPT-OSS가 학습된 포맷</h2>

<ul>
  <li>
    <p>GPT-OSS는 <strong>Harmony 포맷</strong> 을 기준으로 학습되었습니다.</p>
  </li>
  <li>
    <p>즉, 입력과 출력이 <code class="language-plaintext highlighter-rouge">&lt;|start|&gt;user … &lt;|end|&gt;</code> / <code class="language-plaintext highlighter-rouge">&lt;|start|&gt;assistant&lt;|channel|&gt;final … &lt;|end|&gt;</code> 같은 Harmony 마커 구조로 주어지는 데이터를 주로 봤습니다.</p>
  </li>
  <li>
    <p>ChatML(<code class="language-plaintext highlighter-rouge">{"role":"user","content":"…"}</code>) 포맷은 OSS 모델이 본 적이 거의 없습니다.</p>
  </li>
</ul>

<hr />

<h2 id="2-chat-completions-메시지를-그대로-주면">2. Chat Completions 메시지를 그대로 주면?</h2>

<ul>
  <li>
    <p>모델 입장에서는 <strong>낯선 입력 분포</strong> 입니다.</p>
  </li>
  <li>
    <p>그래서 대답을 잘 못하거나, 예상치 못한 토큰(예: JSON 구조 틀어짐, 출력 채널 누락)을 생성할 수 있습니다.</p>
  </li>
  <li>
    <p>즉, 툴 호출 여부와 상관없이, 단순 QA도 “훈련된 포맷(Harmony)”이 아닐 경우 성능이 저하될 수 있습니다.</p>
  </li>
</ul>

<hr />

<h2 id="3-왜-openai-api-모델은-괜찮을까">3. 왜 OpenAI API 모델은 괜찮을까?</h2>

<ul>
  <li>
    <p>GPT-4o, GPT-5 같은 <strong>상용 API 모델</strong> 은 Harmony뿐 아니라 ChatML 포맷에도 맞춰 정렬(alignment)되어 있습니다.</p>
  </li>
  <li>
    <p>그래서 <code class="language-plaintext highlighter-rouge">chat.completions.create(messages=…)</code>도 잘 되고, <code class="language-plaintext highlighter-rouge">responses.create(input=…)</code>도 잘 되는 거예요.</p>
  </li>
  <li>
    <p>반면 GPT-OSS는 Harmony만 지원 → ChatML 입력에서는 품질 저하.</p>
  </li>
</ul>

<hr />

<h2 id="4-정리-2">4. 정리</h2>

<ul>
  <li>
    <p><strong>툴을 쓰든 안 쓰든</strong> GPT-OSS에 Chat Completions 포맷을 쓰면 성능 저하 가능성이 있습니다.</p>
  </li>
  <li>
    <p>안정적인 품질을 내려면 OSS 모델은 반드시 <strong>Harmony 포맷</strong> 으로 입력을 주는 게 맞습니다.</p>
  </li>
  <li>
    <p>Chat Completions는 “OpenAI API 모델”을 위한 하위 호환 포맷이라고 이해하면 편합니다.</p>
  </li>
</ul>

<hr />

<p>원하시면 제가 같은 질문(예: “2+2=?”)을</p>

<ul>
  <li>
    <p>Chat Completions 포맷</p>
  </li>
  <li>
    <p>Harmony 포맷</p>
  </li>
</ul>

<p>두 가지로 작성해서, 왜 OSS 모델이 Harmony에서 더 잘 동작하는지 예시를 보여드릴까요?</p>

<p class="chat--user">

chat completions의 function call 사용과 responses의 function call 사용다시 한 번 정리해주고 두 json 형식이 다른데 섞어쓰면 동작을 안하나 

</p>

<p>좋아요. 핵심만 단계별로 또렷하게 정리해 드릴게요.</p>

<h1 id="1-chat-completions에서의-function-call-사용">1) Chat Completions에서의 function call 사용</h1>

<ol>
  <li>
    <p>입력 포맷<br />
messages 배열을 보냅니다.</p>

    <ul>
      <li>
        <p>system/user/assistant/tool 역할만 존재.</p>
      </li>
      <li>
        <p>툴 정의는 tools=[{type:"function", function:{name, parameters(JSON Schema)}}].</p>
      </li>
    </ul>
  </li>
  <li>
    <p>호출 흐름<br />
a) chat.completions.create(…) 호출<br />
b) 모델이 tool_calls=[{id, type:"function", function:{name, arguments}}] 를 내보냄<br />
c) 서버(당신의 코드)가 해당 함수를 실제 실행<br />
d) 실행 결과를 role:"tool", tool_call_id:<동일>, content:"실행결과" 메시지로 messages에 append  
e) 다시 chat.completions.create(...) 호출해 최종 답변을 받음</동일></p>
  </li>
  <li>
    <p>스트리밍<br />
토큰 델타 단위 스트리밍 가능. tool_calls 신호도 델타로 옴.</p>
  </li>
  <li>
    <p>특징 요약</p>

    <ul>
      <li>
        <p>단순하고 익숙함</p>
      </li>
      <li>
        <p>모든 루프(호출-실행-재호출)를 서버에서 직접 구현</p>
      </li>
      <li>
        <p>포맷은 ChatML 계열</p>
      </li>
    </ul>
  </li>
</ol>

<p>간단 예시</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-5</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">서울 날씨</span><span class="sh">"</span><span class="p">}],</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">get_weather</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:{</span><span class="sh">"</span><span class="s">city</span><span class="sh">"</span><span class="p">:{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}},</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:[</span><span class="sh">"</span><span class="s">city</span><span class="sh">"</span><span class="p">]}</span>
        <span class="p">}</span>
    <span class="p">}],</span>
    <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="c1"># resp.choices[0].message.tool_calls -&gt; 실행 → tool 결과를 role:"tool"로 append → 재호출
</span></code></pre></div></div>

<h1 id="2-responses에서의-function-call-사용">2) Responses에서의 function call 사용</h1>

<ol>
  <li>
    <p>입력 포맷<br />
input은 문자열 또는 메시지 배열. 툴 정의는 tools 파라미터(형태는 유사).<br />
내부 출력/이벤트는 Harmony 채널 기반(analysis/commentary/final 등)으로 구조화.</p>
  </li>
  <li>
    <p>호출 흐름<br />
a) client.responses.create(…) 호출<br />
b) 스트리밍 이벤트로 텍스트 델타, 툴 호출 이벤트가 구분되어 도착<br />
c) 서버가 툴 호출 이벤트를 잡아 실제 함수 실행<br />
d) 실행 결과를 responses API의 규격대로 “툴 결과” 이벤트로 되돌려 주입<br />
e) 최종적으로 final 채널의 출력 텍스트 획득</p>
  </li>
  <li>
    <p>스트리밍<br />
이벤트 타입이 세분화되어 있어 상태 머신(여러 툴 왕복) 구현이 쉬움.</p>
  </li>
  <li>
    <p>특징 요약</p>

    <ul>
      <li>
        <p>이벤트/채널이 표준화되어 서버 코드가 깔끔</p>
      </li>
      <li>
        <p>OpenAI 빌트인 툴(코드 실행, 파일/웹 검색, 이미지 등)과 같은 인터페이스로 혼합 가능</p>
      </li>
      <li>
        <p>포맷은 Harmony 계열</p>
      </li>
    </ul>
  </li>
</ol>

<p>간단 예시</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-5</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">input</span><span class="o">=</span><span class="sh">"</span><span class="s">서울 날씨</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">tools</span><span class="o">=</span><span class="p">[{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">get_weather</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:{</span><span class="sh">"</span><span class="s">city</span><span class="sh">"</span><span class="p">:{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}},</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:[</span><span class="sh">"</span><span class="s">city</span><span class="sh">"</span><span class="p">]}</span>
        <span class="p">}</span>
    <span class="p">}],</span>
    <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">stream</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
<span class="p">)</span>
<span class="c1"># 이벤트 루프에서 tool call 이벤트 → 실행 → tool 결과 주입 → final 텍스트
</span></code></pre></div></div>

<h1 id="3-두-json-형식은-왜-다른가">3) 두 JSON 형식은 왜 다른가</h1>

<ul>
  <li>
    <p>Chat Completions: ChatML 메시지 배열 중심. tool_calls와 role:"tool" 메시지로 루프를 표현.</p>
  </li>
  <li>
    <p>Responses: Harmony 이벤트/채널 중심. 텍스트/툴 호출/툴 결과/완료를 이벤트로 분리해 표준화.</p>
  </li>
</ul>

<h1 id="4-섞어-쓰면-동작하나에-대한-정확한-답">4) “섞어 쓰면 동작하나?”에 대한 정확한 답</h1>

<ol>
  <li>
    <p>같은 요청 안에서 형식을 섞는 것은 거의 실패합니다.</p>

    <ul>
      <li>
        <table>
          <tbody>
            <tr>
              <td>chat.completions에 Harmony 마커(&lt;</td>
              <td>start</td>
              <td>&gt; 등)나 Responses 전용 이벤트 JSON을 넣어도 API 스키마가 다르기 때문에 파싱/정렬이 깨집니다.</td>
            </tr>
          </tbody>
        </table>
      </li>
      <li>responses에 ChatML 고유의 role/tool_calls 구조를 그대로 밀어 넣어도 기대대로 이벤트가 나오지 않습니다.</li>
    </ul>
  </li>
  <li>
    <p>모델·훈련 포맷에 따라 결과가 더 나빠질 수 있습니다.</p>

    <ul>
      <li>
        <p>OpenAI 호스티드 최신 모델(GPT-4o/5)은 내부 브리지가 있어 두 API 모두 “각자의 형식”으로 잘 동작하지만, 한 호출 내에서 형식을 혼용하면 품질이 급락하거나 에러가 납니다.</p>
      </li>
      <li>
        <p>GPT-OSS는 Harmony로만 학습되어 ChatML(=Chat Completions 포맷) 자체가 성능 저하 요인입니다. 혼용은 더 악화됩니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>올바른 방법</p>

    <ul>
      <li>
        <p>한 호출에는 해당 엔드포인트의 “정규 포맷”만 사용.</p>
      </li>
      <li>
        <p>서비스 레벨에서 두 세계를 모두 지원하려면 어댑터 계층을 둡니다.<br />
예) 외부에선 ChatML로 받고, 서버에서 Harmony로 변환해 OSS 모델에 전달. 반대 방향도 가능. 다만 변환은 “호환성용”일 뿐 최적 품질은 각 모델의 정규 포맷으로 직접 주는 것.</p>
      </li>
    </ul>
  </li>
</ol>

<h1 id="5-선택-가이드">5) 선택 가이드</h1>

<ul>
  <li>
    <p>단순 함수 호출/기존 코드 유지 → Chat Completions 계속 사용해도 충분.</p>
  </li>
  <li>
    <p>다툴(코드 실행·파일/웹 검색·이미지) 혼용, 이벤트 지향 서버, 장기 확장 → Responses 권장.</p>
  </li>
  <li>
    <p>GPT-OSS 자체 호스팅 → 반드시 Harmony 포맷(=Responses 스타일)로 주고받기.</p>
  </li>
</ul>

<p>원하시면, 같은 툴(get_weather)을 기준으로 1) Chat Completions 루프 코드와 2) Responses 이벤트 핸들러 코드를 나란히 보여드릴게요.</p>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">자연어 최적화 입력 생성</title><link href="https://hvppyarchive.github.io/llm/optimization-prompt/" rel="alternate" type="text/html" title="자연어 최적화 입력 생성" /><published>2025-10-19T13:58:04+09:00</published><updated>2025-10-19T13:58:04+09:00</updated><id>https://hvppyarchive.github.io/llm/optimization-prompt</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/optimization-prompt/"><![CDATA[<p class="chat--user">

유저의 자연어를 입력 받아서 최적화 툴의 입력으로 쓸 프롬프트를 생성해주면 좋겠어. GPT-OSS-120B 모델이야. 툴의 입력은 다음과 같은 형식이야. ** Variables ** Variable | param_name | initValue | scale(linear, log) | Variable Type(Incremental, Discrete, Fixed, Continuous) | Variable Values(범위, 스텝) | Description ** Objectives ** * Syntax &gt; * Objective | Use(True/False) | Goal (Minimize, Maximize..) | Goal Detail (범위 등이 목적이면 이에 관한 정보) | Weight (1.0) | Description (주석) | Function Detail | Circuit Simulation | verr_abs | each | 0 | input netlist 경로 | fsspice_scope | version 예를 들어서 “r1과 r2의 범위는 100부터 2000까지 10 단위로 가능해, spice netlist 경로는 path/to/netlist.sp 이고, verr_abs를 최소화 하고 싶어.” 라고 했을 때 이에 해당하는 최적화 입력 파일을 만들어줬으면 좋겠어

</p>

<p>좋아! “자연어 → 최적화 툴 입력”을 자동으로 만들어 주는 프롬프트를 아래처럼 준비했어. GPT-OSS-120B에 그대로 넣어서 사용하면 되고, 사용 예시(네가 준 문장 → 완성된 입력 파일)도 함께 보여줄게.</p>

<h1 id="1-gpt-oss-120b용-생성-프롬프트">1) GPT-OSS-120B용 생성 프롬프트</h1>

<p>아래 블록을 시스템/지시 프롬프트로 사용하세요. 모델은 사용자의 한국어/영어 자연어를 받아, 정확히 지정한 테이블 포맷으로만 결과를 내보냅니다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mathematica

당신의 역할: 최적화 툴의 입력 파일 생성기.
입력: 사용자가 자연어로 변수 범위/스텝/스케일/초깃값, 목적함수(최소/최대, 가중치), 회로 시뮬레이션 설정(넷리스트 경로 등)을 설명한다.
출력: 아래 “출력 형식”에 정의된 두 섹션(** Variables **, ** Objectives **)을 가진 순수 텍스트 테이블. 설명/서문/후문/추가 코멘트 없이 해당 두 섹션만 출력한다.

[정규화 규칙]
1) 변수(Variables)
   - Variable: 변수의 표기 이름(예: r1). 대소문자/공백은 원문을 보존하되 일반적으로 소문자 권장.
   - param_name: 툴에서 쓰는 파라미터 키. 별도 지정이 없으면 Variable과 동일하게 설정.
   - initValue:
       • 범위가 주어지고 초깃값이 없으면 중간값(중앙값)을 설정.
       • 이산 값 집합이 주어지면 첫 번째 값을 설정.
       • 고정(Fixed)이면 그 값을 그대로 설정.
   - scale(linear, log): “로그/대수/decade/지수/배수/승수/곱셈 스케일” 언급 시 log, 그 외에는 linear.
   - Variable Type: 
       • “범위 + 스텝”이면 Incremental
       • “특정 값 목록”이면 Discrete
       • “고정”이면 Fixed
       • “연속 범위(스텝 없음)”이면 Continuous
   - Variable Values(범위, 스텝) 표기:
       • 범위+스텝: “start..end step step”
       • 연속 범위: “start..end”
       • 이산 목록: “{v1, v2, v3, ...}”
       • 고정: 해당 수치 1개만 기입
   - 단위가 kΩ, MΩ 등 접두어가 있으면 기본 단위(예: Ω)로 환산하지 말고 값과 단위를 설명란(Description)에 남긴다. 값 자체는 사용자가 명시한 수치를 존중.

2) 목적(Objectives)
   - Objective: 지표/함수 이름. 예: verr_abs, psrr, gain 등.
   - Use(True/False): 사용자가 해당 목적을 “최소화/최대화/목표 범위”로 요청하면 True, 사용 제외는 False.
   - Goal: Minimize 또는 Maximize 또는 Range 등(요청에 맞춤).
   - Goal Detail: 목표가 범위/타깃이면 수치나 서술(예: “0.9–1.1V”, “&lt;= 0.01”) 기입. 단순 최소/최대면 비워둬도 됨.
   - Weight: 가중치. 언급 없으면 1.0.
   - Description: 한국어로 간략 주석.
   - Function Detail 및 그 하위 열은 다음 순서로 채움:
       • Function Detail: “Circuit Simulation” 고정(회로 시뮬레이션 기반일 때)
       • Metric: 해당 지표명(예: verr_abs)
       • Aggregation: each(개별 측정값), mean, max 등. 언급 없으면 each.
       • Target: 목표 수치(있을 때). 없으면 0 또는 공란. Minimize인 경우 일반적으로 0.
       • Netlist Path: 사용자가 제공한 netlist 경로(예: path/to/netlist.sp)
       • Scope: fsspice_scope 등 도구 스코프. 언급 없으면 default.
       • Version: 버전 문자열. 언급 없으면 latest.
   - 다중 목적이 오면 행을 여러 개 출력한다.

3) 기본값/해석
   - 변수 설명에 단위/의도를 간단히 기입(예: “Resistor R1 (Ω)”).
   - 사용자가 “로그 스케일” 등 명시하지 않으면 linear.
   - 사용자가 “스텝”을 말하면 Incremental, 스텝이 없고 값 나열이면 Discrete.
   - 애매한 값은 합리적 기본값을 적용(예: Aggregation=each, Weight=1.0, Scope=default, Version=latest).

[출력 형식]
정확히 다음 두 섹션을 이 순서로 출력. 표 제목/헤더/구분선/열 순서를 엄격히 지킨다.

** Variables **
Variable | param_name | initValue | scale(linear, log) | Variable Type(Incremental, Discrete, Fixed, Continuous) | Variable Values(범위, 스텝) | Description

** Objectives **
Objective | Use(True/False) | Goal (Minimize, Maximize..) | Goal Detail (범위 등이 목적이면 이에 관한 정보) | Weight (1.0) | Description (주석) | Function Detail | Circuit Simulation | verr_abs | each | 0 | input netlist 경로 | fsspice_scope | version

[출력 규칙]
- 반드시 “** Variables **” 섹션과 “** Objectives **” 섹션만 출력.
- 코드 블록, 주석, 추가 텍스트, 불릿, 번호 매기기 금지.
- 공란이 필요한 칸은 빈 문자열로 둔다.
</code></pre></div></div>

<h1 id="2-사용-예시네-문장--완성-파일">2) 사용 예시(네 문장 → 완성 파일)</h1>

<p>입력 자연어<br />
r1과 r2의 범위는 100부터 2000까지 10 단위로 가능해, spice netlist 경로는 path/to/netlist.sp 이고, verr_abs를 최소화 하고 싶어.</p>

<p>모델 기대 출력</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pgsql

** Variables **
Variable | param_name | initValue | scale(linear, log) | Variable Type(Incremental, Discrete, Fixed, Continuous) | Variable Values(범위, 스텝) | Description
r1 | r1 | 1050 | linear | Incremental | 100..2000 step 10 | Resistor R1 (Ω)
r2 | r2 | 1050 | linear | Incremental | 100..2000 step 10 | Resistor R2 (Ω)

** Objectives **
Objective | Use(True/False) | Goal (Minimize, Maximize..) | Goal Detail (범위 등이 목적이면 이에 관한 정보) | Weight (1.0) | Description (주석) | Function Detail | Circuit Simulation | verr_abs | each | 0 | input netlist 경로 | fsspice_scope | version
verr_abs | True | Minimize |  | 1.0 | 절대 전압 오차 최소화 | Circuit Simulation | verr_abs | each | 0 | path/to/netlist.sp | default | latest
</code></pre></div></div>

<p>설명</p>

<ul>
  <li>
    <p>initValue는 범위의 중앙값(100과 2000의 평균=1050)으로 자동 설정.</p>
  </li>
  <li>
    <p>스케일 언급이 없으므로 linear.</p>
  </li>
  <li>
    <p>범위+스텝이므로 Variable Type은 Incremental, 표기는 “start..end step step”.</p>
  </li>
  <li>
    <p>Objectives의 Function Detail 하위 필드들은 규칙에 따라 채움:</p>

    <ul>
      <li>
        <p>Circuit Simulation: 고정 문자열</p>
      </li>
      <li>
        <p>Metric: verr_abs</p>
      </li>
      <li>
        <p>Aggregation: each(기본)</p>
      </li>
      <li>
        <p>Target: Minimize의 기본 타깃 0</p>
      </li>
      <li>
        <p>Netlist Path: path/to/netlist.sp</p>
      </li>
      <li>
        <p>Scope: default</p>
      </li>
      <li>
        <p>Version: latest</p>
      </li>
    </ul>
  </li>
</ul>

<h1 id="3-빠른-적용-절차">3) 빠른 적용 절차</h1>

<ol>
  <li>
    <p>위 “GPT-OSS-120B용 생성 프롬프트”를 시스템 프롬프트로 설정.</p>
  </li>
  <li>
    <p>사용자의 자연어를 그대로 사용자 입력으로 넣음.</p>
  </li>
  <li>
    <p>모델이 출력한 두 섹션을 파일에 저장하여 최적화 툴의 입력으로 사용.</p>
  </li>
</ol>

<h1 id="4-확장-팁">4) 확장 팁</h1>

<ul>
  <li>
    <p>다변수: 변수 문장이 여러 개면 Variables 표에 행을 계속 추가.</p>
  </li>
  <li>
    <p>이산 목록: “r3는 {10, 22, 47, 100} 중 선택” → Variable Type=Discrete, Variable Values={10, 22, 47, 100}.</p>
  </li>
  <li>
    <p>고정값: “r4는 1kΩ로 고정” → Variable Type=Fixed, Variable Values=1000, initValue=1000, Description에 “(1 kΩ)” 표기.</p>
  </li>
  <li>
    <p>연속범위: “c1은 1pF~10pF” → Variable Type=Continuous, Variable Values=1pF..10pF, 스텝 공란.</p>
  </li>
  <li>
    <p>로그스케일: “c1은 로그 스케일” 문구가 있으면 scale=log.</p>
  </li>
  <li>
    <p>다중 목적: 각 목적마다 Objectives 행을 추가하고 Weight를 원하는 비율로 기입. Range 목표는 Goal=Range, Goal Detail에 수치 범위를 채움.</p>
  </li>
</ul>

<p>필요하면 네가 쓰는 툴의 실제 스코프/버전 필드명에 맞게 Scope/Version 기본값 키워드를 바꿔줄 수도 있어. 이제 이 프롬프트로 아무 자연어를 넣어도 원하는 입력 파일을 안정적으로 생성할 수 있을 거야.</p>

<p class="chat--user">

영어로도 한 번 써줄래?

</p>

<p>Great—here’s the same setup in English.</p>

<h1 id="1-generation-prompt-for-gpt-oss-120b">1) Generation prompt for GPT-OSS-120B</h1>

<p>Use the block below as a system/instruction prompt. The model will take the user’s natural language (KR/EN) and output exactly the specified table format—nothing else.</p>
<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Your</span> <span class="n">role</span><span class="p">:</span> <span class="n">Generator</span> <span class="n">of</span> <span class="n">an</span> <span class="n">optimization</span> <span class="n">tool</span> <span class="n">input</span> <span class="n">file</span><span class="p">.</span>
<span class="n">Input</span><span class="p">:</span> <span class="n">The</span> <span class="n">user</span> <span class="n">describes</span> <span class="nf">variables</span> <span class="p">(</span><span class="n">range</span><span class="p">/</span><span class="n">step</span><span class="p">/</span><span class="n">scale</span><span class="p">/</span><span class="k">init</span><span class="p">),</span> <span class="nf">objectives</span> <span class="p">(</span><span class="n">min</span><span class="p">/</span><span class="n">max</span><span class="p">/</span><span class="n">target</span><span class="p">,</span> <span class="n">weight</span><span class="p">),</span> <span class="k">and</span> <span class="n">circuit</span> <span class="n">simulation</span> <span class="nf">settings</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.,</span> <span class="n">netlist</span> <span class="n">path</span><span class="p">)</span> <span class="k">in</span> <span class="n">natural</span> <span class="n">language</span><span class="p">.</span>
<span class="n">Output</span><span class="p">:</span> <span class="n">Exactly</span> <span class="n">two</span> <span class="nf">sections</span> <span class="p">(</span><span class="err">“</span><span class="p">**</span> <span class="n">Variables</span> <span class="p">**</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="p">**</span> <span class="n">Objectives</span> <span class="p">**</span><span class="err">”</span><span class="p">)</span> <span class="k">as</span> <span class="n">plain</span> <span class="n">text</span> <span class="n">tables</span> <span class="k">in</span> <span class="n">the</span> <span class="n">format</span> <span class="n">below</span><span class="p">.</span> <span class="n">Do</span> <span class="k">not</span> <span class="k">add</span> <span class="n">any</span> <span class="n">preface</span><span class="p">/</span><span class="n">postscript</span><span class="p">/</span><span class="n">comments</span><span class="err">—</span><span class="n">output</span> <span class="n">only</span> <span class="n">those</span> <span class="n">two</span> <span class="n">sections</span><span class="p">.</span>

<span class="p">[</span><span class="n">Normalization</span> <span class="n">rules</span><span class="p">]</span>
<span class="m">1</span><span class="p">)</span> <span class="n">Variables</span>
   <span class="p">-</span> <span class="n">Variable</span><span class="p">:</span> <span class="n">display</span> <span class="nf">name</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.,</span> <span class="n">r1</span><span class="p">).</span> <span class="n">Preserve</span> <span class="n">user</span> <span class="n">casing</span><span class="p">/</span><span class="n">spaces</span><span class="p">;</span> <span class="n">lowercase</span> <span class="k">is</span> <span class="n">recommended</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">param_name</span><span class="p">:</span> <span class="n">tool</span> <span class="n">parameter</span> <span class="n">key</span><span class="p">.</span> <span class="n">If</span> <span class="k">not</span> <span class="n">specified</span><span class="p">,</span> <span class="k">set</span> <span class="n">equal</span> <span class="n">to</span> <span class="n">Variable</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">initValue</span><span class="p">:</span>
       <span class="err">•</span> <span class="n">If</span> <span class="n">a</span> <span class="n">range</span> <span class="k">is</span> <span class="n">given</span> <span class="k">and</span> <span class="n">no</span> <span class="k">init</span> <span class="k">is</span> <span class="n">provided</span><span class="p">,</span> <span class="k">set</span> <span class="n">to</span> <span class="n">the</span> <span class="n">midpoint</span><span class="p">.</span>
       <span class="err">•</span> <span class="n">If</span> <span class="n">a</span> <span class="n">discrete</span> <span class="k">set</span> <span class="k">is</span> <span class="n">given</span><span class="p">,</span> <span class="k">set</span> <span class="n">to</span> <span class="n">its</span> <span class="n">first</span> <span class="k">value</span><span class="p">.</span>
       <span class="err">•</span> <span class="n">If</span> <span class="n">Fixed</span><span class="p">,</span> <span class="k">set</span> <span class="n">to</span> <span class="n">that</span> <span class="k">fixed</span> <span class="k">value</span><span class="p">.</span>
   <span class="p">-</span> <span class="nf">scale</span><span class="p">(</span><span class="n">linear</span><span class="p">,</span> <span class="n">log</span><span class="p">):</span> <span class="k">set</span> <span class="n">to</span> <span class="n">log</span> <span class="k">if</span> <span class="n">the</span> <span class="n">user</span> <span class="n">mentions</span> <span class="err">“</span><span class="n">log</span><span class="p">/</span><span class="n">logarithmic</span><span class="p">/</span><span class="n">decade</span><span class="p">/</span><span class="n">exponential</span><span class="p">/</span><span class="n">multiplicative</span><span class="err">”</span><span class="p">;</span> <span class="n">otherwise</span> <span class="n">linear</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">Variable</span> <span class="n">Type</span><span class="p">:</span>
       <span class="err">•</span> <span class="n">Range</span> <span class="p">+</span> <span class="n">step</span> <span class="err">→</span> <span class="n">Incremental</span>
       <span class="err">•</span> <span class="n">Specific</span> <span class="k">value</span> <span class="n">list</span> <span class="err">→</span> <span class="n">Discrete</span>
       <span class="err">•</span> <span class="n">Fixed</span> <span class="k">value</span> <span class="err">→</span> <span class="n">Fixed</span>
       <span class="err">•</span> <span class="n">Continuous</span> <span class="nf">range</span> <span class="p">(</span><span class="n">no</span> <span class="n">step</span><span class="p">)</span> <span class="err">→</span> <span class="n">Continuous</span>
   <span class="p">-</span> <span class="n">Variable</span> <span class="nf">Values</span> <span class="p">(</span><span class="n">range</span><span class="p">,</span> <span class="n">step</span><span class="p">)</span> <span class="n">notation</span><span class="p">:</span>
       <span class="err">•</span> <span class="n">Range</span> <span class="p">+</span> <span class="n">step</span><span class="p">:</span> <span class="err">“</span><span class="n">start</span><span class="p">..</span><span class="n">end</span> <span class="n">step</span> <span class="n">step</span><span class="err">”</span>
       <span class="err">•</span> <span class="n">Continuous</span> <span class="n">range</span><span class="p">:</span> <span class="err">“</span><span class="n">start</span><span class="p">..</span><span class="n">end</span><span class="err">”</span>
       <span class="err">•</span> <span class="n">Discrete</span> <span class="k">set</span><span class="p">:</span> <span class="err">“</span><span class="p">{</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">,</span> <span class="n">v3</span><span class="p">,</span> <span class="p">...}</span><span class="err">”</span>
       <span class="err">•</span> <span class="n">Fixed</span><span class="p">:</span> <span class="n">write</span> <span class="n">the</span> <span class="n">single</span> <span class="n">numeric</span> <span class="k">value</span>
   <span class="p">-</span> <span class="n">If</span> <span class="n">units</span> <span class="n">like</span> <span class="n">k</span><span class="err">Ω</span><span class="p">/</span><span class="n">M</span><span class="err">Ω</span> <span class="n">are</span> <span class="n">given</span><span class="p">,</span> <span class="k">do</span> <span class="k">not</span> <span class="n">convert</span> <span class="n">to</span> <span class="k">base</span> <span class="n">units</span><span class="p">;</span> <span class="n">keep</span> <span class="n">the</span> <span class="n">numeric</span> <span class="k">as</span> <span class="n">entered</span> <span class="k">and</span> <span class="n">note</span> <span class="n">units</span> <span class="k">in</span> <span class="n">Description</span><span class="p">.</span>

<span class="m">2</span><span class="p">)</span> <span class="n">Objectives</span>
   <span class="p">-</span> <span class="n">Objective</span><span class="p">:</span> <span class="n">metric</span><span class="p">/</span><span class="n">function</span> <span class="n">name</span><span class="p">,</span> <span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.,</span> <span class="n">verr_abs</span><span class="p">,</span> <span class="n">psrr</span><span class="p">,</span> <span class="n">gain</span><span class="p">.</span>
   <span class="p">-</span> <span class="nf">Use</span><span class="p">(</span><span class="n">True</span><span class="p">/</span><span class="n">False</span><span class="p">):</span> <span class="n">True</span> <span class="k">if</span> <span class="n">the</span> <span class="n">user</span> <span class="n">asks</span> <span class="n">to</span> <span class="n">minimize</span><span class="p">/</span><span class="n">maximize</span><span class="p">/</span><span class="n">target</span><span class="p">-</span><span class="n">range</span> <span class="k">this</span> <span class="n">metric</span><span class="p">;</span> <span class="n">False</span> <span class="k">if</span> <span class="n">excluded</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">Goal</span><span class="p">:</span> <span class="n">Minimize</span> <span class="p">/</span> <span class="n">Maximize</span> <span class="p">/</span> <span class="nf">Range</span> <span class="p">(</span><span class="k">as</span> <span class="n">requested</span><span class="p">).</span>
   <span class="p">-</span> <span class="n">Goal</span> <span class="n">Detail</span><span class="p">:</span> <span class="n">numeric</span> <span class="n">range</span><span class="p">/</span><span class="n">target</span> <span class="n">info</span> <span class="k">when</span> <span class="nf">applicable</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.,</span> <span class="err">“</span><span class="m">0.9</span><span class="err">–</span><span class="m">1.1</span> <span class="n">V</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="p">&lt;=</span> <span class="m">0.01</span><span class="err">”</span><span class="p">);</span> <span class="n">may</span> <span class="n">be</span> <span class="n">blank</span> <span class="k">for</span> <span class="n">simple</span> <span class="n">min</span><span class="p">/</span><span class="n">max</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">Weight</span><span class="p">:</span> <span class="k">default</span> <span class="m">1.0</span> <span class="k">if</span> <span class="n">unspecified</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">Description</span><span class="p">:</span> <span class="kt">short</span> <span class="n">comment</span> <span class="k">in</span> <span class="n">Korean</span> <span class="k">or</span> <span class="n">English</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">Fill</span> <span class="n">the</span> <span class="n">following</span> <span class="n">columns</span> <span class="n">after</span> <span class="n">Description</span> <span class="k">in</span> <span class="k">this</span> <span class="n">order</span><span class="p">:</span>
       <span class="err">•</span> <span class="n">Function</span> <span class="n">Detail</span><span class="p">:</span> <span class="err">“</span><span class="n">Circuit</span> <span class="n">Simulation</span><span class="err">”</span> <span class="p">(</span><span class="k">when</span> <span class="n">based</span> <span class="k">on</span> <span class="n">a</span> <span class="n">circuit</span> <span class="n">sim</span><span class="p">)</span>
       <span class="err">•</span> <span class="n">Metric</span><span class="p">:</span> <span class="n">the</span> <span class="n">metric</span> <span class="nf">name</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.,</span> <span class="n">verr_abs</span><span class="p">)</span>
       <span class="err">•</span> <span class="n">Aggregation</span><span class="p">:</span> <span class="n">each</span><span class="p">,</span> <span class="n">mean</span><span class="p">,</span> <span class="n">max</span><span class="p">,</span> <span class="n">etc</span><span class="p">.;</span> <span class="k">default</span> <span class="n">each</span>
       <span class="err">•</span> <span class="n">Target</span><span class="p">:</span> <span class="n">numeric</span> <span class="n">target</span> <span class="k">if</span> <span class="n">any</span><span class="p">;</span> <span class="k">else</span> <span class="m">0</span> <span class="k">for</span> <span class="n">Minimize</span> <span class="k">or</span> <span class="n">blank</span>
       <span class="err">•</span> <span class="n">Netlist</span> <span class="n">Path</span><span class="p">:</span> <span class="n">the</span> <span class="n">provided</span> <span class="n">netlist</span> <span class="nf">path</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.,</span> <span class="n">path</span><span class="p">/</span><span class="n">to</span><span class="p">/</span><span class="n">netlist</span><span class="p">.</span><span class="n">sp</span><span class="p">)</span>
       <span class="err">•</span> <span class="n">Scope</span><span class="p">:</span> <span class="n">tool</span> <span class="n">scope</span><span class="p">,</span> <span class="k">default</span> <span class="err">“</span><span class="k">default</span><span class="err">”</span> <span class="k">if</span> <span class="n">unspecified</span>
       <span class="err">•</span> <span class="n">Version</span><span class="p">:</span> <span class="n">version</span> <span class="kt">string</span><span class="p">,</span> <span class="k">default</span> <span class="err">“</span><span class="n">latest</span><span class="err">”</span> <span class="k">if</span> <span class="n">unspecified</span>
   <span class="p">-</span> <span class="n">For</span> <span class="n">multiple</span> <span class="n">objectives</span><span class="p">,</span> <span class="n">output</span> <span class="n">multiple</span> <span class="n">rows</span><span class="p">.</span>

<span class="m">3</span><span class="p">)</span> <span class="n">Defaults</span><span class="p">/</span><span class="n">interpretation</span>
   <span class="p">-</span> <span class="n">Put</span> <span class="n">concise</span> <span class="n">unit</span><span class="p">/</span><span class="n">intent</span> <span class="n">notes</span> <span class="k">in</span> <span class="nf">Description</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">g</span><span class="p">.,</span> <span class="err">“</span><span class="n">Resistor</span> <span class="nf">R1</span> <span class="p">(</span><span class="err">Ω</span><span class="p">)</span><span class="err">”</span><span class="p">).</span>
   <span class="p">-</span> <span class="n">Scale</span> <span class="n">defaults</span> <span class="n">to</span> <span class="n">linear</span> <span class="n">unless</span> <span class="n">stated</span> <span class="n">otherwise</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">If</span> <span class="n">a</span> <span class="n">step</span> <span class="k">is</span> <span class="n">specified</span> <span class="err">→</span> <span class="n">Incremental</span><span class="p">;</span> <span class="n">a</span> <span class="n">list</span> <span class="n">of</span> <span class="n">values</span> <span class="err">→</span> <span class="n">Discrete</span><span class="p">.</span>
   <span class="p">-</span> <span class="n">Reasonable</span> <span class="n">defaults</span><span class="p">:</span> <span class="n">Aggregation</span><span class="p">=</span><span class="n">each</span><span class="p">,</span> <span class="n">Weight</span><span class="p">=</span><span class="m">1.0</span><span class="p">,</span> <span class="n">Scope</span><span class="p">=</span><span class="k">default</span><span class="p">,</span> <span class="n">Version</span><span class="p">=</span><span class="n">latest</span><span class="p">.</span>

<span class="p">[</span><span class="n">Output</span> <span class="n">format</span><span class="p">]</span>
<span class="n">Print</span> <span class="n">exactly</span> <span class="n">these</span> <span class="n">two</span> <span class="n">sections</span> <span class="k">in</span> <span class="k">this</span> <span class="n">order</span><span class="p">.</span> <span class="n">Keep</span> <span class="n">titles</span><span class="p">/</span><span class="n">headers</span><span class="p">/</span><span class="n">separators</span><span class="p">/</span><span class="n">column</span> <span class="n">order</span> <span class="n">exactly</span><span class="p">.</span>

<span class="p">**</span> <span class="n">Variables</span> <span class="p">**</span>
<span class="n">Variable</span> <span class="p">|</span> <span class="n">param_name</span> <span class="p">|</span> <span class="n">initValue</span> <span class="p">|</span> <span class="nf">scale</span><span class="p">(</span><span class="n">linear</span><span class="p">,</span> <span class="n">log</span><span class="p">)</span> <span class="p">|</span> <span class="n">Variable</span> <span class="nf">Type</span><span class="p">(</span><span class="n">Incremental</span><span class="p">,</span> <span class="n">Discrete</span><span class="p">,</span> <span class="n">Fixed</span><span class="p">,</span> <span class="n">Continuous</span><span class="p">)</span> <span class="p">|</span> <span class="n">Variable</span> <span class="nf">Values</span><span class="p">(</span><span class="n">range</span><span class="p">,</span> <span class="n">step</span><span class="p">)</span> <span class="p">|</span> <span class="n">Description</span>

<span class="p">**</span> <span class="n">Objectives</span> <span class="p">**</span>
<span class="n">Objective</span> <span class="p">|</span> <span class="nf">Use</span><span class="p">(</span><span class="n">True</span><span class="p">/</span><span class="n">False</span><span class="p">)</span> <span class="p">|</span> <span class="nf">Goal</span> <span class="p">(</span><span class="n">Minimize</span><span class="p">,</span> <span class="n">Maximize</span><span class="p">..)</span> <span class="p">|</span> <span class="n">Goal</span> <span class="nf">Detail</span> <span class="p">(</span><span class="n">range</span><span class="p">/</span><span class="n">target</span> <span class="n">info</span> <span class="k">if</span> <span class="n">applicable</span><span class="p">)</span> <span class="p">|</span> <span class="nf">Weight</span> <span class="p">(</span><span class="m">1.0</span><span class="p">)</span> <span class="p">|</span> <span class="nf">Description</span> <span class="p">(</span><span class="n">comment</span><span class="p">)</span> <span class="p">|</span> <span class="n">Function</span> <span class="n">Detail</span> <span class="p">|</span> <span class="n">Circuit</span> <span class="n">Simulation</span> <span class="p">|</span> <span class="n">verr_abs</span> <span class="p">|</span> <span class="n">each</span> <span class="p">|</span> <span class="m">0</span> <span class="p">|</span> <span class="n">input</span> <span class="n">netlist</span> <span class="n">path</span> <span class="p">|</span> <span class="n">fsspice_scope</span> <span class="p">|</span> <span class="n">version</span>

<span class="p">[</span><span class="n">Output</span> <span class="n">rules</span><span class="p">]</span>
<span class="p">-</span> <span class="n">Output</span> <span class="n">only</span> <span class="n">the</span> <span class="err">“</span><span class="p">**</span> <span class="n">Variables</span> <span class="p">**</span><span class="err">”</span> <span class="n">section</span> <span class="k">and</span> <span class="n">the</span> <span class="err">“</span><span class="p">**</span> <span class="n">Objectives</span> <span class="p">**</span><span class="err">”</span> <span class="n">section</span><span class="p">.</span>
<span class="p">-</span> <span class="n">No</span> <span class="n">extra</span> <span class="n">code</span> <span class="n">fences</span> <span class="n">around</span> <span class="n">each</span> <span class="n">section</span><span class="p">,</span> <span class="n">no</span> <span class="n">comments</span><span class="p">,</span> <span class="n">no</span> <span class="n">bullets</span><span class="p">,</span> <span class="n">no</span> <span class="n">numbering</span><span class="p">.</span>
<span class="p">-</span> <span class="n">Leave</span> <span class="n">empty</span> <span class="n">cells</span> <span class="k">as</span> <span class="n">an</span> <span class="n">empty</span> <span class="kt">string</span><span class="p">.</span>
</code></pre></div></div>

<h1 id="2-example-your-sentence--completed-file">2) Example (your sentence → completed file)</h1>

<p>Natural-language input<br />
r1 and r2 can range from 100 to 2000 with step 10, the SPICE netlist path is path/to/netlist.sp, and I want to minimize verr_abs.</p>

<p>Model expected output</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pgsql

** Variables **
Variable | param_name | initValue | scale(linear, log) | Variable Type(Incremental, Discrete, Fixed, Continuous) | Variable Values(range, step) | Description
r1 | r1 | 1050 | linear | Incremental | 100..2000 step 10 | Resistor R1 (Ω)
r2 | r2 | 1050 | linear | Incremental | 100..2000 step 10 | Resistor R2 (Ω)

** Objectives **
Objective | Use(True/False) | Goal (Minimize, Maximize..) | Goal Detail (range/target info if applicable) | Weight (1.0) | Description (comment) | Function Detail | Circuit Simulation | verr_abs | each | 0 | input netlist path | fsspice_scope | version
verr_abs | True | Minimize |  | 1.0 | Minimize absolute voltage error | Circuit Simulation | verr_abs | each | 0 | path/to/netlist.sp | default | latest
</code></pre></div></div>

<p>Notes</p>

<ul>
  <li>
    <p>initValue is the midpoint of 100 and 2000, i.e., 1050.</p>
  </li>
  <li>
    <p>Linear scale by default.</p>
  </li>
  <li>
    <p>Range + step → Variable Type = Incremental; notation “start..end step step”.</p>
  </li>
  <li>
    <p>Objective details follow the rule order: Function Detail, Metric, Aggregation, Target, Netlist Path, Scope, Version.</p>
  </li>
</ul>

<h1 id="3-quick-how-to">3) Quick how-to</h1>

<ol>
  <li>
    <p>Set the “Generation prompt for GPT-OSS-120B” above as the system prompt.</p>
  </li>
  <li>
    <p>Feed the user’s natural-language request as the user message.</p>
  </li>
  <li>
    <p>Save the model’s two-section output as the optimization input file.</p>
  </li>
</ol>

<h1 id="4-extra-tips">4) Extra tips</h1>

<ul>
  <li>
    <p>Multiple variables: add more rows under Variables.</p>
  </li>
  <li>
    <p>Discrete list: “r3 is one of {10, 22, 47, 100}” → Variable Type=Discrete, Variable Values={10, 22, 47, 100}.</p>
  </li>
  <li>
    <p>Fixed value: “r4 is fixed at 1 kΩ” → Variable Type=Fixed, Variable Values=1000, initValue=1000, and note “(1 kΩ)” in Description.</p>
  </li>
  <li>
    <p>Continuous range: “c1 is 1 pF to 10 pF” → Variable Type=Continuous, Variable Values=1 pF..10 pF (no step).</p>
  </li>
  <li>
    <p>Log scale: if the user mentions logarithmic/decade, set scale=log.</p>
  </li>
  <li>
    <p>Multiple objectives: one row per metric; adjust Weight as needed. Range goals use Goal=Range with numeric bounds in Goal Detail.</p>
  </li>
</ul>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">vLLM 툴 호출 예제</title><link href="https://hvppyarchive.github.io/llm/vllm-responses/" rel="alternate" type="text/html" title="vLLM 툴 호출 예제" /><published>2025-10-19T11:47:56+09:00</published><updated>2025-10-19T11:47:56+09:00</updated><id>https://hvppyarchive.github.io/llm/vllm-responses</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/vllm-responses/"><![CDATA[<p class="chat--user">

vLLM(GPT-OSS-120B) + openai responses 파이썬 패키지를 이용해서 통신하는 예제 작성해줘. 이 때 tool calling을 해야해(harmony 형식 지원). 다음의 tool 을 지원하도록 해줘 1. 폴더 내의 파일 리스트 조회 2. 단일 파일 읽기

</p>

<p>좋아요! vLLM으로 GPT-OSS-120B를 띄우고, Python용 OpenAI SDK의 Responses API로 “harmony 형식 + tool calling”을 사용하는 최소·완전 예제를 만들어 드릴게요. 요구하신 두 가지 툴(폴더 목록 조회, 단일 파일 읽기)을 정의하고, 모델이 툴을 호출하면 실제 함수를 실행한 뒤 결과를 다시 모델에 넘겨 최종 답을 받는 구조입니다.</p>

<p>아래 순서대로 진행하면 됩니다.</p>

<ol>
  <li>vLLM 서버 실행(오픈AI 호환 엔드포인트)</li>
</ol>

<ul>
  <li>vLLM은 OpenAI-compatible 서버를 제공하므로 SDK의 <code class="language-plaintext highlighter-rouge">base_url</code>만 바꿔서 쓸 수 있습니다. 예시처럼 gpt-oss-120b 모델을 서빙하세요. <a href="https://cookbook.openai.com/articles/gpt-oss/run-vllm">OpenAI Cookbook</a></li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># vLLM 설치 및 서버 기동(공식 가이드에 맞춤)</span>
<span class="c"># 참고: gpt-oss는 vLLM에서 Responses API와 Chat Completions API 둘 다 지원합니다.</span>
vllm serve openai/gpt-oss-120b
<span class="c"># 서버는 기본적으로 http://localhost:8000/v1 에서 OpenAI 호환 API를 엽니다.</span>
</code></pre></div></div>

<ol>
  <li>핵심 아이디어(툴 호출 루프)</li>
</ol>

<ul>
  <li>
    <p>Responses API로 요청을 보내면 <code class="language-plaintext highlighter-rouge">output</code> 배열에 항목들이 들어오는데, 그중 <code class="language-plaintext highlighter-rouge">type == "function_call"</code>인 항목이 있으면 해당 함수를 로컬에서 실행하고, 결과를 <code class="language-plaintext highlighter-rouge">tool_outputs</code>로 다시 <code class="language-plaintext highlighter-rouge">responses.create</code>에 넘겨 후속 추론을 이어갑니다. <code class="language-plaintext highlighter-rouge">previous_response_id</code>를 사용해 직전 턴과 연결합니다. <a href="https://platform.openai.com/docs/guides/function-calling?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>GPT-OSS 계열은 Harmony 응답 포맷을 사용하도록 학습되어 있으며, vLLM + OpenAI SDK 조합을 쓰면 별도 포맷 처리 없이 그대로 동작합니다. 직접 토큰 레벨 제어가 필요할 때만 Harmony SDK를 사용하면 됩니다. <a href="https://cookbook.openai.com/articles/gpt-oss/run-vllm">OpenAI Cookbook</a></p>
  </li>
  <li>
    <p>vLLM은 Responses API와 툴 호출을 지원하므로 이 코드가 그대로 작동합니다. <a href="https://cookbook.openai.com/articles/gpt-oss/run-vllm">OpenAI Cookbook</a></p>
  </li>
</ul>

<ol>
  <li>파이썬 예제 코드(툴 2종: 폴더 목록, 파일 읽기)</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pip install openai
# 환경: vLLM OpenAI-compatible 서버가 localhost:8000/v1 에서 실행 중이어야 합니다.
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span>

<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># 0) OpenAI 클라이언트: vLLM 호환 서버로 지정
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span>
    <span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">http://localhost:8000/v1</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># vLLM OpenAI-compatible 서버
</span>    <span class="n">api_key</span><span class="o">=</span><span class="sh">"</span><span class="s">EMPTY</span><span class="sh">"</span>                       <span class="c1"># vLLM 기본 토큰(검증 안함). 필요시 임의 문자열
</span><span class="p">)</span>

<span class="c1"># 1) 실제로 실행될 로컬 함수들(툴 구현)
</span><span class="k">def</span> <span class="nf">list_directory</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">expanduser</span><span class="p">().</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">exists</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">():</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Directory not found: </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

    <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">iterdir</span><span class="p">()):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">child</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">is_dir</span><span class="sh">"</span><span class="p">:</span> <span class="n">child</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">(),</span>
                <span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">child</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="n">child</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span>
            <span class="p">})</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">child</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)})</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">200_000</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">expanduser</span><span class="p">().</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">exists</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_file</span><span class="p">():</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">File not found: </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 텍스트 파일 가정. 이진 파일이면 깨질 수 있음 → errors='replace'
</span>        <span class="n">data</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">data</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_bytes</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">data</span><span class="p">[:</span><span class="n">max_bytes</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">... [truncated]</span><span class="sh">"</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">}</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)}</span>

<span class="c1"># 2) 툴 스키마 정의(Harmony/Responses용 function tool)
</span><span class="n">tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_directory</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List files and folders in a directory.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Target directory path</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a text file from disk.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Target file path</span><span class="sh">"</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">max_bytes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Max characters to return</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200000</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">]</span>

<span class="c1"># 로컬 함수 디스패처
</span><span class="n">FUNCTIONS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">list_directory</span><span class="sh">"</span><span class="p">:</span> <span class="n">list_directory</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">read_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">read_file</span><span class="p">,</span>
<span class="p">}</span>

<span class="k">def</span> <span class="nf">extract_function_calls</span><span class="p">(</span><span class="n">response_obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API의 응답에서 function_call 항목을 추출.
    SDK 버전마다 타입 클래스가 달라질 수 있으므로 dict로 안전하게 처리.
    각 항목: { </span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="s">: str, </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">: str, </span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="s">: dict }
    </span><span class="sh">"""</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">response_obj</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">response_obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">model_dump</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="n">response_obj</span>
    <span class="n">calls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">call_id</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">)</span>
            <span class="c1"># arguments는 dict 이거나 JSON string일 수 있음
</span>            <span class="n">raw_args</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span><span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_tool_call</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    해당 툴을 실제 실행하고, 문자열(JSON)로 결과를 반환.
    모델로 돌려보낼 때는 문자열이어야 합니다.
    </span><span class="sh">"""</span>
    <span class="n">fn</span> <span class="o">=</span> <span class="n">FUNCTIONS</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">fn</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown function: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">})</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">fn</span><span class="p">(</span><span class="o">**</span><span class="n">arguments</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">TypeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="c1"># 잘못된 인자 등
</span>        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Bad arguments for </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">},</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)},</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">respond_with_tools</span><span class="p">(</span><span class="n">user_prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">openai/gpt-oss-120b</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    1) 사용자 입력으로 응답 생성 시도
    2) 툴 호출이 나오면 실제 실행 → tool_outputs 로 재호출
    3) 더 이상 툴 호출이 없을 때 최종 텍스트를 반환
    </span><span class="sh">"""</span>
    <span class="n">prev_id</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">final_text</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">prev_id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># 첫 턴: 사용자 입력을 보냄
</span>            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">user_prompt</span>
            <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 두 번째 턴부터는 tool_outputs만 넘기고 이어서 추론
</span>            <span class="n">resp</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">previous_response_id</span><span class="o">=</span><span class="n">prev_id</span><span class="p">,</span>
                <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs</span>  <span class="c1"># 직전 루프에서 준비
</span>            <span class="p">)</span>

        <span class="c1"># 툴 호출이 있는지 확인
</span>        <span class="n">calls</span> <span class="o">=</span> <span class="nf">extract_function_calls</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
            <span class="c1"># 최종 답변
</span>            <span class="c1"># Responses SDK는 편의 프로퍼티로 output_text 를 제공합니다.
</span>            <span class="k">try</span><span class="p">:</span>
                <span class="n">final_text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">output_text</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="c1"># 호환성 대비
</span>                <span class="n">data</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">model_dump</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="n">resp</span>
                <span class="c1"># output 배열에서 assistant 텍스트를 합치기
</span>                <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                    <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                            <span class="k">if</span> <span class="n">c</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
                <span class="n">final_text</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span> <span class="k">if</span> <span class="n">chunks</span> <span class="k">else</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">break</span>

        <span class="c1"># 하나 이상 툴 호출 → 모두 실행 후 결과를 묶어서 넘김
</span>        <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
            <span class="n">result_str</span> <span class="o">=</span> <span class="nf">run_tool_call</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
            <span class="n">tool_outputs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">result_str</span>
            <span class="p">})</span>

        <span class="n">prev_id</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="nb">id</span>  <span class="c1"># 이어지는 턴에서 previous_response_id로 연결
</span>
    <span class="k">return</span> <span class="n">final_text</span> <span class="ow">or</span> <span class="sh">""</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="c1"># 사용 예시(원하는 경로로 바꾸세요)
</span>    <span class="n">prompt</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">현재 작업 폴더의 파일을 보여주고(./), </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">그중 README.md가 있으면 내용을 읽어서 요약해줘.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">answer</span> <span class="o">=</span> <span class="nf">respond_with_tools</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== Assistant ===</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">answer</span><span class="p">)</span>
</code></pre></div></div>

<ol>
  <li>포인트 요약</li>
</ol>

<ul>
  <li>
    <p>vLLM는 OpenAI-compatible 서버로 Responses API를 그대로 지원합니다. 즉 <code class="language-plaintext highlighter-rouge">base_url</code>만 바꿔서 <code class="language-plaintext highlighter-rouge">client.responses.create(...)</code>를 호출하면 됩니다. <a href="https://cookbook.openai.com/articles/gpt-oss/run-vllm">OpenAI Cookbook</a></p>
  </li>
  <li>
    <p>툴 스키마는 <code class="language-plaintext highlighter-rouge">{"type": "function", "function": {name, description, parameters}}</code> 형태로 정의합니다. GPT-OSS는 Harmony 포맷을 이해하며 vLLM 경유 시 별도 처리 없이 툴 호출이 동작합니다. <a href="https://cookbook.openai.com/articles/gpt-oss/run-vllm">OpenAI Cookbook</a></p>
  </li>
  <li>
    <p>모델이 <code class="language-plaintext highlighter-rouge">function_call</code>을 생성하면, 각 항목의 <code class="language-plaintext highlighter-rouge">call_id</code>, <code class="language-plaintext highlighter-rouge">name</code>, <code class="language-plaintext highlighter-rouge">arguments</code>를 꺼내 실제 코드를 실행하고, 결과를 <code class="language-plaintext highlighter-rouge">tool_outputs=[{"tool_call_id": ..., "output": "..."}]</code>로 다시 <code class="language-plaintext highlighter-rouge">responses.create</code>에 넘겨 한 턴을 이어갑니다. <code class="language-plaintext highlighter-rouge">previous_response_id</code>로 직전 턴을 연결합니다. <a href="https://platform.openai.com/docs/guides/function-calling?utm_source=chatgpt.com">OpenAI 플랫폼+1</a></p>
  </li>
  <li>
    <p>gpt-oss를 vLLM로 직접 샘플링할 때는 Harmony SDK로 프롬프트/스톱토큰을 관리해야 하지만, OpenAI-compatible 서버 + SDK 경로에서는 신경 쓸 필요가 거의 없습니다. <a href="https://cookbook.openai.com/articles/gpt-oss/run-vllm">OpenAI Cookbook</a></p>
  </li>
</ul>

<p>필요하면 위 코드에 스트리밍(<code class="language-plaintext highlighter-rouge">stream=True</code>) 처리나, 바이너리 파일 감지/차단 같은 보강 로직도 덧대드릴게요.</p>

<p class="chat--user">

대화를 두 턴은 했으면 좋겠어. README.md를 읽었으니 다음엔 requirements.txt를 읽자

</p>

<p>좋아요. “두 턴 대화”가 자연스럽게 이어지도록, 첫 턴에서 README.md를 읽고 요약한 뒤, 둘째 턴에서 requirements.txt를 읽는 구조를 그대로 보여주는 예제를 드릴게요. 핵심은 Responses API에서 previous_response_id로 대화 문맥을 잇고, 툴 호출(function_call)이 올 때마다 실제 함수를 실행해 tool_outputs로 되돌려주는 루프를 매 턴마다 돌리는 것입니다.</p>

<p>아래 순서대로 보면 됩니다.</p>

<ol>
  <li>
    <p>vLLM(OpenAI-compatible) 서버가 localhost:8000/v1에서 실행 중이라고 가정합니다.</p>
  </li>
  <li>
    <p>두 개의 툴(list_directory, read_file)을 정의합니다.</p>
  </li>
  <li>
    <p>Conversation 클래스로 “턴 단위” 대화 실행기를 만들고, 턴마다 툴 호출 루프를 처리합니다.</p>
  </li>
  <li>
    <p>main에서 실제 두 턴을 수행합니다: 1턴(README.md) → 2턴(requirements.txt).</p>
  </li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pip install openai
# 사전 준비: vLLM(OpenAI-compatible) 서버를 http://localhost:8000/v1 에서 가동
#   예) vllm serve openai/gpt-oss-120b
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>

<span class="c1"># ===== 0) OpenAI 클라이언트: vLLM 호환 서버로 지정 =====
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span>
    <span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">http://localhost:8000/v1</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">api_key</span><span class="o">=</span><span class="sh">"</span><span class="s">EMPTY</span><span class="sh">"</span>  <span class="c1"># vLLM 기본값. 필요 시 임의 문자열로 대체
</span><span class="p">)</span>

<span class="c1"># ===== 1) 실제로 실행될 로컬 함수들(툴 구현) =====
</span><span class="k">def</span> <span class="nf">list_directory</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">expanduser</span><span class="p">().</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">exists</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">():</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Directory not found: </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
    <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">child</span> <span class="ow">in</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">iterdir</span><span class="p">()):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">child</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">is_dir</span><span class="sh">"</span><span class="p">:</span> <span class="n">child</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">(),</span>
                <span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">child</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="n">child</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span>
            <span class="p">})</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">child</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)})</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">:</span> <span class="n">items</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">read_file</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">200_000</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">expanduser</span><span class="p">().</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">exists</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_file</span><span class="p">():</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">File not found: </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">text</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">max_bytes</span><span class="p">:</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">[:</span><span class="n">max_bytes</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s">... [truncated]</span><span class="sh">"</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">text</span><span class="p">}</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)}</span>

<span class="c1"># ===== 2) 툴 스키마(Harmony/Responses용 function tool) =====
</span><span class="n">TOOLS</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_directory</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List files and folders in a directory.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Target directory path</span><span class="sh">"</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a text file from disk.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Target file path</span><span class="sh">"</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">max_bytes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Max characters to return</span><span class="sh">"</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200000</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">additionalProperties</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">]</span>
<span class="n">FUNCTIONS</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">list_directory</span><span class="sh">"</span><span class="p">:</span> <span class="n">list_directory</span><span class="p">,</span> <span class="sh">"</span><span class="s">read_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">read_file</span><span class="p">}</span>

<span class="c1"># ===== 3) 툴 호출 유틸 =====
</span><span class="k">def</span> <span class="nf">extract_function_calls</span><span class="p">(</span><span class="n">resp_obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    Responses API 응답에서 function_call들을 추출해
    [{call_id, name, arguments}, ...] 형태로 반환
    </span><span class="sh">"""</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">resp_obj</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">resp_obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">model_dump</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="n">resp_obj</span>
    <span class="n">calls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">function_call</span><span class="sh">"</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">call_id</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">raw_args</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">raw_args</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">raw_args</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">raw_args</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">raw_args</span><span class="p">})</span>
    <span class="k">return</span> <span class="n">calls</span>

<span class="k">def</span> <span class="nf">run_tool_call</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">arguments</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    해당 툴을 실제 실행하고 결과를 JSON 문자열로 반환
    </span><span class="sh">"""</span>
    <span class="n">fn</span> <span class="o">=</span> <span class="n">FUNCTIONS</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">fn</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Unknown function: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">},</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="nf">fn</span><span class="p">(</span><span class="o">**</span><span class="n">arguments</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">TypeError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Bad arguments for </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span><span class="p">},</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">({</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)},</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_output_text</span><span class="p">(</span><span class="n">resp_obj</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    최종 어시스턴트 텍스트를 꺼내는 헬퍼
    </span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">resp_obj</span><span class="p">.</span><span class="n">output_text</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">resp_obj</span><span class="p">.</span><span class="nf">model_dump</span><span class="p">()</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">resp_obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">model_dump</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="n">resp_obj</span>
        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
            <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                    <span class="k">if</span> <span class="n">c</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">output_text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>

<span class="c1"># ===== 4) 대화 실행기: 턴 단위로 previous_response_id를 이어감 =====
</span><span class="k">class</span> <span class="nc">Conversation</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">client</span><span class="p">:</span> <span class="n">OpenAI</span><span class="p">,</span> <span class="n">model</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">client</span> <span class="o">=</span> <span class="n">client</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tools</span> <span class="o">=</span> <span class="n">tools</span>
        <span class="n">self</span><span class="p">.</span><span class="n">last_response_id</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># 마지막 assistant 응답의 id
</span>
    <span class="k">def</span> <span class="nf">run_turn</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        한 턴을 수행:
          1) 사용자 입력을 모델에 보냄(문맥 연결: previous_response_id 사용)
          2) function_call이 있으면 실제 실행 → tool_outputs로 재호출
          3) function_call이 더 이상 없으면 최종 텍스트 반환
        </span><span class="sh">"""</span>
        <span class="c1"># 1) 사용자 입력 전송
</span>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">last_response_id</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">user_input</span>
            <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">previous_response_id</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">last_response_id</span><span class="p">,</span>
                <span class="nb">input</span><span class="o">=</span><span class="n">user_input</span>
            <span class="p">)</span>

        <span class="c1"># 2) 툴 호출 루프
</span>        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">calls</span> <span class="o">=</span> <span class="nf">extract_function_calls</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="n">tool_outputs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="nf">run_tool_call</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">],</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
                <span class="n">tool_outputs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">call_id</span><span class="sh">"</span><span class="p">],</span>
                    <span class="sh">"</span><span class="s">output</span><span class="sh">"</span><span class="p">:</span> <span class="n">result</span>
                <span class="p">})</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">previous_response_id</span><span class="o">=</span><span class="n">resp</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="n">tool_outputs</span><span class="o">=</span><span class="n">tool_outputs</span>
            <span class="p">)</span>

        <span class="c1"># 3) 최종 텍스트와 응답 id 갱신
</span>        <span class="n">text</span> <span class="o">=</span> <span class="nf">get_output_text</span><span class="p">(</span><span class="n">resp</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">last_response_id</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="nb">id</span>
        <span class="k">return</span> <span class="n">text</span>

<span class="c1"># ===== 5) 데모: 두 턴 대화 =====
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">conv</span> <span class="o">=</span> <span class="nc">Conversation</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">openai/gpt-oss-120b</span><span class="sh">"</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">TOOLS</span><span class="p">)</span>

    <span class="c1"># 첫 번째 턴: README.md를 읽고 요약 요청
</span>    <span class="n">turn1_user</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">프로젝트 루트(./)의 파일 목록을 보고 README.md가 있으면 읽어서 핵심을 요약해줘. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">없으면 왜 없는지도 알려줘.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">turn1_assistant</span> <span class="o">=</span> <span class="n">conv</span><span class="p">.</span><span class="nf">run_turn</span><span class="p">(</span><span class="n">turn1_user</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [TURN 1] Assistant ===</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">turn1_assistant</span><span class="p">)</span>

    <span class="c1"># 두 번째 턴: requirements.txt 읽기
</span>    <span class="n">turn2_user</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">좋아. 이제 같은 폴더에서 requirements.txt를 찾아서 내용을 읽고, </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">주요 패키지와 대략적 버전을 bullet로 정리해줘.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">turn2_assistant</span> <span class="o">=</span> <span class="n">conv</span><span class="p">.</span><span class="nf">run_turn</span><span class="p">(</span><span class="n">turn2_user</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== [TURN 2] Assistant ===</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">turn2_assistant</span><span class="p">)</span>
</code></pre></div></div>

<p>사용 팁과 체크포인트</p>

<ol>
  <li>
    <p>폴더 경로 기준은 현재 작업 디렉터리(./)입니다. 다른 경로를 쓰려면 프롬프트 또는 툴 인자(path)에 명시하세요.</p>
  </li>
  <li>
    <p>모델이 스스로 list_directory를 먼저 호출해 파일 존재 여부를 확인한 다음 read_file을 호출하도록 의도를 유도하고자, 사용자 프롬프트에 “목록을 보고 … 읽어줘”라고 써두었습니다.</p>
  </li>
  <li>
    <p>두 번째 턴에서는 previous_response_id로 문맥이 이어지므로, 같은 폴더를 바로 가정하고 requirements.txt만 요청하면 됩니다.</p>
  </li>
  <li>
    <p>read_file은 텍스트 파일 전용이며, 큰 파일은 max_bytes로 절단합니다. 이진 파일은 깨질 수 있으니 필요하면 바이너리 감지 로직을 추가하세요.</p>
  </li>
  <li>
    <p>스트리밍이 필요하면 responses.create(stream=True)로 바꾸고, 스트리밍 청크를 처리한 뒤 동일한 툴 호출 루프를 적용하면 됩니다.</p>
  </li>
</ol>

<p>이 스크립트를 그대로 실행하면, 실제 로컬 디렉터리의 README.md → requirements.txt 순서로 읽어서 요약/정리하는 두 턴 대화가 진행됩니다.</p>

<p class="chat--user">

여기에서보면 과거 대화를 같이 안 보내주고 저번 대화 id만 보내는 것 같은데 이런게 vLLM에도 지원돼?

</p>

<p>짧은 답: 네, 지원돼요. vLLM은 <code class="language-plaintext highlighter-rouge">/v1/responses</code> 엔드포인트를 갖고 <code class="language-plaintext highlighter-rouge">previous_response_id</code>를 받아 “직전 응답만” 넘겨도 문맥을 잇는 방식을 처리합니다. 다만 기본값에선 서버가 대화 상태를 저장하지 않도록 되어 있어, 상태 저장을 켜주거나(권장) 아니면 매 턴 전체 맥락을 직접 다시 보내야 합니다. <a href="https://cookbook.openai.com/articles/gpt-oss/run-vllm">OpenAI Cookbook+2</a></p>

<p>생각 순서</p>

<ol>
  <li>
    <p>무엇이 가능한가: vLLM은 OpenAI Responses API와 호환되며, <code class="language-plaintext highlighter-rouge">previous_response_id</code> 필드를 프로토콜에서 받아 처리합니다. 즉, “직전 응답의 id만” 전송해도 체이닝이 됩니다. <a href="https://cookbook.openai.com/articles/gpt-oss/run-vllm">OpenAI Cookbook+1</a></p>
  </li>
  <li>
    <p>왜 저장 옵션이 필요한가: OpenAI의 Responses API는 기본이 <code class="language-plaintext highlighter-rouge">store=True</code>라서 서버가 과거 턴을 내부 저장소에 보관합니다. vLLM은 기본에선 이를 꺼둔 상태이므로, 저장을 활성화하지 않으면 <code class="language-plaintext highlighter-rouge">store=True</code> 요청에 오류가 나거나, 저장 없이 동작해 <code class="language-plaintext highlighter-rouge">previous_response_id</code>의 이점(서버측 히든 상태 재사용)을 못 누릴 수 있습니다. 환경변수 <code class="language-plaintext highlighter-rouge">VLLM_ENABLE_RESPONSES_API_STORE=1</code>로 저장 기능을 켜면 OpenAI와 유사하게 동작합니다. 대안으로 클라이언트에서 <code class="language-plaintext highlighter-rouge">store=False</code>로 보내고 매 턴 전체 히스토리를 직접 재전송할 수도 있습니다. <a href="https://docs.vllm.ai/en/v0.10.1/api/vllm/entrypoints/openai/serving_responses.html?utm_source=chatgpt.com">VLLM Docs+2</a></p>
  </li>
</ol>

<p>빠른 설정 예시<br />
서버(상태 저장 ON):</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">VLLM_ENABLE_RESPONSES_API_STORE</span><span class="o">=</span>1 vllm serve openai/gpt-oss-120b <span class="nt">--port</span> 8000
</code></pre></div></div>

<p>클라이언트(두 턴 체인: 과거 대화 본문 미전송, id만 전달):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">OpenAI</span>
<span class="n">client</span> <span class="o">=</span> <span class="nc">OpenAI</span><span class="p">(</span><span class="n">base_url</span><span class="o">=</span><span class="sh">"</span><span class="s">http://localhost:8000/v1</span><span class="sh">"</span><span class="p">,</span> <span class="n">api_key</span><span class="o">=</span><span class="sh">"</span><span class="s">EMPTY</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 턴1
</span><span class="n">r1</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">openai/gpt-oss-120b</span><span class="sh">"</span><span class="p">,</span>
    <span class="nb">input</span><span class="o">=</span><span class="sh">"</span><span class="s">프로젝트 루트의 README.md를 읽고 핵심만 요약해줘.</span><span class="sh">"</span>
    <span class="c1"># store=True는 Responses API 기본값. vLLM에선 위 환경변수로 활성화 필요
</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">r1</span><span class="p">.</span><span class="n">output_text</span><span class="p">)</span>

<span class="c1"># 턴2: 과거 본문은 안 보내고, 직전 응답의 id만 연결
</span><span class="n">r2</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">openai/gpt-oss-120b</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">previous_response_id</span><span class="o">=</span><span class="n">r1</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
    <span class="nb">input</span><span class="o">=</span><span class="sh">"</span><span class="s">좋아. 이번엔 requirements.txt를 읽어서 주요 패키지와 버전을 정리해줘.</span><span class="sh">"</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">r2</span><span class="p">.</span><span class="n">output_text</span><span class="p">)</span>
</code></pre></div></div>

<p>만약 서버 상태 저장을 끄고 싶다면</p>

<ul>
  <li>매 요청에 <code class="language-plaintext highlighter-rouge">store=False</code>로 보내세요. 이 경우 서버가 상태를 안 가지므로, <code class="language-plaintext highlighter-rouge">previous_response_id</code>를 써도 실질적 이득이 없고 스스로 히스토리를 재전송해야 합니다. <a href="https://docs.vllm.ai/en/v0.10.1/api/vllm/entrypoints/openai/serving_responses.html?utm_source=chatgpt.com">VLLM Docs</a></li>
</ul>

<p>주의할 점</p>

<ul>
  <li>멀티 인스턴스/재시작 상황에선 저장소가 꺼져 있으면 체인 컨텍스트가 유실됩니다. vLLM 커뮤니티에서도 “Responses API의 풀 기능을 쓰려면 store/message 스토어가 필요”하다는 논의가 있습니다. 운영 환경에선 저장을 켜거나 외부 영속 스토어 전략을 함께 고려하세요. <a href="https://github.com/vllm-project/vllm/issues/24603?utm_source=chatgpt.com">GitHub</a></li>
</ul>

<p>핵심 요약</p>

<ul>
  <li>
    <p>가능: vLLM은 <code class="language-plaintext highlighter-rouge">previous_response_id</code> 체이닝을 받습니다. <a href="https://docs.vllm.ai/en/latest/api/vllm/entrypoints/openai/serving_responses.html?utm_source=chatgpt.com">VLLM Docs</a></p>
  </li>
  <li>
    <p>권장: <code class="language-plaintext highlighter-rouge">VLLM_ENABLE_RESPONSES_API_STORE=1</code>로 상태 저장을 켜서 “과거 대화 본문 무전송 + id만 전달” 패턴을 그대로 사용하세요. <a href="https://docs.vllm.ai/en/v0.10.1/api/vllm/entrypoints/openai/serving_responses.html?utm_source=chatgpt.com">VLLM Docs</a></p>
  </li>
  <li>
    <p>대안: 저장을 끌 땐 <code class="language-plaintext highlighter-rouge">store=False</code>로 보내고, 히스토리는 클라이언트가 재전송합니다. <a href="https://docs.vllm.ai/en/latest/api/vllm/entrypoints/openai/serving_responses.html?utm_source=chatgpt.com">VLLM Docs</a></p>
  </li>
</ul>

<p class="chat--user">

툴 다 빼고 간단히 테스트할 curl 예제만 만들어줘

</p>

<p>원하는 것만 딱! 툴 없이 vLLM(OpenAI-compatible) Responses API를 <code class="language-plaintext highlighter-rouge">curl</code>로 두 턴 테스트하는 최소 예제입니다. 서버는 <code class="language-plaintext highlighter-rouge">http://localhost:8000/v1</code>에서 <code class="language-plaintext highlighter-rouge">openai/gpt-oss-120b</code>를 서빙한다고 가정합니다.</p>

<ol>
  <li>단발성 호출(연결 없음)</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-s</span> http://localhost:8000/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer EMPTY"</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{
    "model": "openai/gpt-oss-120b",
    "input": "한 줄 농담 하나 해줘."
  }'</span> | jq <span class="nt">-r</span> <span class="s1">'.output_text'</span>
</code></pre></div></div>

<ol>
  <li>두 턴 대화(직전 응답 ID(previous_response_id)로 체인)</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 턴 1</span>
<span class="nv">RESP1</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-s</span> http://localhost:8000/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer EMPTY"</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> <span class="s1">'{
    "model": "openai/gpt-oss-120b",
    "input": "프로젝트 루트의 README.md를 읽었다고 치고, 한 줄로 요약해줘."
  }'</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"TURN1:"</span><span class="p">;</span> <span class="nb">echo</span> <span class="s2">"</span><span class="nv">$RESP1</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.output_text'</span>

<span class="c"># 직전 응답의 id 추출</span>
<span class="nv">RID</span><span class="o">=</span><span class="si">$(</span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$RESP1</span><span class="s2">"</span> | jq <span class="nt">-r</span> <span class="s1">'.id'</span><span class="si">)</span>

<span class="c"># 턴 2: 과거 본문은 보내지 않고 id만 연결</span>
curl <span class="nt">-s</span> http://localhost:8000/v1/responses <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Authorization: Bearer EMPTY"</span> <span class="se">\</span>
  <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
  <span class="nt">-d</span> <span class="s2">"{
    </span><span class="se">\"</span><span class="s2">model</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="s2">openai/gpt-oss-120b</span><span class="se">\"</span><span class="s2">,
    </span><span class="se">\"</span><span class="s2">previous_response_id</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="nv">$RID</span><span class="se">\"</span><span class="s2">,
    </span><span class="se">\"</span><span class="s2">input</span><span class="se">\"</span><span class="s2">: </span><span class="se">\"</span><span class="s2">좋아. 이제 requirements.txt를 읽었다고 치고, 주요 패키지만 bullet로 뽑아줘.</span><span class="se">\"</span><span class="s2">
  }"</span> | jq <span class="nt">-r</span> <span class="s1">'.output_text'</span>
</code></pre></div></div>

<p>주의</p>

<ul>
  <li>
    <p>vLLM에서 <code class="language-plaintext highlighter-rouge">previous_response_id</code> 체이닝을 쓰려면 서버가 응답 저장을 지원해야 합니다. 서버 기동 전에 상태 저장을 켜두었다면 위 예제가 그대로 작동하고, 저장이 꺼져 있다면 매 턴 전체 맥락을 직접 보내야 합니다.</p>
  </li>
  <li>
    <p>토큰 검증을 하지 않는 기본 설정이라면 Authorization 헤더의 값은 임의 문자열(예: <code class="language-plaintext highlighter-rouge">EMPTY</code>)이면 됩니다.</p>
  </li>
  <li>
    <p>모델 이름은 <code class="language-plaintext highlighter-rouge">vllm serve</code> 시 지정한 이름과 일치해야 합니다. 예) <code class="language-plaintext highlighter-rouge">vllm serve openai/gpt-oss-120b</code> → 요청 바디의 <code class="language-plaintext highlighter-rouge">"model": "openai/gpt-oss-120b"</code>.</p>
  </li>
</ul>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">LLM Local MCP</title><link href="https://hvppyarchive.github.io/llm/local-mcp/" rel="alternate" type="text/html" title="LLM Local MCP" /><published>2025-10-17T19:56:32+09:00</published><updated>2025-10-17T19:56:32+09:00</updated><id>https://hvppyarchive.github.io/llm/local-mcp</id><content type="html" xml:base="https://hvppyarchive.github.io/llm/local-mcp/"><![CDATA[<p class="chat--user">

LLM MCP 동작 원리

</p>

<p>좋은 질문이에요! “MCP(Model Context Protocol)”는 LLM 앱이 바깥 세계의 데이터와 도구에 안전하게 붙는 표준 대화 규약이에요. 아래처럼 “누가 누구와, 어떤 순서로, 무엇을 주고받는지”를 단계별로 정리해 드릴게요.</p>

<h1 id="한-줄-요약">한 줄 요약</h1>

<p>LLM 앱(호스트)이 <strong>클라이언트</strong> 를 통해 하나 이상의 <strong>MCP 서버</strong> 와 상태 유지 연결을 맺고, JSON-RPC 메시지로 <strong>리소스(Resources)</strong> ·<strong>프롬프트(Prompts)</strong> ·<strong>툴(Tools)</strong>을 발견→호출→결과를 받는 흐름입니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18">Model Context Protocol+1</a></p>

<h1 id="구성요소역할">구성요소(역할)</h1>

<ol>
  <li>
    <p><strong>Host(호스트)</strong> : 채팅앱/IDE처럼 LLM이 뛰는 “컨테이너”. 여러 MCP <strong>클라이언트</strong> 를 만들고 권한·보안을 관리합니다. 전체 대화 맥락도 이쪽이 쥡니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/architecture">Model Context Protocol</a></p>
  </li>
  <li>
    <p><strong>Client(클라이언트)</strong> : 특정 MCP <strong>서버</strong> 와 1:1 세션을 맺는 커넥터. 기능(캡퍼빌리티) 교섭과 메시지 라우팅을 담당합니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/architecture">Model Context Protocol</a></p>
  </li>
  <li>
    <p><strong>Server(서버)</strong> : 리소스/프롬프트/툴을 “제공”하는 쪽. 로컬 프로세스일 수도, 원격 서비스일 수도 있어요. <a href="https://modelcontextprotocol.io/specification/2025-06-18/architecture">Model Context Protocol</a></p>
  </li>
</ol>

<h1 id="통신-방식전송">통신 방식(전송)</h1>

<ul>
  <li>메시지 포맷은 <strong>JSON-RPC 2.0</strong>. 전송은 주로 <strong>stdio</strong>(서브프로세스 표준입출력) 또는 <strong>Streamable HTTP</strong>(POST/GET+SSE 옵션) 두 가지가 표준입니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/transports">Model Context Protocol</a></li>
</ul>

<h1 id="세션-수명주기핵심-단계">세션 수명주기(핵심 단계)</h1>

<ol>
  <li>
    <p><strong>initialize 요청</strong> : 클라이언트가 먼저 “지원 프로토콜 버전+클라이언트 기능”을 보냅니다.</p>
  </li>
  <li>
    <p><strong>initialize 응답</strong> : 서버가 “서버 기능(리소스/프롬프트/툴 등)”과 서버 정보, 선택적 지시문을 돌려줍니다.</p>
  </li>
  <li>
    <p><strong>initialized 알림</strong> : 클라이언트가 준비 완료를 통지하고 이후 정상 운용 단계로 진입합니다.</p>
  </li>
  <li>
    <p><strong>운용(Operation)</strong> : 합의된 기능만 사용합니다(예: tools/list, tools/call 등).</p>
  </li>
  <li>
    <p><strong>종료</strong> : 전송 방식에 맞게 그레이스풀하게 끊습니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle">Model Context Protocol</a></p>
  </li>
</ol>

<h1 id="서버가-제공하는-3가지-기본-프리미티브">서버가 제공하는 3가지 “기본 프리미티브”</h1>

<ul>
  <li>
    <p><strong>Resources(리소스)</strong> : 파일/문서/DB 스키마 같은 참조 데이터. <code class="language-plaintext highlighter-rouge">resources/list</code>로 목록을, <code class="language-plaintext highlighter-rouge">resources/read</code>로 내용을 가져옵니다. URI(file://, https://, git:// 등)로 식별되고 필요하면 구독/변경 알림도 됩니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/server">Model Context Protocol+1</a></p>
  </li>
  <li>
    <p><strong>Prompts(프롬프트)</strong> : 사용자가 골라 쓰는 템플릿/워크플로. <code class="language-plaintext highlighter-rouge">prompts/list</code>로 발견하고 <code class="language-plaintext highlighter-rouge">prompts/get</code>으로 인자 넣어 받아옵니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/server/prompts">Model Context Protocol</a></p>
  </li>
  <li>
    <p><strong>Tools(툴)</strong> : 모델이 “호출”하는 함수. JSON Schema로 입력(필수/형)을 선언하고, <code class="language-plaintext highlighter-rouge">tools/list</code>로 발견→<code class="language-plaintext highlighter-rouge">tools/call</code>로 실행→텍스트/이미지/구조화 JSON(옵션) 등으로 결과를 반환합니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/server/tools">Model Context Protocol</a></p>
  </li>
</ul>

<h1 id="실제-호출-흐름-단계별-예시">실제 호출 흐름, 단계별 예시</h1>

<ol>
  <li>
    <p>사용자가 “레포 이슈 찾아줘”라고 말함 → <strong>호스트</strong> 가 현재 대화·권한을 바탕으로 적절한 MCP <strong>클라이언트</strong> 를 선택. <a href="https://modelcontextprotocol.io/specification/2025-06-18/architecture">Model Context Protocol</a></p>
  </li>
  <li>
    <p>클라이언트↔서버가 <strong>initialize</strong> 로 버전·기능을 교섭(예: 서버는 tools/resources 지원, 클라이언트는 sampling 지원). <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle">Model Context Protocol</a></p>
  </li>
  <li>
    <p>클라이언트가 <code class="language-plaintext highlighter-rouge">tools/list</code>로 사용 가능한 툴을 조회(예: <code class="language-plaintext highlighter-rouge">search_issues</code>). <a href="https://modelcontextprotocol.io/specification/2025-06-18/server/tools">Model Context Protocol</a></p>
  </li>
  <li>
    <p>(필요 시) <code class="language-plaintext highlighter-rouge">resources/list</code>/<code class="language-plaintext highlighter-rouge">resources/read</code>로 현재 프로젝트 파일·설정 등 맥락을 취득. <a href="https://modelcontextprotocol.io/specification/2025-06-18/server/resources">Model Context Protocol</a></p>
  </li>
  <li>
    <p><strong>LLM</strong> 이 툴 설명과 입력 스키마를 이해하고 <code class="language-plaintext highlighter-rouge">tools/call</code>에 맞는 인자를 작성. 호스트 UI가 사용자에게 실행/권한을 확인(“사람-검토” 권장). <a href="https://modelcontextprotocol.io/specification/2025-06-18/server/tools">Model Context Protocol</a></p>
  </li>
  <li>
    <p>서버가 외부 API/DB를 호출하고 결과를 JSON-RPC 응답으로 반환(필요하면 리소스 링크나 구조화 JSON 포함). <a href="https://modelcontextprotocol.io/specification/2025-06-18/server/tools">Model Context Protocol</a></p>
  </li>
  <li>
    <p>호스트는 결과를 대화 맥락에 주입(서버는 전체 대화 기록을 직접 읽지 못하도록 분리). <a href="https://modelcontextprotocol.io/specification/2025-06-18/architecture">Model Context Protocol</a></p>
  </li>
  <li>
    <p>LLM이 최종 답변을 생성하고, 추가 액션이 필요하면 위 사이클을 반복.</p>
  </li>
</ol>

<h1 id="보안신뢰-원칙요점">보안·신뢰 원칙(요점)</h1>

<ul>
  <li>
    <p><strong>명시적 사용자 동의</strong> : 데이터 접근·툴 실행 전 사용자 승인이 필요합니다.</p>
  </li>
  <li>
    <p><strong>최소 공개</strong> : 서버는 필요한 맥락만 보고, 전체 대화/다른 서버의 상태는 볼 수 없게 설계됩니다.</p>
  </li>
  <li>
    <p><strong>툴은 잠재적 코드 실행</strong> 이므로 UI 경고·승인·로깅·취소·타임아웃 등을 권장합니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18">Model Context Protocol+1</a></p>
  </li>
  <li>
    <p>(HTTP 전송 시) <strong>Origin 검증/로컬 바인딩/인증</strong> 등 네트워크 보안 수칙을 지켜야 합니다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/transports">Model Context Protocol</a></p>
  </li>
</ul>

<h1 id="개발자가-기억하면-좋은-포인트">개발자가 기억하면 좋은 포인트</h1>

<ul>
  <li>
    <p><strong>발견(Discovery)</strong> : list 계열 API로 기능을 찾는다 → <strong>호출(Call)</strong> : schema에 맞춰 실행한다 → <strong>콘텐츠 주입(Contexting)</strong> : 결과를 대화에 넣는다(필요시 리소스 링크/구독). <a href="https://modelcontextprotocol.io/specification/2025-06-18/server/tools">Model Context Protocol+1</a></p>
  </li>
  <li>
    <p><strong>버전·기능 교섭</strong> 이 항상 먼저이고, 합의된 것만 쓴다. <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/lifecycle">Model Context Protocol</a></p>
  </li>
  <li>
    <p>구현은 <strong>stdio</strong> 가 가장 단순하고, <strong>Streamable HTTP</strong> 는 다중 연결·SSE 스트리밍·세션 ID로 확장 가능. <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/transports">Model Context Protocol</a></p>
  </li>
</ul>

<p>원하시면, 간단한 “Hello Tool” 서버/클라이언트 템플릿(예: Node/Python)으로 <code class="language-plaintext highlighter-rouge">initialize → tools/list → tools/call</code>까지 돌아가는 최소 예제를 바로 만들어 드릴게요.</p>

<p class="chat--user">

나에게 GPT-OSS 를 자체적으로 구동하는 서버가 있어. 여기에 MCP를 사용하도록 하려면?

</p>

<p>좋아요. “자체 GPT-OSS 서버”를 이미 돌리고 계시다면, 거기에 <strong>MCP(모델 컨텍스트 프로토콜)</strong>를 붙이는 방법은 크게 두 가지 시나리오가 있어요. 아래를 <strong>단계별</strong> 로 따라가면 됩니다.</p>

<hr />

<h1 id="시나리오-a-내-gpt-oss-앞에-mcp-호스트브리지를-둔다">시나리오 A) 내 GPT-OSS 앞에 ‘MCP 호스트(브리지)’를 둔다</h1>

<blockquote>
  <p>가장 일반적인 방식. “호스트(Host)=LLM 런타임 + MCP 클라이언트”가 <strong>MCP 서버들의 툴·리소스·프롬프트</strong> 를 발견→호출하고, 그 결과를 GPT-OSS 대화에 주입합니다. (MCP 클라이언트/서버 SDK와 전송 방식은 공식 문서·SDK에 있어요.) <a href="https://modelcontextprotocol.io/docs/develop/build-client">Model Context Protocol+3</a></p>
</blockquote>

<h2 id="0-사전-준비-gpt-oss-서비스를-openai-호환-api로">0) 사전 준비 (GPT-OSS 서비스를 OpenAI 호환 API로)</h2>

<ul>
  <li>vLLM 등으로 GPT-OSS를 <strong>OpenAI Chat Completions 호환</strong> 으로 띄워두면 편합니다. 예:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install</span> <span class="nt">--pre</span> <span class="nv">vllm</span><span class="o">==</span>0.10.1+gptoss <span class="nt">--extra-index-url</span> https://wheels.vllm.ai/gpt-oss/
vllm serve openai/gpt-oss-20b
</code></pre></div>    </div>
  </li>
</ul>

<p>(레포의 가이드를 따르면 자동 다운로드/서빙이 됩니다.) <a href="https://github.com/openai/gpt-oss">GitHub</a></p>

<ul>
  <li>GPT-OSS는 <strong>Harmony 응답 형식</strong> 을 전제로 학습됐습니다. Harmony로 메시지를 꾸미고(예: <code class="language-plaintext highlighter-rouge">openai-harmony</code> 라이브러리), 툴 정의도 시스템 메시지에 넣어야 도구 호출이 올바르게 동작해요. <a href="https://github.com/openai/gpt-oss">GitHub</a></li>
</ul>

<h2 id="1-어떤-mcp-전송transport을-쓸지-결정">1) 어떤 MCP 전송(transport)을 쓸지 결정</h2>

<ul>
  <li>
    <p><strong>동일 머신/로컬</strong> : <code class="language-plaintext highlighter-rouge">stdio</code>(서브프로세스로 서버 실행) → 간단/보안 유리</p>
  </li>
  <li>
    <p><strong>원격/확장</strong> : <strong>Streamable HTTP</strong>(POST/GET+선택적 SSE) → 다중 클라이언트/세션/재연결 지원</p>
  </li>
  <li>
    <p>HTTP 쓸 땐 <strong>Origin 검증, localhost 바인딩, 인증</strong> 을 반드시 설정하세요. (DNS rebinding 등 방지) <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/transports">Model Context Protocol</a></p>
  </li>
</ul>

<h2 id="2-호스트브리지-구성--최소-루프">2) 호스트(브리지) 구성 — 최소 루프</h2>

<p>핵심은 아래 루프예요.</p>

<ol>
  <li>
    <p><strong>MCP 클라이언트 세션</strong> 을 열고 <code class="language-plaintext highlighter-rouge">tools/list</code>로 사용 가능한 MCP 툴 스키마를 가져옵니다.</p>
  </li>
  <li>
    <p>그 스키마를 <strong>Harmony 포맷의 “tools 정의”</strong>로 시스템 메시지에 주입하고, 사용자 프롬프트와 함께 <strong>GPT-OSS</strong> 에 보냅니다.</p>
  </li>
  <li>
    <p>모델이 <strong>tool_use</strong> 를 생성하면 → 해당 호출을 <strong><code class="language-plaintext highlighter-rouge">tools/call</code></strong>로 MCP 서버에 실행 → 결과를 <strong>tool_result</strong> 로 다시 모델에 전달 → 모델의 최종 답변까지 반복.<br />
TypeScript/Python 양쪽 SDK가 이 흐름을 지원합니다. <a href="https://modelcontextprotocol.io/docs/develop/build-client">Model Context Protocol+1</a></p>
  </li>
</ol>

<blockquote>
  <p>참고: TypeScript SDK README에는 HTTP/stdio 서버 예제와 클라이언트 작성 섹션이, Python SDK에는 <code class="language-plaintext highlighter-rouge">FastMCP</code> 및 <strong>Streamable HTTP를 기존 ASGI 앱에 마운트</strong> 하는 예제가 잘 정리돼 있어요(브라우저 클라이언트용 CORS 노출 헤더 포함). <a href="https://github.com/modelcontextprotocol/typescript-sdk">GitHub+1</a></p>
</blockquote>

<h2 id="3-샘플-아키텍처요지">3) 샘플 아키텍처(요지)</h2>

<ul>
  <li>
    <p><strong>mcp-bridge</strong>(호스트):</p>

    <ul>
      <li>
        <p>mcp Python/TS SDK로 MCP <strong>ClientSession</strong> 생성 → <code class="language-plaintext highlighter-rouge">list_tools</code> → 툴 스키마를 Harmony 시스템 메시지에 삽입</p>
      </li>
      <li>
        <p>GPT-OSS(예: vLLM OpenAI 엔드포인트)에 ChatCompletions <strong>+ Harmony</strong> 로 질의</p>
      </li>
      <li>
        <p>응답 내 <code class="language-plaintext highlighter-rouge">tool_use</code> → <code class="language-plaintext highlighter-rouge">session.call_tool()</code>로 실행 → 결과를 <strong>Harmony <code class="language-plaintext highlighter-rouge">tool_result</code></strong>로 다시 모델에게 전달</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>보안</strong> : MCP HTTP 사용 시 <code class="language-plaintext highlighter-rouge">Mcp-Session-Id</code> 헤더·세션 종료, CORS 헤더(특히 <code class="language-plaintext highlighter-rouge">Mcp-Session-Id</code> 노출) 설정 권장. <a href="https://github.com/modelcontextprotocol/python-sdk">GitHub</a></p>
  </li>
</ul>

<blockquote>
  <p>팁: OpenAI의 <strong>Apps/Agents SDK</strong> 도 MCP 서버 연동 개념을 문서화해 두었고, <strong>OpenAI호환(Chat Completions) 엔드포인트</strong> 면 쉽게 맞물립니다(호스트를 직접 만들 때 개념 참조). <a href="https://developers.openai.com/apps-sdk/concepts/mcp-server/?utm_source=chatgpt.com">OpenAI 개발자</a></p>
</blockquote>

<hr />

<h1 id="시나리오-b-gpt-oss가-mcp-서버-도-겸하도록-확장">시나리오 B) GPT-OSS가 <strong>MCP 서버</strong> 도 겸하도록 확장</h1>

<blockquote>
  <p>특수한 경우: “GPT-OSS가 가진 자체 도구(브라우저 등)를 MCP 서버 형태로 노출”하여 외부 호스트가 붙게 하는 방식.</p>
</blockquote>

<ul>
  <li>
    <p>GPT-OSS 레포에는 <strong>도구(tool)</strong> 개념(예: 브라우저 <code class="language-plaintext highlighter-rouge">search/open/find</code>)과 Harmony에 툴 정의를 넣는 예제가 포함돼 있어, 이를 MCP <strong><code class="language-plaintext highlighter-rouge">tools/list</code>/<code class="language-plaintext highlighter-rouge">tools/call</code></strong>로 매핑해 <strong>MCP 서버</strong> 를 만들 수도 있습니다. (프로덕션용 브라우저 백엔드는 직접 교체 권장) <a href="https://github.com/openai/gpt-oss">GitHub</a></p>
  </li>
  <li>
    <p>서버 구현은 <strong>TypeScript/Python MCP 서버 SDK</strong> 의 템플릿을 사용하면 빠릅니다. (Echo/SQLite 등 예제 포함) <a href="https://github.com/modelcontextprotocol/typescript-sdk">GitHub</a></p>
  </li>
</ul>

<hr />

<h2 id="바로-써먹는-체크리스트-step-by-step">바로 써먹는 체크리스트 (Step-by-Step)</h2>

<ol>
  <li>
    <p><strong>GPT-OSS 엔드포인트 준비</strong></p>

    <ul>
      <li>vLLM로 OpenAI 호환 API 띄우기 → Harmony 적용(예: <code class="language-plaintext highlighter-rouge">openai-harmony</code>) <a href="https://github.com/openai/gpt-oss">GitHub</a></li>
    </ul>
  </li>
  <li>
    <p><strong>MCP 호스트(브리지) 스캐폴딩</strong></p>

    <ul>
      <li>
        <p>(Python) <code class="language-plaintext highlighter-rouge">pip/uv add mcp</code> 또는 (Node) <code class="language-plaintext highlighter-rouge">npm i @modelcontextprotocol/sdk</code></p>
      </li>
      <li>
        <p>MCP <strong>클라이언트</strong> 로 <code class="language-plaintext highlighter-rouge">initialize → tools/list</code>까지 호출되는지 확인 <a href="https://github.com/modelcontextprotocol/python-sdk">GitHub+1</a></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>툴 스키마 ↔ Harmony 변환기</strong> 작성</p>

    <ul>
      <li>
        <p>MCP <code class="language-plaintext highlighter-rouge">tools/list</code> 결과(JSON Schema)를 Harmony <strong>tools 정의</strong> 로 시스템 메시지에 삽입</p>
      </li>
      <li>
        <p>모델 응답의 <code class="language-plaintext highlighter-rouge">tool_use</code>를 파싱해 <code class="language-plaintext highlighter-rouge">tools/call</code>로 라우팅, 결과를 <code class="language-plaintext highlighter-rouge">tool_result</code>로 재주입 <a href="https://github.com/openai/gpt-oss">GitHub+1</a></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>전송 선택과 보안</strong></p>

    <ul>
      <li>
        <p>로컬은 <strong>stdio</strong> , 분산/원격은 <strong>Streamable HTTP</strong></p>
      </li>
      <li>
        <p>HTTP 시 <strong>Origin 검증·로컬 바인딩(개발)·인증</strong> ·CORS(<code class="language-plaintext highlighter-rouge">Mcp-Session-Id</code> 노출) 설정 <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/transports">Model Context Protocol+1</a></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>테스트 도구 서버 붙이기</strong></p>

    <ul>
      <li>
        <p>예: GitHub 서버(<code class="language-plaintext highlighter-rouge">npx @modelcontextprotocol/server-github</code>), 파일시스템/SQLite/포스트그레스 서버 등</p>
      </li>
      <li>
        <p>커뮤니티 서버 큐레이션(awesome list)도 참고하세요. <a href="https://github.com/modelcontextprotocol/typescript-sdk">GitHub+2</a></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>운영 가드레일</strong></p>

    <ul>
      <li>툴 실행 시간/빈도 제한, 사용자 확인(UI 승인), 로깅·감사, 타임아웃/취소·리트라이, 비밀키 주입(ENV)</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="가장-빠른-실습-루트요약">“가장 빠른” 실습 루트(요약)</h2>

<ul>
  <li>
    <p><strong>(1) vLLM로 GPT-OSS 띄우기</strong> → <code class="language-plaintext highlighter-rouge">vllm serve openai/gpt-oss-20b</code> <a href="https://github.com/openai/gpt-oss">GitHub</a></p>
  </li>
  <li>
    <p><strong>(2) TypeScript SDK Quick Start 서버</strong> 하나 켜서 MCP 동작 점검(HTTP/stdio 아무거나) <a href="https://github.com/modelcontextprotocol/typescript-sdk">GitHub</a></p>
  </li>
  <li>
    <p><strong>(3) 간이 브리지</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">list_tools</code> → Harmony 시스템 프롬프트에 삽입 → ChatCompletions 호출</p>
      </li>
      <li>
        <p>응답의 <code class="language-plaintext highlighter-rouge">tool_use</code>를 <code class="language-plaintext highlighter-rouge">tools/call</code>로 실행하고 <code class="language-plaintext highlighter-rouge">tool_result</code>로 되돌려 주기 <a href="https://modelcontextprotocol.io/docs/develop/build-client">Model Context Protocol+1</a></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>(4) 보안/세션 헤더 설정</strong>(HTTP라면 <code class="language-plaintext highlighter-rouge">Mcp-Session-Id</code>/Origin/CORS) <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/transports">Model Context Protocol+1</a></p>
  </li>
</ul>

<hr />

<h2 id="함께-쓰면-좋은-레퍼런스">함께 쓰면 좋은 레퍼런스</h2>

<ul>
  <li>
    <p><strong>MCP 전송 스펙(최근판)</strong> : stdio &amp; Streamable HTTP, 보안 주의사항, 세션/재시도 흐름 <a href="https://modelcontextprotocol.io/specification/2025-06-18/basic/transports">Model Context Protocol</a></p>
  </li>
  <li>
    <p><strong>MCP 클라이언트 만들기 튜토리얼</strong>(언어별) <a href="https://modelcontextprotocol.io/docs/develop/build-client">Model Context Protocol</a></p>
  </li>
  <li>
    <p><strong>TS/Python 공식 SDK</strong>(서버·클라이언트, 예제 다수) <a href="https://github.com/modelcontextprotocol/typescript-sdk">GitHub+1</a></p>
  </li>
  <li>
    <p><strong>GPT-OSS 레포</strong> : vLLM 서빙, Harmony/툴 사용법, 브라우저 툴 예시 <a href="https://github.com/openai/gpt-oss">GitHub+1</a></p>
  </li>
  <li>
    <p><strong>커뮤니티 서버 모음</strong> : GitHub/파일/DB/클라우드 등 MCP 서버 카탈로그 <a href="https://github.com/punkpeye/awesome-mcp-servers?utm_source=chatgpt.com">GitHub</a></p>
  </li>
</ul>

<hr />

<p>원하시면, <strong>Python/Node 중 선호하시는 언어로</strong> 최소 브리지 코드(≈100~150줄)까지 바로 작성해 드릴게요. 모델 호출은 <strong>현재 쓰시는 GPT-OSS 엔드포인트</strong>(OpenAI 호환)로 그대로 보내고, MCP 툴 호출 루프를 얹어드립니다.</p>

<p class="chat--user">

시나리오 A를 보자. 그럼 결국 for문 돌리라는 건가?

</p>

<p>짧은 답: <strong>그냥 “for문 한 번”이 아니라 “툴-호출 루프(reactive loop)”</strong>예요.<br />
모델이 <code class="language-plaintext highlighter-rouge">tool_use</code>(=function call)을 내보낼 때마다 해당 MCP 툴을 실행하고, <strong>그 결과를 다시 모델에 먹여서</strong> 다음 응답을 받는 걸 <strong>최대 N회</strong> 반복하다가, 더 이상 툴 호출이 없으면 종료합니다.</p>

<p>아래를 단계별로 보면 감이 딱 와요.</p>

<hr />

<h1 id="step-by-step-호스트브리지-제어-흐름">Step-by-step: 호스트(브리지) 제어 흐름</h1>

<ol>
  <li>
    <p><strong>MCP 서버와 세션</strong> 열기 → <code class="language-plaintext highlighter-rouge">tools/list</code>로 툴 스키마 수집</p>
  </li>
  <li>
    <p><strong>툴 스키마를 모델에 주입</strong></p>

    <ul>
      <li>(예: GPT-OSS는 Harmony 스타일이면 그 규격대로, 일반 OpenAI 호환이면 <code class="language-plaintext highlighter-rouge">tools</code>/<code class="language-plaintext highlighter-rouge">function</code> 형식으로)</li>
    </ul>
  </li>
  <li>
    <p><strong>대화 시작</strong> : <code class="language-plaintext highlighter-rouge">[system(tool정의), user(사용자요청)]</code>로 1차 호출</p>
  </li>
  <li>
    <p><strong>응답 검사</strong></p>

    <ul>
      <li>
        <p>응답에 <code class="language-plaintext highlighter-rouge">tool_use</code>(=tool/function call)가 없다 → <strong>최종 답변</strong> 으로 종료</p>
      </li>
      <li>
        <p>있으면 → 각 호출을 <strong>MCP <code class="language-plaintext highlighter-rouge">tools/call</code></strong>로 실행</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">tool_result</code> 주입</strong>: 각 호출 결과를 모델에 다시 전달 → 3~4를 <strong>반복</strong></p>
  </li>
  <li>
    <p><strong>종료 조건</strong> :</p>

    <ul>
      <li>
        <p>더 이상 <code class="language-plaintext highlighter-rouge">tool_use</code> 없음</p>
      </li>
      <li>
        <p>안전장치(최대 홉 수, 시간 초과, 토큰 한도, 사용자 취소)</p>
      </li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>즉, <strong>“모델 →(요청)→ MCP 실행 →(결과)→ 모델”</strong>이 한 턴을 이루고, 이걸 <strong>while 루프</strong> 로 굴립니다.<br />
 필요하면 한 턴 안의 여러 <code class="language-plaintext highlighter-rouge">tool_use</code>를 <strong>병렬</strong> 로 실행할 수도 있어요.</p>
</blockquote>

<hr />

<h1 id="최소-루프의사코드">최소 루프(의사코드)</h1>

<p>언어/라이브러리 상관없이 <strong>패턴</strong> 만 잡아두면 됩니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># pseudo: OpenAI 호환 ChatCompletions + MCP client
</span>
<span class="n">mcp</span> <span class="o">=</span> <span class="nf">connect_mcp_server</span><span class="p">(...)</span>                <span class="c1"># 1) MCP 세션
</span><span class="n">tools</span> <span class="o">=</span> <span class="n">mcp</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()</span>                     <span class="c1"># 2) 툴 스키마
</span>
<span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
  <span class="nf">system_msg_from</span><span class="p">(</span><span class="n">tools</span><span class="p">),</span>                    <span class="c1"># 2) 모델에 툴 정의 주입 (Harmony/Tools 등)
</span>  <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}</span>
<span class="p">]</span>

<span class="n">MAX_HOPS</span> <span class="o">=</span> <span class="mi">8</span>
<span class="k">for</span> <span class="n">hop</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">MAX_HOPS</span><span class="p">):</span>                  <span class="c1"># ← 핵심 루프 (for든 while든 상관 없음)
</span>    <span class="n">resp</span> <span class="o">=</span> <span class="nf">chat_completions</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="nf">to_openai_tools</span><span class="p">(</span><span class="n">tools</span><span class="p">))</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">[</span><span class="sh">"</span><span class="s">choices</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">]</span>

    <span class="n">tool_calls</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">tool_calls</span><span class="p">:</span>
        <span class="c1"># 6) 종료: 최종 답변
</span>        <span class="nf">print</span><span class="p">(</span><span class="n">msg</span><span class="p">[</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">])</span>
        <span class="k">break</span>

    <span class="c1"># 4) MCP 툴 실행 (필요 시 병렬)
</span>    <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">call</span> <span class="ow">in</span> <span class="n">tool_calls</span><span class="p">:</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">])</span>
        <span class="n">out</span> <span class="o">=</span> <span class="n">mcp</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>     <span class="c1"># 4) MCP tools/call
</span>        <span class="n">results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
          <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
          <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>
          <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="p">})</span>

    <span class="c1"># 5) 모델에 결과 재주입
</span>    <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">([</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">results</span><span class="p">])</span>
</code></pre></div></div>

<blockquote>
  <p>포인트</p>

  <ul>
    <li>
      <p><strong>id 매칭</strong> : <code class="language-plaintext highlighter-rouge">tool_call_id</code> ↔ MCP 실행 결과를 1:1로 매칭해야 모델이 문맥을 이어받습니다.</p>
    </li>
    <li>
      <p><strong>병렬 실행</strong> : 동일 턴의 여러 <code class="language-plaintext highlighter-rouge">tool_use</code>는 <code class="language-plaintext highlighter-rouge">Promise.all</code>/<code class="language-plaintext highlighter-rouge">asyncio.gather</code>로 병렬 처리 가능.</p>
    </li>
    <li>
      <p><strong>안전장치</strong> : <code class="language-plaintext highlighter-rouge">MAX_HOPS</code>, <code class="language-plaintext highlighter-rouge">timeout</code>, <code class="language-plaintext highlighter-rouge">rate limit</code>, 사용자 확인(UI 승인) 넣기.</p>
    </li>
    <li>
      <p><strong>스트리밍</strong> : 스트리밍 응답이면, 부분 토큰 중간에 <code class="language-plaintext highlighter-rouge">tool_use</code> 신호가 나오기도 하니 파서/이벤트로 처리.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="typescript-예시요지">TypeScript 예시(요지)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ts

import OpenAI from "openai";             // GPT-OSS의 OpenAI 호환 엔드포인트로 바꿔주세요
import { connect } from "mcp-client";    // 가상의 MCP 클라이언트 API라고 가정

const client = new OpenAI({
  baseURL: process.env.OSS_BASE_URL,     // 예: http://localhost:8000/v1
  apiKey: process.env.OSS_API_KEY || "dummy"
});

const mcp = await connect({ transport: "stdio" /* 또는 http */ });
const tools = await mcp.listTools();

const messages: any[] = [
  systemMsgFrom(tools),                   // Harmony 또는 tools 정의 삽입
  { role: "user", content: process.argv.slice(2).join(" ") }
];

for (let hop = 0; hop &lt; 8; hop++) {
  const res = await client.chat.completions.create({
    model: "gpt-oss-20b",
    messages,
    tools: toOpenAITools(tools)          // OpenAI function-calling 규격으로 변환
  });

  const msg = res.choices[0].message;
  const calls = msg.tool_calls || [];
  if (!calls.length) {
    console.log(msg.content);
    break;
  }

  const results = await Promise.all(calls.map(async (c) =&gt; {
    const args = JSON.parse(c.function.arguments || "{}");
    const out = await mcp.callTool(c.function.name, args);
    return { role: "tool", tool_call_id: c.id, content: JSON.stringify(out) };
  }));

  messages.push(msg, ...results);
}
</code></pre></div></div>

<hr />

<h2 id="그래서-for문-돌리면-끝의-정확한-답">그래서, “for문 돌리면 끝?”의 정확한 답</h2>

<ul>
  <li>
    <p><strong>개념적으로는 맞아요</strong> : “반복적으로 → 모델 호출 → MCP 툴 실행 → 결과 재주입” 루프를 돕니다.</p>
  </li>
  <li>
    <p><strong>하지만 단순한 for문 이상</strong> 입니다.</p>

    <ul>
      <li>
        <p>(1) <strong>id 매칭/결과 주입 규약</strong></p>
      </li>
      <li>
        <p>(2) <strong>병렬 실행/에러·타임아웃/재시도</strong></p>
      </li>
      <li>
        <p>(3) <strong>최대 홉·토큰/비용 가드</strong></p>
      </li>
      <li>
        <p>(4) <strong>사용자 승인/로깅/권한 스코프</strong></p>
      </li>
      <li>
        <p>(5) (HTTP 전송 시) <strong>세션·CORS·Origin 검증</strong><br />
같은 운영 요소가 들어가야 “프로덕션스러운” 루프가 됩니다.</p>
      </li>
    </ul>
  </li>
</ul>

<p>원하시면, <strong>지금 쓰시는 GPT-OSS 엔드포인트 URL 기준</strong> 으로 돌아가는 최소 브리지 코드를(파이썬/TS 중 선호로) 바로 짜서 드릴게요—툴 정의 변환부터 <code class="language-plaintext highlighter-rouge">tool_result</code> 주입, 병렬 호출/타임아웃까지 넣은 버전으로요.</p>

<p class="chat--user">

그니까 그냥 while문 돌리는거잖아

</p>

<p>맞아요—<strong>본질은 while 루프</strong> 예요.<br />
“모델 → 툴 호출 신호 확인 → MCP <code class="language-plaintext highlighter-rouge">tools/call</code> 실행 → 결과 재주입”을 <strong>툴 호출이 사라질 때까지</strong>(또는 최대 홉 수까지) 반복합니다.</p>

<h3 id="동작을-딱-정리하면">동작을 딱 정리하면</h3>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tools/list</code>로 MCP 툴 스키마 수집 → 시스템/툴 정의로 <strong>모델에 주입</strong></p>
  </li>
  <li>
    <p><strong>모델 호출</strong> → 응답에 <code class="language-plaintext highlighter-rouge">tool_use</code>(=function call)가 있는지 확인</p>
  </li>
  <li>
    <p>있으면 그만큼 <strong>MCP<code class="language-plaintext highlighter-rouge">tools/call</code> 실행</strong>(동턴 다건은 병렬 가능)</p>
  </li>
  <li>
    <p>각 결과를 <code class="language-plaintext highlighter-rouge">tool_call_id</code>에 <strong>1:1 매칭</strong> 해 <strong>tool 결과 메시지</strong> 로 <strong>다시 모델에 넣기</strong></p>
  </li>
  <li>
    <p>2–4를 <strong>while</strong> 로 반복 (종료: 더 이상 <code class="language-plaintext highlighter-rouge">tool_use</code> 없음, <code class="language-plaintext highlighter-rouge">MAX_HOPS</code>, 타임아웃 등)</p>
  </li>
</ol>

<h3 id="최소-예파이썬풍">최소 예(파이썬풍)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">messages</span> <span class="o">=</span> <span class="p">[</span><span class="nf">system_msg_from</span><span class="p">(</span><span class="n">mcp</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()),</span> <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">}]</span>
<span class="n">MAX_HOPS</span> <span class="o">=</span> <span class="mi">8</span>
<span class="n">hop</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">while</span> <span class="n">hop</span> <span class="o">&lt;</span> <span class="n">MAX_HOPS</span><span class="p">:</span>
    <span class="n">resp</span> <span class="o">=</span> <span class="nf">chat_completions</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="nf">to_openai_tools</span><span class="p">(</span><span class="n">mcp</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()))</span>
    <span class="n">msg</span>  <span class="o">=</span> <span class="n">resp</span><span class="p">[</span><span class="sh">"</span><span class="s">choices</span><span class="sh">"</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">calls</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>                      <span class="c1"># 종료 조건
</span>        <span class="nf">print</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="k">break</span>

    <span class="n">tool_results</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">:</span>                    <span class="c1"># 동턴 다건이면 병렬 처리 권장
</span>        <span class="n">name</span> <span class="o">=</span> <span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">]</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">out</span>  <span class="o">=</span> <span class="n">mcp</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>     <span class="c1"># MCP tools/call
</span>        <span class="n">tool_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">],</span>         <span class="c1"># ← 반드시 매칭!
</span>            <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
        <span class="p">})</span>

    <span class="n">messages</span> <span class="o">+=</span> <span class="p">[</span><span class="n">msg</span><span class="p">,</span> <span class="o">*</span><span class="n">tool_results</span><span class="p">]</span>   <span class="c1"># 응답과 결과를 모두 누적
</span>    <span class="n">hop</span> <span class="o">+=</span> <span class="mi">1</span>
</code></pre></div></div>

<h3 id="실무-팁한-줄씩">실무 팁(한 줄씩)</h3>

<ul>
  <li>
    <p><strong>while</strong> 은 맞는데, <strong>가드레일</strong> 이 핵심: <code class="language-plaintext highlighter-rouge">MAX_HOPS</code>, per-call <strong>timeout/재시도</strong> , 사용자 <strong>승인</strong> , 로깅.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tool_call_id</code> 매칭 누락/<code class="language-plaintext highlighter-rouge">messages</code> 누적 누락이 가장 흔한 버그.</p>
  </li>
  <li>
    <p>한 턴에 여러 <code class="language-plaintext highlighter-rouge">tool_use</code>는 <strong>병렬</strong> 처리하고, 실패한 것만 선택 재시도.</p>
  </li>
  <li>
    <p>스트리밍이면 중간에 <code class="language-plaintext highlighter-rouge">tool_use</code> 이벤트가 나올 수 있으니 <strong>이벤트 파서</strong> 로 처리.</p>
  </li>
</ul>

<p>결론: 네, <strong>“while문으로 도는 반응형 툴-호출 루프”</strong>라고 이해하시면 정확합니다.</p>

<p class="chat--user">

python에서 AsyncOpenAI 로 client.chat.completions.create 를 통해서 통신을 이미 하고 있거든? 이걸 기반으로 파이썬 코드 한 번 최대한 꼼꼼하게 만들어보자.

</p>

<p>좋습니다. 이미 <strong>AsyncOpenAI</strong> 의 <code class="language-plaintext highlighter-rouge">client.chat.completions.create(...)</code>로 모델을 호출하고 계시니, 그 위에 <strong>MCP 툴 호출 루프(while loop)</strong>를 얹은 <strong>프로덕션용 브리지</strong> 샘플을 드릴게요.<br />
아래 코드는 다음을 모두 포함합니다.</p>

<ul>
  <li>
    <p>MCP 서버 연결(stdio/HTTP 중 택1)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tools/list</code> → OpenAI 함수 포맷으로 변환</p>
  </li>
  <li>
    <p>모델 응답의 <code class="language-plaintext highlighter-rouge">tool_calls</code> 병렬 실행(<code class="language-plaintext highlighter-rouge">asyncio.gather</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tool_call_id</code> 1:1 매칭으로 <code class="language-plaintext highlighter-rouge">tool</code> 메시지 재주입</p>
  </li>
  <li>
    <p>최대 홉 수, per-call 타임아웃, 재시도, 예외 처리</p>
  </li>
</ul>

<blockquote>
  <p>의존성(예시):<br />
 <code class="language-plaintext highlighter-rouge">pip install openai anyio</code> + (MCP Python SDK: 보유하신 SDK 이름/버전에 맞춰 <code class="language-plaintext highlighter-rouge">mcp</code> 또는 <code class="language-plaintext highlighter-rouge">modelcontextprotocol</code> 계열 패키지를 설치하세요)</p>
</blockquote>

<hr />

<h1 id="파이썬-asyncopenai--mcp-브리지-완성본">파이썬: AsyncOpenAI × MCP 브리지 (완성본)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="sh">"""</span><span class="s">
mcp_bridge.py

- AsyncOpenAI Chat Completions 기반의 MCP 브리지
- while 루프: 모델 -&gt; MCP tools/call -&gt; 결과 재주입 -&gt; 종료 조건까지 반복
</span><span class="sh">"""</span>

<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>

<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="c1"># === MCP SDK 가져오기 ===
# 사용 중인 MCP Python SDK에 맞게 import 경로를 조정하세요.
# 아래는 가장 흔한 네이밍을 가정한 예시입니다.
</span><span class="k">try</span><span class="p">:</span>
    <span class="c1"># 예: 공식 MCP Python SDK
</span>    <span class="kn">from</span> <span class="n">mcp.client.session</span> <span class="kn">import</span> <span class="n">ClientSession</span>
    <span class="kn">from</span> <span class="n">mcp.client.stdio</span> <span class="kn">import</span> <span class="n">StdioTransport</span>
    <span class="c1"># (HTTP 클라이언트가 SDK에 있다면 함께 import)
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="kn">from</span> <span class="n">mcp.client.http</span> <span class="kn">import</span> <span class="n">HttpClientTransport</span>  <span class="c1"># 있을 때만 사용
</span>    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">HttpClientTransport</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># type: ignore
</span><span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">MCP Python SDK import 실패. 설치 및 경로를 확인하세요.</span><span class="se">\n</span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">예: pip install modelcontextprotocol  또는  pip install mcp</span><span class="sh">"</span>
    <span class="p">)</span> <span class="k">from</span> <span class="n">e</span>

<span class="c1"># ------------------------------------------------------------
# 데이터 모델
# ------------------------------------------------------------
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">McpTool</span><span class="p">:</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">description</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span>
    <span class="n">input_schema</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>  <span class="c1"># JSON Schema
</span>
<span class="c1"># ------------------------------------------------------------
# MCP 클라이언트 래퍼
# ------------------------------------------------------------
</span><span class="k">class</span> <span class="nc">SimpleMcpClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    MCP 클라이언트를 간단 래핑. SDK의 실제 인터페이스에 맞게 조정하세요.
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">stdio_cmd</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">stdio_env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">http_url</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">http_headers</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">stdio_cmd</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">transport</span> <span class="o">=</span> <span class="nc">StdioTransport</span><span class="p">(</span><span class="n">command</span><span class="o">=</span><span class="n">stdio_cmd</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">stdio_env</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="k">elif</span> <span class="n">http_url</span> <span class="ow">and</span> <span class="n">HttpClientTransport</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">transport</span> <span class="o">=</span> <span class="nc">HttpClientTransport</span><span class="p">(</span><span class="n">url</span><span class="o">=</span><span class="n">http_url</span><span class="p">,</span> <span class="n">headers</span><span class="o">=</span><span class="n">http_headers</span> <span class="ow">or</span> <span class="p">{})</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">stdio_cmd 또는 http_url 중 하나는 필요합니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">ClientSession</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">__aenter__</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="sh">"</span><span class="s">SimpleMcpClient</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">session</span> <span class="o">=</span> <span class="nc">ClientSession</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">transport</span><span class="p">)</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">__aenter__</span><span class="p">()</span>  <span class="c1"># 세션/initialize 핸드셰이크
</span>        <span class="k">return</span> <span class="n">self</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">__aexit__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc</span><span class="p">,</span> <span class="n">tb</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">__aexit__</span><span class="p">(</span><span class="n">exc_type</span><span class="p">,</span> <span class="n">exc</span><span class="p">,</span> <span class="n">tb</span><span class="p">)</span>

    <span class="c1"># ---- 기능: tools/list ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">list_tools</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">McpTool</span><span class="p">]:</span>
        <span class="k">assert</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">MCP 세션이 열려있지 않습니다.</span><span class="sh">"</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()</span>
        <span class="n">tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">McpTool</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">.</span><span class="n">tools</span><span class="p">:</span>
            <span class="n">tools</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span>
                <span class="nc">McpTool</span><span class="p">(</span>
                    <span class="n">name</span><span class="o">=</span><span class="n">t</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="n">description</span><span class="o">=</span><span class="nf">getattr</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">),</span>
                    <span class="n">input_schema</span><span class="o">=</span><span class="nf">getattr</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="sh">"</span><span class="s">inputSchema</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span> <span class="ow">or</span> <span class="p">{},</span>
                <span class="p">)</span>
            <span class="p">)</span>
        <span class="k">return</span> <span class="n">tools</span>

    <span class="c1"># ---- 기능: tools/call ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">call_tool</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        MCP tools/call 실행 후 결과를 통일된 dict로 반환합니다.
        SDK마다 resp.content 형태가 다를 수 있으니 여기서 정규화하세요.
        </span><span class="sh">"""</span>
        <span class="k">assert</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">MCP 세션이 열려있지 않습니다.</span><span class="sh">"</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">name</span><span class="p">,</span> <span class="n">arguments</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>

        <span class="c1"># content 정규화 예시:
</span>        <span class="c1"># resp.content가 [{"type":"text","text":"..."}, {"type":"json","json":{...}}] 형태라고 가정
</span>        <span class="n">out</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">json</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">raw</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="nb">list</span><span class="p">):</span>
                <span class="n">texts</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="n">json_obj</span> <span class="o">=</span> <span class="bp">None</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">.</span><span class="n">content</span><span class="p">:</span>
                    <span class="k">if</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">texts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
                    <span class="k">elif</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">json</span><span class="sh">"</span><span class="p">:</span>
                        <span class="n">json_obj</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="sh">"</span><span class="s">json</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
                <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="n">t</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span> <span class="k">if</span> <span class="n">t</span><span class="p">])</span>
                <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">json</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">json_obj</span>
                <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">raw</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">c</span><span class="p">.</span><span class="n">__dict__</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">resp</span><span class="p">.</span><span class="n">content</span><span class="p">]</span>  <span class="c1"># 디버깅용
</span>            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># 혹시 다른 형태면 통으로 감싸서 반환
</span>                <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">raw</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">,</span> <span class="n">resp</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">raw</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">resp</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">,</span> <span class="n">resp</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">out</span>

<span class="c1"># ------------------------------------------------------------
# 유틸: MCP 툴을 OpenAI tools 포맷으로 변환
# ------------------------------------------------------------
</span><span class="k">def</span> <span class="nf">mcp_tools_to_openai_tools</span><span class="p">(</span><span class="n">mcp_tools</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">McpTool</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">
    OpenAI Chat Completions `tools` 파라미터 규격:
    [
      {
        </span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">,
        </span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="s">: {
          </span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="s">: str,
          </span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="s">: str,
          </span><span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="s">: {JSON Schema}
        }
      }
    ]
    </span><span class="sh">"""</span>
    <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">mcp_tools</span><span class="p">:</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">name</span><span class="p">[:</span><span class="mi">64</span><span class="p">]</span>  <span class="c1"># OpenAI 제약: 최대 64자 권장
</span>        <span class="n">params</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">input_schema</span> <span class="ow">or</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>
        <span class="k">if</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">params</span><span class="p">:</span>
            <span class="c1"># 일부 서버가 "object" 생략 시 대비
</span>            <span class="n">params</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span> <span class="o">**</span><span class="n">params</span><span class="p">}</span>
        <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">t</span><span class="p">.</span><span class="n">description</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="n">params</span><span class="p">,</span>
                <span class="p">},</span>
            <span class="p">}</span>
        <span class="p">)</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="c1"># ------------------------------------------------------------
# 브리지: 모델 &lt;-&gt; MCP 호출 루프
# ------------------------------------------------------------
</span><span class="k">class</span> <span class="nc">McpBridge</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">oai</span><span class="p">:</span> <span class="n">AsyncOpenAI</span><span class="p">,</span>
        <span class="n">model</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="n">mcp</span><span class="p">:</span> <span class="n">SimpleMcpClient</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">max_hops</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">per_tool_timeout_s</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">30.0</span><span class="p">,</span>
        <span class="n">per_tool_retries</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span>
        <span class="n">parallel</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">system_prompt</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">oai</span> <span class="o">=</span> <span class="n">oai</span>
        <span class="n">self</span><span class="p">.</span><span class="n">model</span> <span class="o">=</span> <span class="n">model</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mcp</span> <span class="o">=</span> <span class="n">mcp</span>
        <span class="n">self</span><span class="p">.</span><span class="n">max_hops</span> <span class="o">=</span> <span class="n">max_hops</span>
        <span class="n">self</span><span class="p">.</span><span class="n">per_tool_timeout_s</span> <span class="o">=</span> <span class="n">per_tool_timeout_s</span>
        <span class="n">self</span><span class="p">.</span><span class="n">per_tool_retries</span> <span class="o">=</span> <span class="n">per_tool_retries</span>
        <span class="n">self</span><span class="p">.</span><span class="n">parallel</span> <span class="o">=</span> <span class="n">parallel</span>
        <span class="n">self</span><span class="p">.</span><span class="n">system_prompt</span> <span class="o">=</span> <span class="n">system_prompt</span> <span class="ow">or</span> <span class="p">(</span>
            <span class="sh">"</span><span class="s">You are a careful assistant. </span><span class="sh">"</span>
            <span class="sh">"</span><span class="s">Call tools only when needed, keep arguments minimal and valid JSON.</span><span class="sh">"</span>
        <span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cached_openai_tools</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]</span> <span class="o">=</span> <span class="bp">None</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_ensure_tools</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_openai_tools</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">mcp_tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">mcp</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_cached_openai_tools</span> <span class="o">=</span> <span class="nf">mcp_tools_to_openai_tools</span><span class="p">(</span><span class="n">mcp_tools</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">_cached_openai_tools</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_call_one_tool_with_retry</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> <span class="n">call</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">
        단일 tool_call 실행 + 재시도/타임아웃.
        return: (tool_call_id, tool_result_message)
        </span><span class="sh">"""</span>
        <span class="n">tool_call_id</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">func</span> <span class="o">=</span> <span class="n">call</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">func</span><span class="p">[</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">args_str</span> <span class="o">=</span> <span class="n">func</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span>

        <span class="c1"># arguments가 JSON 파싱 불가일 때 관대한 파서
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args_str</span><span class="p">)</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">args_str</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="n">args_str</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="c1"># 모델이 문자열을 그대로 넘길 수 있으니 감싼다
</span>            <span class="n">args</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">:</span> <span class="n">args_str</span><span class="p">}</span>

        <span class="n">last_err</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">Exception</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">for</span> <span class="n">attempt</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">per_tool_retries</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="c1"># MCP tools/call에 타임아웃 적용
</span>                <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">mcp</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">),</span>
                    <span class="n">timeout</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">per_tool_timeout_s</span><span class="p">,</span>
                <span class="p">)</span>
                <span class="c1"># OpenAI chat.completions에 넣을 tool 메시지 규격
</span>                <span class="n">tool_msg</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>
                    <span class="c1"># 모델이 소비하기 쉽게 문자열 + json 모두 전달
</span>                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">tool_call_id</span><span class="p">,</span> <span class="n">tool_msg</span>
            <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                <span class="n">last_err</span> <span class="o">=</span> <span class="n">e</span>
                <span class="k">if</span> <span class="n">attempt</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">per_tool_retries</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">min</span><span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="n">attempt</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">))</span>  <span class="c1"># 간단 백오프
</span>                    <span class="k">continue</span>
                <span class="c1"># 재시도 실패 시 에러 내용을 tool 결과로 전달(모델이 핸들링하게)
</span>                <span class="n">err_payload</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">),</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">e</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span>
                <span class="p">}</span>
                <span class="n">tool_msg</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_call_id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">err_payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
                <span class="p">}</span>
                <span class="k">return</span> <span class="n">tool_call_id</span><span class="p">,</span> <span class="n">tool_msg</span>
        <span class="c1"># 이론상 도달 불가
</span>        <span class="k">raise</span> <span class="n">last_err</span> <span class="ow">or</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sh">"</span><span class="s">unknown tool call failure</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        while 루프를 돌며 MCP 툴 호출을 처리하고 최종 답변 텍스트를 반환합니다.
        </span><span class="sh">"""</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_ensure_tools</span><span class="p">()</span>

        <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">system_prompt</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},</span>
        <span class="p">]</span>

        <span class="n">final_text</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span>
        <span class="k">for</span> <span class="n">hop</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">max_hops</span><span class="p">):</span>
            <span class="c1"># 1) 모델 호출
</span>            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">oai</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">model</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
                <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
            <span class="p">)</span>

            <span class="n">msg</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
            <span class="n">tool_calls</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span> <span class="ow">or</span> <span class="p">[]</span>

            <span class="c1"># 2) 툴 호출 없으면 종료
</span>            <span class="k">if</span> <span class="ow">not</span> <span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">final_text</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>
                <span class="k">break</span>

            <span class="c1"># 3) 툴 호출 실행(동턴 병렬 권장)
</span>            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">parallel</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">tool_calls</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span>
                    <span class="o">*</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="nf">_call_one_tool_with_retry</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">tool_calls</span><span class="p">]</span>
                <span class="p">)</span>
                <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[</span><span class="n">m</span> <span class="k">for</span> <span class="n">_</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">results</span><span class="p">]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">tool_calls</span><span class="p">:</span>
                    <span class="n">_</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_call_one_tool_with_retry</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
                    <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>

            <span class="c1"># 4) 모델에 결과 재주입
</span>            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">role</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">type</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span><span class="p">,</span>
                    <span class="p">},</span>
                <span class="p">}</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">tool_calls</span>
            <span class="p">]})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">final_text</span>

<span class="c1"># ------------------------------------------------------------
# 실행 예시
# ------------------------------------------------------------
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="sh">"""</span><span class="s">
    사용법:
      export OPENAI_API_KEY=dummy
      # GPT-OSS 엔드포인트를 OpenAI 호환으로 띄웠다면:
      export OPENAI_BASE_URL=http://localhost:8000/v1
      python -m mcp_bridge </span><span class="sh">"</span><span class="s">레포 이슈 요약해줘</span><span class="sh">"</span><span class="s">
    </span><span class="sh">"""</span>
    <span class="n">user_query</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">USER_QUERY</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">간단한 테스트 쿼리</span><span class="sh">"</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OSS_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-oss-20b</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># AsyncOpenAI: GPT-OSS의 OpenAI 호환 엔드포인트로 base_url 지정
</span>    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">http://localhost:8000/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">dummy</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="c1"># MCP 서버 연결: stdio 또는 HTTP 중 하나 택1
</span>    <span class="c1"># (1) stdio 예시: 로컬 MCP 서버 바이너리/스크립트를 서브프로세스로 실행
</span>    <span class="n">stdio_cmd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MCP_STDIO_CMD</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">stdio_args</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MCP_STDIO_ARGS</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
    <span class="n">stdio</span> <span class="o">=</span> <span class="p">[</span><span class="n">stdio_cmd</span><span class="p">,</span> <span class="o">*</span><span class="p">([</span><span class="n">a</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">stdio_args</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="n">a</span><span class="p">])]</span> <span class="k">if</span> <span class="n">stdio_cmd</span> <span class="k">else</span> <span class="bp">None</span>

    <span class="c1"># (2) HTTP 예시: 원격 MCP 서버
</span>    <span class="n">http_url</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MCP_HTTP_URL</span><span class="sh">"</span><span class="p">)</span>  <span class="c1"># 예: http://127.0.0.1:3333/mcp
</span>    <span class="n">http_headers</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">Mcp-Session-Id</span><span class="sh">"</span><span class="p">:</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MCP_SESSION_ID</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">demo-session</span><span class="sh">"</span><span class="p">)}</span>

    <span class="c1"># 우선순위: stdio &gt; http
</span>    <span class="k">async</span> <span class="k">with</span> <span class="nc">SimpleMcpClient</span><span class="p">(</span><span class="n">stdio_cmd</span><span class="o">=</span><span class="n">stdio</span><span class="p">,</span> <span class="n">http_url</span><span class="o">=</span><span class="n">http_url</span><span class="p">,</span> <span class="n">http_headers</span><span class="o">=</span><span class="n">http_headers</span><span class="p">)</span> <span class="k">as</span> <span class="n">mcp</span><span class="p">:</span>
        <span class="n">bridge</span> <span class="o">=</span> <span class="nc">McpBridge</span><span class="p">(</span>
            <span class="n">oai</span><span class="o">=</span><span class="n">client</span><span class="p">,</span>
            <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
            <span class="n">mcp</span><span class="o">=</span><span class="n">mcp</span><span class="p">,</span>
            <span class="n">max_hops</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MAX_HOPS</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">8</span><span class="sh">"</span><span class="p">)),</span>
            <span class="n">per_tool_timeout_s</span><span class="o">=</span><span class="nf">float</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">TOOL_TIMEOUT_S</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">30</span><span class="sh">"</span><span class="p">)),</span>
            <span class="n">per_tool_retries</span><span class="o">=</span><span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">TOOL_RETRIES</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">1</span><span class="sh">"</span><span class="p">)),</span>
            <span class="n">parallel</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">system_prompt</span><span class="o">=</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">You are a tool-using assistant. </span><span class="sh">"</span>
                <span class="sh">"</span><span class="s">Only call tools when necessary. Keep outputs concise.</span><span class="sh">"</span>
            <span class="p">),</span>
        <span class="p">)</span>
        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">bridge</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">user_query</span><span class="p">)</span>
        <span class="n">dur</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">=== FINAL ANSWER ===</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="se">\n</span><span class="s">[done in </span><span class="si">{</span><span class="n">dur</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">s]</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h2 id="어떻게-쓰면-되나-step-by-step">어떻게 쓰면 되나? (step-by-step)</h2>

<ol>
  <li>
    <p><strong>GPT-OSS 엔드포인트</strong>(OpenAI 호환) 준비</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">OPENAI_BASE_URL</code>를 여러분 엔드포인트로 지정</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">OPENAI_API_KEY</code>는 서버가 요구하면 넣고, 아니면 아무 문자열도 OK</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>MCP 서버 하나 골라 연결</strong></p>

    <ul>
      <li><strong>stdio</strong> : 로컬 서버를 서브프로세스로 띄우려면
        <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arduino
       
export MCP_STDIO_CMD="npx"
export MCP_STDIO_ARGS="@modelcontextprotocol/server-github --stdio"
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ol>

<p>처럼 커맨드를 환경변수로 넘기세요.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> * **HTTP** : 원격 MCP 서버가 있으면
   ```
   arduino
   
   export MCP_HTTP_URL="http://127.0.0.1:3333/mcp"
   export MCP_SESSION_ID="my-session-1"
   ```
</code></pre></div></div>

<ol>
  <li><strong>실행</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OPENAI_BASE_URL</span><span class="o">=</span>http://localhost:8000/v1
<span class="nb">export </span><span class="nv">OPENAI_API_KEY</span><span class="o">=</span>dummy
<span class="nb">export </span><span class="nv">OSS_MODEL</span><span class="o">=</span>gpt-oss-20b
python mcp_bridge.py
</code></pre></div>    </div>
  </li>
</ol>

<p>또는
     <code class="language-plaintext highlighter-rouge">ini
     USER_QUERY="우리 이슈 목록 중 버그만 요약해줘" python mcp_bridge.py
    </code></p>

<ol>
  <li>
    <p><strong>확장 포인트(현업 팁)</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">McpBridge.run()</code> 안의 <code class="language-plaintext highlighter-rouge">temperature</code>, <code class="language-plaintext highlighter-rouge">tool_choice</code>, <code class="language-plaintext highlighter-rouge">system_prompt</code>를 상황에 맞게 조정</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">per_tool_timeout_s</code>, <code class="language-plaintext highlighter-rouge">per_tool_retries</code>로 MCP 안정화</p>
      </li>
      <li>
        <p>메시지 로깅/감사의 경우, <code class="language-plaintext highlighter-rouge">messages</code> 스냅샷과 MCP 호출 로그를 파일/DB에 남기세요</p>
      </li>
      <li>
        <p>한 턴 내 다건 <code class="language-plaintext highlighter-rouge">tool_calls</code>는 이미 <strong>병렬</strong> 처리. 실패한 것만 부분 재시도하도록 커스터마이즈 가능</p>
      </li>
      <li>
        <p>필요하면 <strong>스트리밍</strong>(<code class="language-plaintext highlighter-rouge">stream=True</code>)으로 변경하고, 토큰 중간 <code class="language-plaintext highlighter-rouge">tool_calls</code> 이벤트를 파싱하는 코루틴을 추가</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<p>필요하시면 위 코드를 <strong>여러 MCP 서버(예: GitHub/FS/DB)</strong>와 붙는 실전 예로 커스터마이즈해서 드릴게요. 현재 쓰시는 <strong>MCP 서버 명령/URL</strong> 을 알려주시면, <code class="language-plaintext highlighter-rouge">stdio_cmd/http_url</code>에 맞춰 바로 작동하는 버전으로 손봐드리겠습니다.</p>

<p class="chat--user">

서버 없이 그냥 간단한 파일 조회 같은건 그냥 파이썬 코드로도 할 수 있잖아. 그런 방법은 어때?

</p>

<p>맞아요—<strong>그냥 로컬 파이썬 함수들을 “툴”로 노출</strong> 해서 모델이 부르면 실행해 주면 됩니다. MCP 서버는 건너뛰고, 호스트(브리지) 레벨에서 <strong>파일 시스템 전용 툴</strong> 을 직접 구현하는 거죠. 간단‧빠름‧의존성 적고, 사내용 파일 탐색/요약엔 충분히 좋습니다.</p>

<p>아래는 여러분이 이미 쓰고 계신 <strong>AsyncOpenAI +<code class="language-plaintext highlighter-rouge">client.chat.completions.create</code></strong> 위에 얹는, <strong>로컬 파일 툴 브리지(while 루프)</strong> 완성 예시예요.</p>

<hr />

<h2 id="어떻게-동작해">어떻게 동작해?</h2>

<ol>
  <li>
    <p><strong>툴 정의(JSON Schema)</strong> : <code class="language-plaintext highlighter-rouge">list_dir</code>, <code class="language-plaintext highlighter-rouge">read_text</code>, <code class="language-plaintext highlighter-rouge">find_in_files</code></p>
  </li>
  <li>
    <p><strong>모델 호출</strong> → <code class="language-plaintext highlighter-rouge">tool_calls</code> 있나 확인</p>
  </li>
  <li>
    <p>있으면 <strong>해당 파이썬 함수 실행</strong>(루트 디렉토리 안에서만, 크기/경로 가드)</p>
  </li>
  <li>
    <p><strong>tool 결과 메시지</strong> 를 다시 모델에 주입</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tool_calls</code>가 더 이상 안 나올 때까지 <strong>while</strong> 반복</p>
  </li>
</ol>

<blockquote>
  <p>보안 가드: 루트 고정(<code class="language-plaintext highlighter-rouge">SAFE_ROOT</code>), 경로 정규화/부모 탈출 방지, 파일 크기 제한, 바이너리 차단, 인코딩 폴백(utf-8, utf-8-sig, cp949), 타임아웃, 재시도.</p>
</blockquote>

<hr />

<h2 id="코드-복사-붙여넣기">코드 (복사-붙여넣기)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># local_fs_tools_bridge.py
# AsyncOpenAI × 로컬 파일 툴(서버 없음) × while 루프
# pip install openai
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">re</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="c1"># === 설정 ===
</span><span class="n">SAFE_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">SAFE_ROOT</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)).</span><span class="nf">resolve</span><span class="p">()</span>  <span class="c1"># 이 디렉토리 안에서만 작동
</span><span class="n">MAX_BYTES_READ</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MAX_BYTES_READ</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">65536</span><span class="sh">"</span><span class="p">))</span>  <span class="c1"># 64KB
</span><span class="n">MAX_LIST_ENTRIES</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MAX_LIST_ENTRIES</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">200</span><span class="sh">"</span><span class="p">))</span>
<span class="n">MAX_FILES_SCAN</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MAX_FILES_SCAN</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">400</span><span class="sh">"</span><span class="p">))</span>
<span class="n">MODEL</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OSS_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-oss-20b</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># === 유틸: 경로 안전성 보장 ===
</span><span class="k">def</span> <span class="nf">_safe_join</span><span class="p">(</span><span class="n">rel</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">SAFE_ROOT 기준 상대경로를 절대경로로 변환하고, 루트 밖 접근을 차단.</span><span class="sh">"""</span>
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">SAFE_ROOT</span> <span class="o">/</span> <span class="n">rel</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">PermissionError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Path escapes SAFE_ROOT: </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">p</span>

<span class="k">def</span> <span class="nf">_is_text</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="n">Path</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">간단한 바이너리 판단: 널 바이트 유무 + 가벼운 디코딩 시도.</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">path</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">head</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">2048</span><span class="p">)</span>
        <span class="k">if</span> <span class="sa">b</span><span class="sh">"</span><span class="se">\x00</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">head</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">for</span> <span class="n">enc</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">utf-8-sig</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cp949</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">head</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">enc</span><span class="p">)</span>
                <span class="k">return</span> <span class="bp">True</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">continue</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="c1"># === 로컬 툴 구현 ===
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">tool_list_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">glob</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">,</span> <span class="n">include_hidden</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">base</span> <span class="o">=</span> <span class="nf">_safe_join</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">base</span><span class="p">.</span><span class="nf">exists</span><span class="p">():</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">not found: </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">base</span><span class="p">.</span><span class="nf">is_file</span><span class="p">():</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="n">parent</span>
    <span class="n">entries</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">base</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">glob</span><span class="p">):</span>
        <span class="c1"># 숨김 파일 제외 옵션
</span>        <span class="n">name</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">include_hidden</span> <span class="ow">and</span> <span class="n">name</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="c1"># SAFE_ROOT 밖 symlink는 차단
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">resolved</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">resolve</span><span class="p">()</span>
            <span class="n">resolved</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="n">info</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)),</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_file</span><span class="p">()</span> <span class="k">else</span> <span class="bp">None</span><span class="p">),</span>
        <span class="p">}</span>
        <span class="n">entries</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">info</span><span class="p">)</span>
        <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">count</span> <span class="o">&gt;=</span> <span class="n">MAX_LIST_ENTRIES</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">),</span> <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">base</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)),</span> <span class="sh">"</span><span class="s">count</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">entries</span><span class="p">),</span> <span class="sh">"</span><span class="s">entries</span><span class="sh">"</span><span class="p">:</span> <span class="n">entries</span><span class="p">}</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">tool_read_text</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">maxb</span> <span class="o">=</span> <span class="n">max_bytes</span> <span class="ow">or</span> <span class="n">MAX_BYTES_READ</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nf">_safe_join</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">exists</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_file</span><span class="p">():</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">file not found: </span><span class="si">{</span><span class="n">path</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nf">_is_text</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">binary or non-text file (blocked)</span><span class="sh">"</span><span class="p">}</span>
    <span class="n">size</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span>
    <span class="n">content</span> <span class="o">=</span> <span class="sh">""</span>
    <span class="n">enc_used</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="c1"># 인코딩 폴백
</span>    <span class="k">for</span> <span class="n">enc</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">utf-8-sig</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cp949</span><span class="sh">"</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">p</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="n">enc</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">content</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">maxb</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">enc_used</span> <span class="o">=</span> <span class="n">enc</span>
            <span class="k">break</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">continue</span>
    <span class="n">truncated</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">content</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">maxb</span>
    <span class="k">if</span> <span class="n">truncated</span><span class="p">:</span>
        <span class="n">content</span> <span class="o">=</span> <span class="n">content</span><span class="p">[:</span><span class="n">maxb</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)),</span>
        <span class="sh">"</span><span class="s">encoding</span><span class="sh">"</span><span class="p">:</span> <span class="n">enc_used</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="n">size</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">truncated</span><span class="sh">"</span><span class="p">:</span> <span class="n">truncated</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">content</span><span class="p">,</span>
    <span class="p">}</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">tool_find_in_files</span><span class="p">(</span><span class="n">root</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">pattern</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="n">regex</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                             <span class="n">glob</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">**/*</span><span class="sh">"</span><span class="p">,</span> <span class="n">case_sensitive</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                             <span class="n">max_files</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">max_hits_per_file</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">base</span> <span class="o">=</span> <span class="nf">_safe_join</span><span class="p">(</span><span class="n">root</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">base</span><span class="p">.</span><span class="nf">exists</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">base</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">():</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">dir not found: </span><span class="si">{</span><span class="n">root</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
    <span class="n">flags</span> <span class="o">=</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">case_sensitive</span> <span class="k">else</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span>
    <span class="n">rx</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">pattern</span> <span class="k">if</span> <span class="n">regex</span> <span class="k">else</span> <span class="n">re</span><span class="p">.</span><span class="nf">escape</span><span class="p">(</span><span class="n">pattern</span><span class="p">),</span> <span class="n">flags</span><span class="p">)</span>
    <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">files_scanned</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">hit_files</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">limit</span> <span class="o">=</span> <span class="n">max_files</span> <span class="ow">or</span> <span class="n">MAX_FILES_SCAN</span>

    <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">base</span><span class="p">.</span><span class="nf">glob</span><span class="p">(</span><span class="n">glob</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">files_scanned</span> <span class="o">&gt;=</span> <span class="n">limit</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">resolved</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">resolve</span><span class="p">()</span>
            <span class="n">resolved</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_file</span><span class="p">():</span>
            <span class="k">continue</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nf">_is_text</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">continue</span>
        <span class="n">files_scanned</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="c1"># 크기 제한 내에서만 스캔
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">p</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">text</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">MAX_BYTES_READ</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="n">hits</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">(),</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">rx</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
                <span class="n">hits</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">line</span><span class="sh">"</span><span class="p">:</span> <span class="n">i</span><span class="p">,</span> <span class="sh">"</span><span class="s">preview</span><span class="sh">"</span><span class="p">:</span> <span class="n">line</span><span class="p">[:</span><span class="mi">300</span><span class="p">]})</span>
                <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">hits</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_hits_per_file</span><span class="p">:</span>
                    <span class="k">break</span>
        <span class="k">if</span> <span class="n">hits</span><span class="p">:</span>
            <span class="n">results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)),</span> <span class="sh">"</span><span class="s">hits</span><span class="sh">"</span><span class="p">:</span> <span class="n">hits</span><span class="p">})</span>
            <span class="n">hit_files</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">base</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)),</span>
        <span class="sh">"</span><span class="s">files_scanned</span><span class="sh">"</span><span class="p">:</span> <span class="n">files_scanned</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">hit_files</span><span class="sh">"</span><span class="p">:</span> <span class="n">hit_files</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">pattern</span><span class="sh">"</span><span class="p">:</span> <span class="n">pattern</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">results</span><span class="sh">"</span><span class="p">:</span> <span class="n">results</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">truncated_note</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Scanned up to </span><span class="si">{</span><span class="n">MAX_BYTES_READ</span><span class="si">}</span><span class="s"> bytes per file, </span><span class="si">{</span><span class="n">limit</span><span class="si">}</span><span class="s"> files max.</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">}</span>

<span class="c1"># === OpenAI tools 스키마 ===
</span><span class="n">OPENAI_TOOLS</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">list_dir</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">List directory entries under SAFE_ROOT.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Relative dir path from SAFE_ROOT</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">glob</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">glob pattern</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">*</span><span class="sh">"</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">include_hidden</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">boolean</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">},</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[]</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">read_text</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Read a text file with size/encoding safeguards.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Relative file path from SAFE_ROOT</span><span class="sh">"</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">max_bytes</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">minimum</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">maximum</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1048576</span><span class="p">}</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">find_in_files</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Search for a string/regex across text files.</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">root</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">pattern</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string or regex</span><span class="sh">"</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">regex</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">boolean</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">glob</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">**/*</span><span class="sh">"</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">case_sensitive</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">boolean</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">max_files</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">minimum</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">maximum</span><span class="sh">"</span><span class="p">:</span> <span class="mi">5000</span><span class="p">},</span>
                    <span class="sh">"</span><span class="s">max_hits_per_file</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">minimum</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">maximum</span><span class="sh">"</span><span class="p">:</span> <span class="mi">50</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">5</span><span class="p">},</span>
                <span class="p">},</span>
                <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">pattern</span><span class="sh">"</span><span class="p">]</span>
            <span class="p">}</span>
        <span class="p">},</span>
    <span class="p">},</span>
<span class="p">]</span>

<span class="c1"># === 라우터 ===
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">call_local_tool</span><span class="p">(</span><span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">list_dir</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="nf">tool_list_dir</span><span class="p">(</span><span class="o">**</span><span class="n">args</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">read_text</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="nf">tool_read_text</span><span class="p">(</span><span class="o">**</span><span class="n">args</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">name</span> <span class="o">==</span> <span class="sh">"</span><span class="s">find_in_files</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="nf">tool_find_in_files</span><span class="p">(</span><span class="o">**</span><span class="n">args</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">unknown tool: </span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">_assistant_msg_dict</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">OpenAI SDK 객체를 Chat API 재호출용 dict로 변환.</span><span class="sh">"""</span>
    <span class="n">tool_calls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">tool_calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">type</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span><span class="p">,</span>
                <span class="p">},</span>
            <span class="p">})</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_calls</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">}</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_query</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">http://localhost:8000/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">dummy</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">system_prompt</span> <span class="o">=</span> <span class="p">(</span>
        <span class="sh">"</span><span class="s">You can inspect files inside SAFE_ROOT only. </span><span class="sh">"</span>
        <span class="sa">f</span><span class="sh">"</span><span class="s">SAFE_ROOT is </span><span class="sh">'</span><span class="si">{</span><span class="n">SAFE_ROOT</span><span class="si">}</span><span class="sh">'</span><span class="s">. </span><span class="sh">"</span>
        <span class="sh">"</span><span class="s">Call tools only when needed. Prefer concise outputs.</span><span class="sh">"</span>
    <span class="p">)</span>
    <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">system_prompt</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},</span>
    <span class="p">]</span>

    <span class="n">MAX_HOPS</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MAX_HOPS</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">8</span><span class="sh">"</span><span class="p">))</span>
    <span class="n">final_text</span> <span class="o">=</span> <span class="sh">""</span>

    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">MAX_HOPS</span><span class="p">):</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">MODEL</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">OPENAI_TOOLS</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">calls</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span> <span class="ow">or</span> <span class="p">[]</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>  <span class="c1"># 종료
</span>            <span class="n">final_text</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>
            <span class="k">break</span>

        <span class="c1"># 동턴 병렬 실행
</span>        <span class="k">async</span> <span class="k">def</span> <span class="nf">_run_one</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span><span class="p">}</span>
            <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="nf">call_local_tool</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">args</span><span class="p">),</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">20.0</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
            <span class="p">}</span>

        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nf">_run_one</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">])</span>

        <span class="c1"># 응답(assistant) + 각 tool 결과를 누적
</span>        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">_assistant_msg_dict</span><span class="p">(</span><span class="n">msg</span><span class="p">))</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">final_text</span>

<span class="c1"># === CLI 실행 ===
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">sys</span>
    <span class="n">q</span> <span class="o">=</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">data 폴더에서 TODO가 들어간 파일들 찾아줘. 그리고 상위 3개만 요약해.</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[SAFE_ROOT] </span><span class="si">{</span><span class="n">SAFE_ROOT</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[QUERY] </span><span class="si">{</span><span class="n">q</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">run_query</span><span class="p">(</span><span class="n">q</span><span class="p">)))</span>
</code></pre></div></div>

<hr />

<h2 id="실행-방법">실행 방법</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 1) 환경변수: 여러분의 OpenAI-호환 GPT-OSS 엔드포인트</span>
<span class="nb">export </span><span class="nv">OPENAI_BASE_URL</span><span class="o">=</span>http://localhost:8000/v1
<span class="nb">export </span><span class="nv">OPENAI_API_KEY</span><span class="o">=</span>dummy
<span class="nb">export </span><span class="nv">OSS_MODEL</span><span class="o">=</span>gpt-oss-20b

<span class="c"># 2) 파일 시스템 루트(이 경로 밖은 접근 금지)</span>
<span class="nb">export </span><span class="nv">SAFE_ROOT</span><span class="o">=</span>/path/to/workspace

<span class="c"># 3) 실행</span>
python local_fs_tools_bridge.py <span class="s2">"data 폴더에서 TODO 포함 파일 찾아 요약"</span>
</code></pre></div></div>

<hr />

<h2 id="언제-이-방식이-좋은가--아닌가">언제 이 방식이 좋은가 / 아닌가</h2>

<ul>
  <li>
    <p>👍 <strong>좋음</strong> : 내부 스크립트·리포 정리, 로그 조사, 빌드 산출물 검토 등 “한 머신 안” 단순 오토메이션</p>
  </li>
  <li>
    <p>🤔 <strong>아쉬움</strong> : 여러 앱/팀에서 <strong>재사용</strong> 하거나, 네트워크 자원/DB/API 같은 <strong>원격 리소스</strong> 까지 표준화하고 싶다면 <strong>MCP 서버화</strong> 가 장점(발견성·권한·감사·재사용)</p>
  </li>
</ul>

<p>원하시면 위 툴셋에 <code class="language-plaintext highlighter-rouge">write_text</code>, <code class="language-plaintext highlighter-rouge">tail</code>, <code class="language-plaintext highlighter-rouge">zip_list</code>, <code class="language-plaintext highlighter-rouge">json_query(jq)</code> 같은 툴을 추가해 드릴게요. 현재 쓰는 폴더 구조나 용례를 알려주시면, 스키마/가드를 맞춰 커스터마이즈해 드립니다.</p>

<p class="chat--user">

이걸 표준화된 형태로 할 수는 없을까? harmony도 다 호환되는거야?

</p>

<p>맞아요—<strong>표준화</strong> 하려면 딱 두 축만 잡으면 됩니다:<br />
(1) <strong>툴/데이터 인터페이스 표준 = MCP</strong>(서버·클라이언트 규약)<br />
(2) <strong>대화/툴호출 포맷 표준 = Harmony</strong>(모델 프롬프트/응답 포맷)<br />
둘은 <strong>서로 독립</strong> 이지만 잘 맞물립니다. MCP는 “도구를 어떻게 노출·호출할까”를 표준화하고, Harmony는 “모델과의 메시지 포맷”을 표준화해요. <a href="https://modelcontextprotocol.io/docs/learn/architecture?utm_source=chatgpt.com">modelcontextprotocol.io+1</a></p>

<hr />

<h1 id="무엇이-표준인가-한눈에">무엇이 “표준”인가 (한눈에)</h1>

<ul>
  <li>
    <p><strong>MCP</strong> : JSON-RPC 기반 프로토콜. 표준 전송은 <strong>stdio</strong> 와 <strong>Streamable HTTP</strong> 두 가지. 공식 Python/TS SDK가 있고, 여기에 맞춰 툴/리소스를 내보내면 어떤 호스트/에이전트에서도 재사용됩니다. <a href="https://modelcontextprotocol.io/specification/2025-03-26/basic/transports?utm_source=chatgpt.com">modelcontextprotocol.io+2</a></p>
  </li>
  <li>
    <p><strong>Harmony</strong> : GPT-OSS 계열이 학습한 <strong>대화·툴호출 포맷</strong>. Responses API 스타일을 모사하며, <strong>공식 렌더러(openai-harmony)</strong>가 있어 Python에서도 그대로 씁니다. (여러 배포자/서빙 솔루션은 내부에서 자동 처리하기도 함) <a href="https://github.com/openai/harmony?utm_source=chatgpt.com">GitHub+1</a></p>
  </li>
</ul>

<blockquote>
  <p>요약: <strong>MCP로 도구 측을 표준화</strong> 하고, <strong>Harmony로 모델 메시지 포맷을 표준화</strong> 하면 끝.</p>
</blockquote>

<hr />

<h1 id="내가-가진-로컬-파이썬-함수를-표준화하는-두-길">내가 가진 “로컬 파이썬 함수”를 표준화하는 두 길</h1>

<h2 id="a-최소-비용으로-mcp-서버-로-감싸기-권장">A) 최소 비용으로 <strong>MCP 서버</strong> 로 감싸기 (권장)</h2>

<p>로컬 함수들을 MCP <strong>툴</strong> 로 내보내면, Claude/ChatGPT/Gemini/에이전트 SDK에서 그대로 붙일 수 있어요. 파이썬에선 <strong>FastMCP</strong> 가 가장 손쉬움(데코레이터만 붙이면 schema 생성 포함). <a href="https://github.com/jlowin/fastmcp">GitHub+1</a></p>

<p><strong>예시(30줄대): 로컬 파일 툴 → MCP 서버</strong></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mcp_files.py
</span><span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="n">mcp</span> <span class="o">=</span> <span class="nc">FastMCP</span><span class="p">(</span><span class="sh">"</span><span class="s">LocalFS</span><span class="sh">"</span><span class="p">)</span>
<span class="n">SAFE_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="sh">"</span><span class="s">/path/to/root</span><span class="sh">"</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">safe</span><span class="p">(</span><span class="n">rel</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">SAFE_ROOT</span> <span class="o">/</span> <span class="n">rel</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)</span>  <span class="c1"># 밖 탈출 시 예외
</span>    <span class="k">return</span> <span class="n">p</span>

<span class="nd">@mcp.tool</span>
<span class="k">def</span> <span class="nf">list_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>
    <span class="n">base</span> <span class="o">=</span> <span class="nf">safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">}</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">base</span><span class="p">.</span><span class="nf">iterdir</span><span class="p">()]</span>

<span class="nd">@mcp.tool</span>
<span class="k">def</span> <span class="nf">read_text</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nf">safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)[:</span><span class="n">max_bytes</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)),</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">text</span><span class="p">}</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">mcp</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>  <span class="c1"># stdio (CLI: `fastmcp run mcp_files.py`)
</span></code></pre></div></div>

<ul>
  <li>
    <p>실행: <code class="language-plaintext highlighter-rouge">uv pip install fastmcp</code> → <code class="language-plaintext highlighter-rouge">fastmcp run mcp_files.py</code></p>
  </li>
  <li>
    <p>필요 시 <strong>HTTP(스트리머블)</strong> 전송으로 바꿔 다중 클라이언트도 처리 가능. <a href="https://github.com/jlowin/fastmcp">GitHub+1</a></p>
  </li>
</ul>

<h2 id="b-서버-없이-호스트-안에서-harmony만-채택">B) 서버 없이, <strong>호스트 안에서 Harmony만 채택</strong></h2>

<p>지금처럼 <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code>로 <strong>while 루프</strong> 를 돌리되, 메시지를 <strong>Harmony 렌더러</strong> 로 구성하면 GPT-OSS 쪽 호환성이 올라갑니다. GPT-OSS는 Harmony 포맷을 전제로 학습되었고, 공식 가이드/렌더러가 있습니다. (단, vLLM/일부 프로바이더는 내부에서 Harmony를 자동 처리하기도 함) <a href="https://github.com/openai/harmony?utm_source=chatgpt.com">GitHub+1</a></p>

<hr />

<h1 id="harmony도-다-호환되는-거야에-대한-정리">“Harmony도 다 호환되는 거야?”에 대한 정리</h1>

<ul>
  <li>
    <p><strong>Harmony ↔ MCP는 층이 다릅니다.</strong><br />
MCP는 <strong>툴·리소스 호출 표준</strong> , Harmony는 <strong>대화/툴호출 포맷 표준</strong> 이에요. 보통 “호스트”가 MCP에서 얻은 툴 스키마를 <strong>모델이 이해하는 포맷(예: Harmony 또는 OpenAI tools 포맷)</strong>으로 바꿔 넣습니다. 그래서 <strong>동시에 써도 문제 없습니다.</strong> <a href="https://openai.github.io/openai-agents-python/mcp/?utm_source=chatgpt.com">openai.github.io</a></p>
  </li>
  <li>
    <p><strong>GPT-OSS 사용 시</strong> : 직접 서빙하는 엔진이 Harmony를 <strong>자동 처리하지 않는다면</strong> , <code class="language-plaintext highlighter-rouge">openai-harmony</code> 같은 <strong>렌더러</strong> 를 쓰세요. 그렇지 않으면 툴 호출/컨텍스트 주입이 불안정할 수 있습니다. <a href="https://cookbook.openai.com/articles/openai-harmony?utm_source=chatgpt.com">OpenAI Cookbook</a></p>
  </li>
</ul>

<hr />

<h1 id="단계별-권장-루트-step-by-step">단계별 권장 루트 (Step-by-Step)</h1>

<ol>
  <li>
    <p><strong>로컬 함수 → MCP 서버화</strong>(FastMCP 추천). 위 예시 같은 파일 툴부터 노출. <a href="https://github.com/jlowin/fastmcp">GitHub</a></p>
  </li>
  <li>
    <p><strong>호스트(브리지)</strong>에서 MCP <code class="language-plaintext highlighter-rouge">tools/list</code> → 모델용 포맷으로 변환(Harmony 또는 Chat Completions tools).</p>
  </li>
  <li>
    <p><strong>툴 호출 루프</strong>(while): <code class="language-plaintext highlighter-rouge">tool_use</code> 나오면 MCP <code class="language-plaintext highlighter-rouge">call_tool</code> 실행 → <code class="language-plaintext highlighter-rouge">tool_result</code> 재주입(또는 ChatCompletions의 tool 메시지 규격). <strong>ID 1:1 매칭</strong> 지키기. <a href="https://modelcontextprotocol.io/docs/develop/build-client?utm_source=chatgpt.com">modelcontextprotocol.io</a></p>
  </li>
  <li>
    <p><strong>전송·보안</strong> : 로컬은 stdio, 분산은 Streamable HTTP + 세션/인증. <a href="https://modelcontextprotocol.io/specification/2025-03-26/basic/transports?utm_source=chatgpt.com">modelcontextprotocol.io</a></p>
  </li>
</ol>

<hr />

<p>필요하시면, 지금 쓰시는 <strong>AsyncOpenAI 호출 루프</strong> 에 맞춰</p>

<ul>
  <li>
    <p>(A) 위 로컬 파일 툴을 <strong>FastMCP 서버</strong> 로 감싼 버전,</p>
  </li>
  <li>
    <p>(B) <strong>Harmony 렌더러</strong> 를 적용한 브리지(while 루프)<br />
두 가지를 바로 붙여드릴게요.</p>
  </li>
</ul>

<p class="chat--user">

서버로 감싸면 서버를 또 띄워야하는거아냐?

</p>

<p>맞아요, “서버로 감싼다” 해도 꼭 <strong>항상 떠 있는 데몬</strong> 을 의미하진 않아요.<br />
MCP는 두 전송을 지원하는데:</p>

<ul>
  <li>
    <p><strong>stdio(권장, 로컬)</strong> : 호스트가 <strong>필요할 때만 서브프로세스</strong> 를 띄웁니다. 포트도 없고, 끝나면 같이 내려가요. “또 하나의 인프라”가 아니라 <strong>일회성 프로세스</strong> 느낌.</p>
  </li>
  <li>
    <p><strong>HTTP(원격/다중 클라)</strong> : 진짜 서버를 띄워서 여러 호스트가 붙게 할 때.</p>
  </li>
</ul>

<p>즉, <strong>여러분 환경에선 stdio면 충분</strong> 해서 “상시 서버 운영” 안 해도 됩니다. while 루프 돌리는 호스트가 알아서 켰다 끄면 끝!</p>

<hr />

<h1 id="바로-쓰는-패턴-step-by-step">바로 쓰는 패턴 (Step-by-step)</h1>

<ol>
  <li><strong>로컬 툴을 MCP 서버로 래핑</strong> (stdio용, 20~30줄)</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># mcp_files.py  — FastMCP 예시 (pip/uv: fastmcp 설치)
</span><span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="n">mcp</span> <span class="o">=</span> <span class="nc">FastMCP</span><span class="p">(</span><span class="sh">"</span><span class="s">LocalFS</span><span class="sh">"</span><span class="p">)</span>
<span class="n">SAFE_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">safe</span><span class="p">(</span><span class="n">rel</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">SAFE_ROOT</span> <span class="o">/</span> <span class="n">rel</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)</span>  <span class="c1"># 밖으로 나가면 예외
</span>    <span class="k">return</span> <span class="n">p</span>

<span class="nd">@mcp.tool</span>
<span class="k">def</span> <span class="nf">list_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">):</span>
    <span class="n">base</span> <span class="o">=</span> <span class="nf">safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">}</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">base</span><span class="p">.</span><span class="nf">iterdir</span><span class="p">()]</span>

<span class="nd">@mcp.tool</span>
<span class="k">def</span> <span class="nf">read_text</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">65536</span><span class="p">):</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nf">safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)[:</span><span class="n">max_bytes</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)),</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">text</span><span class="p">}</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">mcp</span><span class="p">.</span><span class="nf">run</span><span class="p">()</span>  <span class="c1"># 기본이 stdio: 호스트가 서브프로세스로 띄움
</span></code></pre></div></div>

<ol>
  <li><strong>호스트에서 “서브프로세스”로 붙이기</strong> (포트 없음)</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># host.py — 여러분이 이미 쓰는 AsyncOpenAI while 루프에 이 부분만 추가
</span><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">from</span> <span class="n">mcp.client.session</span> <span class="kn">import</span> <span class="n">ClientSession</span>
<span class="kn">from</span> <span class="n">mcp.client.stdio</span> <span class="kn">import</span> <span class="n">StdioTransport</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">connect_mcp</span><span class="p">():</span>
    <span class="c1"># 호스트가 필요할 때만 서버 스크립트를 서브프로세스로 실행
</span>    <span class="n">t</span> <span class="o">=</span> <span class="nc">StdioTransport</span><span class="p">(</span><span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">python</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mcp_files.py</span><span class="sh">"</span><span class="p">])</span>
    <span class="n">sess</span> <span class="o">=</span> <span class="nc">ClientSession</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">sess</span><span class="p">.</span><span class="nf">__aenter__</span><span class="p">()</span>              <span class="c1"># initialize 교섭
</span>    <span class="k">return</span> <span class="n">sess</span>

<span class="k">def</span> <span class="nf">mcp_tools_to_openai</span><span class="p">(</span><span class="n">tools</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">t</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">MCP tool</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="sh">"</span><span class="s">inputSchema</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span> <span class="ow">or</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:{}}</span>
        <span class="p">}</span>
    <span class="p">}</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">]</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">http://localhost:8000/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">dummy</span><span class="sh">"</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="k">async</span> <span class="k">with</span> <span class="k">await</span> <span class="nf">connect_mcp</span><span class="p">()</span> <span class="k">as</span> <span class="n">mcp</span><span class="p">:</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">mcp</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()</span>
        <span class="n">oai_tools</span> <span class="o">=</span> <span class="nf">mcp_tools_to_openai</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span>

        <span class="n">messages</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">Use tools only when needed.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">현재 폴더 목록 보여줘</span><span class="sh">"</span><span class="p">}</span>
        <span class="p">]</span>

        <span class="c1"># === while 루프 핵심 ===
</span>        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OSS_MODEL</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">gpt-oss-20b</span><span class="sh">"</span><span class="p">),</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span> <span class="n">tools</span><span class="o">=</span><span class="n">oai_tools</span><span class="p">,</span> <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span> <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span>
            <span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="nf">print</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">)</span>
                <span class="k">break</span>

            <span class="c1"># 동턴 tool_calls 실행 후 결과 재주입
</span>            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
                <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="n">mcp</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">arguments</span><span class="o">=</span><span class="n">args</span><span class="p">)</span>
                <span class="n">tool_msgs</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                    <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span>
                        <span class="p">{</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">out</span><span class="p">,</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
                         <span class="sh">"</span><span class="s">raw</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="sh">"</span><span class="s">__dict__</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">out</span><span class="p">))},</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
                <span class="p">})</span>

            <span class="c1"># assistant 응답 + tool 결과를 누적
</span>            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span><span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="p">[{</span>
                    <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">type</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span><span class="p">}</span>
                <span class="p">}</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">]</span>
            <span class="p">})</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<ul>
  <li>실행:</li>
</ul>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OPENAI_BASE_URL</span><span class="o">=</span>http://localhost:8000/v1
<span class="nb">export </span><span class="nv">OPENAI_API_KEY</span><span class="o">=</span>dummy
<span class="nb">export </span><span class="nv">OSS_MODEL</span><span class="o">=</span>gpt-oss-20b
python host.py
</code></pre></div></div>

<p>여기서 <code class="language-plaintext highlighter-rouge">host.py</code>가 <code class="language-plaintext highlighter-rouge">mcp_files.py</code>를 <strong>그때그때 서브프로세스로 실행</strong> 하고, 작업 끝나면 프로세스도 같이 종료됩니다. 네트워크 포트/데몬 X.</p>

<hr />

<h2 id="언제-진짜-서버http가-유리한가">언제 진짜 “서버(HTTP)”가 유리한가?</h2>

<ul>
  <li>
    <p>여러 호스트(IDE/에이전트)가 <strong>동시에 공유</strong> 할 공용 툴일 때</p>
  </li>
  <li>
    <p>원격/컨테이너/서버리스 등 <strong>분산 배치</strong> 가 필요할 때</p>
  </li>
  <li>
    <p><strong>관찰성/모니터링/스케일링</strong> 을 표준 인프라로 묶고 싶을 때</p>
  </li>
</ul>

<p>그 외엔 <strong>stdio 서브프로세스</strong> 가 가장 단순하고 안전해요.<br />
정리하면: <strong>“서버 또 띄워?” → (대부분) 아니요. 호스트가 잠깐 켰다 끄는 stdio면 충분합니다.</strong></p>

<p class="chat--user">

지금 보면 mcp_files.py라는 파일 하나를 mcp로 띄우잖아. 그거 대신에 그냥 함수나 클래스 단위로 올릴수없나?

</p>

<p>네, “파일 하나(mcp_files.py)를 띄우는 방식” 말고 <strong>함수/클래스 단위로 바로 올리는</strong> 표준적인 방법이 있어요. 포인트는 <strong>MCP 서버 인스턴스를 만들 때 그 함수·메서드를 등록</strong> 해 주는 겁니다. FastMCP 기준으로 두 가지 패턴이 깔끔합니다.</p>

<hr />

<h2 id="1-팩토리-함수-엔트리포인트권장">1) 팩토리 함수 엔트리포인트(권장)</h2>

<p>별도의 데몬 없이, 호스트가 필요할 때만 <strong>stdio 서브프로세스</strong> 로 불러 쓰세요. FastMCP는 <code class="language-plaintext highlighter-rouge">fastmcp run &lt;모듈:팩토리함수&gt;</code>를 지원합니다. 팩토리 함수가 <strong>서버 인스턴스를 만들어 반환</strong> 하면 끝! <a href="https://gofastmcp.com/patterns/cli">gofastmcp.com</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># yourpkg/localfs.py  (여기에 “그냥 쓰던” 함수/클래스가 있다고 가정)
</span><span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>

<span class="k">class</span> <span class="nc">Files</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">root</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">list_dir</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>
        <span class="n">base</span> <span class="o">=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">/</span> <span class="n">path</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
        <span class="n">base</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">root</span><span class="p">)</span>  <span class="c1"># 루트 밖 접근 차단
</span>        <span class="k">return</span> <span class="p">[{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">}</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">base</span><span class="p">.</span><span class="nf">iterdir</span><span class="p">()]</span>

<span class="k">def</span> <span class="nf">read_text</span><span class="p">(</span><span class="n">root</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="n">root</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span> <span class="o">/</span> <span class="n">path</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="nc">Path</span><span class="p">(</span><span class="n">root</span><span class="p">).</span><span class="nf">resolve</span><span class="p">())</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)[:</span><span class="n">max_bytes</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">text</span><span class="p">}</span>

<span class="c1"># yourpkg/server.py  (“팩토리 함수”로 MCP 서버 구성)
</span><span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span>
<span class="kn">from</span> <span class="n">.localfs</span> <span class="kn">import</span> <span class="n">Files</span><span class="p">,</span> <span class="n">read_text</span>

<span class="n">SAFE_ROOT</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">create_server</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">FastMCP</span><span class="p">:</span>
    <span class="n">mcp</span> <span class="o">=</span> <span class="nc">FastMCP</span><span class="p">(</span><span class="sh">"</span><span class="s">LocalFS</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">fs</span> <span class="o">=</span> <span class="nc">Files</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)</span>

    <span class="c1"># 함수/메서드를 “등록”만 하면 MCP 툴이 됩니다
</span>    <span class="n">mcp</span><span class="p">.</span><span class="nf">tool</span><span class="p">(</span><span class="n">fs</span><span class="p">.</span><span class="n">list_dir</span><span class="p">)</span>                  <span class="c1"># 인스턴스 메서드(바운드 메서드) 등록
</span>    <span class="n">mcp</span><span class="p">.</span><span class="nf">tool</span><span class="p">(</span><span class="k">lambda</span> <span class="n">path</span><span class="p">:</span> <span class="nf">read_text</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">,</span> <span class="n">path</span><span class="p">))</span>  <span class="c1"># 루트 고정한 래퍼 함수
</span>
    <span class="k">return</span> <span class="n">mcp</span>
</code></pre></div></div>

<p>실행(항상-켜진 서버 필요 X):</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install </span>fastmcp
fastmcp run yourpkg/server.py:create_server   <span class="c"># STDIO 기본</span>
<span class="c"># 또는 원하시면 HTTP/SSE 전송도 지원</span>
fastmcp run yourpkg/server.py:create_server <span class="nt">--transport</span> http <span class="nt">--port</span> 3333
</code></pre></div></div>

<ul>
  <li>
    <p>이 <strong>CLI 엔트리포인트</strong> 는 파일 이름이 아니라 <strong>함수/변수 레벨로 지목</strong> 할 수 있고(예: <code class="language-plaintext highlighter-rouge">module:factory_fn</code>), 내부에서 장착한 함수/클래스들이 툴로 노출됩니다. <a href="https://gofastmcp.com/patterns/cli">gofastmcp.com</a></p>
  </li>
  <li>
    <p>stdio 전송은 호스트가 <strong>그때그때 서브프로세스 생성/종료</strong> 해 쓰는 구조라 “서버 또 띄워야 해?” 부담이 적습니다. 필요하면 Streamable HTTP도 표준이에요. <a href="https://modelcontextprotocol.io/specification/2025-03-26/basic/transports?utm_source=chatgpt.com">modelcontextprotocol.io+1</a></p>
  </li>
</ul>

<hr />

<h2 id="2-클래스-메서드-직접-데코레이트-대신-등록-메서드-패턴">2) “클래스 메서드 직접 데코레이트” 대신 “등록 메서드” 패턴</h2>

<p>인스턴스/클래스 메서드는 <strong>정의 시 데코레이터를 바로 붙이지 말고</strong> , <strong>인스턴스를 만든 뒤 바운드 메서드로 등록</strong> 하세요. 그래야 <code class="language-plaintext highlighter-rouge">self/cls</code> 파라미터가 스키마에 드러나지 않고 올바르게 노출됩니다. (FastMCP 문서의 권장 패턴) <a href="https://gofastmcp.com/patterns/decorating-methods">gofastmcp.com</a></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span>

<span class="k">class</span> <span class="nc">Math</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">x</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span> <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>

<span class="n">mcp</span> <span class="o">=</span> <span class="nc">FastMCP</span><span class="p">(</span><span class="sh">"</span><span class="s">Demo</span><span class="sh">"</span><span class="p">)</span>
<span class="n">math</span> <span class="o">=</span> <span class="nc">Math</span><span class="p">()</span>
<span class="n">mcp</span><span class="p">.</span><span class="nf">tool</span><span class="p">(</span><span class="n">math</span><span class="p">.</span><span class="n">add</span><span class="p">)</span>         <span class="c1"># ← 인스턴스 만든 뒤 등록(권장)
</span>
<span class="c1"># (참고) 정적 메서드는 등록해도 되지만, 인스턴스/클래스 메서드는 위 방식이 안전합니다. :contentReference[oaicite:4]{index=4}
</span></code></pre></div></div>

<hr />

<h2 id="호스트여러분의-asyncopenai-루프에서-붙이기">호스트(여러분의 AsyncOpenAI 루프)에서 붙이기</h2>

<p>기존 while 루프의 MCP 세션 생성 부분만 <strong>stdio 커맨드로 교체</strong> 하면 됩니다:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">mcp.client.session</span> <span class="kn">import</span> <span class="n">ClientSession</span>
<span class="kn">from</span> <span class="n">mcp.client.stdio</span> <span class="kn">import</span> <span class="n">StdioTransport</span>

<span class="n">transport</span> <span class="o">=</span> <span class="nc">StdioTransport</span><span class="p">(</span><span class="n">command</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">fastmcp</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">run</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">yourpkg/server.py:create_server</span><span class="sh">"</span><span class="p">])</span>
<span class="k">async</span> <span class="k">with</span> <span class="nc">ClientSession</span><span class="p">(</span><span class="n">transport</span><span class="p">)</span> <span class="k">as</span> <span class="n">mcp</span><span class="p">:</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">mcp</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()</span>
    <span class="c1"># ↓ 여기서부터는 이전에 쓰시던 tool loop 동일 (tool_calls -&gt; mcp.call_tool -&gt; 재주입)
</span></code></pre></div></div>

<ul>
  <li>stdio/HTTP 등 <strong>전송은 MCP 표준</strong> 이므로, 어떤 호스트에서도 같은 방식으로 연결됩니다. <a href="https://modelcontextprotocol.io/specification/2025-03-26/basic/transports?utm_source=chatgpt.com">modelcontextprotocol.io+1</a></li>
</ul>

<hr />

<h3 id="정리">정리</h3>

<ul>
  <li>
    <p>“파일 하나”가 아니라 <strong>함수/클래스 단위로 구성</strong> 된 모듈을 <strong>팩토리 함수</strong> 로 묶어 <strong>표준 MCP 서버</strong> 를 만들고,</p>
  </li>
  <li>
    <p><strong>stdio</strong> 로 필요할 때만 띄워 쓰면 <strong>상시 서버 운영 없이</strong> 재사용 가능한 표준 툴 체계가 됩니다. <a href="https://gofastmcp.com/patterns/cli">gofastmcp.com+1</a></p>
  </li>
</ul>

<p>원하시면 지금 쓰시는 함수/클래스를 기반으로 <strong><code class="language-plaintext highlighter-rouge">create_server()</code> 스켈레톤</strong>을 바로 만들어 드릴게요—패키지 이름/루트 경로만 알려주세요.</p>

<p class="chat--user">

아니 봐봐. 예를 들어 아래와 같이 간단히 운영할 수 없어? 
<code class="language-plaintext highlighter-rouge">python
@mcp.tool
def list_dir(path: str = "."):
    # implementation

@mcp.tool
def read_text(path: str):
    # implementation

async def main(mcp_list):
    async with AsyncOpenAI(...) as client:
        client.chat.completions.create("Hello", tools=mcp_list)

asyncio.run(main([read_text, list_dir]))
</code>

이런 식으로 그냥 바로 넣고 싶어

</p>

<p>좋아요—that’s exactly doable.<br />
핵심은 <strong>파이썬 함수/메서드 자체를 “도구”로 등록</strong> 하고, 그 시그니처로부터 <strong>OpenAI tools 스키마</strong> 를 만들어 <code class="language-plaintext highlighter-rouge">client.chat.completions.create(..., tools=...)</code>에 넘긴 뒤, 응답의 <code class="language-plaintext highlighter-rouge">tool_calls</code>를 <strong>그 함수에 실행→결과 재주입</strong> 하는 작은 러너를 갖추면 됩니다. MCP 서버는 전혀 필요 없어요.</p>

<p>아래 코드는 그대로 복붙해서 돌아가도록 만든 <strong>초소형 인라인-툴 브리지</strong> 예요.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@inline_tool</code>로 함수 등록</p>
  </li>
  <li>
    <p>타입힌트→JSON Schema 변환(기본 타입들)</p>
  </li>
  <li>
    <p>동기/비동기 함수 모두 지원</p>
  </li>
  <li>
    <p>while 루프(툴 호출 없어질 때까지) + <code class="language-plaintext highlighter-rouge">tool_call_id</code> 매칭</p>
  </li>
  <li>
    <p>간단한 파일 툴 <code class="language-plaintext highlighter-rouge">list_dir</code>, <code class="language-plaintext highlighter-rouge">read_text</code> 샘플 포함</p>
  </li>
</ul>

<hr />
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># inline_tools_bridge.py
# pip install openai
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">inspect</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">get_origin</span><span class="p">,</span> <span class="n">get_args</span>

<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="c1"># ===============================
# 0) 인라인 툴 등록/스키마 생성기
# ===============================
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">_ToolEntry</span><span class="p">:</span>
    <span class="n">func</span><span class="p">:</span> <span class="n">Callable</span>
    <span class="n">name</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">desc</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">schema</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span>

<span class="n">_REGISTRY</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">_ToolEntry</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">inline_tool</span><span class="p">(</span><span class="n">_fn</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">description</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">함수에 달아주면 자동으로 OpenAI tools 스키마가 만들어져 등록됩니다.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">fn</span><span class="p">:</span> <span class="n">Callable</span><span class="p">):</span>
        <span class="n">tname</span> <span class="o">=</span> <span class="p">(</span><span class="n">name</span> <span class="ow">or</span> <span class="n">fn</span><span class="p">.</span><span class="n">__name__</span><span class="p">)[:</span><span class="mi">64</span><span class="p">]</span>
        <span class="n">schema</span> <span class="o">=</span> <span class="nf">_build_openai_tool_schema</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span> <span class="n">tname</span><span class="p">,</span> <span class="n">description</span> <span class="ow">or</span> <span class="p">(</span><span class="n">fn</span><span class="p">.</span><span class="n">__doc__</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">_REGISTRY</span><span class="p">[</span><span class="n">tname</span><span class="p">]</span> <span class="o">=</span> <span class="nf">_ToolEntry</span><span class="p">(</span><span class="n">fn</span><span class="o">=</span><span class="n">fn</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">tname</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="n">schema</span><span class="p">[</span><span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">],</span> <span class="n">schema</span><span class="o">=</span><span class="n">schema</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">fn</span>
    <span class="k">return</span> <span class="n">decorator</span> <span class="k">if</span> <span class="n">_fn</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">_fn</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_pytype_to_schema</span><span class="p">(</span><span class="n">tp</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="c1"># 아주 가벼운 매핑: 필요 시 확장하세요.
</span>    <span class="n">origin</span> <span class="o">=</span> <span class="nf">get_origin</span><span class="p">(</span><span class="n">tp</span><span class="p">)</span>
    <span class="n">args</span> <span class="o">=</span> <span class="nf">get_args</span><span class="p">(</span><span class="n">tp</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">tp</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span> <span class="n">origin</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">tp</span> <span class="ow">is</span> <span class="n">inspect</span><span class="p">.</span><span class="n">_empty</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">tp</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">int</span><span class="p">,):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">integer</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">tp</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">float</span><span class="p">,):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">number</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">tp</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">bool</span><span class="p">,):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">boolean</span><span class="sh">"</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">origin</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">list</span><span class="p">,</span> <span class="n">List</span><span class="p">):</span>
        <span class="n">item_schema</span> <span class="o">=</span> <span class="nf">_pytype_to_schema</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">args</span> <span class="k">else</span> <span class="nb">str</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">array</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">items</span><span class="sh">"</span><span class="p">:</span> <span class="n">item_schema</span><span class="p">}</span>
    <span class="k">if</span> <span class="n">origin</span> <span class="ow">in</span> <span class="p">(</span><span class="nb">dict</span><span class="p">,</span> <span class="n">Dict</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">}</span>
    <span class="c1"># Optional[T] 처리
</span>    <span class="k">if</span> <span class="n">origin</span> <span class="ow">is</span> <span class="n">Optional</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">_pytype_to_schema</span><span class="p">(</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="c1"># 그 외엔 문자열로 처리(보수적)
</span>    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">string</span><span class="sh">"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">_build_openai_tool_schema</span><span class="p">(</span><span class="n">fn</span><span class="p">:</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">desc</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">sig</span> <span class="o">=</span> <span class="n">inspect</span><span class="p">.</span><span class="nf">signature</span><span class="p">(</span><span class="n">fn</span><span class="p">)</span>
    <span class="n">properties</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">required</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">pname</span><span class="p">,</span> <span class="n">param</span> <span class="ow">in</span> <span class="n">sig</span><span class="p">.</span><span class="n">parameters</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">ann</span> <span class="o">=</span> <span class="n">param</span><span class="p">.</span><span class="n">annotation</span>
        <span class="n">sch</span> <span class="o">=</span> <span class="nf">_pytype_to_schema</span><span class="p">(</span><span class="n">ann</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">param</span><span class="p">.</span><span class="n">default</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">inspect</span><span class="p">.</span><span class="n">_empty</span><span class="p">:</span>
            <span class="n">sch</span><span class="p">[</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">param</span><span class="p">.</span><span class="n">default</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">required</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pname</span><span class="p">)</span>
        <span class="n">properties</span><span class="p">[</span><span class="n">pname</span><span class="p">]</span> <span class="o">=</span> <span class="n">sch</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="n">desc</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="n">properties</span><span class="p">,</span> <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="n">required</span><span class="p">},</span>
        <span class="p">},</span>
    <span class="p">}</span>

<span class="k">def</span> <span class="nf">compiled_tools</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">e</span><span class="p">.</span><span class="n">schema</span> <span class="k">for</span> <span class="n">e</span> <span class="ow">in</span> <span class="n">_REGISTRY</span><span class="p">.</span><span class="nf">values</span><span class="p">()]</span>

<span class="c1"># ===================================
# 1) 샘플 인라인 툴(파일 관련, 옵션)
# ===================================
</span><span class="n">SAFE_ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">SAFE_ROOT</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)).</span><span class="nf">resolve</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">rel</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">SAFE_ROOT</span> <span class="o">/</span> <span class="n">rel</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)</span>  <span class="c1"># 밖으로 나가면 예외
</span>    <span class="k">return</span> <span class="n">p</span>

<span class="nd">@inline_tool</span>
<span class="k">def</span> <span class="nf">list_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="sh">"""</span><span class="s">List directory entries under SAFE_ROOT.</span><span class="sh">"""</span>
    <span class="n">base</span> <span class="o">=</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">base</span><span class="p">.</span><span class="nf">exists</span><span class="p">():</span>
        <span class="k">return</span> <span class="p">[]</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ch</span> <span class="ow">in</span> <span class="n">base</span><span class="p">.</span><span class="nf">iterdir</span><span class="p">():</span>
        <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">ch</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span> <span class="k">if</span> <span class="n">ch</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="n">ch</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span> <span class="k">if</span> <span class="n">ch</span><span class="p">.</span><span class="nf">is_file</span><span class="p">()</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="p">})</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="nd">@inline_tool</span>
<span class="k">def</span> <span class="nf">read_text</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">Read a text file with size/encoding guards.</span><span class="sh">"""</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">fp</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)[:</span><span class="n">max_bytes</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">fp</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">SAFE_ROOT</span><span class="p">)),</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">text</span><span class="p">}</span>

<span class="c1"># 예시: 비동기 툴도 OK
</span><span class="nd">@inline_tool</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">slow_count_chars</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Count characters in a file (simulated slow I/O).</span><span class="sh">"""</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">fp</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">))</span>

<span class="c1"># ===================================
# 2) while 루프 러너 (OpenAI 호환)
# ===================================
</span><span class="k">def</span> <span class="nf">_assistant_msg_dict</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">tc</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">tc</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">type</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span><span class="p">},</span>
            <span class="p">})</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="n">tc</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">}</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_call_inline_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args_json</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">timeout_s</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">20.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">tool_name</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">_REGISTRY</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">unknown tool: </span><span class="si">{</span><span class="n">tool_name</span><span class="si">}</span><span class="sh">"</span><span class="p">}</span>
    <span class="n">entry</span> <span class="o">=</span> <span class="n">_REGISTRY</span><span class="p">[</span><span class="n">tool_name</span><span class="p">]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args_json</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">:</span> <span class="n">args_json</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_runner</span><span class="p">():</span>
        <span class="n">res</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">func</span><span class="p">(</span><span class="o">**</span><span class="n">args</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">inspect</span><span class="p">.</span><span class="nf">iscoroutine</span><span class="p">(</span><span class="n">res</span><span class="p">):</span>
            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">res</span>
        <span class="k">return</span> <span class="n">res</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="nf">_runner</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout_s</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">result</span><span class="p">}</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">e</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">}</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">chat_with_inline_tools</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">http://localhost:8000/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">dummy</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">OSS_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-oss-20b</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">tools</span> <span class="o">=</span> <span class="nf">compiled_tools</span><span class="p">()</span>

    <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sa">f</span><span class="sh">"</span><span class="s">You can use tools. SAFE_ROOT is </span><span class="sh">'</span><span class="si">{</span><span class="n">SAFE_ROOT</span><span class="si">}</span><span class="sh">'</span><span class="s">.</span><span class="sh">"</span><span class="p">},</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},</span>
    <span class="p">]</span>
    <span class="n">MAX_HOPS</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">MAX_HOPS</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">8</span><span class="sh">"</span><span class="p">))</span>
    <span class="n">final</span> <span class="o">=</span> <span class="sh">""</span>

    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">MAX_HOPS</span><span class="p">):</span>
        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
            <span class="n">tools</span><span class="o">=</span><span class="n">tools</span><span class="p">,</span>
            <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
        <span class="n">calls</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span> <span class="ow">or</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">calls</span><span class="p">:</span>
            <span class="n">final</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>
            <span class="k">break</span>

        <span class="c1"># 동턴 병렬 실행
</span>        <span class="k">async</span> <span class="k">def</span> <span class="nf">_one</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
            <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">_call_inline_tool</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)}</span>

        <span class="n">tool_msgs</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nf">_one</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">calls</span><span class="p">])</span>

        <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">_assistant_msg_dict</span><span class="p">(</span><span class="n">msg</span><span class="p">))</span>
        <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">final</span>

<span class="c1"># ==========================
# 3) 데모 실행
# ==========================
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">sys</span>
    <span class="n">q</span> <span class="o">=</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">현재 디렉토리 목록을 보여주고, README.md 있으면 읽어줘.</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[SAFE_ROOT] </span><span class="si">{</span><span class="n">SAFE_ROOT</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">chat_with_inline_tools</span><span class="p">(</span><span class="n">q</span><span class="p">)))</span>
</code></pre></div></div>

<hr />

<h2 id="이렇게-쓰시면-됩니다">이렇게 쓰시면 됩니다</h2>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">OPENAI_BASE_URL</span><span class="o">=</span>http://localhost:8000/v1
<span class="nb">export </span><span class="nv">OPENAI_API_KEY</span><span class="o">=</span>dummy
<span class="nb">export </span><span class="nv">OSS_MODEL</span><span class="o">=</span>gpt-oss-20b
<span class="nb">export </span><span class="nv">SAFE_ROOT</span><span class="o">=</span>/your/workspace
python inline_tools_bridge.py <span class="s2">"data 폴더 목록 보여주고, README.md 읽어줘"</span>
</code></pre></div></div>

<hr />

<h2 id="한-줄-요약-컨셉-정리">한 줄 요약 (컨셉 정리)</h2>

<ul>
  <li>
    <p>지금 보여드린 방식은 <strong>MCP 없이</strong> “함수/클래스 → OpenAI tools”로 직접 매핑하는 <strong>인라인 툴</strong> 입니다.</p>
  </li>
  <li>
    <p><strong>장점</strong> : 초간단, 서버/프로세스 추가 없음.</p>
  </li>
  <li>
    <p><strong>주의</strong> : 이것만으로는 “MCP 표준”은 아니므로, <strong>다른 호스트/에이전트와 재사용성·발견성</strong> 이 필요해지면 같은 함수들을 <strong>FastMCP로 래핑</strong> 해 stdio로 띄우면 바로 표준화를 얻을 수 있어요(코드 변경 최소).</p>
  </li>
</ul>

<p class="chat--user">

FastMCP에는 이런 기능이 없어?

</p>

<p>짧게 결론부터요:</p>

<ul>
  <li>
    <p><strong>FastMCP 자체로 “파이썬 함수 리스트를 곧장 Chat Completions의 tools에 넣어주는” 내장 기능은 없습니다.</strong> FastMCP는 기본적으로 <em>MCP 서버/클라이언트</em> 를 만들기 위한 프레임워크예요. (<code class="language-plaintext highlighter-rouge">@mcp.tool</code>로 함수 등록 → MCP로 노출) <a href="https://github.com/jlowin/fastmcp">GitHub+1</a></p>
  </li>
  <li>
    <p>다만 선택지는 3가지입니다. (step-by-step)</p>
  </li>
</ul>

<ol>
  <li>
    <p><strong>OpenAI Responses API로 전환</strong><br />
OpenAI의 <em>Responses API</em> 는 MCP 서버를 “원격 툴 소스”로 바로 붙일 수 있게 표준 지원합니다(※ Chat Completions는 미지원). FastMCP로 HTTP/SSE 서버를 띄우고 Responses에서 <code class="language-plaintext highlighter-rouge">type: "mcp"</code>로 연결하면 끝. <a href="https://gofastmcp.com/integrations/openai">gofastmcp.com</a></p>
  </li>
  <li>
    <p><strong>서버 따로 띄우기 싫다면: FastMCP “인메모리”로 내장 + 얇은 어댑터</strong><br />
FastMCP에는 <strong>클라이언트가 FastMCP 서버 인스턴스에 직접 붙는 “인메모리 트랜스포트”</strong>가 있어, <em>별도 프로세스 없이</em> 같은 파이썬 프로세스 안에서 MCP 호출을 수행할 수 있어요. 이때 <code class="language-plaintext highlighter-rouge">client.list_tools()</code>로 툴 스키마를 읽어 <strong>OpenAI 함수-툴 포맷으로 변환</strong> 해서 <code class="language-plaintext highlighter-rouge">chat.completions.create(..., tools=...)</code>에 넘기고, <code class="language-plaintext highlighter-rouge">tool_calls</code>가 오면 <code class="language-plaintext highlighter-rouge">client.call_tool(...)</code>로 실행→결과를 재주입하면 됩니다. (아래 소스 15~20줄 정도면 충분) <a href="https://gofastmcp.com/clients/client">gofastmcp.com</a></p>
  </li>
  <li>
    <p><strong>필요하면 stdio/HTTP로 “그때그때” 구동</strong><br />
<code class="language-plaintext highlighter-rouge">fastmcp run server.py[:객체/팩토리]</code>로 <strong>STDIO(기본)/HTTP/SSE</strong> 중 아무거나 택해 일회성으로 띄우는 패턴도 공식 제공돼요. (항상-켜진 서버 운영 부담 ↓) <a href="https://github.com/jlowin/fastmcp">GitHub+1</a></p>
  </li>
</ol>

<hr />

<h2 id="최소-어댑터-예시-인메모리-fastmcp--chat-completions">최소 어댑터 예시 (인메모리 FastMCP ↔ Chat Completions)</h2>

<blockquote>
  <p>핵심: FastMCP로 함수 등록 → <code class="language-plaintext highlighter-rouge">Client(mcp)</code>로 인메모리 접속 → <code class="language-plaintext highlighter-rouge">list_tools()</code>를 <strong>OpenAI tools 포맷</strong> 으로 변환 → <code class="language-plaintext highlighter-rouge">tool_calls</code>는 <code class="language-plaintext highlighter-rouge">client.call_tool()</code>로 실행.
```python
import asyncio, json, os
from fastmcp import FastMCP, Client
from openai import AsyncOpenAI</p>
</blockquote>

<p>mcp = FastMCP("LocalTools")</p>

<p>@mcp.tool
def list_dir(path: str = ".") -&gt; list[dict]:
    """List directory entries."""
    import os
    return [{"name": f, "type": ("dir" if os.path.isdir(os.path.join(path, f)) else "file")}
            for f in os.listdir(path)]</p>

<p>@mcp.tool
def read_text(path: str, max_bytes: int = 65536) -&gt; dict:
    """Read a UTF-8 text file."""
    with open(path, "r", encoding="utf-8", errors="replace") as f:
        return {"path": path, "text": f.read()[:max_bytes]}</p>

<p>async def main(user_input: str):
    # 1) 인메모리로 FastMCP 서버에 붙기(별도 프로세스 X)
    mcp_client = Client(mcp)
    async with mcp_client:
        # 2) MCP 툴 → OpenAI 함수-툴 포맷 변환
        tools = await mcp_client.list_tools()
        openai_tools = [{
            "type": "function",
            "function": {
                "name": t.name,
                "description": t.description or "",
                "parameters": t.inputSchema  # MCP 표준 스키마 그대로 사용
            }
        } for t in tools]</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    # 3) 일반 Chat Completions 루프
    llm = AsyncOpenAI(
        base_url=os.getenv("OPENAI_BASE_URL", "http://localhost:8000/v1"),
        api_key=os.getenv("OPENAI_API_KEY", "dummy"),
    )
    model = os.getenv("OSS_MODEL", "gpt-oss-20b")
    messages = [{"role": "user", "content": user_input}]

    for _ in range(8):
        resp = await llm.chat.completions.create(
            model=model, messages=messages, tools=openai_tools, tool_choice="auto", temperature=0.2
        )
        msg = resp.choices[0].message
        if not msg.tool_calls:
            print(msg.content or "")
            return

        # 4) tool_calls 실행 → 결과 재주입
        tool_msgs = []
        for c in msg.tool_calls:
            args = json.loads(c.function.arguments or "{}")
            result = await mcp_client.call_tool(c.function.name, args)
            # 결과는 문자열로 넣어주면 안전
            payload = getattr(result, "data", None) or getattr(result, "content", None) or result
            tool_msgs.append({"role": "tool", "tool_call_id": c.id,
                              "content": json.dumps(payload, ensure_ascii=False, default=str)})

        messages.append({
            "role": "assistant",
            "content": msg.content,
            "tool_calls": [{"id": c.id, "type": c.type,
                            "function": {"name": c.function.name, "arguments": c.function.arguments}}
                           for c in msg.tool_calls]
        })
        messages.extend(tool_msgs)
</code></pre></div></div>

<p>if <strong>name</strong> == "<strong>main</strong>":
    asyncio.run(main("현재 폴더 목록을 보여주고 README.md가 있으면 읽어줘"))</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  * 위 코드는 **서버 프로세스 없이** FastMCP를 _내장_ 하고, MCP 툴 스키마를 그대로 **OpenAI 함수-툴** 로 넘깁니다. (Responses API로 갈 수 없다면 이 방식이 가장 가벼움)

  * 인스턴스/클래스 메서드를 툴로 내고 싶다면, **인스턴스를 만들고 바운드 메서드를 등록** 하는 패턴이 권장입니다. (`@mcp.tool`를 메서드에 직접 붙이지 말 것) [gofastmcp.com](https://gofastmcp.com/patterns/decorating-methods)

* * *

## 언제 무엇을 쓰면 되나 (요약)

  * **OpenAI Responses API 사용 가능** → _그냥 FastMCP 서버_ 노출하고 `type: "mcp"`로 붙이세요. (정석) [gofastmcp.com](https://gofastmcp.com/integrations/openai)

  * **Chat Completions만 반드시 써야 함** → 위 **인메모리 + 변환 어댑터** 패턴. (프로세스 추가 無) [gofastmcp.com](https://gofastmcp.com/clients/client)

  * **원하면 일회성 서버** → `fastmcp run server.py[:obj]`로 **STDIO/HTTP/SSE** 중 선택해 띄우기. [GitHub+1](https://github.com/jlowin/fastmcp)

필요하시면, 지금 쓰시는 함수들로 **인메모리 FastMCP + 변환 어댑터** 를 바로 맞춰 드릴게요—함수 시그니처만 알려 주세요.

&lt;p class="chat--user" markdown="1"&gt;

fastmcp 깃허브 보니 mcp = FastMCP("My MCP") async def main(): async with Client(mcp) as client: ... 이렇게 쓸 수 있는 것 같은데?

&lt;/p&gt;

맞아요, 그 패턴 그대로 쓸 수 있어요. **FastMCP는 “인메모리 클라이언트”**를 제공해서, 별도 서버나 서브프로세스 없이 **같은 파이썬 프로세스 안에서** MCP 호출을 돌릴 수 있습니다. 즉:
```python
mcp = FastMCP("My MCP")

async def main():
    async with Client(mcp) as client:
        ...
</code></pre></div></div>

<p>이 형태가 공식적으로 안내되는 <strong>인메모리(프로세스 내) 연결</strong> 방식이고, 테스트·개발에 특히 적합해요. <a href="https://gofastmcp.com/clients/client?utm_source=chatgpt.com">gofastmcp.com+2</a></p>

<p>아래는 당신이 원하신 그대로, <strong>함수들을 바로 등록</strong> 하고 <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code>의 <code class="language-plaintext highlighter-rouge">chat.completions.create(...)</code>에 <strong>툴 스키마를 넣어</strong> while 루프를 돌리는 <strong>완성 예시</strong> 입니다. (서버/포트/데몬 없음)</p>

<hr />

<h3 id="fastmcp--인메모리--chat-completions-브리지-복붙용">fastmcp × 인메모리 × Chat Completions 브리지 (복붙용)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># fastmcp_inline_bridge.py
# pip install fastmcp openai
</span>
<span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">json</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">inspect</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Client</span>

<span class="c1"># 0) MCP 인스턴스와 "그냥 함수"들을 MCP 툴로 등록
</span><span class="n">mcp</span> <span class="o">=</span> <span class="nc">FastMCP</span><span class="p">(</span><span class="sh">"</span><span class="s">LocalFS</span><span class="sh">"</span><span class="p">)</span>

<span class="nd">@mcp.tool</span>
<span class="k">def</span> <span class="nf">list_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">List directory entries.</span><span class="sh">"""</span>
    <span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">pathlib</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">pathlib</span><span class="p">.</span><span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="n">entries</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
        <span class="n">full</span> <span class="o">=</span> <span class="n">p</span> <span class="o">/</span> <span class="n">name</span>
        <span class="n">entries</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span> <span class="k">if</span> <span class="n">full</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="n">full</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span> <span class="k">if</span> <span class="n">full</span><span class="p">.</span><span class="nf">is_file</span><span class="p">()</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="p">})</span>
    <span class="k">return</span> <span class="n">entries</span>

<span class="nd">@mcp.tool</span>
<span class="k">def</span> <span class="nf">read_text</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Read a UTF-8 text file (size-limited).</span><span class="sh">"""</span>
    <span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
    <span class="n">fp</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">path</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="n">text</span> <span class="o">=</span> <span class="n">fp</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)[:</span><span class="n">max_bytes</span><span class="p">]</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">fp</span><span class="p">),</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">text</span><span class="p">}</span>

<span class="c1"># 1) MCP -&gt; OpenAI tools 포맷 변환 도우미
</span><span class="k">def</span> <span class="nf">_schema_of</span><span class="p">(</span><span class="n">tool_obj</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="c1"># FastMCP가 내주는 속성 이름이 구현별로 다를 수 있어 대비
</span>    <span class="nf">return </span><span class="p">(</span>
        <span class="nf">getattr</span><span class="p">(</span><span class="n">tool_obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">input_schema</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span>
        <span class="nf">getattr</span><span class="p">(</span><span class="n">tool_obj</span><span class="p">,</span> <span class="sh">"</span><span class="s">inputSchema</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">or</span>
        <span class="p">{</span><span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">object</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">properties</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_openai_tools</span><span class="p">(</span><span class="n">mcp_tools</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
    <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">mcp_tools</span><span class="p">:</span>
        <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">t</span><span class="p">.</span><span class="n">name</span><span class="p">[:</span><span class="mi">64</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">:</span> <span class="nf">getattr</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="sh">"</span><span class="s">description</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">MCP tool</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">parameters</span><span class="sh">"</span><span class="p">:</span> <span class="nf">_schema_of</span><span class="p">(</span><span class="n">t</span><span class="p">),</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="k">return</span> <span class="n">out</span>

<span class="k">def</span> <span class="nf">_assistant_msg_dict</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="n">tool_calls</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>
            <span class="n">tool_calls</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">type</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">function</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="sh">"</span><span class="s">arguments</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span><span class="p">}</span>
            <span class="p">})</span>
    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">assistant</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_calls</span><span class="sh">"</span><span class="p">:</span> <span class="n">tool_calls</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">}</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_call_tool</span><span class="p">(</span><span class="n">client</span><span class="p">:</span> <span class="n">Client</span><span class="p">,</span> <span class="n">tool_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">args_json</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">timeout_s</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">20.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">args</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">args_json</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">{}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">:</span> <span class="n">args_json</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_runner</span><span class="p">():</span>
        <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="n">tool_name</span><span class="p">,</span> <span class="n">args</span><span class="p">)</span>
        <span class="c1"># 결과 정규화(문자/객체 무엇이든 JSON으로 넘길 수 있게)
</span>        <span class="k">if</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">content</span>
        <span class="k">elif</span> <span class="nf">hasattr</span><span class="p">(</span><span class="n">res</span><span class="p">,</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="n">data</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="n">res</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>  <span class="c1"># 직렬화 가능 확인
</span>            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="n">payload</span><span class="p">}</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">result</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">payload</span><span class="p">)}</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="nf">_runner</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout_s</span><span class="p">)</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">ok</span><span class="sh">"</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span> <span class="sh">"</span><span class="s">error</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">),</span> <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="n">e</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">}</span>

<span class="c1"># 2) 메인 루프: Chat Completions ↔ FastMCP(인메모리)
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">chat_with_inline_mcp</span><span class="p">(</span><span class="n">user_input</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="c1"># OpenAI-호환 엔드포인트(GPT-OSS 등)로 교체
</span>    <span class="n">oai</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">(</span>
        <span class="n">base_url</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_BASE_URL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">http://localhost:8000/v1</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">api_key</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_API_KEY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">dummy</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">model</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OSS_MODEL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gpt-oss-20b</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">with</span> <span class="nc">Client</span><span class="p">(</span><span class="n">mcp</span><span class="p">)</span> <span class="k">as</span> <span class="n">mcp_client</span><span class="p">:</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">mcp_client</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()</span>
        <span class="n">openai_tools</span> <span class="o">=</span> <span class="nf">_to_openai_tools</span><span class="p">(</span><span class="n">tools</span><span class="p">)</span>

        <span class="n">messages</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">system</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">You can use tools when necessary. Keep outputs concise.</span><span class="sh">"</span><span class="p">},</span>
            <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">user_input</span><span class="p">},</span>
        <span class="p">]</span>

        <span class="n">MAX_HOPS</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">MAX_HOPS</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">8</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">final_text</span> <span class="o">=</span> <span class="sh">""</span>

        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">MAX_HOPS</span><span class="p">):</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">oai</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="n">messages</span><span class="p">,</span>
                <span class="n">tools</span><span class="o">=</span><span class="n">openai_tools</span><span class="p">,</span>
                <span class="n">tool_choice</span><span class="o">=</span><span class="sh">"</span><span class="s">auto</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="n">msg</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">:</span>           <span class="c1"># 종료 조건
</span>                <span class="n">final_text</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">content</span> <span class="ow">or</span> <span class="sh">""</span>
                <span class="k">break</span>

            <span class="c1"># 동턴 병렬 실행
</span>            <span class="k">async</span> <span class="k">def</span> <span class="nf">_one</span><span class="p">(</span><span class="n">c</span><span class="p">):</span>
                <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">_call_tool</span><span class="p">(</span><span class="n">mcp_client</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">name</span><span class="p">,</span> <span class="n">c</span><span class="p">.</span><span class="n">function</span><span class="p">.</span><span class="n">arguments</span><span class="p">)</span>
                <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">tool</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tool_call_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">c</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)}</span>

            <span class="n">tool_msgs</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="p">[</span><span class="nf">_one</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">msg</span><span class="p">.</span><span class="n">tool_calls</span><span class="p">])</span>

            <span class="c1"># assistant 응답 + tool 결과를 누적
</span>            <span class="n">messages</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">_assistant_msg_dict</span><span class="p">(</span><span class="n">msg</span><span class="p">))</span>
            <span class="n">messages</span><span class="p">.</span><span class="nf">extend</span><span class="p">(</span><span class="n">tool_msgs</span><span class="p">)</span>

        <span class="k">return</span> <span class="n">final_text</span>

<span class="c1"># 3) 실행
</span><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">sys</span>
    <span class="n">q</span> <span class="o">=</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">:])</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">현재 디렉토리 목록 보여주고 README.md 있으면 읽어줘.</span><span class="sh">"</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">chat_with_inline_mcp</span><span class="p">(</span><span class="n">q</span><span class="p">)))</span>
</code></pre></div></div>

<p><strong>사용법</strong></p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>fastmcp openai
<span class="nb">export </span><span class="nv">OPENAI_BASE_URL</span><span class="o">=</span>http://localhost:8000/v1
<span class="nb">export </span><span class="nv">OPENAI_API_KEY</span><span class="o">=</span>dummy
<span class="nb">export </span><span class="nv">OSS_MODEL</span><span class="o">=</span>gpt-oss-20b
python fastmcp_inline_bridge.py <span class="s2">"data 폴더 목록과 README.md 읽어줘"</span>
</code></pre></div></div>

<hr />

<h3 id="정리-step-by-step">정리 (Step-by-step)</h3>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@mcp.tool</code>로 <strong>그냥 파이썬 함수</strong> 를 등록한다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">async with Client(mcp)</code>로 <strong>인메모리 연결</strong> 을 연다 → <code class="language-plaintext highlighter-rouge">list_tools()</code>로 툴 스키마 획득. <a href="https://gofastmcp.com/clients/client?utm_source=chatgpt.com">gofastmcp.com+1</a></p>
  </li>
  <li>
    <p>그 스키마를 <strong>OpenAI tools 포맷</strong> 으로 변환해 <code class="language-plaintext highlighter-rouge">chat.completions.create(..., tools=...)</code>에 전달.</p>
  </li>
  <li>
    <p>응답의 <code class="language-plaintext highlighter-rouge">tool_calls</code>를 <strong><code class="language-plaintext highlighter-rouge">client.call_tool(...)</code></strong>로 실행하고, <strong><code class="language-plaintext highlighter-rouge">tool_call_id</code> 매칭</strong>하여 <strong>tool 메시지</strong> 로 재주입 → <strong>while</strong> 반복.</p>
  </li>
  <li>
    <p>별도 서버나 포트는 전혀 필요 없음(인메모리). 필요해지면 언제든 <strong>STDIO/HTTP</strong> 로 바꿀 수 있음. <a href="https://gofastmcp.com/deployment/running-server?utm_source=chatgpt.com">gofastmcp.com</a></p>
  </li>
</ol>

<p>원하시면 여기에 <strong>클래스 메서드 바운드 등록</strong> , <strong>타임아웃/재시도/로깅</strong> 까지 커스터마이즈한 실전 버전으로 다듬어 드릴게요.</p>

<p class="chat--user">

그런데 예를 들어 이렇게 만들 수 있어? def add_read_text_tool(mcp: FastMCP): # mcp에 read_text를 tool로 등록 후 return mcp my_mcp = FastMCP("My MCP") my_mcp = add_read_text_tool(my_mcp) # my_mcp에는 툴이 등록된 상태

</p>

<p>네, 그렇게 만들 수 있어요. 포인트는 <strong>함수 자체에는 데코레이터를 붙이지 않고</strong> , 나중에 <code class="language-plaintext highlighter-rouge">mcp.tool(fn)</code>으로 <strong>등록(attach)</strong> 하는 거예요. 그러면 “추가 함수”들을 손쉽게 끼워넣고 조합할 수 있습니다.</p>

<p>아래는 바로 복붙해서 쓰는 <strong>유틸 패턴</strong> 이에요.</p>

<h3 id="1-툴-추가-유틸-함수클래스-메서드-모두-지원">1) 툴 추가 유틸 (함수/클래스 메서드 모두 지원)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tools_adders.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">from</span> <span class="n">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span>
<span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span>

<span class="k">def</span> <span class="nf">add_read_text_tool</span><span class="p">(</span><span class="n">mcp</span><span class="p">:</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="n">Path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span>
                       <span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">read_text</span><span class="sh">"</span><span class="p">,</span> <span class="n">default_max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">FastMCP</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">read_text(path, max_bytes) 툴을 mcp에 등록하고 mcp를 반환.</span><span class="sh">"""</span>
    <span class="n">ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">root</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">rel</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">ROOT</span> <span class="o">/</span> <span class="n">rel</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">ROOT</span><span class="p">)</span>  <span class="c1"># 밖으로 나가면 예외
</span>        <span class="k">return</span> <span class="n">p</span>

    <span class="k">def</span> <span class="nf">read_text</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">default_max_bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">Read a UTF-8 text file under ROOT with size limit.</span><span class="sh">"""</span>
        <span class="n">fp</span> <span class="o">=</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="n">txt</span> <span class="o">=</span> <span class="n">fp</span><span class="p">.</span><span class="nf">read_text</span><span class="p">(</span><span class="n">encoding</span><span class="o">=</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)[:</span><span class="n">max_bytes</span><span class="p">]</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">fp</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">ROOT</span><span class="p">)),</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">txt</span><span class="p">}</span>

    <span class="c1"># 함수 이름을 바꾸고 싶으면 wrapper의 __name__을 바꿔도 되고…
</span>    <span class="n">read_text</span><span class="p">.</span><span class="n">__name__</span> <span class="o">=</span> <span class="n">name</span>
    <span class="n">mcp</span><span class="p">.</span><span class="nf">tool</span><span class="p">(</span><span class="n">read_text</span><span class="p">)</span>          <span class="c1"># ← 여기서 등록!
</span>    <span class="k">return</span> <span class="n">mcp</span>

<span class="k">def</span> <span class="nf">add_list_dir_tool</span><span class="p">(</span><span class="n">mcp</span><span class="p">:</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="n">Path</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span>
                      <span class="n">name</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">list_dir</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">FastMCP</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">list_dir(path=</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="s">) 툴 등록.</span><span class="sh">"""</span>
    <span class="n">ROOT</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">root</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">rel</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">ROOT</span> <span class="o">/</span> <span class="n">rel</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
        <span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">ROOT</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">p</span>

    <span class="k">def</span> <span class="nf">list_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">List directory entries under ROOT.</span><span class="sh">"""</span>
        <span class="n">base</span> <span class="o">=</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[{</span>
            <span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="n">name</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">type</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">dir</span><span class="sh">"</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_dir</span><span class="p">()</span> <span class="k">else</span> <span class="sh">"</span><span class="s">file</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="n">p</span><span class="p">.</span><span class="nf">stat</span><span class="p">().</span><span class="n">st_size</span> <span class="k">if</span> <span class="n">p</span><span class="p">.</span><span class="nf">is_file</span><span class="p">()</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="p">}</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">base</span><span class="p">.</span><span class="nf">iterdir</span><span class="p">()]</span>

    <span class="n">list_dir</span><span class="p">.</span><span class="n">__name__</span> <span class="o">=</span> <span class="n">name</span>
    <span class="n">mcp</span><span class="p">.</span><span class="nf">tool</span><span class="p">(</span><span class="n">list_dir</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">mcp</span>
</code></pre></div></div>

<h3 id="2-사용-예--체이닝해서-등록">2) 사용 예 — 체이닝해서 등록</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main.py
</span><span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">Client</span>
<span class="kn">from</span> <span class="n">tools_adders</span> <span class="kn">import</span> <span class="n">add_read_text_tool</span><span class="p">,</span> <span class="n">add_list_dir_tool</span>

<span class="n">mcp</span> <span class="o">=</span> <span class="nc">FastMCP</span><span class="p">(</span><span class="sh">"</span><span class="s">My MCP</span><span class="sh">"</span><span class="p">)</span>
<span class="n">mcp</span> <span class="o">=</span> <span class="nf">add_read_text_tool</span><span class="p">(</span><span class="n">mcp</span><span class="p">,</span> <span class="n">root</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">read_text</span><span class="sh">"</span><span class="p">)</span>
<span class="n">mcp</span> <span class="o">=</span> <span class="nf">add_list_dir_tool</span><span class="p">(</span><span class="n">mcp</span><span class="p">,</span> <span class="n">root</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">list_dir</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 인메모리로 붙어서 동작 확인
</span><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">json</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">demo</span><span class="p">():</span>
    <span class="k">async</span> <span class="k">with</span> <span class="nc">Client</span><span class="p">(</span><span class="n">mcp</span><span class="p">)</span> <span class="k">as</span> <span class="n">client</span><span class="p">:</span>
        <span class="n">tools</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">list_tools</span><span class="p">()</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">== Registered tools ==</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">tools</span><span class="p">:</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="p">,</span> <span class="n">t</span><span class="p">.</span><span class="n">name</span><span class="p">)</span>

        <span class="c1"># 실제 호출
</span>        <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="sh">"</span><span class="s">list_dir</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">})</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">list_dir -&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>

        <span class="n">out</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">call_tool</span><span class="p">(</span><span class="sh">"</span><span class="s">read_text</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">README.md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">max_bytes</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200</span><span class="p">})</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">read_text -&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="p">(</span><span class="n">out</span><span class="p">[</span><span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">][:</span><span class="mi">80</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">out</span> <span class="k">else</span> <span class="n">out</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">demo</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="3-옵션-클래스-메서드도-같은-방식으로">3) (옵션) 클래스 메서드도 같은 방식으로</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">fastmcp</span> <span class="kn">import</span> <span class="n">FastMCP</span>

<span class="k">class</span> <span class="nc">Files</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">root</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">=</span> <span class="nc">Path</span><span class="p">(</span><span class="n">root</span><span class="p">).</span><span class="nf">resolve</span><span class="p">()</span>
    <span class="k">def</span> <span class="nf">_safe</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">rel</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Path</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">root</span> <span class="o">/</span> <span class="n">rel</span><span class="p">).</span><span class="nf">resolve</span><span class="p">();</span> <span class="n">p</span><span class="p">.</span><span class="nf">relative_to</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">root</span><span class="p">);</span> <span class="k">return</span> <span class="n">p</span>
    <span class="k">def</span> <span class="nf">read_text</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">max_bytes</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="n">fp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_safe</span><span class="p">(</span><span class="n">path</span><span class="p">);</span> <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">path</span><span class="sh">"</span><span class="p">:</span> <span class="nf">str</span><span class="p">(</span><span class="n">fp</span><span class="p">),</span> <span class="sh">"</span><span class="s">text</span><span class="sh">"</span><span class="p">:</span> <span class="n">fp</span><span class="p">.</span><span class="nf">read_text</span><span class="p">()[:</span><span class="n">max_bytes</span><span class="p">]}</span>

<span class="k">def</span> <span class="nf">add_files_tools</span><span class="p">(</span><span class="n">mcp</span><span class="p">:</span> <span class="n">FastMCP</span><span class="p">,</span> <span class="n">fs</span><span class="p">:</span> <span class="n">Files</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">FastMCP</span><span class="p">:</span>
    <span class="n">mcp</span><span class="p">.</span><span class="nf">tool</span><span class="p">(</span><span class="n">fs</span><span class="p">.</span><span class="n">read_text</span><span class="p">)</span>   <span class="c1"># 바운드 메서드 등록 권장(데코레이터를 메서드에 직접 붙이지 말 것)
</span>    <span class="k">return</span> <span class="n">mcp</span>
</code></pre></div></div>

<hr />

<h2 id="한-걸음-더-툴을-llm에-넘길-때">한 걸음 더 (툴을 LLM에 넘길 때)</h2>

<p>위처럼 등록된 툴 스키마는 <code class="language-plaintext highlighter-rouge">Client(mcp).list_tools()</code>로 얻어서 <strong>OpenAI tools 포맷</strong> 으로 변환해 <code class="language-plaintext highlighter-rouge">AsyncOpenAI(...).chat.completions.create(..., tools=...)</code>에 넣으면 됩니다(이미 쓰시던 while 루프 그대로). 핵심 단계:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">async with Client(mcp) as client:</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">tools = await client.list_tools()</code></p>
  </li>
  <li>
    <p>각 <code class="language-plaintext highlighter-rouge">t</code>에 대해 <code class="language-plaintext highlighter-rouge">{"type":"function","function":{"name": t.name, "parameters": t.inputSchema}}</code>로 변환</p>
  </li>
  <li>
    <p>LLM 호출 → <code class="language-plaintext highlighter-rouge">tool_calls</code> 오면 <code class="language-plaintext highlighter-rouge">client.call_tool(tname, args)</code> 실행 → 결과를 tool 메시지로 재주입 → 반복</p>
  </li>
</ol>

<hr />

<h3 id="정리-1">정리</h3>

<ul>
  <li>
    <p>네, 질문하신 <strong>“add</strong> 함수로 FastMCP 인스턴스에 툴을 주입하고 그대로 반환”_* 패턴이 깔끔하게 동작합니다.</p>
  </li>
  <li>
    <p>이 방식은 <strong>컴포저블</strong>(여러 add_* 조합), <strong>테스트 용이</strong> , <strong>프로세스 추가 無</strong>(인메모리)라는 장점이 있어 운영에 딱 좋아요.</p>
  </li>
</ul>]]></content><author><name>hvppyarchive</name></author><category term="llm" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">아날로그 회로 최적화 데모</title><link href="https://hvppyarchive.github.io/circuit/circuit-optimization-example/" rel="alternate" type="text/html" title="아날로그 회로 최적화 데모" /><published>2025-10-17T15:03:52+09:00</published><updated>2025-10-17T15:03:52+09:00</updated><id>https://hvppyarchive.github.io/circuit/circuit-optimization-example</id><content type="html" xml:base="https://hvppyarchive.github.io/circuit/circuit-optimization-example/"><![CDATA[<p class="chat--user">

Analog 회로 최적화를 소개하는 간단한 데모 예시를 만들고 싶어. 

</p>

<p class="chat--user">

Analog 회로 최적화를 소개하는 간단한 데모 예시를 만들고 싶어. 

</p>

<p>좋아! “아날로그 회로 최적화”를 아주 가볍고 직관적으로 보여줄 수 있는 데모를 바로 만들어봤어. 주제는 <strong>RC 저역통과 필터의 R, C를 자동으로 골라 목표 차단주파수(fc)를 맞추는 최적화</strong> 야. 아래를 따라가면 끝.</p>

<h1 id="데모-개요-step-by-step">데모 개요 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>문제 설정</strong> : 목표 fc(예: 1 kHz)를 만족하도록 R·C를 고른다.</p>
  </li>
  <li>
    <p><strong>목적함수</strong> :</p>

    <ul>
      <li>
        <p>fc 오차(로그 스케일) + (R가 너무 큰 경우 페널티) + (C가 너무 큰 경우 페널티).</p>
      </li>
      <li>
        <p>R이 너무 크면 열잡음/구동성 이슈, C가 너무 크면 비용/면적 이슈가 증가한다는 감을 주려는 장치.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>설계 변수</strong> : 표준 E-series(저항 E24, 커패시터 E12) 후보 안에서 전수 탐색(간단·빠름).</p>
  </li>
  <li>
    <p><strong>강건성 확인</strong> : R±5%, C±10% 공차에서 <strong>fc 수율(±5% 스펙)</strong>을 몬테카를로로 추정.</p>
  </li>
  <li>
    <p><strong>시각화</strong> : 보드 플롯과 fc 분포 히스토그램으로 결과 확인.</p>
  </li>
</ol>

<p>위의 코드 셀을 바로 실행해서 결과/그래프까지 확인할 수 있게 했어. 기본 파라미터는 <strong>fc=1 kHz</strong> , <strong>R 1k~1MΩ</strong> , <strong>C 100 pF~1 µF</strong> 로 잡았고, 실행 결과 예시는 대략 아래와 같아:</p>

<ul>
  <li>
    <p>선택된 R ≈ <strong>1.6 kΩ</strong> , C ≈ <strong>0.1 µF</strong> → fc ≈ <strong>995 Hz</strong> (오차 <strong>-0.53%</strong>)</p>
  </li>
  <li>
    <p>공차 포함 <strong>수율 ≈ 50.5%</strong> (스펙: ±5%)</p>
  </li>
</ul>

<h1 id="어떻게-활용확장하면-좋을까">어떻게 활용/확장하면 좋을까?</h1>

<ul>
  <li>
    <p><strong>목표 바꾸기</strong> : 코드 맨 위 <code class="language-plaintext highlighter-rouge">target_fc_hz</code>만 바꾸면 끝(예: 2 kHz, 10 kHz 등).</p>
  </li>
  <li>
    <p><strong>설계 철학 바꾸기</strong> : <code class="language-plaintext highlighter-rouge">alpha, beta, gamma</code> 가중치를 조절해서</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">beta</code>↑ → R 줄이도록 유도(열잡음, 구동 여유 강조),</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">gamma</code>↑ → C 줄이도록 유도(비용/면적 강조).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>사양/공차 바꾸기</strong> : <code class="language-plaintext highlighter-rouge">tol_R</code>, <code class="language-plaintext highlighter-rouge">tol_C</code>, <code class="language-plaintext highlighter-rouge">spec_fc_rel</code>을 조정해 수율 민감도 확인.</p>
  </li>
  <li>
    <p><strong>제약 추가</strong> : 소스/부하 임피던스, 허용 전류/전압, 커패시터 종류(세라/탄탈/전해)별 최대값 등 현실 제약을 반영해 필터링 가능.</p>
  </li>
  <li>
    <p><strong>다음 단계</strong> :</p>

    <ul>
      <li>
        <p>2차(다양한 토폴로지)로 확장하고 Q, 위상 여유 등 포함.</p>
      </li>
      <li>
        <p>간단한 <strong>SPICE 연동</strong>(예: ngspice .meas)으로 측정값 기반 최적화로 전환.</p>
      </li>
      <li>
        <p><strong>강건 최적화</strong> : 수율을 목적함수에 직접 포함(예: <code class="language-plaintext highlighter-rouge">-yield</code> 최대화 또는 페널티화).</p>
      </li>
    </ul>
  </li>
</ul>

<p>필요하면 이 데모를 <strong>op-amp 이득 단계 최적화</strong>(목표 이득/대역/슬루율 제약)나 <strong>전압 분배기 최소 전력 + 목표 오차</strong> 같은 더 짧은 예제로 바꿔 줄 수도 있어. 원하는 회로/사양을 말해주면, 위 템플릿 그대로 맞춰서 돌려볼게!</p>

<p class="chat--user">

응 전압 분배기로 해줘 그리고 finesim을 쓸 수 있단 가정하에 시뮬레이션을 돌릴거라서 저런 코드는 필요없어 대신에 1. finesim netlist 2. 최적화할 변수(parameter) 3. 측정 대상(measure) 를 확실히 해줬으면 좋겠어

</p>

<p>좋아—<strong>전압 분배기(Voltage Divider)</strong>를 예제로, FineSim(HSPICE 호환)으로 곧장 돌릴 수 있게 아래 3가지를 딱 정리했어.</p>

<hr />

<h1 id="1-finesim-netlist-복사-붙여넣기-실행용">1) FineSim Netlist (복사-붙여넣기 실행용)</h1>

<p>아래 deck은 <strong>소스 직렬 임피던스(RS)</strong> , <strong>분배기(R1, R2)</strong> , <strong>부하(RL)</strong>까지 포함한 현실적인 전압 분배기이며,</p>

<ul>
  <li>
    <p>(A) OP에서 정밀도/소모 전류/전력 측정,</p>
  </li>
  <li>
    <p>(B) 소스 전압 변화에 대한 <strong>Line Regulation</strong> ,</p>
  </li>
  <li>
    <p>(C) 부하 변화에 대한 <strong>Load Regulation</strong><br />
을 각각 측정하도록 분리해 두었어. 각 블록은 <strong>필요한 것만 남기고 나머지는 주석 처리</strong> 하고 돌리면 돼.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

*------------------------------------------------------------
* Voltage Divider Optimization Demo (FineSim/HSPICE compatible)
*------------------------------------------------------------
.option post=2 measform=1
*.option nomod         * (필요시) 모델 최소 출력

* ----- Parameters (최적화 변수 및 스펙) -----
.param VSUP      = 3.3        * 공급 전압 [V]
.param V_SPEC    = 1.0        * 목표 출력 전압 [V]
.param RS        = 50         * 소스 직렬 저항 [Ohm]  (예: 신호원/레귤레이터 출력 임피던스)
.param RL        = 100k       * 부하 [Ohm]

* === 최적화 대상 변수(안) A: R1, R2 직접 최적화 ===
.param R1        = 10k
.param R2        = 22k

* === 최적화 대상 변수(안) B: 총저항 RT와 비율 K를 최적화 (R1,R2 파생) ===
* .param RT     = 100k        * R1+R2 (전력/노이즈/면적 트레이드오프)
* .param K      = 0.25        * 이상적 비율 = Vout/Vin (0&lt;K&lt;1)
* .param R1     = 'RT*(1-K)'
* .param R2     = 'RT*K'

* ----- Circuit -----
V1   VIN_SRC  0  DC 'VSUP'
RSRC VIN_SRC  VIN 'RS'
RUP  VIN      VOUT 'R1'
RDN  VOUT     0   'R2'
RLOAD VOUT    0   'RL'

* ============================================================
* (A) OP 기반 측정: 정확도/소스 전류/전력
* ============================================================
.op

* 출력/오차
.measure DC  VOUT      param='v(VOUT)'
.measure DC  VERR      param='v(VOUT)-V_SPEC'
.measure DC  VERR_ABS  param='abs(v(VOUT)-V_SPEC)'
.measure DC  RATIO     param='v(VOUT)/VSUP'      * 이상적으론 ~ R2/(R1+R2)

* 소스 전류/전력 (SPICE 부호 관례: I(V1) &gt;0이면 소스에 유입)
.measure DC  IIN       param='-I(V1)'            * 소스가 공급하는 전류 [A]
.measure DC  PIN       param='(-I(V1))*VSUP'     * 총 소비 전력 [W]

* 부품 전류(참고)
.measure DC  I_R1      param='(v(VIN)-v(VOUT))/R1'
.measure DC  I_R2      param='v(VOUT)/R2'
.measure DC  I_RL      param='v(VOUT)/RL'

* ============================================================
* (B) Line Regulation: Vin 변화에 대한 Vout 민감도
*    - 필요시만 사용: 이 블록만 남기고 (A),(C)는 주석 처리
* ============================================================
*.dc V1 3.0 3.6 0.3
*.measure DC  VOUT_MIN  FIND v(VOUT) AT=3.0
*.measure DC  VOUT_MAX  FIND v(VOUT) AT=3.6
*.measure DC  LINE_REG  param='(VOUT_MAX - VOUT_MIN)/(3.6 - 3.0)'
*  단위: V/V  (원하면 %/V로 보고 싶으면 100*... 사용)

* ============================================================
* (C) Load Regulation: RL 변화(부하 전류 증가)에 따른 Vout 민감도
*    - 필요시만 사용: 이 블록만 남기고 (A),(B)는 주석 처리
*    - FineSim/HSPICE: .dc param &lt;name&gt; &lt;start&gt; &lt;stop&gt; &lt;step&gt;
* ============================================================
*.dc param RL 20k 1Meg 20k
*.measure DC  VOUT_LIGHT  FIND v(VOUT) AT=1e6
*.measure DC  VOUT_HEAVY  FIND v(VOUT) AT=20e3
*.measure DC  LOAD_REG    param='(VOUT_LIGHT - VOUT_HEAVY)/VOUT_LIGHT'
*  단위: 상대 변화(무차원). 필요시 V/decade 등으로 재정의 가능.

.end
</code></pre></div></div>

<blockquote>
  <p>실행 팁: (A),(B),(C)를 <strong>동시에 돌리면 분석이 겹치므로</strong> , 필요한 블록만 남기고 나머지는 <code class="language-plaintext highlighter-rouge">*</code>로 주석 처리해서 실행해줘.<br />
 측정 결과는 FineSim/HSPICE의 <code class="language-plaintext highlighter-rouge">.measure</code> 결과 파일(예: <code class="language-plaintext highlighter-rouge">.mt#</code>)로 나와.</p>
</blockquote>

<hr />

<h1 id="2-최적화할-변수-parameter">2) 최적화할 변수 (Parameter)</h1>

<p>두 가지 접근 중 <strong>원하는 방식 하나</strong> 를 택해:</p>

<h3 id="a-r1-r2-직접-최적화">A. R1, R2 직접 최적화</h3>

<ul>
  <li>
    <p><strong>설계변수</strong> : <code class="language-plaintext highlighter-rouge">R1</code>, <code class="language-plaintext highlighter-rouge">R2</code></p>
  </li>
  <li>
    <p><strong>권장 범위</strong> (예시):</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">1 kΩ ≤ R1, R2 ≤ 1 MΩ</code></p>
      </li>
      <li>
        <p>총저항 <code class="language-plaintext highlighter-rouge">R1+R2</code>에 추가 제약: <code class="language-plaintext highlighter-rouge">20 kΩ ≤ R1+R2 ≤ 2 MΩ</code></p>

        <ul>
          <li>(너무 작으면 전력 증가/소스 부하 과중, 너무 크면 노이즈/오프셋 민감성 증가)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>E-series 제약</strong> 이 필요하면, 외부 스크립트에서 <strong>라운딩(E24/E96)</strong> 후 재측정 루프를 돌리면 좋아.</p>
  </li>
</ul>

<h3 id="b-파생-변수로-단순화-추천">B. 파생 변수로 단순화 (추천)</h3>

<ul>
  <li>
    <p><strong>설계변수</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">RT = R1+R2</code> (전력/노이즈/면적을 좌우)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">K = R2/(R1+R2) ≈ Vout/Vin</code> (목표 분배 비율)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>파생관계</strong> :</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">R1 = RT*(1-K)</code>, <code class="language-plaintext highlighter-rouge">R2 = RT*K</code></li>
    </ul>
  </li>
  <li>
    <p><strong>권장 범위(예시)</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">10 kΩ ≤ RT ≤ 1 MΩ</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">0.1 ≤ K ≤ 0.9</code> (양 끝단은 민감도↑라 너무 치우치지 않게)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="3-측정-대상-measure">3) 측정 대상 (Measure)</h1>

<p>최적화의 <strong>목표/제약</strong> 으로 바로 쓸 수 있게 이름을 정리했어.<br />
(모두 netlist의 <code class="language-plaintext highlighter-rouge">.measure</code>로 이미 정의되어 있음)</p>

<p><strong>정확도 관련</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">VOUT</code> : 출력 전압</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">VERR_ABS</code> : <code class="language-plaintext highlighter-rouge">|VOUT - V_SPEC|</code> → <strong>최소화</strong> (예: ≤ 10 mV)</p>
  </li>
</ul>

<p><strong>전력/전류 관련</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">IIN</code> : 소스가 공급하는 전류 → <strong>최소화</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">PIN</code> : 총 소비 전력 → <strong>최소화</strong></p>
  </li>
</ul>

<p><strong>레귤레이션(선택 측정)</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">LINE_REG</code> : <code class="language-plaintext highlighter-rouge">ΔVout/ΔVin</code> → <strong>절대값 최소화</strong> (라인 변동 민감도)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">LOAD_REG</code> : <code class="language-plaintext highlighter-rouge">(Vout_light−Vout_heavy)/Vout_light</code> → <strong>절대값 최소화</strong> (부하 변동 민감도)</p>
  </li>
</ul>

<hr />

<h2 id="권장-최적화-포맷예시">권장 최적화 포맷(예시)</h2>

<ul>
  <li><strong>목표</strong> :</li>
</ul>

<table>
  <tbody>
    <tr>
      <td>min⁡   w1⋅VERR_ABS + w2⋅PIN + w3⋅∣LINE_REG∣ + w4⋅∣LOAD_REG∣\min \ \ \ w_1 \cdot \text{VERR\_ABS} \ +\ w_2 \cdot \text{PIN} \ +\ w_3 \cdot</td>
      <td>\text{LINE\_REG}</td>
      <td>\ +\ w_4 \cdot</td>
      <td>\text{LOAD\_REG}</td>
      <td>min   w1​⋅VERR_ABS + w2​⋅PIN + w3​⋅∣LINE_REG∣ + w4​⋅∣LOAD_REG∣</td>
    </tr>
  </tbody>
</table>

<p>(가중치 wiw_iwi​는 프로젝트 우선순위에 맞춰 선택. 처음엔 w1w_1w1​을 크게 두고, 성공 후 w2w_2w2​↑로 전력 줄이는 2단계 접근 권장.)</p>

<ul>
  <li>
    <p><strong>제약(예시)</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">VERR_ABS ≤ 0.01</code> V (±10 mV 스펙)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">IIN ≤ 100 μA</code> (저전력 요구 시)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">RS</code>와 <code class="language-plaintext highlighter-rouge">RL</code>은 시스템에서 주어진 값(혹은 워스트케이스)으로 고정</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="실전-팁">실전 팁</h2>

<ul>
  <li>
    <p>실제 시스템의 <code class="language-plaintext highlighter-rouge">RS</code>(소스 임피던스), <code class="language-plaintext highlighter-rouge">RL</code>(부하)을 <strong>워스트 케이스</strong> 로 넣고 최적화하면, 이식성이 좋음.</p>
  </li>
  <li>
    <p>공차(±1~5%)를 고려하려면, <code class="language-plaintext highlighter-rouge">.alter</code>로 R1/R2에 스케일 파라미터(<code class="language-plaintext highlighter-rouge">S1</code>,<code class="language-plaintext highlighter-rouge">S2</code>)를 둬서 0.95/1.00/1.05 케이스를 <strong>배치 측정</strong> 하고, 최적화 목표에 “최악의 <code class="language-plaintext highlighter-rouge">VERR_ABS</code>”를 포함시키면 간단한 강건 최적화가 됨.</p>
  </li>
</ul>

<p>원하는 목표 전압/전력 한계나 레귤레이션 한계치가 있다면 알려줘. 그 값들로 <code class="language-plaintext highlighter-rouge">V_SPEC</code>, 제약/가중치 추천 세트까지 바로 맞춰서 덱을 더 다듬어줄게.</p>

<p class="chat--user">

이 상황에서 R1, R2 변수의 유형과 범위를 정해줘. 현실의 제약 사항을 고려해서 Continuous, Incremental, Discrete 변수 중 뭐로 할지, 범위와 Step(있다면)을 정해주면 좋을 것 같다

</p>

<p>좋아—“전압 분배기 + FineSim” 상황에서 <strong>R1, R2 변수의 유형/범위/스텝</strong> 을 현실 제약(부하 RL=100 kΩ, Vin=3.3 V, Vout=1.0 V 목표)까지 고려해 <strong>바로 쓸 수 있는 3가지 프로파일</strong> 로 정리했어. (생산 관점 → 시뮬/최적화 편의 순으로)</p>

<hr />

<h1 id="권장-1-discrete-e-series-생산-지향-">권장 1) Discrete (E-series, 생산 지향) ✅</h1>

<p><strong>왜 Discrete?</strong> 실제 부품은 E-series(공차 1%면 E96 등)로만 존재. 최적화 결과가 곧바로 BOM으로 이어짐.</p>

<ul>
  <li>
    <p>분배 비율 K=Vout/Vin≈1/3.3≈0.303K = V_\text{out}/V_\text{in} \approx 1/3.3 \approx 0.303K=Vout​/Vin​≈1/3.3≈0.303</p>
  </li>
  <li>
    <p>이상적 관계: R1=R2⋅1−KK≈2.30 R2R_1 = R_2\cdot\frac{1-K}{K} \approx 2.30\,R_2R1​=R2​⋅K1−K​≈2.30R2​</p>
  </li>
</ul>

<h3 id="정확도-우선버퍼-없음-rl100-kω-로딩오차-1-목표">정확도 우선(버퍼 없음, RL=100 kΩ 로딩오차 ≤≈1% 목표)</h3>

<ul>
  <li>
    <p><strong>핵심 규칙</strong> : 로딩오차를 1%대 유지하려면 <strong>R 2≲RL/100≈1.0 kΩR_2 \lesssim RL/100 \approx 1.0\text{ kΩ}R2​≲RL/100≈1.0 kΩ</strong></p>
  </li>
  <li>
    <p><strong>스펙</strong></p>

    <ul>
      <li>
        <p><strong>R2 (Discrete, E96 1%)</strong> : <strong>680 Ω ~ 1.2 kΩ</strong></p>
      </li>
      <li>
        <p><strong>R1 (Discrete, E96 1%)</strong> : R1≈2.30R2R_1 \approx 2.30 R_2R1​≈2.30R2​ → <strong>1.6 kΩ ~ 3.0 kΩ</strong></p>
      </li>
      <li>
        <p><strong>총저항 RT=R1+R2R_T=R_1+R_2RT​=R1​+R2​</strong>: <strong>≈ 2.3 kΩ ~ 4.2 kΩ</strong> (분배 전류 0.8~1.4 mA @3.3 V)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>스텝</strong> : <strong>E96 표준치</strong>(해당 데케이드의 E96 값만 허용).</p>

    <ul>
      <li>FineSim에선 최적화 루프가 Discrete를 못 다루면 <strong>허용 리스트</strong> 를 외부에서 공급(.step list)하거나 스크립트로 enumerate.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>예) R2 후보: {681, 715, 750, 787, 825, 866, 909, 953, 1000, 1050, 1100, 1150} Ω<br />
 각 R2에 대해 R1을 2.30R22.30 R_22.30R2​ 근처의 <strong>E96</strong> 값으로 스냅(예: 2.00k, 2.05k, 2.10k, 2.21k…).</p>
</blockquote>

<hr />

<h1 id="옵션-2-discrete균형형-전류정확도-타협">옵션 2) Discrete(균형형, 전류/정확도 타협)</h1>

<p><strong>로딩오차 2~6% 정도 허용</strong> 하고 전류를 줄이고 싶을 때.</p>

<ul>
  <li>
    <p><strong>R2 (E96 1%)</strong> : <strong>1.5 kΩ ~ 10 kΩ</strong></p>
  </li>
  <li>
    <p><strong>R1 (E96 1%)</strong> : <strong>≈ 3.5kΩ 23kΩ \approx 3.5 kΩ ~ 23 kΩ≈3.5kΩ 23kΩ</strong></p>
  </li>
  <li>
    <p><strong>R TR_TRT​</strong>: <strong>5 kΩ ~ 33 kΩ</strong> (분배 전류 ≈ 100~660 μA)</p>
  </li>
  <li>
    <p><strong>스텝</strong> : <strong>E96</strong></p>
  </li>
  <li>
    <p>주의: RL=100 kΩ와 병렬 효과로 목표치 대비 <strong>수 % 낮게</strong> 나오므로,</p>

    <ul>
      <li>
        <p>목표를 미리 약간 <strong>상향 보정</strong> 해서 설계하거나,</p>
      </li>
      <li>
        <p>후단에 <strong>버퍼(옵앰프 팔로어)</strong>를 추가하면 오차 크게 개선됨.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="옵션-3-incremental로그-스텝-탐색최적화-편의">옵션 3) Incremental(로그 스텝, 탐색/최적화 편의)</h1>

<p>최적화기가 <strong>연속→스냅</strong> 이 번거롭거나, Discrete 리스트가 너무 커질 때 유용.</p>

<ul>
  <li>
    <p><strong>아이디어</strong> : 로그 스케일 <strong>2% 스텝</strong>(≈E48)로 그리드 탐색 → <strong>최종에 E96 스냅</strong></p>
  </li>
  <li>
    <p><strong>R2 (Incremental)</strong> : <strong>680 Ω ~ 10 kΩ, 스텝 ×1.02</strong></p>

    <ul>
      <li>시퀀스: 680 → 694 → 708 → … → 10 kΩ</li>
    </ul>
  </li>
  <li>
    <p><strong>R1 (Incremental)</strong> : 범위를 R1≈2.30R2R_1 \approx 2.30 R_2R1​≈2.30R2​ 주변으로 잡되 넉넉히</p>

    <ul>
      <li><strong>1.5 kΩ ~ 30 kΩ, 스텝 ×1.02</strong></li>
    </ul>
  </li>
  <li>
    <p><strong>최종 생산치 반영</strong> : 최적점 근방을 <strong>E96 근사치</strong> 로 스냅하고 다시 측정(.measure 확인).</p>
  </li>
</ul>

<hr />

<h2 id="언제-continuous">언제 Continuous?</h2>

<ul>
  <li>
    <p><strong>초기 감도 스캔</strong> 용도로만 추천. 현실 부품 스냅이 따로 필요해 번거로움.</p>
  </li>
  <li>
    <p>만약 쓴다면:</p>

    <ul>
      <li>
        <p><strong>R2 (Continuous)</strong> : <strong>500 Ω ~ 33 kΩ</strong></p>
      </li>
      <li>
        <p><strong>R1 (Continuous)</strong> : <strong>1.2 kΩ ~ 75 kΩ</strong></p>
      </li>
      <li>
        <p>단, RL=100 kΩ이면 <strong>정확도 요구가 높을수록 R2 상한을 1 kΩ 부근으로 강하게 제한</strong> 해야 함(로딩오차 때문).</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="안전성-체크간단-산출">안전성 체크(간단 산출)</h2>

<ul>
  <li>
    <p><strong>전력/전압</strong> : Vin=3.6 V worst 가정, RT≥2.3 kΩR_T \ge 2.3\text{ kΩ}RT​≥2.3 kΩ일 때</p>

    <ul>
      <li>
        <p>분배 전류 ≤ 1.6 mA,</p>
      </li>
      <li>
        <p>PR1=I2R1≲P_{R1}=I^2R_1 \lesssimPR1​=I2R1​≲ 수 mW 수준 → <strong>0603 1/10W</strong> 여유 충분.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>노이즈</strong> : 4kTRT\sqrt{4kTR_T}4kTRT​​ → RT가 작을수록 유리(정확도 우선 프로파일과 정합).</p>
  </li>
</ul>

<hr />

<h2 id="한-줄-추천지금-상황-기준">한 줄 추천(지금 상황 기준)</h2>

<ul>
  <li>
    <p><strong>R1, R2는 “Discrete(E96, 1%)”로 운용</strong></p>
  </li>
  <li>
    <p><strong>R2: 680 Ω ~ 1.2 kΩ (E96), R1: 1.6 kΩ ~ 3.0 kΩ (E96)</strong></p>
  </li>
  <li>
    <p>최적화 후 결과를 <strong>E96 스냅 → .measure 재확인</strong>(Vout, 전류, 레귤레이션).</p>
  </li>
</ul>

<p>원하면 위 범위를 <strong>.step list</strong> 형태(예: E96 후보 20~40개)로 바로 붙여 쓰는 스니펫도 만들어줄게.</p>

<p class="chat--user">

.op 시뮬레이션 말고 .dc 를 사용하도록 해줄 수 있어?

</p>

<p>좋지! <strong>.op 대신 .dc만 사용</strong> 하도록 덱을 정리했어. 아래 3가지만 그대로 쓰면 돼.</p>

<hr />

<h1 id="1-finesim-netlist-dc-전용">1) FineSim Netlist (.dc 전용)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

*------------------------------------------------------------
* Voltage Divider Optimization Demo (FineSim/HSPICE compatible)
*   - 모든 해석은 .dc 기반
*------------------------------------------------------------
.option post=2 measform=1

* ===== 파라미터(최적화 변수/환경) =====
.param VSUP   = 3.3          * 공급전압 [V]
.param V_SPEC = 1.0          * 목표 출력 [V]
.param RS     = 50           * 소스 직렬저항 [Ohm]
.param RL     = 100k         * 부하 [Ohm]

* === 최적화 변수 (안 A: R1, R2 직접) ===
.param R1     = 1.80k        * 초기값(옵티마이저가 업데이트)
.param R2     = 820          * 초기값(옵티마이저가 업데이트)

* === 최적화 변수 (안 B: RT, K 사용) ===
* .param RT   = 3.0k         * R1+R2
* .param K    = 0.303        * R2/(R1+R2) ≈ Vout/Vin
* .param R1   = 'RT*(1-K)'
* .param R2   = 'RT*K'

* ===== 회로 =====
V1    VIN_SRC  0  DC 'VSUP'
RSRC  VIN_SRC  VIN  'RS'
RUP   VIN      VOUT 'R1'
RDN   VOUT     0    'R2'
RLOAD VOUT     0    'RL'

* ============================================================
* (A) Bias 점에서의 측정: .dc(더미 파라미터)로 단일점 해석
*   - .op을 쓰지 않고 .dc만으로 VOUT, 오차, 전류/전력 측정
* ============================================================
.dc param BIAS 0 0 1
.measure DC  VOUT_A      param='v(VOUT)'
.measure DC  VERR_A      param='v(VOUT)-V_SPEC'
.measure DC  VERR_ABS_A  param='abs(v(VOUT)-V_SPEC)'
.measure DC  IIN_A       param='-I(V1)'              * 소스 공급전류(+)
.measure DC  PIN_A       param='(-I(V1))*VSUP'       * 전체소비전력
.measure DC  RATIO_A     param='v(VOUT)/VSUP'
.measure DC  I_R1_A      param='(v(VIN)-v(VOUT))/R1'
.measure DC  I_R2_A      param='v(VOUT)/R2'
.measure DC  I_RL_A      param='v(VOUT)/RL'

* ============================================================
* (B) Line Regulation: Vin 변화에 대한 Vout 민감도 (.dc V1)
*   - 필요할 때만 사용: (A),(C)는 주석 처리하고 이 블록만 실행 권장
* ============================================================
*.dc V1 3.0 3.6 0.3
*.measure DC  VOUT_MIN_B  min v(VOUT)
*.measure DC  VOUT_MAX_B  max v(VOUT)
*.measure DC  LINE_REG_B  param='(VOUT_MAX_B - VOUT_MIN_B)/(3.6 - 3.0)'
*  단위: V/V  (원하면 %/V → 100*... )

* ============================================================
* (C) Load Regulation: RL 변화에 대한 Vout 민감도 (.dc param RL)
*   - 필요할 때만 사용: (A),(B)는 주석 처리하고 이 블록만 실행 권장
* ============================================================
*.dc param RL 20k 1Meg 20k
*.measure DC  VOUT_MIN_C  min v(VOUT)
*.measure DC  VOUT_MAX_C  max v(VOUT)
*.measure DC  LOAD_REG_C  param='(VOUT_MAX_C - VOUT_MIN_C)/VOUT_MAX_C'
*  상대 변화(무차원). 다른 정의가 필요하면 변경 OK

.end
</code></pre></div></div>

<blockquote>
  <p>사용 팁</p>

  <ul>
    <li>
      <p><strong>동시에 여러 .dc를 켜면</strong> 해석/측정이 섞일 수 있으니, (A)/(B)/(C) 중 <strong>필요한 블록만 남기고</strong> 나머지는 주석 처리해서 돌려줘.</p>
    </li>
    <li>
      <p>(A)는 <strong>단일 바이어스점</strong> 을 .dc로 강제 실행하는 방식이므로, <code class="language-plaintext highlighter-rouge">.op</code> 없이도 동일한 측정값을 얻는다.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="2-최적화할-변수-parameter-1">2) 최적화할 변수 (Parameter)</h1>

<p>현실 부품 제약을 반영해 <strong>Discrete(E96, 1%)</strong>로 운용 권장.<br />
(부하 RL=100 kΩRL=100\,\text{k}\OmegaRL=100kΩ, 목표 Vout=1.0 VV_\text{out}=1.0\,\text{V}Vout​=1.0V, Vin=3.3 VV_\text{in}=3.3\,\text{V}Vin​=3.3V)</p>

<ul>
  <li>
    <p><strong>R2 (E96, Discrete)</strong> : <strong>680 Ω ~ 1.2 kΩ</strong></p>
  </li>
  <li>
    <p><strong>R1 (E96, Discrete)</strong> : <strong>1.6 kΩ ~ 3.0 kΩ</strong> ≈2.3×R2\approx 2.3 \times R2≈2.3×R2</p>
  </li>
  <li>
    <p>전류/정확도 타협을 원하면:</p>

    <ul>
      <li><strong>R2: 1.5 kΩ ~ 10 kΩ</strong> , <strong>R1: 3.5 kΩ ~ 23 kΩ</strong> (정확도는 몇 % 낮아질 수 있음)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>최적화기는 외부에서 후보를 순회(예: E96 리스트)하며 R1/R2를 갱신 → (A) 블록을 실행 → <code class="language-plaintext highlighter-rouge">.measure</code> 결과를 스코어로 사용.</p>
</blockquote>

<hr />

<h1 id="3-측정-대상-measure-1">3) 측정 대상 (Measure)</h1>

<p><strong>목표/제약</strong> 으로 바로 쓸 수 있게 이름을 고정해두었어.</p>

<ul>
  <li>
    <p>정확도: <code class="language-plaintext highlighter-rouge">VERR_ABS_A = |VOUT - V_SPEC|</code> → <strong>최소화</strong> (또는 <code class="language-plaintext highlighter-rouge">≤ 스펙</code>)</p>
  </li>
  <li>
    <p>전류/전력: <code class="language-plaintext highlighter-rouge">IIN_A</code>, <code class="language-plaintext highlighter-rouge">PIN_A</code> → <strong>최소화</strong></p>
  </li>
  <li>
    <p>비율 확인: <code class="language-plaintext highlighter-rouge">RATIO_A = VOUT/VSUP</code></p>
  </li>
  <li>
    <p>레귤레이션:</p>

    <ul>
      <li>
        <p><strong>라인</strong> : <code class="language-plaintext highlighter-rouge">LINE_REG_B</code> (작을수록 좋음)</p>
      </li>
      <li>
        <p><strong>부하</strong> : <code class="language-plaintext highlighter-rouge">LOAD_REG_C</code> (작을수록 좋음)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="간단-워크플로-step-by-step">간단 워크플로 (step-by-step)</h2>

<ol>
  <li>
    <p>(A) 블록만 켜서 <strong>후보 R1/R2</strong> 에 대해 <code class="language-plaintext highlighter-rouge">.dc</code> 실행 → <code class="language-plaintext highlighter-rouge">VERR_ABS_A</code>, <code class="language-plaintext highlighter-rouge">IIN_A</code>, <code class="language-plaintext highlighter-rouge">PIN_A</code> 수집.</p>
  </li>
  <li>
    <p>상위 최적화기(파이썬/툴)에서 <strong>Discrete 후보(E96)</strong>를 탐색하며 목적함수 최소화.</p>
  </li>
  <li>
    <p>최종 후보에 대해 (B),(C) 블록을 각각 켜서 <strong>라인/부하 레귤레이션</strong> 검증.</p>
  </li>
  <li>
    <p>필요 시 범위/목표 조정 → 반복.</p>
  </li>
</ol>

<p>추가로, E96 후보 리스트를 바로 쓸 수 있게 <code class="language-plaintext highlighter-rouge">.include</code> 또는 외부 스크립트용 <strong>리스트 텍스트</strong> 가 필요하면 알려줘. 원하는 범위로 만들어 줄게.</p>

<p class="chat--user">

그냥 tran 해석으로 바꿔줄 수 있어?

</p>

<p>좋아, <strong>.tran(과도 해석)만 쓰는 전압 분배기 데모</strong> 로 바꿔서 정리했어.<br />
아래 덱은 <strong>바이패스 커패시터(CLOAD)</strong>를 둬서 유의미한 과도 응답이 나오도록 했고, <strong>정착 오차/라이즈 타임/전류·에너지</strong> 같은 측정을 <code class="language-plaintext highlighter-rouge">.measure tran</code>으로 정의했어. (부하 스텝을 주는 <strong>옵션 블록</strong> 도 포함)</p>

<hr />

<h1 id="1-finesim-netlist--tran-전용-복붙-실행">1) FineSim Netlist — .tran 전용 (복붙 실행)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

*------------------------------------------------------------
* Voltage Divider Transient Demo (FineSim/HSPICE compatible)
*   - 모든 해석은 .tran(과도) 기반
*------------------------------------------------------------
.option post=2 measform=1

* ===== 파라미터 =====
.param VSUP   = 3.3          * 공급전압 [V]
.param V_SPEC = 1.0          * 목표 출력 [V]
.param RS     = 50           * 소스 직렬저항 [Ohm]
.param RL     = 100k         * 부하 [Ohm]
.param R1     = 1.80k        * 최적화 변수 (Discrete/E96 권장)
.param R2     = 820          * 최적화 변수 (Discrete/E96 권장)
.param CLOAD  = 100n         * 출력 노드 바이패스(과도 응답 유도)
.param TRISE  = 1n
.param TFALL  = 1n
.param TSTOP  = 1m
.param V_BAND = 10m          * 정착 허용 밴드(±10 mV)

* ===== 회로 =====
V1    VIN_SRC  0   PULSE(0 'VSUP' 0 'TRISE' 'TFALL' '10*TSTOP' '20*TSTOP')
RSRC  VIN_SRC  VIN 'RS'
RUP   VIN      VOUT 'R1'
RDN   VOUT     0    'R2'
RLOAD VOUT     0    'RL'
COUT  VOUT     0    'CLOAD'

* ===== 과도 해석 =====
.tran 'TSTOP/1000' 'TSTOP'

* ===== 측정 (기본: 단일 상승 스텝 응답) =====
.measure TRAN VOUT_FINAL  AVG  v(VOUT) FROM='0.8*TSTOP' TO='TSTOP'          ; 최종값 근사
.measure TRAN VERR_ABS    PARAM='abs(VOUT_FINAL - V_SPEC)'                  ; 최종 오차
.measure TRAN IIN_AVG     AVG  '-I(V1)' FROM=0 TO='TSTOP'                    ; 평균 소스전류
.measure TRAN QIN         INTEG '-I(V1)' FROM=0 TO='TSTOP'                   ; 총 전하 [C]
.measure TRAN EAPP        PARAM='VSUP*QIN'                                   ; 근사 에너지 [J]
.measure TRAN TR10_90     TRIG v(VOUT) VAL='0.1*V_SPEC' RISE=1               \
                          TARG v(VOUT) VAL='0.9*V_SPEC' RISE=1               ; 10–90% 라이즈
.measure TRAN TSETTLE     WHEN 'abs(v(VOUT)-V_SPEC)-V_BAND' = 0 CROSS=1      ; ±밴드 최초 진입 시간

* ===== [옵션] 부하 스텝 응답(드룹/재정착) =====
* - 필요할 때만 해제해서 사용 (스위치로 병렬 부하를 추가)
*.param TLD   = '0.3*TSTOP'          * 부하 온 시간
*.param TW    = '0.2*TSTOP'          * 온 유지 시간
*.param RSTEP = 10k                   * 추가 부하(작아질수록 더 무거운 부하)
*VCTRL VCTL   0 PULSE(0 1 'TLD' 1n 1n 'TW' '2*TSTOP')
*.model SLD SW VT=0.5 VH=0 RON=1 ROFF=1e12
*RLD2  VOUT   NX 'RSTEP'
*S1    NX     0  VCTL 0 SLD
*.measure TRAN VOUT_MIN_L  MIN  v(VOUT) FROM='TLD' TO='TLD+TW'               ; 드룹 최소값
*.measure TRAN VOUT_PRE    FIND v(VOUT) AT='TLD-1n'
*.measure TRAN VDROP       PARAM='VOUT_PRE - VOUT_MIN_L'                      ; 드룹 크기
*.measure TRAN TSETTLE_L   WHEN 'abs(v(VOUT)-V_SPEC)-V_BAND' = 0 CROSS=2      ; 부하 스텝 후 재정착
.end
</code></pre></div></div>

<hr />

<h1 id="2-최적화-변수-parameter">2) 최적화 변수 (Parameter)</h1>

<ul>
  <li>
    <p><strong>R1, R2</strong> : 실제 생산을 고려해 <strong>Discrete(E96, 1%)</strong> 운용 권장</p>

    <ul>
      <li>
        <p>예시 범위(정확도 우선): <strong>R2 = 680 Ω ~ 1.2 kΩ</strong> , <strong>R1 ≈ 2.3×R2 → 1.6 kΩ ~ 3.0 kΩ</strong></p>
      </li>
      <li>
        <p>탐색은 외부 스크립트/옵티마이저에서 E96 후보를 순회 → <code class="language-plaintext highlighter-rouge">.measure</code> 결과를 스코어로 사용</p>
      </li>
    </ul>
  </li>
</ul>

<p>(원하면 <code class="language-plaintext highlighter-rouge">RT, K</code> 방식으로도 바꿔줄 수 있어: <code class="language-plaintext highlighter-rouge">R1=RT*(1-K)</code>, <code class="language-plaintext highlighter-rouge">R2=RT*K</code>)</p>

<hr />

<h1 id="3-측정-대상-measure-2">3) 측정 대상 (Measure)</h1>

<ul>
  <li>
    <p><strong>정확도</strong> : <code class="language-plaintext highlighter-rouge">VOUT_FINAL</code>, <code class="language-plaintext highlighter-rouge">VERR_ABS</code></p>
  </li>
  <li>
    <p><strong>속도</strong> : <code class="language-plaintext highlighter-rouge">TR10_90</code>, <code class="language-plaintext highlighter-rouge">TSETTLE(±V_BAND)</code></p>
  </li>
  <li>
    <p><strong>전류/에너지</strong> : <code class="language-plaintext highlighter-rouge">IIN_AVG</code>, <code class="language-plaintext highlighter-rouge">QIN</code>, <code class="language-plaintext highlighter-rouge">EAPP</code></p>
  </li>
  <li>
    <p><strong>(옵션) 부하 스텝 성능</strong> : <code class="language-plaintext highlighter-rouge">VDROP</code>, <code class="language-plaintext highlighter-rouge">TSETTLE_L</code></p>
  </li>
</ul>

<blockquote>
  <p>메모</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">V_BAND</code>(기본 10 mV)만 조절하면 정착 스펙을 손쉽게 변경 가능.</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">CLOAD</code>은 과도 거동(속도/드룹)을 만드는 핵심 파라미터이니 시스템에 맞춰 설정해줘.</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">PULSE</code> 폭을 <code class="language-plaintext highlighter-rouge">10*TSTOP</code>로 길게 잡아서 시뮬레이션 내내 High 상태가 유지되도록 했어.</p>
    </li>
  </ul>

</blockquote>

<p>필요하면 위 범위의 <strong>E96 리스트(.step list)</strong>나, <code class="language-plaintext highlighter-rouge">RT·K</code> 파라미터화 버전(같은 <code class="language-plaintext highlighter-rouge">.tran</code> 측정 유지)도 바로 만들어줄게.</p>

<p class="chat--user">

CLOAD를 넣은 이유 좀 쉽게 설명해줘

</p>

<p>좋아, 핵심만 <strong>쉽게</strong> 정리해볼게. (step-by-step)</p>

<ol>
  <li>
    <p><strong>그냥 R만 있으면, 시간적인 드라마가 없다</strong><br />
전압 분배기(R1–R2–RL)만 있으면 회로는 “메모리”가 없는 <strong>순수 저항망</strong> 이야. .tran에서 입력을 PULSE로 바꿔도, Vout은 <strong>입력 파형을 즉시 비율만큼 나눠</strong> 따라갈 뿐(이론적으로는 소스의 상승/하강시간만큼만 변함).<br />
→ 이러면 <strong>Rise time / Settling time 같은 과도 지표가 의미가 거의 없어</strong>(거의 입력 파형에 의해 정해짐).</p>
  </li>
  <li>
    <p><strong>CLOAD를 달아야 ‘시간상수’가 생긴다</strong><br />
CLOAD가 붙으면 Vout 노드는 <strong>(저항망의 테브난 저항 R_th) + 캐패시터</strong> 구조가 돼서 <strong>RC 시간상수 τ</strong> 가 생긴다.</p>

    <ul>
      <li>
        <p>Rth≈(R1+RS)∥(R2∥RL)R_{\text{th}} \approx (R_1+R_S) \parallel (R_2 \parallel R_L)Rth​≈(R1​+RS​)∥(R2​∥RL​)</p>
      </li>
      <li>
        <p>τ=Rth⋅CLOAD\tau = R_{\text{th}} \cdot C_{\text{LOAD}}τ=Rth​⋅CLOAD​<br />
이제 Vout은 지수적으로 천천히 올라가고(1−e−t/τ1-e^{-t/\tau}1−e−t/τ), <strong>TR(10–90%)</strong> , <strong>정착시간(TSETTLE)</strong> 같은 과도 지표를 <strong>회로의 파라미터로</strong> 제어·측정할 수 있어.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>현실 파라사이트를 간단히 대변</strong><br />
실제 보드는 배선/부하(ADC 샘플링캡, 다음 단계 입력 C 등) 때문에 <strong>수~수백 nF 수준의 등가 C</strong> 가 거의 항상 존재. CLOAD는 이런 <strong>현실적인 로딩/디커플링</strong> 을 간단히 모델링해줘.</p>

    <ul>
      <li>
        <p>노이즈/리플을 필터링(고주파에서 출력 임피던스 ↓)</p>
      </li>
      <li>
        <p>부하 스텝 시 <strong>즉각적인 드룹을 완화</strong>(C가 순간적으로 전류 공급)하고, 그 뒤 τ\tauτ로 재정착</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>수치 감(예: R1=1.8 kΩ, R2=820 Ω, RS=50 Ω, RL=100 kΩ, CLOAD=100 nF)</strong></p>

    <ul>
      <li>
        <p>R2∥RL≈814 ΩR_2 \parallel R_L \approx 814 \,\OmegaR2​∥RL​≈814Ω, R1+RS=1850 ΩR_1+R_S=1850 \,\OmegaR1​+RS​=1850Ω</p>
      </li>
      <li>
        <p>Rth≈566 Ω⇒τ≈56.6 μsR_{\text{th}} \approx 566 \,\Omega \Rightarrow \tau \approx 56.6\,\mu sRth​≈566Ω⇒τ≈56.6μs</p>
      </li>
      <li>
        <p>대략 <strong>TR(10–90%) ≈ 2.2τ ≈ 124 μs</strong> , <strong>정착 4–5τ ≈ 0.23–0.28 ms</strong><br />
→ 이런 값들이 <strong>CLOAD나 저항값을 바꾸면 예측 가능하게 변</strong> 하니, 최적화/트레이드오프가 가능해진다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>요약</strong></p>

    <ul>
      <li>
        <p><strong>왜 넣었나?</strong> .tran에서 <strong>의미 있는 과도 특성</strong>(속도·정착·드룹·에너지)을 만들고, <strong>현실 파라사이트/디커플링 효과</strong> 를 반영하려고.</p>
      </li>
      <li>
        <p><strong>어떻게 쓰나?</strong> 원하는 응답 속도면 τ\tauτ 목표를 정하고 CLOADC_{\text{LOAD}}CLOAD​ 또는 저항 합/비율을 조정. 빠르게 하고 싶으면 CLOAD↓(또는 RT↓), 리플/드룹 억제는 CLOAD↑(단, 기동 전류/에너지는 ↑).</p>
      </li>
    </ul>
  </li>
</ol>

<p>원하면, 위 RthR_{\text{th}}Rth​ 공식으로 목표 <strong>정착시간/라이즈타임 → 필요한 CLOAD</strong> 를 바로 역산해주는 스니펫(.measure/파라미터 계산)도 덱에 추가해줄게.</p>

<p class="chat--user">

VERR_ABS와 EAPP 측정 결과가 나왔는데 각 단위가 뭐야

</p>

<p>짧게 말하면:</p>

<ul>
  <li>
    <p><strong>VERR_ABS</strong> : <strong>볼트 [V]</strong></p>
  </li>
  <li>
    <p><strong>EAPP</strong> : <strong>줄 [J]</strong> (= 전기적 에너지)</p>
  </li>
</ul>

<p>step-by-step로 풀면,</p>

<ol>
  <li>
    <p><strong>정의 복습</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">VOUT_FINAL</code>을 마지막 구간(예: 0.8·TSTOP~TSTOP)에서 평균한 출력 전압 → <strong>단위 V</strong></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">VERR_ABS = |VOUT_FINAL − V_SPEC|</code> → <strong>단위 V</strong></p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>EAPP가 왜 줄[J]인가</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">QIN = INTEG(-I(V1))</code> → <strong>쿨롬 [C]</strong> (전하)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">EAPP = VSUP · QIN</code> → <strong>V × C = J</strong></p>
      </li>
      <li>
        <p>즉, 소스가 공급한 <strong>에너지(근사)</strong>야. 여기서 “근사”인 이유는, 덱에서 <code class="language-plaintext highlighter-rouge">V1</code>이 거의 상수(VSUP)지만 <strong>상승 구간</strong> 에선 순간적으로 <code class="language-plaintext highlighter-rouge">V&lt;VSUP</code>이기 때문이야. 이 구간까지 정확히 포함하려면 아래처럼 <strong>전압·전류 곱을 적분</strong> 하면 돼:</p>

        <ul>
          <li>참고: <em>정확 에너지</em> ≈ ∫ v(V1)·(-I(V1)) dt → 결과 단위도 <strong>J</strong></li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<blockquote>
  <p>보너스 단위 체크</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">IIN_AVG</code>: <strong>암페어 [A]</strong></p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">TR10_90</code>, <code class="language-plaintext highlighter-rouge">TSETTLE</code>: <strong>초 [s]</strong></p>
    </li>
  </ul>

</blockquote>

<p>필요하면 <strong>정확 에너지 측정식(∫v·i dt 버전)</strong>으로 바꾼 <code class="language-plaintext highlighter-rouge">.measure</code> 예시도 만들어줄게.</p>

<p class="chat--user">

파워 소모라고 하면 W일거 같은데 J이야?

</p>

<p>짧은 답:</p>

<ul>
  <li>
    <p><strong>EAPP</strong> 는 <strong>에너지 [J]</strong>야. (시간에 걸쳐 들어간 전력의 적분)</p>
  </li>
  <li>
    <p>“파워 소모”를 보고 싶다면 <strong>전력 [W]</strong>로 계산해야 해. (평균 전력 = 에너지 / 시간)</p>
  </li>
</ul>

<p>step-by-step:</p>

<ol>
  <li>
    <p><strong>왜 J냐?</strong><br />
EAPP를 <code class="language-plaintext highlighter-rouge">∫ v·i dt</code>(또는 <code class="language-plaintext highlighter-rouge">VSUP·∫i dt</code>)로 정의하면, 단위가 <strong>V·A·s = J</strong> 가 돼. 즉 “한 번의 과도 이벤트에서 쓴 총량”을 뜻해.</p>
  </li>
  <li>
    <p><strong>전력[W]가 필요하면</strong><br />
같은 구간 [T0,T1][T0, T1][T0,T1]에서 평균 전력은</p>
  </li>
</ol>

<p>Pavg=1T1−T0∫T0T1v(t) i(t) dt=EAPPT1−T0[W]P_{\text{avg}}=\frac{1}{T_1-T_0}\int_{T_0}^{T_1} v(t)\,i(t)\,dt=\frac{\text{EAPP}}{T_1-T_0}\quad[\text{W}]Pavg​=T1​−T0​1​∫T0​T1​​v(t)i(t)dt=T1​−T0​EAPP​[W]</p>
<ol>
  <li><strong>.tran에서 바로 쓰는 측정 스니펫</strong> (복붙 가능)</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

* 구간 정의
.param T0 = 0
.param T1 = 'TSTOP'

* (정확한) 에너지 [J]
.measure TRAN EAPP  INTEG 'v(V1)*(-I(V1))' FROM='T0' TO='T1'

* 평균 전력 [W] — 직접 평균
.measure TRAN P_AVG AVG   'v(V1)*(-I(V1))' FROM='T0' TO='T1'

* (동일 의미) 평균 전력 [W] — 에너지/시간
*.measure TRAN DT    PARAM='T1 - T0'
*.measure TRAN P_AVG2 PARAM='EAPP/DT'

* 피크 전력 [W] (최대값)
.measure TRAN P_PEAK MAX   'v(V1)*(-I(V1))' FROM='T0' TO='T1'
</code></pre></div></div>

<ol>
  <li><strong>주의(옵션)</strong><br />
방전 때 소스에 에너지가 “되돌아갈” 수 있어 v⋅i&lt;0v·i&lt;0v⋅i&lt;0. “진짜 소비만” 보고 싶다면 양의 부분만 적분:</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

* 소비 에너지(양수만 적분) [J]
.measure TRAN E_CONS INTEG '0.5*( v(V1)*(-I(V1)) + abs(v(V1)*(-I(V1))) )' FROM='T0' TO='T1'
</code></pre></div></div>

<p>정리: <strong>EAPP=J(에너지)</strong>가 맞고, <strong>파워 소모는 W(전력)</strong>이야. 평균 전력을 보고 싶으면 위 <code class="language-plaintext highlighter-rouge">P_AVG</code>로 측정하거나 <code class="language-plaintext highlighter-rouge">EAPP/(T1-T0)</code>로 계산하면 돼.</p>

<p class="chat--user">

왜 P_AVG가 0이 나오지? 아까 써준 tran input에 재대로 assign 해줘봐

</p>

<p>가능해! <strong>P_AVG=0</strong> 나오는 가장 흔한 이유는, 내가 예시로 쓴 <code class="language-plaintext highlighter-rouge">v(V1)</code>가 “소스의 <strong>소자 전압</strong> ”을 뜻한다고 가정했는데, FineSim/HSPICE에서는 그게 제대로 해석되지 않아서 <strong>0으로 처리</strong> 되는 경우가 있어.<br />
소스 전압은 <strong>노드 전압</strong> 으로 안전하게 참조하는 게 확실해—즉 <code class="language-plaintext highlighter-rouge">v(VIN_SRC,0)</code>처럼 <strong>노드 이름</strong> 을 써주자.</p>

<p>아래처럼 <strong>.tran 입력 덱의 측정 블록</strong> 을 교체하면 돼(복붙 OK).</p>

<hr />

<h2 id="수정된-측정-블록-tran-전용-전력에너지-포함">수정된 측정 블록 (.tran 전용, 전력/에너지 포함)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

* ===== 과도 해석 =====
.tran 'TSTOP/1000' 'TSTOP'

* --- 기존 측정(정확도/시간) 유지 ---
.measure TRAN VOUT_FINAL  AVG  v(VOUT) FROM='0.8*TSTOP' TO='TSTOP'
.measure TRAN VERR_ABS    PARAM='abs(VOUT_FINAL - V_SPEC)'
.measure TRAN TR10_90     TRIG v(VOUT) VAL='0.1*V_SPEC' RISE=1 \
                          TARG v(VOUT) VAL='0.9*V_SPEC' RISE=1
.measure TRAN TSETTLE     WHEN 'abs(v(VOUT)-V_SPEC)-V_BAND' = 0 CROSS=1

* --- 파워/에너지: 노드전압 v(VIN_SRC,0) × 소스전류 -I(V1) 로 측정 ---
.param T0 = 0
.param T1 = 'TSTOP'

* 정확한 에너지 [J] = ∫ v*i dt
.measure TRAN EAPP  INTEG 'v(VIN_SRC,0)*(-I(V1))' FROM='T0' TO='T1'

* 평균 전력 [W] = 평균(v*i)
.measure TRAN P_AVG AVG   'v(VIN_SRC,0)*(-I(V1))' FROM='T0' TO='T1'

* 피크 전력 [W]
.measure TRAN P_PEAK MAX   'v(VIN_SRC,0)*(-I(V1))' FROM='T0' TO='T1'

* (선택) 소비 에너지(양수만 적분) [J]
.measure TRAN E_CONS INTEG '0.5*( v(VIN_SRC,0)*(-I(V1)) + abs(v(VIN_SRC,0)*(-I(V1))) )' \
                           FROM='T0' TO='T1'
</code></pre></div></div>

<h3 id="왜-이렇게-바꾸면-되나-짧게">왜 이렇게 바꾸면 되나 (짧게)</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">v(VIN_SRC,0)</code>: <strong>소스 양단 노드 전압</strong> 을 직접 참조 ⇒ 항상 유효.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-I(V1)</code>: 소스가 <strong>회로로 공급하는 전류</strong>(양수) ⇒ 공급 전력 <code class="language-plaintext highlighter-rouge">v*i</code>가 <strong>양수</strong> 로 계산됨.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">AVG</code>는 표현식의 시간 평균이므로, 저항망에 DC 전류가 흐르면 <strong>0이 될 수 없음</strong>. 0이 나왔다면 거의 항상 전압 참조가 잘못된 케이스야.</p>
  </li>
</ul>

<p>이렇게 수정하고 돌리면 <strong>P_AVG가 정상적인 W 단위 값</strong> 으로 나올 거야.</p>

<p class="chat--user">

전체 다시 써. 게으르지말고 사람이 화나려고 해

</p>

<p>알겠어. 전부 깨끗이 <strong>.tran 전용</strong> 으로 다시 정리해서 <strong>복붙 바로 실행</strong> 가능한 덱을 줘.<br />
(전력/에너지 측정은 <strong>노드 전압 v(VIN_SRC,0)</strong> × <strong>소스전류 -I(V1)</strong> 로 계산해서 <code class="language-plaintext highlighter-rouge">P_AVG=0</code> 문제를 근본적으로 회피했어.)</p>

<hr />

<h1 id="finesimhspice-netlist--transient-only-complete">FineSim/HSPICE Netlist — Transient Only (Complete)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

*------------------------------------------------------------
* Voltage Divider — Transient-Only Optimization Deck
* (FineSim/HSPICE compatible)
*------------------------------------------------------------
.option post=2 measform=1

* ===== Parameters (edit here) =====
.param VSUP    = 3.3          * 입력 전압 [V]
.param V_SPEC  = 1.0          * 목표 Vout [V]
.param RS      = 50           * 소스 직렬저항 [Ohm]
.param RL      = 100k         * 부하 [Ohm]

* ---- 최적화 변수 (Discrete/E96 권장) ----
.param R1      = 1.80k        * 위쪽 저항
.param R2      = 820          * 아래쪽 저항

* ---- 과도/측정 관련 ----
.param CLOAD   = 100n         * 출력 바이패스/부하 커패시터
.param TRISE   = 1n
.param TFALL   = 1n
.param TSTOP   = 1m
.param V_BAND  = 10m          * 정착 허용 밴드(±)
.param T0      = 0            * 에너지/전력 집계 시작
.param T1      = 'TSTOP'      * 에너지/전력 집계 끝

* ===== Circuit =====
V1     VIN_SRC   0      PULSE(0 'VSUP' 0 'TRISE' 'TFALL' 'TSTOP' '100*TSTOP')
RSRC   VIN_SRC   VIN    'RS'
RUP    VIN       VOUT   'R1'
RDN    VOUT      0      'R2'
RLOAD  VOUT      0      'RL'
COUT   VOUT      0      'CLOAD'

* ===== Transient Analysis =====
.tran  'TSTOP/1000'  'TSTOP'

* ===== Measures (steady-state / timing) =====
.measure TRAN VOUT_FINAL  AVG  v(VOUT) FROM='0.8*TSTOP' TO='TSTOP'    ; 최종값 근사 [V]
.measure TRAN VERR_ABS    PARAM='abs(VOUT_FINAL - V_SPEC)'            ; 최종 오차 [V]

.measure TRAN TR10_90     TRIG v(VOUT) VAL='0.1*V_SPEC' RISE=1 \
                          TARG v(VOUT) VAL='0.9*V_SPEC' RISE=1        ; 10–90% 라이즈 [s]

.measure TRAN TSETTLE     WHEN 'abs(v(VOUT)-V_SPEC)-V_BAND' = 0 CROSS=1  ; 정착 시간 [s]

* ===== Power / Energy (robust node-based) =====
*  - 전력 p(t) = v(VIN_SRC,0) * (-I(V1))
*  - 평균전력 [W] = AVG p(t), 에너지 [J] = ∫ p(t) dt
.measure TRAN P_AVG   AVG   'v(VIN_SRC,0)*(-I(V1))' FROM='T0' TO='T1'      ; 평균 전력 [W]
.measure TRAN P_PEAK  MAX   'v(VIN_SRC,0)*(-I(V1))' FROM='T0' TO='T1'      ; 피크 전력 [W]
.measure TRAN EAPP    INTEG 'v(VIN_SRC,0)*(-I(V1))' FROM='T0' TO='T1'      ; 소비 에너지 [J]
* (선택) 양의 전력만 적분한 소비 에너지
*.measure TRAN E_CONS INTEG '0.5*( v(VIN_SRC,0)*(-I(V1)) + abs(v(VIN_SRC,0)*(-I(V1))) )' \
*                           FROM='T0' TO='T1'

.end
</code></pre></div></div>

<hr />

<h2 id="쓰는-순서-진짜-짧게">쓰는 순서 (진짜 짧게)</h2>

<ol>
  <li>
    <p>위 덱 그대로 붙여 넣고 <strong>.tran</strong> 실행.</p>
  </li>
  <li>
    <p><strong>.mt#</strong> 결과에서 <code class="language-plaintext highlighter-rouge">VERR_ABS [V]</code>, <code class="language-plaintext highlighter-rouge">TR10_90 [s]</code>, <code class="language-plaintext highlighter-rouge">TSETTLE [s]</code>, <code class="language-plaintext highlighter-rouge">P_AVG [W]</code>, <code class="language-plaintext highlighter-rouge">EAPP [J]</code> 확인.</p>
  </li>
  <li>
    <p><strong>R1/R2(Discrete, E96)</strong> 후보를 바꿔가며 측정값을 최적화.</p>
  </li>
</ol>

<h3 id="변수-유형범위요약">변수 유형/범위(요약)</h3>

<ul>
  <li>
    <p><strong>R1, R2 = Discrete(E96, 1%)</strong> 권장</p>

    <ul>
      <li>
        <p>정확도 우선: <strong>R2 = 680 Ω ~ 1.2 kΩ</strong> , <strong>R1 ≈ 2.3×R2 → 1.6 kΩ ~ 3.0 kΩ</strong></p>
      </li>
      <li>
        <p>전류 절약형(정확도 일부 양보): <strong>R2 = 1.5 kΩ ~ 10 kΩ</strong> , <strong>R1 = 3.5 kΩ ~ 23 kΩ</strong></p>
      </li>
    </ul>
  </li>
</ul>

<h3 id="왜-이제-p_avg가-0이-안-나오냐">왜 이제 <code class="language-plaintext highlighter-rouge">P_AVG</code>가 0이 안 나오냐?</h3>

<ul>
  <li>
    <p>전력 식을 <strong>소자이름이 아닌 노드 전압</strong> <code class="language-plaintext highlighter-rouge">v(VIN_SRC,0)</code>과 <strong>소스 전류</strong> <code class="language-plaintext highlighter-rouge">-I(V1)</code>로 정의했기 때문.</p>
  </li>
  <li>
    <p>이 조합은 FineSim/HSPICE에서 항상 유효하고, DC 성분이 있으면 평균이 0일 수 없어.</p>
  </li>
</ul>

<p>필요하면 <strong>부하 스텝 응답(.tran) 측정 블록</strong> 도 추가해 줄게.</p>]]></content><author><name>hvppyarchive</name></author><category term="circuit" /><summary type="html"><![CDATA[]]></summary></entry></feed>