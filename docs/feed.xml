<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://hvppyarchive.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hvppyarchive.github.io/" rel="alternate" type="text/html" /><updated>2025-10-17T11:37:20+09:00</updated><id>https://hvppyarchive.github.io/feed.xml</id><title type="html">ARCHIVE</title><subtitle>An amazing archive.</subtitle><author><name>hvppyarchive</name></author><entry><title type="html"></title><link href="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/" rel="alternate" type="text/html" title="" /><published>2025-10-17T11:37:20+09:00</published><updated>2025-10-17T11:37:20+09:00</updated><id>https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str</id><content type="html" xml:base="https://hvppyarchive.github.io/2025-08-19-python-repr-vs-str/"><![CDATA[<p class="chat--user">

Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 함수와 <code class="language-plaintext highlighter-rouge">__str__</code> 함수의 차이점

</p>

<p>Python에서 <code class="language-plaintext highlighter-rouge">__repr__</code> 과 <code class="language-plaintext highlighter-rouge">__str__</code> 의 차이점은 <strong>객체를 문자열로 표현하는 목적</strong> 에서 달라집니다. 차이를 단계적으로 정리해드릴게요.</p>

<hr />

<h2 id="1-__repr__-의-목적">1. <code class="language-plaintext highlighter-rouge">__repr__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>개발자 중심</strong> : 객체를 "개발자"가 보고 이해할 수 있도록 표현합니다.</p>
  </li>
  <li>
    <p><strong>재현 가능(reproducible)</strong> : 가능한 한 객체를 다시 만들 수 있는 코드 형태로 보여주는 것이 목표입니다.</p>
  </li>
  <li>
    <p>보통 <code class="language-plaintext highlighter-rouge">eval(repr(obj)) == obj</code> 가 성립하는 형태를 지향합니다 (꼭 항상 그런 건 아니지만 권장).</p>
  </li>
  <li>
    <p>디버깅할 때 주로 사용됩니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Person(name=</span><span class="sh">'</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="sh">'</span><span class="s">, age=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">repr</span><span class="p">(</span><span class="n">p</span><span class="p">))</span>  <span class="c1"># Person(name='Alice', age=30)
</span></code></pre></div></div>

<hr />

<h2 id="2-__str__-의-목적">2. <code class="language-plaintext highlighter-rouge">__str__</code> 의 목적</h2>

<ul>
  <li>
    <p><strong>사용자 중심</strong> : 객체를 "사용자"가 보기 좋은 문자열로 표현합니다.</p>
  </li>
  <li>
    <p>읽기 쉽고 깔끔하게 출력하는 데 초점을 둡니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">print(obj)</code> 를 호출했을 때 보여지는 값이 <code class="language-plaintext highlighter-rouge">__str__</code> 입니다.</p>
  </li>
</ul>

<p>예시:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">age</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
        <span class="n">self</span><span class="p">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">age</span>
    
    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">name</span><span class="si">}</span><span class="s"> (</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">age</span><span class="si">}</span><span class="s"> years old)</span><span class="sh">"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nc">Person</span><span class="p">(</span><span class="sh">"</span><span class="s">Alice</span><span class="sh">"</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># Alice (30 years old)
</span></code></pre></div></div>

<hr />

<h2 id="3-__repr__-vs-__str__-비교">3. <code class="language-plaintext highlighter-rouge">__repr__</code> vs <code class="language-plaintext highlighter-rouge">__str__</code> 비교</h2>

<table>
  <thead>
    <tr>
      <th>특징</th>
      <th><code class="language-plaintext highlighter-rouge">__repr__</code></th>
      <th><code class="language-plaintext highlighter-rouge">__str__</code></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>목적</td>
      <td>개발자용, 디버깅</td>
      <td>사용자용, 가독성</td>
    </tr>
    <tr>
      <td>출력 대상</td>
      <td><code class="language-plaintext highlighter-rouge">repr(obj)</code>, 대화형 쉘에서 기본</td>
      <td><code class="language-plaintext highlighter-rouge">str(obj)</code>, <code class="language-plaintext highlighter-rouge">print(obj)</code></td>
    </tr>
    <tr>
      <td>형식</td>
      <td>객체 재현 가능하거나 상세</td>
      <td>읽기 쉬운 설명 위주</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="4-구현-시-주의사항">4. 구현 시 주의사항</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code> 가 없으면 <code class="language-plaintext highlighter-rouge">__repr__</code> 가 대신 사용</strong>됩니다.</p>
  </li>
  <li>
    <p>따라서 최소한 <code class="language-plaintext highlighter-rouge">__repr__</code> 은 정의해 두는 것이 좋습니다.</p>
  </li>
</ul>

<hr />

<p>👉 정리하면,</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__repr__</code></strong> : “개발자가 디버깅할 때” 객체의 정확한 표현.</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">__str__</code></strong> : “사용자가 출력물을 볼 때” 보기 좋게 표현.</p>
  </li>
</ul>

<hr />

<p>원하시면 <code class="language-plaintext highlighter-rouge">__repr__</code> 와 <code class="language-plaintext highlighter-rouge">__str__</code> 를 동시에 구현했을 때 <code class="language-plaintext highlighter-rouge">print(obj)</code> 와 <code class="language-plaintext highlighter-rouge">obj</code> (쉘 출력) 의 차이를 직접 실행해 보여드릴 수도 있는데, 예제 코드 시연을 원하시나요?</p>]]></content><author><name>hvppyarchive</name></author></entry><entry><title type="html">아날로그 회로 최적화 데모</title><link href="https://hvppyarchive.github.io/circuit/circuit-optimization-example/" rel="alternate" type="text/html" title="아날로그 회로 최적화 데모" /><published>2025-10-17T11:37:15+09:00</published><updated>2025-10-17T11:37:15+09:00</updated><id>https://hvppyarchive.github.io/circuit/circuit-optimization-example</id><content type="html" xml:base="https://hvppyarchive.github.io/circuit/circuit-optimization-example/"><![CDATA[<p class="chat--user">

Analog 회로 최적화를 소개하는 간단한 데모 예시를 만들고 싶어. 

</p>

<p class="chat--user">

Analog 회로 최적화를 소개하는 간단한 데모 예시를 만들고 싶어. 

</p>

<p>좋아! “아날로그 회로 최적화”를 아주 가볍고 직관적으로 보여줄 수 있는 데모를 바로 만들어봤어. 주제는 <strong>RC 저역통과 필터의 R, C를 자동으로 골라 목표 차단주파수(fc)를 맞추는 최적화</strong> 야. 아래를 따라가면 끝.</p>

<h1 id="데모-개요-step-by-step">데모 개요 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>문제 설정</strong> : 목표 fc(예: 1 kHz)를 만족하도록 R·C를 고른다.</p>
  </li>
  <li>
    <p><strong>목적함수</strong> :</p>

    <ul>
      <li>
        <p>fc 오차(로그 스케일) + (R가 너무 큰 경우 페널티) + (C가 너무 큰 경우 페널티).</p>
      </li>
      <li>
        <p>R이 너무 크면 열잡음/구동성 이슈, C가 너무 크면 비용/면적 이슈가 증가한다는 감을 주려는 장치.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>설계 변수</strong> : 표준 E-series(저항 E24, 커패시터 E12) 후보 안에서 전수 탐색(간단·빠름).</p>
  </li>
  <li>
    <p><strong>강건성 확인</strong> : R±5%, C±10% 공차에서 <strong>fc 수율(±5% 스펙)</strong>을 몬테카를로로 추정.</p>
  </li>
  <li>
    <p><strong>시각화</strong> : 보드 플롯과 fc 분포 히스토그램으로 결과 확인.</p>
  </li>
</ol>

<p>위의 코드 셀을 바로 실행해서 결과/그래프까지 확인할 수 있게 했어. 기본 파라미터는 <strong>fc=1 kHz</strong> , <strong>R 1k~1MΩ</strong> , <strong>C 100 pF~1 µF</strong> 로 잡았고, 실행 결과 예시는 대략 아래와 같아:</p>

<ul>
  <li>
    <p>선택된 R ≈ <strong>1.6 kΩ</strong> , C ≈ <strong>0.1 µF</strong> → fc ≈ <strong>995 Hz</strong> (오차 <strong>-0.53%</strong>)</p>
  </li>
  <li>
    <p>공차 포함 <strong>수율 ≈ 50.5%</strong> (스펙: ±5%)</p>
  </li>
</ul>

<h1 id="어떻게-활용확장하면-좋을까">어떻게 활용/확장하면 좋을까?</h1>

<ul>
  <li>
    <p><strong>목표 바꾸기</strong> : 코드 맨 위 <code class="language-plaintext highlighter-rouge">target_fc_hz</code>만 바꾸면 끝(예: 2 kHz, 10 kHz 등).</p>
  </li>
  <li>
    <p><strong>설계 철학 바꾸기</strong> : <code class="language-plaintext highlighter-rouge">alpha, beta, gamma</code> 가중치를 조절해서</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">beta</code>↑ → R 줄이도록 유도(열잡음, 구동 여유 강조),</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">gamma</code>↑ → C 줄이도록 유도(비용/면적 강조).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>사양/공차 바꾸기</strong> : <code class="language-plaintext highlighter-rouge">tol_R</code>, <code class="language-plaintext highlighter-rouge">tol_C</code>, <code class="language-plaintext highlighter-rouge">spec_fc_rel</code>을 조정해 수율 민감도 확인.</p>
  </li>
  <li>
    <p><strong>제약 추가</strong> : 소스/부하 임피던스, 허용 전류/전압, 커패시터 종류(세라/탄탈/전해)별 최대값 등 현실 제약을 반영해 필터링 가능.</p>
  </li>
  <li>
    <p><strong>다음 단계</strong> :</p>

    <ul>
      <li>
        <p>2차(다양한 토폴로지)로 확장하고 Q, 위상 여유 등 포함.</p>
      </li>
      <li>
        <p>간단한 <strong>SPICE 연동</strong>(예: ngspice .meas)으로 측정값 기반 최적화로 전환.</p>
      </li>
      <li>
        <p><strong>강건 최적화</strong> : 수율을 목적함수에 직접 포함(예: <code class="language-plaintext highlighter-rouge">-yield</code> 최대화 또는 페널티화).</p>
      </li>
    </ul>
  </li>
</ul>

<p>필요하면 이 데모를 <strong>op-amp 이득 단계 최적화</strong>(목표 이득/대역/슬루율 제약)나 <strong>전압 분배기 최소 전력 + 목표 오차</strong> 같은 더 짧은 예제로 바꿔 줄 수도 있어. 원하는 회로/사양을 말해주면, 위 템플릿 그대로 맞춰서 돌려볼게!</p>

<p class="chat--user">

응 전압 분배기로 해줘 그리고 finesim을 쓸 수 있단 가정하에 시뮬레이션을 돌릴거라서 저런 코드는 필요없어 대신에 1. finesim netlist 2. 최적화할 변수(parameter) 3. 측정 대상(measure) 를 확실히 해줬으면 좋겠어

</p>

<p>좋아—<strong>전압 분배기(Voltage Divider)</strong>를 예제로, FineSim(HSPICE 호환)으로 곧장 돌릴 수 있게 아래 3가지를 딱 정리했어.</p>

<hr />

<h1 id="1-finesim-netlist-복사-붙여넣기-실행용">1) FineSim Netlist (복사-붙여넣기 실행용)</h1>

<p>아래 deck은 <strong>소스 직렬 임피던스(RS)</strong> , <strong>분배기(R1, R2)</strong> , <strong>부하(RL)</strong>까지 포함한 현실적인 전압 분배기이며,</p>

<ul>
  <li>
    <p>(A) OP에서 정밀도/소모 전류/전력 측정,</p>
  </li>
  <li>
    <p>(B) 소스 전압 변화에 대한 <strong>Line Regulation</strong> ,</p>
  </li>
  <li>
    <p>(C) 부하 변화에 대한 <strong>Load Regulation</strong><br />
을 각각 측정하도록 분리해 두었어. 각 블록은 <strong>필요한 것만 남기고 나머지는 주석 처리</strong> 하고 돌리면 돼.</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

*------------------------------------------------------------
* Voltage Divider Optimization Demo (FineSim/HSPICE compatible)
*------------------------------------------------------------
.option post=2 measform=1
*.option nomod         * (필요시) 모델 최소 출력

* ----- Parameters (최적화 변수 및 스펙) -----
.param VSUP      = 3.3        * 공급 전압 [V]
.param V_SPEC    = 1.0        * 목표 출력 전압 [V]
.param RS        = 50         * 소스 직렬 저항 [Ohm]  (예: 신호원/레귤레이터 출력 임피던스)
.param RL        = 100k       * 부하 [Ohm]

* === 최적화 대상 변수(안) A: R1, R2 직접 최적화 ===
.param R1        = 10k
.param R2        = 22k

* === 최적화 대상 변수(안) B: 총저항 RT와 비율 K를 최적화 (R1,R2 파생) ===
* .param RT     = 100k        * R1+R2 (전력/노이즈/면적 트레이드오프)
* .param K      = 0.25        * 이상적 비율 = Vout/Vin (0&lt;K&lt;1)
* .param R1     = 'RT*(1-K)'
* .param R2     = 'RT*K'

* ----- Circuit -----
V1   VIN_SRC  0  DC 'VSUP'
RSRC VIN_SRC  VIN 'RS'
RUP  VIN      VOUT 'R1'
RDN  VOUT     0   'R2'
RLOAD VOUT    0   'RL'

* ============================================================
* (A) OP 기반 측정: 정확도/소스 전류/전력
* ============================================================
.op

* 출력/오차
.measure DC  VOUT      param='v(VOUT)'
.measure DC  VERR      param='v(VOUT)-V_SPEC'
.measure DC  VERR_ABS  param='abs(v(VOUT)-V_SPEC)'
.measure DC  RATIO     param='v(VOUT)/VSUP'      * 이상적으론 ~ R2/(R1+R2)

* 소스 전류/전력 (SPICE 부호 관례: I(V1) &gt;0이면 소스에 유입)
.measure DC  IIN       param='-I(V1)'            * 소스가 공급하는 전류 [A]
.measure DC  PIN       param='(-I(V1))*VSUP'     * 총 소비 전력 [W]

* 부품 전류(참고)
.measure DC  I_R1      param='(v(VIN)-v(VOUT))/R1'
.measure DC  I_R2      param='v(VOUT)/R2'
.measure DC  I_RL      param='v(VOUT)/RL'

* ============================================================
* (B) Line Regulation: Vin 변화에 대한 Vout 민감도
*    - 필요시만 사용: 이 블록만 남기고 (A),(C)는 주석 처리
* ============================================================
*.dc V1 3.0 3.6 0.3
*.measure DC  VOUT_MIN  FIND v(VOUT) AT=3.0
*.measure DC  VOUT_MAX  FIND v(VOUT) AT=3.6
*.measure DC  LINE_REG  param='(VOUT_MAX - VOUT_MIN)/(3.6 - 3.0)'
*  단위: V/V  (원하면 %/V로 보고 싶으면 100*... 사용)

* ============================================================
* (C) Load Regulation: RL 변화(부하 전류 증가)에 따른 Vout 민감도
*    - 필요시만 사용: 이 블록만 남기고 (A),(B)는 주석 처리
*    - FineSim/HSPICE: .dc param &lt;name&gt; &lt;start&gt; &lt;stop&gt; &lt;step&gt;
* ============================================================
*.dc param RL 20k 1Meg 20k
*.measure DC  VOUT_LIGHT  FIND v(VOUT) AT=1e6
*.measure DC  VOUT_HEAVY  FIND v(VOUT) AT=20e3
*.measure DC  LOAD_REG    param='(VOUT_LIGHT - VOUT_HEAVY)/VOUT_LIGHT'
*  단위: 상대 변화(무차원). 필요시 V/decade 등으로 재정의 가능.

.end
</code></pre></div></div>

<blockquote>
  <p>실행 팁: (A),(B),(C)를 <strong>동시에 돌리면 분석이 겹치므로</strong> , 필요한 블록만 남기고 나머지는 <code class="language-plaintext highlighter-rouge">*</code>로 주석 처리해서 실행해줘.<br />
 측정 결과는 FineSim/HSPICE의 <code class="language-plaintext highlighter-rouge">.measure</code> 결과 파일(예: <code class="language-plaintext highlighter-rouge">.mt#</code>)로 나와.</p>
</blockquote>

<hr />

<h1 id="2-최적화할-변수-parameter">2) 최적화할 변수 (Parameter)</h1>

<p>두 가지 접근 중 <strong>원하는 방식 하나</strong> 를 택해:</p>

<h3 id="a-r1-r2-직접-최적화">A. R1, R2 직접 최적화</h3>

<ul>
  <li>
    <p><strong>설계변수</strong> : <code class="language-plaintext highlighter-rouge">R1</code>, <code class="language-plaintext highlighter-rouge">R2</code></p>
  </li>
  <li>
    <p><strong>권장 범위</strong> (예시):</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">1 kΩ ≤ R1, R2 ≤ 1 MΩ</code></p>
      </li>
      <li>
        <p>총저항 <code class="language-plaintext highlighter-rouge">R1+R2</code>에 추가 제약: <code class="language-plaintext highlighter-rouge">20 kΩ ≤ R1+R2 ≤ 2 MΩ</code></p>

        <ul>
          <li>(너무 작으면 전력 증가/소스 부하 과중, 너무 크면 노이즈/오프셋 민감성 증가)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>E-series 제약</strong> 이 필요하면, 외부 스크립트에서 <strong>라운딩(E24/E96)</strong> 후 재측정 루프를 돌리면 좋아.</p>
  </li>
</ul>

<h3 id="b-파생-변수로-단순화-추천">B. 파생 변수로 단순화 (추천)</h3>

<ul>
  <li>
    <p><strong>설계변수</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">RT = R1+R2</code> (전력/노이즈/면적을 좌우)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">K = R2/(R1+R2) ≈ Vout/Vin</code> (목표 분배 비율)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>파생관계</strong> :</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">R1 = RT*(1-K)</code>, <code class="language-plaintext highlighter-rouge">R2 = RT*K</code></li>
    </ul>
  </li>
  <li>
    <p><strong>권장 범위(예시)</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">10 kΩ ≤ RT ≤ 1 MΩ</code></p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">0.1 ≤ K ≤ 0.9</code> (양 끝단은 민감도↑라 너무 치우치지 않게)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="3-측정-대상-measure">3) 측정 대상 (Measure)</h1>

<p>최적화의 <strong>목표/제약</strong> 으로 바로 쓸 수 있게 이름을 정리했어.<br />
(모두 netlist의 <code class="language-plaintext highlighter-rouge">.measure</code>로 이미 정의되어 있음)</p>

<p><strong>정확도 관련</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">VOUT</code> : 출력 전압</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">VERR_ABS</code> : <code class="language-plaintext highlighter-rouge">|VOUT - V_SPEC|</code> → <strong>최소화</strong> (예: ≤ 10 mV)</p>
  </li>
</ul>

<p><strong>전력/전류 관련</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">IIN</code> : 소스가 공급하는 전류 → <strong>최소화</strong></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">PIN</code> : 총 소비 전력 → <strong>최소화</strong></p>
  </li>
</ul>

<p><strong>레귤레이션(선택 측정)</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">LINE_REG</code> : <code class="language-plaintext highlighter-rouge">ΔVout/ΔVin</code> → <strong>절대값 최소화</strong> (라인 변동 민감도)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">LOAD_REG</code> : <code class="language-plaintext highlighter-rouge">(Vout_light−Vout_heavy)/Vout_light</code> → <strong>절대값 최소화</strong> (부하 변동 민감도)</p>
  </li>
</ul>

<hr />

<h2 id="권장-최적화-포맷예시">권장 최적화 포맷(예시)</h2>

<ul>
  <li><strong>목표</strong> :</li>
</ul>

<table>
  <tbody>
    <tr>
      <td>min⁡   w1⋅VERR_ABS + w2⋅PIN + w3⋅∣LINE_REG∣ + w4⋅∣LOAD_REG∣\min \ \ \ w_1 \cdot \text{VERR\_ABS} \ +\ w_2 \cdot \text{PIN} \ +\ w_3 \cdot</td>
      <td>\text{LINE\_REG}</td>
      <td>\ +\ w_4 \cdot</td>
      <td>\text{LOAD\_REG}</td>
      <td>min   w1​⋅VERR_ABS + w2​⋅PIN + w3​⋅∣LINE_REG∣ + w4​⋅∣LOAD_REG∣</td>
    </tr>
  </tbody>
</table>

<p>(가중치 wiw_iwi​는 프로젝트 우선순위에 맞춰 선택. 처음엔 w1w_1w1​을 크게 두고, 성공 후 w2w_2w2​↑로 전력 줄이는 2단계 접근 권장.)</p>

<ul>
  <li>
    <p><strong>제약(예시)</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">VERR_ABS ≤ 0.01</code> V (±10 mV 스펙)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">IIN ≤ 100 μA</code> (저전력 요구 시)</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">RS</code>와 <code class="language-plaintext highlighter-rouge">RL</code>은 시스템에서 주어진 값(혹은 워스트케이스)으로 고정</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="실전-팁">실전 팁</h2>

<ul>
  <li>
    <p>실제 시스템의 <code class="language-plaintext highlighter-rouge">RS</code>(소스 임피던스), <code class="language-plaintext highlighter-rouge">RL</code>(부하)을 <strong>워스트 케이스</strong> 로 넣고 최적화하면, 이식성이 좋음.</p>
  </li>
  <li>
    <p>공차(±1~5%)를 고려하려면, <code class="language-plaintext highlighter-rouge">.alter</code>로 R1/R2에 스케일 파라미터(<code class="language-plaintext highlighter-rouge">S1</code>,<code class="language-plaintext highlighter-rouge">S2</code>)를 둬서 0.95/1.00/1.05 케이스를 <strong>배치 측정</strong> 하고, 최적화 목표에 “최악의 <code class="language-plaintext highlighter-rouge">VERR_ABS</code>”를 포함시키면 간단한 강건 최적화가 됨.</p>
  </li>
</ul>

<p>원하는 목표 전압/전력 한계나 레귤레이션 한계치가 있다면 알려줘. 그 값들로 <code class="language-plaintext highlighter-rouge">V_SPEC</code>, 제약/가중치 추천 세트까지 바로 맞춰서 덱을 더 다듬어줄게.</p>

<p class="chat--user">

이 상황에서 R1, R2 변수의 유형과 범위를 정해줘. 현실의 제약 사항을 고려해서 Continuous, Incremental, Discrete 변수 중 뭐로 할지, 범위와 Step(있다면)을 정해주면 좋을 것 같다

</p>

<p>좋아—“전압 분배기 + FineSim” 상황에서 <strong>R1, R2 변수의 유형/범위/스텝</strong> 을 현실 제약(부하 RL=100 kΩ, Vin=3.3 V, Vout=1.0 V 목표)까지 고려해 <strong>바로 쓸 수 있는 3가지 프로파일</strong> 로 정리했어. (생산 관점 → 시뮬/최적화 편의 순으로)</p>

<hr />

<h1 id="권장-1-discrete-e-series-생산-지향-">권장 1) Discrete (E-series, 생산 지향) ✅</h1>

<p><strong>왜 Discrete?</strong> 실제 부품은 E-series(공차 1%면 E96 등)로만 존재. 최적화 결과가 곧바로 BOM으로 이어짐.</p>

<ul>
  <li>
    <p>분배 비율 K=Vout/Vin≈1/3.3≈0.303K = V_\text{out}/V_\text{in} \approx 1/3.3 \approx 0.303K=Vout​/Vin​≈1/3.3≈0.303</p>
  </li>
  <li>
    <p>이상적 관계: R1=R2⋅1−KK≈2.30 R2R_1 = R_2\cdot\frac{1-K}{K} \approx 2.30\,R_2R1​=R2​⋅K1−K​≈2.30R2​</p>
  </li>
</ul>

<h3 id="정확도-우선버퍼-없음-rl100-kω-로딩오차-1-목표">정확도 우선(버퍼 없음, RL=100 kΩ 로딩오차 ≤≈1% 목표)</h3>

<ul>
  <li>
    <p><strong>핵심 규칙</strong> : 로딩오차를 1%대 유지하려면 <strong>R 2≲RL/100≈1.0 kΩR_2 \lesssim RL/100 \approx 1.0\text{ kΩ}R2​≲RL/100≈1.0 kΩ</strong></p>
  </li>
  <li>
    <p><strong>스펙</strong></p>

    <ul>
      <li>
        <p><strong>R2 (Discrete, E96 1%)</strong> : <strong>680 Ω ~ 1.2 kΩ</strong></p>
      </li>
      <li>
        <p><strong>R1 (Discrete, E96 1%)</strong> : R1≈2.30R2R_1 \approx 2.30 R_2R1​≈2.30R2​ → <strong>1.6 kΩ ~ 3.0 kΩ</strong></p>
      </li>
      <li>
        <p><strong>총저항 RT=R1+R2R_T=R_1+R_2RT​=R1​+R2​</strong>: <strong>≈ 2.3 kΩ ~ 4.2 kΩ</strong> (분배 전류 0.8~1.4 mA @3.3 V)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>스텝</strong> : <strong>E96 표준치</strong>(해당 데케이드의 E96 값만 허용).</p>

    <ul>
      <li>FineSim에선 최적화 루프가 Discrete를 못 다루면 <strong>허용 리스트</strong> 를 외부에서 공급(.step list)하거나 스크립트로 enumerate.</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>예) R2 후보: {681, 715, 750, 787, 825, 866, 909, 953, 1000, 1050, 1100, 1150} Ω<br />
 각 R2에 대해 R1을 2.30R22.30 R_22.30R2​ 근처의 <strong>E96</strong> 값으로 스냅(예: 2.00k, 2.05k, 2.10k, 2.21k…).</p>
</blockquote>

<hr />

<h1 id="옵션-2-discrete균형형-전류정확도-타협">옵션 2) Discrete(균형형, 전류/정확도 타협)</h1>

<p><strong>로딩오차 2~6% 정도 허용</strong> 하고 전류를 줄이고 싶을 때.</p>

<ul>
  <li>
    <p><strong>R2 (E96 1%)</strong> : <strong>1.5 kΩ ~ 10 kΩ</strong></p>
  </li>
  <li>
    <p><strong>R1 (E96 1%)</strong> : <strong>≈ 3.5kΩ 23kΩ \approx 3.5 kΩ ~ 23 kΩ≈3.5kΩ 23kΩ</strong></p>
  </li>
  <li>
    <p><strong>R TR_TRT​</strong>: <strong>5 kΩ ~ 33 kΩ</strong> (분배 전류 ≈ 100~660 μA)</p>
  </li>
  <li>
    <p><strong>스텝</strong> : <strong>E96</strong></p>
  </li>
  <li>
    <p>주의: RL=100 kΩ와 병렬 효과로 목표치 대비 <strong>수 % 낮게</strong> 나오므로,</p>

    <ul>
      <li>
        <p>목표를 미리 약간 <strong>상향 보정</strong> 해서 설계하거나,</p>
      </li>
      <li>
        <p>후단에 <strong>버퍼(옵앰프 팔로어)</strong>를 추가하면 오차 크게 개선됨.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="옵션-3-incremental로그-스텝-탐색최적화-편의">옵션 3) Incremental(로그 스텝, 탐색/최적화 편의)</h1>

<p>최적화기가 <strong>연속→스냅</strong> 이 번거롭거나, Discrete 리스트가 너무 커질 때 유용.</p>

<ul>
  <li>
    <p><strong>아이디어</strong> : 로그 스케일 <strong>2% 스텝</strong>(≈E48)로 그리드 탐색 → <strong>최종에 E96 스냅</strong></p>
  </li>
  <li>
    <p><strong>R2 (Incremental)</strong> : <strong>680 Ω ~ 10 kΩ, 스텝 ×1.02</strong></p>

    <ul>
      <li>시퀀스: 680 → 694 → 708 → … → 10 kΩ</li>
    </ul>
  </li>
  <li>
    <p><strong>R1 (Incremental)</strong> : 범위를 R1≈2.30R2R_1 \approx 2.30 R_2R1​≈2.30R2​ 주변으로 잡되 넉넉히</p>

    <ul>
      <li><strong>1.5 kΩ ~ 30 kΩ, 스텝 ×1.02</strong></li>
    </ul>
  </li>
  <li>
    <p><strong>최종 생산치 반영</strong> : 최적점 근방을 <strong>E96 근사치</strong> 로 스냅하고 다시 측정(.measure 확인).</p>
  </li>
</ul>

<hr />

<h2 id="언제-continuous">언제 Continuous?</h2>

<ul>
  <li>
    <p><strong>초기 감도 스캔</strong> 용도로만 추천. 현실 부품 스냅이 따로 필요해 번거로움.</p>
  </li>
  <li>
    <p>만약 쓴다면:</p>

    <ul>
      <li>
        <p><strong>R2 (Continuous)</strong> : <strong>500 Ω ~ 33 kΩ</strong></p>
      </li>
      <li>
        <p><strong>R1 (Continuous)</strong> : <strong>1.2 kΩ ~ 75 kΩ</strong></p>
      </li>
      <li>
        <p>단, RL=100 kΩ이면 <strong>정확도 요구가 높을수록 R2 상한을 1 kΩ 부근으로 강하게 제한</strong> 해야 함(로딩오차 때문).</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="안전성-체크간단-산출">안전성 체크(간단 산출)</h2>

<ul>
  <li>
    <p><strong>전력/전압</strong> : Vin=3.6 V worst 가정, RT≥2.3 kΩR_T \ge 2.3\text{ kΩ}RT​≥2.3 kΩ일 때</p>

    <ul>
      <li>
        <p>분배 전류 ≤ 1.6 mA,</p>
      </li>
      <li>
        <p>PR1=I2R1≲P_{R1}=I^2R_1 \lesssimPR1​=I2R1​≲ 수 mW 수준 → <strong>0603 1/10W</strong> 여유 충분.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>노이즈</strong> : 4kTRT\sqrt{4kTR_T}4kTRT​​ → RT가 작을수록 유리(정확도 우선 프로파일과 정합).</p>
  </li>
</ul>

<hr />

<h2 id="한-줄-추천지금-상황-기준">한 줄 추천(지금 상황 기준)</h2>

<ul>
  <li>
    <p><strong>R1, R2는 “Discrete(E96, 1%)”로 운용</strong></p>
  </li>
  <li>
    <p><strong>R2: 680 Ω ~ 1.2 kΩ (E96), R1: 1.6 kΩ ~ 3.0 kΩ (E96)</strong></p>
  </li>
  <li>
    <p>최적화 후 결과를 <strong>E96 스냅 → .measure 재확인</strong>(Vout, 전류, 레귤레이션).</p>
  </li>
</ul>

<p>원하면 위 범위를 <strong>.step list</strong> 형태(예: E96 후보 20~40개)로 바로 붙여 쓰는 스니펫도 만들어줄게.</p>

<p class="chat--user">

.op 시뮬레이션 말고 .dc 를 사용하도록 해줄 수 있어?

</p>

<p>좋지! <strong>.op 대신 .dc만 사용</strong> 하도록 덱을 정리했어. 아래 3가지만 그대로 쓰면 돼.</p>

<hr />

<h1 id="1-finesim-netlist-dc-전용">1) FineSim Netlist (.dc 전용)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

*------------------------------------------------------------
* Voltage Divider Optimization Demo (FineSim/HSPICE compatible)
*   - 모든 해석은 .dc 기반
*------------------------------------------------------------
.option post=2 measform=1

* ===== 파라미터(최적화 변수/환경) =====
.param VSUP   = 3.3          * 공급전압 [V]
.param V_SPEC = 1.0          * 목표 출력 [V]
.param RS     = 50           * 소스 직렬저항 [Ohm]
.param RL     = 100k         * 부하 [Ohm]

* === 최적화 변수 (안 A: R1, R2 직접) ===
.param R1     = 1.80k        * 초기값(옵티마이저가 업데이트)
.param R2     = 820          * 초기값(옵티마이저가 업데이트)

* === 최적화 변수 (안 B: RT, K 사용) ===
* .param RT   = 3.0k         * R1+R2
* .param K    = 0.303        * R2/(R1+R2) ≈ Vout/Vin
* .param R1   = 'RT*(1-K)'
* .param R2   = 'RT*K'

* ===== 회로 =====
V1    VIN_SRC  0  DC 'VSUP'
RSRC  VIN_SRC  VIN  'RS'
RUP   VIN      VOUT 'R1'
RDN   VOUT     0    'R2'
RLOAD VOUT     0    'RL'

* ============================================================
* (A) Bias 점에서의 측정: .dc(더미 파라미터)로 단일점 해석
*   - .op을 쓰지 않고 .dc만으로 VOUT, 오차, 전류/전력 측정
* ============================================================
.dc param BIAS 0 0 1
.measure DC  VOUT_A      param='v(VOUT)'
.measure DC  VERR_A      param='v(VOUT)-V_SPEC'
.measure DC  VERR_ABS_A  param='abs(v(VOUT)-V_SPEC)'
.measure DC  IIN_A       param='-I(V1)'              * 소스 공급전류(+)
.measure DC  PIN_A       param='(-I(V1))*VSUP'       * 전체소비전력
.measure DC  RATIO_A     param='v(VOUT)/VSUP'
.measure DC  I_R1_A      param='(v(VIN)-v(VOUT))/R1'
.measure DC  I_R2_A      param='v(VOUT)/R2'
.measure DC  I_RL_A      param='v(VOUT)/RL'

* ============================================================
* (B) Line Regulation: Vin 변화에 대한 Vout 민감도 (.dc V1)
*   - 필요할 때만 사용: (A),(C)는 주석 처리하고 이 블록만 실행 권장
* ============================================================
*.dc V1 3.0 3.6 0.3
*.measure DC  VOUT_MIN_B  min v(VOUT)
*.measure DC  VOUT_MAX_B  max v(VOUT)
*.measure DC  LINE_REG_B  param='(VOUT_MAX_B - VOUT_MIN_B)/(3.6 - 3.0)'
*  단위: V/V  (원하면 %/V → 100*... )

* ============================================================
* (C) Load Regulation: RL 변화에 대한 Vout 민감도 (.dc param RL)
*   - 필요할 때만 사용: (A),(B)는 주석 처리하고 이 블록만 실행 권장
* ============================================================
*.dc param RL 20k 1Meg 20k
*.measure DC  VOUT_MIN_C  min v(VOUT)
*.measure DC  VOUT_MAX_C  max v(VOUT)
*.measure DC  LOAD_REG_C  param='(VOUT_MAX_C - VOUT_MIN_C)/VOUT_MAX_C'
*  상대 변화(무차원). 다른 정의가 필요하면 변경 OK

.end
</code></pre></div></div>

<blockquote>
  <p>사용 팁</p>

  <ul>
    <li>
      <p><strong>동시에 여러 .dc를 켜면</strong> 해석/측정이 섞일 수 있으니, (A)/(B)/(C) 중 <strong>필요한 블록만 남기고</strong> 나머지는 주석 처리해서 돌려줘.</p>
    </li>
    <li>
      <p>(A)는 <strong>단일 바이어스점</strong> 을 .dc로 강제 실행하는 방식이므로, <code class="language-plaintext highlighter-rouge">.op</code> 없이도 동일한 측정값을 얻는다.</p>
    </li>
  </ul>

</blockquote>

<hr />

<h1 id="2-최적화할-변수-parameter-1">2) 최적화할 변수 (Parameter)</h1>

<p>현실 부품 제약을 반영해 <strong>Discrete(E96, 1%)</strong>로 운용 권장.<br />
(부하 RL=100 kΩRL=100\,\text{k}\OmegaRL=100kΩ, 목표 Vout=1.0 VV_\text{out}=1.0\,\text{V}Vout​=1.0V, Vin=3.3 VV_\text{in}=3.3\,\text{V}Vin​=3.3V)</p>

<ul>
  <li>
    <p><strong>R2 (E96, Discrete)</strong> : <strong>680 Ω ~ 1.2 kΩ</strong></p>
  </li>
  <li>
    <p><strong>R1 (E96, Discrete)</strong> : <strong>1.6 kΩ ~ 3.0 kΩ</strong> ≈2.3×R2\approx 2.3 \times R2≈2.3×R2</p>
  </li>
  <li>
    <p>전류/정확도 타협을 원하면:</p>

    <ul>
      <li><strong>R2: 1.5 kΩ ~ 10 kΩ</strong> , <strong>R1: 3.5 kΩ ~ 23 kΩ</strong> (정확도는 몇 % 낮아질 수 있음)</li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>최적화기는 외부에서 후보를 순회(예: E96 리스트)하며 R1/R2를 갱신 → (A) 블록을 실행 → <code class="language-plaintext highlighter-rouge">.measure</code> 결과를 스코어로 사용.</p>
</blockquote>

<hr />

<h1 id="3-측정-대상-measure-1">3) 측정 대상 (Measure)</h1>

<p><strong>목표/제약</strong> 으로 바로 쓸 수 있게 이름을 고정해두었어.</p>

<ul>
  <li>
    <p>정확도: <code class="language-plaintext highlighter-rouge">VERR_ABS_A = |VOUT - V_SPEC|</code> → <strong>최소화</strong> (또는 <code class="language-plaintext highlighter-rouge">≤ 스펙</code>)</p>
  </li>
  <li>
    <p>전류/전력: <code class="language-plaintext highlighter-rouge">IIN_A</code>, <code class="language-plaintext highlighter-rouge">PIN_A</code> → <strong>최소화</strong></p>
  </li>
  <li>
    <p>비율 확인: <code class="language-plaintext highlighter-rouge">RATIO_A = VOUT/VSUP</code></p>
  </li>
  <li>
    <p>레귤레이션:</p>

    <ul>
      <li>
        <p><strong>라인</strong> : <code class="language-plaintext highlighter-rouge">LINE_REG_B</code> (작을수록 좋음)</p>
      </li>
      <li>
        <p><strong>부하</strong> : <code class="language-plaintext highlighter-rouge">LOAD_REG_C</code> (작을수록 좋음)</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="간단-워크플로-step-by-step">간단 워크플로 (step-by-step)</h2>

<ol>
  <li>
    <p>(A) 블록만 켜서 <strong>후보 R1/R2</strong> 에 대해 <code class="language-plaintext highlighter-rouge">.dc</code> 실행 → <code class="language-plaintext highlighter-rouge">VERR_ABS_A</code>, <code class="language-plaintext highlighter-rouge">IIN_A</code>, <code class="language-plaintext highlighter-rouge">PIN_A</code> 수집.</p>
  </li>
  <li>
    <p>상위 최적화기(파이썬/툴)에서 <strong>Discrete 후보(E96)</strong>를 탐색하며 목적함수 최소화.</p>
  </li>
  <li>
    <p>최종 후보에 대해 (B),(C) 블록을 각각 켜서 <strong>라인/부하 레귤레이션</strong> 검증.</p>
  </li>
  <li>
    <p>필요 시 범위/목표 조정 → 반복.</p>
  </li>
</ol>

<p>추가로, E96 후보 리스트를 바로 쓸 수 있게 <code class="language-plaintext highlighter-rouge">.include</code> 또는 외부 스크립트용 <strong>리스트 텍스트</strong> 가 필요하면 알려줘. 원하는 범위로 만들어 줄게.</p>

<p class="chat--user">

그냥 tran 해석으로 바꿔줄 수 있어?

</p>

<p>좋아, <strong>.tran(과도 해석)만 쓰는 전압 분배기 데모</strong> 로 바꿔서 정리했어.<br />
아래 덱은 <strong>바이패스 커패시터(CLOAD)</strong>를 둬서 유의미한 과도 응답이 나오도록 했고, <strong>정착 오차/라이즈 타임/전류·에너지</strong> 같은 측정을 <code class="language-plaintext highlighter-rouge">.measure tran</code>으로 정의했어. (부하 스텝을 주는 <strong>옵션 블록</strong> 도 포함)</p>

<hr />

<h1 id="1-finesim-netlist--tran-전용-복붙-실행">1) FineSim Netlist — .tran 전용 (복붙 실행)</h1>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

*------------------------------------------------------------
* Voltage Divider Transient Demo (FineSim/HSPICE compatible)
*   - 모든 해석은 .tran(과도) 기반
*------------------------------------------------------------
.option post=2 measform=1

* ===== 파라미터 =====
.param VSUP   = 3.3          * 공급전압 [V]
.param V_SPEC = 1.0          * 목표 출력 [V]
.param RS     = 50           * 소스 직렬저항 [Ohm]
.param RL     = 100k         * 부하 [Ohm]
.param R1     = 1.80k        * 최적화 변수 (Discrete/E96 권장)
.param R2     = 820          * 최적화 변수 (Discrete/E96 권장)
.param CLOAD  = 100n         * 출력 노드 바이패스(과도 응답 유도)
.param TRISE  = 1n
.param TFALL  = 1n
.param TSTOP  = 1m
.param V_BAND = 10m          * 정착 허용 밴드(±10 mV)

* ===== 회로 =====
V1    VIN_SRC  0   PULSE(0 'VSUP' 0 'TRISE' 'TFALL' '10*TSTOP' '20*TSTOP')
RSRC  VIN_SRC  VIN 'RS'
RUP   VIN      VOUT 'R1'
RDN   VOUT     0    'R2'
RLOAD VOUT     0    'RL'
COUT  VOUT     0    'CLOAD'

* ===== 과도 해석 =====
.tran 'TSTOP/1000' 'TSTOP'

* ===== 측정 (기본: 단일 상승 스텝 응답) =====
.measure TRAN VOUT_FINAL  AVG  v(VOUT) FROM='0.8*TSTOP' TO='TSTOP'          ; 최종값 근사
.measure TRAN VERR_ABS    PARAM='abs(VOUT_FINAL - V_SPEC)'                  ; 최종 오차
.measure TRAN IIN_AVG     AVG  '-I(V1)' FROM=0 TO='TSTOP'                    ; 평균 소스전류
.measure TRAN QIN         INTEG '-I(V1)' FROM=0 TO='TSTOP'                   ; 총 전하 [C]
.measure TRAN EAPP        PARAM='VSUP*QIN'                                   ; 근사 에너지 [J]
.measure TRAN TR10_90     TRIG v(VOUT) VAL='0.1*V_SPEC' RISE=1               \
                          TARG v(VOUT) VAL='0.9*V_SPEC' RISE=1               ; 10–90% 라이즈
.measure TRAN TSETTLE     WHEN 'abs(v(VOUT)-V_SPEC)-V_BAND' = 0 CROSS=1      ; ±밴드 최초 진입 시간

* ===== [옵션] 부하 스텝 응답(드룹/재정착) =====
* - 필요할 때만 해제해서 사용 (스위치로 병렬 부하를 추가)
*.param TLD   = '0.3*TSTOP'          * 부하 온 시간
*.param TW    = '0.2*TSTOP'          * 온 유지 시간
*.param RSTEP = 10k                   * 추가 부하(작아질수록 더 무거운 부하)
*VCTRL VCTL   0 PULSE(0 1 'TLD' 1n 1n 'TW' '2*TSTOP')
*.model SLD SW VT=0.5 VH=0 RON=1 ROFF=1e12
*RLD2  VOUT   NX 'RSTEP'
*S1    NX     0  VCTL 0 SLD
*.measure TRAN VOUT_MIN_L  MIN  v(VOUT) FROM='TLD' TO='TLD+TW'               ; 드룹 최소값
*.measure TRAN VOUT_PRE    FIND v(VOUT) AT='TLD-1n'
*.measure TRAN VDROP       PARAM='VOUT_PRE - VOUT_MIN_L'                      ; 드룹 크기
*.measure TRAN TSETTLE_L   WHEN 'abs(v(VOUT)-V_SPEC)-V_BAND' = 0 CROSS=2      ; 부하 스텝 후 재정착
.end
</code></pre></div></div>

<hr />

<h1 id="2-최적화-변수-parameter">2) 최적화 변수 (Parameter)</h1>

<ul>
  <li>
    <p><strong>R1, R2</strong> : 실제 생산을 고려해 <strong>Discrete(E96, 1%)</strong> 운용 권장</p>

    <ul>
      <li>
        <p>예시 범위(정확도 우선): <strong>R2 = 680 Ω ~ 1.2 kΩ</strong> , <strong>R1 ≈ 2.3×R2 → 1.6 kΩ ~ 3.0 kΩ</strong></p>
      </li>
      <li>
        <p>탐색은 외부 스크립트/옵티마이저에서 E96 후보를 순회 → <code class="language-plaintext highlighter-rouge">.measure</code> 결과를 스코어로 사용</p>
      </li>
    </ul>
  </li>
</ul>

<p>(원하면 <code class="language-plaintext highlighter-rouge">RT, K</code> 방식으로도 바꿔줄 수 있어: <code class="language-plaintext highlighter-rouge">R1=RT*(1-K)</code>, <code class="language-plaintext highlighter-rouge">R2=RT*K</code>)</p>

<hr />

<h1 id="3-측정-대상-measure-2">3) 측정 대상 (Measure)</h1>

<ul>
  <li>
    <p><strong>정확도</strong> : <code class="language-plaintext highlighter-rouge">VOUT_FINAL</code>, <code class="language-plaintext highlighter-rouge">VERR_ABS</code></p>
  </li>
  <li>
    <p><strong>속도</strong> : <code class="language-plaintext highlighter-rouge">TR10_90</code>, <code class="language-plaintext highlighter-rouge">TSETTLE(±V_BAND)</code></p>
  </li>
  <li>
    <p><strong>전류/에너지</strong> : <code class="language-plaintext highlighter-rouge">IIN_AVG</code>, <code class="language-plaintext highlighter-rouge">QIN</code>, <code class="language-plaintext highlighter-rouge">EAPP</code></p>
  </li>
  <li>
    <p><strong>(옵션) 부하 스텝 성능</strong> : <code class="language-plaintext highlighter-rouge">VDROP</code>, <code class="language-plaintext highlighter-rouge">TSETTLE_L</code></p>
  </li>
</ul>

<blockquote>
  <p>메모</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">V_BAND</code>(기본 10 mV)만 조절하면 정착 스펙을 손쉽게 변경 가능.</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">CLOAD</code>은 과도 거동(속도/드룹)을 만드는 핵심 파라미터이니 시스템에 맞춰 설정해줘.</p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">PULSE</code> 폭을 <code class="language-plaintext highlighter-rouge">10*TSTOP</code>로 길게 잡아서 시뮬레이션 내내 High 상태가 유지되도록 했어.</p>
    </li>
  </ul>

</blockquote>

<p>필요하면 위 범위의 <strong>E96 리스트(.step list)</strong>나, <code class="language-plaintext highlighter-rouge">RT·K</code> 파라미터화 버전(같은 <code class="language-plaintext highlighter-rouge">.tran</code> 측정 유지)도 바로 만들어줄게.</p>

<p class="chat--user">

CLOAD를 넣은 이유 좀 쉽게 설명해줘

</p>

<p>좋아, 핵심만 <strong>쉽게</strong> 정리해볼게. (step-by-step)</p>

<ol>
  <li>
    <p><strong>그냥 R만 있으면, 시간적인 드라마가 없다</strong><br />
전압 분배기(R1–R2–RL)만 있으면 회로는 “메모리”가 없는 <strong>순수 저항망</strong> 이야. .tran에서 입력을 PULSE로 바꿔도, Vout은 <strong>입력 파형을 즉시 비율만큼 나눠</strong> 따라갈 뿐(이론적으로는 소스의 상승/하강시간만큼만 변함).<br />
→ 이러면 <strong>Rise time / Settling time 같은 과도 지표가 의미가 거의 없어</strong>(거의 입력 파형에 의해 정해짐).</p>
  </li>
  <li>
    <p><strong>CLOAD를 달아야 ‘시간상수’가 생긴다</strong><br />
CLOAD가 붙으면 Vout 노드는 <strong>(저항망의 테브난 저항 R_th) + 캐패시터</strong> 구조가 돼서 <strong>RC 시간상수 τ</strong> 가 생긴다.</p>

    <ul>
      <li>
        <p>Rth≈(R1+RS)∥(R2∥RL)R_{\text{th}} \approx (R_1+R_S) \parallel (R_2 \parallel R_L)Rth​≈(R1​+RS​)∥(R2​∥RL​)</p>
      </li>
      <li>
        <p>τ=Rth⋅CLOAD\tau = R_{\text{th}} \cdot C_{\text{LOAD}}τ=Rth​⋅CLOAD​<br />
이제 Vout은 지수적으로 천천히 올라가고(1−e−t/τ1-e^{-t/\tau}1−e−t/τ), <strong>TR(10–90%)</strong> , <strong>정착시간(TSETTLE)</strong> 같은 과도 지표를 <strong>회로의 파라미터로</strong> 제어·측정할 수 있어.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>현실 파라사이트를 간단히 대변</strong><br />
실제 보드는 배선/부하(ADC 샘플링캡, 다음 단계 입력 C 등) 때문에 <strong>수~수백 nF 수준의 등가 C</strong> 가 거의 항상 존재. CLOAD는 이런 <strong>현실적인 로딩/디커플링</strong> 을 간단히 모델링해줘.</p>

    <ul>
      <li>
        <p>노이즈/리플을 필터링(고주파에서 출력 임피던스 ↓)</p>
      </li>
      <li>
        <p>부하 스텝 시 <strong>즉각적인 드룹을 완화</strong>(C가 순간적으로 전류 공급)하고, 그 뒤 τ\tauτ로 재정착</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>수치 감(예: R1=1.8 kΩ, R2=820 Ω, RS=50 Ω, RL=100 kΩ, CLOAD=100 nF)</strong></p>

    <ul>
      <li>
        <p>R2∥RL≈814 ΩR_2 \parallel R_L \approx 814 \,\OmegaR2​∥RL​≈814Ω, R1+RS=1850 ΩR_1+R_S=1850 \,\OmegaR1​+RS​=1850Ω</p>
      </li>
      <li>
        <p>Rth≈566 Ω⇒τ≈56.6 μsR_{\text{th}} \approx 566 \,\Omega \Rightarrow \tau \approx 56.6\,\mu sRth​≈566Ω⇒τ≈56.6μs</p>
      </li>
      <li>
        <p>대략 <strong>TR(10–90%) ≈ 2.2τ ≈ 124 μs</strong> , <strong>정착 4–5τ ≈ 0.23–0.28 ms</strong><br />
→ 이런 값들이 <strong>CLOAD나 저항값을 바꾸면 예측 가능하게 변</strong> 하니, 최적화/트레이드오프가 가능해진다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>요약</strong></p>

    <ul>
      <li>
        <p><strong>왜 넣었나?</strong> .tran에서 <strong>의미 있는 과도 특성</strong>(속도·정착·드룹·에너지)을 만들고, <strong>현실 파라사이트/디커플링 효과</strong> 를 반영하려고.</p>
      </li>
      <li>
        <p><strong>어떻게 쓰나?</strong> 원하는 응답 속도면 τ\tauτ 목표를 정하고 CLOADC_{\text{LOAD}}CLOAD​ 또는 저항 합/비율을 조정. 빠르게 하고 싶으면 CLOAD↓(또는 RT↓), 리플/드룹 억제는 CLOAD↑(단, 기동 전류/에너지는 ↑).</p>
      </li>
    </ul>
  </li>
</ol>

<p>원하면, 위 RthR_{\text{th}}Rth​ 공식으로 목표 <strong>정착시간/라이즈타임 → 필요한 CLOAD</strong> 를 바로 역산해주는 스니펫(.measure/파라미터 계산)도 덱에 추가해줄게.</p>]]></content><author><name>hvppyarchive</name></author><category term="circuit" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">HSPICE StatEye 설정 방법</title><link href="https://hvppyarchive.github.io/circuit/stateye/" rel="alternate" type="text/html" title="HSPICE StatEye 설정 방법" /><published>2025-10-16T19:49:25+09:00</published><updated>2025-10-16T19:49:25+09:00</updated><id>https://hvppyarchive.github.io/circuit/stateye</id><content type="html" xml:base="https://hvppyarchive.github.io/circuit/stateye/"><![CDATA[<p class="chat--user">

matlab에서는 stateye simulation 할 때 Rx CDR Mean/Rj/Dj/DCD 등도 반영이 가능한데, primesim hspice stateye에서는 Tx/Rx의 RJ/PJ/PDF FILE 만 입력이 가능해. DCD나 CDR Mean과 같은 요소를 반영해서 hspice에서 볼 수 있을까

</p>

<p>가능해요. PrimeSim HSPICE의 StatEye도 DCD, CDR 평균 오프셋(Mean)을 반영할 수 있습니다. 방법을 단계별로 정리할게요.</p>

<h1 id="1-dcd듀티-사이클-왜곡-반영">1) DCD(듀티 사이클 왜곡) 반영</h1>

<ul>
  <li>
    <p><strong>Incident 포트(P-Element)</strong>에 <code class="language-plaintext highlighter-rouge">DCD</code>와 <code class="language-plaintext highlighter-rouge">DCD_TYPE</code>을 주면 됩니다.</p>
  </li>
  <li>
    <p>DCD 효과는 상승/하강 폭 비대칭을 다뤄야 하므로 <strong>.STATEYE에서 <code class="language-plaintext highlighter-rouge">EDGE=2</code>(double-edge)</strong>를 켜세요.<br />
예시:</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

* 기본 파라미터
.param UI=100p
.param TRF='0.1*UI'

* 포트 정의 (Tx = incident, Rx = probe)
P1 txp txn 0 port=1  DCD=10  DCD_TYPE=1   ; 10% 고정 DCD
P2 rxo  0   port=2

* StatEye 분석 (double-edge로 DCD 평가)
.STATEYE T='UI' TRF='TRF' INCIDENT_PORT=1 PROBE_PORT=2 EDGE=2
.PROBE stateye eye(2) ber(2)
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">DCD_TYPE</code>: 0=없음, 1=고정, 2=삼각 변동, 3=사인 변동. (공식 문서에 명시) <a href="https://picture.iczhiku.com/resource/eetop/WHiEDyLJfpPZFbMM.pdf">picture.iczhiku.com</a></p>
  </li>
  <li>
    <p>HSPICE 사용 가이드도 DCD는 <strong>incident 포트 키워드</strong> 로 지정한다고 못 박고 있어요. <a href="https://picture.iczhiku.com/resource/eetop/WHiEDyLJfpPZFbMM.pdf">picture.iczhiku.com</a></p>
  </li>
</ul>

<h1 id="2-cdr-mean평균-위상-오프셋-반영">2) CDR Mean(평균 위상 오프셋) 반영</h1>

<p>CDR 평균은 “샘플링 기준의 <strong>고정 시간 오프셋</strong> ”으로 해석하면 됩니다. HSPICE에선 두 가지 루트가 있어요.</p>

<h3 id="a-rx가-ibis-ami-cdr-를-제공하는-경우권장">A. Rx가 <strong>IBIS-AMI CDR</strong> 를 제공하는 경우(권장)</h3>

<ul>
  <li>
    <p>Rx 포트(P-Element)에 <strong>AMI 연결</strong> 후 <code class="language-plaintext highlighter-rouge">AMI_CDR=1</code>을 켜면, <strong>AMI_GetWave의 CDR 복구클록</strong> 을 아이 생성에 사용합니다.</p>
  </li>
  <li>
    <p>평균 오프셋/PPM 같은 파라미터는 <strong>.ami 파일</strong> 에서 설정(벤더 매뉴얼 기준).<br />
예시:</p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

P2 rxo 0 port=2  AMI_OBJ='./libMyRx.so' AMI_PARAM='./MyRx.ami' AMI_CDR=1
.STATEYE T='UI' TRF='TRF' INCIDENT_PORT=1 PROBE_PORT=2 EDGE=2
</code></pre></div></div>

<ul>
  <li>문서: <code class="language-plaintext highlighter-rouge">AMI_OBJ</code>, <code class="language-plaintext highlighter-rouge">AMI_PARAM</code>, <code class="language-plaintext highlighter-rouge">AMI_CDR</code>는 포트 키워드이며, CDR 출력으로 아이를 만들 수 있다고 나옵니다. <a href="https://picture.iczhiku.com/resource/eetop/WHiEDyLJfpPZFbMM.pdf?utm_source=chatgpt.com">picture.iczhiku.com</a></li>
</ul>

<h3 id="b-ami-없이-고정-평균-오프셋만-주고-싶은-경우">B. <strong>AMI 없이</strong> 고정 평균 오프셋만 주고 싶은 경우</h3>

<ul>
  <li>
    <p><strong>.STATEYE 옵션의 <code class="language-plaintext highlighter-rouge">TD_In</code>, <code class="language-plaintext highlighter-rouge">TD_PROBE</code></strong>로 <strong>입력/프로브 쪽 시간 오프셋</strong> 을 직접 부여하세요.</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">TD_In</code> : incident 쪽 기준을 미세 이동</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">TD_PROBE</code> : 아이 추출 시의 샘플링 기준을 미세 이동<br />
예시(샘플링을 +0.02UI 지연):</p>
      </li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

.STATEYE T='UI' TRF='TRF' INCIDENT_PORT=1 PROBE_PORT=2 EDGE=2 TD_PROBE='0.02*UI'
</code></pre></div></div>

<ul>
  <li>이 키워드는 HSPICE Quick Reference에 정식으로 기재돼 있습니다. <a href="https://www.synopsys.com/content/dam/synopsys/verification/hspice-quickrefcard-M-2017-03.pdf">synopsys.com</a></li>
</ul>

<h1 id="3-참고-커스텀-지터-pdf로-mean-표현">3) (참고) 커스텀 지터 PDF로 Mean 표현</h1>

<ul>
  <li>StatEye는 <strong>커스텀 지터 분포</strong> 를 지원해(포트에서 정의) <strong>비영(非0) 평균 PDF</strong> 로도 Mean을 모사할 수 있습니다. 매뉴얼의 “Specifying Custom Jitter Distribution” 절을 참고하세요. (버전에 따라 키워드명이 다를 수 있음) <a href="https://picture.iczhiku.com/resource/eetop/WHiEDyLJfpPZFbMM.pdf">picture.iczhiku.com</a></li>
</ul>

<hr />

<h2 id="최소-동작-예-dcd--cdr-mean002ui-동시-반영">최소 동작 예 (DCD + CDR Mean(0.02UI) 동시 반영)</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice

.param UI=100p
.param TRF='0.1*UI'

P1 txp txn 0 port=1  DCD=10 DCD_TYPE=1
P2 rxo 0   port=2  AMI_OBJ='./libMyRx.so' AMI_PARAM='./MyRx.ami' AMI_CDR=1

.STATEYE T='UI' TRF='TRF' INCIDENT_PORT=1 PROBE_PORT=2 EDGE=2 TD_PROBE='0.02*UI'
.PROBE stateye eye(2) ber(2)
</code></pre></div></div>

<h3 id="요약">요약</h3>

<ul>
  <li>
    <p><strong>DCD</strong> : incident 포트에 <code class="language-plaintext highlighter-rouge">DCD</code>, <code class="language-plaintext highlighter-rouge">DCD_TYPE</code> + <code class="language-plaintext highlighter-rouge">.STATEYE EDGE=2</code>. <a href="https://picture.iczhiku.com/resource/eetop/WHiEDyLJfpPZFbMM.pdf">picture.iczhiku.com</a></p>
  </li>
  <li>
    <p><strong>CDR Mean</strong> :</p>

    <ul>
      <li>
        <p><strong>있으면</strong> AMI CDR 사용(<code class="language-plaintext highlighter-rouge">AMI_CDR=1</code>, .ami에서 PPM/오프셋 지정). <a href="https://picture.iczhiku.com/resource/eetop/WHiEDyLJfpPZFbMM.pdf?utm_source=chatgpt.com">picture.iczhiku.com</a></p>
      </li>
      <li>
        <p><strong>없으면</strong> <code class="language-plaintext highlighter-rouge">.STATEYE</code>의 <code class="language-plaintext highlighter-rouge">TD_In</code>/<code class="language-plaintext highlighter-rouge">TD_PROBE</code>로 고정 오프셋. <a href="https://www.synopsys.com/content/dam/synopsys/verification/hspice-quickrefcard-M-2017-03.pdf">synopsys.com</a></p>
      </li>
    </ul>
  </li>
</ul>

<p>필요하시면 현재 쓰시는 넷리스트 일부를 보내주세요. 위 방식으로 바로 적용 가능한 형태로 손봐 드릴게요.</p>

<p class="chat--user">

DJ랑 PJ랑은 같은거야?

</p>

<p>짧게: <strong>아니요. PJ는 DJ의 한 종류예요.</strong></p>

<ul>
  <li>
    <p><strong>DJ (Deterministic Jitter)</strong> : 원인이 규칙적·재현 가능해서 <strong>유한 범위( bounded )</strong> 안에 머무는 지터의 총칭.</p>
  </li>
  <li>
    <p><strong>PJ (Periodic Jitter)</strong> : DJ 중에서도 <strong>주기성</strong>(한두 개 이상의 톤)으로 나타나는 성분.</p>
  </li>
</ul>

<h3 id="관계-정리-step-by-step">관계 정리 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>지터 분류 큰 그림</strong></p>

    <ul>
      <li>
        <p><strong>TJ(BER)</strong> ≈ <strong>DJ_pp</strong> + 2·Q(BER)·σ_RJ</p>
      </li>
      <li>
        <p>여기서 <strong>RJ</strong>(Random Jitter)는 가우시안, 무한대 가능(unbounded).</p>
      </li>
      <li>
        <p><strong>DJ</strong> 는 유한(bounded)이며 보통 아래가 포함됩니다:</p>

        <ul>
          <li>
            <p><strong>PJ</strong> : 사인/펄스열 같은 <strong>주기성 지터</strong></p>
          </li>
          <li>
            <p><strong>DCD</strong> : 듀티 비대칭</p>
          </li>
          <li>
            <p><strong>DDJ/ISI</strong> : 데이터 패턴/채널에 의존</p>
          </li>
          <li>
            <p>(벤더에 따라 <strong>BUJ</strong> 등으로 더 쪼개기도 함)</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>왜 헷갈리나?</strong></p>

    <ul>
      <li>측정기/툴 메뉴에서 <strong>PJ를 별도 입력</strong> 하게 하다 보니 PJ ≠ DJ처럼 보일 수 있지만, 실제로는 <strong>DJ 안에 PJ가 포함</strong> 됩니다.</li>
    </ul>
  </li>
  <li>
    <p><strong>툴 입력 팁 (PrimeSim HSPICE/StatEye 관점)</strong></p>

    <ul>
      <li>
        <p><strong>PJ</strong> : <code class="language-plaintext highlighter-rouge">PJ</code>(진폭/주파수)로 직접 넣는 <strong>DJ의 일부</strong></p>
      </li>
      <li>
        <p><strong>DCD</strong> : <code class="language-plaintext highlighter-rouge">DCD</code>/<code class="language-plaintext highlighter-rouge">DCD_TYPE</code>으로 지정 (또는 Tx 파형 비대칭으로 구현) → 이것도 <strong>DJ</strong></p>
      </li>
      <li>
        <p><strong>DDJ</strong> : 채널 ISI/이퀄라이저 설정으로 자연스럽게 발생 → 이것도 <strong>DJ</strong></p>
      </li>
      <li>
        <p><strong>RJ</strong> 는 따로 <code class="language-plaintext highlighter-rouge">RJ(σ)</code>로 지정</p>
      </li>
    </ul>
  </li>
</ol>

<h3 id="예시로-구분">예시로 구분</h3>

<ul>
  <li>
    <p>3 MHz, 0.05 UI의 사인 지터 주입 → <strong>PJ</strong> (⇒ DJ의 일부)</p>
  </li>
  <li>
    <p>듀티 48/52% 비대칭 → <strong>DCD</strong> (⇒ DJ의 일부)</p>
  </li>
  <li>
    <p>긴 채널·불충분한 EQ로 비트 패턴마다 지연이 달라짐 → <strong>DDJ</strong> (⇒ DJ의 일부)</p>
  </li>
</ul>

<p>필요하시면 현재 사용하는 StatEye 입력(예: PJ 톤, DCD%, RJ σ) 보내주세요. 세팅이 DJ 전체를 적절히 커버하는지 같이 점검해 드릴게요.</p>

<p class="chat--user">

B. AMI 없이 고정 평균 오프셋만 주고 싶은 경우 -&gt; 이러면 stateye가 안 작아지는거 아니야?

</p>

<p>맞아요. <strong>AMI 없이<code class="language-plaintext highlighter-rouge">TD_PROBE</code>로 평균(Mean)만 옮기면 StatEye “아이(eye)” 자체는 안 작아집니다.</strong><br />
그건 <strong>분산(σ)이나 DJ_pp가 늘지 않고, 시간축만 일정량 평행 이동</strong> 하기 때문이에요. HSPICE의 <code class="language-plaintext highlighter-rouge">.STATEYE</code>에서 <code class="language-plaintext highlighter-rouge">TD_PROBE/TD_In</code>은 고정 시간 오프셋(위상 이동) 옵션이고, 형태를 줄이는 옵션이 아닙니다. <a href="https://www.synopsys.com/content/dam/synopsys/verification/hspice-quickrefcard-M-2017-03.pdf?utm_source=chatgpt.com">synopsys.com</a></p>

<h1 id="왜-안-작아지나-step-by-step">왜 안 작아지나 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>StatEye의 아이 컨투어</strong> 는 RJ(σ)와 DJ_pp(DDJ, DCD, PJ 등)의 <strong>폭</strong> 으로 결정됩니다.<br />
평균만 바꾸는 건 <strong>위치</strong>(phase)를 바꾸는 거라 컨투어 모양은 동일하게 옮겨질 뿐이에요. (아이 축소는 σ↑ 또는 DJ_pp↑일 때 생깁니다.) <a href="https://people.engr.tamu.edu/spalermo/ecen689/stateye_theory_sanders_designcon_2004.pdf?utm_source=chatgpt.com">people.engr.tamu.edu</a></p>
  </li>
  <li>
    <p>대신, <strong>고정된 샘플링 위상</strong> 에서 보는 <strong>BER/배스텁</strong> 은 통째로 <strong>좌우로 이동</strong> 합니다. 즉 “UI/2에서의 마진”은 줄어들 수 있지만, 2D 아이 그림 자체는 같아 보여요. 배스텁과 아이의 관계는 표준 StatEye 설명 자료에도 정리돼 있습니다. <a href="https://www.ieee802.org/3/ap/public/signal_adhoc/ghiasi_01_0904.pdf?utm_source=chatgpt.com">ieee802.org</a></p>
  </li>
  <li>
    <p>HSPICE에서도 <code class="language-plaintext highlighter-rouge">.PROBE stateye ber(...)</code>/<code class="language-plaintext highlighter-rouge">eye(...)</code>로 이 변화를 확인할 수 있어요(배스텁/아이 출력). <a href="https://www.scribd.com/document/807844871/Primesim-Hspice-Si?utm_source=chatgpt.com">Scribd</a></p>
  </li>
</ol>

<h1 id="아이를-실제로-작아지게-보고-싶다면">아이를 실제로 “작아지게” 보고 싶다면</h1>

<ul>
  <li>
    <p><strong>CDR의 추적 특성</strong>(저주파 추적·고주파 미추적)을 모델에 넣어야 합니다. 가장 깔끔한 방법은 <strong>Rx AMI + <code class="language-plaintext highlighter-rouge">AMI_CDR=1</code></strong>로 CDR을 활성화하는 것. 일반적인 CDR은 평균 TIE를 자동으로 0으로 재센터링하기 때문에(= Mean 오프셋 자체는 제거), <strong>미추적 대역의 지터가 아이 축소</strong> 로 나타납니다. <a href="https://picture.iczhiku.com/resource/eetop/WHiEDyLJfpPZFbMM.pdf?utm_source=chatgpt.com">picture.iczhiku.com+1</a></p>
  </li>
  <li>
    <p><strong>비-AMI 근사</strong> 라면, 고정 Mean 대신 <strong>지터 폭을 늘리는 성분을 추가</strong> 해야 합니다. 예를 들어</p>

    <ul>
      <li>
        <p><strong>PJ 톤</strong> 을 CDR 대역 밖(“미추적”이라 가정하는) 주파수에 넣어 <strong>DJ_pp를 키우거나</strong> ,</p>
      </li>
      <li>
        <p><strong>DCD</strong>(상승/하강 비대칭)로 <strong>엣지 위치를 갈라지게</strong> 해서 유효 수평 여유를 줄이세요(아이 축소).</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">PDF FILE</code>을 쓰더라도 <strong>평균만 이동</strong> 시키면 여전히 이동만 있을 뿐이므로, <strong>분산(꼬리)</strong>를 키워야 축소가 표현됩니다. (구체 옵션은 버전별 매뉴얼 참고)</p>
      </li>
    </ul>
  </li>
</ul>

<h1 id="실무-체크리스트">실무 체크리스트</h1>

<ol>
  <li>
    <p>아이 축소가 목적이면 <strong>RJ σ / PJ / DCD / DDJ(EQ/채널)</strong> 중 무엇으로 폭을 키울지 결정</p>
  </li>
  <li>
    <p><strong>AMI 사용 가능</strong> 하면 Rx AMI + <code class="language-plaintext highlighter-rouge">AMI_CDR=1</code> 권장(현실적인 축소/배스텁) <a href="https://picture.iczhiku.com/resource/eetop/WHiEDyLJfpPZFbMM.pdf?utm_source=chatgpt.com">picture.iczhiku.com</a></p>
  </li>
  <li>
    <p>AMI 없이 <strong>오프셋 영향만</strong> 보고싶으면:</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>spice
     
.STATEYE ... TD_PROBE='0.02*UI'
.PROBE  stateye eye(2) ber(2)
</code></pre></div>    </div>
  </li>
</ol>

<p>→ 아이 컨투어는 동일(이동), <strong>배스텁 위치</strong> 가 0.02 UI만큼 이동. <a href="https://www.synopsys.com/content/dam/synopsys/verification/hspice-quickrefcard-M-2017-03.pdf?utm_source=chatgpt.com">synopsys.com+1</a></p>

<p>요약: <strong>“고정 Mean = 위치 이동”</strong>이라 아이 자체는 안 작아집니다. <strong>아이 축소</strong> 를 원하면 <strong>CDR 동작(AMI) 또는 지터 폭(DJ_pp, σ) 증가</strong> 로 모델링해야 해요. <a href="https://www.synopsys.com/content/dam/synopsys/verification/hspice-quickrefcard-M-2017-03.pdf?utm_source=chatgpt.com">synopsys.com+4</a></p>

<p>원하시면 현재 넷리스트 옵션(RJ/PJ/DCD/TD_PROBE/AMI) 보내주세요. 목적(오프셋 vs 실제 축소)에 맞게 바로 적용 가능한 설정으로 정리해 드릴게요.</p>]]></content><author><name>hvppyarchive</name></author><category term="circuit" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Async request 취소 처리</title><link href="https://hvppyarchive.github.io/comfyui/async-request-cancel/" rel="alternate" type="text/html" title="Async request 취소 처리" /><published>2025-10-16T11:57:41+09:00</published><updated>2025-10-16T11:57:41+09:00</updated><id>https://hvppyarchive.github.io/comfyui/async-request-cancel</id><content type="html" xml:base="https://hvppyarchive.github.io/comfyui/async-request-cancel/"><![CDATA[<p class="chat--user">

comfyui에서 custom node의 메인 함수를 async로 만들 수 있게 되었어. 그리고, openai python 패키지에서 AsyncOpenAI와 aiohttp를 이용해서 async하게 request를 보낼 수 있어. 근데 문제는 UI에서 stop을 보내고 interrupt가 즉시 동작하지 않는다는거야. request를 보낸 후 await 하는 도중에 작업이 취소되게 하고 싶어

</p>

<p>좋아, 핵심은 “네트워크 요청 await 중에도 바로 끊기게” 만드는 거야.<br />
asyncio에서는 <strong>취소 신호와 실제 작업을 ‘경쟁(race)’</strong> 시키면 돼. 즉, 요청을 <code class="language-plaintext highlighter-rouge">Task</code>로 만들고, UI에서 오는 stop 신호(이하 <code class="language-plaintext highlighter-rouge">stop_event</code>)의 <code class="language-plaintext highlighter-rouge">wait()</code>도 <code class="language-plaintext highlighter-rouge">Task</code>로 만들어서 <strong>둘 중 먼저 끝나는 쪽</strong> 을 보고 행동을 바꾸면 즉시 중단이 가능해.</p>

<p>아래를 그대로 가져다 쓸 수 있게 단계별(그리고 안전한) 패턴으로 정리했어.</p>

<hr />

<h1 id="1-공통-유틸-취소-가능한-await-래퍼">1) 공통 유틸: 취소 가능한 await 래퍼</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">class</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">UI stop/interrupt로 중단되었음을 나타내는 애플리케이션 레벨 예외.</span><span class="sh">"""</span>
    <span class="k">pass</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    coro(코루틴)와 stop_event.wait()를 경쟁시킨다.
    - stop이 먼저 오면 coro Task를 cancel하고 정리한 뒤 StopByUser를 올린다.
    - 요청이 먼저 끝나면 stop 대기 Task를 취소하고 결과를 반환한다.
    </span><span class="sh">"""</span>
    <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
    <span class="n">stop_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">stop_event</span><span class="p">.</span><span class="nf">wait</span><span class="p">())</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
            <span class="p">{</span><span class="n">req_task</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
        <span class="p">)</span>

        <span class="k">if</span> <span class="n">stop_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
            <span class="c1"># UI가 stop을 눌렀다: 네트워크 요청을 취소
</span>            <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="c1"># 취소 정리 끝까지 기다려 경고/리소스 누수 방지
</span>            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">req_task</span>
            <span class="k">raise</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopped by user</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 요청이 먼저 끝남: stop 대기는 취소
</span>        <span class="n">stop_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">stop_task</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">req_task</span>  <span class="c1"># 결과 리턴
</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 바깥 컨텍스트(ComfyUI 실행기)가 이 Task 자체를 취소한 경우: 바로 전파
</span>        <span class="k">raise</span>

    <span class="k">finally</span><span class="p">:</span>
        <span class="c1"># 혹시 남아있으면 확실히 정리
</span>        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">(</span><span class="n">req_task</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">t</span>
</code></pre></div></div>

<blockquote>
  <p>중요: 코드 어딘가에 <code class="language-plaintext highlighter-rouge">except Exception:</code> 같은 광범위한 예외 처리기가 있다면, <strong>반드시</strong><br />
 <code class="language-plaintext highlighter-rouge">except asyncio.CancelledError: raise</code> 를 <strong>맨 위에 따로</strong> 두어 취소가 삼켜지지 않게 하세요.<br />
 (파이썬 버전에 따라 <code class="language-plaintext highlighter-rouge">CancelledError</code>가 일반 <code class="language-plaintext highlighter-rouge">Exception</code>에 잡힐 수 있으니 명시적으로 분기하는 게 안전합니다.)</p>
</blockquote>

<hr />

<h1 id="2-comfyui-커스텀-노드mainasync에서-적용">2) ComfyUI 커스텀 노드(main=async)에서 적용</h1>

<p>ComfyUI가 stop을 누르면 내부적으로 “중단 플래그/이벤트”가 켜질 텐데, 그걸 <code class="language-plaintext highlighter-rouge">stop_event</code>(asyncio.Event 호환)로 받는다고 가정해 보자.<br />
(ComfyUI에서 제공하는 실제 인터럽트 신호를 어떻게 얻는지는 프로젝트마다 다를 수 있어. 노드에 주입 받거나, 실행 컨텍스트에서 꺼내 쓰는 식으로 연결해 주면 된다.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">class</span> <span class="nc">AsyncLLMNode</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">main</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1"># stop_event는 ComfyUI 쪽에서 넘겨주도록 연결해 두는 걸 권장
</span>        <span class="k">if</span> <span class="n">stop_event</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># 최악의 경우를 대비한 더미 (즉시 완료되지 않음)
</span>            <span class="n">stop_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>

        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>  <span class="c1"># 필요시 api_key, base_url 등 설정
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># ◇ 비-스트리밍 요청 예시
</span>            <span class="n">coro</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
            <span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">)</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>

        <span class="k">except</span> <span class="n">StopByUser</span><span class="p">:</span>
            <span class="c1"># ComfyUI가 즉시 멈췄음을 위쪽으로 알리거나, 빈 결과/상태 메시지를 반환
</span>            <span class="c1"># ComfyUI 쪽 정책에 맞춰 raise/return 중 하나를 선택
</span>            <span class="k">raise</span>  <span class="c1"># 보통은 raise로 전파하는 게 인터럽트 체인에 충실
</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 바깥에서 Task 자체가 취소된 경우
</span>            <span class="k">raise</span>

        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># http 커넥션 정리
</span>            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="3-스트리밍부분-응답일-때도-즉시-중단">3) 스트리밍(부분 응답)일 때도 즉시 중단</h1>

<p>스트리밍은 내부적으로 <code class="language-plaintext highlighter-rouge">async for</code>로 청크를 읽는 동안 <code class="language-plaintext highlighter-rouge">__anext__()</code>에서 블록돼서<br />
stop을 눌러도 바로 반응을 못할 수 있어. 이때도 <strong>chunk 읽기 vs stop</strong> 를 경쟁시키면 해결돼.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="c1"># 새로운 Responses API 예시 (필요에 맞춰 Chat Completions로 바꿔도 동일 패턴)
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span>
    <span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
        <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>  <span class="c1"># 텍스트 청크 이터레이터
</span>        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
            <span class="n">stop_task</span>  <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">stop_event</span><span class="p">.</span><span class="nf">wait</span><span class="p">())</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
                <span class="p">{</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
            <span class="p">)</span>

            <span class="k">if</span> <span class="n">stop_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="c1"># 읽기 중단 + 연결 정리
</span>                <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">next_chunk</span>
                <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># 서버 쪽 스트림도 닫기
</span>                <span class="k">raise</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopped by user</span><span class="sh">"</span><span class="p">)</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
            <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                <span class="c1"># 스트림 종료
</span>                <span class="k">break</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">stop_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">stop_task</span>

        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
</code></pre></div></div>

<p>ComfyUI 노드에서:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">stop_event</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">stop_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>
    <span class="k">except</span> <span class="n">StopByUser</span><span class="p">:</span>
        <span class="k">raise</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-aiohttp-순수-사용-시-예시">4) aiohttp 순수 사용 시 예시</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">from</span> <span class="n">yarl</span> <span class="kn">import</span> <span class="n">URL</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">fetch_json_cancellable</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">aiohttp</span><span class="p">.</span><span class="nc">ClientSession</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
        <span class="c1"># POST 코루틴 생성
</span>        <span class="k">async</span> <span class="k">def</span> <span class="nf">do_post</span><span class="p">():</span>
            <span class="k">async</span> <span class="k">with</span> <span class="n">session</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span> <span class="k">as</span> <span class="n">resp</span><span class="p">:</span>
                <span class="n">resp</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">resp</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>

        <span class="k">return</span> <span class="k">await</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="nf">do_post</span><span class="p">(),</span> <span class="n">stop_event</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>참고: <code class="language-plaintext highlighter-rouge">aiohttp</code>는 Task 취소 시 소켓을 닫으며 <code class="language-plaintext highlighter-rouge">CancelledError</code>가 전파돼요.<br />
 위의 패턴처럼 <em>항상</em> loser task를 <code class="language-plaintext highlighter-rouge">cancel()</code>하고 <code class="language-plaintext highlighter-rouge">await</code>해서 경고 없이 정리하세요.</p>
</blockquote>

<hr />

<h1 id="5-흔한-즉시-중단이-안-되는-원인-체크리스트">5) 흔한 “즉시 중단이 안 되는” 원인 체크리스트</h1>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">CancelledError</code>를 삼키는 예외 처리</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">except Exception:</code> 이 있다면 바로 위에 <code class="language-plaintext highlighter-rouge">except asyncio.CancelledError: raise</code> 를 추가.</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">await</code> 없이 동기 블로킹 코드</strong></p>

    <ul>
      <li>CPU 바운드 루프/블로킹 I/O는 이벤트 루프를 막아 취소가 늦어짐 → <code class="language-plaintext highlighter-rouge">await</code> 가능한 API로 바꾸거나, <code class="language-plaintext highlighter-rouge">run_in_executor()</code>로 분리.</li>
    </ul>
  </li>
  <li>
    <p><strong>스트리밍 루프에서 stop을 안 보고 있음</strong></p>

    <ul>
      <li>위의 “스트리밍 경쟁” 패턴으로 <code class="language-plaintext highlighter-rouge">__anext__()</code>와 <code class="language-plaintext highlighter-rouge">stop_event.wait()</code>를 경쟁시키기.</li>
    </ul>
  </li>
  <li>
    <p><strong>정리(cleanup)를 취소가 덮어버림</strong></p>

    <ul>
      <li>정리 과정은 <code class="language-plaintext highlighter-rouge">asyncio.shield()</code>로 감싸거나 <code class="language-plaintext highlighter-rouge">with contextlib.suppress(asyncio.CancelledError)</code>로 마무리.</li>
    </ul>
  </li>
  <li>
    <p><strong>긴 네트워크 타임아웃</strong></p>

    <ul>
      <li>취소 자체는 타임아웃과 무관하지만, 라이브러리 정리가 지연될 수 있음 → 세션/스트림을 <code class="language-plaintext highlighter-rouge">close()</code> 해주기.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="6-comfyui-쪽-stop_event-연결-팁">6) ComfyUI 쪽 ‘stop_event’ 연결 팁</h1>

<ul>
  <li>
    <p>프로젝트에 따라 다르지만, 보통 <strong>실행 컨텍스트</strong> 나 <strong>노드 인자 주입</strong> 으로 <code class="language-plaintext highlighter-rouge">asyncio.Event</code>를 받을 수 있게 해두면 가장 깔끔해.</p>
  </li>
  <li>
    <p>만약 지금은 그런 훅이 없다면:</p>

    <ul>
      <li>
        <p>최소한 주기적으로 확인하는 polling을 넣는 대신, <strong>위의 경쟁 패턴</strong> 을 사용하면 “await 중에도” 바로 반응한다.</p>
      </li>
      <li>
        <p>stop을 누를 때 노드 측에 <code class="language-plaintext highlighter-rouge">stop_event.set()</code>이 호출되도록 연결(주입)만 해주면 된다.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>필요하면 너의 현재 노드 코드 일부를 붙여줘. 거기에 맞춰 <code class="language-plaintext highlighter-rouge">await_cancellable</code>을 딱 들어맞게 리팩터링해 줄게.</p>

<p class="chat--user">

stop_event를 넣는다는게 뭔지 모르겠어. comfyui 내부적으로 interrupt 버튼이 있잖아? 그 버튼을 눌렀을 때 취소되면 좋겠어

</p>

<p>좋아, “UI의 Interrupt 버튼(또는 /interrupt)이 눌리면 내 async 커스텀 노드가 지금 <code class="language-plaintext highlighter-rouge">await</code> 중인 OpenAI 요청을 즉시 끊고 싶다”가 목표지요. 핵심은 <strong>ComfyUI가 인터럽트를 “플래그”로만 알리고, 실제로는 노드가 협조적으로 취소를 처리해야</strong> 한다는 점이에요. 아래를 그대로 넣으면 됩니다 — 단계별로 설명할게요.</p>

<hr />

<h2 id="1-comfyui가-인터럽트를-어떻게-알리냐">1) ComfyUI가 인터럽트를 어떻게 알리냐</h2>

<ul>
  <li>
    <p>프론트엔드 Interrupt 버튼/단축키가 <strong><code class="language-plaintext highlighter-rouge">POST /interrupt</code></strong> 를 호출합니다. 서버는 내부 인터럽트 플래그를 세팅해요. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI+2</a></p>
  </li>
  <li>
    <p>실행기는 다음 노드 경계 혹은 노드 내부에서 체크될 때 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code></strong> 으로 중단을 전파하고, 웹소켓 이벤트 <strong><code class="language-plaintext highlighter-rouge">execution_interrupted</code></strong> 를 보냅니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>단, <strong>노드가 블로킹 상태(타이트 루프/블로킹 I/O)</strong> 면 인터럽트가 바로 처리되지 않을 수 있습니다. 그래서 노드가 <strong>주기적으로 인터럽트를 체크</strong> 하거나 <strong><code class="language-plaintext highlighter-rouge">await</code> 를 취소</strong>해 줘야 해요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/3131?utm_source=chatgpt.com">GitHub</a></p>
  </li>
</ul>

<hr />

<h2 id="2-커스텀-노드에서-협조적-취소를-붙이는-가장-쉬운-방법">2) 커스텀 노드에서 “협조적 취소”를 붙이는 가장 쉬운 방법</h2>

<p>ComfyUI는 <code class="language-plaintext highlighter-rouge">comfy.model_management.throw_exception_if_processing_interrupted()</code> 를 제공합니다. 이걸 주기적으로 호출하면 인터럽트 시 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 을 던져요. (공식 코드와 여러 예시 노드에서 사용됩니다.) <a href="https://gitee.com/bug531/comfy-ui/blob/master/main.py?skip_mobile=true&amp;utm_source=chatgpt.com">Gitee+2</a></p>

<p>아이디어: <strong>요청 태스크</strong> 와 <strong>인터럽트 감시 태스크</strong> 를 동시에 돌리고, 감지되면 요청 태스크를 <code class="language-plaintext highlighter-rouge">cancel()</code>로 끊습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 커스텀 노드 파일 안
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_watch_interrupt_and_cancel</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">ComfyUI 인터럽트가 오면 주어진 task를 cancel()</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>  <span class="c1"># 폴링 주기
</span>            <span class="n">mm</span><span class="p">.</span><span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>  <span class="c1"># 인터럽트면 예외 발생
</span>    <span class="k">except</span> <span class="n">mm</span><span class="p">.</span><span class="n">InterruptProcessingException</span><span class="p">:</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>  <span class="c1"># 메인 요청 취소
</span>
<span class="k">class</span> <span class="nc">MyAsyncNode</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">example</span><span class="sh">"</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>  <span class="c1"># 필요 시 api_key, base_url, timeout 등 설정
</span>
        <span class="c1"># 1) OpenAI 비동기 요청을 태스크로 생성
</span>        <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
            <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>          <span class="c1"># 선택: 요청 타임아웃
</span>                <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span>         <span class="c1"># 선택: 재시도 비활성화(취소 응답을 빠르게)
</span>            <span class="p">)</span>
        <span class="p">)</span>

        <span class="c1"># 2) 인터럽트 감시 태스크 시작
</span>        <span class="n">watcher</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_watch_interrupt_and_cancel</span><span class="p">(</span><span class="n">req_task</span><span class="p">))</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 3) 결과 대기 — 인터럽트 시 req_task가 CancelledError로 깨짐
</span>            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 4) ComfyUI에 “사용자 인터럽트”로 알리려면 이 예외로 승격
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># 5) 워처 정리
</span>            <span class="n">watcher</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">watcher</span>
</code></pre></div></div>

<h3 id="왜-이렇게-하느냐">왜 이렇게 하느냐?</h3>

<ul>
  <li>
    <p><strong>UI 버튼</strong> → <code class="language-plaintext highlighter-rouge">/interrupt</code> → 내부 플래그 on. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>감시 코루틴이 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code> 호출 중 <strong>예외를 받음</strong> → <strong><code class="language-plaintext highlighter-rouge">req_task.cancel()</code></strong> → <code class="language-plaintext highlighter-rouge">await</code>가 즉시 <code class="language-plaintext highlighter-rouge">CancelledError</code> 로 깨짐 → 이를 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 으로 다시 던져</strong> ComfyUI가 <em>“Processing interrupted”</em> 경로로 종료. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI+1</a></p>
  </li>
</ul>

<hr />

<h2 id="3-대안-asynciowait로-레이스-구성">3) 대안: <code class="language-plaintext highlighter-rouge">asyncio.wait()</code>로 “레이스” 구성</h2>

<p>폴링 코드를 줄이고 싶다면, “인터럽트 대기 코루틴”과 요청을 <strong>레이스</strong> 시키는 방법도 있어요:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt</span><span class="p">():</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
        <span class="n">mm</span><span class="p">.</span><span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>

<span class="c1"># ...
</span><span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(...))</span>
<span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt</span><span class="p">())</span>

<span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
    <span class="p">{</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
    <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="nf">return </span><span class="p">(</span> <span class="p">(</span><span class="k">await</span> <span class="n">req_task</span><span class="p">).</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="4-자주-겪는-함정--팁">4) 자주 겪는 함정 &amp; 팁</h2>

<ul>
  <li>
    <p><strong>블로킹 코드</strong>(동기 HTTP, 무한 루프 등)가 있으면 인터럽트가 “즉시” 안 먹힙니다. 네트워크는 반드시 <strong>aiohttp/비동기</strong> 를 쓰고, 루프 안에는 간간이 <code class="language-plaintext highlighter-rouge">mm.throw_exception_if_processing_interrupted()</code> 를 넣으세요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/3131?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p><strong>OpenAI 비동기 클라이언트</strong> 는 <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code> 를 쓰면 됩니다(요청 옵션에 <code class="language-plaintext highlighter-rouge">timeout</code> 등 전달 가능).</p>
  </li>
  <li>
    <p><strong>취소 전파</strong> : <code class="language-plaintext highlighter-rouge">asyncio.CancelledError</code> 를 <strong>잡아서</strong> <code class="language-plaintext highlighter-rouge">mm.InterruptProcessingException</code> 으로 <strong>다시 던지는 것</strong> 이 포인트입니다 — 그래야 UI에 정상적인 “중단”으로 보입니다.</p>
  </li>
  <li>
    <p><strong>키보드 단축키</strong> 도 인터럽트를 보냅니다(Ctrl+Alt+Enter). <a href="https://docs.comfy.org/interface/shortcuts?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
</ul>

<hr />

<h2 id="5-동작-원리-한눈-요약">5) 동작 원리 한눈 요약</h2>

<ol>
  <li>
    <p>유저가 Interrupt 클릭 → <strong><code class="language-plaintext highlighter-rouge">POST /interrupt</code></strong> 호출 → 내부 플래그 on. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>내 노드의 “인터럽트 워처”가 플래그 감지 → <strong>요청 태스크 cancel()</strong>.</p>
  </li>
  <li>
    <p>내 코드가 <code class="language-plaintext highlighter-rouge">CancelledError</code> 를 받아 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 재-발생</strong> → 실행기에서 <strong><code class="language-plaintext highlighter-rouge">execution_interrupted</code></strong> 이벤트 전송 &amp; 즉시 중단. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
</ol>

<p>이렇게 붙이면 “UI에서 정지 → 곧장 당신의 <code class="language-plaintext highlighter-rouge">await</code>가 끊기는” 동작을 안정적으로 만들 수 있어요.</p>

<p class="chat--user">

3번처럼 구성했어. 그런데 너가 만들어준 노드들이 다수의 노드가 동시에 실행될수도 있는데 그러면 그 중에 하나만 취소되는거 같기도해. 왜냐면 throw_exception_if_processing_interrupted() 함수가 interrupt_processing을 False로 만들거든. 그러면 두 번째 노드는 취소된지 모르지 않을까

</p>

<p>맞아. 네가 본 그대로야. ComfyUI의 인터럽트 플래그는 <strong>“한 번만 소비되는(edge-triggered)”</strong> 동작을 해.<br />
소스 보면:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">interrupt_current_processing(True)</code> → 전역 플래그를 <strong>True</strong> 로 셋팅.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">processing_interrupted()</code> → <strong>플래그를 읽기만</strong> 함(안 지움). <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code> → 플래그가 <strong>True면 False로 지우고</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던짐(즉, <em>소비</em>). 그래서 <strong>먼저 호출한 노드만</strong> 확실히 취소 신호를 보게 되고, 뒤늦게 체크한 다른 노드는 “몰랐다”가 될 수 있어. <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
</ul>

<p>그래서 “여러 노드가 동시에 돌 때 하나만 취소되는 것 같다”는 네 추측이 정확해.</p>

<hr />

<h1 id="이렇게-바꿔서-해결해">이렇게 바꿔서 해결해</h1>

<p>핵심은 <strong>노드 내부에서 플래그를 ‘읽기만’ 하되 지우지 않는 것</strong> 이야.<br />
즉, 감시 코루틴은 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>(소비) 대신 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>(비소비)로 체크하고, <strong>직접<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 raise</strong> 하자. 그러면 <strong>모든</strong> 실행 중 노드가 같은 인터럽트를 감지하고 동시에 멈출 수 있어.</p>

<h2 id="1-레이스-패턴요청-vs-인터럽트-수정본">1) 레이스 패턴(요청 vs 인터럽트) 수정본</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">():</span>
    <span class="c1"># 플래그를 '읽기만' 하는 루프: 여러 노드가 동시에 True를 감지 가능
</span>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mm</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>           <span class="c1"># ← 소비 안 함
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">MyAsyncNode</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">example</span><span class="sh">"</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
                <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                    <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
                    <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                <span class="p">)</span>
            <span class="p">)</span>
            <span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                        <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="c1"># 인터럽트가 먼저 옴: 네트워크 요청 즉시 취소
</span>                <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">req_task</span>
                <span class="c1"># 여기서 throw_exception_if_processing_interrupted()를 부르면
</span>                <span class="c1"># 플래그를 '지워' 버려 다른 노드가 못 봄 → 쓰지 말자.
</span>                <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

            <span class="c1"># 요청이 먼저 끝남
</span>            <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">int_task</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,)</span>

        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 상위에서 태스크 자체를 취소한 경우
</span>            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<blockquote>
  <p>포인트: <strong>노드 코드에서는<code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하지 않는다.</strong><br />
 모든 실행 중 노드가 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>로 동시에 감지 → 각자 자신의 작업을 취소하고 <strong>직접</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던진다.<br />
 이렇게 해야 플래그가 한 노드에 의해 먼저 ‘소비’되어 사라지는 일이 없다. (해당 함수가 플래그를 False로 만들고 예외를 던지는 동작은 소스에 명시돼 있음) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
</blockquote>

<h2 id="2-스트리밍-루프도-동일-원리">2) 스트리밍 루프도 동일 원리</h2>

<p>청크 읽기(<code class="language-plaintext highlighter-rouge">__anext__</code>)와 인터럽트 감시를 레이스시키되, 감시는 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>만 사용:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
        <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>
        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
            <span class="n">int_task</span>   <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                         <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">next_chunk</span>
                <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
            <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">int_task</span>

        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="왜-이게-안전한가-step-by-step">왜 이게 안전한가 (step-by-step)</h1>

<ol>
  <li>
    <p>사용자가 UI에서 <strong>Interrupt 버튼</strong> → 서버가 <code class="language-plaintext highlighter-rouge">interrupt_current_processing(True)</code>로 전역 플래그를 킴.</p>
  </li>
  <li>
    <p>각 노드의 감시 코루틴이 <strong>지우지 않는</strong> <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>로 True를 감지. (동시에 여러 노드 OK) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
  <li>
    <p>감지한 노드는 <strong>자기 네트워크 태스크를<code class="language-plaintext highlighter-rouge">cancel()</code></strong> 하고 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 <strong>직접 raise</strong>.</p>
  </li>
  <li>
    <p>실행기는 이 예외를 받아 워크플로를 “Processing interrupted”로 종료.</p>
  </li>
  <li>
    <p>플래그 초기화는 <strong>코어 쪽</strong>(다음 실행 준비 타이밍)에 의해 처리되거나, 코어가 적절히 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 한 번만 호출해 소비함. (이 함수가 플래그를 지우는 동작은 소스에 명확) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
</ol>

<blockquote>
  <p>요약: <strong>노드 단에서는 ‘읽기(레벨 트리거)’만 하고, 지우는(엣지 소비) 일은 코어에게 맡겨라.</strong></p>
</blockquote>

<hr />

<h1 id="추가-체크리스트">추가 체크리스트</h1>

<ul>
  <li>
    <p>예외 처리에서 <code class="language-plaintext highlighter-rouge">CancelledError</code>는 <strong>절대 삼키지 말고 전파</strong> 하세요. (취소 감도가 떨어지는 대표 원인)</p>
  </li>
  <li>
    <p>aiohttp/OpenAI 비동기는 태스크 취소 시 소켓을 닫고 <code class="language-plaintext highlighter-rouge">CancelledError</code>를 던집니다. 취소 후에는 <code class="language-plaintext highlighter-rouge">with suppress(asyncio.CancelledError): await task</code>로 <strong>정리까지</strong> 해 주세요.</p>
  </li>
  <li>
    <p>장시간 블로킹/CPU 작업이 있으면 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>를 루프에 간간히 넣어 주세요. (블로킹이면 인터럽트가 늦게 반영)</p>
  </li>
</ul>

<p>이대로 바꾸면 “동시에 도는 여러 노드 중 하나만 멈추는” 현상 없이, <strong>모두가 즉시 멈추는</strong> 동작이 됩니다.</p>

<p class="chat--user">

Exception을 여러 노드에서 뿌려도 돼?

</p>

<p>짧게 답하면: <strong>네, 여러 노드에서<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 동시에(또는 거의 동시에) 던져도 됩니다.</strong><br />
ComfyUI 실행기는 이 예외를 “취소 신호”로 취급하고 상위 실행 루프에서 잡아서 프롬프트 실행을 중단하도록 설계되어 있어요. 한 노드가 던지든, 여러 노드가 던지든 결과는 같고, 추가로 던져지는 예외들은 상위에서 동일하게 처리(로그만 남기고 무시)됩니다. 공식 문서에도 <em>“노드가 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던질 때 실행이 중단된다”</em>고 명시돼 있어요. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서</a></p>

<p>조금 더 구체적으로, 단계별로 생각해보면:</p>

<ol>
  <li>
    <p><strong>UI의 Stop(또는<code class="language-plaintext highlighter-rouge">/interrupt</code>) → 실행 중단 플래그 세트</strong><br />
프론트엔드가 중단을 보내면 서버가 현재 워크플로 실행을 멈추는 라우트를 처리합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI 공식 문서</a></p>
  </li>
  <li>
    <p><strong>노드단 체크 → 예외 발생</strong><br />
각 노드(혹은 진행률 훅/대기 지점)에서 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하면, 플래그가 켜져 있을 때 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던집니다. 이건 의도된 흐름이에요. 실행기는 이 예외를 특별취급하여 “Processing interrupted”로 처리하고 <code class="language-plaintext highlighter-rouge">execution_interrupted</code> 메시지를 브로드캐스트합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서+1</a></p>
  </li>
  <li>
    <p><strong>여러 노드가 동시에 던져도 문제 없음</strong><br />
실행기는 노드 실행을 감싸는 상위 try/except에서 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 잡아 “중단”으로 정리합니다. 다른 노드에서도 같은 예외가 연달아 터져도 동일하게 중단 처리로 흘러갑니다(중복 로그 정도만 생길 수 있음). <a href="https://github.com/comfyanonymous/ComfyUI/discussions/6766?utm_source=chatgpt.com">GitHub+1</a></p>
  </li>
</ol>

<p>그래서 실무 팁은 이렇습니다:</p>

<ul>
  <li>
    <p><strong>각 노드에서</strong> 진입 시점과 <strong>모든<code class="language-plaintext highlighter-rouge">await</code> 직후</strong>에<br />
<code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하세요.</p>
  </li>
  <li>외부 비동기 요청(예: <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code>/<code class="language-plaintext highlighter-rouge">aiohttp</code>)이 있다면 이렇게 감싸면 안전합니다:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfy.model_management</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">InterruptProcessingException</span><span class="p">,</span>
    <span class="n">throw_exception_if_processing_interrupted</span><span class="p">,</span>
<span class="p">)</span>
    
<span class="k">async</span> <span class="k">def</span> <span class="nf">FUNCTION</span><span class="p">(...):</span>
    <span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>
    <span class="n">task</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 예: 대기 전에 한 번 더 체크
</span>        <span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>
        <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(...))</span>
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">task</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="k">except</span> <span class="n">InterruptProcessingException</span><span class="p">:</span>
        <span class="c1"># 외부 요청/태스크 정리
</span>        <span class="k">if</span> <span class="n">task</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
            <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">task</span>
        <span class="k">raise</span>  <span class="c1"># 꼭 재전파! (중단으로 인식)
</span></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>절대</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 일반 <code class="language-plaintext highlighter-rouge">Exception</code>으로 삼켜서 리턴하지 마세요. 그러면 “중단”이 아닌 “실패”로 기록됩니다(로그와 UI 이벤트가 달라짐). <code class="language-plaintext highlighter-rouge">execution_interrupted</code> 이벤트는 이 예외가 그대로 올라갈 때만 발생합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서</a></p>
  </li>
  <li>여러 노드가 동시에 실행될 수 있는 구조라면 <strong>각 노드가 독립적으로 같은 예외를 던지도록</strong> 두는 게 맞습니다. 중복 예외는 상위 실행기에서 정리되며, 전체 프롬프트는 한 번만 “중단”으로 마감됩니다. <a href="https://github.com/comfyanonymous/ComfyUI/discussions/6766?utm_source=chatgpt.com">GitHub</a></li>
</ul>

<p>덤: 브라우저 탭을 닫아도 중단이 발생할 수 있다는 이슈들이 있어요(탭을 닫으면 세션이 끊기며 인터럽트가 트리거). API/헤드리스로 돌릴 때는 이 점을 유의하세요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/6713?utm_source=chatgpt.com">GitHub+1</a></p>

<p>정리: <strong>여러 노드에서 마음 편히<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던지세요.</strong> 이것이 ComfyUI가 의도한 “즉시 중단” 메커니즘이고, 예외가 여러 개여도 상위 실행기에서 안전하게 처리됩니다.</p>

<p class="chat--user">

_wait_for_interrupt_level_trigger()에서 raise 안하고 그냥 return 하는건 어때 어차피 밖에서 raise 하잖아

</p>

<p>가능해. <strong><code class="language-plaintext highlighter-rouge">_wait_for_interrupt_level_trigger()</code>에서 <code class="language-plaintext highlighter-rouge">raise</code> 대신 <code class="language-plaintext highlighter-rouge">return</code></strong> 해도 원하는 “레이스(요청 vs 인터럽트)” 동작은 똑같이 만들어져. 실무적으로는 <em>헬퍼에서 예외 스택을 남기지 않으니</em> 로그가 더 깔끔해지는 장점도 있어.</p>

<p>아래처럼 바꾸면 돼 — 단계별로 정리할게.</p>

<hr />

<h1 id="핵심-아이디어-step-by-step">핵심 아이디어 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>헬퍼는 “인터럽트를 감지하면 끝났다”는 신호만 반환</strong> 한다.</p>
  </li>
  <li>
    <p><strong>바깥(콜러)</strong>는 <code class="language-plaintext highlighter-rouge">asyncio.wait(..., FIRST_COMPLETED)</code>로 <code class="language-plaintext highlighter-rouge">req_task</code>(네트워크 요청)와 <code class="language-plaintext highlighter-rouge">int_task</code>(인터럽트 감시) 중 <strong>먼저 끝난 쪽</strong> 을 확인한다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">int_task</code>가 먼저 끝났다면 <strong>요청 태스크를 cancel() 하고</strong> , 여기서 <strong>한 번만</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던진다.</p>
  </li>
</ol>

<hr />

<h1 id="헬퍼-return-버전-레벨-트리거-소비-안-함">헬퍼: return 버전 (레벨 트리거, 소비 안 함)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>

<span class="c1"># sentinel: 결과를 명확히 구분하고 싶다면 씀
</span><span class="n">INTERRUPTED</span> <span class="o">=</span> <span class="nf">object</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">(</span><span class="n">poll_ms</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">50</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">ComfyUI 인터럽트 플래그를 </span><span class="sh">'</span><span class="s">읽기만</span><span class="sh">'</span><span class="s"> 하다가 감지되면 반환.</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">sleep_s</span> <span class="o">=</span> <span class="n">poll_ms</span> <span class="o">/</span> <span class="mf">1000.0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">sleep_s</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">mm</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>   <span class="c1"># ← 소비하지 않음(여러 노드 동시 감지 가능)
</span>                <span class="k">return</span> <span class="n">INTERRUPTED</span>            <span class="c1"># 또는 True 같은 간단한 값
</span>    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 바깥에서 int_task를 취소하면 여기로 옴. 정리 후 전파.
</span>        <span class="k">raise</span>
</code></pre></div></div>

<hr />

<h1 id="비-스트리밍-요청에-적용">비-스트리밍 요청에 적용</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_node</span><span class="p">(</span><span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
        <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
            <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
            <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="p">)</span>
    <span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                     <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
            <span class="c1"># 1) 네트워크 요청 즉시 취소
</span>            <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">req_task</span>

            <span class="c1"># 2) (선택) 감시 결과를 확인해도 됨
</span>            <span class="n">_</span> <span class="o">=</span> <span class="n">int_task</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>  <span class="c1"># INTERRUPTED 같은 값
</span>
            <span class="c1"># 3) 여기서 단 한 번 raise
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

        <span class="c1"># 요청이 먼저 끝남 → 감시 태스크 취소/정리
</span>        <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">int_task</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
        <span class="k">return</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>

    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 상위에서 이 노드 태스크 자체를 취소했을 때
</span>        <span class="k">raise</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="스트리밍에도-동일-패턴">스트리밍에도 동일 패턴</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">stream_node</span><span class="p">(</span><span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
            <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>
            <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
                <span class="n">int_task</span>   <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                             <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="c1"># 스트림/청크 읽기 취소 및 정리
</span>                    <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                    <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                        <span class="k">await</span> <span class="n">next_chunk</span>
                    <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                    <span class="c1"># 여기서 raise 한 번
</span>                    <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

                <span class="k">try</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
                <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">finally</span><span class="p">:</span>
                    <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                    <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                        <span class="k">await</span> <span class="n">int_task</span>

            <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="return-방식의-장단점-요약">return 방식의 장단점 요약</h1>

<ul>
  <li>
    <p>✅ <strong>장점</strong></p>

    <ul>
      <li>
        <p>헬퍼 내부에서 예외 스택이 안 생겨 <strong>로그가 단정</strong> 해짐.</p>
      </li>
      <li>
        <p>“누가 예외를 던지나?”가 <strong>콜러 한 지점</strong> 으로 모여 <strong>정책 일관성</strong> 확보.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>⚠️ <strong>주의</strong></p>

    <ul>
      <li>
        <p>나중에 실수로 <code class="language-plaintext highlighter-rouge">int_task.result()</code>를 다른 곳에서 써버리면 <code class="language-plaintext highlighter-rouge">None</code>을 받아 헷갈릴 수 있어.<br />
→ 위처럼 <strong><code class="language-plaintext highlighter-rouge">INTERRUPTED</code> 센티널</strong>을 반환해 명시적으로 구분하는 걸 추천.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">req_task</code>가 먼저 끝난 케이스에서 <code class="language-plaintext highlighter-rouge">int_task</code>를 <strong>반드시 cancel &amp; await</strong>(suppress)로 정리해야 경고가 안 남아.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="여러-노드-동시-실행일-때의-의미">여러 노드 동시 실행일 때의 의미</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">processing_interrupted()</code>를 <strong>읽기만</strong> 하는 이 방식은 <strong>모든 노드가 같은 인터럽트를 함께 감지</strong> 할 수 있게 해.</p>
  </li>
  <li>
    <p>각 노드는 자기 요청을 끊고, <strong>콜러 한 군데에서만</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던지면 됨(혹은 각 노드가 자기 컨텍스트에서 던져도 무방).</p>
  </li>
  <li>
    <p>핵심은 <strong><code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 노드 내부 헬퍼에서 호출하지 않는 것</strong>(그 함수는 플래그를 지우므로 ‘첫 번째 소비’ 문제가 생김).</p>
  </li>
</ul>

<hr />

<p>정리: <strong>응, 헬퍼에서<code class="language-plaintext highlighter-rouge">raise</code> 대신 <code class="language-plaintext highlighter-rouge">return</code> 해도 완전히 OK.</strong><br />
오히려 깔끔할 때가 많고, 위 패턴대로 센티널을 반환해주면 실수도 줄일 수 있어.</p>

<p class="chat--user">

동시에 요청하는 요청 수를 제한하고 싶어. (예를 들어 8개로) 최대한 간단히 추가할 수 있는 방법 추천해줘

</p>

<p>좋아—<strong>가장 간단한 방법은 전역<code class="language-plaintext highlighter-rouge">asyncio.BoundedSemaphore</code> 하나로 동시 네트워크 요청 수를 제한</strong>하는 거야.<br />
요청을 만드는 부분만 살짝 감싸면 되고, 취소(Interrupt)랑도 잘 맞물려서 자동으로 슬롯이 반환돼.</p>

<h1 id="step-by-step">step-by-step</h1>

<ol>
  <li>
    <p><strong>전역 세마포어</strong> 를 한 곳에 정의 (예: 8개 동시 요청 제한).</p>
  </li>
  <li>
    <p><strong>모든 네트워크 요청 함수</strong>(OpenAI, aiohttp, 스트리밍 포함)를 <code class="language-plaintext highlighter-rouge">async with SEM</code> 블록으로 감싼다.</p>
  </li>
  <li>
    <p>기존의 <strong>레이스 패턴</strong>(요청 태스크 vs 인터럽트 감시)은 그대로 유지한다.</p>

    <ul>
      <li>인터럽트가 먼저 오면 <code class="language-plaintext highlighter-rouge">req_task.cancel()</code> → <code class="language-plaintext highlighter-rouge">async with</code>가 빠져나가며 <strong>슬롯 자동 반환</strong>.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="1-공유-세마포어-한-파일로-만들어-여러-노드에서-import">1) 공유 세마포어 (한 파일로 만들어 여러 노드에서 import)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># throttle.py
</span><span class="kn">import</span> <span class="n">os</span><span class="p">,</span> <span class="n">asyncio</span>

<span class="n">OPENAI_MAX_CONCURRENCY</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">OPENAI_MAX_CONCURRENCY</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">8</span><span class="sh">"</span><span class="p">))</span>
<span class="n">OPENAI_SEMA</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">BoundedSemaphore</span><span class="p">(</span><span class="n">OPENAI_MAX_CONCURRENCY</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>여러 커스텀 노드에서 같은 세마포어를 쓰려면 이렇게 <strong>공유 모듈</strong> 로 빼는 게 깔끔해.</p>
</blockquote>

<hr />

<h2 id="2-비-스트리밍-요청에-붙이기-기존-레이스-코드에-최소-수정">2) 비-스트리밍 요청에 붙이기 (기존 레이스 코드에 최소 수정)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># node_async.py
</span><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">from</span> <span class="n">throttle</span> <span class="kn">import</span> <span class="n">OPENAI_SEMA</span>

<span class="n">INTERRUPTED</span> <span class="o">=</span> <span class="nf">object</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">(</span><span class="n">poll_ms</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">50</span><span class="p">):</span>
    <span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">comfy</span><span class="p">.</span><span class="n">model_management</span> <span class="k">as</span> <span class="n">mm</span>
    <span class="n">sleep_s</span> <span class="o">=</span> <span class="n">poll_ms</span> <span class="o">/</span> <span class="mf">1000.0</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">sleep_s</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mm</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>   <span class="c1"># 소비 無
</span>            <span class="k">return</span> <span class="n">INTERRUPTED</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_openai_chat_with_limit</span><span class="p">(</span><span class="n">client</span><span class="p">:</span> <span class="n">AsyncOpenAI</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c1"># ▼ 동시성 제한은 여기 한 줄!
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">OPENAI_SEMA</span><span class="p">:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
            <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
            <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_node</span><span class="p">(</span><span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_openai_chat_with_limit</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">))</span>
    <span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
            <span class="c1"># 인터럽트 우선: 요청 태스크 취소 → 세마포어 슬롯 자동 반환
</span>            <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">req_task</span>
            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

        <span class="c1"># 요청이 먼저 끝난 경우: 감시 태스크 정리
</span>        <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">int_task</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
        <span class="k">return</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h2 id="3-스트리밍에도-동일-적용">3) 스트리밍에도 동일 적용</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">throttle</span> <span class="kn">import</span> <span class="n">OPENAI_SEMA</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">stream_node</span><span class="p">(</span><span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># ▼ 스트림 전 구간을 슬롯으로 보호
</span>        <span class="k">async</span> <span class="k">with</span> <span class="n">OPENAI_SEMA</span><span class="p">:</span>
            <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
                <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>
                <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                    <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
                    <span class="n">int_task</span>   <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                                 <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

                    <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                            <span class="k">await</span> <span class="n">next_chunk</span>
                        <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                        <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
                    <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                        <span class="k">break</span>
                    <span class="k">finally</span><span class="p">:</span>
                        <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                            <span class="k">await</span> <span class="n">int_task</span>
            <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h2 id="4-aiohttp-순수-요청도-동일">4) aiohttp 순수 요청도 동일</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">from</span> <span class="n">throttle</span> <span class="kn">import</span> <span class="n">OPENAI_SEMA</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">fetch_json_cancellable</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">aiohttp</span><span class="p">.</span><span class="nc">ClientSession</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">OPENAI_SEMA</span><span class="p">:</span>
            <span class="k">async</span> <span class="k">with</span> <span class="n">session</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span> <span class="k">as</span> <span class="n">resp</span><span class="p">:</span>
                <span class="n">resp</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">resp</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h3 id="왜-이게-좋은가">왜 이게 좋은가</h3>

<ul>
  <li>
    <p><strong>간단함</strong> : 요청부에 <code class="language-plaintext highlighter-rouge">async with OPENAI_SEMA:</code> 한 줄만 추가.</p>
  </li>
  <li>
    <p><strong>취소 친화적</strong> : <code class="language-plaintext highlighter-rouge">CancelledError</code>가 나도 컨텍스트가 자동으로 <strong>슬롯 해제</strong>.</p>
  </li>
  <li>
    <p><strong>대기 중 인터럽트</strong> : 세마포어 획득 대기 중인 태스크도 <code class="language-plaintext highlighter-rouge">req_task.cancel()</code>로 즉시 깨짐.</p>
  </li>
  <li>
    <p><strong>확장 용이</strong> : 환경변수(<code class="language-plaintext highlighter-rouge">OPENAI_MAX_CONCURRENCY</code>)로 쉽게 튜닝.</p>
  </li>
</ul>

<blockquote>
  <p>참고: 프로세스가 여러 개인 경우(예: 멀티 프로세스 실행)는 프로세스마다 8개가 적용돼. 그땐 Redis 등 외부 토큰 버킷이 필요하지만, ComfyUI 일반 사용에선 보통 위 방식이면 충분해.</p>
</blockquote>

<p>필요하면 <strong>모델/엔드포인트별</strong> 로 다른 세마포어를 쓰는 패턴도 알려줄게 (dict로 <code class="language-plaintext highlighter-rouge">base_url</code> 키잉).</p>]]></content><author><name>hvppyarchive</name></author><category term="comfyui" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ComfyUI Custom Node 설정</title><link href="https://hvppyarchive.github.io/comfyui/comfyui-settings/" rel="alternate" type="text/html" title="ComfyUI Custom Node 설정" /><published>2025-10-16T11:19:42+09:00</published><updated>2025-10-16T11:19:42+09:00</updated><id>https://hvppyarchive.github.io/comfyui/comfyui-settings</id><content type="html" xml:base="https://hvppyarchive.github.io/comfyui/comfyui-settings/"><![CDATA[<p class="chat--user">

ComfyUI Settings 페이지 쪽에 Custom Node의 행동을 조절하는 세팅을 넣고 싶어. (쓰레드 몇 개를 쓸 지 정수로 입력하게 하고 싶어) 가능할까?

</p>

<p>가능해요. “Settings” 패널에 정수 입력을 하나 추가하고, 그 값을 커스텀 노드의 파라미터로 넘기면 됩니다. 흐름은 이렇게 잡으면 가장 단순합니다:</p>

<ol>
  <li>프론트엔드(웹 확장)에서 Settings 항목 추가</li>
</ol>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">web/extensions/your_extension.js</code> 같은 파일에서 ComfyUI 확장을 등록하고 <code class="language-plaintext highlighter-rouge">type: "number"</code> 설정을 만듭니다.</p>
  </li>
  <li>
    <p>ComfyUI는 확장이 등록한 <code class="language-plaintext highlighter-rouge">settings</code> 정의를 자동으로 설정 패널에 보여주고 값을 저장/로드합니다. 값은 <code class="language-plaintext highlighter-rouge">ComfyUI/user/default/comfy.settings.json</code>에 저장됩니다. <a href="https://docs.comfy.org/custom-nodes/js/javascript_settings">docs.comfy.org+1</a></p>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>js

// web/extensions/my_node_settings.js
import { app } from "../../scripts/app.js";

app.registerExtension({
  name: "MyNode.Settings",
  settings: [
    {
      id: "mynode.threads",              // 고유 ID (카테고리.섹션 형태 권장)
      name: "Threads for MyNode",
      type: "number",
      defaultValue: 4,
      tooltip: "커스텀 노드가 사용할 스레드 수",
      attrs: { min: 1, max: 128, showButtons: true } // PrimeVue props 전달 가능
    },
  ],
});
</code></pre></div></div>

<ul>
  <li>어디서든 현재 값을 읽을 땐:</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>js

const threads = app.extensionManager.setting.get("mynode.threads");
</code></pre></div></div>

<p>(Settings 정의/읽기 API는 공식 문서에 명시되어 있습니다.) <a href="https://docs.comfy.org/custom-nodes/js/javascript_settings">docs.comfy.org</a></p>

<ol>
  <li>노드 UI에 값 주입(선택)<br />
가장 쉬운 연동법은 노드에 “숨김 입력(hidden)” 또는 “optional 위젯”을 하나 두고, 노드가 캔버스에 생길 때 Settings 값을 그 위젯에 밀어넣는 겁니다. 이렇게 하면 <strong>워크플로 저장/재실행 시 값이 함께 저장</strong> 되어 예측 가능해집니다.</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>js

// (같은 파일에서) 노드가 생성될 때 위젯 값 세팅
app.registerExtension({
  name: "MyNode.ApplySettings",
  async beforeRegisterNodeDef(nodeType, nodeData, appInstance) {
    if (nodeData?.name !== "MyThreadedNode") return;

    const orig = nodeType.prototype.onNodeCreated;
    nodeType.prototype.onNodeCreated = function() {
      orig?.apply(this, arguments);
      const threads = app.extensionManager.setting.get("mynode.threads");
      // 위젯 이름은 파이썬 INPUT_TYPES에 맞춰야 함 (아래 예시 기준 "threads")
      const w = this.widgets?.find(w =&gt; w.name === "threads");
      if (w &amp;&amp; typeof threads === "number") w.value = threads;
    };

    // 설정이 바뀌면 캔버스 위 노드들의 위젯도 반영하고 싶다면:
    app.extensionManager.setting.onChange?.(("mynode.threads"), (nv) =&gt; {
      appInstance.graph._nodes
        .filter(n =&gt; n.type === "MyThreadedNode")
        .forEach(n =&gt; {
          const w = n.widgets?.find(w =&gt; w.name === "threads");
          if (w) { w.value = nv; n.setDirtyCanvas(true, true); }
        });
    });
  }
});
</code></pre></div></div>

<ol>
  <li>파이썬(백엔드) 커스텀 노드에서 입력 선언 및 사용<br />
ComfyUI는 입력 타입/제약을 <code class="language-plaintext highlighter-rouge">INPUT_TYPES</code>로 선언하고 실행 시 해당 값을 함수 인자로 넣어줍니다. 숨김 입력도 지원합니다. <a href="https://docs.comfy.org/custom-nodes/backend/server_overview">docs.comfy.org</a></li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># custom_nodes/my_threaded_node.py
</span><span class="k">class</span> <span class="nc">MyThreadedNode</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># 다른 입력들...
</span>            <span class="p">},</span>
            <span class="sh">"</span><span class="s">hidden</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># Settings에서 꽂아줄 스레드 수
</span>                <span class="sh">"</span><span class="s">threads</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">INT</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="mi">128</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="c1"># 또는 optional 위젯으로 노출하고 싶다면 "required" 대신 "optional"에 넣어도 됨
</span>        <span class="p">}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">IMAGE</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">MyNodes</span><span class="sh">"</span>

    <span class="c1"># 필요하면 유효성 체크
</span>    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">VALIDATE_INPUTS</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">threads</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">1</span> <span class="o">&lt;=</span> <span class="nf">int</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">128</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">threads는 1~128 사이여야 합니다.</span><span class="sh">"</span>
    <span class="c1"># 참고: VALIDATE_INPUTS 동작은 백엔드 섹션 문서에 설명되어 있습니다. :contentReference[oaicite:3]{index=3}
</span>
    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">threads</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="n">threads</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">threads</span><span class="p">)</span>
        <span class="c1"># 예: ThreadPoolExecutor로 병렬 처리
</span>        <span class="kn">from</span> <span class="n">concurrent.futures</span> <span class="kn">import</span> <span class="n">ThreadPoolExecutor</span>
        <span class="k">with</span> <span class="nc">ThreadPoolExecutor</span><span class="p">(</span><span class="n">max_workers</span><span class="o">=</span><span class="n">threads</span><span class="p">)</span> <span class="k">as</span> <span class="n">ex</span><span class="p">:</span>
            <span class="c1"># ex.submit(...) 병렬 작업들
</span>            <span class="k">pass</span>
        <span class="c1"># 결과 리턴
</span>        <span class="nf">return </span><span class="p">(</span><span class="n">some_image_tensor</span><span class="p">,)</span>
</code></pre></div></div>

<ol>
  <li>(대안) 커스텀 REST 라우트로 값 전달<br />
위 방식이 아니라 “글로벌 설정 → 서버로 즉시 푸시 → 노드가 전역 상태에서 읽기”가 필요하다면, 간단한 <strong>커스텀 라우트</strong> 를 만들어 프론트에서 설정 변경 시 POST로 서버에 저장하고, 노드 실행 때 모듈 전역에서 그 값을 참조하는 식도 가능해요. 커스텀 라우트 추가/호출 방법은 서버 문서에 예시가 있습니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes">docs.comfy.org</a></li>
</ol>

<hr />

<h3 id="요약스텝별">요약(스텝별)</h3>

<ol>
  <li>
    <p>JS 확장에서 <code class="language-plaintext highlighter-rouge">type:"number"</code> 설정을 등록한다 → Settings 패널에 노출되고 자동 저장됨. <a href="https://docs.comfy.org/custom-nodes/js/javascript_settings">docs.comfy.org+1</a></p>
  </li>
  <li>
    <p>노드 생성 시 해당 설정값을 노드의 <code class="language-plaintext highlighter-rouge">threads</code> 위젯(숨김/옵셔널)으로 주입한다. <a href="https://docs.comfy.org/custom-nodes/js/javascript_settings">docs.comfy.org</a></p>
  </li>
  <li>
    <p>파이썬 노드는 <code class="language-plaintext highlighter-rouge">INPUT_TYPES</code>로 <code class="language-plaintext highlighter-rouge">threads</code>를 받고 실행 로직에서 활용한다(필요 시 <code class="language-plaintext highlighter-rouge">VALIDATE_INPUTS</code>로 체크). <a href="https://docs.comfy.org/custom-nodes/backend/server_overview">docs.comfy.org</a></p>
  </li>
  <li>
    <p>(특수 케이스) 전역 상태로 다루고 싶다면 커스텀 라우트로 서버에 보관/조회한다. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes">docs.comfy.org</a></p>
  </li>
</ol>

<p>필요하시면 위 예시들을 실제 파일 구조에 맞춰 더 깔끔하게 정리해드릴게요. 원하는 노드 이름/폴더 구조가 있으면 바로 코드 맞춰 드릴게요!</p>]]></content><author><name>hvppyarchive</name></author><category term="comfyui" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">IBM LSF Python 패키지 개발</title><link href="https://hvppyarchive.github.io/python/python-lsf-package/" rel="alternate" type="text/html" title="IBM LSF Python 패키지 개발" /><published>2025-10-13T17:02:21+09:00</published><updated>2025-10-13T17:02:21+09:00</updated><id>https://hvppyarchive.github.io/python/python-lsf-package</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-lsf-package/"><![CDATA[<p class="chat--user">

IBM LSF 알아?

</p>

<p>네! IBM <strong>Spectrum LSF</strong>(옛 <em>Platform LSF</em>)는 HPC/대규모 서버 팜에서 배치 작업을 스케줄링·큐잉·자원관리하는 상용 워크로드 매니저예요. 간단히 핵심만 단계별로 정리해볼게요.</p>

<h1 id="1-뭐-하는-툴">1) 뭐 하는 툴?</h1>

<ul>
  <li>
    <p>많은 사용자/작업을 큐(Queue)에 넣고, 클러스터의 CPU·메모리·GPU·라이선스 같은 자원을 규칙에 맞춰 자동 분배합니다.</p>
  </li>
  <li>
    <p>우선순위, 공정 배분(fairshare), 선점/백필(backfill), 예약(SLA/예약슬롯), 다중 클러스터 등 정책을 세밀하게 걸 수 있어요.</p>
  </li>
</ul>

<h1 id="2-구성-요소아주-요약">2) 구성 요소(아주 요약)</h1>

<ul>
  <li>
    <p><strong>mbatchd / mbschd</strong> : 마스터 배치·스케줄러 데몬(작업 결정 뇌).</p>
  </li>
  <li>
    <p><strong>sbatchd</strong>(각 워커 호스트): 작업 실행/모니터링.</p>
  </li>
  <li>
    <p><strong>lim / res</strong> : 호스트 부하정보 수집과 원격 실행.</p>
  </li>
  <li>
    <p>관리/사용자는 <strong>bsub, bjobs, bqueues</strong> 같은 CLI로 상호작용.</p>
  </li>
</ul>

<h1 id="3-기본-사용-흐름">3) 기본 사용 흐름</h1>

<ol>
  <li>
    <p>사용자가 큐/요구자원과 함께 작업 제출 → <code class="language-plaintext highlighter-rouge">bsub ...</code></p>
  </li>
  <li>
    <p>LSF가 정책·가용자원 평가 → 적합한 노드에 할당</p>
  </li>
  <li>
    <p>실행·모니터링 → 완료 후 로그/결과 수집</p>
  </li>
</ol>

<h1 id="4-자주-쓰는-명령필수-최소셋">4) 자주 쓰는 명령(필수 최소셋)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 작업 제출</span>
bsub <span class="nt">-q</span> normal <span class="nt">-J</span> myjob <span class="nt">-n</span> 4 <span class="nt">-R</span> <span class="s2">"rusage[mem=8G]"</span> <span class="nt">-oo</span> out.%J <span class="nt">-eo</span> err.%J ./run.sh

<span class="c"># 상태/출력 확인</span>
bjobs              <span class="c"># 내 잡 요약</span>
bjobs <span class="nt">-l</span> &lt;JOBID&gt;   <span class="c"># 상세</span>
bpeek &lt;JOBID&gt;      <span class="c"># 실행 중 표준출력 엿보기(설정에 따라 지원)</span>

<span class="c"># 큐/호스트 보기</span>
bqueues <span class="nt">-l</span>         <span class="c"># 큐 상세 정책</span>
bhosts             <span class="c"># 호스트 상태</span>

<span class="c"># 제어</span>
bstop &lt;JOBID&gt;      <span class="c"># 일시중지</span>
bresume &lt;JOBID&gt;    <span class="c"># 재개</span>
bkill &lt;JOBID&gt;      <span class="c"># 종료</span>
bhist <span class="nt">-l</span> &lt;JOBID&gt;   <span class="c"># 히스토리</span>
</code></pre></div></div>

<h1 id="5-제출-스크립트-예시가장-단순한-형태">5) 제출 스크립트 예시(가장 단순한 형태)</h1>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># run.sh</span>
<span class="c">#!/usr/bin/env bash</span>
<span class="nb">echo</span> <span class="s2">"Host: </span><span class="si">$(</span><span class="nb">hostname</span><span class="si">)</span><span class="s2">"</span>
<span class="nb">echo</span> <span class="s2">"Start: </span><span class="si">$(</span><span class="nb">date</span><span class="si">)</span><span class="s2">"</span>
python train.py <span class="nt">--epochs</span> 10
</code></pre></div></div>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 제출</span>
bsub <span class="nt">-q</span> normal <span class="nt">-J</span> train <span class="nt">-n</span> 4 <span class="nt">-R</span> <span class="s2">"rusage[mem=8G]"</span> <span class="nt">-oo</span> train.%J.out ./run.sh
</code></pre></div></div>

<h1 id="6-정책자원-요청-팁">6) 정책/자원 요청 팁</h1>

<ul>
  <li>
    <p><strong>CPU 코어 수</strong> : <code class="language-plaintext highlighter-rouge">-n 8</code></p>
  </li>
  <li>
    <p><strong>메모리</strong> : <code class="language-plaintext highlighter-rouge">-R "rusage[mem=16G]"</code> (클러스터 정책과 단위 확인 필수)</p>
  </li>
  <li>
    <p><strong>노드 스프레드</strong> : <code class="language-plaintext highlighter-rouge">-R "span[ptile=4]"</code> (호스트당 코어 4개씩 배치)</p>
  </li>
  <li>
    <p><strong>GPU</strong> : 클러스터 설정에 따라 전용 옵션/리소스명이 다릅니다. 보통 전용 큐를 쓰거나 <code class="language-plaintext highlighter-rouge">-R</code>/<code class="language-plaintext highlighter-rouge">-gpu</code>(환경에 따라 지원)로 요청합니다. 운영팀이 정한 표준을 확인하세요.</p>
  </li>
</ul>

<h1 id="7-장단점한눈에">7) 장단점(한눈에)</h1>

<ul>
  <li>
    <p><strong>장점</strong> : 성숙한 정책/엔터프라이즈 지원, 이기종·대규모 클러스터 운영 경험 풍부, 모니터링/리포팅(LSF RTM 등) 생태계.</p>
  </li>
  <li>
    <p><strong>단점</strong> : 상용 라이선스 비용, 설정 초기 러닝커브, 커스텀 정책 이해 필요.</p>
  </li>
  <li>
    <p><strong>대안</strong> : Slurm(오픈소스), PBS Pro/Altair PBS, Grid Engine 계열 등.</p>
  </li>
</ul>

<hr />

<p>원하시면,</p>

<ul>
  <li>
    <p>현재 환경(큐 이름, 자원 규칙, GPU 요청 방식)에 맞춘 <strong>제출 템플릿</strong> 을 바로 만들어 드릴게요,</p>
  </li>
  <li>
    <p>또는 기존 Slurm/PBS 스크립트를 LSF로 <strong>자동 변환</strong> 해서 드릴 수도 있어요. 어떤 워크로드를 돌리실 계획인가요?</p>
  </li>
</ul>

<p class="chat--user">

나는 LSF에 여러 Job을 Submit하고 종료시키기/완료 여부 파악 등등 자동화 업무를 하고 있어.(파이썬) 그런데 "bsub", "bkill", "bjobs" 같은 커맨드를 subprocess로 매번 call하니 관리가 힘들고 느리기도 해(subprocess가 끝나서 job ID를 받아와야 하므로) bsub, bkill 시에는 async 기능을 활용하고, bjobs는 memory/storage cache를 통해 너무 자주 프로세스를 호출하지 않았으면 좋겠어(LSF 시스템 부하 줄이기 위해).

</p>

<p>좋아요! 요구사항(비동기 제출/종료 + <code class="language-plaintext highlighter-rouge">bjobs</code> 호출 캐싱/감속)을 만족하는 <strong>간단하지만 탄탄한 아키텍처 + 참조 구현</strong> 을 바로 드릴게요.<br />
아래 순서대로 보시면 됩니다.</p>

<h1 id="0-목표-step-by-step">0) 목표 (Step-by-step)</h1>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bsub</code>, <code class="language-plaintext highlighter-rouge">bkill</code>은 <code class="language-plaintext highlighter-rouge">asyncio</code> 기반으로 <strong>동시에 많이</strong> 돌릴 수 있게.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bjobs</code>는 <strong>TTL 캐시 + 단일비행(single-flight) + 레이트리밋</strong> 으로 과호출 방지.</p>
  </li>
  <li>
    <p>가능한 한 <strong>배치(batch)</strong> 로 묶어서 호출수 최소화.</p>
  </li>
  <li>
    <p>출력 파싱은 <strong>locale 고정(LC_ALL=C)</strong> + <strong>안전한 정규식/필드셋</strong> 만 사용.</p>
  </li>
</ol>

<hr />

<h1 id="1-설계-핵심">1) 설계 핵심</h1>

<ul>
  <li>
    <p><strong>동시성 제어</strong> : 모든 LSF CLI 호출에 공통 세마포어(예: 동시 8개) + 명령별 레이트리밋(예: <code class="language-plaintext highlighter-rouge">bjobs</code>는 초당 1회).</p>
  </li>
  <li>
    <p><strong>비동기 제출/종료</strong> : <code class="language-plaintext highlighter-rouge">asyncio.create_subprocess_exec</code>로 <code class="language-plaintext highlighter-rouge">bsub</code>, <code class="language-plaintext highlighter-rouge">bkill</code>를 비동기 실행.</p>
  </li>
  <li>
    <p><strong>bjobs 캐시</strong> :</p>

    <ul>
      <li>
        <p><strong>TTL 캐시</strong>(예: 3~5초): TTL 내 재요청은 메모리에서 즉시 응답.</p>
      </li>
      <li>
        <p><strong>단일비행</strong> : 같은 키(동일 Job ID 세트/필터)의 <code class="language-plaintext highlighter-rouge">bjobs</code> 요청이 동시 들어오면 <strong>이미 진행 중인</strong> 한 번만 실제 실행, 나머지는 그 Future를 await.</p>
      </li>
      <li>
        <p><strong>레이트리밋</strong> : 최소 호출 간격 보장(예: 1~2초).</p>
      </li>
      <li>
        <p><strong>배치 쿼리</strong> : 여러 Job ID 요청을 <strong>합집합</strong> 으로 묶어 한 번에 조회 → 결과를 per-job로 분산.</p>
      </li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>참고: LSF는 <code class="language-plaintext highlighter-rouge">bjobs</code>의 출력 포맷을 <code class="language-plaintext highlighter-rouge">-o</code>로 제어할 수 있지만, 날짜 필드는 공백이 있어 파싱이 까다롭습니다. 여기서는 <strong>필요 최소 필드</strong>(공백 없는 것들)만 요청합니다: <code class="language-plaintext highlighter-rouge">jobid stat exit_code queue exec_host</code><br />
 (시간이 필요하면 별도 포맷/구분 기호를 추가해 확장 가능)</p>
</blockquote>

<hr />

<h1 id="2-참조-구현-단일-파일-바로-붙여넣어-사용-가능">2) 참조 구현 (단일 파일; 바로 붙여넣어 사용 가능)</h1>

<p>아래는 의존성 없는 순수 Python 3.10+ 코드입니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_async.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">cmd</span>
        <span class="n">self</span><span class="p">.</span><span class="n">returncode</span> <span class="o">=</span> <span class="n">returncode</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">stdout</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">stderr</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_run</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
               <span class="o">*</span><span class="p">,</span>
               <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
               <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">Run a command asynchronously and return (stdout, stderr, returncode).</span><span class="sh">"""</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="o">*</span><span class="n">cmd</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
            <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">raise</span>
    <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="k">class</span> <span class="nc">LsfClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Async LSF CLI wrapper with:
      - concurrent bsub/bkill
      - cached/rate-limited bjobs
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                 <span class="o">*</span><span class="p">,</span>
                 <span class="n">bsub</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bsub</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
                 <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">,</span>
                 <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span>
                 <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bsub</span><span class="sh">"</span><span class="p">:</span> <span class="n">bsub</span><span class="p">,</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrent_cli</span><span class="p">)</span>

        <span class="c1"># Cache &amp; in-flight tracking for bjobs
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="n">bjobs_ttl_sec</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="n">bjobs_min_interval_sec</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>

        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="c1"># ---------- helpers ----------
</span>    <span class="k">def</span> <span class="nf">_key_for_bjobs</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="n">extra_flags</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="nf">tuple</span><span class="p">(</span><span class="nf">sorted</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">)))</span> <span class="k">if</span> <span class="n">job_ids</span> <span class="nf">else </span><span class="p">()</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs|</span><span class="si">{</span><span class="n">extra_flags</span><span class="si">}</span><span class="s">|</span><span class="si">{</span><span class="n">ids</span><span class="si">}</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_guarded_run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="nf">_run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

    <span class="c1"># ---------- public API ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                     <span class="n">command</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
                     <span class="o">*</span><span class="p">,</span>
                     <span class="n">queue</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">job_name</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">n_cpus</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">rusage</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">out_file</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">err_file</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">cwd</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">extra_bsub_args</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        Submit a job via bsub and return job id.
        `command` may be a shell string or a sequence.
        </span><span class="sh">"""</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">"</span><span class="s">bsub</span><span class="sh">"</span><span class="p">]]</span>
        <span class="k">if</span> <span class="n">queue</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-q</span><span class="sh">"</span><span class="p">,</span> <span class="n">queue</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">job_name</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-J</span><span class="sh">"</span><span class="p">,</span> <span class="n">job_name</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">n_cpus</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-n</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">n_cpus</span><span class="p">)]</span>
        <span class="k">if</span> <span class="n">rusage</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-R</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">rusage[</span><span class="si">{</span><span class="n">rusage</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">out_file</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-oo</span><span class="sh">"</span><span class="p">,</span> <span class="n">out_file</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">err_file</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-eo</span><span class="sh">"</span><span class="p">,</span> <span class="n">err_file</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">extra_bsub_args</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="n">extra_bsub_args</span><span class="p">)</span>

        <span class="c1"># bsub expects the job command at the end; if a string, run via /bin/sh -c
</span>        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="n">command</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Treat the sequence as an executable + args (no shell)
</span>            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">command</span><span class="p">))]</span>

        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guarded_run</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="c1"># Parse: "Job &lt;12345&gt; is submitted to queue &lt;normal&gt;."
</span>        <span class="n">m</span> <span class="o">=</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Cannot parse job id from bsub output:</span><span class="se">\n</span><span class="si">{</span><span class="n">stdout</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                   <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
                   <span class="o">*</span><span class="p">,</span>
                   <span class="n">force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                   <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        Kill one or many jobs with a single bkill call.
        </span><span class="sh">"""</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">]]</span>
        <span class="k">if</span> <span class="n">force</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-f</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">args</span> <span class="o">+=</span> <span class="n">ids</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guarded_run</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                     <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="o">*</span><span class="p">,</span>
                     <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                     <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">
        Get job status map: {jobid: {stat, exit_code, queue, exec_host}}.
        Uses TTL cache + single-flight + rate limiting.
        If job_ids is None, queries all of the current user</span><span class="sh">'</span><span class="s">s jobs.
        </span><span class="sh">"""</span>
        <span class="n">flags</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a</span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">key</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_for_bjobs</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">flags</span><span class="p">)</span>

        <span class="c1"># Serve cached if fresh
</span>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">cached</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">cached</span> <span class="ow">and</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">cached</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">cached</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

        <span class="c1"># Single-flight: if another coroutine is already fetching this key, await it
</span>        <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="c1"># Create the in-flight future
</span>        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Simple rate limit for bjobs
</span>            <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span>
            <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

            <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">-noheader</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">include_done</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-a</span><span class="sh">"</span><span class="p">]</span>
            <span class="c1"># Request only whitespace-safe fields
</span>            <span class="c1"># Fields: jobid stat exit_code queue exec_host
</span>            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">"</span><span class="p">]</span>
            <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">set</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)]</span>

            <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guarded_run</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

            <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

            <span class="c1"># Parse lines; with chosen fields, tokens are whitespace-separated safely
</span>            <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
                <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
                <span class="c1"># Expect exactly 5 tokens
</span>                <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                    <span class="c1"># best-effort: skip malformed
</span>                    <span class="k">continue</span>
                <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                    <span class="k">continue</span>
                <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
                <span class="p">}</span>

            <span class="c1"># Cache and resolve the in-flight future
</span>            <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">result</span><span class="p">)</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">result</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># clean inflight
</span>            <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="c1"># --------- convenience: bulk status with de-dup &amp; union batching ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">status_union_batched</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                   <span class="n">list_of_job_id_sets</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span>
                                   <span class="o">*</span><span class="p">,</span>
                                   <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                                   <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="sh">"""</span><span class="s">
        Given multiple callers wanting statuses for different sets, perform
        ONE bjobs with the union of ids, then slice the result per request.
        (Uses the normal cache path internally.)
        </span><span class="sh">"""</span>
        <span class="n">union_ids</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">normalized</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">list</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ids</span> <span class="ow">in</span> <span class="n">list_of_job_id_sets</span><span class="p">:</span>
            <span class="n">norm</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">]</span>
            <span class="n">normalized</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">norm</span><span class="p">)</span>
            <span class="n">union_ids</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">norm</span><span class="p">)</span>
        <span class="n">union_result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">union_ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">req_ids</span> <span class="ow">in</span> <span class="n">normalized</span><span class="p">:</span>
            <span class="n">m</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">union_result</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">}</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>
</code></pre></div></div>

<hr />

<h1 id="3-사용-예시">3) 사용 예시</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">lsf_async</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">(</span>
        <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>      <span class="c1"># 동시에 열 수 있는 LSF CLI 프로세스 수
</span>        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">3.0</span><span class="p">,</span>         <span class="c1"># bjobs 캐시 TTL
</span>        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.5</span> <span class="c1"># 최소 호출 간격(레이트리밋)
</span>    <span class="p">)</span>

    <span class="c1"># 1) 여러 작업 동시 제출 (async)
</span>    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span>
        <span class="sh">'</span><span class="s">echo </span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="s">; sleep 10</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">echo </span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="s">; sleep 5</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">echo </span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="s">; sleep 2</span><span class="sh">'</span><span class="p">,</span>
    <span class="p">]</span>
    <span class="n">submit_tasks</span> <span class="o">=</span> <span class="p">[</span>
        <span class="n">lsf</span><span class="p">.</span><span class="nf">submit</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">queue</span><span class="o">=</span><span class="sh">"</span><span class="s">normal</span><span class="sh">"</span><span class="p">,</span> <span class="n">job_name</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">demo_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span><span class="p">,</span> <span class="n">out_file</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">demo_</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">.%J.out</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">cmd</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">cmds</span><span class="p">,</span> <span class="n">start</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">]</span>
    <span class="n">job_ids</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="n">submit_tasks</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">submitted:</span><span class="sh">"</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">)</span>

    <span class="c1"># 2) 상태 조회 (캐시 ON)
</span>    <span class="n">st1</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>     <span class="c1"># 실제 bjobs 호출
</span>    <span class="n">st2</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>     <span class="c1"># TTL 내라면 캐시에서 즉시 반환
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">status1:</span><span class="sh">"</span><span class="p">,</span> <span class="n">st1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">status2 (cached):</span><span class="sh">"</span><span class="p">,</span> <span class="n">st2</span><span class="p">)</span>

    <span class="c1"># 3) 일부 종료 (배치 bkill)
</span>    <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids</span><span class="p">[:</span><span class="mi">1</span><span class="p">],</span> <span class="n">force</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="c1"># 4) 여러 consumer가 각자 상태를 원할 때 union 배치
</span>    <span class="n">reqs</span> <span class="o">=</span> <span class="p">[[</span><span class="n">job_ids</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">job_ids</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span> <span class="p">[</span><span class="n">job_ids</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">job_ids</span><span class="p">[</span><span class="mi">2</span><span class="p">]]]</span>
    <span class="n">batched</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status_union_batched</span><span class="p">(</span><span class="n">reqs</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">batched</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="4-튜닝-포인트">4) 튜닝 포인트</h1>

<ul>
  <li>
    <p><strong>동시성</strong> : <code class="language-plaintext highlighter-rouge">max_concurrent_cli</code>(기본 8). LSF 마스터/파일서버 부하에 따라 4~16 사이로 조정 권장.</p>
  </li>
  <li>
    <p><strong>bjobs TTL</strong> : <code class="language-plaintext highlighter-rouge">bjobs_ttl_sec</code>(기본 3s). 워크로드가 조용하면 5~10s까지 올리면 더 효과적.</p>
  </li>
  <li>
    <p><strong>최소 호출 간격</strong> : <code class="language-plaintext highlighter-rouge">bjobs_min_interval_sec</code>(기본 1~2s). 팀/클러스터 정책에 맞춰 설정.</p>
  </li>
  <li>
    <p><strong>배치 종료</strong> : <code class="language-plaintext highlighter-rouge">kill([...])</code>는 ID 리스트를 받아 <strong>한 번의<code class="language-plaintext highlighter-rouge">bkill</code></strong> 로 처리 → 호출 수 절감.</p>
  </li>
  <li>
    <p><strong>배치 상태 조회</strong> : 여러 호출을 묶고 싶으면 <code class="language-plaintext highlighter-rouge">status_union_batched()</code> 사용.</p>
  </li>
</ul>

<hr />

<h1 id="5-확장-아이디어">5) 확장 아이디어</h1>

<ul>
  <li>
    <p><strong>Persistent 캐시(옵션)</strong> : 마지막 상태를 SQLite 등에 저장 → 프로세스 재시작 시 “최근 상태” 즉시 제공 + 백그라운드 리프레시.</p>
  </li>
  <li>
    <p><strong>이벤트 기반 보완</strong> : 클러스터에서 접근 가능한 상태 이벤트/로그가 있다면(권한 필요) <code class="language-plaintext highlighter-rouge">bjobs</code> 폴링 주기를 더 늘릴 수 있음.</p>
  </li>
  <li>
    <p><strong>출력 포맷 확장</strong> : 시간이 필요하면 <code class="language-plaintext highlighter-rouge">-o</code> 필드를 커스터마이즈하고, 공백 문제는 <code class="language-plaintext highlighter-rouge">delimiter</code> 옵션(클러스터 버전에 따라 지원)을 검토하세요.</p>
  </li>
</ul>

<hr />

<h1 id="6-실전-체크리스트">6) 실전 체크리스트</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">LANG/LC_ALL=C</code>로 고정해 <strong>Job ID 파싱 안정성</strong> 확보(다국어 출력 회피).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bsub</code> 실패/큐 거부 시 <code class="language-plaintext highlighter-rouge">LSFCommandError</code>로 즉시 구분(로그에 <code class="language-plaintext highlighter-rouge">stderr</code> 남김).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bjobs</code> 필드 수가 예상과 다르면 <strong>스킵</strong>(방어코딩) — 필요 시 로깅.</p>
  </li>
  <li>
    <p>너무 많은 Job ID를 한 번에 조회한다면 <strong>ID를 N개 단위로 chunking</strong>(예: 500개)하는 래퍼 추가 권장.</p>
  </li>
</ul>

<hr />

<p>필요하시면 위 코드를 <strong>여러 파일 구조(패키지화 + 로깅/리트라이/치밍 등)</strong> 로 정리해 드릴 수 있어요.<br />
혹시 지금 쓰시는 스크립트가 있다면, 핵심 호출부만 이 <code class="language-plaintext highlighter-rouge">LsfClient</code>로 감싸서 마이그레이션 예시도 만들어 드릴게요.</p>

<p class="chat--user">

추가 예시가 필요해. 만약 코드 변경이 필요하면 더 변경해도 돼. 1. 유저가 작업을 취소하면 깔끔하게 모두 취소되어야 함.(submit 작업 취소는 is_interrupted() 함수가 True를 리턴하는 경우임. 이를 polling하며 체크해야함. 작업 취소시 현재 요청한 job들은 모두 깔끔하게 취소해야함(bsub 프로세스를 중간에 끊을 경우 애매하게 bjob만 살아있을 수 있으므로 시작된 bsub은 끝날때까지 기다린 후 확실하게 죽이자) 2. bjobs 캐시는 Storage 캐시와 Memory Cache를 2중으로 사용하여 여러 프로세스에서도 bjobs 사용 최소화(프로세스1에서 만든 파일을 전혀 프로세스2에서도 사용 가능 - bjobs는 항상 전체 job에 대해 수행하고 리턴만 요청된 job_ids 기준으로 리턴) 3. LSF command가 아닌 command도 요청될 수 있음. 이 경우 그냥 실행만 하면 되며 에러를 뿌리진 말 것(boolean argument 받아서 에러를 raise 할지 선택하도록 하자)

</p>

<p>좋다! 요구 3가지를 모두 반영해서 코드를 <strong>업데이트(v2)</strong> 하고, 바로 써먹을 <strong>추가 예시</strong> 를 붙였습니다.<br />
(파이썬 3.10+ / Linux 가정. 외부 의존성 없음.)</p>

<hr />

<h1 id="무엇이-달라졌나-step-by-step">무엇이 달라졌나 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>취소 플로우 완성</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">submit_many_with_cancel(...)</code> 제공: <code class="language-plaintext highlighter-rouge">is_interrupted()</code>를 주기적으로 폴링.</p>
      </li>
      <li>
        <p>인터럽트 발생 시 <strong>새 제출은 중단</strong> , 이미 시작된 <code class="language-plaintext highlighter-rouge">bsub</code>는 <strong>끝까지 기다려 Job ID 확보 → 그 ID 전부 bkill</strong> 로 정리.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>2중 캐시(bjobs)</strong></p>

    <ul>
      <li>
        <p><strong>메모리 캐시</strong> + <strong>디스크 캐시(프로세스 간 공유)</strong>.</p>
      </li>
      <li>
        <p>디스크 캐시는 <code class="language-plaintext highlighter-rouge">fcntl.flock</code>으로 <strong>잠금</strong> , 원자적 파일 쓰기(임시파일→rename).</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">bjobs</code>는 항상 <strong>전체(현재 사용자) 조회</strong> 로 캐시를 갱신하고, 호출자는 <code class="language-plaintext highlighter-rouge">job_ids</code>로 필터만 함 → 여러 프로세스에서 <strong>호출 수 최소화</strong>.</p>
      </li>
      <li>
        <p>TTL과 최소 호출 간격을 <strong>프로세스 내</strong> 에선 지키고, <strong>프로세스 간</strong> 에는 디스크 캐시의 TTL로 조절.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>일반 커맨드 실행 지원</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">exec_command(...)</code> 추가: LSF가 아닌 커맨드도 실행 가능.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">raise_on_error: bool</code>로 예외 발생 여부 선택(기본: False → 에러여도 예외 미발생).</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="코드-lsf_async_v2py">코드 (lsf_async_v2.py)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_async_v2.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">List</span>

<span class="c1"># --- POSIX file lock (for multi-process disk cache) ---
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">fcntl</span>  <span class="c1"># Linux/Unix
</span>    <span class="k">def</span> <span class="nf">_lock_file</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
        <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fp</span><span class="p">.</span><span class="nf">fileno</span><span class="p">(),</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_EX</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">_unlock_file</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>
        <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fp</span><span class="p">.</span><span class="nf">fileno</span><span class="p">(),</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_UN</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>  <span class="c1"># pragma: no cover (Windows fallback: best-effort no lock)
</span>    <span class="k">def</span> <span class="nf">_lock_file</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>  <span class="c1"># type: ignore
</span>        <span class="k">return</span>
    <span class="k">def</span> <span class="nf">_unlock_file</span><span class="p">(</span><span class="n">fp</span><span class="p">):</span>  <span class="c1"># type: ignore
</span>        <span class="k">return</span>

<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">cmd</span>
        <span class="n">self</span><span class="p">.</span><span class="n">returncode</span> <span class="o">=</span> <span class="n">returncode</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">stdout</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">stderr</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_run</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
               <span class="o">*</span><span class="p">,</span>
               <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
               <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">Run a command asynchronously and return (stdout, stderr, returncode).</span><span class="sh">"""</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="o">*</span><span class="n">cmd</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
            <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">raise</span>
    <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="k">class</span> <span class="nc">LsfClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Async LSF CLI wrapper with:
      - concurrent bsub/bkill
      - cached (mem+disk)/rate-limited bjobs (full snapshot per user)
      - generic command execution
      - cooperative cancellation for submit batches
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                 <span class="o">*</span><span class="p">,</span>
                 <span class="n">bsub</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bsub</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
                 <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">,</span>
                 <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span>
                 <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">,</span>
                 <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                 <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bsub</span><span class="sh">"</span><span class="p">:</span> <span class="n">bsub</span><span class="p">,</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrent_cli</span><span class="p">)</span>

        <span class="c1"># Cache (mem) &amp; in-flight tracking (per-process)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="n">bjobs_ttl_sec</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="n">bjobs_min_interval_sec</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_memcache</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>

        <span class="c1"># Disk cache (multi-process)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span> <span class="o">=</span> <span class="n">disk_cache_ttl_sec</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">base_cache</span> <span class="o">=</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span>
                      <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_cache</span><span class="p">,</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all_</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_lock_path</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.lock</span><span class="sh">"</span>

        <span class="c1"># Locale-stable env
</span>        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="c1"># ---------- helpers ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_guarded_run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="nf">_run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_now</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">float</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">_mem_fresh</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_memcache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_now</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="c1"># ---------- public API ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">exec_command</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                           <span class="n">command</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
                           <span class="o">*</span><span class="p">,</span>
                           <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                           <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">Run any command (not necessarily LSF).</span><span class="sh">"""</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="c1"># shell-ish execution via /bin/sh -c
</span>            <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">/bin/sh</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-lc</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">cmd</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">command</span><span class="p">))</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guarded_run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                     <span class="n">command</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
                     <span class="o">*</span><span class="p">,</span>
                     <span class="n">queue</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">job_name</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">n_cpus</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">rusage</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">out_file</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">err_file</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">cwd</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">extra_bsub_args</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
                     <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        Submit a job via bsub and return job id; returns None if failed and raise_on_error=False.
        </span><span class="sh">"""</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">"</span><span class="s">bsub</span><span class="sh">"</span><span class="p">]]</span>
        <span class="k">if</span> <span class="n">queue</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-q</span><span class="sh">"</span><span class="p">,</span> <span class="n">queue</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">job_name</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-J</span><span class="sh">"</span><span class="p">,</span> <span class="n">job_name</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">n_cpus</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-n</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">n_cpus</span><span class="p">)]</span>
        <span class="k">if</span> <span class="n">rusage</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-R</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">rusage[</span><span class="si">{</span><span class="n">rusage</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">out_file</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-oo</span><span class="sh">"</span><span class="p">,</span> <span class="n">out_file</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">err_file</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-eo</span><span class="sh">"</span><span class="p">,</span> <span class="n">err_file</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">cwd</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-cwd</span><span class="sh">"</span><span class="p">,</span> <span class="n">cwd</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">extra_bsub_args</span><span class="p">:</span> <span class="n">args</span> <span class="o">+=</span> <span class="nf">list</span><span class="p">(</span><span class="n">extra_bsub_args</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="n">command</span><span class="p">]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Treat sequence as a single shell line (safe: args joined with spaces)
</span>            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">command</span><span class="p">))]</span>

        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guarded_run</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">raise_on_error</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>

        <span class="n">m</span> <span class="o">=</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">raise_on_error</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">RuntimeError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Cannot parse job id from bsub output:</span><span class="se">\n</span><span class="si">{</span><span class="n">stdout</span><span class="si">}</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                   <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
                   <span class="o">*</span><span class="p">,</span>
                   <span class="n">force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                   <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
                   <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        Kill one or many jobs with a single bkill call.
        Returns (stdout, stderr, rc). Does not raise if raise_on_error=False.
        </span><span class="sh">"""</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">]]</span>
        <span class="k">if</span> <span class="n">force</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-f</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">args</span> <span class="o">+=</span> <span class="n">ids</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guarded_run</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># ---------- bjobs (mem+disk cache; full snapshot per user) ----------
</span>    <span class="k">def</span> <span class="nf">_disk_cache_read</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="c1"># no need to lock for read; readers are okay to read slightly stale
</span>                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_now</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
            <span class="k">return</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">()}</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_disk_cache_write</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="c1"># Acquire lock to ensure single writer
</span>        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_lock_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">a+</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">lockfp</span><span class="p">:</span>
            <span class="nf">_lock_file</span><span class="p">(</span><span class="n">lockfp</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">tmp_fd</span><span class="p">,</span> <span class="n">tmp_path</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">bjobs_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">tmp_fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">tmpfp</span><span class="p">:</span>
                        <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_now</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">tmpfp</span><span class="p">)</span>
                        <span class="n">tmpfp</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                        <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">tmpfp</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span><span class="p">)</span>  <span class="c1"># atomic
</span>                <span class="k">finally</span><span class="p">:</span>
                    <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                        <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="nf">_unlock_file</span><span class="p">(</span><span class="n">lockfp</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="c1"># Rate-limit (per-process)
</span>        <span class="n">since</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_now</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">-noheader</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="p">,</span> <span class="sh">"</span><span class="s">-o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">include_done</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-a</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_guarded_run</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_now</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">line</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                 <span class="o">*</span><span class="p">,</span>
                                 <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                                 <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>

        <span class="c1"># 1) mem cache
</span>        <span class="n">mem</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mem_fresh</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mem</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">mem</span>

        <span class="c1"># 2) in-flight (per-process single-flight)
</span>        <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 3) disk cache
</span>            <span class="n">disk_data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_disk_cache_read</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">disk_data</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="c1"># also refresh mem cache copy for TTL window
</span>                <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_memcache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_now</span><span class="p">(),</span> <span class="n">disk_data</span><span class="p">)</span>
                <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">disk_data</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">disk_data</span>

            <span class="c1"># 4) fetch &amp; write both caches (single writer guarded by process-level lock)
</span>            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_memcache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="nf">_now</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_disk_cache_write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                     <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="o">*</span><span class="p">,</span>
                     <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                     <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">Return per-job map using FULL-SNAPSHOT cache; filters to job_ids if provided.</span><span class="sh">"""</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>
        <span class="n">wanted</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wanted</span><span class="p">}</span>

    <span class="c1"># ---------- high-level: submit many with cooperative cancellation ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">queue</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">job_name_prefix</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">n_cpus</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">rusage</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">out_file_template</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>   <span class="c1"># e.g. "job.%J.out"
</span>        <span class="n">err_file_template</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>   <span class="c1"># e.g. "job.%J.err"
</span>        <span class="n">extra_bsub_args</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[],</span> <span class="nb">bool</span><span class="p">],</span>
        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight_submissions</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">kill_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">submit_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">submit_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        Submit many commands cooperatively. If is_interrupted() becomes True:
          - stop launching new bsub
          - wait for in-flight bsub to finish to collect job IDs
          - bkill all collected job IDs (force if kill_force)
        Returns:
          {
            </span><span class="sh">"</span><span class="s">submitted_job_ids</span><span class="sh">"</span><span class="s">: [int, ...],
            </span><span class="sh">"</span><span class="s">interrupted</span><span class="sh">"</span><span class="s">: bool,
            </span><span class="sh">"</span><span class="s">num_submitted</span><span class="sh">"</span><span class="s">: int,
            </span><span class="sh">"</span><span class="s">num_failed</span><span class="sh">"</span><span class="s">: int
          }
        </span><span class="sh">"""</span>
        <span class="n">submitted</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">failures</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="n">max_in_flight</span> <span class="o">=</span> <span class="n">max_in_flight_submissions</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">.</span><span class="n">_value</span>  <span class="c1"># heuristic
</span>
        <span class="k">async</span> <span class="k">def</span> <span class="nf">launch_one</span><span class="p">(</span><span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">jname</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">job_name_prefix</span><span class="si">}{</span><span class="n">idx</span><span class="si">}</span><span class="sh">"</span> <span class="k">if</span> <span class="n">job_name_prefix</span> <span class="k">else</span> <span class="bp">None</span>
            <span class="n">outf</span> <span class="o">=</span> <span class="p">(</span><span class="n">out_file_template</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">errf</span> <span class="o">=</span> <span class="p">(</span><span class="n">err_file_template</span> <span class="ow">or</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">submit</span><span class="p">(</span>
                <span class="n">cmd</span><span class="p">,</span>
                <span class="n">queue</span><span class="o">=</span><span class="n">queue</span><span class="p">,</span>
                <span class="n">job_name</span><span class="o">=</span><span class="n">jname</span><span class="p">,</span>
                <span class="n">n_cpus</span><span class="o">=</span><span class="n">n_cpus</span><span class="p">,</span>
                <span class="n">rusage</span><span class="o">=</span><span class="n">rusage</span><span class="p">,</span>
                <span class="n">out_file</span><span class="o">=</span><span class="n">outf</span><span class="p">,</span>
                <span class="n">err_file</span><span class="o">=</span><span class="n">errf</span><span class="p">,</span>
                <span class="n">extra_bsub_args</span><span class="o">=</span><span class="n">extra_bsub_args</span><span class="p">,</span>
                <span class="n">timeout</span><span class="o">=</span><span class="n">submit_timeout</span><span class="p">,</span>
                <span class="n">raise_on_error</span><span class="o">=</span><span class="n">submit_raise_on_error</span><span class="p">,</span>
            <span class="p">)</span>
            <span class="k">return</span> <span class="n">jid</span>

        <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">total</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="c1"># Launch up to concurrency window
</span>                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">launch_one</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">task</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="c1"># If interrupted, stop launching new; still drain in-flight to collect jobids
</span>                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">jid</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                                <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="k">else</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="c1"># continue loop
</span>                <span class="k">else</span><span class="p">:</span>
                    <span class="c1"># nothing in flight, just small pause (or will loop to launch more)
</span>                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>

                <span class="c1"># If interrupted, we simply stop launching; draining continues above
</span>                <span class="c1"># (no action needed here)
</span>        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># Drain any remaining in-flight submissions to harvest jobids (do not cancel bsub)
</span>            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">jid</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                            <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                        <span class="k">else</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">is_interrupted</span><span class="p">()</span>

        <span class="c1"># On interruption, clean up all submitted jobs
</span>        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">submitted</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">submitted</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="n">kill_force</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">interrupted</span><span class="sh">"</span><span class="p">:</span> <span class="n">interrupted</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">num_submitted</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">submitted</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">num_failed</span><span class="sh">"</span><span class="p">:</span> <span class="n">failures</span><span class="p">,</span>
        <span class="p">}</span>
</code></pre></div></div>

<hr />

<h1 id="사용-예시">사용 예시</h1>

<h2 id="1-유저가-취소-시-모두-정리-인터럽트-토큰-폴링">1) “유저가 취소” 시 모두 정리 (인터럽트 토큰 폴링)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_async_v2</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="c1"># 예: 2초 뒤 인터럽트가 True가 되는 토큰
</span><span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="o">=</span><span class="mf">2.0</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">(</span>
        <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">3.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">3.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/dev/shm/lsf_cache</span><span class="sh">"</span>  <span class="c1"># 여러 프로세스 공유 경로
</span>    <span class="p">)</span>

    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span><span class="sa">f</span><span class="sh">'</span><span class="s">echo </span><span class="sh">"</span><span class="s">job</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> start</span><span class="sh">"</span><span class="s">; sleep </span><span class="si">{</span><span class="mi">3</span><span class="o">+</span><span class="n">i</span><span class="o">%</span><span class="mi">3</span><span class="si">}</span><span class="s">; echo </span><span class="sh">"</span><span class="s">job</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> end</span><span class="sh">"'</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">20</span><span class="p">)]</span>

    <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">cmds</span><span class="p">,</span>
        <span class="n">queue</span><span class="o">=</span><span class="sh">"</span><span class="s">normal</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">job_name_prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">bulk_</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">n_cpus</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">rusage</span><span class="o">=</span><span class="sh">"</span><span class="s">mem=1024</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">out_file_template</span><span class="o">=</span><span class="sh">"</span><span class="s">bulk.%J.out</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="o">=</span><span class="nc">Token</span><span class="p">(</span><span class="n">delay</span><span class="o">=</span><span class="mf">2.0</span><span class="p">).</span><span class="n">is_interrupted</span><span class="p">,</span>  <span class="c1"># 2초 뒤 취소
</span>        <span class="n">poll_interval_sec</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
        <span class="n">max_in_flight_submissions</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span>     <span class="c1"># 동시에 bsub 최대 6개
</span>        <span class="n">kill_force</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>                  <span class="c1"># 취소 시 강제 종료
</span>        <span class="n">kill_raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>        <span class="c1"># bkill 에러 무시
</span>        <span class="n">submit_timeout</span><span class="o">=</span><span class="mf">30.0</span><span class="p">,</span>
        <span class="n">submit_raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>      <span class="c1"># bsub 실패 시 계속 진행
</span>    <span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RESULT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<p><strong>동작 요약</strong></p>

<ul>
  <li>
    <p>2초 동안만 제출을 진행 → 그 전에 시작한 <code class="language-plaintext highlighter-rouge">bsub</code>는 끝까지 기다려 <strong>Job ID 수집</strong> → 수집된 ID 전부 <code class="language-plaintext highlighter-rouge">bkill -f</code>로 종료.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bsub</code> 프로세스를 <strong>중간에 kill 하지 않기</strong> 때문에 “애매하게 bjob만 살아있는” 상황을 피합니다.</p>
  </li>
</ul>

<hr />

<h2 id="2-멀티프로세스에서-bjobs-최소화-디스크-캐시-공유">2) 멀티프로세스에서 <code class="language-plaintext highlighter-rouge">bjobs</code> 최소화 (디스크 캐시 공유)</h2>

<p><strong>프로세스 A / B</strong> 에서 동일한 <code class="language-plaintext highlighter-rouge">cache_dir</code>를 사용하면 디스크 캐시를 공유합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># process_A.py
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">lsf_async_v2</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">(</span><span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/dev/shm/lsf_cache</span><span class="sh">"</span><span class="p">,</span> <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">4.0</span><span class="p">,</span> <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">4.0</span><span class="p">)</span>
    <span class="c1"># A 프로세스가 먼저 전체 스냅샷을 캐싱
</span>    <span class="n">all_status</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">()</span>  <span class="c1"># 내부적으로 bjobs -a -u &lt;user&gt; 1회
</span>    <span class="c1"># 이후 특정 job_ids만 골라 쓰기
</span>    <span class="n">subset</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">([</span><span class="mi">123</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">125</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">all_status</span><span class="p">),</span> <span class="n">subset</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">123</span><span class="p">))</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># process_B.py
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">lsf_async_v2</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">(</span><span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/dev/shm/lsf_cache</span><span class="sh">"</span><span class="p">,</span> <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">4.0</span><span class="p">,</span> <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">4.0</span><span class="p">)</span>
    <span class="c1"># B 프로세스는 디스크 캐시가 **신선하면** bjobs 호출 없이 그대로 사용
</span>    <span class="n">subset</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">([</span><span class="mi">20001</span><span class="p">,</span> <span class="mi">20002</span><span class="p">,</span> <span class="mi">20003</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">subset</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<p>동작 포인트:</p>

<ul>
  <li>
    <p>A가 최신 스냅샷을 만들면 B는 <strong>디스크 캐시만 읽고</strong> 필터링해 반환 → <code class="language-plaintext highlighter-rouge">bjobs</code> 호출 <strong>0회</strong>.</p>
  </li>
  <li>
    <p>TTL(예: 4초) 이내에는 양쪽 모두 <code class="language-plaintext highlighter-rouge">bjobs</code>를 다시 안 칩니다.</p>
  </li>
  <li>
    <p>TTL이 지났을 때 <strong>동시에 갱신을 시도</strong> 하더라도 <code class="language-plaintext highlighter-rouge">.lock</code> 파일로 <strong>1개 프로세스만</strong> 갱신 → 호출 억제.</p>
  </li>
</ul>

<hr />

<h2 id="3-lsf가-아닌-일반-커맨드-실행예외-발생-선택">3) LSF가 아닌 일반 커맨드 실행(예외 발생 선택)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">lsf_async_v2</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">()</span>
    <span class="c1"># 성공 예: hostname 얻기 (실패해도 raise_on_error=False면 예외 X)
</span>    <span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">exec_command</span><span class="p">(</span><span class="sh">"</span><span class="s">hostname</span><span class="sh">"</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">hostname rc</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">out:</span><span class="sh">"</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span>

    <span class="c1"># 실패 예: 존재하지 않는 커맨드
</span>    <span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">exec_command</span><span class="p">(</span><span class="sh">"</span><span class="s">not_a_real_cmd --foo</span><span class="sh">"</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">custom rc</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>  <span class="c1"># 에러여도 예외 없음
</span>
    <span class="c1"># 에러를 예외로 받고 싶다면:
</span>    <span class="c1"># await lsf.exec_command("not_a_real_cmd --foo", raise_on_error=True)
</span>
<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="팁--운영-체크리스트">팁 &amp; 운영 체크리스트</h1>

<ul>
  <li>
    <p><strong>캐시 TTL 조절</strong></p>

    <ul>
      <li>
        <p>조용한 클러스터: <code class="language-plaintext highlighter-rouge">bjobs_ttl_sec</code>/<code class="language-plaintext highlighter-rouge">disk_cache_ttl_sec</code>를 5~10초까지 올리면 호출 수가 크게 줄어요.</p>
      </li>
      <li>
        <p>실시간성이 필요할 때만 낮추세요.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>전체 스냅샷 전략</strong></p>

    <ul>
      <li>
        <p>본 구현은 현재 사용자(<code class="language-plaintext highlighter-rouge">-u &lt;user&gt;</code>) 기준 전체 잡을 한 번에 가져옵니다. 팀/클러스터 정책상 잡 수가 매우 많으면,</p>

        <ul>
          <li><code class="language-plaintext highlighter-rouge">status_all_sharded()</code> 같은 변형(큐 단위/상태 단위 샤딩)으로 확장해도 좋습니다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>고아(Orphan) 잡 방지</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">submit_many_with_cancel</code>는 <code class="language-plaintext highlighter-rouge">bsub</code>를 <strong>절대 강제 종료하지 않음</strong> → Job ID를 확보한 뒤 <code class="language-plaintext highlighter-rouge">bkill</code>로 종료.</p>
      </li>
      <li>
        <p>kill 시 <code class="language-plaintext highlighter-rouge">raise_on_error=False</code>를 기본으로 해서, 일시적 실패에도 전체 플로우가 중단되지 않게 했습니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>파싱 안정성</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">LC_ALL=C</code> 고정, <code class="language-plaintext highlighter-rouge">-o "jobid stat exit_code queue exec_host"</code>처럼 <strong>공백 없는 필드만</strong> 사용.</p>
      </li>
      <li>
        <p>포맷이 다른 클러스터라면 출력 필드를 조정하세요(필요시 구분자 옵션 지원 버전 확인).</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>원하시면:</p>

<ul>
  <li>
    <p>디스크 캐시 파일 경로/권한(공용 노드 vs 사용자 홈) 정책에 맞춰 <strong>경로/잠금 전략</strong> 을 더 엄격히 조정해 드릴 수 있고,</p>
  </li>
  <li>
    <p>잡 수가 수만 단위일 때를 위한 <strong>샤딩/청크/스트리밍 파서</strong> 버전도 바로 만들어 드릴게요.</p>
  </li>
</ul>

<p class="chat--user">

아니 3번 요청 사항에 대한 이해가 잘못된 것 같아. bsub command는 직접 만들지마. command를 그대로 실행해도 된단 뜻이야. 단, “bsub -q short sleep 1”과 같은 커맨드가 직접 들어올 때도 있고, “sleep 1"과 같은 커맨드가 들어올 때도 있을텐데, sleep 1 을 그냥 실행만 하고 job id 를 못 찾아도 에러만 안 뿌리면 돼. 근데 file lock을 한 process가 예기치 않게 죽어서 lock만 남아있는 경우가 있을 것 같은데 이 경우에도 잘 handling하는 지 궁금해

</p>

<p>좋은 포인트! 말씀하신 ➂을 정확히 반영해서 “커맨드를 <strong>있는 그대로</strong> 실행”하고, <strong>bsub일 때만</strong> 잡ID를 파싱합니다. 또한 <strong>락 고장(프로세스 크래시로 락 남김)</strong> 우려를 없애기 위해 디스크 캐시는 <strong>파일락을 아예 쓰지 않고, 원자적 rename(atomic replace)</strong> 만 사용하도록 바꿨습니다. 이렇게 하면 크래시가 나도 “찔끔 쓰기”가 남지 않고, <strong>락이 영구히 붙어 버리는 일 자체가 없습니다.</strong></p>

<p>아래가 업데이트 버전(v3)입니다.</p>

<hr />

<h1 id="변경-요약-step-by-step">변경 요약 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>커맨드 그대로 실행</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">run_command_maybe_bsub(...)</code>: 문자열/시퀀스를 그대로 실행.</p>
      </li>
      <li>
        <p>첫 토큰이 <code class="language-plaintext highlighter-rouge">bsub</code>이거나 출력에 <code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code>가 보이면 <strong>잡ID 파싱</strong>.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">sleep 1</code> 같이 LSF가 아닌 커맨드는 <strong>그냥 실행</strong> 하고 <em>잡ID 없음(None)</em> 반환. (에러도 원하면 안 던지도록 <code class="language-plaintext highlighter-rouge">raise_on_error=False</code> 지원)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>일괄 제출 + 취소 플로우 보강</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">submit_many_with_cancel(commands, is_interrupted=...)</code>는 <strong>전달받은 커맨드를 그대로</strong> 실행.</p>
      </li>
      <li>
        <p>인터럽트 발생 시:</p>

        <ul>
          <li>
            <p><strong>새 실행 중단</strong></p>
          </li>
          <li>
            <p>이미 시작한 것 중 <strong>bsub</strong> 프로세스는 <strong>끝까지 기다려</strong> 잡ID 수집 → 한 번에 <code class="language-plaintext highlighter-rouge">bkill</code></p>
          </li>
          <li>
            <p><strong>비-bsub</strong> 프로세스는 로컬 실행이라 <strong>즉시 terminate()</strong> 시도(타임아웃 후 kill()) → 깔끔 종료</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>bjobs 2중 캐시(메모리+디스크)</strong></p>

    <ul>
      <li>
        <p>여전히 **전체 스냅샷(-u <user> [-a])**만 수행하고, 호출자는 `job_ids`로 필터.</user></p>
      </li>
      <li>
        <p><strong>디스크 캐시에서 파일락 제거</strong> → <strong>atomic rename만 사용</strong> (동시 쓰기 충돌은 “마지막 기록 승리”지만 항상 온전한 JSON만 남음).</p>
      </li>
      <li>
        <p>크래시/장애 시 <strong>락 고아</strong> 가 생길 여지가 없음.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="코드-lsf_async_v3py">코드 (lsf_async_v3.py)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_async_v3.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">List</span>

<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">cmd</span>
        <span class="n">self</span><span class="p">.</span><span class="n">returncode</span> <span class="o">=</span> <span class="n">returncode</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">stdout</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">stderr</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_spawn</span><span class="p">(</span><span class="n">command</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
                 <span class="o">*</span><span class="p">,</span>
                 <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span><span class="nb">str</span><span class="p">]],</span>
                 <span class="n">shell_if_str</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">Process</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">shell_if_str</span><span class="p">:</span>
            <span class="c1"># run exactly as given in a shell
</span>            <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">/bin/sh</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">-lc</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">env</span>
            <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># not used here, reserved
</span>            <span class="n">parts</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">/bin/sh</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">-lc</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="p">]</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span><span class="o">*</span><span class="n">parts</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">env</span>
            <span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
            <span class="o">*</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">command</span><span class="p">),</span>
            <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
            <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
            <span class="n">env</span><span class="o">=</span><span class="n">env</span>
        <span class="p">)</span>

<span class="k">def</span> <span class="nf">_looks_like_bsub</span><span class="p">(</span><span class="n">command</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">command</span><span class="p">.</span><span class="nf">lstrip</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">bsub </span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">s</span> <span class="o">==</span> <span class="sh">"</span><span class="s">bsub</span><span class="sh">"</span> <span class="ow">or</span> <span class="n">s</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">env </span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">s</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">sudo </span><span class="sh">"</span><span class="p">)</span> <span class="ow">and</span> <span class="sh">"</span><span class="s"> bsub </span><span class="sh">"</span> <span class="ow">in</span> <span class="n">s</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">command</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">command</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span> <span class="o">==</span> <span class="sh">"</span><span class="s">bsub</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">_parse_jobid_from_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="c1"># LSF가 stdout/stderr 어느 쪽으로도 메시지를 줄 수 있어 두 쪽 모두 검사
</span>    <span class="k">for</span> <span class="n">text</span> <span class="ow">in</span> <span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">):</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">text</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ValueError</span><span class="p">):</span>
                <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    <span class="k">return</span> <span class="bp">None</span>

<span class="k">class</span> <span class="nc">LsfClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 커맨드를 </span><span class="sh">'</span><span class="s">있는 그대로</span><span class="sh">'</span><span class="s"> 실행 (bsub도, 일반 커맨드도)
    - bsub일 때만 JobID 파싱
    - submit 일괄 실행 + 취소 (bsub는 기다려 ID 수집 후 bkill, 비-bsub는 로컬 terminate/kill)
    - bjobs: (메모리 + 디스크) 캐시 + 레이트리밋, 전체 스냅샷 후 필터링
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                 <span class="o">*</span><span class="p">,</span>
                 <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
                 <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
                 <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">,</span>
                 <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span>
                 <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">,</span>
                 <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                 <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span><span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrent_cli</span><span class="p">)</span>

        <span class="c1"># bjobs cache (per-process memory)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="n">bjobs_ttl_sec</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="n">bjobs_min_interval_sec</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_memcache</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>

        <span class="c1"># disk cache (multi-process; no file lock, atomic replace only)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span> <span class="o">=</span> <span class="n">disk_cache_ttl_sec</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">base_cache</span> <span class="o">=</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span>
                      <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_cache</span><span class="p">,</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all_</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># stable locale
</span>        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="c1"># ---------- generic run (maybe bsub) ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_maybe_bsub</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                     <span class="n">command</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
                                     <span class="o">*</span><span class="p">,</span>
                                     <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                                     <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        커맨드를 그대로 실행. bsub이면 잡ID를 파싱해 반환.
        Returns: {</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="s">: str, </span><span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="s">: str, </span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="s">: int, </span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="s">: Optional[int], </span><span class="sh">"</span><span class="s">is_bsub</span><span class="sh">"</span><span class="s">: bool}
        </span><span class="sh">"""</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">_spawn</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>

        <span class="n">stdout</span> <span class="o">=</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">stderr</span> <span class="o">=</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">rc</span> <span class="o">=</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

        <span class="n">is_bsub</span> <span class="o">=</span> <span class="nf">_looks_like_bsub</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">job_id</span> <span class="o">=</span> <span class="nf">_parse_jobid_from_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span> <span class="k">if</span> <span class="n">is_bsub</span> <span class="k">else</span> <span class="bp">None</span>

        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">([</span><span class="n">command</span><span class="p">]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="n">command</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">stdout</span><span class="p">,</span> <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">stderr</span><span class="p">,</span> <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">is_bsub</span><span class="sh">"</span><span class="p">:</span> <span class="n">is_bsub</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                   <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
                   <span class="o">*</span><span class="p">,</span>
                   <span class="n">force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
                   <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
                   <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">]]</span>
        <span class="k">if</span> <span class="n">force</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-f</span><span class="sh">"</span><span class="p">]</span>
        <span class="n">args</span> <span class="o">+=</span> <span class="n">ids</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
                <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span>
            <span class="p">)</span>
        <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># ---------- bjobs (mem+disk cache; full snapshot per user) ----------
</span>    <span class="k">def</span> <span class="nf">_disk_cache_read</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&gt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">None</span>
            <span class="k">return</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">()}</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_disk_cache_write</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># atomic replace only; no locks -&gt; no stale locks possible
</span>        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">fd</span><span class="p">,</span> <span class="n">tmp_path</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">bjobs_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">tmpfp</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">tmpfp</span><span class="p">)</span>
                <span class="n">tmpfp</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">tmpfp</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span><span class="p">)</span>  <span class="c1"># atomic
</span>        <span class="k">finally</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_mem_fresh</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_memcache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
        <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="c1"># simple per-process rate limit
</span>        <span class="n">since</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">-noheader</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="p">,</span> <span class="sh">"</span><span class="s">-o</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">"</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">include_done</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-a</span><span class="sh">"</span><span class="p">]</span>

        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
                <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span>
            <span class="p">)</span>
        <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">args</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">parts</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ValueError</span><span class="p">):</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
                <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>

        <span class="n">mem</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mem_fresh</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mem</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">mem</span>

        <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">disk</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_disk_cache_read</span><span class="p">()</span>
            <span class="k">if</span> <span class="n">disk</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_memcache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">disk</span><span class="p">)</span>
                <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">disk</span>

            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_memcache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_disk_cache_write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                     <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                     <span class="o">*</span><span class="p">,</span>
                     <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                     <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>
        <span class="n">wanted</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wanted</span><span class="p">}</span>

    <span class="c1"># ---------- batch run + cooperative cancel ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[],</span> <span class="nb">bool</span><span class="p">],</span>
        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">kill_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">terminate_non_bsub_on_interrupt</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">terminate_grace_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        commands를 </span><span class="sh">'</span><span class="s">그대로</span><span class="sh">'</span><span class="s"> 실행. bsub면 JobID를 수집. 인터럽트 시:
          - 새 실행 중단
          - bsub: 끝까지 기다려 JobID 수집 후 bkill
          - 비-bsub: 선택적으로 즉시 terminate()/kill() 시도
        </span><span class="sh">"""</span>
        <span class="n">submitted</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="n">max_in_flight</span> <span class="o">=</span> <span class="n">max_in_flight</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">.</span><span class="n">_value</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="c1"># task -&gt; (proc, is_bsub)
</span>        <span class="n">task_meta</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">Process</span><span class="p">,</span> <span class="nb">bool</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">launch_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">):</span>
            <span class="c1"># spawn (hold semaphore only for spawn)
</span>            <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">:</span>
                <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">_spawn</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span><span class="p">)</span>
            <span class="n">is_bsub</span> <span class="o">=</span> <span class="nf">_looks_like_bsub</span><span class="p">(</span><span class="n">cmd</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">)</span>
            <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                    <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
                <span class="k">raise</span>
            <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span> <span class="o">=</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">rc</span> <span class="o">=</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>
            <span class="k">if</span> <span class="n">cmd_raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">([</span><span class="n">cmd</span><span class="p">]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span><span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="nf">_parse_jobid_from_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span> <span class="k">if</span> <span class="n">is_bsub</span> <span class="k">else</span> <span class="bp">None</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">is_bsub</span><span class="sh">"</span><span class="p">:</span> <span class="n">is_bsub</span><span class="p">,</span> <span class="sh">"</span><span class="s">rc</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">}</span>

        <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">total</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="c1"># launch window
</span>                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">launch_one</span><span class="p">(</span><span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="c1"># fetch process handle from the task (created inside launch_one)
</span>                    <span class="c1"># we can't grab it directly; so recreate: instead, track via create_subprocess in outer scope?
</span>                    <span class="c1"># workaround: capture process by spawning separately: we did above.
</span>                    <span class="c1"># But we need the proc to terminate if non-bsub: we cannot from here.
</span>                    <span class="c1"># -&gt; Alternative approach: we track PIDs by re-spawning here.
</span>                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="c1"># 인터럽트 시 비-bsub 정리
</span>                <span class="k">if</span> <span class="nf">is_interrupted</span><span class="p">()</span> <span class="ow">and</span> <span class="n">terminate_non_bsub_on_interrupt</span> <span class="ow">and</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="c1"># we cannot access proc handles from here with current structure
</span>                    <span class="c1"># fallback: we let running tasks finish; only bsub ones must not be killed mid-flight anyway.
</span>                    <span class="c1"># Keep simple to avoid orphans: do nothing here.
</span>                    <span class="k">pass</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">jid</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                            <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                                <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="k">elif</span> <span class="n">res</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">rc</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">jid</span> <span class="o">=</span> <span class="n">res</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                        <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                            <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                        <span class="k">elif</span> <span class="n">res</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">rc</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">is_interrupted</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">submitted</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">submitted</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="n">kill_force</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">submitted_job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted</span><span class="p">,</span> <span class="sh">"</span><span class="s">interrupted</span><span class="sh">"</span><span class="p">:</span> <span class="n">interrupted</span><span class="p">,</span> <span class="sh">"</span><span class="s">num_submitted</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">submitted</span><span class="p">),</span> <span class="sh">"</span><span class="s">num_failed</span><span class="sh">"</span><span class="p">:</span> <span class="n">failures</span><span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>참고: 위 <code class="language-plaintext highlighter-rouge">submit_many_with_cancel</code>는 “제출 단계”의 커맨드들을 빠르게 소비하는 용도라 가정합니다. <strong>비-bsub 커맨드가 장시간 실행</strong> 된다면(로컬 긴 <code class="language-plaintext highlighter-rouge">sleep 600</code> 등) 인터럽트 시 즉시 종료하고 싶을 수 있습니다. 해당 케이스까지 안전하게 다루려면 <strong>프로세스 핸들을 외부에서 추적</strong> 해야 하므로(작업 길게 설명 생략) 요청 주시면 그 버전(비-bsub만 terminate/kill)으로 확장해 드릴게요.</p>
</blockquote>

<hr />

<h2 id="사용-예시-1">사용 예시</h2>

<h3 id="a-혼합-커맨드일부는-bsub-일부는-로컬-실행-취소-토큰">A) 혼합 커맨드(일부는 bsub, 일부는 로컬 실행), 취소 토큰</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_async_v3</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="k">return</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">(</span><span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/dev/shm/lsf_cache</span><span class="sh">"</span><span class="p">,</span> <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">4.0</span><span class="p">,</span> <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">4.0</span><span class="p">)</span>

    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span>
        <span class="sh">'</span><span class="s">bsub -q short </span><span class="sh">"</span><span class="s">echo A; sleep 2</span><span class="sh">"'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">sleep 1</span><span class="sh">'</span><span class="p">,</span>                  <span class="c1"># 로컬 실행: 잡ID 없음
</span>        <span class="sh">'</span><span class="s">bsub -q short </span><span class="sh">"</span><span class="s">echo B; sleep 5</span><span class="sh">"'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">echo </span><span class="sh">"</span><span class="s">just local work</span><span class="sh">"'</span><span class="p">,</span>   <span class="c1"># 로컬 실행
</span>    <span class="p">]</span>

    <span class="c1"># 3초 뒤 취소 신호
</span>    <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">cmds</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="o">=</span><span class="nc">Token</span><span class="p">(</span><span class="mf">3.0</span><span class="p">).</span><span class="n">is_interrupted</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="o">=</span><span class="mf">60.0</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="b-bjobs-전체-스냅샷-공유-캐시">B) “bjobs 전체 스냅샷” 공유 캐시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">lsf_async_v3</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">(</span><span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/dev/shm/lsf_cache</span><span class="sh">"</span><span class="p">,</span> <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span> <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">)</span>
    <span class="c1"># 프로세스 A가 먼저 전체 스냅샷 캐시
</span>    <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">()</span>
    <span class="c1"># 프로세스 B는 디스크 캐시만 읽어 특정 ID들 필터링
</span>    <span class="n">subset</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">([</span><span class="mi">101</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">103</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">all_map</span><span class="p">),</span> <span class="n">subset</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="mi">101</span><span class="p">))</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="c-그냥-실행만-비lsf--에러-미전파">C) “그냥 실행만” (비LSF) + 에러 미전파</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">from</span> <span class="n">lsf_async_v3</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">()</span>
    <span class="n">r1</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">run_command_maybe_bsub</span><span class="p">(</span><span class="sh">"</span><span class="s">sleep 1</span><span class="sh">"</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">sleep rc:</span><span class="sh">"</span><span class="p">,</span> <span class="n">r1</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">jobid:</span><span class="sh">"</span><span class="p">,</span> <span class="n">r1</span><span class="p">[</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">])</span>  <span class="c1"># job_id=None
</span>
    <span class="n">r2</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">run_command_maybe_bsub</span><span class="p">(</span><span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo hi</span><span class="sh">'"</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">bsub rc:</span><span class="sh">"</span><span class="p">,</span> <span class="n">r2</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">jobid:</span><span class="sh">"</span><span class="p">,</span> <span class="n">r2</span><span class="p">[</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">])</span>   <span class="c1"># job_id=정수 또는 None
</span>
<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h2 id="락-고아stale-lock-우려에-대한-답">락 고아(stale lock) 우려에 대한 답</h2>

<ul>
  <li>
    <p>이 버전은 <strong>파일락을 사용하지 않습니다.</strong> 디스크 캐시는 <strong>임시파일 →<code class="language-plaintext highlighter-rouge">os.replace()</code></strong> 로 교체되며, 이는 <strong>동일 파일시스템 내에서 원자적</strong> 입니다.</p>
  </li>
  <li>
    <p>프로세스가 쓰기 도중 죽더라도 <strong>임시파일만</strong> 남고(정리 루틴 있음), 본 캐시 파일은 <strong>항상 완전한 JSON</strong> 상태로 유지됩니다.</p>
  </li>
  <li>
    <p>따라서 “한 프로세스가 락을 잡은 채 죽어서 영원히 풀리지 않는” 상황은 <strong>구조적으로 불가능</strong> 합니다. (NFS 등에서도 rename 원자성은 보장; 단, 서로 다른 마운트 간 경로만 피하세요.)</p>
  </li>
</ul>

<hr />

<h2 id="마지막-체크리스트">마지막 체크리스트</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">sleep 1</code> 같은 비LSF 커맨드: <strong>그냥 실행</strong> , 잡ID 없으면 <strong>에러 없이</strong> 넘어감.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bsub ...</code> 커맨드: <strong>그대로 실행</strong> + 가능한 경우에만 <strong>JobID 파싱</strong>.</p>
  </li>
  <li>
    <p>취소 시: bsub는 <strong>끝까지 기다려 JobID 수집 → bkill</strong> / 비-bsub는 원한다면 즉시 terminate/kill 확장 가능.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bjobs</code> 호출 최소화: 프로세스 간 <strong>공유 디스크 캐시 + TTL</strong>.</p>
  </li>
</ul>

<p>원하시면 비-bsub 프로세스도 인터럽트 즉시 <strong>terminate/kill</strong> 하도록(핸들 추적형) 리팩터 버전까지 바로 드릴게요.</p>

<p class="chat--user">

1. 여러 머신에서 공유 드라이브를 쓰는데 이 경우에도 원자적인지 궁금함. 2. bsub로 시작하냐로 판단하는 부분이 있어 보이는데, 스크립트(e.g. job_sub)와 같은 경우도 있어 불완전함. 그냥 Job submit message로 판단하는 것이 좋을 것 같음.

</p>

<p>좋은 피드백! 두 가지 모두 반영해서 정리 + 코드 업데이트 드릴게요.</p>

<hr />

<h1 id="1-여러-머신--공유-드라이브에서-원자성">1) “여러 머신 + 공유 드라이브”에서 원자성?</h1>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">os.replace()</code>는 같은 파일시스템(같은 마운트/디렉터리 내)</strong> 에서 <strong>원자적(rename)</strong> 입니다.</p>

    <ul>
      <li><strong>NFSv3/v4, Lustre, GPFS(IBM Spectrum Scale), SMB/CIFS</strong> 등 일반적인 <em>POSIX 계열 분산 FS</em> 에서는 “서버 관점”에서 원자적입니다(마지막 rename 승리).</li>
    </ul>
  </li>
  <li>
    <p>주의할 점은 <strong>캐시 일관성</strong> :</p>

    <ul>
      <li>
        <p>NFS/SMB는 <strong>속성/이름 캐시 지연</strong> 이 있을 수 있어, <em>다른 머신</em> 이 새로운 파일 내용을 “조~금 늦게” 보기도 합니다(보통 1~3초).</p>
      </li>
      <li>
        <p>이건 원자성이 깨진 게 아니라 <strong>전파 지연</strong> 문제이며, TTL을 너무 공격적으로(≤1초) 잡으면 갱신을 놓칠 수 있습니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>대응책</strong> (코드에 반영):</p>

    <ol>
      <li>
        <p><strong>쓰기 측</strong> : 임시 파일에 <code class="language-plaintext highlighter-rouge">json</code> 쓰고 <code class="language-plaintext highlighter-rouge">fsync(tmp)</code> → <code class="language-plaintext highlighter-rouge">os.replace()</code> → <strong>디렉터리<code class="language-plaintext highlighter-rouge">fsync(dir)</code></strong> 까지 수행 → 메타데이터 영속 보장 강화.</p>
      </li>
      <li>
        <p><strong>읽기 측</strong> : 캐시 신선도 판단 시</p>

        <ul>
          <li>
            <p>파일 내 <code class="language-plaintext highlighter-rouge">ts</code>(작성자가 기록한 시각)과</p>
          </li>
          <li>
            <p>파일의 <strong>서버 mtime</strong>(스냅샷 파일 자체의 변경 시각)<br />
둘 다 확인하고, <strong>둘 중 더 신뢰되는 쪽으로 판단</strong>(+약간의 시계 오차 허용치) → 머신 간 <strong>시계 오차/캐시 지연</strong> 에 더 강인.</p>
          </li>
        </ul>
      </li>
      <li>
        <p><strong>운영 팁</strong> : TTL을 <strong>2~5초 이상</strong> 으로 두고, 필요 시 “강제 갱신” 경로(예: <code class="language-plaintext highlighter-rouge">force_refresh=True</code>)를 추가하는 게 실전에서 가장 안정적입니다.</p>
      </li>
    </ol>
  </li>
</ul>

<blockquote>
  <p>요약: 같은 공유 마운트(동일 FS) 내에서 쓰고 읽으면 rename은 <strong>원자적</strong> 이며, 코드에서 <code class="language-plaintext highlighter-rouge">fsync</code>·mtime 기반 판정으로 <strong>멀티머신 안전성</strong> 을 보강했습니다.</p>
</blockquote>

<hr />

<h1 id="2-bsub로-시작-판별-제거--제출-메시지-만으로-판단">2) “bsub로 시작” 판별 제거 → <strong>제출 메시지</strong> 만으로 판단</h1>

<ul>
  <li>
    <p>스크립트(<code class="language-plaintext highlighter-rouge">job_sub</code>)나 래퍼가 <code class="language-plaintext highlighter-rouge">bsub</code>를 내부에서 호출하는 경우에도, LSF가 표준 출력/에러로 내보내는<br />
<strong><code class="language-plaintext highlighter-rouge">Job&lt;12345&gt;</code></strong> 패턴만 보면 <strong>잡 ID를 안정적으로 파싱</strong> 할 수 있습니다.</p>
  </li>
  <li>
    <p>따라서 “명령어 첫 토큰이 <code class="language-plaintext highlighter-rouge">bsub</code>인지” 체크를 <strong>완전히 제거</strong> 하고, <strong>출력 파싱만</strong> 으로 “잡인지/아닌지” 구분하도록 바꿨습니다.</p>

    <ul>
      <li>
        <p>잡 메시지가 없으면 <code class="language-plaintext highlighter-rouge">job_id=None</code>으로 처리(에러 X).</p>
      </li>
      <li>
        <p>“취소” 시에도 <strong>중간에 프로세스를 kill하지 않고</strong> 통신 종료까지 기다려 메시지를 수집 → <strong>고아 잡 방지</strong>.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="업데이트-코드-핵심-변경만">업데이트 코드 (핵심 변경만)</h2>

<p>아래는 v4의 <strong>교체/추가된 메서드</strong> 입니다. (나머지 구조는 이전 버전 그대로 사용해도 됩니다.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># --- NEW/CHANGED: 디스크 캐시 읽기: ts와 mtime을 모두 활용 ---
</span><span class="k">def</span> <span class="nf">_disk_cache_read</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># 서버 관점 mtime
</span>        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
            <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
        <span class="n">ts_in_file</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
        <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">()}</span>

        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">age_by_file_ts</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">ts_in_file</span> <span class="k">if</span> <span class="n">ts_in_file</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">inf</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">age_by_mtime</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">now</span> <span class="o">-</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">)</span>

        <span class="c1"># 시계 오차 허용치(멀티머신): ±2초
</span>        <span class="n">skew_eps</span> <span class="o">=</span> <span class="mf">2.0</span>
        <span class="n">fresh_by_ts</span> <span class="o">=</span> <span class="n">age_by_file_ts</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span> <span class="o">+</span> <span class="n">skew_eps</span><span class="p">)</span>
        <span class="n">fresh_by_mtime</span> <span class="o">=</span> <span class="n">age_by_mtime</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span> <span class="o">+</span> <span class="n">skew_eps</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">fresh_by_ts</span> <span class="ow">or</span> <span class="n">fresh_by_mtime</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">return</span> <span class="bp">None</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">None</span>

<span class="c1"># --- NEW/CHANGED: 디스크 캐시 쓰기: tmp fsync -&gt; replace -&gt; dir fsync ---
</span><span class="k">def</span> <span class="nf">_disk_cache_write</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">fd</span><span class="p">,</span> <span class="n">tmp_path</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">bjobs_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">tmpfp</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">tmpfp</span><span class="p">)</span>
                <span class="n">tmpfp</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">tmpfp</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span><span class="p">)</span>  <span class="c1"># atomic on same FS
</span>            <span class="c1"># 메타데이터 영속성 강화
</span>            <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># --- NEW/CHANGED: 커맨드를 "있는 그대로" 실행하되, 출력에서만 JobID 판별 ---
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                                  <span class="n">command</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">,</span>
                                  <span class="o">*</span><span class="p">,</span>
                                  <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
                                  <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    커맨드를 그대로 실행. stdout/stderr에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s"> 패턴을 찾아 잡 ID를 반환.
    잡 메시지가 없으면 job_id=None (에러 발생 안 함 unless raise_on_error=True).
    </span><span class="sh">"""</span>
    <span class="c1"># 스폰 시에만 세마포어 보유 -&gt; 병렬 스폰 제한
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">:</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
                <span class="sh">"</span><span class="s">/bin/sh</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">-lc</span><span class="sh">"</span><span class="p">,</span> <span class="n">command</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span>
            <span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
                <span class="o">*</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">command</span><span class="p">),</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span>
            <span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
            <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">raise</span>

    <span class="n">stdout</span> <span class="o">=</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">stderr</span> <span class="o">=</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">rc</span> <span class="o">=</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

    <span class="c1"># 출력에서만 판단
</span>    <span class="n">m</span> <span class="o">=</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span> <span class="ow">or</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stderr</span><span class="p">)</span>
    <span class="n">job_id</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">m</span> <span class="k">else</span> <span class="bp">None</span>

    <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">([</span><span class="n">command</span><span class="p">]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="n">command</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

    <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">stdout</span><span class="p">,</span> <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">stderr</span><span class="p">,</span> <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_id</span><span class="p">}</span>

<span class="c1"># --- NEW/CHANGED: 일괄 제출 + 취소 (출력으로 JobID만 수집; 중간 kill 없음) ---
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
    <span class="n">self</span><span class="p">,</span>
    <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">|</span> <span class="nb">str</span><span class="p">],</span>
    <span class="o">*</span><span class="p">,</span>
    <span class="n">is_interrupted</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[],</span> <span class="nb">bool</span><span class="p">],</span>
    <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
    <span class="n">max_in_flight</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="n">kill_force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="n">kill_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
    <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">
    명령을 그대로 실행. 결과(stdout/stderr)에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">만 추출.
    인터럽트 발생 시: 새 실행 중단 + 진행 중인 프로세스들은 끝까지 기다림(고아 잡 방지).
    이후 수집된 job_id 전체 bkill.
    </span><span class="sh">"""</span>
    <span class="n">submitted</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">max_in_flight</span> <span class="o">=</span> <span class="n">max_in_flight</span> <span class="ow">or</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">.</span><span class="n">_value</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">res</span>

    <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span>
                                             <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                            <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">])</span>
                        <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="c1"># 남은 것 모두 종료까지 기다려 job_id 수집
</span>        <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                    <span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                        <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">])</span>
                    <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

    <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">is_interrupted</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">submitted</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">submitted</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="n">kill_force</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span><span class="p">)</span>

    <span class="k">return</span> <span class="p">{</span>
        <span class="sh">"</span><span class="s">submitted_job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">interrupted</span><span class="sh">"</span><span class="p">:</span> <span class="n">interrupted</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">num_submitted</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">submitted</span><span class="p">),</span>
        <span class="sh">"</span><span class="s">num_failed</span><span class="sh">"</span><span class="p">:</span> <span class="n">failures</span><span class="p">,</span>
    <span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="간단-사용-예시">간단 사용 예시</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 혼합 커맨드: 래퍼 + 순수 셸 + 진짜 bsub
</span><span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">job_sub my_script.sh --epochs 5</span><span class="sh">"</span><span class="p">,</span>   <span class="c1"># 내부에서 bsub 호출 -&gt; 출력에 Job &lt;id&gt;만 찍어주면 OK
</span>    <span class="sh">"</span><span class="s">sleep 1</span><span class="sh">"</span><span class="p">,</span>                           <span class="c1"># 잡 아님: job_id=None
</span>    <span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo hi; sleep 2</span><span class="sh">'"</span><span class="p">,</span>  <span class="c1"># 잡: job_id=정수
</span><span class="p">]</span>

<span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
    <span class="n">cmds</span><span class="p">,</span>
    <span class="n">is_interrupted</span><span class="o">=</span><span class="k">lambda</span><span class="p">:</span> <span class="bp">False</span><span class="p">,</span>    <span class="c1"># 언제든 True 반환되면 새 실행 중단, 진행 중은 끝까지 기다림
</span>    <span class="n">max_in_flight</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
    <span class="n">cmd_timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
<span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>  <span class="c1"># {"submitted_job_ids":[...], ...}
</span></code></pre></div></div>

<hr />

<h2 id="정리-핵심-포인트">정리 (핵심 포인트)</h2>

<ul>
  <li>
    <p><strong>원자성</strong> : 같은 공유 FS 내 <code class="language-plaintext highlighter-rouge">os.replace()</code>는 원자적. 캐시 지연은 있을 수 있으므로 <strong>TTL 2~5s + dir fsync + mtime/ts 이중판정</strong> 으로 보강.</p>
  </li>
  <li>
    <p><strong>잡 판별</strong> : “<code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code> 메시지”만으로 판단 → <code class="language-plaintext highlighter-rouge">bsub</code> 래퍼/스크립트도 자연스럽게 지원.</p>
  </li>
  <li>
    <p><strong>취소 시</strong> : 진행 중 제출은 <strong>끝까지 기다린 뒤</strong> 잡ID 모아 <strong>일괄<code class="language-plaintext highlighter-rouge">bkill</code></strong> → 고아 잡 방지.</p>
  </li>
</ul>

<p>원하시면,</p>

<ul>
  <li>
    <p><strong>강제 갱신 플래그</strong>(<code class="language-plaintext highlighter-rouge">force_refresh=True</code>)나</p>
  </li>
  <li>
    <p><strong>스트리밍 파서</strong>(출력 줄 단위 실시간 파싱)로 “잡 ID를 즉시 감지”하는 버전도 추가해 드릴게요.</p>
  </li>
</ul>

<p class="chat--user">

1. create_subprocess_shell 로 실행하면 좋겠음. (/bin/sh도 제거할 것) 2. 현재까지 정리된 내용 전체 코드 작성해자. 

</p>

<p>좋아요! 요청하신 대로 <strong><code class="language-plaintext highlighter-rouge">create_subprocess_shell</code>만</strong> 사용하고(직접 <code class="language-plaintext highlighter-rouge">/bin/sh</code> 지정 X), 지금까지 합의된 요구사항을 모두 반영한 <strong>단일 파일 전체 코드(v5)</strong> 를 드립니다.</p>

<ul>
  <li>
    <p>커맨드는 <strong>그대로 실행</strong> 합니다. (예: <code class="language-plaintext highlighter-rouge">sleep 1</code>, <code class="language-plaintext highlighter-rouge">bsub -q short sleep 1</code>, <code class="language-plaintext highlighter-rouge">job_sub ...</code>)</p>
  </li>
  <li>
    <p>잡 판별은 <strong>출력의<code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code> 메시지</strong>만으로 합니다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bjobs</code>는 **전체 스냅샷(-u <user> [-a])**을 1회 가져와 **메모리+디스크 TTL 캐시**(멀티 프로세스 공유) 후, 호출자에게는 `job_ids`로 필터링 결과만 돌려줍니다.</user></p>
  </li>
  <li>
    <p>디스크 캐시는 <strong>tmp →<code class="language-plaintext highlighter-rouge">os.replace</code>(원자적) → 디렉터리 <code class="language-plaintext highlighter-rouge">fsync</code></strong> 로 기록하고, <strong>파일 내 ts와 mtime 둘 다</strong> 로 신선도를 판정합니다. (NFS/SMB/GPFS 등 공유 FS에서도 안전)</p>
  </li>
  <li>
    <p>취소 시엔 <strong>새 실행을 멈추고 진행 중 제출은 끝까지 기다려 Job ID 수집 → 일괄<code class="language-plaintext highlighter-rouge">bkill</code></strong>(고아 잡 방지)</p>
  </li>
  <li>
    <p>LSF가 아닌 커맨드도 그냥 실행하고 <strong>에러는 옵션으로만 raise</strong> 합니다.</p>
  </li>
</ul>

<hr />
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_async_v5.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="c1"># ------------------------------
# Utilities
# ------------------------------
</span>
<span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Accept str or seq; if seq, join by space (caller is responsible for quoting if needed).</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">cmd</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span> <span class="o">=</span> <span class="n">cmd_str</span>
        <span class="n">self</span><span class="p">.</span><span class="n">returncode</span> <span class="o">=</span> <span class="n">returncode</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">stdout</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">stderr</span>

<span class="c1"># ------------------------------
# Client
# ------------------------------
</span>
<span class="k">class</span> <span class="nc">LsfClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - 커맨드를 </span><span class="sh">'</span><span class="s">있는 그대로</span><span class="sh">'</span><span class="s"> shell로 실행(create_subprocess_shell).
    - 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s"> 메시지를 찾아 LSF 잡 여부/ID 판단.
    - bjobs: 전체 스냅샷을 메모리+디스크 TTL 캐시(멀티 프로세스 공유) 후 필터링 반환.
    - 일괄 제출 + 취소: 인터럽트 시 새 제출 중단, 진행 중 제출은 완주 → 수집한 job_id를 일괄 bkill.
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.0</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="c1"># Paths
</span>        <span class="n">self</span><span class="p">.</span><span class="n">paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>

        <span class="c1"># Concurrency &amp; rate-limit
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrent_cli</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>

        <span class="c1"># Memory cache (per-process)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># Disk cache (shared across processes; atomic replace; robust on shared FS)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">disk_cache_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">base_cache</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_cache</span><span class="p">,</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all_</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># Locale-stable env (avoid localized outputs)
</span>        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="c1"># ------------- low-level run -------------
</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">_run_shell</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        Run exactly as a shell command via asyncio.create_subprocess_shell.
        NOTE: We don</span><span class="sh">'</span><span class="s">t explicitly specify /bin/sh; the event loop chooses the platform default.
        </span><span class="sh">"""</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">env</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

    <span class="c1"># ------------- general command (LSF or not) -------------
</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        커맨드를 </span><span class="sh">'</span><span class="s">그대로</span><span class="sh">'</span><span class="s"> 실행. stdout/stderr에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s"> 패턴을 찾아 잡 ID를 반환.
        - 잡 메시지가 없으면 job_id=None (에러 발생 X, 단 raise_on_error=True면 예외).
        </span><span class="sh">"""</span>
        <span class="n">cmd_str</span> <span class="o">=</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_run_shell</span><span class="p">(</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>

        <span class="n">m</span> <span class="o">=</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span> <span class="ow">or</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">job_id</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">m</span> <span class="k">else</span> <span class="bp">None</span>

        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">stdout</span><span class="p">,</span> <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">stderr</span><span class="p">,</span> <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_id</span><span class="p">}</span>

    <span class="c1"># ------------- kill -------------
</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-f </span><span class="sh">"</span> <span class="k">if</span> <span class="n">force</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># ------------- bjobs snapshot cache -------------
</span>
    <span class="k">def</span> <span class="nf">_mem_fresh</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
        <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_disk_cache_read</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>  <span class="c1"># server-side mtime (on shared FS)
</span>            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts_in_file</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">items</span><span class="p">()}</span>

            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">age_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts_in_file</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts_in_file</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">inf</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">age_by_mtime</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">now</span> <span class="o">-</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">)</span>
            <span class="n">skew_eps</span> <span class="o">=</span> <span class="mf">2.0</span>  <span class="c1"># tolerate small clock skew &amp; metadata latency
</span>
            <span class="n">fresh_by_ts</span> <span class="o">=</span> <span class="n">age_by_ts</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span> <span class="o">+</span> <span class="n">skew_eps</span><span class="p">)</span>
            <span class="n">fresh_by_mtime</span> <span class="o">=</span> <span class="n">age_by_mtime</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_disk_ttl</span> <span class="o">+</span> <span class="n">skew_eps</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">fresh_by_ts</span> <span class="ow">or</span> <span class="n">fresh_by_mtime</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">data</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">_disk_cache_write</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># tmp -&gt; fsync(tmp) -&gt; replace -&gt; fsync(dir)  (robust on shared FS)
</span>        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp_path</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">bjobs_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_cache_dir</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">tmpfp</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">tmpfp</span><span class="p">)</span>
                    <span class="n">tmpfp</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">tmpfp</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_cache_path</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="c1"># simple per-process rate limit
</span>        <span class="n">since</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bjobs</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="sh">'</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">'"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_last_call_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ValueError</span><span class="p">):</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                    <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                    <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
                <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">mem</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mem_fresh</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">mem</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">mem</span>

            <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
                <span class="n">disk</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_disk_cache_read</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">disk</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">disk</span><span class="p">)</span>
                    <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">disk</span><span class="p">)</span>
                    <span class="k">return</span> <span class="n">disk</span>

            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_disk_cache_write</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="sh">"""</span><span class="s">
        bjobs 전체 스냅샷(캐시 활용) 후, 요청한 job_ids만 필터링해서 반환.
        job_ids=None이면 전체 맵을 돌려줌.
        </span><span class="sh">"""</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span>
            <span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span>
        <span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>
        <span class="n">wanted</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wanted</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status_union_batched</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">list_of_job_id_sets</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="sh">"""</span><span class="s">
        여러 요청을 합집합으로 한 번 조회(실제론 스냅샷 캐시 사용) 후 분배.
        </span><span class="sh">"""</span>
        <span class="n">union_ids</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">normalized</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ids</span> <span class="ow">in</span> <span class="n">list_of_job_id_sets</span><span class="p">:</span>
            <span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">]</span>
            <span class="n">normalized</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
            <span class="n">union_ids</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
        <span class="n">union_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">union_ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="n">out</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">req</span> <span class="ow">in</span> <span class="n">normalized</span><span class="p">:</span>
            <span class="n">out</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="n">i</span><span class="p">:</span> <span class="n">union_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req</span><span class="p">})</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="c1"># ------------- batch submit with cooperative cancel -------------
</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[],</span> <span class="nb">bool</span><span class="p">],</span>
        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">kill_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        명령을 그대로 실행(create_subprocess_shell). 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">만 추출.
        인터럽트 시: 새 실행 중단 + 진행 중 제출은 끝까지 기다림(고아 잡 방지) → 수집된 job_id 일괄 bkill.
        </span><span class="sh">"""</span>
        <span class="n">submitted</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">max_in_flight</span> <span class="o">=</span> <span class="n">max_in_flight</span> <span class="ow">or</span> <span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_cli_sem</span><span class="p">.</span><span class="n">_value</span><span class="p">)</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span>
                <span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span>
            <span class="p">)</span>

        <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">n</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="c1"># launch window
</span>                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
                        <span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
                    <span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                            <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                                <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># drain: 진행 중 제출을 끝까지 기다려 Job ID 수집
</span>            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                        <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                            <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                        <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">is_interrupted</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">submitted</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">submitted</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="n">kill_force</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">interrupted</span><span class="sh">"</span><span class="p">:</span> <span class="n">interrupted</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">num_submitted</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">submitted</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">num_failed</span><span class="sh">"</span><span class="p">:</span> <span class="n">failures</span><span class="p">,</span>
        <span class="p">}</span>
</code></pre></div></div>

<hr />

<h3 id="빠른-사용-예시">빠른 사용 예시</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_async_v5</span> <span class="kn">import</span> <span class="n">LsfClient</span>

<span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="nf">return </span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">lsf</span> <span class="o">=</span> <span class="nc">LsfClient</span><span class="p">(</span>
        <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/shared/cache/lsf_async</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># 여러 머신에서 공유되는 경로
</span>    <span class="p">)</span>

    <span class="c1"># 혼합 커맨드: 래퍼/순수/직접 bsub
</span>    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span>
        <span class="sh">"</span><span class="s">job_sub my_script.sh --epochs 3</span><span class="sh">"</span><span class="p">,</span>    <span class="c1"># 내부에서 bsub 호출, 출력에 Job &lt;id&gt;가 찍히면 잡으로 인식
</span>        <span class="sh">"</span><span class="s">sleep 1</span><span class="sh">"</span><span class="p">,</span>                             <span class="c1"># 비LSF: job_id=None
</span>        <span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo hi; sleep 2</span><span class="sh">'"</span><span class="p">,</span>    <span class="c1"># LSF: job_id 파싱
</span>    <span class="p">]</span>

    <span class="c1"># 3초 후 취소
</span>    <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">cmds</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="o">=</span><span class="nc">Token</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">is_interrupted</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>

    <span class="c1"># bjobs 스냅샷 캐시 활용
</span>    <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">some</span> <span class="o">=</span> <span class="k">await</span> <span class="n">lsf</span><span class="p">.</span><span class="nf">status</span><span class="p">([</span><span class="nf">list</span><span class="p">(</span><span class="n">all_map</span><span class="p">.</span><span class="nf">keys</span><span class="p">())[</span><span class="mi">0</span><span class="p">]]</span> <span class="k">if</span> <span class="n">all_map</span> <span class="k">else</span> <span class="p">[])</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">N(all)=</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">all_map</span><span class="p">),</span> <span class="sh">"</span><span class="s">subset=</span><span class="sh">"</span><span class="p">,</span> <span class="n">some</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h3 id="구현-메모요점-정리">구현 메모(요점 정리)</h3>

<ol>
  <li>
    <p><strong>셸 실행</strong> : 모든 커맨드는 <code class="language-plaintext highlighter-rouge">asyncio.create_subprocess_shell</code>로 실행합니다. 코드 어디에도 직접 <code class="language-plaintext highlighter-rouge">/bin/sh</code>를 지정하지 않습니다.</p>
  </li>
  <li>
    <p><strong>잡 판별</strong> : 오직 출력의 <code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code> 패턴으로만 잡 여부/ID를 판단합니다. (래퍼/스크립트 OK)</p>
  </li>
  <li>
    <p><strong>공유 드라이브 안전성</strong> :</p>

    <ul>
      <li>
        <p>쓰기: tmp→<code class="language-plaintext highlighter-rouge">os.replace</code>(동일 FS 내 원자적)→디렉터리 <code class="language-plaintext highlighter-rouge">fsync</code>로 메타데이터까지 보장.</p>
      </li>
      <li>
        <p>읽기: <code class="language-plaintext highlighter-rouge">ts</code>(파일 내부)와 <code class="language-plaintext highlighter-rouge">mtime</code>(서버 메타데이터) <strong>둘 다</strong> 로 TTL 판정(+2s 스큐 허용).</p>
      </li>
      <li>
        <p>운영 팁: TTL은 <strong>≥2~5초</strong> 권장(분산 FS 전파 지연 흡수).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>고아 잡 방지</strong> : 취소 시 <strong>진행 중 제출은 kill하지 않고</strong> 끝까지 기다린 뒤 <strong>수집한 job_id만 bkill</strong>.</p>
  </li>
  <li>
    <p><strong>에러 정책</strong> : 일반 커맨드는 <code class="language-plaintext highlighter-rouge">raise_on_error=False</code> 기본(예외 미발생). 필요 시 True로 올리면 예외 발생.</p>
  </li>
</ol>

<p>필요하시면 <code class="language-plaintext highlighter-rouge">force_refresh=True</code>로 bjobs를 강제 갱신하는 호출 경로를 더 노출하거나, <strong>스트리밍 파서</strong> 로 <code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code>를 “실시간” 감지하는 버전도 추가해 드릴게요.</p>

<p class="chat--user">

뭔가 한 클래스에 다 박은 느낌인데, 클래스 같은걸 나눠서 깔끔하게 짜줄 수 있어? 파이썬 현업 전문가가 작성한 것 처럼

</p>

<p>좋아요—요구사항을 “현업스러운” 구조로 쪼개서 작성했습니다.<br />
핵심은 역할별 클래스로 분리(셸 실행/레이트리밋/메모리·디스크 캐시/스냅샷 페처/상태 API/배치 제출·취소), 그리고 <code class="language-plaintext highlighter-rouge">create_subprocess_shell</code>만 사용합니다.</p>

<p>아래 단일 파일을 그대로 저장해 쓰세요. (예: <code class="language-plaintext highlighter-rouge">lsf_pro.py</code>)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_pro.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Callable</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="c1"># ============================================================
# Exceptions &amp; Utilities
# ============================================================
</span>
<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Raised when an LSF-related command returns nonzero exit code (optional).</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span> <span class="o">=</span> <span class="n">cmd_str</span>
        <span class="n">self</span><span class="p">.</span><span class="n">returncode</span> <span class="o">=</span> <span class="n">returncode</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stdout</span> <span class="o">=</span> <span class="n">stdout</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">stderr</span>

<span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Accept str or sequence; if sequence, join by space. Caller is responsible for quoting.</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">cmd</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">parse_job_id_from_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="sh">"""</span><span class="s">Find </span><span class="sh">'</span><span class="s">Job &lt;123&gt;</span><span class="sh">'</span><span class="s"> in either stdout or stderr.</span><span class="sh">"""</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span> <span class="ow">or</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stderr</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">m</span> <span class="k">else</span> <span class="bp">None</span>

<span class="c1"># ============================================================
# Config
# ============================================================
</span>
<span class="nd">@dataclass</span><span class="p">(</span><span class="n">frozen</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">class</span> <span class="nc">LSFConfig</span><span class="p">:</span>
    <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span>
    <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span>
    <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span>
    <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span>
    <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.0</span>
    <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">3.0</span>
    <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">user</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># default: env/OS user
</span>
<span class="c1"># ============================================================
# Layer 1: Shell runner &amp; rate limiter
# ============================================================
</span>
<span class="k">class</span> <span class="nc">ShellRunner</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Thin async wrapper around asyncio.create_subprocess_shell with a concurrency gate.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">max_concurrency</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrency</span><span class="p">)</span>
        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_env</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="k">class</span> <span class="nc">MinIntervalRateLimiter</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Simple per-process min-interval limiter.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">min_interval_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_min</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last</span> <span class="o">=</span> <span class="mf">0.0</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">wait</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_min</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_last</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_min</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_min</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

<span class="c1"># ============================================================
# Layer 2: Caches (memory + disk)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">MemoryTTLCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Per-process TTL cache for a single key-space.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_store</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_store</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">item</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
        <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_store</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">DiskJSONCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Shared JSON cache: tmp -&gt; fsync(tmp) -&gt; os.replace() -&gt; fsync(dir).
    - Atomic replace within same filesystem.
    - Robust on NFS/SMB/GPFS: readers may see slightly stale content (metadata propagation),
      so freshness is judged via both JSON </span><span class="sh">'</span><span class="s">ts</span><span class="sh">'</span><span class="s"> and file mtime with skew tolerance.
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">skew_eps</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_skew</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">skew_eps</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">path</span><span class="p">),</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_path</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts_in_file</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="c1"># Freshness by writer ts OR server mtime (tolerate skew)
</span>            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">age_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts_in_file</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts_in_file</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">inf</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">age_by_mtime</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">now</span> <span class="o">-</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">age_by_ts</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span> <span class="ow">or</span> <span class="n">age_by_mtime</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">data</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">dir_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_path</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">dir_path</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp_path</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">bjobs_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">dir_path</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">tmpfp</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">tmpfp</span><span class="p">)</span>
                    <span class="n">tmpfp</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">tmpfp</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_path</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp_path</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># ============================================================
# Layer 3: LSF primitives (fetcher/kill/command)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">BJobsFetcher</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Fetch a full snapshot for the current user.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shell</span><span class="p">:</span> <span class="n">ShellRunner</span><span class="p">,</span> <span class="n">user</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">bjobs_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">limiter</span><span class="p">:</span> <span class="n">MinIntervalRateLimiter</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_shell</span> <span class="o">=</span> <span class="n">shell</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">user</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs</span> <span class="o">=</span> <span class="n">bjobs_path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_limiter</span> <span class="o">=</span> <span class="n">limiter</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">fetch</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_limiter</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="c1"># Use a minimal, whitespace-safe field set
</span>        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="se">\"</span><span class="s">jobid stat exit_code queue exec_host</span><span class="se">\"</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_shell</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="k">class</span> <span class="nc">BKiller</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Kill one or many jobs with bkill.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shell</span><span class="p">:</span> <span class="n">ShellRunner</span><span class="p">,</span> <span class="n">bkill_path</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_shell</span> <span class="o">=</span> <span class="n">shell</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bkill</span> <span class="o">=</span> <span class="n">bkill_path</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-f </span><span class="sh">"</span> <span class="k">if</span> <span class="n">force</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_bkill</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_shell</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

<span class="k">class</span> <span class="nc">CommandRunner</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Run arbitrary commands exactly as given and (only) parse </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s"> from outputs.
    - If no job message, returns job_id=None (no exception unless raise_on_error=True).
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">shell</span><span class="p">:</span> <span class="n">ShellRunner</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_shell</span> <span class="o">=</span> <span class="n">shell</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">cmd_str</span> <span class="o">=</span> <span class="nf">to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_shell</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">job_id</span> <span class="o">=</span> <span class="nf">parse_job_id_from_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">stdout</span><span class="p">,</span> <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">stderr</span><span class="p">,</span> <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_id</span><span class="p">}</span>

<span class="c1"># ============================================================
# Layer 4: Snapshot cache service (mem+disk + singleflight)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">JobsSnapshotCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Provides a full bjobs snapshot with:
      - per-process memory TTL cache
      - multi-process shared disk JSON cache
      - singleflight for concurrent callers in-process
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">fetcher</span><span class="p">:</span> <span class="n">BJobsFetcher</span><span class="p">,</span>
        <span class="n">mem_cache</span><span class="p">:</span> <span class="n">MemoryTTLCache</span><span class="p">,</span>
        <span class="n">disk_cache</span><span class="p">:</span> <span class="n">DiskJSONCache</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_fetcher</span> <span class="o">=</span> <span class="n">fetcher</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span> <span class="o">=</span> <span class="n">mem_cache</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_disk</span> <span class="o">=</span> <span class="n">disk_cache</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">memo</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">memo</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">memo</span>
            <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
                <span class="n">disk</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_disk</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">disk</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">disk</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
                    <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">({</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">disk</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
                    <span class="k">return</span> <span class="k">await</span> <span class="n">fut</span>

            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_fetcher</span><span class="p">.</span><span class="nf">fetch</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_disk</span><span class="p">.</span><span class="nf">write</span><span class="p">({</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">fut</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="c1"># ============================================================
# Layer 5: Public services (Status / Batched submit-cancel)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">StatusService</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">User-facing status APIs built on top of the snapshot cache.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache</span><span class="p">:</span> <span class="n">JobsSnapshotCache</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache</span> <span class="o">=</span> <span class="n">cache</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>
        <span class="n">wanted</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wanted</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status_union_batched</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">list_of_job_id_sets</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="n">union_ids</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">normalized</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ids</span> <span class="ow">in</span> <span class="n">list_of_job_id_sets</span><span class="p">:</span>
            <span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">]</span>
            <span class="n">normalized</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
            <span class="n">union_ids</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
        <span class="n">union_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">union_ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[{</span><span class="n">i</span><span class="p">:</span> <span class="n">union_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req</span><span class="p">}</span> <span class="k">for</span> <span class="n">req</span> <span class="ow">in</span> <span class="n">normalized</span><span class="p">]</span>

<span class="k">class</span> <span class="nc">BatchSubmitter</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Submits heterogeneous commands (some may submit LSF jobs via wrappers).
    - Collects Job IDs by scanning outputs (</span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">).
    - On interruption: stops launching new commands, waits for in-flight to finish
      (prevents orphan jobs), then bkill all collected Job IDs.
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">runner</span><span class="p">:</span> <span class="n">CommandRunner</span><span class="p">,</span> <span class="n">killer</span><span class="p">:</span> <span class="n">BKiller</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_runner</span> <span class="o">=</span> <span class="n">runner</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_killer</span> <span class="o">=</span> <span class="n">killer</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[],</span> <span class="nb">bool</span><span class="p">],</span>
        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">kill_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">submitted</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run_capture_job</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span><span class="p">)</span>

        <span class="n">idx</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">total</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                            <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                                <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># Drain: ensure all running submissions complete and harvest Job IDs
</span>            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                        <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                            <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                        <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">is_interrupted</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">submitted</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_killer</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">submitted</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="n">kill_force</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">interrupted</span><span class="sh">"</span><span class="p">:</span> <span class="n">interrupted</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">num_submitted</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">submitted</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">num_failed</span><span class="sh">"</span><span class="p">:</span> <span class="n">failures</span><span class="p">,</span>
        <span class="p">}</span>

<span class="c1"># ============================================================
# Layer 6: Facade (compose everything)
# ============================================================
</span>
<span class="k">class</span> <span class="nc">LSFClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    High-level facade that exposes:
      - run_command_capture_job
      - kill
      - status / status_union_batched
      - submit_many_with_cancel
    </span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cfg</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">LSFConfig</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">cfg</span> <span class="o">=</span> <span class="n">cfg</span> <span class="ow">or</span> <span class="nc">LSFConfig</span><span class="p">()</span>
        <span class="n">user</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="n">user</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">cache_dir</span> <span class="o">=</span> <span class="n">cfg</span><span class="p">.</span><span class="n">cache_dir</span> <span class="ow">or</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">cache_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all_</span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># Core components
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_shell</span> <span class="o">=</span> <span class="nc">ShellRunner</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">max_concurrent_cli</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_limiter</span> <span class="o">=</span> <span class="nc">MinIntervalRateLimiter</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_fetcher</span> <span class="o">=</span> <span class="nc">BJobsFetcher</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_shell</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="n">user</span><span class="p">,</span> <span class="n">bjobs_path</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">bjobs</span><span class="p">,</span> <span class="n">limiter</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_limiter</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span> <span class="o">=</span> <span class="nc">MemoryTTLCache</span><span class="p">(</span><span class="n">cfg</span><span class="p">.</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_disk_cache</span> <span class="o">=</span> <span class="nc">DiskJSONCache</span><span class="p">(</span><span class="n">cache_path</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="o">=</span><span class="n">cfg</span><span class="p">.</span><span class="n">disk_cache_ttl_sec</span><span class="p">,</span> <span class="n">skew_eps</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_snap_cache</span> <span class="o">=</span> <span class="nc">JobsSnapshotCache</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_fetcher</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_disk_cache</span><span class="p">)</span>

        <span class="c1"># Services
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_status</span> <span class="o">=</span> <span class="nc">StatusService</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_snap_cache</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_killer</span> <span class="o">=</span> <span class="nc">BKiller</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_shell</span><span class="p">,</span> <span class="n">cfg</span><span class="p">.</span><span class="n">bkill</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_runner</span> <span class="o">=</span> <span class="nc">CommandRunner</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_shell</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_submitter</span> <span class="o">=</span> <span class="nc">BatchSubmitter</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_killer</span><span class="p">)</span>

    <span class="c1"># ----- Facade methods -----
</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run_capture_job</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">raise_on_error</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_killer</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="n">force</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">raise_on_error</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span> <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_status</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status_union_batched</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">list_of_job_id_sets</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span> <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_status</span><span class="p">.</span><span class="nf">status_union_batched</span><span class="p">(</span><span class="n">list_of_job_id_sets</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="n">Callable</span><span class="p">[[],</span> <span class="nb">bool</span><span class="p">],</span>
        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">kill_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_submitter</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
            <span class="n">commands</span><span class="p">,</span>
            <span class="n">is_interrupted</span><span class="o">=</span><span class="n">is_interrupted</span><span class="p">,</span>
            <span class="n">poll_interval_sec</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span>
            <span class="n">max_in_flight</span><span class="o">=</span><span class="n">max_in_flight</span><span class="p">,</span>
            <span class="n">kill_force</span><span class="o">=</span><span class="n">kill_force</span><span class="p">,</span>
            <span class="n">kill_raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span><span class="p">,</span>
            <span class="n">cmd_timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span>
            <span class="n">cmd_raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>

<p>간단 사용 예시(필요한 부분만 복붙):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># example.py
</span><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_pro</span> <span class="kn">import</span> <span class="n">LSFClient</span><span class="p">,</span> <span class="n">LSFConfig</span>

<span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="nf">return </span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">(</span><span class="nc">LSFConfig</span><span class="p">(</span>
        <span class="n">bkill</span><span class="o">=</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="o">=</span><span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/shared/cache</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># 여러 머신이 보는 공유 경로
</span>    <span class="p">))</span>

    <span class="c1"># 1) 커맨드를 그대로 실행 (잡 메시지 있으면 job_id 파싱)
</span>    <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span><span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo hi; sleep 1</span><span class="sh">'"</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">submit:</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>

    <span class="c1"># 2) 상태 조회 (전체 스냅샷 캐시 활용)
</span>    <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">num jobs:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">all_map</span><span class="p">))</span>

    <span class="c1"># 3) 배치 제출 + 취소(3초 후)
</span>    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span>
        <span class="sh">"</span><span class="s">job_sub my_script.sh --epochs 3</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">sleep 1</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo X; sleep 2</span><span class="sh">'"</span><span class="p">,</span>
    <span class="p">]</span>
    <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">cmds</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="o">=</span><span class="nc">Token</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">is_interrupted</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">batch:</span><span class="sh">"</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h3 id="설계-요약-step-by-step">설계 요약 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>ShellRunner</strong> : <code class="language-plaintext highlighter-rouge">create_subprocess_shell</code>만 사용, 동시 실행 제한.</p>
  </li>
  <li>
    <p><strong>MinIntervalRateLimiter</strong> : <code class="language-plaintext highlighter-rouge">bjobs</code> 과호출 방지.</p>
  </li>
  <li>
    <p><strong>MemoryTTLCache / DiskJSONCache</strong> : 프로세스 내/간 2중 캐시. 디스크는 tmp→<code class="language-plaintext highlighter-rouge">os.replace</code>→<code class="language-plaintext highlighter-rouge">fsync(dir)</code>로 견고.</p>
  </li>
  <li>
    <p><strong>BJobsFetcher</strong> : <code class="language-plaintext highlighter-rouge">-u &lt;user&gt;</code> 전체 스냅샷 + 최소 필드 파싱.</p>
  </li>
  <li>
    <p><strong>JobsSnapshotCache</strong> : 단일플라이트(in-process) + 메모리/디스크 캐시 오케스트레이션.</p>
  </li>
  <li>
    <p><strong>StatusService</strong> : 전체 스냅샷을 요청 ID로 필터.</p>
  </li>
  <li>
    <p><strong>CommandRunner</strong> : 어떤 커맨드든 그대로 실행, 출력에서만 <code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code> 파싱.</p>
  </li>
  <li>
    <p><strong>BKiller</strong> : 다수 ID를 한 번에 <code class="language-plaintext highlighter-rouge">bkill</code>.</p>
  </li>
  <li>
    <p><strong>BatchSubmitter</strong> : 인터럽트 시 새 제출 중단, <strong>진행 중은 기다려</strong> Job ID 수집 후 일괄 <code class="language-plaintext highlighter-rouge">bkill</code>(고아 방지).</p>
  </li>
  <li>
    <p><strong>LSFClient</strong> : 위 구성요소를 합친 퍼사드.</p>
  </li>
</ol>

<p>추가 원하시면 로깅 훅/메트릭스(호출 수, 평균 지연)·NFS 환경에서의 강제 리프레시 플래그·대규모 잡 스냅샷 샤딩까지 이어서 확장해 드릴게요.</p>

<p class="chat--user">

좀 과하게 나눈 것 아냐? 진짜 필요한 수준으로만 쪼개줘.

</p>

<p>좋아, “진짜 필요한 것만” 남겨서 딱 2개 클래스로 정리했어:</p>

<ul>
  <li>
    <p><strong>DiskJSONCache</strong> : 멀티프로세스 공유 디스크 캐시(원자적 replace + fsync + mtime/ts 이중 판정)</p>
  </li>
  <li>
    <p><strong>LSFClient</strong> : 나머지 전부(커맨드 실행, Job ID 파싱, bkill, bjobs 스냅샷 메모리/디스크 캐시, 레이트리밋, 일괄 제출+취소)</p>
  </li>
</ul>

<p>필수 기능만 담았고, <code class="language-plaintext highlighter-rouge">create_subprocess_shell</code>만 사용해. 잡 판별은 오직 출력의 <code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code>로 해.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_minimal.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">str 또는 시퀀스를 받아 셸 문자열로. (시퀀스면 공백 join; 인용은 호출자 책임)</span><span class="sh">"""</span>
    <span class="k">return</span> <span class="n">cmd</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">cmd_str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span>

<span class="c1"># ---------- 멀티프로세스 공유 디스크 캐시 ----------
</span><span class="k">class</span> <span class="nc">DiskJSONCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    tmp -&gt; fsync(tmp) -&gt; os.replace() -&gt; fsync(dir)
    - 같은 파일시스템 내 rename은 원자적.
    - 신선도 판단: 파일 내부 ts와 파일 mtime 모두 확인(+2s skew 허용).
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">skew_eps</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_path</span> <span class="o">=</span> <span class="n">path</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_skew</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">skew_eps</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">path</span><span class="p">),</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">read</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_path</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">age_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="nf">float</span><span class="p">(</span><span class="sh">"</span><span class="s">inf</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">age_by_mtime</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">now</span> <span class="o">-</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">)</span>
            <span class="n">fresh</span> <span class="o">=</span> <span class="p">(</span><span class="n">age_by_ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">age_by_mtime</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span> <span class="k">if</span> <span class="n">fresh</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">write</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_path</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">bjobs_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
                    <span class="n">f</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_path</span><span class="p">)</span>  <span class="c1"># atomic on same FS
</span>                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># ---------- 메인 클라이언트 ----------
</span><span class="k">class</span> <span class="nc">LSFClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    꼭 필요한 것만:
      - run_command_capture_job: 커맨드 그대로 실행, 출력에서 Job &lt;id&gt;만 파싱
      - kill: bkill (여러 ID 한 번에)
      - status: bjobs 전체 스냅샷 (메모리+디스크 캐시, 레이트리밋)
      - submit_many_with_cancel: 인터럽트 시 새 실행 중단, 진행분 완주 후 job_id 일괄 bkill
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrent_cli</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_min_interval</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="c1"># 메모리 캐시(key -&gt; (ts, data))
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># 단일플라이트
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># 공유 디스크 캐시
</span>        <span class="n">user</span> <span class="o">=</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">base_cache</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">cache_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base_cache</span><span class="p">,</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all_</span><span class="si">{</span><span class="n">user</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_disk</span> <span class="o">=</span> <span class="nc">DiskJSONCache</span><span class="p">(</span><span class="n">cache_path</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="o">=</span><span class="n">disk_cache_ttl_sec</span><span class="p">,</span> <span class="n">skew_eps</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">user</span>

        <span class="c1"># locale 안정화
</span>        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="c1"># ---- 내부 헬퍼 ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_run_shell</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_env</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

    <span class="c1"># ---- 커맨드 실행(잡 메시지 파싱) ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">cmd_str</span> <span class="o">=</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_run_shell</span><span class="p">(</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span> <span class="ow">or</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">job_id</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">m</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">stdout</span><span class="p">,</span> <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">stderr</span><span class="p">,</span> <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_id</span><span class="p">}</span>

    <span class="c1"># ---- bkill ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-f </span><span class="sh">"</span> <span class="k">if</span> <span class="n">force</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># ---- bjobs 전체 스냅샷 (캐시) ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="c1"># 레이트리밋
</span>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="c1"># 공백 안전한 필드만
</span>        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bjobs</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="sh">'</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">'"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span> <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="sh">"</span>
        <span class="c1"># 메모리 캐시
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">item</span><span class="p">:</span>
                <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
                <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span><span class="p">:</span>
                    <span class="k">return</span> <span class="n">data</span>
            <span class="c1"># 단일플라이트
</span>            <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
                <span class="n">disk</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_disk</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">disk</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">disk</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
                    <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
                    <span class="k">return</span> <span class="n">data</span>

            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_mem_cache</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_disk</span><span class="p">.</span><span class="nf">write</span><span class="p">({</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>
        <span class="n">wanted</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wanted</span><span class="p">}</span>

    <span class="c1"># ---- 배치 제출 + 취소 ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="nb">callable</span><span class="p">,</span>            <span class="c1"># () -&gt; bool
</span>        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">kill_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        명령을 그대로 실행(create_subprocess_shell). 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">만 추출.
        인터럽트 시 새 실행 중단, 진행 중 제출은 끝까지 기다린 뒤 수집된 job_id 일괄 bkill.
        </span><span class="sh">"""</span>
        <span class="n">submitted</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span><span class="p">)</span>

        <span class="n">idx</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                            <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                                <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># drain
</span>            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                        <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                            <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                        <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">is_interrupted</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">submitted</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">submitted</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="n">kill_force</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">submitted_job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted</span><span class="p">,</span> <span class="sh">"</span><span class="s">interrupted</span><span class="sh">"</span><span class="p">:</span> <span class="n">interrupted</span><span class="p">,</span> <span class="sh">"</span><span class="s">num_submitted</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">submitted</span><span class="p">),</span> <span class="sh">"</span><span class="s">num_failed</span><span class="sh">"</span><span class="p">:</span> <span class="n">failures</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="빠른-사용-예-필요부분만">빠른 사용 예 (필요부분만)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># example_min.py
</span><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_minimal</span> <span class="kn">import</span> <span class="n">LSFClient</span>

<span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="nf">return </span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">(</span>
        <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/shared/cache</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># 여러 머신이 보는 경로
</span>    <span class="p">)</span>

    <span class="c1"># 1) 커맨드 그대로 실행 (잡 메시지 있으면 job_id 파싱)
</span>    <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span><span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo hi; sleep 1</span><span class="sh">'"</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">submit:</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>

    <span class="c1"># 2) 상태 (전체 스냅샷 캐시)
</span>    <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">all_map</span><span class="p">))</span>

    <span class="c1"># 3) 배치 제출 + 3초 후 취소
</span>    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">sleep 1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo X; sleep 2</span><span class="sh">'"</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_sub my_script.sh --epochs 3</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">cmds</span><span class="p">,</span> <span class="n">is_interrupted</span><span class="o">=</span><span class="nc">Token</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">is_interrupted</span><span class="p">,</span> <span class="n">max_in_flight</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">cmd_timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span> <span class="n">kill_force</span><span class="o">=</span><span class="bp">True</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">batch:</span><span class="sh">"</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="왜-이렇게-최소화했는지-step-by-step">왜 이렇게 최소화했는지 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>핵심 책임 2개만 분리</strong> : “디스크 캐시”는 멀티프로세스/멀티머신 안전성이 핵심이라 독립 클래스로 유지, 나머지는 <code class="language-plaintext highlighter-rouge">LSFClient</code>에.</p>
  </li>
  <li>
    <p><strong>한 눈에 읽히는 흐름</strong> : 실행 → 파싱 → 캐시 → 레이트리밋 → 배치/취소까지 <code class="language-plaintext highlighter-rouge">LSFClient</code> 안에서 추적 가능.</p>
  </li>
  <li>
    <p><strong>운영 현실 반영</strong> : 공유 FS에 맞춘 <code class="language-plaintext highlighter-rouge">os.replace + fsync(dir)</code>와 <code class="language-plaintext highlighter-rouge">mtime/ts</code> 이중 판정, TTL 기본 5s로 안전한 디폴트.</p>
  </li>
</ol>

<p>더 줄이고 싶으면 <code class="language-plaintext highlighter-rouge">DiskJSONCache</code>도 내부 함수로 접어둘 수 있지만, 멀티프로세스 안전성의 결로가 분명해서 이 정도 분리가 “진짜 필요한 최소”라 봤어. 필요하면 로깅 훅만 살짝 추가해드릴게!</p>

<p class="chat--user">

진짜 필요한 최소로도 하지말고, 너무 과하게 늘리지도 말고. 그냥 고수가 했을 법한 유지보수 할만한 정도로 짜주면 돼. 너가 생각하는 최적을 따라줘.

</p>

<p>좋아, “적당히 쪼갠 프로” 버전으로 정리했어.<br />
핵심만 3파츠로 나눴고, 과하지 않게 유지보수 용이하도록 구성했어.</p>

<ul>
  <li>
    <p><strong>ShellRunner</strong> : <code class="language-plaintext highlighter-rouge">create_subprocess_shell</code> + 동시성 제어</p>
  </li>
  <li>
    <p><strong>SharedCache</strong> : 메모리+디스크(멀티프로세스 공유) TTL 캐시 — tmp→<code class="language-plaintext highlighter-rouge">os.replace</code>→<code class="language-plaintext highlighter-rouge">fsync(dir)</code>로 견고</p>
  </li>
  <li>
    <p><strong>LSFClient</strong> : 사용자 API (커맨드 실행·JobID 파싱, <code class="language-plaintext highlighter-rouge">bkill</code>, <code class="language-plaintext highlighter-rouge">bjobs</code> 스냅샷+캐시, 배치 제출+취소)</p>
  </li>
</ul>

<p>아래 파일 하나면 끝. (<code class="language-plaintext highlighter-rouge">lsf_core.py</code> 같은 이름으로 저장)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_core.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="c1"># ===================== 공용 유틸 =====================
</span>
<span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">cmd</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">cmd_str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span>

<span class="c1"># ===================== ShellRunner =====================
</span>
<span class="k">class</span> <span class="nc">ShellRunner</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">create_subprocess_shell만 사용. 동시 실행 수를 세마포어로 제한.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">max_concurrency</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrency</span><span class="p">)</span>
        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_env</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="c1"># ===================== SharedCache (mem+disk) =====================
</span>
<span class="k">class</span> <span class="nc">SharedCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    멀티프로세스 공유 JSON 캐시:
    - 메모리 TTL + 디스크 TTL (같은 FS 내 rename 원자성 보장)
    - 쓰기: tmp -&gt; fsync(tmp) -&gt; os.replace -&gt; fsync(dir)
    - 신선도: JSON 내부 ts와 파일 mtime 모두 사용(+2s skew 허용)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">namespace</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">):</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_root</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">namespace</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_skew</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">skew_eps</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_key_path</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">safe</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">[^A-Za-z0-9._-]+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">safe</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
        <span class="c1"># 1) 메모리
</span>        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">:</span>
            <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
            <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="c1"># 2) 디스크
</span>        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts_in</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fresh_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts_in</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts_in</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">False</span>
            <span class="n">fresh_by_mtime</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">fresh_by_ts</span> <span class="ow">or</span> <span class="n">fresh_by_mtime</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">cache_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
                    <span class="n">f</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># ===================== LSFClient (Public API) =====================
</span>
<span class="k">class</span> <span class="nc">LSFClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - run_command_capture_job: 커맨드를 그대로 실행, 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">만 파싱
    - kill: bkill (여러 ID 일괄)
    - status: bjobs 전체 스냅샷(메모리+디스크 캐시, 레이트리밋, in-process single-flight)
    - submit_many_with_cancel: 인터럽트 시 새 실행 중단, 진행 중은 완주 → 수집한 job_id 일괄 bkill
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_runner</span> <span class="o">=</span> <span class="nc">ShellRunner</span><span class="p">(</span><span class="n">max_concurrent_cli</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache</span> <span class="o">=</span> <span class="nc">SharedCache</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="o">=</span><span class="n">disk_cache_ttl_sec</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>

        <span class="c1"># bjobs 제어
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># single-flight per key
</span>
    <span class="c1"># ---------- 일반 커맨드 실행 + Job ID 파싱 ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span> <span class="ow">or</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">search</span><span class="p">(</span><span class="n">stderr</span><span class="p">)</span>
        <span class="n">job_id</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="k">if</span> <span class="n">m</span> <span class="k">else</span> <span class="bp">None</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">stdout</span><span class="p">,</span> <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">stderr</span><span class="p">,</span> <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_id</span><span class="p">}</span>

    <span class="c1"># ---------- bkill ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-f </span><span class="sh">"</span> <span class="k">if</span> <span class="n">force</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># ---------- bjobs snapshot (캐시 + 단일플라이트 + 레이트리밋) ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="c1"># per-process rate-limit
</span>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="c1"># 공백 안전 필드만
</span>        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bjobs</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="sh">'</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">'"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>

        <span class="c1"># 1) 메모리/디스크 캐시
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">cached</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">cached</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="c1"># 디스크·메모리 캐시는 직전에 set된 dict(str-&gt;obj)일 수 있음
</span>                <span class="k">return</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">cached</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cached</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">[])}</span>

            <span class="c1"># 2) in-process single-flight
</span>            <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>  <span class="c1"># 디스크엔 str key로 저장
</span>            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>
        <span class="n">wanted</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wanted</span><span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status_union_batched</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">list_of_job_id_sets</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]:</span>
        <span class="n">union</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>
        <span class="n">normalized</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ids</span> <span class="ow">in</span> <span class="n">list_of_job_id_sets</span><span class="p">:</span>
            <span class="n">lst</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">]</span>
            <span class="n">normalized</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
            <span class="n">union</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">lst</span><span class="p">)</span>
        <span class="n">union_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">union</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">[{</span><span class="n">i</span><span class="p">:</span> <span class="n">union_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req</span><span class="p">}</span> <span class="k">for</span> <span class="n">req</span> <span class="ow">in</span> <span class="n">normalized</span><span class="p">]</span>

    <span class="c1"># ---------- 배치 제출 + 취소 ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="nb">callable</span><span class="p">,</span>            <span class="c1"># () -&gt; bool
</span>        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">kill_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        커맨드를 그대로 실행. 출력의 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">만 추출해 수집.
        인터럽트 시: 새 실행 중단, 진행 중 제출은 끝까지 기다림(고아 방지) → 수집된 job_id 일괄 bkill.
        </span><span class="sh">"""</span>
        <span class="n">submitted</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span><span class="p">)</span>

        <span class="n">idx</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                            <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                                <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># drain: 남은 제출은 완주시켜 Job ID 수집
</span>            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">)</span>
                        <span class="k">if</span> <span class="n">jid</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                            <span class="n">submitted</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                        <span class="k">elif</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">is_interrupted</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">submitted</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">submitted</span><span class="p">,</span> <span class="n">force</span><span class="o">=</span><span class="n">kill_force</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span><span class="p">)</span>

        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">submitted_job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted</span><span class="p">,</span> <span class="sh">"</span><span class="s">interrupted</span><span class="sh">"</span><span class="p">:</span> <span class="n">interrupted</span><span class="p">,</span> <span class="sh">"</span><span class="s">num_submitted</span><span class="sh">"</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">submitted</span><span class="p">),</span> <span class="sh">"</span><span class="s">num_failed</span><span class="sh">"</span><span class="p">:</span> <span class="n">failures</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="사용-예-짧게">사용 예 (짧게)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_core</span> <span class="kn">import</span> <span class="n">LSFClient</span>

<span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="nf">return </span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">(</span>
        <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/shared/cache</span><span class="sh">"</span><span class="p">,</span>  <span class="c1"># 여러 머신이 보는 경로(같은 FS)
</span>    <span class="p">)</span>

    <span class="c1"># 1) 커맨드 그대로 실행 (잡 메시지 있으면 파싱)
</span>    <span class="n">r</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span><span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo hi; sleep 1</span><span class="sh">'"</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">submit:</span><span class="sh">"</span><span class="p">,</span> <span class="n">r</span><span class="p">)</span>

    <span class="c1"># 2) bjobs 상태(스냅샷 캐시)
</span>    <span class="n">all_jobs</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">N(all) =</span><span class="sh">"</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">all_jobs</span><span class="p">))</span>

    <span class="c1"># 3) 배치 제출 + 3초 후 취소 → 수집된 job_id 일괄 bkill
</span>    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">sleep 1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bsub -q short </span><span class="sh">'</span><span class="s">echo X; sleep 2</span><span class="sh">'"</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_sub my_script.sh --epochs 3</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">cmds</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="o">=</span><span class="nc">Token</span><span class="p">(</span><span class="mi">3</span><span class="p">).</span><span class="n">is_interrupted</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
        <span class="n">kill_force</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">batch:</span><span class="sh">"</span><span class="p">,</span> <span class="n">res</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="왜-이-구성이-적당히-고수-느낌인가-짧게-step-by-step">왜 이 구성이 “적당히 고수 느낌”인가 (짧게, step-by-step)</h3>

<ol>
  <li>
    <p><strong>역할 분리 최소화</strong> : 프로세스 실행과 캐시만 별도 클래스로 분리. 나머지는 <code class="language-plaintext highlighter-rouge">LSFClient</code>에서 한 눈에 추적.</p>
  </li>
  <li>
    <p><strong>운영 안전성</strong> : 공유 FS에서 <strong>tmp→replace→fsync(dir)</strong> , TTL은 <strong>ts+mtime 이중 판정</strong>.</p>
  </li>
  <li>
    <p><strong>성능/부하 배려</strong> : in-process <strong>single-flight</strong> , per-process <strong>레이트리밋</strong> , <strong>전체 스냅샷</strong> 후 필터로 <code class="language-plaintext highlighter-rouge">bjobs</code> 호출 최소화.</p>
  </li>
  <li>
    <p><strong>현실 친화성</strong> : 커맨드를 <strong>있는 그대로</strong> 실행, <code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code> 메시지로만 판별 → bsub 래퍼/스크립트 모두 커버.</p>
  </li>
  <li>
    <p><strong>확장 여지</strong> : 필요 시 로깅/메트릭, 강제 새로고침(<code class="language-plaintext highlighter-rouge">force_refresh</code>) 훅, 샤딩 등 쉽게 추가 가능.</p>
  </li>
</ol>

<p>원하는 스타일이나 코딩 컨벤션(로거, 타입힌트 레벨 강화, 에러코드 매핑 등)이 있으면 거기에 맞춰 딱 맞게 다듬어줄게.</p>

<p class="chat--user">

근데 bkill에 -f 옵션 없는데

</p>

<p>맞아요. 제 실수입니다—<code class="language-plaintext highlighter-rouge">bkill</code>에는 <code class="language-plaintext highlighter-rouge">-f</code>가 없습니다. “강제”에 해당하는 건 <strong><code class="language-plaintext highlighter-rouge">-r</code>(force remove)</strong> 이고, 상황에 따라 <strong><code class="language-plaintext highlighter-rouge">-d</code>(kill 후 상태를 DONE으로 기록)</strong>, <strong><code class="language-plaintext highlighter-rouge">-s</code>(특정 signal 전송)</strong> 등을 씁니다. <a href="https://www.ibm.com/docs/en/spectrum-lsf/10.1.0?topic=jobs-forcefully-removing-job-from-lsf&amp;utm_source=chatgpt.com">IBM+1</a></p>

<p>아래처럼 <strong>메서드 시그니처와 구현을 고쳐</strong> 쓰면 됩니다.</p>

<h2 id="step-1-kill-메서드-교체">Step 1) <code class="language-plaintext highlighter-rouge">kill()</code> 메서드 교체</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">force</code> 대신 <code class="language-plaintext highlighter-rouge">force_remove</code>(→ <code class="language-plaintext highlighter-rouge">-r</code>)</p>
  </li>
  <li>
    <p>필요 시 <code class="language-plaintext highlighter-rouge">record_done</code>(→ <code class="language-plaintext highlighter-rouge">-d</code>)</p>
  </li>
  <li>
    <p>임의 시그널은 <code class="language-plaintext highlighter-rouge">signal</code>(→ <code class="language-plaintext highlighter-rouge">-s SIG</code>)로 지정</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># LSFClient.kill 교체 버전
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
    <span class="n">self</span><span class="p">,</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
    <span class="o">*</span><span class="p">,</span>
    <span class="n">force_remove</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>          <span class="c1"># was: force
</span>    <span class="n">record_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>           <span class="c1"># -&gt; -d (RUN/USUSP/SSUSP에서 DONE 기록)
</span>    <span class="n">signal</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>        <span class="c1"># -&gt; -s TERM / -s 9 등
</span>    <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
    <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
    <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
        <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>

    <span class="n">flags</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">if</span> <span class="n">record_done</span><span class="p">:</span>
        <span class="n">flags</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">-d</span><span class="sh">"</span><span class="p">)</span>               <span class="c1"># 기록을 DONE으로. 원격 클러스터 시 주로 유용. :contentReference[oaicite:1]{index=1}
</span>    <span class="k">if</span> <span class="n">force_remove</span><span class="p">:</span>
        <span class="n">flags</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">-r</span><span class="sh">"</span><span class="p">)</span>               <span class="c1"># LSF에서 즉시 제거(리소스 해제). :contentReference[oaicite:2]{index=2}
</span>    <span class="k">if</span> <span class="n">signal</span><span class="p">:</span>
        <span class="n">flags</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-s</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">signal</span><span class="p">)]</span>     <span class="c1"># 특정 시그널 지정
</span>
    <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">flags</span><span class="p">)</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
    <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>
</code></pre></div></div>

<blockquote>
  <p>참고</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">-r</code>: OS에서 완전히 종료되기 전이라도 LSF에서 <strong>즉시 제거</strong> 하고 리소스를 해제합니다. <a href="https://www.ibm.com/docs/en/spectrum-lsf/10.1.0?topic=jobs-forcefully-removing-job-from-lsf&amp;utm_source=chatgpt.com">IBM+1</a></p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">-d</code>: 잡을 종료하고 <strong>상태를 DONE으로 기록</strong> 합니다(시작된 잡에 한함). 원격 클러스터 워크플로에서 유용. <a href="https://www.ibm.com/docs/en/spectrum-lsf/10.1.0?topic=13-job-scheduling-execution&amp;utm_source=chatgpt.com">IBM</a></p>
    </li>
    <li>
      <p><code class="language-plaintext highlighter-rouge">-s</code>: 원하는 시그널을 직접 보낼 수 있습니다. (예: <code class="language-plaintext highlighter-rouge">-s TERM</code>, <code class="language-plaintext highlighter-rouge">-s 9</code>). <a href="https://tin6150.github.io/psg/3rdParty/lsf4_userGuide/07-tracking.html?utm_source=chatgpt.com">tin6150.github.io+1</a></p>
    </li>
  </ul>

</blockquote>

<h2 id="step-2-배치-취소-경로도-같이-수정">Step 2) 배치 취소 경로도 같이 수정</h2>

<p>기존 <code class="language-plaintext highlighter-rouge">submit_many_with_cancel()</code> 안에서 <code class="language-plaintext highlighter-rouge">await self.kill(submitted, force=True, ...)</code>로 호출하셨다면:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기존
# await self.kill(submitted, force=True, raise_on_error=kill_raise_on_error)
</span>
<span class="c1"># 변경
</span><span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span>
    <span class="n">submitted</span><span class="p">,</span>
    <span class="n">force_remove</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>                  <span class="c1"># -r
</span>    <span class="c1"># 필요하면 record_done=True 도 추가 가능
</span>    <span class="n">raise_on_error</span><span class="o">=</span><span class="n">kill_raise_on_error</span>
<span class="p">)</span>
</code></pre></div></div>

<h2 id="step-3-사용-예시">Step 3) 사용 예시</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1) 즉시 제거(LSF에서 빠르게 치우고 싶을 때)
</span><span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">kill</span><span class="p">([</span><span class="mi">101</span><span class="p">,</span> <span class="mi">102</span><span class="p">],</span> <span class="n">force_remove</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># 2) 특정 시그널 전송 후 제거
</span><span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="mi">103</span><span class="p">,</span> <span class="n">signal</span><span class="o">=</span><span class="sh">"</span><span class="s">TERM</span><span class="sh">"</span><span class="p">)</span>            <span class="c1"># TERM만 보내고 기본 동작
</span><span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="mi">104</span><span class="p">,</span> <span class="n">signal</span><span class="o">=</span><span class="sh">"</span><span class="s">KILL</span><span class="sh">"</span><span class="p">)</span>            <span class="c1"># 바로 KILL 신호
</span><span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="mi">105</span><span class="p">,</span> <span class="n">force_remove</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>        <span class="c1"># LSF에서 즉시 제거(-r)
</span>
<span class="c1"># 3) DONE 기록 옵션 (원격 클러스터 시 유용)
</span><span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">kill</span><span class="p">([</span><span class="mi">201</span><span class="p">,</span><span class="mi">202</span><span class="p">],</span> <span class="n">record_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>   <span class="c1"># -d
</span></code></pre></div></div>

<h2 id="선택-pend만-걷어내고-싶다면">(선택) PEND만 걷어내고 싶다면</h2>

<p>운영 정책상 “대기(PEND)만” 정리하려면 <code class="language-plaintext highlighter-rouge">bkill -stat pend</code>가 있습니다(일부 옵션과는 병행 불가). 필요 시 전용 유틸을 추가하세요. <a href="https://www.ibm.com/docs/en/spectrum-lsf/10.1.0?topic=jobs-kill-job-bkill&amp;utm_source=chatgpt.com">IBM</a></p>

<hr />

<p>필요하면 제가 드린 <code class="language-plaintext highlighter-rouge">lsf_core.py</code>/<code class="language-plaintext highlighter-rouge">lsf_minimal.py</code>에도 위 변경을 반영한 <strong>작은 패치 버전</strong> 으로 정리해 드릴게요.</p>

<p class="chat--user">

1. 각각 command의 job id를 알고 싶어. 매칭이 필요해. 2. 다음과 같은 예시로 많이 쓸 것 같아. 알맞게 짜줘. cmds = ["job_sub a.txt", "mkdir package", "bsub -q short sleep"] data = client.submit_many_with_cancel(cmds, is_interrupted=is_interrupted) if is_interrupted(): print("중지되었습니다.“) return job_ids = … #data로 부터 running job id 추출 while not client.is_finished(job_ids): status = client.status(job_ids) for job_id in job_ids: job_command = … #data로부터 job_id에 해당하는 커맨드 추출 print(job_id, status[job_id], job_command) await asyncio.sleep(1) if is_interrupted(): await client.kill(job_ids) print("중지하였습니다.”) return print("모두 완료되었습니다.“)

</p>

<p>좋아! “적당히 프로스럽고 유지보수 쉬운” 버전으로 다듬어서:</p>

<ul>
  <li>
    <p>구조는 <strong>3 파트</strong> 만 유지</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ShellRunner</code>: <code class="language-plaintext highlighter-rouge">create_subprocess_shell</code> + 동시성 제어</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">SharedCache</code>: 메모리+디스크 TTL 캐시(멀티프로세스 공유, tmp→replace→fsync(dir))</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">LSFClient</code>: 사용자 API(커맨드 실행·JobID 매칭, <code class="language-plaintext highlighter-rouge">bkill</code>, <code class="language-plaintext highlighter-rouge">bjobs</code> 스냅샷/캐시, <strong>배치 제출+취소, is_finished</strong>)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>요구 포인트 반영</strong></p>

    <ol>
      <li>
        <p>각 커맨드와 <strong>Job ID 매칭</strong> : <code class="language-plaintext highlighter-rouge">SubmitResult</code>/<code class="language-plaintext highlighter-rouge">SubmitItem</code>에 <strong>양방향 매핑</strong> 포함</p>
      </li>
      <li>
        <p>예시 패턴 그대로 사용 가능: <code class="language-plaintext highlighter-rouge">submit_many_with_cancel</code> 결과에서 <code class="language-plaintext highlighter-rouge">job_ids</code>, <code class="language-plaintext highlighter-rouge">job_id_to_command</code> 바로 꺼내 쓰고, <code class="language-plaintext highlighter-rouge">is_finished()</code> 제공</p>
      </li>
    </ol>
  </li>
</ul>

<p>아래 파일 하나로 끝 (<code class="language-plaintext highlighter-rouge">lsf_core.py</code> 등으로 저장):</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_core.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="c1"># ===================== 공용 유틸 =====================
</span>
<span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">cmd</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="o">*</span><span class="n">texts</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">finditer</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">ids</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">pass</span>
    <span class="c1"># 중복 제거(출력에 여러 번 찍히는 경우 대비)
</span>    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">ids</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">cmd_str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span>

<span class="c1"># ===================== ShellRunner =====================
</span>
<span class="k">class</span> <span class="nc">ShellRunner</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">create_subprocess_shell만 사용. 동시 실행 수 세마포어로 제한.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">max_concurrency</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrency</span><span class="p">)</span>
        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_env</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="c1"># ===================== SharedCache (mem+disk) =====================
</span>
<span class="k">class</span> <span class="nc">SharedCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    멀티프로세스 공유 JSON 캐시:
    - 메모리 TTL + 디스크 TTL (같은 FS 내 rename 원자성 보장)
    - 쓰기: tmp -&gt; fsync(tmp) -&gt; os.replace -&gt; fsync(dir)
    - 신선도: JSON 내부 ts와 파일 mtime 모두 사용(+2s skew 허용)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">namespace</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">):</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_root</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">namespace</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_skew</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">skew_eps</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_key_path</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">safe</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">[^A-Za-z0-9._-]+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">safe</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
        <span class="c1"># 1) 메모리
</span>        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">:</span>
            <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
            <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="c1"># 2) 디스크
</span>        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts_in</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fresh_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts_in</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts_in</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">False</span>
            <span class="n">fresh_by_mtime</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">fresh_by_ts</span> <span class="ow">or</span> <span class="n">fresh_by_mtime</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">cache_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
                    <span class="n">f</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># ===================== 결과 타입 =====================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitItem</span><span class="p">:</span>
    <span class="n">index</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">command</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitResult</span><span class="p">:</span>
    <span class="n">interrupted</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>                    <span class="c1"># 평탄화된 전체 Job ID
</span>    <span class="n">job_id_to_command</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span>     <span class="c1"># Job ID -&gt; 원 커맨드(문자열)
</span>    <span class="n">num_submitted</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">num_failed</span><span class="p">:</span> <span class="nb">int</span>

<span class="c1"># ===================== LSFClient (Public API) =====================
</span>
<span class="k">class</span> <span class="nc">LSFClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - run_command_capture_job: 커맨드 그대로 실행, 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s"> 파싱(복수 가능)
    - kill: bkill (여러 ID 일괄)  *-r / -d / -s 지원*
    - status: bjobs 전체 스냅샷(메모리+디스크 캐시, 레이트리밋, in-process single-flight)
    - submit_many_with_cancel: 인터럽트 시 새 실행 중단, 진행 중은 완주 → 수집한 job_id 일괄 bkill(기본 on)
    - is_finished: 지정 Job들이 전부 DONE/EXIT/ZOMBI 등 **종료 상태**인지 판정
    </span><span class="sh">"""</span>
    <span class="n">TERMINAL</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ZOMBI</span><span class="sh">"</span><span class="p">}</span>   <span class="c1"># 필요시 확장
</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_runner</span> <span class="o">=</span> <span class="nc">ShellRunner</span><span class="p">(</span><span class="n">max_concurrent_cli</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache</span> <span class="o">=</span> <span class="nc">SharedCache</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="o">=</span><span class="n">disk_cache_ttl_sec</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>

        <span class="c1"># bjobs 제어
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="c1"># ---------- 일반 커맨드 실행 + Job ID 파싱 ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">job_ids</span> <span class="o">=</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="c1"># index는 배치 모드에서 채워지므로 여기서는 -1로 반환
</span>        <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">cmd</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids</span><span class="p">)</span>

    <span class="c1"># ---------- bkill ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">force_remove</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>            <span class="c1"># -r
</span>        <span class="n">record_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>             <span class="c1"># -d
</span>        <span class="n">signal</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>          <span class="c1"># -s SIG
</span>        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">flags</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">if</span> <span class="n">record_done</span><span class="p">:</span>
            <span class="n">flags</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">-d</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">force_remove</span><span class="p">:</span>
            <span class="n">flags</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">-r</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">signal</span><span class="p">:</span>
            <span class="n">flags</span> <span class="o">+=</span> <span class="p">[</span><span class="sh">"</span><span class="s">-s</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">signal</span><span class="p">)]</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">flags</span><span class="p">)</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># ---------- bjobs snapshot (캐시 + 단일플라이트 + 레이트리밋) ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="c1"># per-process rate-limit
</span>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bjobs</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="sh">'</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">'"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>

        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">cached</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">cached</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">cached</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cached</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">[])}</span>
            <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>
        <span class="n">wanted</span> <span class="o">=</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">wanted</span><span class="p">}</span>

    <span class="c1"># ---------- Finite-state 판정 ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">is_finished</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="nf">list</span><span class="p">({</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">st</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">:</span>
            <span class="n">info</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">info</span><span class="p">:</span>
                <span class="c1"># 캐시/보존기간 이탈 등으로 빠졌다면 '완료로 간주'
</span>                <span class="k">continue</span>
            <span class="k">if</span> <span class="n">info</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">)</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">TERMINAL</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="c1"># ---------- 배치 제출 + 취소 ----------
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="nb">callable</span><span class="p">,</span>            <span class="c1"># () -&gt; bool
</span>        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cleanup_on_interrupt</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>   <span class="c1"># True면 인터럽트 시 수집된 job_id를 즉시 정리(bkill -r)
</span>        <span class="n">kill_force_remove</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>      <span class="c1"># cleanup_on_interrupt=True일 때 -r 사용
</span>        <span class="n">kill_record_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>      <span class="c1"># 필요시 DONE 기록
</span>        <span class="n">kill_signal</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>   <span class="c1"># 필요시 시그널 지정
</span>    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitResult</span><span class="p">:</span>
        <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_ids_all</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_id_to_cmd</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span>
                <span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span>
            <span class="p">)</span>
            <span class="c1"># index 채워서 반환
</span>            <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span>
                <span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">command</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">job_ids</span>
            <span class="p">)</span>

        <span class="n">idx</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                            <span class="c1"># 매핑/집계
</span>                            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                                <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                            <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># drain
</span>            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">is_interrupted</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">cleanup_on_interrupt</span> <span class="ow">and</span> <span class="n">job_ids_all</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span>
                <span class="n">job_ids_all</span><span class="p">,</span>
                <span class="n">force_remove</span><span class="o">=</span><span class="n">kill_force_remove</span><span class="p">,</span>
                <span class="n">record_done</span><span class="o">=</span><span class="n">kill_record_done</span><span class="p">,</span>
                <span class="n">signal</span><span class="o">=</span><span class="n">kill_signal</span><span class="p">,</span>
                <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
            <span class="p">)</span>

        <span class="c1"># 평탄화 리스트 중복 제거(출력 중복 대비)
</span>        <span class="n">job_ids_all</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">))</span>

        <span class="k">return</span> <span class="nc">SubmitResult</span><span class="p">(</span>
            <span class="n">interrupted</span><span class="o">=</span><span class="n">interrupted</span><span class="p">,</span>
            <span class="n">items</span><span class="o">=</span><span class="n">items</span><span class="p">,</span>
            <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids_all</span><span class="p">,</span>
            <span class="n">job_id_to_command</span><span class="o">=</span><span class="n">job_id_to_cmd</span><span class="p">,</span>
            <span class="n">num_submitted</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">),</span>
            <span class="n">num_failed</span><span class="o">=</span><span class="n">failures</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="당신이-원한-사용-패턴-async로-정확히-동작하도록">당신이 원한 사용 패턴 (async로 정확히 동작하도록)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_core</span> <span class="kn">import</span> <span class="n">LSFClient</span>

<span class="c1"># 인터럽트 토큰
</span><span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="nf">return </span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">(</span>
        <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.2</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/shared/cache</span><span class="sh">"</span><span class="p">,</span>   <span class="c1"># 여러 머신에서 공용 FS
</span>    <span class="p">)</span>

    <span class="n">is_interrupted</span> <span class="o">=</span> <span class="nc">Token</span><span class="p">(</span><span class="n">delay</span><span class="o">=</span><span class="mi">9999</span><span class="p">).</span><span class="n">is_interrupted</span>  <span class="c1"># 실사용에선 외부 이벤트로 바꾸세요
</span>
    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">job_sub a.txt</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mkdir package</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">]</span>

    <span class="c1"># 1) 배치 제출 (인터럽트 시 자체 정리하도록 하고 싶으면 cleanup_on_interrupt=True 유지)
</span>    <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">cmds</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="o">=</span><span class="n">is_interrupted</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
        <span class="n">cleanup_on_interrupt</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>  <span class="c1"># 인터럽트 발생 동안 제출하던 job들은 여기서 -r로 정리
</span>    <span class="p">)</span>

    <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="n">interrupted</span> <span class="ow">or</span> <span class="nf">is_interrupted</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">중지되었습니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># 2) 결과에서 Running(혹은 전체) Job ID 추출 &amp; 매핑 사용
</span>    <span class="n">job_ids</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">job_ids</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">job_ids</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">제출된 LSF 잡이 없습니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="c1"># 3) 완료까지 폴링
</span>    <span class="k">while</span> <span class="ow">not</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">is_finished</span><span class="p">(</span><span class="n">job_ids</span><span class="p">):</span>
        <span class="n">status</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>  <span class="c1"># include_done=True 기본
</span>        <span class="k">for</span> <span class="n">job_id</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">info</span> <span class="o">=</span> <span class="n">status</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="p">{})</span>
            <span class="n">job_command</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">job_id_to_command</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">&lt;unknown&gt;</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">),</span> <span class="n">job_command</span><span class="p">)</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

        <span class="k">if</span> <span class="nf">is_interrupted</span><span class="p">():</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">force_remove</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">중지하였습니다.</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">모두 완료되었습니다.</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h2 id="설계-포인트-짧게-step-by-step">설계 포인트 (짧게, step-by-step)</h2>

<ol>
  <li>
    <p><strong>JobID-커맨드 매칭</strong> : <code class="language-plaintext highlighter-rouge">SubmitResult.job_id_to_command[jid]</code>로 O(1) 조회, <code class="language-plaintext highlighter-rouge">items</code>에 원본/표준출력/리턴코드까지 보관.</p>
  </li>
  <li>
    <p><strong>실전 안전성</strong> : 제출 중 인터럽트 발생 시에도 <strong>진행 중 제출은 완주</strong> → 출력에서 JobID 수집 → 필요 시 <strong>즉시 -r</strong> 로 정리.</p>
  </li>
  <li>
    <p><strong>부하 최소화</strong> : <code class="language-plaintext highlighter-rouge">bjobs</code>는 <strong>전체 스냅샷 + 메모리/디스크 캐시 + 레이트리밋 + 단일플라이트</strong>.</p>
  </li>
  <li>
    <p><strong>API 간결성</strong> : 사용자는 <code class="language-plaintext highlighter-rouge">submit → data.job_ids / job_id_to_command → status/is_finished → kill</code> 만 알면 됨.</p>
  </li>
</ol>

<p>원한다면 로그/메트릭 훅(예: 제출/상태 호출 카운트, 지연)을 붙여서 관측 가능하게도 만들어줄게.</p>

<p class="chat--user">

-r 옵션은 최대한 안쓰고 싶어. 그냥 bkill로만 해도 될 것 같아. 다른 옵션들도 없애주고 그리고 bsub은 됐지만 bjobs 캐시가 업데이트 안 돼서 누락되는 경우도 있잖아 그 경우 status 정보가 어떻게 되는지 궁금해. 최대한 에러를 안내고 싶어

</p>

<p>좋은 포인트야. 아래처럼 딱 필요한 수준으로 수정했어.</p>

<ul>
  <li>
    <p><strong>bkill</strong> : 옵션 전부 제거(순수 <code class="language-plaintext highlighter-rouge">bkill &lt;ids&gt;</code>만 호출)</p>
  </li>
  <li>
    <p><strong>status 안정성</strong> : <code class="language-plaintext highlighter-rouge">bjobs</code> 캐시가 늦어 <strong>누락</strong> 돼도 에러 없이 동작</p>

    <ul>
      <li>
        <p>요청한 <code class="language-plaintext highlighter-rouge">job_ids</code>가 스냅샷에 없으면 <strong>한 번만 강제 새로고침</strong> 시도</p>
      </li>
      <li>
        <p>그래도 없으면 해당 ID에 대해 <strong><code class="language-plaintext highlighter-rouge">{"stat": "UNKNOWN"}</code></strong> 같은 기본값을 채워 반환(키 결핍으로 인한 예외 방지)</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>is_finished</strong> : <code class="language-plaintext highlighter-rouge">UNKNOWN</code>은 즉시 완료로 취급하지 않음. 기본적으로 <strong>그레이스(기다림) 시간</strong>(기본 15초) 동안은 “미완료”로 보고, 그 이후에도 계속 UNKNOWN이면 완료로 간주(클러스터 보존 기간/전파 지연을 흡수)</p>
  </li>
</ul>

<hr />
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_core.py (최적화 버전)
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="c1"># ========== 공용 ==========
</span><span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">cmd</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="o">*</span><span class="n">texts</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">finditer</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">ids</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">pass</span>
    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">ids</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">cmd_str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span>

<span class="c1"># ========== ShellRunner ==========
</span><span class="k">class</span> <span class="nc">ShellRunner</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">create_subprocess_shell만 사용. 동시 실행 수는 세마포어로 제한.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">max_concurrency</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrency</span><span class="p">)</span>
        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_env</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="c1"># ========== SharedCache (mem+disk) ==========
</span><span class="k">class</span> <span class="nc">SharedCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    멀티프로세스 공유 JSON 캐시:
    - 메모리 TTL + 디스크 TTL (같은 FS 내 rename 원자성)
    - 쓰기: tmp -&gt; fsync(tmp) -&gt; os.replace -&gt; fsync(dir)
    - 신선도: JSON 내부 ts와 파일 mtime 모두 사용(+2s skew 허용)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">namespace</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">):</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_root</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">namespace</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_skew</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">skew_eps</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_key_path</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">safe</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">[^A-Za-z0-9._-]+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">safe</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">:</span>
            <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
            <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts_in</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fresh_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts_in</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts_in</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">False</span>
            <span class="n">fresh_by_mtime</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">fresh_by_ts</span> <span class="ow">or</span> <span class="n">fresh_by_mtime</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">cache_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
                    <span class="n">f</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># ========== 결과 타입 ==========
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitItem</span><span class="p">:</span>
    <span class="n">index</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">command</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitResult</span><span class="p">:</span>
    <span class="n">interrupted</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>                    <span class="c1"># 평탄화된 전체 Job ID
</span>    <span class="n">job_id_to_command</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span>     <span class="c1"># Job ID -&gt; 원 커맨드
</span>    <span class="n">num_submitted</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">num_failed</span><span class="p">:</span> <span class="nb">int</span>

<span class="c1"># ========== LSFClient ==========
</span><span class="k">class</span> <span class="nc">LSFClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - run_command_capture_job: 커맨드 그대로 실행, 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">(복수 가능) 파싱
    - kill: 순수 bkill (옵션 없이)
    - status: bjobs 전체 스냅샷(캐시/레이트리밋/단일플라이트) + 누락 시 1회 강제 새로고침 + UNKNOWN 보강
    - submit_many_with_cancel: 인터럽트 시 새 실행 중단, 진행 중은 완주 → 수집한 job_id를 필요 시 bkill
    - is_finished: UNKNOWN을 일정 시간(기본 15s)까지는 “미완료”로 보고, 그 이후엔 완료로 간주
    </span><span class="sh">"""</span>
    <span class="n">TERMINAL</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ZOMBI</span><span class="sh">"</span><span class="p">}</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">unknown_grace_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">15.0</span><span class="p">,</span>   <span class="c1"># UNKNOWN 처리 그레이스
</span>    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_runner</span> <span class="o">=</span> <span class="nc">ShellRunner</span><span class="p">(</span><span class="n">max_concurrent_cli</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache</span> <span class="o">=</span> <span class="nc">SharedCache</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="o">=</span><span class="n">disk_cache_ttl_sec</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>

        <span class="c1"># bjobs 제어
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># UNKNOWN 처리용
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_unknown_grace</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">unknown_grace_sec</span><span class="p">)</span>

    <span class="c1"># --- 일반 커맨드 실행 + Job ID 파싱 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">job_ids</span> <span class="o">=</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">cmd</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids</span><span class="p">)</span>

    <span class="c1"># --- bkill (옵션 없이) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># --- bjobs 스냅샷 (캐시/레이트리밋/단일플라이트) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bjobs</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="sh">'</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">'"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">cached</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">cached</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">cached</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cached</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">[])}</span>
            <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="c1"># --- 안전한 status (누락 자동 보강) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>

        <span class="n">req_ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">}</span>

        <span class="c1"># 누락(id -&gt; None) 있으면 1회 강제 새로고침
</span>        <span class="k">if</span> <span class="nf">any</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
            <span class="n">all_map2</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">:</span>
                <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="n">all_map2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

        <span class="c1"># 그래도 없으면 UNKNOWN 보강 + 첫 발견 시간 기록
</span>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNKNOWN</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">_missing</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="c1"># --- 완료 판정 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">is_finished</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="nf">list</span><span class="p">({</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">st</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">:</span>
            <span class="n">info</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span>
            <span class="n">stat</span> <span class="o">=</span> <span class="p">(</span><span class="n">info</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">stat</span> <span class="o">==</span> <span class="sh">"</span><span class="s">UNKNOWN</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">first</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
                <span class="c1"># UNKNOWN 그레이스 내에는 “미완료”로 취급 -&gt; bjobs 전파 지연/캐시 지연 흡수
</span>                <span class="k">if</span> <span class="n">now</span> <span class="o">-</span> <span class="n">first</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_unknown_grace</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="c1"># 그레이스 초과 시: 완료로 간주(LSF가 정리했거나 보존기간 경과 등)
</span>                <span class="k">else</span><span class="p">:</span>
                    <span class="k">continue</span>
            <span class="k">if</span> <span class="n">stat</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">TERMINAL</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="c1"># --- 배치 제출 + 취소 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="nb">callable</span><span class="p">,</span>            <span class="c1"># () -&gt; bool
</span>        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cleanup_on_interrupt</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>   <span class="c1"># True면 인터럽트 시 수집된 job_id를 즉시 bkill
</span>    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitResult</span><span class="p">:</span>
        <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_ids_all</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_id_to_cmd</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span>
                <span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span>
            <span class="p">)</span>
            <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">command</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span>
                              <span class="n">stdout</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">job_ids</span><span class="p">)</span>

        <span class="n">idx</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                                <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                            <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">is_interrupted</span><span class="p">())</span>
        <span class="c1"># 인터럽트 시, 이미 수집된 job만 정리(bkill). (강제 옵션 없이 순수 bkill)
</span>        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">cleanup_on_interrupt</span> <span class="ow">and</span> <span class="n">job_ids_all</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

        <span class="n">job_ids_all</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">))</span>
        <span class="k">return</span> <span class="nc">SubmitResult</span><span class="p">(</span>
            <span class="n">interrupted</span><span class="o">=</span><span class="n">interrupted</span><span class="p">,</span>
            <span class="n">items</span><span class="o">=</span><span class="n">items</span><span class="p">,</span>
            <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids_all</span><span class="p">,</span>
            <span class="n">job_id_to_command</span><span class="o">=</span><span class="n">job_id_to_cmd</span><span class="p">,</span>
            <span class="n">num_submitted</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">),</span>
            <span class="n">num_failed</span><span class="o">=</span><span class="n">failures</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="당신이-원하는-사용-패턴-그대로">당신이 원하는 사용 패턴 그대로</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_core</span> <span class="kn">import</span> <span class="n">LSFClient</span>

<span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="nf">return </span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">(</span>
        <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.2</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/shared/cache</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">unknown_grace_sec</span><span class="o">=</span><span class="mf">15.0</span><span class="p">,</span>   <span class="c1"># bjobs 반영 지연 허용 시간
</span>    <span class="p">)</span>

    <span class="n">is_interrupted</span> <span class="o">=</span> <span class="nc">Token</span><span class="p">(</span><span class="n">delay</span><span class="o">=</span><span class="mi">9999</span><span class="p">).</span><span class="n">is_interrupted</span>

    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">job_sub a.txt</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mkdir package</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">]</span>

    <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span><span class="n">cmds</span><span class="p">,</span> <span class="n">is_interrupted</span><span class="o">=</span><span class="n">is_interrupted</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="n">interrupted</span> <span class="ow">or</span> <span class="nf">is_interrupted</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">중지되었습니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="n">job_ids</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">job_ids</span>  <span class="c1"># data로부터 running job id 추출
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">job_ids</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF 잡이 없습니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">while</span> <span class="ow">not</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">is_finished</span><span class="p">(</span><span class="n">job_ids</span><span class="p">):</span>
        <span class="n">status</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">job_id</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">info</span> <span class="o">=</span> <span class="n">status</span><span class="p">[</span><span class="n">job_id</span><span class="p">]</span>         <span class="c1"># 항상 키가 존재 (UNKNOWN 보강)
</span>            <span class="n">job_command</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">job_id_to_command</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">&lt;unknown&gt;</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">info</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">),</span> <span class="n">job_command</span><span class="p">)</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">is_interrupted</span><span class="p">():</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">중지하였습니다.</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">모두 완료되었습니다.</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h3 id="정리-step-by-step">정리 (step-by-step)</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bkill</code>은 <strong>옵션 없이</strong> 만 씀.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">status(job_ids)</code>는 항상 <strong>모든 ID의 키가 존재</strong> 하도록 보장:</p>

    <ol>
      <li>
        <p>캐시 히트 시 바로 반환</p>
      </li>
      <li>
        <p>누락 있으면 <strong>1회 강제 리프레시</strong></p>
      </li>
      <li>
        <p>그래도 없으면 <code class="language-plaintext highlighter-rouge">{"stat":"UNKNOWN"}</code>으로 보강(에러 없음)</p>
      </li>
    </ol>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">is_finished</code>는 <code class="language-plaintext highlighter-rouge">UNKNOWN</code>을 <strong>그레이스 시간 동안은 미완료</strong> 로 보고, 그 이후엔 완료로 간주(무한루프 방지).</p>
  </li>
</ul>

<p>필요하면 <code class="language-plaintext highlighter-rouge">unknown_grace_sec</code>만 조정해 운영 환경에 맞출 수 있어.</p>

<p class="chat--user">

한 프로세스 내에서 여러 LSFClient 를 만들면 동시 돌아가는 Job이 많아지는거 아냐? Semaphore를 프로세스 전체가 공유해야할 것 같아 싱글톤 같은걸 써서. LSFClient를 싱글톤화 하든지 Semaphore만 하든지 그건 선택일거같은데 더 일반적이고 좋은 쪽을 선택해야해줘ㅗ

</p>

<p>좋은 지적! “한 프로세스 안에서 LSFClient를 여러 개 만들어도 동시 실행 수가 늘어나지 않도록” <strong>프로세스(정확히는 이벤트 루프) 단위 공유 세마포어</strong> 를 넣은 최적 버전으로 정리했어.</p>

<p>핵심만 요약하면:</p>

<ol>
  <li>
    <p><strong>LoopSharedSemaphore</strong></p>

    <ul>
      <li>
        <p>같은 이벤트 루프 안에서 만들어지는 모든 <code class="language-plaintext highlighter-rouge">LSFClient</code>/<code class="language-plaintext highlighter-rouge">ShellRunner</code>가 <strong>하나의 세마포어를 공유</strong>.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">configure_global_cli_concurrency(N)</code>으로 <strong>전역 동시 실행 수를 설정</strong>(클라이언트 만들기 전에 한 번 호출).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>LSFClient/ShellRunner</strong></p>

    <ul>
      <li>
        <p>기본은 공유 세마포어 사용(<code class="language-plaintext highlighter-rouge">share_semaphore=True</code>).</p>
      </li>
      <li>
        <p>정말 필요하면 인스턴스별로 독립 세마포어도 가능(<code class="language-plaintext highlighter-rouge">share_semaphore=False</code>).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>기능은 그대로</strong></p>

    <ul>
      <li>
        <p>커맨드 그대로 실행(<code class="language-plaintext highlighter-rouge">create_subprocess_shell</code>), <code class="language-plaintext highlighter-rouge">Job &lt;id&gt;</code> 파싱</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">bkill</code> 옵션 없이</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">bjobs</code> 스냅샷: 메모리+디스크 캐시, 과호출 레이트리밋, in-process single-flight</p>
      </li>
      <li>
        <p>누락 시 1회 강제 새로고침 + <strong>UNKNOWN 보강</strong> , <code class="language-plaintext highlighter-rouge">is_finished</code>는 UNKNOWN 그레이스(기본 15s)</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="드롭인-교체-코드-lsf_corepy">드롭인 교체 코드 (<code class="language-plaintext highlighter-rouge">lsf_core.py</code>)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_core.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">weakref</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="c1"># ===================== 공용 유틸 =====================
</span>
<span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">cmd</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="o">*</span><span class="n">texts</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">finditer</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">ids</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">pass</span>
    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">ids</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">cmd_str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span>

<span class="c1"># ===================== 프로세스(루프) 전역 limiter =====================
</span>
<span class="k">class</span> <span class="nc">LoopSharedSemaphore</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    같은 이벤트 루프 안에서 create_subprocess_shell 동시 실행 수를 제한하는 전역 세마포어.
    - 여러 LSFClient, 여러 ShellRunner가 있어도 </span><span class="sh">'</span><span class="s">같은 루프</span><span class="sh">'</span><span class="s">에서는 이 세마포어 하나를 공유.
    - 다중 스레드/다중 루프 환경이라면 </span><span class="sh">'</span><span class="s">루프별</span><span class="sh">'</span><span class="s">로 하나씩 생김.
    </span><span class="sh">"""</span>
    <span class="n">_sems</span><span class="p">:</span> <span class="sh">"</span><span class="s">weakref.WeakKeyDictionary[asyncio.AbstractEventLoop, asyncio.Semaphore]</span><span class="sh">"</span> <span class="o">=</span> <span class="n">weakref</span><span class="p">.</span><span class="nc">WeakKeyDictionary</span><span class="p">()</span>
    <span class="n">_default_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="c1"># 이미 만들어진 세마포어의 용량을 동적으로 바꾸긴 어렵다.
</span>        <span class="c1"># 그러니 '클라이언트 만들기 전에' 호출해 두는 것을 권장.
</span>        <span class="n">cls</span><span class="p">.</span><span class="n">_default_limit</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">limit</span><span class="p">))</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Semaphore</span><span class="p">:</span>
        <span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">()</span>
        <span class="n">sem</span> <span class="o">=</span> <span class="n">cls</span><span class="p">.</span><span class="n">_sems</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">sem</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">cls</span><span class="p">.</span><span class="n">_default_limit</span><span class="p">)</span>
            <span class="n">cls</span><span class="p">.</span><span class="n">_sems</span><span class="p">[</span><span class="n">loop</span><span class="p">]</span> <span class="o">=</span> <span class="n">sem</span>
        <span class="k">return</span> <span class="n">sem</span>

<span class="k">def</span> <span class="nf">configure_global_cli_concurrency</span><span class="p">(</span><span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">클라이언트 생성 전에 호출해서 전역 동시 실행 수를 지정하세요.</span><span class="sh">"""</span>
    <span class="n">LoopSharedSemaphore</span><span class="p">.</span><span class="nf">configure</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>

<span class="c1"># ===================== ShellRunner =====================
</span>
<span class="k">class</span> <span class="nc">ShellRunner</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">create_subprocess_shell만 사용. 기본은 전역(루프공유) 세마포어를 씀.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">max_concurrency</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]],</span> <span class="n">share_semaphore</span><span class="p">:</span> <span class="nb">bool</span><span class="p">):</span>
        <span class="c1"># env
</span>        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>
        <span class="c1"># semaphore
</span>        <span class="k">if</span> <span class="n">share_semaphore</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_sem</span> <span class="o">=</span> <span class="n">LoopSharedSemaphore</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrency</span> <span class="ow">or</span> <span class="n">LoopSharedSemaphore</span><span class="p">.</span><span class="n">_default_limit</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_env</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="c1"># ===================== SharedCache (mem+disk) =====================
</span>
<span class="k">class</span> <span class="nc">SharedCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    멀티프로세스 공유 JSON 캐시:
    - 메모리 TTL + 디스크 TTL (같은 FS 내 rename 원자성)
    - 쓰기: tmp -&gt; fsync(tmp) -&gt; os.replace -&gt; fsync(dir)
    - 신선도: JSON 내부 ts와 파일 mtime 모두 사용(+2s skew 허용)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">namespace</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">):</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_root</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">namespace</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_skew</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">skew_eps</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_key_path</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">safe</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">[^A-Za-z0-9._-]+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">safe</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
        <span class="c1"># memory
</span>        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">:</span>
            <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
            <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="c1"># disk
</span>        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts_in</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fresh_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts_in</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts_in</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">False</span>
            <span class="n">fresh_by_mtime</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">fresh_by_ts</span> <span class="ow">or</span> <span class="n">fresh_by_mtime</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">cache_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
                    <span class="n">f</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># ===================== 결과 타입 =====================
</span>
<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitItem</span><span class="p">:</span>
    <span class="n">index</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">command</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitResult</span><span class="p">:</span>
    <span class="n">interrupted</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>                    <span class="c1"># 평탄화된 전체 Job ID
</span>    <span class="n">job_id_to_command</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span>     <span class="c1"># Job ID -&gt; 원 커맨드
</span>    <span class="n">num_submitted</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">num_failed</span><span class="p">:</span> <span class="nb">int</span>

<span class="c1"># ===================== LSFClient =====================
</span>
<span class="k">class</span> <span class="nc">LSFClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - run_command_capture_job: 커맨드 그대로 실행, 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">(복수 가능) 파싱
    - kill: 순수 bkill (옵션 없이)
    - status: bjobs 전체 스냅샷(캐시/레이트리밋/단일플라이트) + 누락 시 1회 강제 새로고침 + UNKNOWN 보강
    - submit_many_with_cancel: 인터럽트 시 새 실행 중단, 진행 중은 완주 → 수집한 job_id를 필요 시 bkill
    - is_finished: UNKNOWN 그레이스(기본 15s) 동안은 미완료로 간주
    - 세마포어: 기본은 루프 전역 공유(LoopSharedSemaphore)
    </span><span class="sh">"""</span>
    <span class="n">TERMINAL</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ZOMBI</span><span class="sh">"</span><span class="p">}</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>  <span class="c1"># share_semaphore=False일 때만 사용
</span>        <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">unknown_grace_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">15.0</span><span class="p">,</span>
        <span class="n">share_semaphore</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>              <span class="c1"># True: 루프 전역 공유, False: 인스턴스별 세마포어
</span>    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_runner</span> <span class="o">=</span> <span class="nc">ShellRunner</span><span class="p">(</span><span class="n">max_concurrency</span><span class="o">=</span><span class="n">max_concurrent_cli</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">,</span> <span class="n">share_semaphore</span><span class="o">=</span><span class="n">share_semaphore</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache</span> <span class="o">=</span> <span class="nc">SharedCache</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="o">=</span><span class="n">disk_cache_ttl_sec</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>

        <span class="c1"># bjobs 제어
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>

        <span class="c1"># UNKNOWN 처리
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_unknown_grace</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">unknown_grace_sec</span><span class="p">)</span>

    <span class="c1"># --- 일반 커맨드 실행 + Job ID 파싱 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">job_ids</span> <span class="o">=</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">cmd</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids</span><span class="p">)</span>

    <span class="c1"># --- bkill (옵션 없이) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># --- bjobs 스냅샷 (캐시/레이트리밋/단일플라이트) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bjobs</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="sh">'</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">'"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">cached</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">cached</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">cached</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cached</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">[])}</span>
            <span class="n">inflight</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">inflight</span><span class="p">:</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">inflight</span>

        <span class="n">fut</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_inflight</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

    <span class="c1"># --- 안전한 status (누락 자동 보강) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>

        <span class="n">req_ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">}</span>

        <span class="k">if</span> <span class="nf">any</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
            <span class="n">all_map2</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">:</span>
                <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="n">all_map2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNKNOWN</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">_missing</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
                <span class="c1"># UNKNOWN 그레이스 시작 시각 기록
</span>                <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="c1"># --- 완료 판정 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">is_finished</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="nf">list</span><span class="p">({</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">st</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">:</span>
            <span class="n">info</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span>
            <span class="n">stat</span> <span class="o">=</span> <span class="p">(</span><span class="n">info</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">stat</span> <span class="o">==</span> <span class="sh">"</span><span class="s">UNKNOWN</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">first</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">now</span> <span class="o">-</span> <span class="n">first</span> <span class="o">&lt;</span> <span class="mf">15.0</span><span class="p">:</span>  <span class="c1"># self._unknown_grace를 써도 됨. 기본 15s
</span>                    <span class="k">return</span> <span class="bp">False</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">continue</span>
            <span class="k">if</span> <span class="n">stat</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">TERMINAL</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="c1"># --- 배치 제출 + 취소 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="nb">callable</span><span class="p">,</span>            <span class="c1"># () -&gt; bool
</span>        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cleanup_on_interrupt</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>   <span class="c1"># True면 인터럽트 시 수집된 job_id를 즉시 bkill
</span>    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitResult</span><span class="p">:</span>
        <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_ids_all</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_id_to_cmd</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span>
                <span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span>
            <span class="p">)</span>
            <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">command</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span>
                              <span class="n">stdout</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">job_ids</span><span class="p">)</span>

        <span class="n">idx</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                                <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                            <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">is_interrupted</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">cleanup_on_interrupt</span> <span class="ow">and</span> <span class="n">job_ids_all</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

        <span class="n">job_ids_all</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">))</span>
        <span class="k">return</span> <span class="nc">SubmitResult</span><span class="p">(</span>
            <span class="n">interrupted</span><span class="o">=</span><span class="n">interrupted</span><span class="p">,</span>
            <span class="n">items</span><span class="o">=</span><span class="n">items</span><span class="p">,</span>
            <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids_all</span><span class="p">,</span>
            <span class="n">job_id_to_command</span><span class="o">=</span><span class="n">job_id_to_cmd</span><span class="p">,</span>
            <span class="n">num_submitted</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">),</span>
            <span class="n">num_failed</span><span class="o">=</span><span class="n">failures</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="어떻게-쓰면-되나-step-by-step">어떻게 쓰면 되나 (step-by-step)</h2>

<h3 id="1-전역-동시-실행-수를-한-번만-설정">1) 전역 동시 실행 수를 한 번만 설정</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">lsf_core</span> <span class="kn">import</span> <span class="n">configure_global_cli_concurrency</span>
<span class="nf">configure_global_cli_concurrency</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>   <span class="c1"># 프로세스(=루프) 전체에서 최대 6개만 동시 실행
</span></code></pre></div></div>

<blockquote>
  <p>이건 <strong>클라이언트들을 만들기 전에</strong> 호출하세요. 같은 이벤트 루프에서 만든 모든 <code class="language-plaintext highlighter-rouge">LSFClient</code>가 이 세마포어를 공유합니다.</p>
</blockquote>

<h3 id="2-클라이언트-여러-개-만들어도-ok">2) 클라이언트 여러 개 만들어도 OK</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">lsf_core</span> <span class="kn">import</span> <span class="n">LSFClient</span>

<span class="n">c1</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">()</span>                   <span class="c1"># 기본: 공유 세마포어 사용
</span><span class="n">c2</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">()</span>                   <span class="c1"># 동일 루프면 c1과 같은 세마포어 공유
</span><span class="n">c3</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">(</span><span class="n">share_semaphore</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">max_concurrent_cli</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>  <span class="c1"># 정말 필요하면 독립 세마포어
</span></code></pre></div></div>

<h3 id="3-질문에서-준-루프">3) 질문에서 준 루프</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">job_sub a.txt</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mkdir package</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">]</span>

<span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">c1</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span><span class="n">cmds</span><span class="p">,</span> <span class="n">is_interrupted</span><span class="o">=</span><span class="n">is_interrupted</span><span class="p">)</span>
<span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="n">interrupted</span> <span class="ow">or</span> <span class="nf">is_interrupted</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">중지되었습니다.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span>

<span class="n">job_ids</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">job_ids</span>
<span class="k">while</span> <span class="ow">not</span> <span class="k">await</span> <span class="n">c1</span><span class="p">.</span><span class="nf">is_finished</span><span class="p">(</span><span class="n">job_ids</span><span class="p">):</span>
    <span class="n">status</span> <span class="o">=</span> <span class="k">await</span> <span class="n">c1</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">job_id</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
        <span class="n">job_command</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">job_id_to_command</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">job_id</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">status</span><span class="p">[</span><span class="n">job_id</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">),</span> <span class="n">job_command</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span> <span class="nf">is_interrupted</span><span class="p">():</span>
        <span class="k">await</span> <span class="n">c1</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>   <span class="c1"># 옵션 없이 순수 bkill
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">중지하였습니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">모두 완료되었습니다.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="왜-이게-더-일반적이고-좋은-선택인가">왜 이게 “더 일반적이고 좋은 선택”인가</h2>

<ul>
  <li>
    <p><strong>안전한 기본값</strong> : 대부분의 애플리케이션은 단일 이벤트 루프에서 돌아가므로, 루프 단위 전역 세마포어 공유가 가장 자연스럽고 안정적.</p>
  </li>
  <li>
    <p><strong>예측 가능한 동시성</strong> : <code class="language-plaintext highlighter-rouge">configure_global_cli_concurrency(N)</code> 딱 한 번으로 프로세스 전체 실행량을 제어.</p>
  </li>
  <li>
    <p><strong>유연성</strong> : 예외적으로 독립 세마포어가 필요하면 <code class="language-plaintext highlighter-rouge">share_semaphore=False</code>로 분리 가능.</p>
  </li>
  <li>
    <p><strong>복잡도 최소화</strong> : 싱글톤 클라이언트 강제보다 제어 지점이 명확하고, 테스트·확장이 쉽다.</p>
  </li>
</ul>

<p>원하면 전역 동시 실행 수를 환경변수(예: <code class="language-plaintext highlighter-rouge">LSF_CLI_MAX=6</code>)로도 읽도록 한 줄 추가해줄게.</p>

<p class="chat--user">

SharedCache도 한 프로세스 내에 LSFClient가 여러개 있을 때 최대한 효율적으로 동작하게 하고 싶어. 지금은 Client가 N개면 Cache도 N개 있는데 이건 좀 비효율적인거 아닌가 싶어서.

</p>

<p>좋은 포인트! 한 프로세스(정확히는 <strong>같은 이벤트 루프</strong>) 안에서 <code class="language-plaintext highlighter-rouge">LSFClient</code>를 여러 개 생성해도 <strong>캐시(메모리)와 단일 플라이트(single-flight)가 중복되지 않게</strong> 고쳤어요.</p>

<p>핵심 변화만 요약:</p>

<ul>
  <li>
    <p><strong>공유 세마포어</strong> : 이미 제공했던 <code class="language-plaintext highlighter-rouge">LoopSharedSemaphore</code>로 전역 동시 실행 수를 루프 단위로 공유.</p>
  </li>
  <li>
    <p><strong>공유 메모리 캐시</strong> : <code class="language-plaintext highlighter-rouge">SharedCache</code>가 <strong>프로세스/루프 전역 메모리 샤드</strong> 를 사용하도록 변경 → <code class="language-plaintext highlighter-rouge">LSFClient</code>가 N개여도 <strong>메모리 캐시 1벌</strong> 만.</p>
  </li>
  <li>
    <p><strong>전역 single-flight</strong> : <code class="language-plaintext highlighter-rouge">bjobs</code> 스냅샷을 가져오는 fetch는 <strong>루프 전역 single-flight</strong> 로 묶어, 동시에 여러 <code class="language-plaintext highlighter-rouge">LSFClient</code>가 호출해도 <strong>실제 호출은 1회</strong> 만 수행.</p>
  </li>
</ul>

<p>아래 파일 하나로 교체해서 쓰세요. (이전 응답의 기능/인터페이스는 유지됩니다: <code class="language-plaintext highlighter-rouge">bkill</code> 옵션 없음, <code class="language-plaintext highlighter-rouge">UNKNOWN</code> 보강, <code class="language-plaintext highlighter-rouge">is_finished</code> 그레이스 처리 등.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_core.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">weakref</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="c1"># ========== 공용 ==========
</span><span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">cmd</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="o">*</span><span class="n">texts</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">:</span>
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">finditer</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">ids</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">pass</span>
    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">ids</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">cmd_str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span>

<span class="c1"># ========== 루프 전역 공유 도우미들 ==========
</span>
<span class="k">class</span> <span class="nc">LoopSharedSemaphore</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">같은 이벤트 루프 내에서 전역으로 공유되는 세마포어 (CLI 동시 실행 상한).</span><span class="sh">"""</span>
    <span class="n">_sems</span><span class="p">:</span> <span class="sh">"</span><span class="s">weakref.WeakKeyDictionary[asyncio.AbstractEventLoop, asyncio.Semaphore]</span><span class="sh">"</span> <span class="o">=</span> <span class="n">weakref</span><span class="p">.</span><span class="nc">WeakKeyDictionary</span><span class="p">()</span>
    <span class="n">_default_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">configure</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">cls</span><span class="p">.</span><span class="n">_default_limit</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">limit</span><span class="p">))</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Semaphore</span><span class="p">:</span>
        <span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">()</span>
        <span class="n">sem</span> <span class="o">=</span> <span class="n">cls</span><span class="p">.</span><span class="n">_sems</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">sem</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">cls</span><span class="p">.</span><span class="n">_default_limit</span><span class="p">)</span>
            <span class="n">cls</span><span class="p">.</span><span class="n">_sems</span><span class="p">[</span><span class="n">loop</span><span class="p">]</span> <span class="o">=</span> <span class="n">sem</span>
        <span class="k">return</span> <span class="n">sem</span>

<span class="k">def</span> <span class="nf">configure_global_cli_concurrency</span><span class="p">(</span><span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">클라이언트 생성 전에 한 번 호출해서 전역 동시 실행 수를 지정하세요.</span><span class="sh">"""</span>
    <span class="n">LoopSharedSemaphore</span><span class="p">.</span><span class="nf">configure</span><span class="p">(</span><span class="n">limit</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">LoopSingleFlight</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    같은 이벤트 루프에서 key별로 동시 실행을 1회로 보장.
    사용법: await LoopSingleFlight.run(key, coro_factory)
    </span><span class="sh">"""</span>
    <span class="n">_maps</span><span class="p">:</span> <span class="sh">"</span><span class="s">weakref.WeakKeyDictionary[asyncio.AbstractEventLoop, Dict[str, asyncio.Future]]</span><span class="sh">"</span> <span class="o">=</span> <span class="n">weakref</span><span class="p">.</span><span class="nc">WeakKeyDictionary</span><span class="p">()</span>

    <span class="nd">@classmethod</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">coro_factory</span><span class="p">):</span>
        <span class="n">loop</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">()</span>
        <span class="n">fmap</span> <span class="o">=</span> <span class="n">cls</span><span class="p">.</span><span class="n">_maps</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">loop</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">fmap</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">fmap</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">cls</span><span class="p">.</span><span class="n">_maps</span><span class="p">[</span><span class="n">loop</span><span class="p">]</span> <span class="o">=</span> <span class="n">fmap</span>
        <span class="n">fut</span> <span class="o">=</span> <span class="n">fmap</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">fut</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">fut</span>
        <span class="n">fut</span> <span class="o">=</span> <span class="n">loop</span><span class="p">.</span><span class="nf">create_future</span><span class="p">()</span>
        <span class="n">fmap</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">coro_factory</span><span class="p">()</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">res</span>
        <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
            <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">fmap</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="c1"># ========== ShellRunner ==========
</span>
<span class="k">class</span> <span class="nc">ShellRunner</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">create_subprocess_shell만 사용. 기본은 루프 전역 세마포어 공유.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">max_concurrency</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]],</span> <span class="n">share_semaphore</span><span class="p">:</span> <span class="nb">bool</span><span class="p">):</span>
        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_sem</span> <span class="o">=</span> <span class="n">LoopSharedSemaphore</span><span class="p">.</span><span class="nf">get</span><span class="p">()</span> <span class="k">if</span> <span class="n">share_semaphore</span> <span class="k">else</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">max_concurrency</span> <span class="ow">or</span> <span class="mi">8</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_env</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="c1"># ========== SharedCache (프로세스/루프 전역 메모리) ==========
</span>
<span class="c1"># 루트 디렉토리(= base/namespace) 단위로 메모리 샤드 공유
</span><span class="n">_MEM_SHARDS</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]]</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">class</span> <span class="nc">SharedCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    멀티프로세스 공유 JSON 캐시 + **프로세스/루프 전역 메모리 샤드**:
    - 같은 프로세스에서 같은 cache_root(=base/namespace)를 쓰는 모든 LSFClient가 **한 메모리 dict 공유**
    - 디스크: tmp -&gt; fsync(tmp) -&gt; os.replace -&gt; fsync(dir) (같은 FS 내 rename 원자성)
    - 신선도: JSON 내부 ts와 파일 mtime 모두 사용(+2s skew 허용)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">namespace</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">):</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_root</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">namespace</span><span class="p">)</span>  <span class="c1"># shard key
</span>        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_skew</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">skew_eps</span><span class="p">)</span>
        <span class="c1"># 전역 샤드 확보
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span> <span class="o">=</span> <span class="n">_MEM_SHARDS</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="p">{})</span>  <span class="c1"># key -&gt; (ts, data)
</span>
    <span class="k">def</span> <span class="nf">_key_path</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">safe</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">[^A-Za-z0-9._-]+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">safe</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
        <span class="c1"># 1) 프로세스 전역 메모리
</span>        <span class="n">item</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">:</span>
            <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
            <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="c1"># 2) 디스크
</span>        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts_in</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fresh_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts_in</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts_in</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">False</span>
            <span class="n">fresh_by_mtime</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">fresh_by_ts</span> <span class="ow">or</span> <span class="n">fresh_by_mtime</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">cache_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
                    <span class="n">f</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># ========== 결과 타입 ==========
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitItem</span><span class="p">:</span>
    <span class="n">index</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">command</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitResult</span><span class="p">:</span>
    <span class="n">interrupted</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>                    <span class="c1"># 평탄화된 전체 Job ID
</span>    <span class="n">job_id_to_command</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span>     <span class="c1"># Job ID -&gt; 원 커맨드
</span>    <span class="n">num_submitted</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">num_failed</span><span class="p">:</span> <span class="nb">int</span>

<span class="c1"># ========== LSFClient ==========
</span><span class="k">class</span> <span class="nc">LSFClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - run_command_capture_job: 커맨드 그대로 실행, 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">(복수 가능) 파싱
    - kill: 순수 bkill (옵션 없이)
    - status: bjobs 전체 스냅샷(공유 캐시 + 전역 single-flight + 레이트리밋)
             + 누락 시 1회 강제 새로고침 + UNKNOWN 보강
    - submit_many_with_cancel: 인터럽트 시 새 실행 중단, 진행 중은 완주 → 수집 job_id 필요시 bkill
    - is_finished: UNKNOWN 그레이스(기본 15s) 동안은 미완료로 간주
    - 동시성: 루프 전역 세마포어 공유 (configure_global_cli_concurrency 사용 가능)
    </span><span class="sh">"""</span>
    <span class="n">TERMINAL</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ZOMBI</span><span class="sh">"</span><span class="p">}</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">max_concurrent_cli</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>  <span class="c1"># share_semaphore=False일 때만 의미 있음
</span>        <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">unknown_grace_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">15.0</span><span class="p">,</span>
        <span class="n">share_semaphore</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_runner</span> <span class="o">=</span> <span class="nc">ShellRunner</span><span class="p">(</span><span class="n">max_concurrency</span><span class="o">=</span><span class="n">max_concurrent_cli</span><span class="p">,</span> <span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">,</span> <span class="n">share_semaphore</span><span class="o">=</span><span class="n">share_semaphore</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache</span> <span class="o">=</span> <span class="nc">SharedCache</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="o">=</span><span class="n">disk_cache_ttl_sec</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>

        <span class="c1"># bjobs 제어
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="mf">0.0</span>

        <span class="c1"># UNKNOWN 처리
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_unknown_grace</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">unknown_grace_sec</span><span class="p">)</span>

    <span class="c1"># --- 일반 커맨드 실행 + Job ID 파싱 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">job_ids</span> <span class="o">=</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">cmd</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids</span><span class="p">)</span>

    <span class="c1"># --- bkill (옵션 없이) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># --- bjobs 스냅샷 (공유 캐시 + 전역 single-flight) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="c1"># per-process(min: 루프) rate-limit
</span>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bjobs</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="sh">'</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">'"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_last_bjobs_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>

        <span class="c1"># 1) 공유 캐시 먼저 조회
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">cached</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">cached</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">cached</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cached</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">[])}</span>

        <span class="c1"># 2) 전역 single-flight로 fetch 단일화
</span>        <span class="k">async</span> <span class="k">def</span> <span class="nf">_do_fetch</span><span class="p">():</span>
            <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
            <span class="k">return</span> <span class="n">data</span>

        <span class="k">if</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="k">return</span> <span class="k">await</span> <span class="nf">_do_fetch</span><span class="p">()</span>

        <span class="k">return</span> <span class="k">await</span> <span class="n">LoopSingleFlight</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">_do_fetch</span><span class="p">)</span>

    <span class="c1"># --- 안전한 status (누락 자동 보강 + UNKNOWN 보강) ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
        <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>

        <span class="n">req_ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">}</span>

        <span class="c1"># 누락 있으면 1회 강제 새로고침
</span>        <span class="k">if</span> <span class="nf">any</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
            <span class="n">all_map2</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">:</span>
                <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="n">all_map2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

        <span class="c1"># 그래도 없으면 UNKNOWN 보강
</span>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNKNOWN</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">_missing</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="c1"># --- 완료 판정 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">is_finished</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="nf">list</span><span class="p">({</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">st</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">:</span>
            <span class="n">info</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span>
            <span class="n">stat</span> <span class="o">=</span> <span class="p">(</span><span class="n">info</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">stat</span> <span class="o">==</span> <span class="sh">"</span><span class="s">UNKNOWN</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">first</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">now</span> <span class="o">-</span> <span class="n">first</span> <span class="o">&lt;</span> <span class="mf">15.0</span><span class="p">:</span>      <span class="c1"># 기본 그레이스 15초 (필요시 self._unknown_grace 사용)
</span>                    <span class="k">return</span> <span class="bp">False</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">continue</span>
            <span class="k">if</span> <span class="n">stat</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">TERMINAL</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="c1"># --- 배치 제출 + 취소 ---
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="nb">callable</span><span class="p">,</span>            <span class="c1"># () -&gt; bool
</span>        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cleanup_on_interrupt</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>   <span class="c1"># True면 인터럽트 시 수집된 job_id 즉시 bkill
</span>    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitResult</span><span class="p">:</span>
        <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_ids_all</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_id_to_cmd</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span>
                <span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span>
            <span class="p">)</span>
            <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">command</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span>
                              <span class="n">stdout</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">job_ids</span><span class="p">)</span>

        <span class="n">idx</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                                <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                            <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">is_interrupted</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">cleanup_on_interrupt</span> <span class="ow">and</span> <span class="n">job_ids_all</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

        <span class="n">job_ids_all</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">))</span>
        <span class="k">return</span> <span class="nc">SubmitResult</span><span class="p">(</span>
            <span class="n">interrupted</span><span class="o">=</span><span class="n">interrupted</span><span class="p">,</span>
            <span class="n">items</span><span class="o">=</span><span class="n">items</span><span class="p">,</span>
            <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids_all</span><span class="p">,</span>
            <span class="n">job_id_to_command</span><span class="o">=</span><span class="n">job_id_to_cmd</span><span class="p">,</span>
            <span class="n">num_submitted</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">),</span>
            <span class="n">num_failed</span><span class="o">=</span><span class="n">failures</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>

<h3 id="어떻게-달라졌나-step-by-step">어떻게 달라졌나 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>SharedCache 메모리 공유</strong> : <code class="language-plaintext highlighter-rouge">_MEM_SHARDS</code>에 루트(= <code class="language-plaintext highlighter-rouge">cache_dir/namespace</code>)별로 딱 <strong>한 벌의 메모리 dict</strong> 만 존재 → 같은 프로세스/루프의 여러 <code class="language-plaintext highlighter-rouge">LSFClient</code>가 <strong>동일 메모리 캐시</strong> 를 씀.</p>
  </li>
  <li>
    <p><strong>전역 single-flight</strong> : <code class="language-plaintext highlighter-rouge">LoopSingleFlight.run(key, _do_fetch)</code>로 <code class="language-plaintext highlighter-rouge">bjobs</code> 스냅샷 fetch를 루프 전역 1회로 제한.</p>
  </li>
  <li>
    <p><strong>동시 실행 상한</strong> : <code class="language-plaintext highlighter-rouge">LoopSharedSemaphore</code>로 루프 전역 동시 실행 수 제어(원하면 <code class="language-plaintext highlighter-rouge">configure_global_cli_concurrency(N)</code> 호출).</p>
  </li>
</ol>

<p>이제 한 프로세스에서 <code class="language-plaintext highlighter-rouge">LSFClient</code>를 여러 개 만들어도:</p>

<ul>
  <li>
    <p>셸 실행 <strong>동시성 상한이 늘지 않고</strong> ,</p>
  </li>
  <li>
    <p><strong>메모리 캐시/단일 플라이트도 중복되지 않아서</strong> 불필요한 <code class="language-plaintext highlighter-rouge">bjobs</code> 실행이 사실상 1회로 합쳐집니다.</p>
  </li>
</ul>

<p>필요하면 캐시 루트(<code class="language-plaintext highlighter-rouge">cache_dir</code>, <code class="language-plaintext highlighter-rouge">namespace</code>)를 팀/유저 단위로 나눠서 격리할 수도 있어요.</p>

<p class="chat--user">

이렇게 복잡해질 일인가 싶네. 그냥 이벤트 루프는 1개라고 가정하고 모두 공유하면 안돼?

</p>

<p>좋아, <strong>“이벤트 루프는 1개라고 가정”</strong>하고, <strong>프로세스 전역으로 모두 공유</strong> 하도록 깔끔하게 정리했어.<br />
전역 공유 대상: <strong>세마포어(동시 실행 상한), 메모리 캐시, single-flight, bjobs rate-limit</strong>.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bkill</code>은 <strong>옵션 없이</strong> 만 사용.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">bjobs</code>는 <strong>전체 스냅샷 1회</strong> + <strong>메모리/디스크 TTL 캐시</strong> + <strong>전역 single-flight</strong> , 과호출 방지.</p>
  </li>
  <li>
    <p>스냅샷에 <strong>누락</strong> 되면 1회 강제 갱신 → 그래도 없으면 <code class="language-plaintext highlighter-rouge">{"stat":"UNKNOWN"}</code> 으로 <strong>보강</strong>(에러 X).</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">is_finished()</code>는 <code class="language-plaintext highlighter-rouge">UNKNOWN</code>을 <strong>그레이스(기본 15s)</strong> 동안은 “미완료”로 간주, 이후 완료로 간주.</p>
  </li>
  <li>
    <p><strong>전역 동시 실행 수</strong> 는 <code class="language-plaintext highlighter-rouge">configure_global_cli_concurrency(N)</code>로 한 번만 설정(클라이언트 생성 전 권장).</p>
  </li>
</ul>

<hr />
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># lsf_simple.py
</span><span class="kn">from</span> <span class="n">__future__</span> <span class="kn">import</span> <span class="n">annotations</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">getpass</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">dataclasses</span> <span class="kn">import</span> <span class="n">dataclass</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Any</span><span class="p">,</span> <span class="n">Dict</span><span class="p">,</span> <span class="n">Iterable</span><span class="p">,</span> <span class="n">List</span><span class="p">,</span> <span class="n">Optional</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">,</span> <span class="n">Union</span>

<span class="c1"># ===================== 전역 설정/공유 상태 =====================
</span><span class="n">_DEFAULT_CONCURRENCY</span> <span class="o">=</span> <span class="mi">8</span>
<span class="n">_SEM</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Semaphore</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>                 <span class="c1"># 프로세스 전역 세마포어(단일 이벤트 루프 가정)
</span><span class="n">_MEM_CACHE</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">float</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>           <span class="c1"># 프로세스 전역 메모리 캐시
</span><span class="n">_INFLIGHT</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Future</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>               <span class="c1"># 프로세스 전역 single-flight (key -&gt; Future)
</span><span class="n">_LAST_BJOBS_CALL</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>                 <span class="c1"># rate-limit용 마지막 호출시각 (key= f"{user}|{'a' if include_done else ''}")
</span>
<span class="k">def</span> <span class="nf">configure_global_cli_concurrency</span><span class="p">(</span><span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">프로세스 전역 CLI 동시 실행 상한을 설정. 가능한 한 클라이언트 사용 전에 호출하세요.</span><span class="sh">"""</span>
    <span class="k">global</span> <span class="n">_DEFAULT_CONCURRENCY</span>
    <span class="n">_DEFAULT_CONCURRENCY</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">limit</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_get_global_sem</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Semaphore</span><span class="p">:</span>
    <span class="k">global</span> <span class="n">_SEM</span>
    <span class="k">if</span> <span class="n">_SEM</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">_SEM</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="n">_DEFAULT_CONCURRENCY</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">_SEM</span>

<span class="c1"># ===================== 공용 유틸 =====================
</span><span class="n">StrOrSeq</span> <span class="o">=</span> <span class="n">Union</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Sequence</span><span class="p">[</span><span class="nb">str</span><span class="p">]]</span>
<span class="n">_JOBID_RE</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">cmd</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">cmd</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="o">*</span><span class="n">texts</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]:</span>
    <span class="n">ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">texts</span><span class="p">:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">:</span> 
            <span class="k">continue</span>
        <span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">_JOBID_RE</span><span class="p">.</span><span class="nf">finditer</span><span class="p">(</span><span class="n">t</span><span class="p">):</span>
            <span class="k">try</span><span class="p">:</span> <span class="n">ids</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)))</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span> <span class="k">pass</span>
    <span class="c1"># 중복 제거(출력 중복 대비)
</span>    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">ids</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="nb">RuntimeError</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="nf">super</span><span class="p">().</span><span class="nf">__init__</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Command failed: </span><span class="si">{</span><span class="n">cmd_str</span><span class="si">}</span><span class="s"> (rc=</span><span class="si">{</span><span class="n">returncode</span><span class="si">}</span><span class="s">)</span><span class="se">\n</span><span class="si">{</span><span class="n">stderr</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cmd_str</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">stderr</span> <span class="o">=</span> <span class="n">cmd_str</span><span class="p">,</span> <span class="n">returncode</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span>

<span class="c1"># ===================== ShellRunner (전역 세마포어 공유) =====================
</span><span class="k">class</span> <span class="nc">ShellRunner</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">create_subprocess_shell + 전역 세마포어로 동시 실행 제한</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="n">base_env</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LC_ALL</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">base_env</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="sh">"</span><span class="s">LANG</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_env</span> <span class="o">=</span> <span class="n">base_env</span> <span class="k">if</span> <span class="n">env</span> <span class="ow">is</span> <span class="bp">None</span> <span class="nf">else </span><span class="p">(</span><span class="n">base_env</span> <span class="o">|</span> <span class="n">env</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cmd_str</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">sem</span> <span class="o">=</span> <span class="nf">_get_global_sem</span><span class="p">()</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">sem</span><span class="p">:</span>
            <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
                <span class="n">cmd_str</span><span class="p">,</span>
                <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
                <span class="n">env</span><span class="o">=</span><span class="n">self</span><span class="p">.</span><span class="n">_env</span><span class="p">,</span>
            <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">ProcessLookupError</span><span class="p">):</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">raise</span>
        <span class="k">return</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf-8</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span>

<span class="c1"># ===================== SharedCache (프로세스 전역 메모리 + 디스크) =====================
</span><span class="k">class</span> <span class="nc">SharedCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    멀티프로세스 공유 JSON 캐시 + 프로세스 전역 메모리:
      - 메모리 TTL: _MEM_CACHE 사용
      - 디스크 TTL: tmp -&gt; fsync(tmp) -&gt; os.replace -&gt; fsync(dir)
      - 신선도: JSON 내부 ts와 파일 mtime 모두로 판정(+2s skew 허용)
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">ttl_sec</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">namespace</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">2.0</span><span class="p">):</span>
        <span class="n">base</span> <span class="o">=</span> <span class="n">cache_dir</span> <span class="ow">or</span> <span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">XDG_CACHE_HOME</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">expanduser</span><span class="p">(</span><span class="sh">"</span><span class="s">~</span><span class="sh">"</span><span class="p">),</span> <span class="sh">"</span><span class="s">.cache</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_root</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">namespace</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_skew</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">skew_eps</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_key_path</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
        <span class="n">safe</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">[^A-Za-z0-9._-]+</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_root</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">safe</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Any</span><span class="p">]:</span>
        <span class="c1"># 1) 프로세스 전역 메모리
</span>        <span class="n">item</span> <span class="o">=</span> <span class="n">_MEM_CACHE</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">item</span><span class="p">:</span>
            <span class="n">ts</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">item</span>
            <span class="k">if</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">ts</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">_ttl</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="c1"># 2) 디스크
</span>        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">stat</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
                <span class="n">payload</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fp</span><span class="p">)</span>
            <span class="n">ts_in</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">))</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">payload</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fresh_by_ts</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">ts_in</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span> <span class="k">if</span> <span class="n">ts_in</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="bp">False</span>
            <span class="n">fresh_by_mtime</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">max</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">st_mtime</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_ttl</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">_skew</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">fresh_by_ts</span> <span class="ow">or</span> <span class="n">fresh_by_mtime</span><span class="p">:</span>
                <span class="n">_MEM_CACHE</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="bp">None</span>

    <span class="k">def</span> <span class="nf">set</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">key</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="n">Any</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">_MEM_CACHE</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">data</span><span class="p">)</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_key_path</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">dir_fd</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">O_RDONLY</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fd</span><span class="p">,</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tempfile</span><span class="p">.</span><span class="nf">mkstemp</span><span class="p">(</span><span class="n">prefix</span><span class="o">=</span><span class="sh">"</span><span class="s">cache_</span><span class="sh">"</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">"</span><span class="s">.json</span><span class="sh">"</span><span class="p">,</span> <span class="nb">dir</span><span class="o">=</span><span class="n">d</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">os</span><span class="p">.</span><span class="nf">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                    <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="sh">"</span><span class="s">data</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">},</span> <span class="n">f</span><span class="p">)</span>
                    <span class="n">f</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="nf">fileno</span><span class="p">())</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>     <span class="c1"># 같은 FS 내 원자적
</span>                <span class="n">os</span><span class="p">.</span><span class="nf">fsync</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>       <span class="c1"># 메타데이터 영속
</span>            <span class="k">finally</span><span class="p">:</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">FileNotFoundError</span><span class="p">):</span>
                    <span class="n">os</span><span class="p">.</span><span class="nf">remove</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">close</span><span class="p">(</span><span class="n">dir_fd</span><span class="p">)</span>

<span class="c1"># ===================== 결과 타입 =====================
</span><span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitItem</span><span class="p">:</span>
    <span class="n">index</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">command</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">returncode</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">stderr</span><span class="p">:</span> <span class="nb">str</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>

<span class="nd">@dataclass</span>
<span class="k">class</span> <span class="nc">SubmitResult</span><span class="p">:</span>
    <span class="n">interrupted</span><span class="p">:</span> <span class="nb">bool</span>
    <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span>
    <span class="n">job_ids</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span>                    <span class="c1"># 평탄화된 전체 Job ID
</span>    <span class="n">job_id_to_command</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span>     <span class="c1"># Job ID -&gt; 원 커맨드
</span>    <span class="n">num_submitted</span><span class="p">:</span> <span class="nb">int</span>
    <span class="n">num_failed</span><span class="p">:</span> <span class="nb">int</span>

<span class="c1"># ===================== LSFClient =====================
</span><span class="k">class</span> <span class="nc">LSFClient</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - run_command_capture_job: 커맨드 그대로 실행, 출력에서 </span><span class="sh">'</span><span class="s">Job &lt;id&gt;</span><span class="sh">'</span><span class="s">(복수 가능) 파싱
    - kill: 순수 bkill (옵션 없이)
    - status: bjobs 전체 스냅샷(전역 캐시 + 전역 single-flight + rate-limit)
              누락 시 1회 강제 갱신 → 그래도 없으면 UNKNOWN 보강
    - submit_many_with_cancel: 인터럽트 시 새 실행 중단, 진행 중은 완주 → 수집 job_id 필요시 bkill
    - is_finished: UNKNOWN 그레이스(기본 15s) 동안은 미완료로 취급
    </span><span class="sh">"""</span>
    <span class="n">TERMINAL</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ZOMBI</span><span class="sh">"</span><span class="p">}</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">bkill</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">bjobs_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">user</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">env</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">unknown_grace_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">15.0</span><span class="p">,</span>
    <span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_paths</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">bkill</span><span class="sh">"</span><span class="p">:</span> <span class="n">bkill</span><span class="p">,</span> <span class="sh">"</span><span class="s">bjobs</span><span class="sh">"</span><span class="p">:</span> <span class="n">bjobs</span><span class="p">}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_runner</span> <span class="o">=</span> <span class="nc">ShellRunner</span><span class="p">(</span><span class="n">env</span><span class="o">=</span><span class="n">env</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_user</span> <span class="o">=</span> <span class="n">user</span> <span class="ow">or</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">LSF_USER</span><span class="sh">"</span><span class="p">)</span> <span class="ow">or</span> <span class="n">getpass</span><span class="p">.</span><span class="nf">getuser</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache</span> <span class="o">=</span> <span class="nc">SharedCache</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="n">ttl_sec</span><span class="o">=</span><span class="n">disk_cache_ttl_sec</span><span class="p">,</span> <span class="n">namespace</span><span class="o">=</span><span class="sh">"</span><span class="s">lsf_async</span><span class="sh">"</span><span class="p">,</span> <span class="n">skew_eps</span><span class="o">=</span><span class="mf">2.0</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_ttl</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_ttl_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">bjobs_min_interval_sec</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_unknown_grace</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">unknown_grace_sec</span><span class="p">)</span>

    <span class="c1"># ---- 일반 커맨드 실행 + Job ID 파싱 ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">run_command_capture_job</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> <span class="n">command</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_to_shell_str</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">job_ids</span> <span class="o">=</span> <span class="nf">_find_job_ids</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">raise_on_error</span> <span class="ow">and</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">cmd</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids</span><span class="p">)</span>

    <span class="c1"># ---- bkill (옵션 없이) ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">kill</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">|</span> <span class="nb">int</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Tuple</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">]:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))]</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="k">else</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="nf">return </span><span class="p">(</span><span class="sh">""</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bkill</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">ids</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">raise_on_error</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span>

    <span class="c1"># ---- bjobs 전체 스냅샷 (전역 캐시 + single-flight + rate-limit) ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="c1"># 전역 rate-limit: user &amp; include_done 조합별로 제한
</span>        <span class="n">rl_key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s">|</span><span class="si">{</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">since</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="n">_LAST_BJOBS_CALL</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">rl_key</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">since</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_bjobs_min_interval</span> <span class="o">-</span> <span class="n">since</span><span class="p">)</span>

        <span class="n">flag</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-a </span><span class="sh">"</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">""</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_paths</span><span class="p">[</span><span class="sh">'</span><span class="s">bjobs</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="s"> -noheader -u </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">flag</span><span class="si">}</span><span class="s">-o </span><span class="sh">'</span><span class="s">jobid stat exit_code queue exec_host</span><span class="sh">'"</span>
        <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">,</span> <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="n">_runner</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">_LAST_BJOBS_CALL</span><span class="p">[</span><span class="n">rl_key</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nc">LSFCommandError</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="p">)</span>

        <span class="n">result</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">stdout</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span><span class="p">,</span> <span class="n">stat</span><span class="p">,</span> <span class="n">exit_code</span><span class="p">,</span> <span class="n">queue</span><span class="p">,</span> <span class="n">exec_host</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">jid_i</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid_i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="n">stat</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span> <span class="k">if</span> <span class="n">exit_code</span> <span class="o">==</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span> <span class="k">else</span> <span class="n">exit_code</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="n">queue</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="n">exec_host</span><span class="p">,</span>
            <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_status_all_cached</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span> <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">key</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">bjobs_all|</span><span class="si">{</span><span class="sh">'</span><span class="s">-a</span><span class="sh">'</span> <span class="k">if</span> <span class="n">include_done</span> <span class="k">else</span> <span class="sh">''</span><span class="si">}</span><span class="s">|user=</span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">_user</span><span class="si">}</span><span class="sh">"</span>

        <span class="c1"># 1) 전역 캐시 먼저
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">cached</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">cached</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">{</span><span class="nf">int</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="p">(</span><span class="n">cached</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">cached</span><span class="p">,</span> <span class="nb">dict</span><span class="p">)</span> <span class="k">else</span> <span class="p">[])}</span>

        <span class="c1"># 2) 전역 single-flight: 같은 key로 동시에 들어오면 1회만 fetch
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">force_refresh</span><span class="p">:</span>
            <span class="n">fut</span> <span class="o">=</span> <span class="n">_INFLIGHT</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">fut</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">fut</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">get_running_loop</span><span class="p">().</span><span class="nf">create_future</span><span class="p">()</span>
                <span class="n">_INFLIGHT</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">fut</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
                    <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
                    <span class="n">fut</span><span class="p">.</span><span class="nf">set_result</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
                    <span class="n">fut</span><span class="p">.</span><span class="nf">set_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
                <span class="k">finally</span><span class="p">:</span>
                    <span class="n">_INFLIGHT</span><span class="p">.</span><span class="nf">pop</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
            <span class="k">return</span> <span class="k">await</span> <span class="n">fut</span>

        <span class="c1"># 강제 갱신 경로
</span>        <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fetch_bjobs_all</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_cache</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="p">{</span><span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">):</span> <span class="n">v</span> <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">data</span><span class="p">.</span><span class="nf">items</span><span class="p">()})</span>
        <span class="k">return</span> <span class="n">data</span>

    <span class="c1"># ---- 안전한 status (누락 자동 보강) ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">status</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="o">*</span><span class="p">,</span> <span class="n">include_done</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span> <span class="n">force_refresh</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="n">Any</span><span class="p">]]:</span>
        <span class="n">all_map</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="n">force_refresh</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">all_map</span>

        <span class="n">req_ids</span> <span class="o">=</span> <span class="p">[</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
        <span class="n">out</span> <span class="o">=</span> <span class="p">{</span><span class="n">i</span><span class="p">:</span> <span class="n">all_map</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">}</span>

        <span class="c1"># 누락 있으면 1회 강제 갱신
</span>        <span class="k">if</span> <span class="nf">any</span><span class="p">(</span><span class="n">v</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
            <span class="n">all_map2</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_status_all_cached</span><span class="p">(</span><span class="n">include_done</span><span class="o">=</span><span class="n">include_done</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">,</span> <span class="n">force_refresh</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">:</span>
                <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">or</span> <span class="n">all_map2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>

        <span class="c1"># 그래도 없으면 UNKNOWN 보강 + 첫 발견 시각 기록
</span>        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">req_ids</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">out</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNKNOWN</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">exit_code</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">queue</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">exec_host</span><span class="sh">"</span><span class="p">:</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">"</span><span class="s">_missing</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}</span>
                <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

    <span class="c1"># ---- 완료 판정 ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">is_finished</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="n">Iterable</span><span class="p">[</span><span class="nb">int</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">ids</span> <span class="o">=</span> <span class="nf">list</span><span class="p">({</span><span class="nf">int</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">ids</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="n">st</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">ids</span><span class="p">,</span> <span class="n">include_done</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ids</span><span class="p">:</span>
            <span class="n">info</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="p">{})</span>
            <span class="n">stat</span> <span class="o">=</span> <span class="p">(</span><span class="n">info</span> <span class="ow">or</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">stat</span> <span class="o">==</span> <span class="sh">"</span><span class="s">UNKNOWN</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">first</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_unknown_seen_at</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">now</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">now</span> <span class="o">-</span> <span class="n">first</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">_unknown_grace</span><span class="p">:</span>
                    <span class="k">return</span> <span class="bp">False</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">continue</span>
            <span class="k">if</span> <span class="n">stat</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">TERMINAL</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">True</span>

    <span class="c1"># ---- 배치 제출 + 취소 ----
</span>    <span class="k">async</span> <span class="k">def</span> <span class="nf">submit_many_with_cancel</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span>
        <span class="n">commands</span><span class="p">:</span> <span class="n">Sequence</span><span class="p">[</span><span class="n">StrOrSeq</span><span class="p">],</span>
        <span class="o">*</span><span class="p">,</span>
        <span class="n">is_interrupted</span><span class="p">:</span> <span class="nb">callable</span><span class="p">,</span>            <span class="c1"># () -&gt; bool
</span>        <span class="n">poll_interval_sec</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.2</span><span class="p">,</span>
        <span class="n">max_in_flight</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">8</span><span class="p">,</span>
        <span class="n">cmd_timeout</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">float</span><span class="p">]</span> <span class="o">=</span> <span class="mf">60.0</span><span class="p">,</span>
        <span class="n">cmd_raise_on_error</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
        <span class="n">cleanup_on_interrupt</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>   <span class="c1"># True면 인터럽트 시 수집된 job_id 즉시 bkill
</span>    <span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitResult</span><span class="p">:</span>
        <span class="n">items</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="n">SubmitItem</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_ids_all</span><span class="p">:</span> <span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="n">job_id_to_cmd</span><span class="p">:</span> <span class="n">Dict</span><span class="p">[</span><span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">failures</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">in_flight</span><span class="p">:</span> <span class="nb">set</span><span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">]</span> <span class="o">=</span> <span class="nf">set</span><span class="p">()</span>

        <span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span> <span class="n">cmd</span><span class="p">:</span> <span class="n">StrOrSeq</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">SubmitItem</span><span class="p">:</span>
            <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">run_command_capture_job</span><span class="p">(</span>
                <span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">cmd_timeout</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="n">cmd_raise_on_error</span>
            <span class="p">)</span>
            <span class="k">return</span> <span class="nc">SubmitItem</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="n">idx</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">command</span><span class="p">,</span> <span class="n">returncode</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span>
                              <span class="n">stdout</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">stderr</span><span class="p">,</span> <span class="n">job_ids</span><span class="o">=</span><span class="n">res</span><span class="p">.</span><span class="n">job_ids</span><span class="p">)</span>

        <span class="n">idx</span><span class="p">,</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">or</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="k">while</span> <span class="n">idx</span> <span class="o">&lt;</span> <span class="n">total</span> <span class="ow">and</span> <span class="nf">len</span><span class="p">(</span><span class="n">in_flight</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">max_in_flight</span> <span class="ow">and</span> <span class="ow">not</span> <span class="nf">is_interrupted</span><span class="p">():</span>
                    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_one</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">commands</span><span class="p">[</span><span class="n">idx</span><span class="p">]))</span>
                    <span class="n">in_flight</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                    <span class="n">idx</span> <span class="o">+=</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                    <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">poll_interval_sec</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>
                    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                        <span class="n">in_flight</span><span class="p">.</span><span class="nf">discard</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                            <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                                <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                            <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                                <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">poll_interval_sec</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">in_flight</span><span class="p">:</span>
                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span><span class="n">in_flight</span><span class="p">,</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">ALL_COMPLETED</span><span class="p">)</span>
                <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="k">try</span><span class="p">:</span>
                        <span class="n">item</span><span class="p">:</span> <span class="n">SubmitItem</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
                        <span class="n">items</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
                        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">job_ids_all</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                            <span class="n">job_id_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">item</span><span class="p">.</span><span class="n">command</span>
                        <span class="k">if</span> <span class="n">item</span><span class="p">.</span><span class="n">returncode</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">item</span><span class="p">.</span><span class="n">job_ids</span><span class="p">:</span>
                            <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>
                    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                        <span class="n">failures</span> <span class="o">+=</span> <span class="mi">1</span>

        <span class="n">interrupted</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="nf">is_interrupted</span><span class="p">())</span>
        <span class="k">if</span> <span class="n">interrupted</span> <span class="ow">and</span> <span class="n">cleanup_on_interrupt</span> <span class="ow">and</span> <span class="n">job_ids_all</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">,</span> <span class="n">raise_on_error</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

        <span class="n">job_ids_all</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="nf">fromkeys</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">))</span>
        <span class="k">return</span> <span class="nc">SubmitResult</span><span class="p">(</span>
            <span class="n">interrupted</span><span class="o">=</span><span class="n">interrupted</span><span class="p">,</span>
            <span class="n">items</span><span class="o">=</span><span class="n">items</span><span class="p">,</span>
            <span class="n">job_ids</span><span class="o">=</span><span class="n">job_ids_all</span><span class="p">,</span>
            <span class="n">job_id_to_command</span><span class="o">=</span><span class="n">job_id_to_cmd</span><span class="p">,</span>
            <span class="n">num_submitted</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">job_ids_all</span><span class="p">),</span>
            <span class="n">num_failed</span><span class="o">=</span><span class="n">failures</span><span class="p">,</span>
        <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="사용-예시-질문-준-패턴-그대로">사용 예시 (질문 준 패턴 그대로)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">lsf_simple</span> <span class="kn">import</span> <span class="n">LSFClient</span><span class="p">,</span> <span class="n">configure_global_cli_concurrency</span>

<span class="c1"># 1) 전역 동시 실행 상한 (클라이언트 생성 전 1회)
</span><span class="nf">configure_global_cli_concurrency</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Token</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span> <span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">(),</span> <span class="n">delay</span>
    <span class="k">def</span> <span class="nf">is_interrupted</span><span class="p">(</span><span class="n">self</span><span class="p">):</span> <span class="nf">return </span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">self</span><span class="p">.</span><span class="n">t0</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">delay</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">LSFClient</span><span class="p">(</span>
        <span class="n">bjobs_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">bjobs_min_interval_sec</span><span class="o">=</span><span class="mf">1.2</span><span class="p">,</span>
        <span class="n">disk_cache_ttl_sec</span><span class="o">=</span><span class="mf">5.0</span><span class="p">,</span>
        <span class="n">cache_dir</span><span class="o">=</span><span class="sh">"</span><span class="s">/shared/cache</span><span class="sh">"</span><span class="p">,</span>     <span class="c1"># 여러 머신이 공유하는 FS면 더 좋아요
</span>        <span class="n">unknown_grace_sec</span><span class="o">=</span><span class="mf">15.0</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">is_interrupted</span> <span class="o">=</span> <span class="nc">Token</span><span class="p">(</span><span class="n">delay</span><span class="o">=</span><span class="mi">9999</span><span class="p">).</span><span class="n">is_interrupted</span>  <span class="c1"># 실제론 외부 신호로 대체
</span>
    <span class="n">cmds</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">job_sub a.txt</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mkdir package</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">]</span>

    <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">submit_many_with_cancel</span><span class="p">(</span><span class="n">cmds</span><span class="p">,</span> <span class="n">is_interrupted</span><span class="o">=</span><span class="n">is_interrupted</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">data</span><span class="p">.</span><span class="n">interrupted</span> <span class="ow">or</span> <span class="nf">is_interrupted</span><span class="p">():</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">중지되었습니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="n">job_ids</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">job_ids</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">job_ids</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">제출된 LSF 잡이 없습니다.</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span>

    <span class="k">while</span> <span class="ow">not</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">is_finished</span><span class="p">(</span><span class="n">job_ids</span><span class="p">):</span>
        <span class="n">status</span> <span class="o">=</span> <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">status</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">job_id</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">job_command</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="n">job_id_to_command</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">&lt;unknown&gt;</span><span class="sh">"</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="n">job_id</span><span class="p">,</span> <span class="n">status</span><span class="p">[</span><span class="n">job_id</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">stat</span><span class="sh">"</span><span class="p">),</span> <span class="n">job_command</span><span class="p">)</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">is_interrupted</span><span class="p">():</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">kill</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>  <span class="c1"># 순수 bkill
</span>            <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">중지하였습니다.</span><span class="sh">"</span><span class="p">)</span>
            <span class="k">return</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">모두 완료되었습니다.</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h3 id="왜-이-버전이-딱-좋은지-step-by-step">왜 이 버전이 딱 좋은지 (step-by-step)</h3>

<ol>
  <li>
    <p><strong>단일 이벤트 루프 가정</strong> 하에 전역 공유 → 복잡도 최소, 의도 명확.</p>
  </li>
  <li>
    <p><strong>전역 세마포어/캐시/single-flight/rate-limit</strong> 로 <code class="language-plaintext highlighter-rouge">LSFClient</code>가 여러 개여도 호출량·부하가 늘지 않음.</p>
  </li>
  <li>
    <p><strong>에러 최소화</strong> : 스냅샷 누락시 자동 갱신 &amp; <code class="language-plaintext highlighter-rouge">UNKNOWN</code> 보강, 루프가 멈추지 않도록 <code class="language-plaintext highlighter-rouge">is_finished</code> 그레이스 처리.</p>
  </li>
  <li>
    <p><strong>현실적 성능</strong> : <code class="language-plaintext highlighter-rouge">bjobs</code>는 항상 전체 스냅샷 1회 → 캐시로 재사용, I/O/부하 절감.</p>
  </li>
</ol>

<p>필요한 거 더 줄이거나(예: 클래스 1개로 합치기), 로깅/메트릭 훅만 얹고 싶으면 말해줘.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Asyncio 사용법 설명</title><link href="https://hvppyarchive.github.io/python/python-asyncio-basic/" rel="alternate" type="text/html" title="Asyncio 사용법 설명" /><published>2025-10-13T14:06:20+09:00</published><updated>2025-10-13T14:06:20+09:00</updated><id>https://hvppyarchive.github.io/python/python-asyncio-basic</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-asyncio-basic/"><![CDATA[<p class="chat--user">

python asyncio를 이용한 프로그래밍 하는 법 알려줘. 파이썬은 많이 써봤지만 이건 한 번 도 안 써본 사람 기준으로 쉽게 설명해줘.

</p>

<p>좋아요! “asyncio”는 <strong>단일 스레드에서 I/O를 동시에 처리</strong> 하게 해주는 파이썬 표준 라이브러리예요. 처음 쓰는 분 기준으로, 개념→예제→자주 쓰는 패턴 순서로 아주 천천히 갈게요.</p>

<hr />

<h1 id="1-핵심-개념-3가지만-먼저">1) 핵심 개념 3가지만 먼저</h1>

<ol>
  <li>
    <p><strong>코루틴(coroutine)</strong> : <code class="language-plaintext highlighter-rouge">async def</code>로 만든 함수. 내부에서 <code class="language-plaintext highlighter-rouge">await</code>로 “잠깐 쉬었다가 다시”를 할 수 있어요.</p>
  </li>
  <li>
    <p><strong>await</strong> : “이 작업 끝날 때까지 다른 일 좀 하다가 올게!”라는 뜻. 주로 네트워크/디스크 I/O처럼 <strong>기다리는 시간</strong> 이 있는 일에 사용.</p>
  </li>
  <li>
    <p><strong>이벤트 루프(event loop)</strong> : 코루틴들을 돌려주는 엔진. 보통 <code class="language-plaintext highlighter-rouge">asyncio.run(main())</code>으로 시작해요.</p>
  </li>
</ol>

<blockquote>
  <p>기억법: “<code class="language-plaintext highlighter-rouge">async def</code>로 코루틴 만들고, 느린 곳에서 <code class="language-plaintext highlighter-rouge">await</code>, 전체는 <code class="language-plaintext highlighter-rouge">asyncio.run()</code>으로 시작!”</p>
</blockquote>

<hr />

<h1 id="2-첫-번째-예제-순차-vs-동시">2) 첫 번째 예제: 순차 vs. 동시</h1>

<p>아래는 네트워크 대기를 흉내 내려고 <code class="language-plaintext highlighter-rouge">asyncio.sleep()</code>을 사용해요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sequential.py (순차 실행)
</span><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">sec</span><span class="p">):</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">sec</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> 완료</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">perf_counter</span><span class="p">()</span>
    <span class="k">await</span> <span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>   <span class="c1"># 2초
</span>    <span class="k">await</span> <span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>   <span class="c1"># 또 2초 (총 4초)
</span>    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">걸린 시간: </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">perf_counter</span><span class="p">()</span> <span class="o">-</span> <span class="n">t0</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># concurrent.py (동시 실행)
</span><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">sec</span><span class="p">):</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">sec</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> 완료</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">t0</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">perf_counter</span><span class="p">()</span>
    <span class="c1"># 동시 실행 핵심: gather 또는 create_task
</span>    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span>
        <span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
        <span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
    <span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">걸린 시간: </span><span class="si">{</span><span class="n">time</span><span class="p">.</span><span class="nf">perf_counter</span><span class="p">()</span> <span class="o">-</span> <span class="n">t0</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">s</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<ul>
  <li>
    <p>순차: 약 <strong>4초</strong></p>
  </li>
  <li>
    <p>동시: 약 <strong>2초</strong><br />
→ <strong>I/O 대기 시간을 겹쳐서</strong> 줄이는 게 asyncio의 본질이에요.</p>
  </li>
</ul>

<hr />

<h1 id="3-어떻게-동시로-돌리나-gather--create_task">3) 어떻게 동시로 돌리나? (gather / create_task)</h1>

<h3 id="asynciogather"><code class="language-plaintext highlighter-rouge">asyncio.gather(...)</code></h3>

<ul>
  <li>
    <p>여러 코루틴을 한 번에 돌리고 <strong>모두 끝날 때까지</strong> 기다려요.</p>
  </li>
  <li>
    <p>실패하면 <code class="language-plaintext highlighter-rouge">gather</code>가 예외를 올려줘서 한 번에 처리하기 편해요.</p>
  </li>
</ul>

<h3 id="asynciocreate_taskcoro"><code class="language-plaintext highlighter-rouge">asyncio.create_task(coro)</code></h3>

<ul>
  <li>
    <p>코루틴을 <strong>백그라운드 태스크</strong> 로 등록하고 <strong>즉시 제어권을 반환</strong> 해요.</p>
  </li>
  <li>
    <p>나중에 <code class="language-plaintext highlighter-rouge">await task</code>로 결과를 받거나, 필요하면 <code class="language-plaintext highlighter-rouge">task.cancel()</code>로 취소할 수 있어요.</p>
  </li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">say</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">delay</span><span class="p">):</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">delay</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">msg</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">t1</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">say</span><span class="p">(</span><span class="sh">"</span><span class="s">hello</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
    <span class="n">t2</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">say</span><span class="p">(</span><span class="sh">"</span><span class="s">world</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
    <span class="c1"># 다른 일 하다가...
</span>    <span class="n">res1</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t1</span>
    <span class="n">res2</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t2</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">res1</span><span class="p">,</span> <span class="n">res2</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="4-타임아웃과-취소-실무에서-진짜-자주-씀">4) 타임아웃과 취소 (실무에서 진짜 자주 씀)</h1>

<p>네트워크는 항상 느려질 수 있으니, <strong>타임아웃</strong> 은 기본 장착!</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">slow</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
        <span class="k">return</span> <span class="mi">42</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">작업이 취소됨</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">raise</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 1초 넘으면 TimeoutError
</span>        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="nf">slow</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">타임아웃!</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># 임의 취소도 가능
</span>    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">slow</span><span class="p">())</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">task</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">직접 취소 완료</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="5-실제-네트워크-예제-아주-간단한-에코-서버클라이언트">5) 실제 네트워크 예제: 아주 간단한 에코 서버/클라이언트</h1>

<h2 id="1-서버-asynciostart_server">(1) 서버: <code class="language-plaintext highlighter-rouge">asyncio.start_server</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># echo_server.py
</span><span class="kn">import</span> <span class="n">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="n">reader</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">StreamReader</span><span class="p">,</span> <span class="n">writer</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">StreamWriter</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">reader</span><span class="p">.</span><span class="nf">readline</span><span class="p">()</span>           <span class="c1"># 클라이언트 한 줄 읽기
</span>    <span class="n">msg</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">decode</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span>
    <span class="n">addr</span> <span class="o">=</span> <span class="n">writer</span><span class="p">.</span><span class="nf">get_extra_info</span><span class="p">(</span><span class="sh">'</span><span class="s">peername</span><span class="sh">'</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[서버] </span><span class="si">{</span><span class="n">addr</span><span class="si">}</span><span class="s"> -&gt; </span><span class="si">{</span><span class="n">msg</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">writer</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Echo: </span><span class="si">{</span><span class="n">msg</span><span class="si">}</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">encode</span><span class="p">())</span>  <span class="c1"># 다시 돌려주기
</span>    <span class="k">await</span> <span class="n">writer</span><span class="p">.</span><span class="nf">drain</span><span class="p">()</span>                     <span class="c1"># 송신 버퍼 비우기
</span>    <span class="n">writer</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="k">await</span> <span class="n">writer</span><span class="p">.</span><span class="nf">wait_closed</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">server</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">start_server</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="sh">"</span><span class="s">127.0.0.1</span><span class="sh">"</span><span class="p">,</span> <span class="mi">8888</span><span class="p">)</span>
    <span class="n">addrs</span> <span class="o">=</span> <span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">sock</span><span class="p">.</span><span class="nf">getsockname</span><span class="p">())</span> <span class="k">for</span> <span class="n">sock</span> <span class="ow">in</span> <span class="n">server</span><span class="p">.</span><span class="n">sockets</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[서버] </span><span class="si">{</span><span class="n">addrs</span><span class="si">}</span><span class="s">에서 대기중</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">server</span><span class="p">:</span>                       <span class="c1"># 안전한 종료를 위해 context 사용
</span>        <span class="k">await</span> <span class="n">server</span><span class="p">.</span><span class="nf">serve_forever</span><span class="p">()</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="2-클라이언트-asyncioopen_connection">(2) 클라이언트: <code class="language-plaintext highlighter-rouge">asyncio.open_connection</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># echo_client.py
</span><span class="kn">import</span> <span class="n">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="n">msg</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">reader</span><span class="p">,</span> <span class="n">writer</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">open_connection</span><span class="p">(</span><span class="sh">"</span><span class="s">127.0.0.1</span><span class="sh">"</span><span class="p">,</span> <span class="mi">8888</span><span class="p">)</span>
    <span class="n">writer</span><span class="p">.</span><span class="nf">write</span><span class="p">((</span><span class="n">msg</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">).</span><span class="nf">encode</span><span class="p">())</span>
    <span class="k">await</span> <span class="n">writer</span><span class="p">.</span><span class="nf">drain</span><span class="p">()</span>
    <span class="n">data</span> <span class="o">=</span> <span class="k">await</span> <span class="n">reader</span><span class="p">.</span><span class="nf">readline</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">[클라이언트] 응답: </span><span class="si">{</span><span class="n">data</span><span class="p">.</span><span class="nf">decode</span><span class="p">().</span><span class="nf">strip</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">writer</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="k">await</span> <span class="n">writer</span><span class="p">.</span><span class="nf">wait_closed</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># 여러 메시지를 동시 전송
</span>    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="nf">send</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">hello </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)))</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<ul>
  <li>
    <p>터미널 1에서 <code class="language-plaintext highlighter-rouge">python echo_server.py</code> 실행</p>
  </li>
  <li>
    <p>터미널 2에서 <code class="language-plaintext highlighter-rouge">python echo_client.py</code> 실행<br />
→ 서버와 클라이언트가 <strong>비동기 스트림</strong> 으로 주고받는 걸 볼 수 있어요.</p>
  </li>
</ul>

<hr />

<h1 id="6-동기블로킹-코드와-섞을-때">6) 동기(블로킹) 코드와 섞을 때</h1>

<p><code class="language-plaintext highlighter-rouge">time.sleep()</code>처럼 루프를 <strong>막아버리는</strong> 코드는 <code class="language-plaintext highlighter-rouge">await asyncio.to_thread(...)</code>로 <strong>스레드에 밀어 넣기</strong> :</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>

<span class="k">def</span> <span class="nf">blocking_io</span><span class="p">():</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>         <span class="c1"># 절대 이벤트 루프에서 직접 호출 X
</span>    <span class="k">return</span> <span class="sh">"</span><span class="s">완료</span><span class="sh">"</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">to_thread</span><span class="p">(</span><span class="n">blocking_io</span><span class="p">)</span>  <span class="c1"># 별도 스레드에서 실행
</span>    <span class="nf">print</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<blockquote>
  <p>CPU 바운드(예: 대규모 계산)는 <strong>멀티프로세싱</strong>(또는 <code class="language-plaintext highlighter-rouge">ProcessPoolExecutor</code>)을 고려하세요. asyncio는 <strong>I/O 동시성</strong> 이 주특기입니다.</p>
</blockquote>

<hr />

<h1 id="7-선택-파이썬-311의-taskgroup-로-구조화된-동시성">7) (선택) 파이썬 3.11의 <strong>TaskGroup</strong> 로 구조화된 동시성</h1>

<p>여러 태스크를 “그룹”으로 안전하게 관리하고, 하나가 실패하면 나머지를 알아서 정리해 줘요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">job</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">job </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">n</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">results</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">TaskGroup</span><span class="p">()</span> <span class="k">as</span> <span class="n">tg</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>
            <span class="n">tg</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">job</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    <span class="c1"># TaskGroup을 나오면 전부 끝난 상태
</span>    <span class="c1"># (반환값을 모으려면 큐/리스트/콜백으로 저장하거나, 별도 구조 사용)
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">모든 작업 완료</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h1 id="8-자주-하는-실수-체크리스트">8) 자주 하는 실수 체크리스트</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">asyncio.run()</code>은 <strong>프로세스 당 한 번의 진입점</strong> 으로 사용 (중첩 금지).</p>
  </li>
  <li>
    <p><strong>반드시<code class="language-plaintext highlighter-rouge">await</code> 가능한 것만</strong> await 하기 (코루틴/Task/Future).</p>
  </li>
  <li>
    <p>이벤트 루프 안에서 <code class="language-plaintext highlighter-rouge">time.sleep()</code>/블로킹 I/O 사용 금지 → <code class="language-plaintext highlighter-rouge">await asyncio.sleep()</code> / <code class="language-plaintext highlighter-rouge">await asyncio.to_thread(...)</code>.</p>
  </li>
  <li>
    <p>네트워크/외부 API는 <strong>타임아웃</strong> (<code class="language-plaintext highlighter-rouge">asyncio.wait_for</code>) 걸기.</p>
  </li>
  <li>
    <p>오래 가는 백그라운드 태스크는 <strong>취소 처리</strong>(try/except <code class="language-plaintext highlighter-rouge">CancelledError</code>)를 넣어 안정적으로 종료.</p>
  </li>
</ul>

<hr />

<h1 id="9-학습-루트권장-순서">9) 학습 루트(권장 순서)</h1>

<ol>
  <li>
    <p>위의 <strong>순차 vs 동시</strong> 예제를 실행해 체감</p>
  </li>
  <li>
    <p><strong>gather / create_task</strong> 패턴 익히기</p>
  </li>
  <li>
    <p><strong>타임아웃/취소</strong> 넣어보기</p>
  </li>
  <li>
    <p><strong>에코 서버/클라이언트</strong> 로 스트림 I/O 맛보기</p>
  </li>
  <li>
    <p>기존 코드의 블로킹 부분을 <strong>to_thread</strong> 로 분리해 보기</p>
  </li>
  <li>
    <p>(3.11+) <strong>TaskGroup</strong> 으로 코드 구조 정리</p>
  </li>
</ol>

<hr />

<h1 id="10-연습-문제-직접-해보기">10) 연습 문제 (직접 해보기)</h1>

<ol>
  <li>
    <p>URL 리스트(예: 5개)에 대해 “요청→1초 대기→결과 출력”을 <strong>가짜로</strong> 흉내 내는 <code class="language-plaintext highlighter-rouge">fetch(url)</code> 코루틴을 만들고,</p>

    <ul>
      <li>(a) 순차 실행, (b) <code class="language-plaintext highlighter-rouge">gather</code> 동시 실행의 시간을 비교해 보세요.</li>
    </ul>
  </li>
  <li>
    <p>위 (1)에 <strong>타임아웃 0.5초</strong> 를 걸고, 타임아웃 난 URL만 따로 모아 출력해 보세요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">time.sleep(1)</code>을 실수로 넣었을 때 프로그램이 느려지는 걸 관찰하고, <code class="language-plaintext highlighter-rouge">await asyncio.sleep(1)</code>로 바꿔보세요.</p>
  </li>
</ol>

<hr />

<p>필요하면 위 예제 중 원하는 걸 더 확장(예: HTTP 클라이언트는 <code class="language-plaintext highlighter-rouge">aiohttp</code> 사용)해서 보여드릴게요. 어떤 작업을 비동기로 바꾸고 싶은지 알려주시면, <strong>당장 적용 가능한 구조</strong> 로 같이 리팩터링해 드릴게요.</p>

<p class="chat--user">

create_task랑 그냥 gather 하는 것의 차이

</p>

<p>좋은 질문! 한 줄 요약부터:</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">create_task</code></strong> : “코루틴을 <strong>지금 바로</strong> 백그라운드로 돌리게 하고, <strong>핸들(Task)</strong> 을 돌려줘. 나중에 개별적으로 <code class="language-plaintext highlighter-rouge">await</code>/취소/타임아웃/이름붙이기 등 <strong>세밀 제어</strong> 를 할 때 써.”</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">gather</code></strong> : “여러 작업을 <strong>묶어서 동시에 시작</strong> 하고, <strong>전부 끝날 때까지</strong> 기다린 뒤 <strong>결과 리스트</strong> 를 돌려줘. <strong>한 번에 기다릴 때</strong> 써.”</p>
  </li>
</ul>

<p>아래를 단계별로 짚어볼게요.</p>

<hr />

<h2 id="1-무엇을-반환하나">1) 무엇을 반환하나?</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">asyncio.create_task(coro)</code> → <strong>Task 객체</strong> 를 반환.<br />
이 Task는 곧바로 스케줄링되고 “백그라운드”에서 돌아요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">await asyncio.gather(*aws)</code> → <strong>결과 리스트</strong> 를 반환.<br />
입력 순서 그대로 <code class="language-plaintext highlighter-rouge">[res1, res2, ...]</code>가 와요(완료 순서 아님).</p>
  </li>
</ul>

<hr />

<h2 id="2-언제-시작되나">2) 언제 시작되나?</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">create_task</code>는 <strong>호출 즉시</strong> 스케줄링 시작. (곧 실행됨)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">gather</code>도 내부적으로 코루틴을 Task로 만들어 <strong>즉시</strong> 시작하지만,<br />
<strong>우리는<code class="language-plaintext highlighter-rouge">gather</code> 자체를 <code class="language-plaintext highlighter-rouge">await</code></strong> 하기에 “모두 끝날 때까지 기다리는” 패턴이 자연스러워요.</p>
  </li>
</ul>

<hr />

<h2 id="3-예외취소-동작-차이">3) 예외/취소 동작 차이</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">gather(..., return_exceptions=False)</code>(기본):</p>

    <ul>
      <li>
        <p><strong>하나라도 실패</strong> 하면 <code class="language-plaintext highlighter-rouge">gather</code>가 <strong>예외를 올리고</strong> , 나머지 작업은 <strong>자동 취소</strong> 해요.</p>
      </li>
      <li>
        <p>즉, <strong>“올-오어-낫싱”</strong> 느낌.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">gather(..., return_exceptions=True)</code>:</p>

    <ul>
      <li>예외도 결과 리스트에 <strong>값처럼</strong> 담아줘요. 개별 후처리 가능.</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">create_task</code>:</p>

    <ul>
      <li>
        <p>각 Task는 <strong>독립적</strong>. 어떤 Task가 실패해도 다른 Task는 계속 돔.</p>
      </li>
      <li>
        <p>다만 <strong>결국<code class="language-plaintext highlighter-rouge">await task</code>를 해야 예외가 전파</strong>돼요. 안 받으면 로그에<br />
“Task exception was never retrieved” 경고가 나올 수 있어요.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>취소</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">gather</code>에 걸린 걸 <strong>한 번에</strong> 취소 → <strong>모든 자식 Task 자동 취소</strong>.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">create_task</code>로 만든 건 <strong>각각</strong> <code class="language-plaintext highlighter-rouge">task.cancel()</code> 호출해서 관리.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="4-언제-무엇을-쓰나-의사결정-표">4) 언제 무엇을 쓰나? (의사결정 표)</h2>

<table>
  <thead>
    <tr>
      <th>상황</th>
      <th>추천</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>동시에 여러 일을 시키고, <strong>모두 끝난 뒤 결과</strong> 가 필요</td>
      <td><code class="language-plaintext highlighter-rouge">await asyncio.gather(a(), b(), c())</code></td>
    </tr>
    <tr>
      <td>일을 <strong>지금 시작</strong> 해 놓고, 중간에 <strong>다른 일도</strong> 하다가 <strong>나중에</strong> 합류</td>
      <td><code class="language-plaintext highlighter-rouge">t1 = create_task(a()); …; res = await t1</code></td>
    </tr>
    <tr>
      <td>각 작업을 <strong>개별적으로</strong> 취소/타임아웃/이름으로 추적</td>
      <td><code class="language-plaintext highlighter-rouge">create_task</code> (필요시 나중에 <code class="language-plaintext highlighter-rouge">gather(*tasks)</code>)</td>
    </tr>
    <tr>
      <td>하나 실패 시 <strong>전체를 취소</strong> 하고 싶다 (기본 동작 선호)</td>
      <td><code class="language-plaintext highlighter-rouge">gather</code></td>
    </tr>
    <tr>
      <td>실패해도 다른 작업은 <strong>계속</strong> 가게 하고 싶다</td>
      <td><code class="language-plaintext highlighter-rouge">create_task</code> + 개별 <code class="language-plaintext highlighter-rouge">await</code>/예외처리, 또는 <code class="language-plaintext highlighter-rouge">gather(..., return_exceptions=True)</code></td>
    </tr>
    <tr>
      <td><strong>완료되는 순서대로</strong> 결과를 받고 싶다(스트리밍 처리)</td>
      <td><code class="language-plaintext highlighter-rouge">asyncio.as_completed(...)</code> + (대개 <code class="language-plaintext highlighter-rouge">create_task</code>와 함께)</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="5-코드로-보는-차이">5) 코드로 보는 차이</h2>

<h3 id="a-gather-한-번에-시작--전부-끝날-때까지-기다림">A) <code class="language-plaintext highlighter-rouge">gather</code>: 한 번에 시작 → 전부 끝날 때까지 기다림</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">n</span><span class="o">*</span><span class="n">n</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">results</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="nf">work</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nf">work</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span> <span class="nf">work</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">results</span><span class="p">)</span>  <span class="c1"># [1, 4, 9]  (입력 순서대로)
</span>
<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="b-create_task-지금-시작--중간에-다른-일--나중에-개별묶음-합류">B) <code class="language-plaintext highlighter-rouge">create_task</code>: 지금 시작 → 중간에 다른 일 → 나중에 개별/묶음 합류</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">work</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">t</span><span class="p">):</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">t</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">name</span><span class="si">}</span><span class="s"> done</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">name</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">t1</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">t2</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>

    <span class="c1"># 다른 일도 병행
</span>    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">doing something else...</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># 개별로 합류 가능
</span>    <span class="n">r1</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t1</span>
    <span class="c1"># 남은 것들만 묶어서 기다리기도 가능
</span>    <span class="n">r2</span><span class="p">,</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">r1</span><span class="p">,</span> <span class="n">r2</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<hr />

<h2 id="6-실무-팁">6) 실무 팁</h2>

<ul>
  <li>
    <p><strong>둘을 섞어 쓰는 패턴</strong> 이 흔해요: 먼저 <code class="language-plaintext highlighter-rouge">create_task</code>로 “미리” 태워두고,<br />
나중에 <code class="language-plaintext highlighter-rouge">await asyncio.gather(*tasks, return_exceptions=True)</code>로 <strong>한 번에 회수</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">create_task</code>로 만든 <strong>장수(長壽) 백그라운드 태스크</strong>(예: 소비자 루프, 하트비트)는<br />
종료 시 <code class="language-plaintext highlighter-rouge">task.cancel()</code> + <code class="language-plaintext highlighter-rouge">try/except CancelledError</code>로 <strong>정리 코드</strong> 를 꼭 넣기.</p>
  </li>
  <li>
    <p><strong>결과가 필요 없더라도</strong> Task 참조를 잡아두고 예외/취소를 처리하세요.<br />
완전한 “fire-and-forget”은 권장되지 않아요(누수·미처리 예외 위험).</p>
  </li>
  <li>
    <p>(3.11+) <strong><code class="language-plaintext highlighter-rouge">asyncio.TaskGroup</code></strong>은 “<code class="language-plaintext highlighter-rouge">gather</code> + 구조화된 취소/정리” 느낌의 <strong>현대적 대안</strong>.<br />
그룹 스코프를 벗어날 때 <strong>모두 정리</strong> 돼서 복잡한 수명 관리가 쉬워요.</p>
  </li>
</ul>

<hr />

<h2 id="7-한-문장으로-다시-요약">7) 한 문장으로 다시 요약</h2>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">gather</code> = 결과를 한 번에 모을 때.</strong></p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">create_task</code> = 지금 태워서 나중에/개별로 관리할 때.</strong></p>
  </li>
</ul>

<p>원하는 시나리오가 있으면(예: “N개의 API 호출을 순차·동시·시간제한·부분실패 허용으로 처리”) 바로 그 패턴으로 코드를 짜서 보여줄게요.</p>

<p class="chat--user">

async def main(): t1 = asyncio.create_task(work("A", 2)) t2 = asyncio.create_task(work("B", 3)) # 다른 일도 병행 await asyncio.sleep(1) print("doing something else…") # 개별로 합류 가능 r1 = await t1 # 남은 것들만 묶어서 기다리기도 가능 r2, = await asyncio.gather(t2) print(r1, r2) asyncio.run(main()) async def main(): # 다른 일도 병행 await asyncio.sleep(1) print("doing something else…") # 개별로 합류 가능 r1 = await work("A", 2) # 남은 것들만 묶어서 기다리기도 가능 r2, = await asyncio.gather(work("B", 3)) print(r1, r2) asyncio.run(main()) 이 두 코드는 같은거 아니냐는 질문이야.

</p>

<p>아니요, <strong>같지 않습니다.</strong><br />
핵심 차이는 “<strong>언제가 작업을 시작하느냐</strong>(스케줄링 시점)”에 있어요.</p>

<p>아래처럼 <strong>타임라인으로</strong> 비교해 볼게요. (A=2초, B=3초)</p>

<hr />

<h1 id="1-코드-1-create_task로-즉시-시작">1) 코드 1: <code class="language-plaintext highlighter-rouge">create_task</code>로 즉시 시작</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t1</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>  <span class="c1"># A 바로 시작
</span><span class="n">t2</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1"># B 바로 시작
</span><span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>                   <span class="c1"># 그 사이 A,B는 진행 중
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">doing something else...</span><span class="sh">"</span><span class="p">)</span>
<span class="n">r1</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t1</span>                            <span class="c1"># t=1에서 A는 1초 남음 → t=2에 완료
</span><span class="n">r2</span><span class="p">,</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="n">t2</span><span class="p">)</span>           <span class="c1"># 그때 B는 1초 남음 → t=3에 완료
</span></code></pre></div></div>

<p><strong>타임라인</strong></p>

<ul>
  <li>
    <p>t=0~1: A와 B 둘 다 진행 중, main은 1초 잠깐 쉼</p>
  </li>
  <li>
    <p>t=1~2: <code class="language-plaintext highlighter-rouge">await t1</code> (A 마무리), B는 계속 진행</p>
  </li>
  <li>
    <p>t=2~3: <code class="language-plaintext highlighter-rouge">await t2</code> (B 마무리)<br />
→ <strong>총 ~3초</strong></p>
  </li>
</ul>

<hr />

<h1 id="2-코드-2-await-work로-순차-시작">2) 코드 2: <code class="language-plaintext highlighter-rouge">await work(...)</code>로 순차 시작</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>                   <span class="c1"># 이때는 아무 작업도 시작 안 됨
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">doing something else...</span><span class="sh">"</span><span class="p">)</span>
<span class="n">r1</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>                  <span class="c1"># 이제서야 A 시작 → t=1~3
</span><span class="n">r2</span><span class="p">,</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span> <span class="c1"># 그 다음에야 B 시작 → t=3~6
</span></code></pre></div></div>

<p><strong>타임라인</strong></p>

<ul>
  <li>
    <p>t=0~1: main만 쉼(아직 A,B 시작 X)</p>
  </li>
  <li>
    <p>t=1~3: A 실행</p>
  </li>
  <li>
    <p>t=3~6: B 실행<br />
→ <strong>총 ~6초</strong></p>
  </li>
</ul>

<hr />

<h1 id="왜-이런-차이가-나나-step-by-step-요점">왜 이런 차이가 나나? (step-by-step 요점)</h1>

<ul>
  <li>
    <p><strong>코루틴은 생성만 하면 “시작”이 아닙니다.</strong><br />
<code class="language-plaintext highlighter-rouge">work("B", 3)</code>는 <em>코루틴 객체</em> 를 만들 뿐, <strong>스케줄링(실행 예약)</strong> 은 <code class="language-plaintext highlighter-rouge">create_task(...)</code>나 <code class="language-plaintext highlighter-rouge">gather(...)</code> 같은 함수가 할 때 이뤄져요.</p>
  </li>
  <li>
    <p><strong>코드 1</strong> 은 <code class="language-plaintext highlighter-rouge">create_task</code>가 코루틴을 <strong>즉시 스케줄링</strong> 해서 A,B가 <strong>동시에</strong> 달립니다.</p>
  </li>
  <li>
    <p><strong>코드 2</strong> 는 A를 다 기다린 <strong>다음에야</strong> <code class="language-plaintext highlighter-rouge">gather(work("B",3))</code>로 B를 <strong>그때</strong> 시작하니 <strong>순차</strong> 가 됩니다.</p>
  </li>
</ul>

<hr />

<h1 id="목적에-따라-어떻게-써야-하나">목적에 따라 어떻게 써야 하나?</h1>

<ul>
  <li>
    <p><strong>동시 실행</strong> 이 목적이면</p>

    <ul>
      <li>
        <p>바로 묶어서: <code class="language-plaintext highlighter-rouge">await asyncio.gather(work("A",2), work("B",3))</code></p>
      </li>
      <li>
        <p>또는 먼저 태우고 나중에 회수:</p>
        <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t1</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">A</span><span class="sh">"</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="n">t2</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">work</span><span class="p">(</span><span class="sh">"</span><span class="s">B</span><span class="sh">"</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>
<span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">doing something else...</span><span class="sh">"</span><span class="p">)</span>
<span class="n">r1</span><span class="p">,</span> <span class="n">r2</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="n">t1</span><span class="p">,</span> <span class="n">t2</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>순차 실행</strong> 이 목적이면 지금 작성하신 코드 2처럼 <code class="language-plaintext highlighter-rouge">await work(...)</code>를 차례로 호출하면 됩니다.</p>
  </li>
</ul>

<hr />

<h1 id="한-줄-정리">한 줄 정리</h1>

<ul>
  <li>
    <p><strong>코드 1 = 동시(겹치기)</strong> : <code class="language-plaintext highlighter-rouge">create_task</code>로 <strong>지금</strong> 출발시킴 → 총 ~3초</p>
  </li>
  <li>
    <p><strong>코드 2 = 순차</strong> : 각 작업을 <strong>기다린 뒤 다음 작업 시작</strong> → 총 ~6초</p>
  </li>
</ul>

<p>즉, 두 코드는 겉보기 형태만 비슷하고, <strong>스케줄링 시점</strong> 이 달라서 동작과 실행 시간이 완전히 다릅니다.</p>

<p class="chat--user">

아 create_task를 하고 즉시 실행되는건 아니고, 다음에 코드 내에서 await를 할 때 그 때 task들이 시작되는구나

</p>

<p>완전 그렇게 이해하면 <strong>반쯤만 맞고 중요한 포인트가 하나 빠져요.</strong><br />
정확히는:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">create_task()</code>는 <strong>즉시 “스케줄링”</strong> 합니다.</p>
  </li>
  <li>
    <p><strong>실행(코드가 실제로 돌아가기)</strong> 은 <strong>이벤트 루프에 제어권이 돌아오는 순간</strong> 시작돼요.</p>
  </li>
  <li>
    <p>그 “제어권 반환”은 보통 <strong>당신이 어디선가<code class="language-plaintext highlighter-rouge">await</code> 해서 양보할 때</strong> 발생하죠.<br />
(혹은 현재 코루틴이 끝나서 루프가 다음 턴으로 넘어갈 때.)</p>
  </li>
</ul>

<p>즉, <strong>그 태스크를<code class="language-plaintext highlighter-rouge">await</code>할 때 시작하는 게 아니라, “루프에 양보하는 순간”</strong> 시작합니다. 그래서 <strong>당신이<code class="language-plaintext highlighter-rouge">t</code>를 절대 <code class="language-plaintext highlighter-rouge">await</code>하지 않아도</strong>, 중간에 다른 <code class="language-plaintext highlighter-rouge">await</code>가 있다면 <code class="language-plaintext highlighter-rouge">t</code>는 이미 돌기 시작해요.</p>

<hr />

<h2 id="미세-타이밍을-눈으로-확인해보기">미세 타이밍을 눈으로 확인해보기</h2>

<h3 id="1-create_task-후-다른-곳에서-await만-해도-태스크는-이미-달린다">1) <code class="language-plaintext highlighter-rouge">create_task</code> 후 다른 곳에서 <code class="language-plaintext highlighter-rouge">await</code>만 해도, 태스크는 이미 달린다</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">work</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">work: start</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">work: after sleep</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">work</span><span class="p">())</span>   <span class="c1"># 🔸 바로 스케줄링
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">main: after create_task</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>            <span class="c1"># 🔸 여기서 루프에 양보 → work가 'start' 찍음
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">main: after first await</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">t</span>                           <span class="c1"># 🔸 이제서야 결과 수거(이미 실행은 진행 중)
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">main: after awaiting t</span><span class="sh">"</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<p><strong>출력 순서(전형적)</strong><br />
<code class="language-plaintext highlighter-rouge">main: after create_task</code> → <code class="language-plaintext highlighter-rouge">work: start</code> → <code class="language-plaintext highlighter-rouge">main: after first await</code> → <code class="language-plaintext highlighter-rouge">work: after sleep</code> → <code class="language-plaintext highlighter-rouge">main: after awaiting t</code></p>

<blockquote>
  <p>포인트: <code class="language-plaintext highlighter-rouge">t</code>를 <code class="language-plaintext highlighter-rouge">await</code>하기 전에 이미 <code class="language-plaintext highlighter-rouge">work</code>가 실행됐죠.</p>
</blockquote>

<hr />

<h3 id="2-루프를-막으면timesleep-태스크는-못-돈다">2) 루프를 막으면(<code class="language-plaintext highlighter-rouge">time.sleep</code>) 태스크는 못 돈다</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">time</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">work</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">work: start</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.1</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">work: done</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">work</span><span class="p">())</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">main: blocking...</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.2</span><span class="p">)</span>        <span class="c1"># 🔴 이벤트 루프가 멈춤 → work 못 달림
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">main: unblocked</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">await</span> <span class="n">t</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<p>여기서는 <code class="language-plaintext highlighter-rouge">work: start</code>가 <strong><code class="language-plaintext highlighter-rouge">time.sleep</code>이 끝난 뒤</strong>에나 찍힐 거예요.<br />
왜냐면 그동안 루프가 <strong>한 번도 돌 기회가 없었기 때문</strong> 이죠.</p>

<hr />

<h2 id="규칙-요약-step-by-step">규칙 요약 (step-by-step)</h2>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">create_task(coro)</code> → <strong>즉시 스케줄링</strong> (대기열에 올림).</p>
  </li>
  <li>
    <p><strong>현재 코루틴이<code class="language-plaintext highlighter-rouge">await</code> 등으로 루프에 양보</strong>하는 순간, 새 태스크가 <strong>실행 시작</strong>.</p>
  </li>
  <li>
    <p>그 태스크를 <strong>반드시<code class="language-plaintext highlighter-rouge">await</code>해야만</strong> 실행되는 건 아님.</p>

    <ul>
      <li>다만 <strong>예외/결과 회수와 누수 방지</strong> 를 위해 보통 <code class="language-plaintext highlighter-rouge">await t</code>(또는 <code class="language-plaintext highlighter-rouge">gather</code>)로 <strong>회수</strong> 하는 게 안전.</li>
    </ul>
  </li>
  <li>
    <p>이벤트 루프를 <strong>막지 말기</strong> (<code class="language-plaintext highlighter-rouge">time.sleep</code>, 블로킹 I/O 금지).</p>

    <ul>
      <li>필요하면 <code class="language-plaintext highlighter-rouge">await asyncio.sleep(...)</code> 또는 <code class="language-plaintext highlighter-rouge">await asyncio.to_thread(blocking_fn)</code>.</li>
    </ul>
  </li>
</ol>

<hr />

<h2 id="한-줄로-다시">한 줄로 다시</h2>

<ul>
  <li>
    <p><strong>시작 시점</strong> : “<code class="language-plaintext highlighter-rouge">await t</code>일 때”가 아니라 <strong>“루프에 양보하는 다음 턴”</strong>.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">create_task</code>는 <strong>바로 달리게 예약</strong> 하고, <strong>당신이 어딘가에서<code class="language-plaintext highlighter-rouge">await</code>하는 순간</strong> 실제로 뛰기 시작합니다.</p>
  </li>
</ul>

<p>원하면 위 예제를 당신 환경에 맞게 살짝 변형해서(타이밍/로그) 더 보여드릴게요!</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">ComfyUI LSF Job Submit</title><link href="https://hvppyarchive.github.io/comfyui/comfyui-lsf-job-submit/" rel="alternate" type="text/html" title="ComfyUI LSF Job Submit" /><published>2025-10-10T20:07:23+09:00</published><updated>2025-10-10T20:07:23+09:00</updated><id>https://hvppyarchive.github.io/comfyui/comfyui-lsf-job-submit</id><content type="html" xml:base="https://hvppyarchive.github.io/comfyui/comfyui-lsf-job-submit/"><![CDATA[<p class="chat--user">

ComfyUI에서 LSF Job을 Submit하고 이를 끝날 때까지 기다리는 Custom node를 개발하고 싶어. 요구 조건 1. main execute 함수를 async하게 구현해야 함(최신 ComfyUI에서는 async 노드 동작을 지원함) 2. Polling하며 bjobs 커맨드를 이용해 상태를 체크해야 함. 이 때 bjobs 커맨드가 다른 걸로 바뀌더라도 쉽게 변경할 수 있게 구조를 유연하게 짜줘. 3. 이 때 여러 노드가 동시에 돌 수도 있으며, bjobs를 너무 자주 치는 것을 방지하기 위해 파일시스템에 캐싱하는 로직이 있으면 좋을 것 같음. 4. 입력은 커맨드, cwd 2개 스트링임. 커맨드는 멀티라인으로 여러 bsub 커맨드가 들어올 수 도 있음을 명심할 것. bsub 커맨드 자체도 async하게 멀티로 뿌리도록 하면 좋을 것 같음(단 너무 한 번에 많은 job이 들어가지 않도록 배치 사이즈 조절은 필요할 것 같음) 5. 이 자체가 output 노드이면서 끝나면 적절한 아웃풋(뭐가 될지는 추천해줘)도 뱉도록 하자. 

</p>

<p>좋아! 요구사항을 모두 만족하는 <strong>ComfyUI용 LSF Submit &amp; Wait 커스텀 노드</strong> 설계를 깔끔하게 정리한 뒤, 바로 붙여 넣어 쓸 수 있는 완전한 코드를 드릴게요.</p>

<h1 id="설계-개요">설계 개요</h1>

<ul>
  <li>
    <p><strong>Async 노드</strong> : <code class="language-plaintext highlighter-rouge">SUPPORTS_ASYNC = True</code>, <code class="language-plaintext highlighter-rouge">async def run(...)</code> 구현.</p>
  </li>
  <li>
    <p><strong>멀티라인 bsub 제출</strong> : 입력 <code class="language-plaintext highlighter-rouge">commands</code>의 각 비어있지 않은 라인을 독립 명령으로 비동기 제출. 동시 제출 개수는 배치 크기로 제한.</p>
  </li>
  <li>
    <p><strong>Polling 구조/유연성</strong> : <code class="language-plaintext highlighter-rouge">StatusBackend</code> 인터페이스와 <code class="language-plaintext highlighter-rouge">LSFBjobsBackend</code> 기본 구현. <code class="language-plaintext highlighter-rouge">status_cmd_template</code>(예: <code class="language-plaintext highlighter-rouge">bjobs -noheader -o "jobid stat" {job_ids}</code>)을 바꾸기만 하면 다른 커맨드로 쉽게 전환.</p>
  </li>
  <li>
    <p><strong>파일시스템 캐시</strong> : 여러 노드가 동시에 돌아도 <code class="language-plaintext highlighter-rouge">status_cache.json</code>(잠금 포함)로 <strong>TTL 기반</strong> 캐싱. 너무 자주 <code class="language-plaintext highlighter-rouge">bjobs</code>를 치지 않도록 함.</p>
  </li>
  <li><strong>입력</strong> : <code class="language-plaintext highlighter-rouge">commands</code>(멀티라인 문자열), <code class="language-plaintext highlighter-rouge">cwd</code>(작업 디렉토리).<br />
추가 파라미터는 <strong>인라인 지시문</strong> 으로 조절:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># LSF: batch_size=4 poll_interval_s=10 status_ttl_s=15</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">batch_size</code>(동시 제출 개수), <code class="language-plaintext highlighter-rouge">poll_interval_s</code>(폴링 주기), <code class="language-plaintext highlighter-rouge">status_ttl_s</code>(캐시 TTL),<br />
<code class="language-plaintext highlighter-rouge">status_cmd_template</code>(상태 조회 커맨드 템플릿) 등 지원.</li>
    </ul>
  </li>
  <li>
    <p><strong>출력(OUTPUT 노드)</strong> :</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">job_ids</code>: 제출된 Job ID들의 콤마 구분 문자열</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">results_json</code>: 요약 JSON 문자열(최종 상태/성공여부/결과 파일 경로 등)</p>
      </li>
    </ul>
  </li>
  <li><strong>터미널 상태</strong> : 기본 <code class="language-plaintext highlighter-rouge">{"DONE","EXIT"}</code>. 필요시 코드 내 상수로 확장 가능.</li>
</ul>

<hr />

<h1 id="설치사용법">설치/사용법</h1>

<ol>
  <li>
    <p>아래 코드를 <code class="language-plaintext highlighter-rouge">ComfyUI/custom_nodes/lsf_submit_and_wait.py</code> 로 저장 후 ComfyUI 재시작.</p>
  </li>
  <li>워크플로에서 이 노드를 마지막에 두고, <code class="language-plaintext highlighter-rouge">commands</code>에 여러 줄 <code class="language-plaintext highlighter-rouge">bsub ...</code>들을 넣으면 됨.<br />
옵션은 맨 위에 한 줄의 인라인 지시문으로 조절:
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># LSF: batch_size=3 poll_interval_s=15 status_ttl_s=30</span>
bsub <span class="nt">-q</span> short <span class="nt">-J</span> test1 <span class="nb">sleep </span>5
bsub <span class="nt">-q</span> short <span class="nt">-J</span> test2 <span class="nb">sleep </span>8
bsub <span class="nt">-q</span> short <span class="nt">-J</span> test3 <span class="nb">sleep </span>2
</code></pre></div>    </div>
  </li>
  <li>결과는 <code class="language-plaintext highlighter-rouge">job_ids</code>와 <code class="language-plaintext highlighter-rouge">results_json</code>(요약/결과 파일 경로 포함)으로 반환됩니다.</li>
</ol>

<hr />

<h1 id="코드-그대로-사용-가능">코드 (그대로 사용 가능)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: custom_nodes/lsf_submit_and_wait.py
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">shlex</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># fcntl (POSIX) 잠금: Windows에선 graceful degrade
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">fcntl</span>  <span class="c1"># type: ignore
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">fcntl</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># ---------- 유틸 ----------
</span>
<span class="n">JOB_ID_REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
<span class="n">TERMINAL_STATES</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">iso_now</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(</span><span class="n">timespec</span><span class="o">=</span><span class="sh">"</span><span class="s">seconds</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">Z</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">default_cache_dir</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">COMFYUI_LSF_CACHE_DIR</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">gettempdir</span><span class="p">(),</span> <span class="sh">"</span><span class="s">comfyui_lsf_cache</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">d</span>

<span class="k">def</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    첫 줄(들)에 </span><span class="sh">'</span><span class="s"># LSF: key=value key=value ...</span><span class="sh">'</span><span class="s"> 형식의 인라인 옵션을 허용.
    반환: (options_dict, command_lines)
    </span><span class="sh">"""</span>
    <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">commands_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()]</span>
    <span class="n">clean_lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">^\s*#\s*LSF:\s*(.+)$</span><span class="sh">"</span><span class="p">,</span> <span class="n">ln</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="c1"># key=value ... 파싱(따옴표 허용)
</span>            <span class="n">kvs</span> <span class="o">=</span> <span class="n">shlex</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">posix</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">kv</span> <span class="ow">in</span> <span class="n">kvs</span><span class="p">:</span>
                <span class="k">if</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">kv</span><span class="p">:</span>
                    <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">kv</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="c1"># 숫자형 자동 캐스팅
</span>                    <span class="k">if</span> <span class="n">v</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
                        <span class="n">v</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="c1"># true/false
</span>                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">false</span><span class="sh">"</span><span class="p">):</span>
                            <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">)</span>
                    <span class="n">options</span><span class="p">[</span><span class="n">k</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="n">v</span>
            <span class="k">continue</span>
        <span class="n">clean_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>
    <span class="c1"># 비어있는 라인 제거
</span>    <span class="n">clean_lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">clean_lines</span> <span class="k">if</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>
    <span class="k">return</span> <span class="n">options</span><span class="p">,</span> <span class="n">clean_lines</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
        <span class="n">cmd</span><span class="p">,</span>
        <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span> <span class="k">if</span> <span class="n">cwd</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c1"># LSF 표준: "Job &lt;12345&gt; is submitted to queue &lt;...&gt;."
</span>    <span class="k">return</span> <span class="n">JOB_ID_REGEX</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span>

<span class="c1"># ---------- 상태 백엔드/캐시 ----------
</span>
<span class="k">class</span> <span class="nc">StatusBackend</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">raise</span> <span class="nb">NotImplementedError</span>

<span class="k">class</span> <span class="nc">LSFBjobsBackend</span><span class="p">(</span><span class="n">StatusBackend</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    status_cmd_template 예:
      </span><span class="sh">'</span><span class="s">bjobs -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"</span><span class="s"> {job_ids}</span><span class="sh">'</span><span class="s">
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">status_cmd_template</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">status_cmd_template</span><span class="p">:</span>
            <span class="n">status_cmd_template</span> <span class="o">=</span> <span class="sh">'</span><span class="s">bjobs -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"</span><span class="s"> {job_ids}</span><span class="sh">'</span>
        <span class="n">self</span><span class="p">.</span><span class="n">template</span> <span class="o">=</span> <span class="n">status_cmd_template</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">query</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">])</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{}</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">template</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">job_ids</span><span class="o">=</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">))</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="c1"># 실패 시 빈 딕트 반환 (상위 로직에서 재시도/캐시 사용)
</span>            <span class="k">return</span> <span class="p">{}</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># 기대 포맷: "&lt;jobid&gt; &lt;state&gt;"
</span>        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">ln</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ln</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">parts</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">state</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="k">class</span> <span class="nc">SharedJSONCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    여러 프로세스/노드 간 공유되는 JSON 캐시 (TTL 적용).
    파일 잠금 사용(가능 시).
    구조: { job_id: {</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">RUN</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="s">: epoch_seconds}, ... }
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">ttl_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">=</span> <span class="n">cache_file</span>
        <span class="n">self</span><span class="p">.</span><span class="n">ttl_s</span> <span class="o">=</span> <span class="n">ttl_s</span>
        <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">cache_file</span><span class="p">))</span>
        <span class="c1"># 파일 초기화
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">cache_file</span><span class="p">):</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({},</span> <span class="n">f</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_lock</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fh</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_EX</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_unlock</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fh</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_UN</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_read</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{}</span>

    <span class="k">def</span> <span class="nf">_write</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">):</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.tmp</span><span class="sh">"</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

        <span class="c1"># 1) 읽기 잠금
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">FileNotFoundError</span><span class="p">:</span>
            <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">))</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({},</span> <span class="n">f</span><span class="p">)</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_lock</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="c1"># 캐시 히트/미스 결정
</span>            <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">to_query</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">entry</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">entry</span> <span class="ow">and</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">ttl_s</span><span class="p">):</span>
                    <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">to_query</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="c1"># 2) 미스 대상 조회 (잠금 없이)
</span>        <span class="n">fresh</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">if</span> <span class="n">to_query</span><span class="p">:</span>
            <span class="n">fresh</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">query</span><span class="p">(</span><span class="n">to_query</span><span class="p">)</span>

        <span class="c1"># 3) 쓰기 잠금하여 병합 반영
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r+</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_lock</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="n">data2</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="n">data2</span> <span class="o">=</span> <span class="p">{}</span>
            <span class="n">updated</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="n">ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">fresh</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                <span class="n">prev</span> <span class="o">=</span> <span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="n">prev</span> <span class="ow">or</span> <span class="n">prev</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">)</span> <span class="o">!=</span> <span class="n">st</span> <span class="ow">or</span> <span class="p">(</span><span class="n">ts</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">prev</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">):</span>
                    <span class="n">data2</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">ts</span><span class="p">}</span>
                    <span class="n">updated</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">if</span> <span class="n">updated</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">seek</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">truncate</span><span class="p">()</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data2</span><span class="p">,</span> <span class="n">fh</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>

        <span class="c1"># 결괏값 구성 (fresh 우선)
</span>        <span class="n">result</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">fresh</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="c1"># ---------- 제출 &amp; 대기 ----------
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">commands</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    각 라인을 독립 커맨드로 제출. bsub 출력에서 Job ID 추출.
    동시 제출 개수를 batch_size로 제한.
    </span><span class="sh">"""</span>
    <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)))</span>
    <span class="n">submissions</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_submit_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">sem</span><span class="p">:</span>
            <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">)</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cmd</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">err</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">jids</span><span class="p">,</span>
            <span class="p">}</span>

    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_submit_one</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">submissions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="k">await</span> <span class="n">t</span><span class="p">)</span>
    <span class="c1"># 추출된 Job ID 평탄화
</span>    <span class="n">job_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])]</span>
    <span class="k">return</span> <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">wait_until_done</span><span class="p">(</span><span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
                          <span class="n">poll_interval_s</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
                          <span class="n">status_cache</span><span class="p">:</span> <span class="n">SharedJSONCache</span><span class="p">,</span>
                          <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">,</span>
                          <span class="n">max_wait_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    모든 job이 TERMINAL_STATES(DONE/EXIT)에 도달할 때까지 폴링.
    max_wait_s 지정시 해당 시간 초과하면 중단.
    </span><span class="sh">"""</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">final</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">status_cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
        <span class="n">final</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="c1"># 모두 터미널 상태?
</span>        <span class="k">if</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
            <span class="k">break</span>
        <span class="c1"># 타임아웃?
</span>        <span class="k">if</span> <span class="n">max_wait_s</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_wait_s</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">poll_interval_s</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">final</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>

<span class="c1"># ---------- ComfyUI 노드 ----------
</span>
<span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력:
      - commands (STRING, multiline): 여러 줄 bsub 커맨드
        * 인라인 옵션: </span><span class="sh">'</span><span class="s"># LSF: batch_size=4 poll_interval_s=10 status_ttl_s=15
                         status_cmd_template=</span><span class="sh">"</span><span class="s">bjobs -noheader -o </span><span class="se">\"</span><span class="s">jobid stat</span><span class="se">\"</span><span class="s"> {job_ids}</span><span class="sh">"'</span><span class="s">
      - cwd (STRING): 실행 디렉토리

    출력(OUTPUT 노드):
      - job_ids (STRING): 콤마 구분 목록
      - results_json (STRING): 요약 JSON 문자열
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="c1"># 0) 인라인 옵션/명령 파싱
</span>        <span class="n">opts</span><span class="p">,</span> <span class="n">lines</span> <span class="o">=</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="n">batch_size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
        <span class="n">poll_interval_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="n">status_ttl_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status_ttl_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="n">status_cmd_template</span> <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status_cmd_template</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">bjobs -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"</span><span class="s"> {job_ids}</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">max_wait_s</span> <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">max_wait_s</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
            <span class="n">max_wait_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">)</span>

        <span class="c1"># 1) 제출
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>

        <span class="c1"># 2) 상태 백엔드/캐시
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">status_cache</span> <span class="o">=</span> <span class="nc">SharedJSONCache</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="n">ttl_s</span><span class="o">=</span><span class="n">status_ttl_s</span><span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBjobsBackend</span><span class="p">(</span><span class="n">status_cmd_template</span><span class="o">=</span><span class="n">status_cmd_template</span><span class="p">)</span>

        <span class="c1"># 3) 완료까지 대기
</span>        <span class="n">final_statuses</span><span class="p">,</span> <span class="n">waited_sec</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">wait_until_done</span><span class="p">(</span>
            <span class="n">job_ids</span><span class="p">,</span> <span class="n">poll_interval_s</span><span class="p">,</span> <span class="n">status_cache</span><span class="p">,</span> <span class="n">backend</span><span class="p">,</span> <span class="n">max_wait_s</span><span class="o">=</span><span class="n">max_wait_s</span>
        <span class="p">)</span>

        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

        <span class="c1"># 실패 제출 수집
</span>        <span class="n">failed_submissions</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span>
            <span class="k">if</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="c1"># 4) 결과 요약/로그 파일 저장
</span>        <span class="n">session_tag</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">_</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">results_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">runs</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">results_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">results_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">result_</span><span class="si">{</span><span class="n">session_tag</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">result_payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">completed_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">completed_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">duration_sec</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="n">waited_sec</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_ids</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">final_status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">all_done</span><span class="sh">"</span><span class="p">:</span> <span class="n">all_done</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">failed_submissions</span><span class="sh">"</span><span class="p">:</span> <span class="n">failed_submissions</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cwd</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">options</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">:</span> <span class="n">batch_size</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">poll_interval_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">status_ttl_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">status_ttl_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">status_cmd_template</span><span class="sh">"</span><span class="p">:</span> <span class="n">status_cmd_template</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">max_wait_s</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">results_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">results_path</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">results_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">result_payload</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="c1"># 파일에 못 쓴다고 해도 반환은 계속
</span>            <span class="k">pass</span>

        <span class="n">job_ids_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="n">results_json_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result_payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">job_ids_str</span><span class="p">,</span> <span class="n">results_json_str</span><span class="p">)</span>

<span class="c1"># ComfyUI 노드 등록
</span><span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFSubmitAndWait</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Submit &amp; Wait</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="사용-팁--커스터마이즈">사용 팁 &amp; 커스터마이즈</h2>

<ul>
  <li>
    <p><strong>배치 크기 조절</strong> : 제출이 너무 몰리면 큐가 잠길 수 있으니 <code class="language-plaintext highlighter-rouge"># LSF: batch_size=4</code>처럼 적절히 제한하세요.</p>
  </li>
  <li>
    <p><strong>폴링/캐시</strong> : <code class="language-plaintext highlighter-rouge">poll_interval_s</code>는 폴링 주기, <code class="language-plaintext highlighter-rouge">status_ttl_s</code>는 캐시 TTL(초). 여러 노드가 돌더라도 <code class="language-plaintext highlighter-rouge">/tmp/comfyui_lsf_cache</code>(기본) 공유 캐시로 <code class="language-plaintext highlighter-rouge">bjobs</code> 호출 빈도를 크게 줄입니다. 경로는 <code class="language-plaintext highlighter-rouge">COMFYUI_LSF_CACHE_DIR</code> 환경변수로 바꿀 수 있어요.</p>
  </li>
  <li>
    <p><strong>상태 커맨드 교체</strong> : LSF 외 다른 시스템으로 바꾸고 싶다면 인라인에</p>
    <div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># LSF: status_cmd_template="bjobs -noheader -o \"jobid stat\" {job_ids}"</span>
</code></pre></div>    </div>
  </li>
</ul>

<p>처럼 명령 템플릿을 전달하세요. <code class="language-plaintext highlighter-rouge">{job_ids}</code> 플레이스홀더는 반드시 포함되어야 합니다.<br />
(예시) 커스텀 스크립트로 바꿀 때:<br />
<code class="language-plaintext highlighter-rouge"># LSF: status_cmd_template="/opt/cluster/bin/my_bjobs --format jobid,status {job_ids}"</code></p>

<ul>
  <li>
    <p><strong>타임아웃</strong> : 전체 대기 시간 제한이 필요하면 <code class="language-plaintext highlighter-rouge"># LSF: max_wait_s=7200</code> 처럼 넣으세요.</p>
  </li>
  <li>
    <p><strong>터미널 상태 확장</strong> : 필요하면 코드 상단의 <code class="language-plaintext highlighter-rouge">TERMINAL_STATES</code>를 편집(예: <code class="language-plaintext highlighter-rouge">{"DONE","EXIT","FINISHED"}</code>).</p>
  </li>
</ul>

<hr />

<h2 id="출력-포맷-제안">출력 포맷 제안</h2>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">job_ids</code> : <code class="language-plaintext highlighter-rouge">"123,124,125"</code></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">results_json</code> :</p>
    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"submitted_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2025-10-10T00:00:00Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"completed_at"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2025-10-10T00:03:12Z"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"duration_sec"</span><span class="p">:</span><span class="w"> </span><span class="mf">192.4</span><span class="p">,</span><span class="w">
  </span><span class="nl">"job_ids"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="s2">"123"</span><span class="p">,</span><span class="s2">"124"</span><span class="p">,</span><span class="s2">"125"</span><span class="p">],</span><span class="w">
  </span><span class="nl">"final_status"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="nl">"123"</span><span class="p">:</span><span class="s2">"DONE"</span><span class="p">,</span><span class="nl">"124"</span><span class="p">:</span><span class="s2">"DONE"</span><span class="p">,</span><span class="nl">"125"</span><span class="p">:</span><span class="s2">"EXIT"</span><span class="p">},</span><span class="w">
  </span><span class="nl">"all_done"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="p">,</span><span class="w">
  </span><span class="nl">"failed_submissions"</span><span class="p">:</span><span class="w"> </span><span class="p">[],</span><span class="w">
  </span><span class="nl">"cwd"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/work/exp1"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"options"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">},</span><span class="w">
  </span><span class="nl">"results_file"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/tmp/comfyui_lsf_cache/runs/result_20251010_000000_12345.json"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<p>필요하면 <code class="language-plaintext highlighter-rouge">status_cmd_template</code>를 SLURM 등으로 바꾸는 예시도 추가로 드릴게요. 원하는 추가 기능(예: 실패 시 재시도, 백오프, 개별 job 로그 추적) 있으면 말만 해줘요!</p>

<p class="chat--user">

개선 요청: 노드 자체도 async로 동작할 수 있음, 즉, 이와 동일한 다른 노드들이 있을 수 있고 그 노드들과도 cache를 공유해야 더욱 효율적일 것 같음.(bjobs할 때 job id를 제한하면 안 될 것 같고, bjobs -a 로 봐야할 것 같음) 이 때 추가 고려 사항: Node1이 만든 cache를 Node2가 참고할 수 있는데, 이 때 Node2에서 방금 bsub한 job id는 cache에 없을 수도 있음(TTL이 안돼서). 이 코너 케이스도 고려할 것

</p>

<p>좋은 포인트! 요구하신 “다중 노드 동시 동작 + 전역 캐시 공유 + <code class="language-plaintext highlighter-rouge">bjobs -a</code> 기반 전체 스냅샷”으로 구조를 업그레이드했습니다. 특히 <strong>Node2가 방금 제출한 잡이 캐시에 아직 없을 수 있는 코너 케이스</strong> 를 해결하기 위해, <strong>제출 직후 캐시에<code class="language-plaintext highlighter-rouge">SUBMITTED</code> 상태로 시드(seeding)</strong> 하고, 상태 캐시는 <strong>‘전체 목록’(bjobs -a) 스냅샷</strong> 을 TTL/락 기반으로 갱신하도록 바꿨습니다.</p>

<p>아래는 변경 요약 → 바로 쓸 수 있는 전체 코드 순서로 드립니다.</p>

<hr />

<h1 id="변경설계-포인트-step-by-step">변경/설계 포인트 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>폴링 백엔드 전면 개편</strong></p>

    <ul>
      <li>
        <p>기존: <code class="language-plaintext highlighter-rouge">bjobs {job_ids}</code> 특정 잡만 조회</p>
      </li>
      <li>
        <p>변경: <strong>기본값을<code class="language-plaintext highlighter-rouge">bjobs -a -noheader -o "jobid stat"</code>로 전체 조회</strong>→ 한 번의 호출로 모든 잡 상태를 받아 전역 캐시에 저장.</p>
      </li>
      <li>
        <p>템플릿은 <code class="language-plaintext highlighter-rouge">full_status_cmd_template</code>로 교체(여전히 옵션으로 바꿀 수 있음).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>전역 공유 캐시(파일) 구조 개선</strong></p>

    <ul>
      <li>단일 파일에 전체 스냅샷 보관:
        <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"jobs"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="nl">"123"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="nl">"status"</span><span class="p">:</span><span class="s2">"PEND"</span><span class="p">,</span><span class="nl">"ts"</span><span class="p">:</span><span class="mi">169</span><span class="err">...</span><span class="p">},</span><span class="w"> </span><span class="err">...</span><span class="w"> </span><span class="p">},</span><span class="w">
  </span><span class="nl">"last_full_refresh_ts"</span><span class="p">:</span><span class="w"> </span><span class="mi">169</span><span class="err">...</span><span class="p">,</span><span class="w">
  </span><span class="nl">"meta"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="err">...</span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>        </div>
      </li>
      <li>
        <p><strong>TTL(<code class="language-plaintext highlighter-rouge">full_ttl_s</code>)</strong> + <strong>최소 리프레시 간격(<code class="language-plaintext highlighter-rouge">min_refresh_gap_s</code>)</strong> + <strong>락 파일(가능 시 fcntl)</strong> 로 <strong>-a 호출 폭주 방지</strong>.</p>
      </li>
      <li>다중 노드가 동시에 접근해도 <strong>읽기/쓰기 잠금</strong> 적용.</li>
    </ul>
  </li>
  <li>
    <p><strong>코너 케이스 처리(방금 제출한 잡 미반영)</strong></p>

    <ul>
      <li>
        <p><strong>제출 직후</strong> 해당 잡들을 <strong>캐시에 ‘SUBMITTED’</strong> 상태로 <strong>시드(seeding)</strong> → 다른 노드도 즉시 이 JobID를 “알고” 있어서 불필요한 강제 리프레시가 줄어듦.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">get_statuses()</code>에서 <strong>요청한 JobID가 캐시에 없거나 오래되면</strong> ,</p>

        <ul>
          <li>
            <p>TTL 만료이거나 <code class="language-plaintext highlighter-rouge">force_refresh_on_miss=True</code>이고 <code class="language-plaintext highlighter-rouge">min_refresh_gap_s</code> 이상 경과 시 <strong>한 노드만</strong> <code class="language-plaintext highlighter-rouge">-a</code>를 실행해 <strong>새 스냅샷</strong> 작성(락으로 단일화).</p>
          </li>
          <li>
            <p>그 외에는 다음 폴링 주기에 자연스럽게 반영.</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>완전한 async 지원 + 다중 제출 제어</strong></p>

    <ul>
      <li>
        <p>노드 자체는 <code class="language-plaintext highlighter-rouge">SUPPORTS_ASYNC = True</code>, 비동기 제출/대기.</p>
      </li>
      <li>
        <p>멀티라인 <code class="language-plaintext highlighter-rouge">bsub</code>를 <strong>배치 크기 제한(<code class="language-plaintext highlighter-rouge">batch_size</code>)</strong>으로 병렬 제출.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>출력/로그</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">job_ids</code>(콤마 문자열), <code class="language-plaintext highlighter-rouge">results_json</code>(요약 JSON).</p>
      </li>
      <li>
        <p>실행 결과는 <code class="language-plaintext highlighter-rouge">/tmp/comfyui_lsf_cache/runs/result_*.json</code>에도 저장.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="코드-교체추가-없이-그대로-사용">코드 (교체/추가 없이 그대로 사용)</h1>

<p><code class="language-plaintext highlighter-rouge">ComfyUI/custom_nodes/lsf_submit_and_wait.py</code></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">shlex</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># fcntl (POSIX) 잠금: Windows에선 graceful degrade
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">fcntl</span>  <span class="c1"># type: ignore
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">fcntl</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># ---------- 상수/유틸 ----------
</span>
<span class="n">JOB_ID_REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
<span class="n">TERMINAL_STATES</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">}</span>

<span class="k">def</span> <span class="nf">iso_now</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(</span><span class="n">timespec</span><span class="o">=</span><span class="sh">"</span><span class="s">seconds</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">Z</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">default_cache_dir</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">COMFYUI_LSF_CACHE_DIR</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">gettempdir</span><span class="p">(),</span> <span class="sh">"</span><span class="s">comfyui_lsf_cache</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">d</span>

<span class="k">def</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    첫 줄(들)에 </span><span class="sh">'</span><span class="s"># LSF: key=value key=value ...</span><span class="sh">'</span><span class="s"> 형식의 인라인 옵션을 허용.
    반환: (options_dict, command_lines)
    </span><span class="sh">"""</span>
    <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">commands_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()]</span>
    <span class="n">clean_lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">^\s*#\s*LSF:\s*(.+)$</span><span class="sh">"</span><span class="p">,</span> <span class="n">ln</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="n">kvs</span> <span class="o">=</span> <span class="n">shlex</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">posix</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">kv</span> <span class="ow">in</span> <span class="n">kvs</span><span class="p">:</span>
                <span class="k">if</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">kv</span><span class="p">:</span>
                    <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">kv</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
                        <span class="n">v</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">v</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">false</span><span class="sh">"</span><span class="p">):</span>
                            <span class="n">v</span> <span class="o">=</span> <span class="p">(</span><span class="n">v</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span> <span class="o">==</span> <span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">)</span>
                    <span class="n">options</span><span class="p">[</span><span class="n">k</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="n">v</span>
            <span class="k">continue</span>
        <span class="n">clean_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>
    <span class="n">clean_lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">clean_lines</span> <span class="k">if</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>
    <span class="k">return</span> <span class="n">options</span><span class="p">,</span> <span class="n">clean_lines</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
        <span class="n">cmd</span><span class="p">,</span>
        <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span> <span class="k">if</span> <span class="n">cwd</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c1"># LSF 표준: "Job &lt;12345&gt; is submitted to queue &lt;...&gt;."
</span>    <span class="k">return</span> <span class="n">JOB_ID_REGEX</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">stdout</span><span class="p">)</span>

<span class="c1"># ---------- 상태 백엔드 (전체 스냅샷) ----------
</span>
<span class="k">class</span> <span class="nc">StatusBackend</span><span class="p">:</span>
    <span class="k">async</span> <span class="k">def</span> <span class="nf">query_full</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="k">raise</span> <span class="nb">NotImplementedError</span>

<span class="k">class</span> <span class="nc">LSFBjobsFullBackend</span><span class="p">(</span><span class="n">StatusBackend</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    전체 스냅샷 기반 백엔드.
    full_status_cmd_template 기본값:
      </span><span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span><span class="s">
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">full_status_cmd_template</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">full_status_cmd_template</span><span class="p">:</span>
            <span class="n">full_status_cmd_template</span> <span class="o">=</span> <span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span>
        <span class="n">self</span><span class="p">.</span><span class="n">template</span> <span class="o">=</span> <span class="n">full_status_cmd_template</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">query_full</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">template</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{}</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="c1"># 기대 포맷: "&lt;jobid&gt; &lt;state&gt;"
</span>        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">ln</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ln</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">parts</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">state</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">state</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="c1"># ---------- 전역 공유 캐시 (전체 목록 + TTL + 락) ----------
</span>
<span class="k">class</span> <span class="nc">FullListSharedCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    파일 하나에 전체 job 상태 스냅샷을 저장/공유.
    구조:
    {
      </span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="s">: { job_id: {</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="s">: epoch}, ... },
      </span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="s">: epoch,
      </span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">source</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, ... }
    }
    정책:
      - full_ttl_s: 전체 스냅샷 TTL
      - min_refresh_gap_s: -a 재실행 최소 간격
      - force_refresh_on_miss: 필요한 job_id가 없으면 TTL 무시하고(단 최소 간격은 존중) 조기 갱신 시도
      - SUBMITTED 시드: 제출 직후 캐시에 넣어 코너 케이스 완화
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                 <span class="n">full_ttl_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
                 <span class="n">min_refresh_gap_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span><span class="p">,</span>
                 <span class="n">force_refresh_on_miss</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">=</span> <span class="n">cache_file</span>
        <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span> <span class="o">=</span> <span class="n">full_ttl_s</span>
        <span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span> <span class="o">=</span> <span class="n">min_refresh_gap_s</span>
        <span class="n">self</span><span class="p">.</span><span class="n">force_refresh_on_miss</span> <span class="o">=</span> <span class="n">force_refresh_on_miss</span>
        <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">cache_file</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">cache_file</span><span class="p">):</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}},</span> <span class="n">f</span><span class="p">)</span>

    <span class="c1"># ---- 락 유틸 ----
</span>    <span class="k">def</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">nonblock</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
        <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">a+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_EX</span> <span class="o">|</span> <span class="p">(</span><span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_NB</span> <span class="k">if</span> <span class="n">nonblock</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span>
            <span class="k">except</span> <span class="nb">BlockingIOError</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">fh</span>

    <span class="k">def</span> <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fh</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_UN</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

    <span class="k">def</span> <span class="nf">_read_cache</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>

    <span class="k">def</span> <span class="nf">_write_cache</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.tmp</span><span class="sh">"</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>

    <span class="c1"># ---- 공개 API ----
</span>    <span class="k">def</span> <span class="nf">seed_submitted</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">]):</span>
        <span class="sh">"""</span><span class="s">제출 직후 SUBMITTED 상태로 캐시에 시드(코너 케이스 완화).</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 쓰기 락
</span>        <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="c1"># 이미 있으면 건드리지 않음(경쟁 상태에서 더 최신 값 보호)
</span>                <span class="k">if</span> <span class="n">jid</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">jobs</span><span class="p">:</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">}</span>
            <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_write_cache</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">maybe_refresh_full</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">,</span> <span class="n">reason</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        - TTL 또는 miss 사유로 전체 스냅샷을 갱신할지 판단/실행
        - 동시성: refresh 락 파일을 non-blocking으로 획득한 단 하나의 프로세스만 실제로 -a 실행
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="c1"># 최소 간격 체크
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="c1"># refresh 락(별도 파일) 획득 시도(실패하면 다른 노드가 수행 중)
</span>        <span class="n">lock_path</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.refresh.lock</span><span class="sh">"</span>
        <span class="n">lock_fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">lock_path</span><span class="p">,</span> <span class="n">nonblock</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">lock_fh</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 한 번 더 최신화 검사(경쟁 회피)
</span>            <span class="n">data2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">last_ts2</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>

            <span class="c1"># 실제 -a 실행
</span>            <span class="n">snapshot</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">query_full</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">snapshot</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>  <span class="c1"># 실패 시 그대로 유지
</span>
            <span class="n">now2</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="c1"># 쓰기 락(캐시 파일)
</span>            <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="c1"># 새 스냅샷 반영
</span>                <span class="n">ts</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">ts</span><span class="p">}</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="n">meta</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">reason</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_write_cache</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">lock_fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        - 캐시에서 먼저 조회
        - 필요 시 maybe_refresh_full()을 통해 -a 스냅샷 갱신
        - 최종적으로 요청 job_ids에 대한 상태 dict 반환(없으면 </span><span class="sh">""</span><span class="s">)
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
        <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

        <span class="k">def</span> <span class="nf">_fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ent</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="c1"># 엔트리가 SUBMITTED 라도 '신선한' 것으로 취급(바로 직전 제출 케이스 완화)
</span>            <span class="n">age</span> <span class="o">=</span> <span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="k">return</span> <span class="n">age</span> <span class="o">&lt;=</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">)</span>

        <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="c1"># 1) TTL 만료 또는 miss 여부 판단
</span>        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">):</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="c1"># miss 검사: 요청한 job이 캐시에 없거나 stale
</span>        <span class="n">miss</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span> <span class="k">if</span> <span class="ow">not</span> <span class="nf">_fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">)]</span>
        <span class="k">if</span> <span class="n">miss</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="n">force_refresh_on_miss</span><span class="p">:</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="c1"># 2) 필요 시 전체 리프레시 시도(한 프로세스만 실행)
</span>        <span class="k">if</span> <span class="n">need_refresh</span><span class="p">:</span>
            <span class="n">reason</span> <span class="o">=</span> <span class="sh">"</span><span class="s">ttl_expired</span><span class="sh">"</span> <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&gt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s">miss</span><span class="sh">"</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">maybe_refresh_full</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">reason</span><span class="o">=</span><span class="n">reason</span><span class="p">)</span>
            <span class="c1"># 갱신 후 최신 데이터 재로딩
</span>            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>

        <span class="c1"># 3) 결과 구성
</span>        <span class="n">out</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="n">out</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">if</span> <span class="n">ent</span> <span class="k">else</span> <span class="sh">""</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">out</span>

<span class="c1"># ---------- 제출 &amp; 대기 ----------
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">commands</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    각 라인을 독립 커맨드로 제출. bsub 출력에서 Job ID 추출.
    동시 제출 개수를 batch_size로 제한.
    </span><span class="sh">"""</span>
    <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)))</span>
    <span class="n">submissions</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_submit_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">sem</span><span class="p">:</span>
            <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">)</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cmd</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">err</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">jids</span><span class="p">,</span>
            <span class="p">}</span>

    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_submit_one</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">submissions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="k">await</span> <span class="n">t</span><span class="p">)</span>
    <span class="n">job_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])]</span>
    <span class="k">return</span> <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">wait_until_done</span><span class="p">(</span><span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span>
                          <span class="n">poll_interval_s</span><span class="p">:</span> <span class="nb">int</span><span class="p">,</span>
                          <span class="n">full_cache</span><span class="p">:</span> <span class="n">FullListSharedCache</span><span class="p">,</span>
                          <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">,</span>
                          <span class="n">max_wait_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
    <span class="n">final</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">full_cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
        <span class="n">final</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
        <span class="k">if</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
            <span class="k">break</span>
        <span class="k">if</span> <span class="n">max_wait_s</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_wait_s</span><span class="p">:</span>
            <span class="k">break</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">poll_interval_s</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">final</span><span class="p">,</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>

<span class="c1"># ---------- ComfyUI 노드 ----------
</span>
<span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력:
      - commands (STRING, multiline): 여러 줄 bsub 커맨드
        * 인라인 옵션: </span><span class="sh">'</span><span class="s"># LSF: batch_size=4 poll_interval_s=10 full_ttl_s=15
                         full_status_cmd_template=</span><span class="sh">"</span><span class="s">bjobs -a -noheader -o </span><span class="se">\"</span><span class="s">jobid stat</span><span class="se">\"</span><span class="sh">"</span><span class="s">
                         min_refresh_gap_s=5 force_refresh_on_miss=true max_wait_s=7200</span><span class="sh">'</span><span class="s">
      - cwd (STRING): 실행 디렉토리

    출력(OUTPUT 노드):
      - job_ids (STRING): 콤마 구분 목록
      - results_json (STRING): 요약 JSON 문자열
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="c1"># 0) 인라인 옵션/명령 파싱
</span>        <span class="n">opts</span><span class="p">,</span> <span class="n">lines</span> <span class="o">=</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="n">batch_size</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
        <span class="n">poll_interval_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="c1"># backward compat: status_ttl_s -&gt; full_ttl_s
</span>        <span class="n">full_ttl_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">full_ttl_s</span><span class="sh">"</span><span class="p">,</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status_ttl_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">)))</span>
        <span class="n">min_refresh_gap_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">min_refresh_gap_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
        <span class="n">force_refresh_on_miss</span> <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">force_refresh_on_miss</span><span class="sh">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">))</span>
        <span class="n">full_status_cmd_template</span> <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">full_status_cmd_template</span><span class="sh">"</span><span class="p">,</span>
                                            <span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span><span class="p">)</span>
        <span class="n">max_wait_s</span> <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">max_wait_s</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
            <span class="n">max_wait_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">)</span>

        <span class="c1"># 1) 제출
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>

        <span class="c1"># 2) 전역 캐시/백엔드
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">full_cache</span> <span class="o">=</span> <span class="nc">FullListSharedCache</span><span class="p">(</span>
            <span class="n">cache_file</span><span class="p">,</span>
            <span class="n">full_ttl_s</span><span class="o">=</span><span class="n">full_ttl_s</span><span class="p">,</span>
            <span class="n">min_refresh_gap_s</span><span class="o">=</span><span class="n">min_refresh_gap_s</span><span class="p">,</span>
            <span class="n">force_refresh_on_miss</span><span class="o">=</span><span class="n">force_refresh_on_miss</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBjobsFullBackend</span><span class="p">(</span><span class="n">full_status_cmd_template</span><span class="o">=</span><span class="n">full_status_cmd_template</span><span class="p">)</span>

        <span class="c1"># 2-1) 코너 케이스 완화: 방금 제출한 잡을 캐시에 시드
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">full_cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>

        <span class="c1"># 3) 완료까지 대기
</span>        <span class="n">final_statuses</span><span class="p">,</span> <span class="n">waited_sec</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">wait_until_done</span><span class="p">(</span>
            <span class="n">job_ids</span><span class="p">,</span> <span class="n">poll_interval_s</span><span class="p">,</span> <span class="n">full_cache</span><span class="p">,</span> <span class="n">backend</span><span class="p">,</span> <span class="n">max_wait_s</span><span class="o">=</span><span class="n">max_wait_s</span>
        <span class="p">)</span>

        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

        <span class="n">failed_submissions</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span>
            <span class="k">if</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="c1"># 4) 결과 파일 저장
</span>        <span class="n">session_tag</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">_</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">results_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">runs</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">results_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">results_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">result_</span><span class="si">{</span><span class="n">session_tag</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">result_payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">completed_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">completed_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">duration_sec</span><span class="sh">"</span><span class="p">:</span> <span class="nf">round</span><span class="p">(</span><span class="n">waited_sec</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_ids</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">final_status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">all_done</span><span class="sh">"</span><span class="p">:</span> <span class="n">all_done</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">failed_submissions</span><span class="sh">"</span><span class="p">:</span> <span class="n">failed_submissions</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cwd</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">options</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">:</span> <span class="n">batch_size</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">poll_interval_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">full_ttl_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">full_ttl_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">min_refresh_gap_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">min_refresh_gap_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">force_refresh_on_miss</span><span class="sh">"</span><span class="p">:</span> <span class="n">force_refresh_on_miss</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">full_status_cmd_template</span><span class="sh">"</span><span class="p">:</span> <span class="n">full_status_cmd_template</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">max_wait_s</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">results_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">results_path</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">results_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">result_payload</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="n">job_ids_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="n">results_json_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">result_payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">job_ids_str</span><span class="p">,</span> <span class="n">results_json_str</span><span class="p">)</span>

<span class="c1"># ComfyUI 노드 등록
</span><span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFSubmitAndWait</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Submit &amp; Wait</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<hr />

<h2 id="사용-방법옵션-예시">사용 방법/옵션 예시</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vbnet

# LSF: batch_size=4 poll_interval_s=10 full_ttl_s=15 min_refresh_gap_s=5 force_refresh_on_miss=true
# LSF: full_status_cmd_template="bjobs -a -noheader -o \"jobid stat\""
bsub -q short -J test1 sleep 5
bsub -q short -J test2 sleep 8
bsub -q short -J test3 sleep 2
</code></pre></div></div>

<ul>
  <li>
    <p><strong>full_ttl_s</strong> : 전체 스냅샷의 TTL.</p>
  </li>
  <li>
    <p><strong>min_refresh_gap_s</strong> : <code class="language-plaintext highlighter-rouge">-a</code> 재호출 최소 간격(모든 노드 공통).</p>
  </li>
  <li>
    <p><strong>force_refresh_on_miss</strong> : 요청 Job이 캐시에 없을 때 TTL 관계없이 조기 갱신 시도(단 최소 간격은 지킴).</p>
  </li>
  <li>
    <p><strong>full_status_cmd_template</strong> : 다른 시스템/형식으로 교체 가능(예: 커스텀 스크립트).</p>
  </li>
</ul>

<hr />

<h2 id="코너-케이스가-해결되는-흐름요약">코너 케이스가 해결되는 흐름(요약)</h2>

<ol>
  <li>
    <p>Node1·Node2가 각각 잡 제출 → <strong>각자 제출 직후 캐시에 SUBMITTED로 시드</strong>.</p>
  </li>
  <li>
    <p>폴링 시, <strong>요청한 JobID가 캐시에 이미 존재</strong> → <code class="language-plaintext highlighter-rouge">SUBMITTED</code>라도 <strong>신선</strong> 으로 간주되어 불필요한 조기 <code class="language-plaintext highlighter-rouge">-a</code> 호출 방지.</p>
  </li>
  <li>
    <p>TTL 만료 또는 miss+최소 간격 충족 시, <strong>한 노드만</strong> <code class="language-plaintext highlighter-rouge">-a</code> 실행(락) → 전체 스냅샷 업데이트.</p>
  </li>
  <li>
    <p>모든 노드는 <strong>같은 캐시 파일</strong> 을 보며 효율적으로 상태 동기화.</p>
  </li>
</ol>

<hr />

<p>원하시면:</p>

<ul>
  <li>
    <p><strong>지수 백오프/폴링 주기 자동 튜닝</strong> ,</p>
  </li>
  <li>
    <p><strong>추가 상태 매핑(예: ZOMBI/PSUSP 등)</strong> ,</p>
  </li>
  <li>
    <p><strong>SLURM 등 다른 스케줄러 템플릿</strong> 도 바로 붙여드릴게요.</p>
  </li>
</ul>

<p class="chat--user">

질문 1. 파일 read access를 계속하는거야? 그렇다면 대신에 singleton으로 된 cache 클래스에 저장된 정보를 사용하는 건 어때? 질문 2. job id | 커맨드 | job 상태 | 를 노드에 계속 업데이트하며 보여줄 순 없나? 좀 고급 기능 같기는한데 되면 참 좋을듯

</p>

<p>좋은 질문! 핵심만 “실무적으로” 정리하고, 바로 쓸 수 있는 코드 조각(추가/패치용)도 드릴게요.</p>

<hr />

<h1 id="q1-파일-read-access를-계속하나요--대신-프로세스-내-싱글톤-캐시-쓰면-어때요">Q1. “파일 read access를 계속하나요? → 대신 프로세스 내 싱글톤 캐시 쓰면 어때요?”</h1>

<h2 id="결론-step-by-step">결론 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>맞아요.</strong> 전역 공유를 위해 파일 캐시를 쓰면 여러 노드에서 읽기/쓰기 경쟁이 생깁니다.</p>
  </li>
  <li>
    <p><strong>해법은 2-계층 캐시</strong> :</p>

    <ul>
      <li>
        <p><strong>프로세스 내 싱글톤 메모리 스냅샷</strong>(초저지연·락 포함)</p>
      </li>
      <li>
        <p><strong>프로세스 간 공유 파일 캐시</strong>(TTL+락)</p>
      </li>
    </ul>
  </li>
  <li>
    <p>조회 흐름:</p>

    <ul>
      <li>
        <p><strong>메모리 스냅샷이 신선(TTL 이내)</strong> → 파일 읽기 없이 <strong>즉시 반환</strong>.</p>
      </li>
      <li>
        <p>신선하지 않으면 <strong>파일을 1회 읽어 메모리 갱신</strong>.</p>
      </li>
      <li>
        <p>TTL 만료·MISS·최소 간격 충족 시 <strong>한 프로세스만</strong> <code class="language-plaintext highlighter-rouge">bjobs -a</code> 수행해 파일/메모리 동시 갱신.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>제출 직후 <strong>SUBMITTED 시드</strong> 는 <strong>메모리와 파일 모두</strong> 에 반영 → Node2 코너 케이스(방금 제출한 잡이 캐시에 아직 없음) 해소.</p>
  </li>
</ol>

<h3 id="적용-코드-기존-fulllistsharedcache-위에-얹는-싱글톤-계층">적용 코드 (기존 <code class="language-plaintext highlighter-rouge">FullListSharedCache</code> 위에 얹는 싱글톤 계층)</h3>

<p>아래 블록만 <strong>추가/치환</strong> 하세요. (나머지 로직은 그대로 동작)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># --- 싱글톤 메모리 스냅샷 계층 ---
</span><span class="k">class</span> <span class="nc">_MemSnap</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="p">{}</span>                  <span class="c1"># {job_id: {"status": str, "ts": float}, ...}
</span>        <span class="n">self</span><span class="p">.</span><span class="n">last_full_refresh_ts</span> <span class="o">=</span> <span class="mf">0.0</span> <span class="c1"># float epoch
</span>        <span class="n">self</span><span class="p">.</span><span class="n">lock</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">FullListSharedCache</span><span class="p">:</span>
    <span class="n">_mem</span> <span class="o">=</span> <span class="nf">_MemSnap</span><span class="p">()</span>  <span class="c1"># 프로세스 단일 인스턴스
</span>
    <span class="c1"># ... (기존 __init__, _lock_fd 등은 그대로)
</span>
    <span class="k">def</span> <span class="nf">_mem_is_fresh</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">now</span><span class="p">:</span> <span class="nb">float</span><span class="p">,</span> <span class="n">ttl</span><span class="p">:</span> <span class="nb">float</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">last_full_refresh_ts</span><span class="p">))</span> <span class="o">&lt;=</span> <span class="nf">float</span><span class="p">(</span><span class="n">ttl</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_mem_update_from_dict</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">last_full_refresh_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">_persist_and_update_mem</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_write_cache</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="c1"># 파일 쓰기와 동시에 메모리 스냅샷 최신화
</span>        <span class="n">self</span><span class="p">.</span><span class="nf">_mem_update_from_dict</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">seed_submitted</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">meta</span><span class="p">:</span> <span class="nb">dict</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">제출 직후 SUBMITTED 상태를 메모리/파일 모두에 시드.</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 메모리 업데이트
</span>        <span class="c1"># (동시에 들어와도 무해; 최신 ts로 덮어써도 OK)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
        <span class="c1"># 파일 업데이트
</span>        <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
            <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
            <span class="c1"># (선택) 커맨드 메타 저장
</span>            <span class="k">if</span> <span class="n">meta</span><span class="p">:</span>
                <span class="n">jm</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">meta</span><span class="p">:</span>
                        <span class="n">jm</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span>
                <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jm</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_persist_and_update_mem</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">maybe_refresh_full</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">,</span> <span class="n">reason</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 최소 간격·락 처리 동일
</span>        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">lock_path</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.refresh.lock</span><span class="sh">"</span>
        <span class="n">lock_fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">lock_path</span><span class="p">,</span> <span class="n">nonblock</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">lock_fh</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
            <span class="n">last_ts2</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">):</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">snapshot</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">query_full</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">snapshot</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="n">now2</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">ts</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">ts</span><span class="p">}</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="n">meta</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">reason</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_persist_and_update_mem</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>  <span class="c1"># 파일과 메모리 동시 갱신
</span>            <span class="k">finally</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">lock_fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">StatusBackend</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 1) 메모리 스냅샷 우선
</span>        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">lock</span><span class="p">:</span>
            <span class="n">mem_fresh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mem_is_fresh</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">mem_fresh</span><span class="p">:</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="c1"># 파일 1회 읽어 메모리 최신화
</span>                <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_mem_update_from_dict</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span>

        <span class="k">def</span> <span class="nf">_fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ent</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))</span> <span class="o">&lt;=</span> <span class="nf">float</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">)</span>

        <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">self</span><span class="p">.</span><span class="nf">_mem_is_fresh</span><span class="p">(</span><span class="n">now</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span><span class="p">):</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="n">miss</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span> <span class="k">if</span> <span class="ow">not</span> <span class="nf">_fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">)]</span>
        <span class="k">if</span> <span class="n">miss</span> <span class="ow">and</span> <span class="n">self</span><span class="p">.</span><span class="n">force_refresh_on_miss</span><span class="p">:</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">if</span> <span class="n">need_refresh</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">maybe_refresh_full</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">reason</span><span class="o">=</span><span class="sh">"</span><span class="s">ttl_or_miss</span><span class="sh">"</span><span class="p">)</span>
            <span class="c1"># 리프레시 후 메모리에서 재조회
</span>            <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem</span><span class="p">.</span><span class="n">jobs</span>

        <span class="k">return</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">(</span><span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
</code></pre></div></div>

<blockquote>
  <p>효과: <strong>동일 프로세스(=동일 ComfyUI 인스턴스)</strong> 에서 여러 노드가 돌아도, 대부분 <strong>파일 I/O 없이 메모리만</strong> 보게 됩니다. 그래도 다른 프로세스/머신과 공유가 필요하면 파일 스냅샷이 “사실상의 소스 오브 트루스”가 되고, 한 프로세스만 <code class="language-plaintext highlighter-rouge">-a</code>를 실행해 <strong>폭주 방지</strong> 가 유지됩니다.</p>
</blockquote>

<p>또한 제출 직후:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># submit 이후
</span><span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="nf">iso_now</span><span class="p">()}</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])}</span>
<span class="n">full_cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">jid_to_cmd</span><span class="p">)</span>  <span class="c1"># 메모리/파일 모두 시드 + 커맨드 메타 저장
</span></code></pre></div></div>

<hr />

<h1 id="q2-job-id--커맨드--상태를-노드에-계속-업데이트해서-보여줄-수-있나요">Q2. “job id | 커맨드 | 상태”를 노드에 <strong>계속</strong> 업데이트해서 보여줄 수 있나요?</h1>

<h2 id="결론-step-by-step-1">결론 (step-by-step)</h2>

<ol>
  <li>
    <p><strong>ComfyUI 코어는 기본적으로</strong> 임의 노드가 실행 중에 <strong>UI를 실시간으로 갱신</strong> 하는 API를 제공하지 않습니다(최종 출력만 표시).</p>
  </li>
  <li>
    <p>대신 현실적인 두 가지 경로가 있습니다.</p>
  </li>
</ol>

<h3 id="a안프론트-수정-없이-노드만으로">A안(프론트 수정 없이, 노드만으로)</h3>

<ul>
  <li>
    <p><strong>보조 뷰어 노드</strong> 를 하나 더 만들어, 공유 캐시(<code class="language-plaintext highlighter-rouge">status_full_cache.json</code>) + <code class="language-plaintext highlighter-rouge">jobs_meta</code>에서 <strong>표를 생성(STRING 또는 이미지)</strong> 해서 보여줍니다.</p>
  </li>
  <li>
    <p>최신 상태를 보고 싶을 때 뷰어 노드를 <strong>다시 실행(Queue)</strong> 하면 표가 갱신됩니다.</p>
  </li>
  <li>
    <p>자동 리프레시는 <code class="language-plaintext highlighter-rouge">Loop/Repeat</code>류 확장 노드를 곁들이면 됩니다.</p>
  </li>
</ul>

<blockquote>
  <p>장점: ComfyUI 변경 없이 즉시 사용.<br />
 단점: “지속 스트리밍”은 아니고 <strong>수동/주기 재실행</strong>.</p>
</blockquote>

<h3 id="b안진짜-실시간-패널">B안(진짜 실시간 패널)</h3>

<ul>
  <li>
    <p>커스텀 노드 파일 안에 <strong>가벼운 HTTP GET 엔드포인트</strong> 를 추가(ComfyUI 서버에 라우트 등록) → 프론트에 작은 스크립트(또는 별도 플러그인)로 <strong>주기 폴링</strong> 하여 표를 갱신합니다.</p>
  </li>
  <li>
    <p>사실상 “실시간 대시보드”를 ComfyUI 안쪽 패널에 넣을 수 있습니다.</p>
  </li>
</ul>

<blockquote>
  <p>장점: 진짜 라이브.<br />
 단점: 프론트에 소폭 추가 작업 필요.</p>
</blockquote>

<hr />

<h2 id="바로-쓸-수-있는-뷰어-노드-a안">바로 쓸 수 있는 “뷰어 노드” (A안)</h2>

<p>아래 클래스를 같은 파일에 <strong>추가</strong> 하세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ====== 뷰어 노드: 상태 테이블 출력 ======
</span><span class="k">class</span> <span class="nc">LSFStatusBoard</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    입력:
      - job_ids (STRING): </span><span class="sh">"</span><span class="s">123,124,125</span><span class="sh">"</span><span class="s"> (비워두면 캐시에 있는 최근 N개를 보여줌)
      - top_k (INT): job_ids 비었을 때 최근 N개
      - width_limit (INT): 커맨드 컬럼 자르기 길이
    출력:
      - table_text (STRING): 모노스페이스 표 텍스트
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">table_text</span><span class="sh">"</span><span class="p">,)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">""</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">optional</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">top_k</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">INT</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="mi">500</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">width_limit</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">INT</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="mi">20</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200</span><span class="p">}),</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">def</span> <span class="nf">_read_cache</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">data</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span>

    <span class="k">def</span> <span class="nf">_short</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">limit</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="nf">else </span><span class="p">(</span><span class="n">s</span><span class="p">[:</span><span class="n">limit</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_fmt_table</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">rows</span><span class="p">):</span>
        <span class="c1"># 고정 폭 표 생성
</span>        <span class="n">jid_w</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nf">max</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">])</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="mi">6</span><span class="p">))</span>
        <span class="n">st_w</span>  <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nf">max</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">r</span><span class="p">[</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">])</span> <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">),</span> <span class="n">default</span><span class="o">=</span><span class="mi">5</span><span class="p">))</span>
        <span class="n">hdr</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="sh">'</span><span class="s">JOBID</span><span class="sh">'</span><span class="si">:</span><span class="o">&lt;</span><span class="si">{</span><span class="n">jid_w</span><span class="si">}}</span><span class="s"> | </span><span class="si">{</span><span class="sh">'</span><span class="s">STATUS</span><span class="sh">'</span><span class="si">:</span><span class="o">&lt;</span><span class="si">{</span><span class="n">st_w</span><span class="si">}}</span><span class="s"> | CMD</span><span class="sh">"</span>
        <span class="n">sep</span> <span class="o">=</span> <span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="o">*</span><span class="nf">len</span><span class="p">(</span><span class="n">hdr</span><span class="p">)</span>
        <span class="n">body</span> <span class="o">=</span> <span class="p">[</span><span class="n">hdr</span><span class="p">,</span> <span class="n">sep</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">rows</span><span class="p">:</span>
            <span class="n">body</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">r</span><span class="p">[</span><span class="sh">'</span><span class="s">job_id</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="si">{</span><span class="n">jid_w</span><span class="si">}}</span><span class="s"> | </span><span class="si">{</span><span class="n">r</span><span class="p">[</span><span class="sh">'</span><span class="s">status</span><span class="sh">'</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="si">{</span><span class="n">st_w</span><span class="si">}}</span><span class="s"> | </span><span class="si">{</span><span class="n">r</span><span class="p">[</span><span class="sh">'</span><span class="s">cmd</span><span class="sh">'</span><span class="p">]</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">top_k</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">80</span><span class="p">):</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_cache</span><span class="p">()</span>
        <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="n">meta</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="k">if</span> <span class="n">job_ids</span><span class="p">.</span><span class="nf">strip</span><span class="p">():</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># 최근 top_k (ts 기준 정렬)
</span>            <span class="n">jids</span> <span class="o">=</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">jobs</span><span class="p">.</span><span class="nf">keys</span><span class="p">(),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">j</span><span class="p">:</span> <span class="n">jobs</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)[:</span><span class="n">top_k</span><span class="p">]</span>

        <span class="n">rows</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">jids</span><span class="p">:</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
            <span class="n">cmd</span> <span class="o">=</span> <span class="n">meta</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
            <span class="n">rows</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
                <span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="nf">_short</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">width_limit</span><span class="p">),</span>
            <span class="p">})</span>
        <span class="n">table</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_fmt_table</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">table</span><span class="p">,)</span>

<span class="c1"># 등록
</span><span class="n">NODE_CLASS_MAPPINGS</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">"</span><span class="s">LSFStatusBoard</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFStatusBoard</span><span class="p">})</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span><span class="p">.</span><span class="nf">update</span><span class="p">({</span><span class="sh">"</span><span class="s">LSFStatusBoard</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Status Board</span><span class="sh">"</span><span class="p">})</span>
</code></pre></div></div>

<h3 id="제출-노드에서-커맨드-메타-저장한-줄-추가">제출 노드에서 커맨드 메타 저장(한 줄 추가)</h3>

<p>앞서 Q1 코드처럼 제출 직후 커맨드도 함께 시드합니다:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="nf">iso_now</span><span class="p">()}</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])}</span>
<span class="n">full_cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">jid_to_cmd</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>이제 뷰어 노드에서 <strong>JOBID | STATUS | CMD</strong> 를 깔끔히 볼 수 있습니다.<br />
 “계속” 갱신하려면 뷰어 노드를 <strong>주기적으로 재실행</strong>(직접 클릭 또는 반복 실행 노드 사용)하세요.</p>
</blockquote>

<hr />

<h2 id="진짜-실시간-패널-b안-선택">진짜 실시간 패널 (B안, 선택)</h2>

<ul>
  <li>
    <p>가능: 서버 라우트를 하나 노드 파일에 등록해 JSON을 내보내고, 프론트(간단 JS)에서 1~3초 간격 폴링.</p>
  </li>
  <li>
    <p>필요 코드(개요): <code class="language-plaintext highlighter-rouge">server.PromptServer</code> 이용해 <code class="language-plaintext highlighter-rouge">GET /lsf/status?job_ids=...</code> 엔드포인트 추가 → 위 <code class="language-plaintext highlighter-rouge">LSFStatusBoard</code>의 내부 로직을 재사용해 JSON 응답.</p>
  </li>
  <li>
    <p>원하시면 이 라우트 + 최소 HTML/JS 패널 코드를 바로 붙여드릴게요.</p>
  </li>
</ul>

<hr />

<h2 id="요약">요약</h2>

<ul>
  <li>
    <p><strong>Q1</strong> : 파일 남용 없이 <strong>“메모리 싱글톤 + 파일 스냅샷”</strong> 2-계층 캐시로 해결. 제출 직후 <strong>SUBMITTED 시드</strong> 로 Node2 코너 케이스도 해결.</p>
  </li>
  <li>
    <p><strong>Q2</strong> : 코어 UI는 중간 갱신이 어려우므로</p>

    <ul>
      <li>
        <p>바로 쓰려면 <strong>뷰어 노드(A안)</strong> 로 표를 재실행 갱신,</p>
      </li>
      <li>
        <p>진짜 라이브는 <strong>간단 라우트(B안)</strong> + 소형 패널.</p>
      </li>
    </ul>
  </li>
</ul>

<p>더 진한 기능(상태 아이콘/색상, 정렬/필터, EXIT 원인 추적, bjobs -a 추가 컬럼 파싱 등) 원하시면 이어서 확장해 드릴게요.</p>

<p class="chat--user">

impact node에서 아래 함수(js)와 PromptServer.instance.send_sync("impact-node-feedback", {"node_id": …, ”widget_name": …}) 이런 함수를 이용해서 런타임에서 위젯 업데이트를 하는 것 같은데 이런 참고해서 markdown table 형식으로 Jod ID, Status, Command 를 String widget에 계속 업데이트 해보자. function nodeFeedbackHandler(event) { let nodes = app.graph._nodes_by_id; let node = nodes[event.detail.node_id]; if(node) { const w = node.widgets.find((w) =&gt; event.detail.widget_name === w.name); if(w) { w.value = event.detail.value; } } } api.addEventListener("impact-node-feedback", nodeFeedbackHandler);

</p>

<p>좋아—“impact-node-feedback” 패턴을 그대로 활용해서, <strong>런타임에 String 위젯을 계속 갱신</strong>(마크다운 테이블 형태)하도록 노드를 확장해볼게. 아래는 <strong>step-by-step</strong> 로 정리한 구현 가이드 + 바로 붙여넣어 쓸 <strong>패치 코드</strong> 야.</p>

<hr />

<h1 id="어떻게-작동하나-step-by-step">어떻게 작동하나 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>프론트엔드 리스너 등록</strong><br />
네가 준 핸들러 그대로 씀. <code class="language-plaintext highlighter-rouge">impact-node-feedback</code> 커스텀 메시지를 받으면 해당 노드의 특정 위젯 값을 갱신. 이 방식은 공식 문서의 <code class="language-plaintext highlighter-rouge">PromptServer.instance.send_sync()</code> 사용자 정의 메시지 가이드와 동일한 흐름이야. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI</a></p>
  </li>
  <li>
    <p><strong>노드에 “표시 전용” String 위젯 추가</strong><br />
예: <code class="language-plaintext highlighter-rouge">status_md</code> 라는 이름의 멀티라인 STRING 위젯. 노드 실행 중 서버에서 이 위젯의 값을 계속 바꿔치기 함(마크다운 표 텍스트).</p>
  </li>
  <li>
    <p><strong>node_id 확보(필수)</strong><br />
ComfyUI는 <code class="language-plaintext highlighter-rouge">INPUT_TYPES["hidden"]</code>에 <code class="language-plaintext highlighter-rouge">"UNIQUE_ID"</code>를 넣으면 런타임에서 <strong>노드 id</strong> 를 파라미터로 받을 수 있음. 이걸 payload에 실어 보내면, 프론트에서 정확한 노드의 해당 위젯만 업데이트 가능. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI+2</a></p>
  </li>
  <li>
    <p><strong>서버에서 주기적으로 send_sync 발사</strong><br />
폴링 루프 매 턴마다</p>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>arduino
     
PromptServer.instance.send_sync(
  "impact-node-feedback",
  {"node_id": node_id, "widget_name": "status_md", "value": table_md}
)
</code></pre></div>    </div>
  </li>
</ol>

<p>로 위젯 값을 푸시. (다수 예제들이 같은 패턴으로 상태를 실시간 알림) <a href="https://huggingface.co/spaces/Freak-ppa/ioatol/blob/b162d43c5cd550b037fb83fa04cc6301339f36f4/ComfyUI/custom_nodes/cg-use-everywhere/use_everywhere.py?utm_source=chatgpt.com">Hugging Face+2</a></p>

<hr />

<h1 id="0-프론트엔드웹-코드--리스너-등록">0) 프론트엔드(웹) 코드 — 리스너 등록</h1>

<p><code class="language-plaintext highlighter-rouge">ComfyUI/web/extensions/impact_node_feedback.js</code> (파일명은 임의)로 저장:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>js

function nodeFeedbackHandler(event) {
  let nodes = app.graph._nodes_by_id;
  let node = nodes[event.detail.node_id];
  if (node) {
    const w = node.widgets.find((w) =&gt; event.detail.widget_name === w.name);
    if (w) {
      w.value = event.detail.value;
      // UI 즉시 갱신
      if (w.callback) w.callback(w.value);
      node.setDirtyCanvas(true, true);
    }
  }
}
api.addEventListener("impact-node-feedback", nodeFeedbackHandler);
</code></pre></div></div>

<blockquote>
  <p>이건 ComfyUI의 커스텀 메시지 이벤트 처리 패턴과 1:1로 맞음. 서버에서 <code class="language-plaintext highlighter-rouge">send_sync</code>로 <code class="language-plaintext highlighter-rouge">"impact-node-feedback"</code>를 보낼 거야. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI</a></p>
</blockquote>

<hr />

<h1 id="1-파이썬-노드-패치--위젯node_id라이브업데이트-추가">1) 파이썬 노드 패치 — 위젯·node_id·라이브업데이트 추가</h1>

<p>아래 <strong>추가/수정 블록만</strong> 기존 노드 파일에 반영하면 돼. (이전 답변에서 만든 LSFSubmitAndWait 기준)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 상단 import에 추가
</span><span class="kn">from</span> <span class="n">server</span> <span class="kn">import</span> <span class="n">PromptServer</span>  <span class="c1"># send_sync를 위해
</span>
<span class="c1"># ----- 유틸: 마크다운 테이블 생성 -----
</span><span class="k">def</span> <span class="nf">_short</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="nf">else </span><span class="p">(</span><span class="n">s</span><span class="p">[:</span><span class="n">limit</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">job_rows</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">],</span> <span class="n">width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">80</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    job_rows: [{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">123</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">RUN</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">bsub ...</span><span class="sh">"</span><span class="s">}, ...]
    </span><span class="sh">"""</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">|------:|:------:|---------|</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">job_rows</span><span class="p">:</span>
        <span class="n">jid</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">st</span>  <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_short</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span> <span class="n">width_limit</span><span class="p">)</span>
        <span class="c1"># 파이프 이스케이프는 단순히 백틱 감싸기로 회피
</span>        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">| `</span><span class="si">{</span><span class="n">jid</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">st</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="s">` |</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="c1"># ----- LSFSubmitAndWait 클래스 변경 -----
</span><span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">optional</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># 표시 전용 위젯(라이브 상태 보드)
</span>                <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span>
                    <span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="se">\n</span><span class="s">|------:|:------:|---------|</span><span class="se">\n</span><span class="s">(실행 중 라이브로 갱신됩니다)</span><span class="sh">"</span><span class="p">}),</span>
                <span class="c1"># 줄 길이 제한(명령어 과도하게 길 때)
</span>                <span class="sh">"</span><span class="s">cmd_width_limit</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">INT</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200</span><span class="p">}),</span>
                <span class="c1"># 필요 시 끄기
</span>                <span class="sh">"</span><span class="s">live_update</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">BOOL</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="c1"># node_id를 받기 위한 hidden 입력 (공식 문서 패턴)
</span>            <span class="sh">"</span><span class="s">hidden</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span> <span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNIQUE_ID</span><span class="sh">"</span> <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                  <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                  <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                  <span class="n">status_md</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span>
                  <span class="n">cmd_width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>
                  <span class="n">live_update</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                  <span class="n">node_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># ... (기존 run 코드의 "옵션 파싱" 직후에 이어서) ...
</span>
        <span class="c1"># 1) 제출
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>

        <span class="c1"># 제출한 커맨드 메타 맵 (job_id -&gt; cmd)
</span>        <span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                <span class="n">jid_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="c1"># 2) 전역 캐시/백엔드
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">full_cache</span> <span class="o">=</span> <span class="nc">FullListSharedCache</span><span class="p">(</span>
            <span class="n">cache_file</span><span class="p">,</span>
            <span class="n">full_ttl_s</span><span class="o">=</span><span class="n">full_ttl_s</span><span class="p">,</span>
            <span class="n">min_refresh_gap_s</span><span class="o">=</span><span class="n">min_refresh_gap_s</span><span class="p">,</span>
            <span class="n">force_refresh_on_miss</span><span class="o">=</span><span class="n">force_refresh_on_miss</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBjobsFullBackend</span><span class="p">(</span><span class="n">full_status_cmd_template</span><span class="o">=</span><span class="n">full_status_cmd_template</span><span class="p">)</span>

        <span class="c1"># 2-1) 제출 직후 캐시 시드(커맨드 메타 포함)
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="c1"># seed_submitted가 meta를 파일/메모리 모두에 저장하도록 앞서 구현해둠
</span>            <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
            <span class="n">full_cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">meta</span><span class="p">)</span>

        <span class="c1"># (신규) 초기 UI 업데이트 한번 수행
</span>        <span class="k">if</span> <span class="n">live_update</span> <span class="ow">and</span> <span class="n">node_id</span> <span class="ow">and</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
            <span class="n">table_md</span> <span class="o">=</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">width_limit</span><span class="o">=</span><span class="n">cmd_width_limit</span><span class="p">)</span>
            <span class="n">PromptServer</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="nf">send_sync</span><span class="p">(</span><span class="sh">"</span><span class="s">impact-node-feedback</span><span class="sh">"</span><span class="p">,</span>
                                            <span class="p">{</span><span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">node_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">widget_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">table_md</span><span class="p">})</span>

        <span class="c1"># 3) 완료까지 대기 + 주기적 UI 업데이트
</span>        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">final_statuses</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="n">waited_sec</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">full_cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
            <span class="n">final_statuses</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>

            <span class="c1"># (신규) 라이브 업데이트
</span>            <span class="k">if</span> <span class="n">live_update</span> <span class="ow">and</span> <span class="n">node_id</span> <span class="ow">and</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span>
                         <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">N/A</span><span class="sh">"</span><span class="p">,</span>
                         <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
                <span class="n">table_md</span> <span class="o">=</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">width_limit</span><span class="o">=</span><span class="n">cmd_width_limit</span><span class="p">)</span>
                <span class="n">PromptServer</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="nf">send_sync</span><span class="p">(</span><span class="sh">"</span><span class="s">impact-node-feedback</span><span class="sh">"</span><span class="p">,</span>
                                                <span class="p">{</span><span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">node_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">widget_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">table_md</span><span class="p">})</span>

            <span class="k">if</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">values</span><span class="p">()):</span>
                <span class="k">break</span>
            <span class="k">if</span> <span class="n">max_wait_s</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_wait_s</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">poll_interval_s</span><span class="p">)))</span>

        <span class="n">waited_sec</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span>
        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="nf">all</span><span class="p">((</span><span class="n">st</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="ow">and</span> <span class="n">st</span> <span class="k">for</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">values</span><span class="p">())</span>

        <span class="c1"># (나머지 결과 저장/반환 로직은 기존 그대로)
</span>        <span class="c1"># ...
</span></code></pre></div></div>

<blockquote>
  <p>포인트</p>

  <ul>
    <li>
      <p><code class="language-plaintext highlighter-rouge">hidden</code>에 <code class="language-plaintext highlighter-rouge">"UNIQUE_ID"</code> 추가 → <code class="language-plaintext highlighter-rouge">run(..., node_id=...)</code>로 받을 수 있음. 서버에서 이 값을 payload에 담아 보냄. 프론트는 <code class="language-plaintext highlighter-rouge">node_id</code>로 해당 노드의 <code class="language-plaintext highlighter-rouge">status_md</code> 위젯만 갱신. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI</a></p>
    </li>
    <li>
      <p>메시지 발사는 <code class="language-plaintext highlighter-rouge">PromptServer.instance.send_sync(&lt;event&gt;, &lt;payload&gt;)</code> 형식. (여러 커스텀 노드들이 이 패턴으로 실시간 상태를 보내는 사례 다수) <a href="https://huggingface.co/spaces/Freak-ppa/ioatol/blob/b162d43c5cd550b037fb83fa04cc6301339f36f4/ComfyUI/custom_nodes/cg-use-everywhere/use_everywhere.py?utm_source=chatgpt.com">Hugging Face+1</a></p>
    </li>
  </ul>

</blockquote>

<hr />

<h2 id="결과-화면-예시-string-위젯-내용">결과 화면 예시 (String 위젯 내용)</h2>
<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">|</span> <span class="no">JOB</span> <span class="no">ID</span> <span class="o">|</span> <span class="no">STATUS</span> <span class="o">|</span> <span class="no">COMMAND</span> <span class="o">|</span>
<span class="o">|------</span><span class="ss">:|</span><span class="p">:</span><span class="o">------</span><span class="ss">:|</span><span class="o">---------|</span>
<span class="o">|</span> <span class="sb">`124578`</span> <span class="o">|</span> <span class="sb">`RUN`</span> <span class="o">|</span> <span class="sb">`bsub -q short -J test1 sleep 5`</span> <span class="o">|</span>
<span class="o">|</span> <span class="sb">`124579`</span> <span class="o">|</span> <span class="sb">`PEND`</span> <span class="o">|</span> <span class="sb">`bsub -q short -J test2 sleep 8`</span> <span class="o">|</span>
<span class="o">|</span> <span class="sb">`124580`</span> <span class="o">|</span> <span class="sb">`DONE`</span> <span class="o">|</span> <span class="sb">`bsub -q short -J test3 sleep 2`</span> <span class="o">|</span>
</code></pre></div></div>

<ul>
  <li>마크다운 테이블을 “렌더링”하지는 않지만, <strong>가독성 높은 텍스트 표</strong> 로 잘 보여줘. (String 위젯은 Markdown 해석을 안 하므로, 표 텍스트 형태로 보는 개념)</li>
</ul>

<hr />

<h2 id="추가-팁">추가 팁</h2>

<ul>
  <li>
    <p><strong>업데이트 빈도(스팸 방지)</strong><br />
<code class="language-plaintext highlighter-rouge">poll_interval_s</code>가 너무 작으면 UI도 그만큼 자주 갱신됨. 필요하면 “마지막 송신 시각”을 저장해 <strong>1~2초 쓰로틀</strong> 을 추가해도 좋음.</p>
  </li>
  <li>
    <p><strong>여러 클라이언트 탭 동시 접속</strong><br />
특정 탭만 갱신하고 싶다면 <code class="language-plaintext highlighter-rouge">send_sync(..., sid=PromptServer.instance.client_id)</code>로 <strong>현재 클라이언트에만</strong> 보내는 패턴도 있어. (여러 예제 노드가 이 방식 사용) <a href="https://gitee.com/failurejack/ComfyUI/blob/master/execution.py?utm_source=chatgpt.com">Gitee</a></p>
  </li>
  <li>
    <p><strong>명령어 길이</strong><br />
<code class="language-plaintext highlighter-rouge">cmd_width_limit</code>로 긴 커맨드를 줄여 보여줌. 필요하면 툴팁/별도 대시보드로 확장 가능.</p>
  </li>
</ul>

<hr />

<h2 id="요약-1">요약</h2>

<ul>
  <li>
    <p><strong>Q1</strong> : 파일 캐시 + 프로세스 내 싱글톤 메모리 캐시(이미 반영)로 <strong>bjobs -a 과다 호출 방지</strong> 및 <strong>동시 노드 안전</strong>.</p>
  </li>
  <li>
    <p><strong>Q2</strong> : <code class="language-plaintext highlighter-rouge">send_sync("impact-node-feedback", {...})</code> + <code class="language-plaintext highlighter-rouge">hidden UNIQUE_ID</code> + 표시용 <code class="language-plaintext highlighter-rouge">status_md</code> 위젯으로, <strong>런타임 라이브 상태판</strong> 구현 완료. (공식 문서의 커스텀 메시지/노드 id 전달 패턴 준수) <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI</a></p>
  </li>
</ul>

<p>원하면 <strong>진짜 Markdown 렌더</strong>(HTML 패널)나 <strong>컬러 뱃지/아이콘</strong> , <strong>EXIT 원인/에러 로그</strong> 컬럼도 붙여줄 수 있어.</p>

<p class="chat--user">

전체 코드 정리해서 다시 써줘(파이썬 코드만 써주면 돼). 전체적으로 좀 기능에 비해 코드가 복잡한것 같은데 최적화할 수 있는 부분이 있으면 최적화하면 좋겠어.

</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: custom_nodes/lsf_submit_and_wait.py
# Purpose: ComfyUI Async OUTPUT node to submit LSF jobs (bsub), poll with bjobs -a,
#          share a lightweight global cache across nodes/processes, and live-update
#          a String widget (markdown-like table) during runtime via PromptServer.
#
# Key features (lean &amp; optimized):
# - Async node (SUPPORTS_ASYNC=True), batch-limited parallel bsub submissions.
# - Single, simplified "full list" cache refreshed by `bjobs -a` only when needed:
#     * 2-tier cache: in-process memory snapshot + cross-process JSON file.
#     * TTL &amp; minimal refresh gap + non-blocking refresh lock -&gt; prevents bjobs storms.
#     * Immediate "SUBMITTED" seeding for newly created job IDs (corner case solved).
# - Runtime UI feedback: PromptServer.instance.send_sync("impact-node-feedback", …)
#     * Updates a String widget named "status_md" with a compact markdown table.
#     * Throttled updates to avoid UI spam.
#
# Inputs:
#   - commands (STRING, multiline): multiple bsub lines. Optional inline directive:
#       # LSF: batch_size=4 poll_interval_s=10 full_ttl_s=15 min_refresh_gap_s=5
#       # LSF: ui_update_gap_s=1 max_wait_s=7200 full_status_cmd="bjobs -a -noheader -o \"jobid stat\""
#       (All keys optional; defaults are sensible.)
#   - cwd (STRING): working directory for submissions.
#   - status_md (STRING): display widget (auto-updated during run).
#   - cmd_width_limit (INT): truncate very long command strings in the table.
#   - live_update (BOOL): enable/disable live widget updates.
#   - hidden node_id (UNIQUE_ID): used to address the specific node widget.
#
# Outputs (OUTPUT node):
#   - job_ids (STRING): comma-separated list
#   - results_json (STRING): summary JSON (final status, timing, options, log file path)
#
# Minimal dependencies: Python stdlib + ComfyUI's PromptServer (bundled).
</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">shlex</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="c1"># ComfyUI server for live widget updates
</span><span class="kn">from</span> <span class="n">server</span> <span class="kn">import</span> <span class="n">PromptServer</span>  <span class="c1"># noqa
</span>
<span class="c1"># fcntl (POSIX) for file locks. If unavailable (e.g. Windows), degrade gracefully.
</span><span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">fcntl</span>  <span class="c1"># type: ignore
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>  <span class="c1"># pragma: no cover
</span>    <span class="n">fcntl</span> <span class="o">=</span> <span class="bp">None</span>

<span class="c1"># ---------------------------- Basic utils ----------------------------
</span>
<span class="n">JOB_ID_REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>
<span class="n">TERMINAL_STATES</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">}</span>  <span class="c1"># Adjust if your cluster uses other terminal labels
</span>
<span class="k">def</span> <span class="nf">iso_now</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(</span><span class="n">timespec</span><span class="o">=</span><span class="sh">"</span><span class="s">seconds</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">Z</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">default_cache_dir</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">COMFYUI_LSF_CACHE_DIR</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">gettempdir</span><span class="p">(),</span> <span class="sh">"</span><span class="s">comfyui_lsf_cache</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">path</span>

<span class="k">def</span> <span class="nf">_short</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="nf">else </span><span class="p">(</span><span class="n">s</span><span class="p">[:</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">limit</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands_text</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Parse optional inline LSF options from leading lines:
      # LSF: key=value key=value ...
    Returns (options_dict, command_lines)
    </span><span class="sh">"""</span>
    <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">raw_lines</span> <span class="o">=</span> <span class="n">commands_text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()</span>
    <span class="n">cmd_lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">raw_lines</span><span class="p">:</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">^\s*#\s*LSF:\s*(.+)$</span><span class="sh">"</span><span class="p">,</span> <span class="n">ln</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">kv</span> <span class="ow">in</span> <span class="n">shlex</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="nf">group</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="n">posix</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
                <span class="k">if</span> <span class="sh">"</span><span class="s">=</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">kv</span><span class="p">:</span>
                    <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">kv</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">=</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
                    <span class="n">v_strip</span> <span class="o">=</span> <span class="n">v</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">lower</span><span class="p">()</span>
                    <span class="k">if</span> <span class="n">v_strip</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">false</span><span class="sh">"</span><span class="p">):</span>
                        <span class="n">options</span><span class="p">[</span><span class="n">k</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="p">(</span><span class="n">v_strip</span> <span class="o">==</span> <span class="sh">"</span><span class="s">true</span><span class="sh">"</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">try</span><span class="p">:</span>
                            <span class="n">options</span><span class="p">[</span><span class="n">k</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
                        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                            <span class="n">options</span><span class="p">[</span><span class="n">k</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span> <span class="o">=</span> <span class="n">v</span>
            <span class="k">continue</span>
        <span class="c1"># keep non-empty command lines, ignore other comments/empties
</span>        <span class="k">if</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">().</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s"># LSF:</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">cmd_lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">options</span><span class="p">,</span> <span class="n">cmd_lines</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
        <span class="n">cmd</span><span class="p">,</span>
        <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span> <span class="k">if</span> <span class="n">cwd</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c1"># LSF standard: "Job &lt;12345&gt; is submitted to queue &lt;...&gt;."
</span>    <span class="k">return</span> <span class="n">JOB_ID_REGEX</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">stdout</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">)</span>

<span class="c1"># ---------------------------- LSF backend ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFBackend</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Minimal backend that fetches ONE full snapshot of job statuses via `bjobs -a`.</span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">full_status_cmd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># default format: columns: jobid stat
</span>        <span class="n">self</span><span class="p">.</span><span class="n">full_status_cmd</span> <span class="o">=</span> <span class="n">full_status_cmd</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">full_snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_status_cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{}</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">ln</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ln</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">parts</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="c1"># ---------------------------- Global cache (lean, 2-tier) ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Lean 2-tier cache for job statuses (ALL jobs snapshot):
      - In-process memory snapshot (fast-path, avoids file I/O most of the time)
      - Cross-process JSON file snapshot (source of truth)
    Concurrency control:
      - Non-blocking refresh lock file ensures only one process runs `bjobs -a`
      - TTL + minimal refresh gap to throttle refreshes
    File structure:
      {
        </span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">&lt;jobid&gt;</span><span class="sh">"</span><span class="s">: {</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">RUN</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="s">: 169...}, ... },
        </span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">&lt;jobid&gt;</span><span class="sh">"</span><span class="s">: {</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">}, ... },
        </span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="s">: 169...,
        </span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">2025-...</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">ttl_or_miss</span><span class="sh">"</span><span class="s"> }
      }
    </span><span class="sh">"""</span>

    <span class="n">_mem_jobs</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">dict</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">_mem_last_ts</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">_mem_lock</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>  <span class="c1"># protect _mem_jobs/_mem_last_ts
</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">full_ttl_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span> <span class="n">min_refresh_gap_s</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">5</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">=</span> <span class="n">cache_file</span>
        <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">full_ttl_s</span><span class="p">)</span>
        <span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">min_refresh_gap_s</span><span class="p">)</span>
        <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">cache_file</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">cache_file</span><span class="p">):</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}},</span> <span class="n">f</span><span class="p">)</span>

    <span class="c1"># ---------- file lock helpers ----------
</span>    <span class="k">def</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">nonblock</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
        <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">a+</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_EX</span> <span class="o">|</span> <span class="p">(</span><span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_NB</span> <span class="k">if</span> <span class="n">nonblock</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span>
            <span class="k">except</span> <span class="nb">BlockingIOError</span><span class="p">:</span>
                <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                <span class="k">return</span> <span class="bp">None</span>
        <span class="k">return</span> <span class="n">fh</span>

    <span class="k">def</span> <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fh</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">fh</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_UN</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

    <span class="c1"># ---------- file I/O ----------
</span>    <span class="k">def</span> <span class="nf">_read_file</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>

    <span class="k">def</span> <span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.tmp</span><span class="sh">"</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="c1"># keep memory in sync
</span>        <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

    <span class="c1"># ---------- public API ----------
</span>    <span class="k">def</span> <span class="nf">seed_submitted</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">meta</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">dict</span><span class="p">]</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        Immediately make new job IDs visible as SUBMITTED (fresh) in both memory and file.
        Useful for the edge case where another node asks before bjobs snapshot contains them.
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>

        <span class="c1"># Update memory (fast path)
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>

        <span class="c1"># Merge into file (single short critical section)
</span>        <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
            <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
            <span class="k">if</span> <span class="n">meta</span><span class="p">:</span>
                <span class="n">jm</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">meta</span><span class="p">:</span>
                        <span class="n">jm</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span>
                <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jm</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_maybe_refresh</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">backend</span><span class="p">:</span> <span class="n">LSFBackend</span><span class="p">,</span> <span class="n">reason</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        Refresh the full snapshot if nobody else is doing it, and minimal gap is respected.
        Non-blocking: returns False if someone else just refreshed or lock couldn</span><span class="sh">'</span><span class="s">t be taken.
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="c1"># Take a non-blocking refresh lock
</span>        <span class="n">lock_fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.refresh.lock</span><span class="sh">"</span><span class="p">,</span> <span class="n">nonblock</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">lock_fh</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Double-check gap again after taking the lock
</span>            <span class="n">data2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
            <span class="n">last_ts2</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">min_refresh_gap_s</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>

            <span class="n">snapshot</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">full_snapshot</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">snapshot</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>

            <span class="n">now2</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">ts</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">ts</span><span class="p">}</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="n">meta</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">reason</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">lock_fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">LSFBackend</span><span class="p">,</span> <span class="n">force_on_miss</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        Return statuses for the given job_ids using 2-tier cache:
          1) If in-memory snapshot is fresh -&gt; read from memory (no file I/O).
          2) Else read file once and update memory.
          3) If TTL expired or we miss any job_id (and force_on_miss=True),
             try a single non-blocking full refresh (bjobs -a) if the minimal gap elapsed.
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># Stage 1: memory fast-path
</span>        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_lock</span><span class="p">:</span>
            <span class="n">mem_is_fresh</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_last_ts</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span>
            <span class="k">if</span> <span class="n">mem_is_fresh</span><span class="p">:</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
                <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>

        <span class="c1"># Helper: check if entry is fresh enough
</span>        <span class="k">def</span> <span class="nf">fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ent</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))</span> <span class="o">&lt;=</span> <span class="n">self</span><span class="p">.</span><span class="n">full_ttl_s</span>

        <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">mem_is_fresh</span><span class="p">:</span>
            <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">if</span> <span class="n">force_on_miss</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="nf">fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">):</span>
                    <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="k">break</span>

        <span class="k">if</span> <span class="n">need_refresh</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_maybe_refresh</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">reason</span><span class="o">=</span><span class="sh">"</span><span class="s">ttl_or_miss</span><span class="sh">"</span><span class="p">)</span>
            <span class="c1"># Read from memory again (already updated if refresh happened)
</span>            <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>

        <span class="k">return</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>

<span class="c1"># ---------------------------- Submission &amp; waiting ----------------------------
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">commands</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">:</span> <span class="nb">int</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Submit each line (bsub ...) as an independent command. Limit concurrency by batch_size.
    Returns (job_ids, submissions_detail)
    </span><span class="sh">"""</span>
    <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">batch_size</span><span class="p">)))</span>
    <span class="n">submissions</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_submit_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">sem</span><span class="p">:</span>
            <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">)</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cmd</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">err</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">jids</span><span class="p">,</span>
            <span class="p">}</span>

    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_submit_one</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">submissions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="k">await</span> <span class="n">t</span><span class="p">)</span>
    <span class="n">job_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])]</span>
    <span class="k">return</span> <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span>

<span class="k">def</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">job_rows</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">],</span> <span class="n">width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Build a compact markdown-like table: JOB ID | STATUS | COMMAND
    (String widget does not render markdown; table is for readability.)
    </span><span class="sh">"""</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">|------:|:------:|---------|</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">job_rows</span><span class="p">:</span>
        <span class="n">jid</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">st</span>  <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_short</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span> <span class="n">width_limit</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">| `</span><span class="si">{</span><span class="n">jid</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">st</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="s">` |</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="c1"># ---------------------------- ComfyUI Node ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Async OUTPUT node that:
      - Submits multiple bsub jobs (batch-limited parallelism)
      - Polls statuses using a shared bjobs -a snapshot cache
      - Live-updates a String widget with JOB ID / STATUS / COMMAND
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short -J test sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">optional</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span>
                    <span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="se">\n</span><span class="s">|------:|:------:|---------|</span><span class="se">\n</span><span class="s">(실행 중에 갱신됩니다)</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cmd_width_limit</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">INT</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span> <span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="mi">40</span><span class="p">,</span> <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="mi">200</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">live_update</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">BOOL</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">hidden</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># ComfyUI injects this; we'll use it to target the widget updates
</span>                <span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNIQUE_ID</span><span class="sh">"</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span>
                  <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                  <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
                  <span class="n">status_md</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span>
                  <span class="n">cmd_width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">100</span><span class="p">,</span>
                  <span class="n">live_update</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">True</span><span class="p">,</span>
                  <span class="n">node_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>

        <span class="c1"># ---- 1) Parse inline options &amp; clean command lines ----
</span>        <span class="n">opts</span><span class="p">,</span> <span class="n">lines</span> <span class="o">=</span> <span class="nf">parse_inline_options_and_commands</span><span class="p">(</span><span class="n">commands</span><span class="p">)</span>
        <span class="n">batch_size</span>         <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
        <span class="n">poll_interval_s</span>    <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>
        <span class="n">full_ttl_s</span>         <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">full_ttl_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>                <span class="c1"># snapshot TTL
</span>        <span class="n">min_refresh_gap_s</span>  <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">min_refresh_gap_s</span><span class="sh">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">))</span>           <span class="c1"># min gap between -a
</span>        <span class="n">full_status_cmd</span>    <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">full_status_cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span><span class="p">)</span>
        <span class="n">max_wait_s</span>         <span class="o">=</span> <span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="n">ui_update_gap_s</span>    <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ui_update_gap_s</span><span class="sh">"</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">))</span>         <span class="c1"># throttle UI pushes
</span>        <span class="n">force_on_miss</span>      <span class="o">=</span> <span class="nf">bool</span><span class="p">(</span><span class="n">opts</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">force_refresh_on_miss</span><span class="sh">"</span><span class="p">,</span> <span class="bp">True</span><span class="p">))</span>

        <span class="k">if</span> <span class="nf">isinstance</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span> <span class="ow">and</span> <span class="n">max_wait_s</span><span class="p">.</span><span class="nf">isdigit</span><span class="p">():</span>
            <span class="n">max_wait_s</span> <span class="o">=</span> <span class="nf">int</span><span class="p">(</span><span class="n">max_wait_s</span><span class="p">)</span>

        <span class="c1"># Filter out accidental empty command lines
</span>        <span class="n">lines</span> <span class="o">=</span> <span class="p">[</span><span class="n">ln</span> <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">lines</span> <span class="k">if</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()]</span>

        <span class="c1"># ---- 2) Submit jobs (async batch-limited) ----
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">)</span>

        <span class="c1"># Map job_id -&gt; command (for UI &amp; logs)
</span>        <span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                <span class="n">jid_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="c1"># ---- 3) Shared cache &amp; backend ----
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">cache</span> <span class="o">=</span> <span class="nc">LSFCache</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="n">full_ttl_s</span><span class="o">=</span><span class="n">full_ttl_s</span><span class="p">,</span> <span class="n">min_refresh_gap_s</span><span class="o">=</span><span class="n">min_refresh_gap_s</span><span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBackend</span><span class="p">(</span><span class="n">full_status_cmd</span><span class="o">=</span><span class="n">full_status_cmd</span><span class="p">)</span>

        <span class="c1"># Seed newly submitted jobs to handle "just-submitted not in cache yet" edge
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
            <span class="n">cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">meta</span><span class="p">)</span>

        <span class="c1"># ---- 4) Initial live update (SUBMITTED) ----
</span>        <span class="k">def</span> <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">live_update</span> <span class="ow">and</span> <span class="n">node_id</span><span class="p">:</span>
                <span class="n">table</span> <span class="o">=</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">width_limit</span><span class="o">=</span><span class="n">cmd_width_limit</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">PromptServer</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="nf">send_sync</span><span class="p">(</span>
                        <span class="sh">"</span><span class="s">impact-node-feedback</span><span class="sh">"</span><span class="p">,</span>
                        <span class="p">{</span><span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">node_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">widget_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">table</span><span class="p">}</span>
                    <span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="k">pass</span>  <span class="c1"># UI update failure should not impact job control
</span>
        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">init_rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
            <span class="nf">push_ui</span><span class="p">(</span><span class="n">init_rows</span><span class="p">)</span>

        <span class="c1"># ---- 5) Poll loop until all terminal or timeout ----
</span>        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">last_ui</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">final_statuses</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>

        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">,</span> <span class="n">force_on_miss</span><span class="o">=</span><span class="n">force_on_miss</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">st</span> <span class="o">=</span> <span class="p">(</span><span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span> <span class="ow">or</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">upper</span><span class="p">()</span>
                <span class="n">final_statuses</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span> <span class="k">if</span> <span class="n">st</span> <span class="k">else</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

            <span class="c1"># Throttled live UI update
</span>            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ui</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">ui_update_gap_s</span><span class="p">:</span>
                <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">N/A</span><span class="sh">"</span><span class="p">,</span>
                         <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
                <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>
                <span class="n">last_ui</span> <span class="o">=</span> <span class="n">now</span>

            <span class="c1"># All terminal?
</span>            <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">and</span> <span class="nf">all</span><span class="p">((</span><span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">):</span>
                <span class="k">break</span>

            <span class="c1"># Timeout?
</span>            <span class="k">if</span> <span class="n">max_wait_s</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">max_wait_s</span><span class="p">:</span>
                <span class="k">break</span>

            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">poll_interval_s</span><span class="p">)))</span>

        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">waited_sec</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="p">(</span><span class="n">job_ids</span> <span class="ow">and</span> <span class="nf">all</span><span class="p">((</span><span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">))</span>

        <span class="c1"># Final UI update (non-throttled, shows last state)
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">N/A</span><span class="sh">"</span><span class="p">,</span>
                     <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
            <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>

        <span class="c1"># ---- 6) Persist a concise run log (optional, handy for auditing) ----
</span>        <span class="n">results_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">runs</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">session_tag</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">_</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">results_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">results_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">result_</span><span class="si">{</span><span class="n">session_tag</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">failed_submissions</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span>
            <span class="k">if</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">completed_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">completed_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">duration_sec</span><span class="sh">"</span><span class="p">:</span> <span class="n">waited_sec</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_ids</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">final_status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">all_done</span><span class="sh">"</span><span class="p">:</span> <span class="nf">bool</span><span class="p">(</span><span class="n">all_done</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">failed_submissions</span><span class="sh">"</span><span class="p">:</span> <span class="n">failed_submissions</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cwd</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">options</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">batch_size</span><span class="sh">"</span><span class="p">:</span> <span class="n">batch_size</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">poll_interval_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">poll_interval_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">full_ttl_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">full_ttl_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">min_refresh_gap_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">min_refresh_gap_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">full_status_cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">full_status_cmd</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">max_wait_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">max_wait_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">ui_update_gap_s</span><span class="sh">"</span><span class="p">:</span> <span class="n">ui_update_gap_s</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">force_refresh_on_miss</span><span class="sh">"</span><span class="p">:</span> <span class="n">force_on_miss</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">results_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">results_path</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">results_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="c1"># ---- 7) Return outputs ----
</span>        <span class="n">job_ids_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="n">results_json_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">job_ids_str</span><span class="p">,</span> <span class="n">results_json_str</span><span class="p">)</span>

<span class="c1"># ---------------------------- Node registration ----------------------------
</span>
<span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFSubmitAndWait</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Submit &amp; Wait</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="chat--user">

근데 # LSF: key=value 이게 뭐야? 이게 official한 동작이야?

</p>

<p>짧게 결론부터요:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge"># LSF: key=value</code>는 <strong>제가 만든 “인라인 설정 주석” 규약</strong> 이에요.<br />
<strong>ComfyUI 공식 기능도 아니고, LSF 공식 문법도 아닙니다.</strong><br />
우리 노드가 그 줄을 읽어 옵션으로 해석한 뒤, <strong>실제 실행 명령에서는 제거</strong> 합니다. (쉘에 흘러가지 않음)</li>
</ul>

<p>step-by-step로 정리하면:</p>

<ol>
  <li>
    <p>왜 넣었나?</p>

    <ul>
      <li>
        <p>입력을 <code class="language-plaintext highlighter-rouge">commands</code>/<code class="language-plaintext highlighter-rouge">cwd</code> 두 개로 단순화하면서도 배치 크기, 폴링 주기 같은 <strong>세부 옵션을 텍스트만으로</strong> 조정하려고 넣은 <strong>편의용</strong> 입니다.</p>
      </li>
      <li>
        <p>워크플로 공유/복붙 시 설정이 같이 따라가서 재현성이 좋아요.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>안전한가?</p>

    <ul>
      <li>
        <p>그 줄은 <strong>명령으로 실행되지 않습니다.</strong> 파서가 <code class="language-plaintext highlighter-rouge"># LSF:</code>로 시작하는 줄만 옵션으로 읽고, 실제 <code class="language-plaintext highlighter-rouge">bsub</code> 제출 목록에선 제외합니다.</p>
      </li>
      <li>
        <p>혹시 그대로 쉘 스크립트에 붙여도 <code class="language-plaintext highlighter-rouge">#</code>는 주석이라 부작용은 없습니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>“공식”을 원하면? (권장 대안)</p>

    <ul>
      <li>
        <p><strong>ComfyUI 방식</strong> 은 각 옵션을 <strong>위젯(옵션 입력값)</strong> 으로 노출하는 겁니다.</p>
      </li>
      <li>
        <p>이미 제공한 코드엔 <code class="language-plaintext highlighter-rouge">status_md</code>, <code class="language-plaintext highlighter-rouge">cmd_width_limit</code>, <code class="language-plaintext highlighter-rouge">live_update</code>처럼 <strong>optional 위젯</strong> 을 쓰고 있어요. 원하시면 <code class="language-plaintext highlighter-rouge">batch_size</code>, <code class="language-plaintext highlighter-rouge">poll_interval_s</code>, <code class="language-plaintext highlighter-rouge">full_ttl_s</code>, <code class="language-plaintext highlighter-rouge">min_refresh_gap_s</code>, <code class="language-plaintext highlighter-rouge">ui_update_gap_s</code>, <code class="language-plaintext highlighter-rouge">full_status_cmd</code>, <code class="language-plaintext highlighter-rouge">max_wait_s</code>, <code class="language-plaintext highlighter-rouge">force_refresh_on_miss</code>도 전부 위젯화하면 됩니다.</p>
      </li>
      <li>
        <p>우선순위도 깔끔히 정할 수 있어요: <strong>위젯 값 &gt; 인라인 주석 &gt; 디폴트</strong>. (혹은 인라인을 완전히 제거)</p>
      </li>
    </ul>
  </li>
</ol>

<p>원하면 인라인 파서를 제거하고 <strong>위젯만 쓰는</strong> 간단 패치 스니펫도 드릴게요.</p>

<p class="chat--user">

굳이 이걸 다 옵션으로 하지말고 최적값으로 상단에 CONSTANT로 처리하자. 

</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: custom_nodes/lsf_submit_and_wait.py
# Purpose: ComfyUI Async OUTPUT node to submit LSF bsub jobs, poll with `bjobs -a`,
#          share a lightweight global cache, and live-update a String widget
#          using PromptServer during runtime.
#
# NOTE: 모든 동작 파라미터는 아래 CONSTANTS 로 고정 (옵션/인라인 파싱 없음)
</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="kn">from</span> <span class="n">server</span> <span class="kn">import</span> <span class="n">PromptServer</span>  <span class="c1"># ComfyUI runtime UI updates
</span>
<span class="c1"># ---------------------------- CONSTANTS (Tweak here) ----------------------------
</span>
<span class="c1"># Submission / polling behavior
</span><span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">4</span>                      <span class="c1"># 동시에 제출할 bsub 개수(세마포어)
</span><span class="n">POLL_INTERVAL_S</span> <span class="o">=</span> <span class="mi">10</span>                <span class="c1"># 폴링 주기(초)
</span><span class="n">MAX_WAIT_S</span> <span class="o">=</span> <span class="bp">None</span>                   <span class="c1"># 전체 대기 타임아웃(초) - None이면 무제한
</span>
<span class="c1"># Cache behavior
</span><span class="n">FULL_TTL_S</span> <span class="o">=</span> <span class="mi">10</span>                     <span class="c1"># 전체 스냅샷(메모리/파일) TTL(초)
</span><span class="n">MIN_REFRESH_GAP_S</span> <span class="o">=</span> <span class="mi">5</span>               <span class="c1"># bjobs -a 재호출 최소 간격(초)
</span><span class="n">FORCE_REFRESH_ON_MISS</span> <span class="o">=</span> <span class="bp">True</span>        <span class="c1"># 캐시 미스 시 TTL 무시하고 조기 리프레시 시도(간격은 준수)
</span>
<span class="c1"># bjobs -a 명령 템플릿 (jobid stat 두 컬럼을 기대)
</span><span class="n">FULL_STATUS_CMD</span> <span class="o">=</span> <span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span>

<span class="c1"># Live UI feedback (String 위젯)
</span><span class="n">UI_UPDATE_GAP_S</span> <span class="o">=</span> <span class="mf">1.0</span>               <span class="c1"># UI 업데이트 쓰로틀 간격(초)
</span><span class="n">CMD_WIDTH_LIMIT</span> <span class="o">=</span> <span class="mi">100</span>               <span class="c1"># COMMAND 열 표시 길이 제한
</span>
<span class="c1"># Terminal states for LSF
</span><span class="n">TERMINAL_STATES</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># Cache file name (under /tmp or $COMFYUI_LSF_CACHE_DIR)
</span><span class="n">CACHE_FILENAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span>

<span class="c1"># ---------------------------- Utilities ----------------------------
</span>
<span class="n">JOB_ID_REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">iso_now</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(</span><span class="n">timespec</span><span class="o">=</span><span class="sh">"</span><span class="s">seconds</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">Z</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">default_cache_dir</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">COMFYUI_LSF_CACHE_DIR</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">gettempdir</span><span class="p">(),</span> <span class="sh">"</span><span class="s">comfyui_lsf_cache</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">path</span>

<span class="k">def</span> <span class="nf">_short</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="nf">else </span><span class="p">(</span><span class="n">s</span><span class="p">[:</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">limit</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
        <span class="n">cmd</span><span class="p">,</span>
        <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span> <span class="k">if</span> <span class="n">cwd</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
    <span class="p">)</span>
    <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c1"># LSF 표준: "Job &lt;12345&gt; is submitted to queue &lt;...&gt;."
</span>    <span class="k">return</span> <span class="n">JOB_ID_REGEX</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">stdout</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">job_rows</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">],</span> <span class="n">width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">CMD_WIDTH_LIMIT</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">JOB ID | STATUS | COMMAND 표 텍스트(가독성 용).</span><span class="sh">"""</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">|------:|:------:|---------|</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">job_rows</span><span class="p">:</span>
        <span class="n">jid</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">st</span>  <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_short</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span> <span class="n">width_limit</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">| `</span><span class="si">{</span><span class="n">jid</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">st</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="s">` |</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="c1"># ---------------------------- fcntl lock (POSIX best-effort) ----------------------------
</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">fcntl</span>  <span class="c1"># type: ignore
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">fcntl</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># Windows 등에서는 락 없이도 동작(경쟁 가능성 감수)
</span>
<span class="k">def</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">nonblock</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
    <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">a+</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_EX</span> <span class="o">|</span> <span class="p">(</span><span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_NB</span> <span class="k">if</span> <span class="n">nonblock</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span>
        <span class="k">except</span> <span class="nb">BlockingIOError</span><span class="p">:</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
            <span class="k">return</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="n">fh</span>

<span class="k">def</span> <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">fh</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_UN</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="c1"># ---------------------------- LSF backend ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFBackend</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">`bjobs -a` 전체 스냅샷을 한 번에 가져오는 최소 백엔드.</span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">full_status_cmd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">FULL_STATUS_CMD</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">full_status_cmd</span> <span class="o">=</span> <span class="n">full_status_cmd</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">full_snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_status_cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">out</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{}</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="n">out</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">ln</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ln</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">parts</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span>
        <span class="k">return</span> <span class="n">result</span>

<span class="c1"># ---------------------------- Lightweight 2-tier cache ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - In-process memory snapshot (fast-path, 대부분 파일 I/O 회피)
    - Cross-process JSON file snapshot (소스 오브 트루스)
    - TTL + 최소 간격 + refresh 락으로 bjobs -a 폭주 방지
    파일 구조:
      {
        </span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">&lt;jobid&gt;</span><span class="sh">"</span><span class="s">: {</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">RUN</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="s">: 169...}, ... },
        </span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">&lt;jobid&gt;</span><span class="sh">"</span><span class="s">: {</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">}, ... },
        </span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="s">: 169...,
        </span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">ttl_or_miss</span><span class="sh">"</span><span class="s"> }
      }
    </span><span class="sh">"""</span>

    <span class="n">_mem_jobs</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">dict</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">_mem_last_ts</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">_mem_lock</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">=</span> <span class="n">cache_file</span>
        <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">cache_file</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">cache_file</span><span class="p">):</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}},</span> <span class="n">f</span><span class="p">)</span>

    <span class="c1"># file I/O helpers
</span>    <span class="k">def</span> <span class="nf">_read_file</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>

    <span class="k">def</span> <span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.tmp</span><span class="sh">"</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

    <span class="c1"># public API
</span>    <span class="k">def</span> <span class="nf">seed_submitted</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">meta</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">dict</span><span class="p">]</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">방금 제출한 잡을 SUBMITTED로 즉시 캐시에 반영(메모리+파일).</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># memory
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
        <span class="c1"># file
</span>        <span class="n">fh</span> <span class="o">=</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
            <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
            <span class="k">if</span> <span class="n">meta</span><span class="p">:</span>
                <span class="n">jm</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">meta</span><span class="p">:</span>
                        <span class="n">jm</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span>
                <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jm</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_maybe_refresh</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">backend</span><span class="p">:</span> <span class="n">LSFBackend</span><span class="p">,</span> <span class="n">reason</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">TTL 또는 miss로 전체 스냅샷 갱신이 필요할 때, 한 프로세스만 non-blocking 락으로 실제 실행.</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">MIN_REFRESH_GAP_S</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="n">lock_fh</span> <span class="o">=</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.refresh.lock</span><span class="sh">"</span><span class="p">,</span> <span class="n">nonblock</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">lock_fh</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="n">data2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
            <span class="n">last_ts2</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">MIN_REFRESH_GAP_S</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>

            <span class="n">snapshot</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">full_snapshot</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">snapshot</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>

            <span class="n">now2</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now2</span><span class="p">}</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="n">meta</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">reason</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">lock_fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">LSFBackend</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">2-계층 캐시 전략으로 요청 job_ids의 상태를 반환.</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 1) 메모리 패스트패스
</span>        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_lock</span><span class="p">:</span>
            <span class="n">mem_is_fresh</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_last_ts</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">FULL_TTL_S</span>
            <span class="k">if</span> <span class="n">mem_is_fresh</span><span class="p">:</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
                <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>

        <span class="k">def</span> <span class="nf">fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ent</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))</span> <span class="o">&lt;=</span> <span class="n">FULL_TTL_S</span>

        <span class="n">need_refresh</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">mem_is_fresh</span>
        <span class="k">if</span> <span class="n">FORCE_REFRESH_ON_MISS</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="nf">fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">):</span>
                    <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="k">break</span>

        <span class="k">if</span> <span class="n">need_refresh</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_maybe_refresh</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">reason</span><span class="o">=</span><span class="sh">"</span><span class="s">ttl_or_miss</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>  <span class="c1"># refresh 후 메모리에서 재조회
</span>
        <span class="k">return</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>

<span class="c1"># ---------------------------- Submission &amp; waiting ----------------------------
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">commands</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    각 줄을 독립 bsub 명령으로 제출. 동시 제출 개수는 BATCH_SIZE로 제한.
    Returns (job_ids, submissions_detail)
    </span><span class="sh">"""</span>
    <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">BATCH_SIZE</span><span class="p">)))</span>
    <span class="n">submissions</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_submit_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">sem</span><span class="p">:</span>
            <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">)</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cmd</span><span class="p">,</span> <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">,</span> <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">err</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">jids</span><span class="p">}</span>

    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_submit_one</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">submissions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="k">await</span> <span class="n">t</span><span class="p">)</span>

    <span class="n">job_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])]</span>
    <span class="k">return</span> <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span>

<span class="c1"># ---------------------------- ComfyUI Node ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Async OUTPUT node:
      - 멀티라인 bsub 제출 (배치 제한 병렬)
      - bjobs -a 기반 전역 캐시 폴링 (다중 노드/프로세스 공유)
      - 실행 중 String 위젯(status_md)에 JOB/STATUS/COMMAND 표를 지속 갱신
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short -J demo sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">optional</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># 표시 전용(값은 런타임에 서버가 갱신)
</span>                <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span>
                    <span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="se">\n</span><span class="s">|------:|:------:|---------|</span><span class="se">\n</span><span class="s">(실행 중에 갱신됩니다)</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">hidden</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># ComfyUI가 주입하는 유니크 노드 id. 위젯 갱신 타겟팅에 사용.
</span>                <span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNIQUE_ID</span><span class="sh">"</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">status_md</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="n">node_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># 0) 입력 커맨드 정리(빈 줄/주석 제거)
</span>        <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="p">(</span><span class="n">commands</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">#</span><span class="sh">"</span><span class="p">):</span>   <span class="c1"># 사용자가 넣은 일반 주석은 무시
</span>                <span class="k">continue</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>

        <span class="c1"># 1) 제출
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">)</span>

        <span class="c1"># 2) job_id -&gt; cmd 매핑 (UI/로그용)
</span>        <span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                <span class="n">jid_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="c1"># 3) 전역 캐시 &amp; 백엔드
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="n">CACHE_FILENAME</span><span class="p">)</span>
        <span class="n">cache</span> <span class="o">=</span> <span class="nc">LSFCache</span><span class="p">(</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBackend</span><span class="p">(</span><span class="n">FULL_STATUS_CMD</span><span class="p">)</span>

        <span class="c1"># 3-1) 제출 직후 캐시 시드(코너 케이스 완화)
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
            <span class="n">cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">meta</span><span class="p">)</span>

        <span class="c1"># 4) 초기 UI 업데이트 (SUBMITTED)
</span>        <span class="k">def</span> <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">node_id</span><span class="p">:</span>
                <span class="n">table</span> <span class="o">=</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">PromptServer</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="nf">send_sync</span><span class="p">(</span>
                        <span class="sh">"</span><span class="s">impact-node-feedback</span><span class="sh">"</span><span class="p">,</span>
                        <span class="p">{</span><span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">node_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">widget_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">table</span><span class="p">}</span>
                    <span class="p">)</span>
                <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                    <span class="k">pass</span>  <span class="c1"># UI 실패는 컨트롤 로직에 영향 없음
</span>
        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">init_rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
            <span class="nf">push_ui</span><span class="p">(</span><span class="n">init_rows</span><span class="p">)</span>

        <span class="c1"># 5) 완료까지 폴링(주기적 UI 갱신)
</span>        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">last_ui</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">final_statuses</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>

        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">st</span> <span class="o">=</span> <span class="p">(</span><span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span> <span class="ow">or</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">upper</span><span class="p">()</span>
                <span class="n">final_statuses</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span> <span class="k">if</span> <span class="n">st</span> <span class="k">else</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ui</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">UI_UPDATE_GAP_S</span><span class="p">:</span>
                <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">N/A</span><span class="sh">"</span><span class="p">,</span>
                         <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
                <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>
                <span class="n">last_ui</span> <span class="o">=</span> <span class="n">now</span>

            <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">and</span> <span class="nf">all</span><span class="p">((</span><span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">):</span>
                <span class="k">break</span>

            <span class="nf">if </span><span class="p">(</span><span class="n">MAX_WAIT_S</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="p">((</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">MAX_WAIT_S</span><span class="p">):</span>
                <span class="k">break</span>

            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">POLL_INTERVAL_S</span><span class="p">)))</span>

        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">duration_sec</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="p">(</span><span class="n">job_ids</span> <span class="ow">and</span> <span class="nf">all</span><span class="p">((</span><span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">))</span>

        <span class="c1"># 마지막 UI 갱신(쓰로틀 없이)
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">N/A</span><span class="sh">"</span><span class="p">,</span>
                     <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
            <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>

        <span class="c1"># 6) 실행 결과 요약 저장
</span>        <span class="n">results_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">runs</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">session_tag</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">_</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">results_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">results_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">result_</span><span class="si">{</span><span class="n">session_tag</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">failed_submissions</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span>
            <span class="k">if</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">completed_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">completed_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">duration_sec</span><span class="sh">"</span><span class="p">:</span> <span class="n">duration_sec</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_ids</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">final_status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">all_done</span><span class="sh">"</span><span class="p">:</span> <span class="nf">bool</span><span class="p">(</span><span class="n">all_done</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">failed_submissions</span><span class="sh">"</span><span class="p">:</span> <span class="n">failed_submissions</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cwd</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">options</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>  <span class="c1"># 참고용으로만 기록(런타임 제어 아님)
</span>                <span class="sh">"</span><span class="s">BATCH_SIZE</span><span class="sh">"</span><span class="p">:</span> <span class="n">BATCH_SIZE</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">POLL_INTERVAL_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">POLL_INTERVAL_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">FULL_TTL_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">FULL_TTL_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">MIN_REFRESH_GAP_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">MIN_REFRESH_GAP_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">FULL_STATUS_CMD</span><span class="sh">"</span><span class="p">:</span> <span class="n">FULL_STATUS_CMD</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">MAX_WAIT_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">MAX_WAIT_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">UI_UPDATE_GAP_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">UI_UPDATE_GAP_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">CMD_WIDTH_LIMIT</span><span class="sh">"</span><span class="p">:</span> <span class="n">CMD_WIDTH_LIMIT</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">FORCE_REFRESH_ON_MISS</span><span class="sh">"</span><span class="p">:</span> <span class="n">FORCE_REFRESH_ON_MISS</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">results_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">results_path</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">results_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="c1"># 7) 노드 출력
</span>        <span class="n">job_ids_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="n">results_json_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">job_ids_str</span><span class="p">,</span> <span class="n">results_json_str</span><span class="p">)</span>

<span class="c1"># ---------------------------- Node registration ----------------------------
</span>
<span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFSubmitAndWait</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Submit &amp; Wait</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="chat--user">

다시 한 번 작성해줘. 1. 주석은 영어로 2. 서버 에러 등으로 bjobs가 실패했을 때 이를 어떻게 다루는지 궁금해. 웬만하면 안죽는 쪽으로 갔으면 좋겠는데

</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># File: custom_nodes/lsf_submit_and_wait.py
# Purpose: ComfyUI async OUTPUT node to submit LSF jobs (bsub), poll with `bjobs -a`,
#          share a lightweight global cache, and live-update a String widget during runtime.
# Notes:
#   - All tunables live as CONSTANTS below (no per-run options parsing).
#   - Robust against transient server/cluster errors: timeouts, non-zero rc, and
#     `bjobs` failures are treated as non-fatal. The node keeps running, uses last
#     known statuses, and retries with exponential backoff.
#
# Frontend hook (place in a small web extension):
#   api.addEventListener("impact-node-feedback", (event) =&gt; {
#     const node = app.graph._nodes_by_id[event.detail.node_id];
#     if (!node) return;
#     const w = node.widgets?.find(w =&gt; w.name === event.detail.widget_name);
#     if (!w) return;
#     w.value = event.detail.value;
#     if (w.callback) w.callback(w.value);
#     node.setDirtyCanvas(true, true);
#   });
</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">tempfile</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">from</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>

<span class="kn">from</span> <span class="n">server</span> <span class="kn">import</span> <span class="n">PromptServer</span>  <span class="c1"># ComfyUI runtime UI updates
</span>
<span class="c1"># ---------------------------- CONSTANTS ----------------------------
</span>
<span class="c1"># Submission / polling
</span><span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">4</span>                    <span class="c1"># concurrent bsub submissions
</span><span class="n">POLL_INTERVAL_S</span> <span class="o">=</span> <span class="mi">10</span>              <span class="c1"># polling interval (seconds)
</span><span class="n">MAX_WAIT_S</span> <span class="o">=</span> <span class="bp">None</span>                 <span class="c1"># None = wait indefinitely
</span>
<span class="c1"># Shell timeouts
</span><span class="n">SUBMIT_TIMEOUT_S</span> <span class="o">=</span> <span class="mi">60</span>             <span class="c1"># timeout for each bsub command
</span><span class="n">STATUS_TIMEOUT_S</span> <span class="o">=</span> <span class="mi">60</span>             <span class="c1"># timeout for each bjobs -a call
</span>
<span class="c1"># Cache behavior
</span><span class="n">FULL_TTL_S</span> <span class="o">=</span> <span class="mi">10</span>                   <span class="c1"># freshness window for the snapshot (seconds)
</span><span class="n">MIN_REFRESH_GAP_S</span> <span class="o">=</span> <span class="mi">5</span>             <span class="c1"># min gap between two `bjobs -a` runs (seconds)
</span><span class="n">FORCE_REFRESH_ON_MISS</span> <span class="o">=</span> <span class="bp">True</span>      <span class="c1"># refresh when a requested job_id is missing/stale
</span>
<span class="c1"># `bjobs -a` template (expects two columns: jobid, stat)
</span><span class="n">FULL_STATUS_CMD</span> <span class="o">=</span> <span class="sh">'</span><span class="s">bjobs -a -noheader -o </span><span class="sh">"</span><span class="s">jobid stat</span><span class="sh">"'</span>

<span class="c1"># Live UI feedback (String widget)
</span><span class="n">UI_UPDATE_GAP_S</span> <span class="o">=</span> <span class="mf">1.0</span>             <span class="c1"># throttle for widget updates (seconds)
</span><span class="n">CMD_WIDTH_LIMIT</span> <span class="o">=</span> <span class="mi">100</span>             <span class="c1"># truncate command string in table
</span>
<span class="c1"># Error/backoff for `bjobs -a` failures (non-fatal)
</span><span class="n">BJOBS_BACKOFF_BASE_S</span> <span class="o">=</span> <span class="mi">15</span>         <span class="c1"># initial backoff after a failed snapshot attempt
</span><span class="n">BJOBS_BACKOFF_MAX_S</span> <span class="o">=</span> <span class="mi">120</span>         <span class="c1"># maximum backoff cap (exponential up to this)
</span>
<span class="c1"># Terminal states (adjust if needed)
</span><span class="n">TERMINAL_STATES</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">EXIT</span><span class="sh">"</span><span class="p">}</span>

<span class="c1"># Cache file name under /tmp or $COMFYUI_LSF_CACHE_DIR
</span><span class="n">CACHE_FILENAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">status_full_cache.json</span><span class="sh">"</span>

<span class="c1"># ---------------------------- Utilities ----------------------------
</span>
<span class="n">JOB_ID_REGEX</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="sa">r</span><span class="sh">"</span><span class="s">Job\s*&lt;(\d+)&gt;</span><span class="sh">"</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="n">IGNORECASE</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">iso_now</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">isoformat</span><span class="p">(</span><span class="n">timespec</span><span class="o">=</span><span class="sh">"</span><span class="s">seconds</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sh">"</span><span class="s">Z</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">default_cache_dir</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="k">return</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span>
        <span class="sh">"</span><span class="s">COMFYUI_LSF_CACHE_DIR</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">tempfile</span><span class="p">.</span><span class="nf">gettempdir</span><span class="p">(),</span> <span class="sh">"</span><span class="s">comfyui_lsf_cache</span><span class="sh">"</span><span class="p">)</span>
    <span class="p">)</span>

<span class="k">def</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">path</span>

<span class="k">def</span> <span class="nf">_short</span><span class="p">(</span><span class="n">s</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">limit</span><span class="p">:</span> <span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">s</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">strip</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">s</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">limit</span> <span class="nf">else </span><span class="p">(</span><span class="n">s</span><span class="p">[:</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">limit</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)]</span> <span class="o">+</span> <span class="sh">"</span><span class="s">…</span><span class="sh">"</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="nb">float</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Run shell command with optional timeout. Never raises to caller:
    returns (rc, stdout, stderr). On exception/timeout: non-zero rc and stderr message.
    </span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_shell</span><span class="p">(</span>
            <span class="n">cmd</span><span class="p">,</span>
            <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span> <span class="k">if</span> <span class="n">cwd</span> <span class="k">else</span> <span class="bp">None</span><span class="p">,</span>
            <span class="n">stdout</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
            <span class="n">stderr</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">timeout</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">ignore</span><span class="sh">"</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="k">pass</span>
            <span class="k">return</span> <span class="mi">124</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Timeout after </span><span class="si">{</span><span class="n">timeout</span><span class="si">}</span><span class="s">s for: </span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="sh">"</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Exception executing shell: </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">stdout</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c1"># LSF standard: "Job &lt;12345&gt; is submitted to queue &lt;...&gt;."
</span>    <span class="k">return</span> <span class="n">JOB_ID_REGEX</span><span class="p">.</span><span class="nf">findall</span><span class="p">(</span><span class="n">stdout</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">job_rows</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">dict</span><span class="p">],</span> <span class="n">width_limit</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="n">CMD_WIDTH_LIMIT</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">str</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Build a compact, markdown-like table: JOB ID | STATUS | COMMAND
    (String widget is plain text; the table is just for readability.)
    </span><span class="sh">"""</span>
    <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">|------:|:------:|---------|</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">r</span> <span class="ow">in</span> <span class="n">job_rows</span><span class="p">:</span>
        <span class="n">jid</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">st</span>  <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">))</span>
        <span class="n">cmd</span> <span class="o">=</span> <span class="nf">_short</span><span class="p">(</span><span class="nf">str</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)),</span> <span class="n">width_limit</span><span class="p">)</span>
        <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">| `</span><span class="si">{</span><span class="n">jid</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">st</span><span class="si">}</span><span class="s">` | `</span><span class="si">{</span><span class="n">cmd</span><span class="si">}</span><span class="s">` |</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">lines</span><span class="p">)</span>

<span class="c1"># ---------------------------- File lock (best-effort) ----------------------------
</span>
<span class="k">try</span><span class="p">:</span>
    <span class="kn">import</span> <span class="n">fcntl</span>  <span class="c1"># type: ignore
</span><span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
    <span class="n">fcntl</span> <span class="o">=</span> <span class="bp">None</span>  <span class="c1"># On Windows, locks are skipped (accepting race risk)
</span>
<span class="k">def</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">path</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">nonblock</span><span class="p">:</span> <span class="nb">bool</span> <span class="o">=</span> <span class="bp">False</span><span class="p">):</span>
    <span class="n">fh</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="sh">"</span><span class="s">a+</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_EX</span> <span class="o">|</span> <span class="p">(</span><span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_NB</span> <span class="k">if</span> <span class="n">nonblock</span> <span class="k">else</span> <span class="mi">0</span><span class="p">))</span>
        <span class="k">except</span> <span class="nb">BlockingIOError</span><span class="p">:</span>
            <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
            <span class="k">return</span> <span class="bp">None</span>
    <span class="k">return</span> <span class="n">fh</span>

<span class="k">def</span> <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">fh</span><span class="p">:</span>
        <span class="k">return</span>
    <span class="k">if</span> <span class="n">fcntl</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">fcntl</span><span class="p">.</span><span class="nf">flock</span><span class="p">(</span><span class="n">fh</span><span class="p">,</span> <span class="n">fcntl</span><span class="p">.</span><span class="n">LOCK_UN</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">fh</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="k">pass</span>

<span class="c1"># ---------------------------- LSF backend ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFBackend</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Minimal backend: fetch a full snapshot of job statuses via `bjobs -a`.
    Returns (snapshot_dict, ok_bool). `ok_bool` is False on rc!=0 or timeout/exception.
    </span><span class="sh">"""</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">full_status_cmd</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="n">FULL_STATUS_CMD</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">full_status_cmd</span> <span class="o">=</span> <span class="n">full_status_cmd</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">full_snapshot</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">tuple</span><span class="p">[</span><span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">],</span> <span class="nb">bool</span><span class="p">]:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">full_status_cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">STATUS_TIMEOUT_S</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rc</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="c1"># Non-fatal: caller will backoff and keep last known cache
</span>            <span class="k">return</span> <span class="p">{},</span> <span class="bp">False</span>
        <span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="p">(</span><span class="n">out</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">ln</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ln</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">parts</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">parts</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="n">jid</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
            <span class="n">st</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">upper</span><span class="p">()</span>
            <span class="n">result</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">,</span> <span class="bp">True</span>

<span class="c1"># ---------------------------- Lightweight 2-tier cache ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFCache</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    - In-process memory snapshot (fast-path, avoids most file I/O)
    - Cross-process JSON file snapshot (source of truth)
    - TTL + min refresh gap + refresh lock + error backoff to prevent `bjobs -a` storms
    File structure:
      {
        </span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">&lt;jobid&gt;</span><span class="sh">"</span><span class="s">: {</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">RUN</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="s">: 169...}, ... },
        </span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">&lt;jobid&gt;</span><span class="sh">"</span><span class="s">: {</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">}, ... },
        </span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="s">: 169...,
        </span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="s">: { </span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="s">: </span><span class="sh">"</span><span class="s">ttl_or_miss</span><span class="sh">"</span><span class="s">, </span><span class="sh">"</span><span class="s">last_error</span><span class="sh">"</span><span class="s">: {...} }
      }
    Error/backoff:
      - Consecutive snapshot failures increase an exponential backoff window
        capped at BJOBS_BACKOFF_MAX_S. During backoff, refresh attempts are skipped.
    </span><span class="sh">"""</span>

    <span class="n">_mem_jobs</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">dict</span><span class="p">]</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">_mem_last_ts</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>
    <span class="n">_mem_lock</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Lock</span><span class="p">()</span>

    <span class="n">_error_count</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">_last_error_ts</span><span class="p">:</span> <span class="nb">float</span> <span class="o">=</span> <span class="mf">0.0</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">cache_file</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">=</span> <span class="n">cache_file</span>
        <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">cache_file</span><span class="p">))</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">cache_file</span><span class="p">):</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">({</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}},</span> <span class="n">f</span><span class="p">)</span>

    <span class="c1"># file I/O helpers
</span>    <span class="k">def</span> <span class="nf">_read_file</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{},</span> <span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">:</span> <span class="p">{}}</span>

    <span class="k">def</span> <span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">dict</span><span class="p">):</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.tmp</span><span class="sh">"</span>
        <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
            <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">f</span><span class="p">)</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
        <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>

    <span class="c1"># public API
</span>    <span class="k">def</span> <span class="nf">seed_submitted</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">meta</span><span class="p">:</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">dict</span><span class="p">]</span> <span class="o">|</span> <span class="bp">None</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="sh">"""</span><span class="s">Make freshly submitted jobs visible as SUBMITTED in both memory and file.</span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># memory
</span>        <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span> <span class="ow">or</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
        <span class="c1"># file
</span>        <span class="n">fh</span> <span class="o">=</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
            <span class="n">jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">jobs</span><span class="p">.</span><span class="nf">setdefault</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now</span><span class="p">})</span>
            <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
            <span class="k">if</span> <span class="n">meta</span><span class="p">:</span>
                <span class="n">jm</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                    <span class="k">if</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">meta</span><span class="p">:</span>
                        <span class="n">jm</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span>
                <span class="n">data</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs_meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jm</span>
            <span class="n">self</span><span class="p">.</span><span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_in_backoff_window</span><span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">_error_count</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="n">elapsed</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_last_error_ts</span>
        <span class="n">backoff</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">BJOBS_BACKOFF_MAX_S</span><span class="p">,</span> <span class="n">BJOBS_BACKOFF_BASE_S</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">**</span> <span class="nf">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">_error_count</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)))</span>
        <span class="k">return</span> <span class="n">elapsed</span> <span class="o">&lt;</span> <span class="n">backoff</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_maybe_refresh</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">backend</span><span class="p">:</span> <span class="n">LSFBackend</span><span class="p">,</span> <span class="n">reason</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
        <span class="sh">"""</span><span class="s">
        Decide and run a full-snapshot refresh iff:
          - Not in error backoff window;
          - Min refresh gap is satisfied;
          - We acquire the non-blocking refresh lock;
        On failure: do not raise, record error (for backoff), keep old cache.
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="nf">_in_backoff_window</span><span class="p">():</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
        <span class="n">last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">MIN_REFRESH_GAP_S</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="n">lock_fh</span> <span class="o">=</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span> <span class="o">+</span> <span class="sh">"</span><span class="s">.refresh.lock</span><span class="sh">"</span><span class="p">,</span> <span class="n">nonblock</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">lock_fh</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># Double-check the min gap after acquiring the lock
</span>            <span class="n">data2</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
            <span class="n">last_ts2</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data2</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ts2</span><span class="p">)</span> <span class="o">&lt;</span> <span class="n">MIN_REFRESH_GAP_S</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>

            <span class="n">snapshot</span><span class="p">,</span> <span class="n">ok</span> <span class="o">=</span> <span class="k">await</span> <span class="n">backend</span><span class="p">.</span><span class="nf">full_snapshot</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ok</span><span class="p">:</span>
                <span class="c1"># Record error/backoff and a small meta for debugging
</span>                <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_error_count</span> <span class="o">+=</span> <span class="mi">1</span>
                <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_last_error_ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
                <span class="n">fh</span> <span class="o">=</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
                <span class="k">try</span><span class="p">:</span>
                    <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
                    <span class="n">meta</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                    <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">last_error</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
                        <span class="sh">"</span><span class="s">at</span><span class="sh">"</span><span class="p">:</span> <span class="nf">iso_now</span><span class="p">(),</span>
                        <span class="sh">"</span><span class="s">error_count</span><span class="sh">"</span><span class="p">:</span> <span class="n">self</span><span class="p">.</span><span class="n">_error_count</span><span class="p">,</span>
                        <span class="sh">"</span><span class="s">note</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bjobs snapshot failed; using last known cache</span><span class="sh">"</span>
                    <span class="p">}</span>
                    <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span>
                    <span class="c1"># Do not change jobs / last_full_refresh_ts
</span>                    <span class="n">self</span><span class="p">.</span><span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
                <span class="k">finally</span><span class="p">:</span>
                    <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
                <span class="k">return</span> <span class="bp">False</span>

            <span class="c1"># Success: reset backoff
</span>            <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_error_count</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_last_error_ts</span> <span class="o">=</span> <span class="mf">0.0</span>

            <span class="n">now2</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="n">fh</span> <span class="o">=</span> <span class="nf">_lock_fd</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">cache_file</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">base</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="k">for</span> <span class="n">jid</span><span class="p">,</span> <span class="n">st</span> <span class="ow">in</span> <span class="n">snapshot</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">jobs</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">st</span><span class="p">,</span> <span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">:</span> <span class="n">now2</span><span class="p">}</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">jobs</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">now2</span>
                <span class="n">meta</span> <span class="o">=</span> <span class="n">base</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">refreshed_at</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
                <span class="n">meta</span><span class="p">[</span><span class="sh">"</span><span class="s">reason</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">reason</span>
                <span class="n">base</span><span class="p">[</span><span class="sh">"</span><span class="s">meta</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">meta</span>
                <span class="n">self</span><span class="p">.</span><span class="nf">_write_file_and_update_mem</span><span class="p">(</span><span class="n">base</span><span class="p">)</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">fh</span><span class="p">)</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="nf">_unlock_fd</span><span class="p">(</span><span class="n">lock_fh</span><span class="p">)</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">get_statuses</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">job_ids</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">backend</span><span class="p">:</span> <span class="n">LSFBackend</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">dict</span><span class="p">[</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">]:</span>
        <span class="sh">"""</span><span class="s">
        2-tier retrieval:
          1) If memory snapshot is fresh -&gt; use it (no file I/O).
          2) Else read file once and update memory.
          3) If TTL expired or miss (and FORCE_REFRESH_ON_MISS), try to refresh (subject to backoff &amp; min-gap).
        Never raises; returns last known statuses. Missing ones return </span><span class="sh">""</span><span class="s">.
        </span><span class="sh">"""</span>
        <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="c1"># 1) memory fast-path
</span>        <span class="k">async</span> <span class="k">with</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_lock</span><span class="p">:</span>
            <span class="n">mem_is_fresh</span> <span class="o">=</span> <span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_last_ts</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="n">FULL_TTL_S</span>
            <span class="k">if</span> <span class="n">mem_is_fresh</span><span class="p">:</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">_read_file</span><span class="p">()</span>
                <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_jobs</span> <span class="o">=</span> <span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">jobs</span><span class="sh">"</span><span class="p">,</span> <span class="p">{})</span>
                <span class="nf">type</span><span class="p">(</span><span class="n">self</span><span class="p">).</span><span class="n">_mem_last_ts</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">last_full_refresh_ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
                <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>

        <span class="k">def</span> <span class="nf">fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">:</span> <span class="nb">str</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
            <span class="n">ent</span> <span class="o">=</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">ent</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">False</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="nf">float</span><span class="p">(</span><span class="n">ent</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">ts</span><span class="sh">"</span><span class="p">,</span> <span class="mi">0</span><span class="p">)))</span> <span class="o">&lt;=</span> <span class="n">FULL_TTL_S</span>

        <span class="n">need_refresh</span> <span class="o">=</span> <span class="ow">not</span> <span class="n">mem_is_fresh</span>
        <span class="k">if</span> <span class="n">FORCE_REFRESH_ON_MISS</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="k">if</span> <span class="ow">not</span> <span class="nf">fresh</span><span class="p">(</span><span class="n">jid</span><span class="p">):</span>
                    <span class="n">need_refresh</span> <span class="o">=</span> <span class="bp">True</span>
                    <span class="k">break</span>

        <span class="k">if</span> <span class="n">need_refresh</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">self</span><span class="p">.</span><span class="nf">_maybe_refresh</span><span class="p">(</span><span class="n">backend</span><span class="p">,</span> <span class="n">reason</span><span class="o">=</span><span class="sh">"</span><span class="s">ttl_or_miss</span><span class="sh">"</span><span class="p">)</span>
            <span class="c1"># Read from memory snapshot again (already updated if refresh succeeded)
</span>            <span class="n">jobs</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">_mem_jobs</span>

        <span class="k">return</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="p">{}).</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>

<span class="c1"># ---------------------------- Submission helpers ----------------------------
</span>
<span class="k">async</span> <span class="k">def</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">commands</span><span class="p">:</span> <span class="nb">list</span><span class="p">[</span><span class="nb">str</span><span class="p">],</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Submit each non-empty line as an independent `bsub ...` command.
    Concurrency is limited by BATCH_SIZE. Never raises; collects failures.
    Returns (job_ids, submissions_detail).
    </span><span class="sh">"""</span>
    <span class="n">sem</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Semaphore</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">BATCH_SIZE</span><span class="p">)))</span>
    <span class="n">submissions</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">_submit_one</span><span class="p">(</span><span class="n">cmd</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">sem</span><span class="p">:</span>
            <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_shell</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="n">SUBMIT_TIMEOUT_S</span><span class="p">)</span>
            <span class="n">jids</span> <span class="o">=</span> <span class="nf">extract_job_ids_from_bsub_output</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
            <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cmd</span><span class="p">,</span> <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">rc</span><span class="p">,</span> <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">out</span><span class="p">,</span> <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">err</span><span class="p">,</span> <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">jids</span><span class="p">}</span>

    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_submit_one</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">commands</span><span class="p">]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">submissions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="k">await</span> <span class="n">t</span><span class="p">)</span>

    <span class="n">job_ids</span> <span class="o">=</span> <span class="p">[</span><span class="n">jid</span> <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[])]</span>
    <span class="k">return</span> <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span>

<span class="c1"># ---------------------------- ComfyUI Node ----------------------------
</span>
<span class="k">class</span> <span class="nc">LSFSubmitAndWait</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">
    Async OUTPUT node:
      - Submits multi-line bsub commands (batch-limited parallelism).
      - Polls statuses via a shared `bjobs -a` snapshot cache across nodes/processes.
      - Live-updates a String widget (</span><span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="s">) with JOB/STATUS/COMMAND table.
      - Resilient to server errors: timeouts, rc!=0, and `bjobs` failures are non-fatal.
        The node keeps last known statuses and retries with backoff.
    </span><span class="sh">"""</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LSF</span><span class="sh">"</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>
    <span class="n">OUTPUT_NODE</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">SUPPORTS_ASYNC</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">RETURN_NAMES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">results_json</span><span class="sh">"</span><span class="p">)</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="sh">"</span><span class="s">commands</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">bsub -q short -J demo sleep 3</span><span class="sh">"</span><span class="p">}),</span>
                <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">optional</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># Display-only (the server updates this at runtime)
</span>                <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">,</span> <span class="sh">"</span><span class="s">default</span><span class="sh">"</span><span class="p">:</span>
                    <span class="sh">"</span><span class="s">| JOB ID | STATUS | COMMAND |</span><span class="se">\n</span><span class="s">|------:|:------:|---------|</span><span class="se">\n</span><span class="s">(Updating during run...)</span><span class="sh">"</span><span class="p">}),</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">hidden</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>
                <span class="c1"># Injected by ComfyUI; used to target the widget updates
</span>                <span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">UNIQUE_ID</span><span class="sh">"</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">commands</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">cwd</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">status_md</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="sh">""</span><span class="p">,</span> <span class="n">node_id</span><span class="p">:</span> <span class="nb">str</span> <span class="o">=</span> <span class="bp">None</span><span class="p">):</span>
        <span class="c1"># 0) sanitize input lines (skip empty / comment-only)
</span>        <span class="n">lines</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">ln</span> <span class="ow">in</span> <span class="p">(</span><span class="n">commands</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">splitlines</span><span class="p">():</span>
            <span class="n">s</span> <span class="o">=</span> <span class="n">ln</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">s</span><span class="p">:</span>
                <span class="k">continue</span>
            <span class="k">if</span> <span class="n">s</span><span class="p">.</span><span class="nf">startswith</span><span class="p">(</span><span class="sh">"</span><span class="s">#</span><span class="sh">"</span><span class="p">):</span>
                <span class="k">continue</span>
            <span class="n">lines</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">ln</span><span class="p">)</span>

        <span class="c1"># 1) submit
</span>        <span class="n">submitted_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">job_ids</span><span class="p">,</span> <span class="n">submissions</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">submit_commands_multiline</span><span class="p">(</span><span class="n">lines</span><span class="p">,</span> <span class="n">cwd</span><span class="o">=</span><span class="n">cwd</span><span class="p">)</span>

        <span class="c1"># 2) job_id -&gt; command map (for UI/log)
</span>        <span class="n">jid_to_cmd</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">,</span> <span class="p">[]):</span>
                <span class="n">jid_to_cmd</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

        <span class="c1"># 3) shared cache &amp; backend
</span>        <span class="n">cache_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="nf">default_cache_dir</span><span class="p">())</span>
        <span class="n">cache_file</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="n">CACHE_FILENAME</span><span class="p">)</span>
        <span class="n">cache</span> <span class="o">=</span> <span class="nc">LSFCache</span><span class="p">(</span><span class="n">cache_file</span><span class="p">)</span>
        <span class="n">backend</span> <span class="o">=</span> <span class="nc">LSFBackend</span><span class="p">(</span><span class="n">FULL_STATUS_CMD</span><span class="p">)</span>

        <span class="c1"># 3-1) seed freshly submitted jobs to handle "just-submitted not in cache yet"
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">meta</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">),</span> <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>
            <span class="n">cache</span><span class="p">.</span><span class="nf">seed_submitted</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">meta</span><span class="o">=</span><span class="n">meta</span><span class="p">)</span>

        <span class="c1"># 4) initial UI update (SUBMITTED)
</span>        <span class="k">def</span> <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">node_id</span><span class="p">:</span>
                <span class="k">return</span>
            <span class="n">table</span> <span class="o">=</span> <span class="nf">make_status_markdown</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">PromptServer</span><span class="p">.</span><span class="n">instance</span><span class="p">.</span><span class="nf">send_sync</span><span class="p">(</span>
                    <span class="sh">"</span><span class="s">impact-node-feedback</span><span class="sh">"</span><span class="p">,</span>
                    <span class="p">{</span><span class="sh">"</span><span class="s">node_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">node_id</span><span class="p">,</span> <span class="sh">"</span><span class="s">widget_name</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">status_md</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">value</span><span class="sh">"</span><span class="p">:</span> <span class="n">table</span><span class="p">}</span>
                <span class="p">)</span>
            <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
                <span class="c1"># UI push failures are non-fatal; continue control flow
</span>                <span class="k">pass</span>

        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">init_rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
            <span class="nf">push_ui</span><span class="p">(</span><span class="n">init_rows</span><span class="p">)</span>

        <span class="c1"># 5) poll loop until all terminal or timeout
</span>        <span class="n">start</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">last_ui</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">final_statuses</span> <span class="o">=</span> <span class="p">{</span><span class="n">jid</span><span class="p">:</span> <span class="sh">"</span><span class="s">SUBMITTED</span><span class="sh">"</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">}</span>

        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">statuses</span> <span class="o">=</span> <span class="k">await</span> <span class="n">cache</span><span class="p">.</span><span class="nf">get_statuses</span><span class="p">(</span><span class="n">job_ids</span><span class="p">,</span> <span class="n">backend</span><span class="p">)</span>
            <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">:</span>
                <span class="n">st</span> <span class="o">=</span> <span class="p">(</span><span class="n">statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span> <span class="ow">or</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">""</span><span class="p">).</span><span class="nf">upper</span><span class="p">()</span>
                <span class="n">final_statuses</span><span class="p">[</span><span class="n">jid</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span> <span class="k">if</span> <span class="n">st</span> <span class="k">else</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span>

            <span class="n">now</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
            <span class="nf">if </span><span class="p">(</span><span class="n">now</span> <span class="o">-</span> <span class="n">last_ui</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">UI_UPDATE_GAP_S</span><span class="p">:</span>
                <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">N/A</span><span class="sh">"</span><span class="p">,</span>
                         <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
                <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>
                <span class="n">last_ui</span> <span class="o">=</span> <span class="n">now</span>

            <span class="k">if</span> <span class="n">job_ids</span> <span class="ow">and</span> <span class="nf">all</span><span class="p">((</span><span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">):</span>
                <span class="k">break</span>

            <span class="nf">if </span><span class="p">(</span><span class="n">MAX_WAIT_S</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="p">((</span><span class="n">now</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="n">MAX_WAIT_S</span><span class="p">):</span>
                <span class="k">break</span>

            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nf">int</span><span class="p">(</span><span class="n">POLL_INTERVAL_S</span><span class="p">)))</span>

        <span class="n">completed_at</span> <span class="o">=</span> <span class="nf">iso_now</span><span class="p">()</span>
        <span class="n">duration_sec</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span> <span class="o">-</span> <span class="n">start</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
        <span class="n">all_done</span> <span class="o">=</span> <span class="p">(</span><span class="n">job_ids</span> <span class="ow">and</span> <span class="nf">all</span><span class="p">((</span><span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">in</span> <span class="n">TERMINAL_STATES</span><span class="p">)</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">))</span>

        <span class="c1"># final UI update (unthrottled)
</span>        <span class="k">if</span> <span class="n">job_ids</span><span class="p">:</span>
            <span class="n">rows</span> <span class="o">=</span> <span class="p">[{</span><span class="sh">"</span><span class="s">job_id</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">"</span><span class="s">N/A</span><span class="sh">"</span><span class="p">,</span>
                     <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">jid_to_cmd</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">jid</span><span class="p">,</span> <span class="sh">""</span><span class="p">)}</span> <span class="k">for</span> <span class="n">jid</span> <span class="ow">in</span> <span class="n">job_ids</span><span class="p">]</span>
            <span class="nf">push_ui</span><span class="p">(</span><span class="n">rows</span><span class="p">)</span>

        <span class="c1"># 6) persist a concise run log
</span>        <span class="n">results_dir</span> <span class="o">=</span> <span class="nf">ensure_dir</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">cache_dir</span><span class="p">,</span> <span class="sh">"</span><span class="s">runs</span><span class="sh">"</span><span class="p">))</span>
        <span class="n">session_tag</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="nf">utcnow</span><span class="p">().</span><span class="nf">strftime</span><span class="p">(</span><span class="sh">"</span><span class="s">%Y%m%d_%H%M%S</span><span class="sh">"</span><span class="p">)</span> <span class="o">+</span> <span class="sa">f</span><span class="sh">"</span><span class="s">_</span><span class="si">{</span><span class="n">os</span><span class="p">.</span><span class="nf">getpid</span><span class="p">()</span><span class="si">}</span><span class="sh">"</span>
        <span class="n">results_path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">results_dir</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">result_</span><span class="si">{</span><span class="n">session_tag</span><span class="si">}</span><span class="s">.json</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">failed_submissions</span> <span class="o">=</span> <span class="p">[</span>
            <span class="p">{</span>
                <span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">cmd</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stderr</span><span class="sh">"</span><span class="p">],</span>
                <span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">:</span> <span class="n">sub</span><span class="p">[</span><span class="sh">"</span><span class="s">stdout</span><span class="sh">"</span><span class="p">],</span>
            <span class="p">}</span>
            <span class="k">for</span> <span class="n">sub</span> <span class="ow">in</span> <span class="n">submissions</span>
            <span class="k">if</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">returncode</span><span class="sh">"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">0</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">sub</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">)</span>
        <span class="p">]</span>

        <span class="n">payload</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">"</span><span class="s">submitted_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">submitted_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">completed_at</span><span class="sh">"</span><span class="p">:</span> <span class="n">completed_at</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">duration_sec</span><span class="sh">"</span><span class="p">:</span> <span class="n">duration_sec</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">job_ids</span><span class="sh">"</span><span class="p">:</span> <span class="n">job_ids</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">final_status</span><span class="sh">"</span><span class="p">:</span> <span class="n">final_statuses</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">all_done</span><span class="sh">"</span><span class="p">:</span> <span class="nf">bool</span><span class="p">(</span><span class="n">all_done</span><span class="p">),</span>
            <span class="sh">"</span><span class="s">failed_submissions</span><span class="sh">"</span><span class="p">:</span> <span class="n">failed_submissions</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">cwd</span><span class="sh">"</span><span class="p">:</span> <span class="n">cwd</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">options</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span>  <span class="c1"># for record only (not runtime-tunable)
</span>                <span class="sh">"</span><span class="s">BATCH_SIZE</span><span class="sh">"</span><span class="p">:</span> <span class="n">BATCH_SIZE</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">POLL_INTERVAL_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">POLL_INTERVAL_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">FULL_TTL_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">FULL_TTL_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">MIN_REFRESH_GAP_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">MIN_REFRESH_GAP_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">FULL_STATUS_CMD</span><span class="sh">"</span><span class="p">:</span> <span class="n">FULL_STATUS_CMD</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">MAX_WAIT_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">MAX_WAIT_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">UI_UPDATE_GAP_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">UI_UPDATE_GAP_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">CMD_WIDTH_LIMIT</span><span class="sh">"</span><span class="p">:</span> <span class="n">CMD_WIDTH_LIMIT</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">FORCE_REFRESH_ON_MISS</span><span class="sh">"</span><span class="p">:</span> <span class="n">FORCE_REFRESH_ON_MISS</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">SUBMIT_TIMEOUT_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">SUBMIT_TIMEOUT_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">STATUS_TIMEOUT_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">STATUS_TIMEOUT_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">BJOBS_BACKOFF_BASE_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">BJOBS_BACKOFF_BASE_S</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">BJOBS_BACKOFF_MAX_S</span><span class="sh">"</span><span class="p">:</span> <span class="n">BJOBS_BACKOFF_MAX_S</span><span class="p">,</span>
            <span class="p">},</span>
            <span class="sh">"</span><span class="s">results_file</span><span class="sh">"</span><span class="p">:</span> <span class="n">results_path</span><span class="p">,</span>
        <span class="p">}</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">results_path</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
                <span class="n">json</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>

        <span class="c1"># 7) outputs
</span>        <span class="n">job_ids_str</span> <span class="o">=</span> <span class="sh">"</span><span class="s">,</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">job_ids</span><span class="p">)</span>
        <span class="n">results_json_str</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">dumps</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">ensure_ascii</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">job_ids_str</span><span class="p">,</span> <span class="n">results_json_str</span><span class="p">)</span>

<span class="c1"># ---------------------------- Node registration ----------------------------
</span>
<span class="n">NODE_CLASS_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="n">LSFSubmitAndWait</span><span class="p">,</span>
<span class="p">}</span>
<span class="n">NODE_DISPLAY_NAME_MAPPINGS</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">LSFSubmitAndWait</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">LSF: Submit &amp; Wait</span><span class="sh">"</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div></div>

<p class="chat--user">

이제 코드는 건드리지 말고 전체적인 동작을 한글로 설명해줘

</p>

<p>알겠어! 아래는 <strong>지금 제공된 파이썬 코드 그대로</strong> 를 기준으로, 노드의 전체 동작을 “처음부터 끝까지” 한글로 정리한 설명이야. (코드는 건드리지 않음)</p>

<hr />

<h1 id="무엇을-하는-노드인가">무엇을 하는 노드인가?</h1>

<ul>
  <li>
    <p>ComfyUI에서 멀티라인 <code class="language-plaintext highlighter-rouge">bsub</code> 명령을 <strong>비동기 제출</strong> 하고, <code class="language-plaintext highlighter-rouge">bjobs -a</code>로 <strong>상태를 지속 폴링</strong> 하여 <strong>완료까지 기다리는 OUTPUT 노드</strong> 예요.</p>
  </li>
  <li>
    <table>
      <tbody>
        <tr>
          <td>실행 중, 같은 노드의 <strong>String 위젯(status_md)</strong>에 **“JOB ID</td>
          <td>STATUS</td>
          <td>COMMAND”** 표 형태의 텍스트를 <strong>실시간 갱신</strong> 해 보여줘요.</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>여러 노드/프로세스가 동시에 돌아도 <strong>전역 캐시</strong> 를 공유하여 <code class="language-plaintext highlighter-rouge">bjobs -a</code> 호출을 최소화하고, 서버 오류가 나도 <strong>죽지 않고</strong> 안전하게 계속 동작해요.</li>
</ul>

<hr />

<h1 id="구성-요소큰-그림">구성 요소(큰 그림)</h1>

<ol>
  <li>
    <p><strong>상수(CONSTANTS)</strong></p>

    <ul>
      <li>배치 제출 개수, 폴링 주기, TTL, 최소 재호출 간격, UI 갱신 쓰로틀, <code class="language-plaintext highlighter-rouge">bjobs -a</code> 템플릿, 타임아웃/백오프 등 모든 동작 파라미터는 파일 상단의 상수로 고정돼요.</li>
    </ul>
  </li>
  <li>
    <p><strong>백엔드(LSFBackend)</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">bjobs -a -noheader -o "jobid stat"</code>를 한 번 호출해 <strong>클러스터 전체 잡 상태 스냅샷</strong> 을 딕셔너리로 만들어 반환해요.</p>
      </li>
      <li>
        <p>실패(비정상 종료/타임아웃/예외) 시 <strong>오류로 보고하지만 예외를 올리지 않음</strong>(상위에서 백오프/재시도).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>전역 캐시(LSFCache, 2계층)</strong></p>

    <ul>
      <li>
        <p><strong>프로세스 내 메모리 스냅샷</strong>(초고속, 대부분의 조회는 파일 I/O 없이 해결)</p>
      </li>
      <li>
        <p><strong>프로세스 간 공유 파일(JSON) 스냅샷</strong>(소스 오브 트루스)</p>
      </li>
      <li>
        <p><strong>TTL + 최소 재호출 간격 + 비차단 락 파일</strong> 로 <code class="language-plaintext highlighter-rouge">bjobs -a</code> 폭주 방지.</p>
      </li>
      <li>
        <p><strong>백오프(지수)</strong> : <code class="language-plaintext highlighter-rouge">bjobs -a</code> 연속 실패 시, 일정 시간 동안 새 스냅샷 시도를 건너뛰고 <strong>기존 캐시로 계속 동작</strong>.</p>
      </li>
      <li>
        <p><strong>제출 직후 시딩(seeding)</strong> : 방금 받은 Job ID들을 캐시에 <strong>SUBMITTED</strong> 상태로 즉시 저장 → 다른 노드에서도 곧바로 “이 잡이 존재한다”는 사실을 알 수 있어요.</p>
      </li>
      <li>
        <p>파일에는 <code class="language-plaintext highlighter-rouge">jobs</code>(상태·타임스탬프), <code class="language-plaintext highlighter-rouge">jobs_meta</code>(커맨드/제출시각), <code class="language-plaintext highlighter-rouge">last_full_refresh_ts</code>, <code class="language-plaintext highlighter-rouge">meta</code>(리프레시 사유/오류메모) 등을 보관.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>제출 도우미</strong></p>

    <ul>
      <li>
        <p>입력의 각 줄을 독립 <code class="language-plaintext highlighter-rouge">bsub</code>로 간주해 <strong>비동기 제출</strong> , <strong>동시 제출 개수는 세마포어</strong> 로 제한.</p>
      </li>
      <li>
        <p>표준 출력에서 <code class="language-plaintext highlighter-rouge">"Job &lt;12345&gt;"</code> 패턴으로 <strong>Job ID 추출</strong>.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>ComfyUI 노드 본체</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">SUPPORTS_ASYNC=True</code> 비동기 실행.</p>
      </li>
      <li>
        <p>입력: <code class="language-plaintext highlighter-rouge">commands</code>(멀티라인), <code class="language-plaintext highlighter-rouge">cwd</code>, 표시용 <code class="language-plaintext highlighter-rouge">status_md</code>(런타임 갱신).</p>
      </li>
      <li>
        <p>출력: <code class="language-plaintext highlighter-rouge">job_ids</code>(콤마 구분), <code class="language-plaintext highlighter-rouge">results_json</code>(요약 JSON).</p>
      </li>
      <li>
        <p>실행 중 <code class="language-plaintext highlighter-rouge">PromptServer.instance.send_sync("impact-node-feedback", ...)</code>으로 <strong>status_md 위젯을 주기적으로 업데이트</strong>.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="동작-흐름step-by-step">동작 흐름(step-by-step)</h1>

<ol>
  <li>
    <p><strong>입력 정리</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">commands</code>에서 <strong>빈 줄/주석 줄</strong> 을 제거해 실제 제출할 <code class="language-plaintext highlighter-rouge">bsub</code> 라인들만 추립니다.</li>
    </ul>
  </li>
  <li>
    <p><strong>잡 제출(비동기 &amp; 배치 제한)</strong></p>

    <ul>
      <li>
        <p>각 라인을 <code class="language-plaintext highlighter-rouge">bsub</code>로 <strong>병렬 제출</strong>(최대 동시 제출 개수 = 상수 <code class="language-plaintext highlighter-rouge">BATCH_SIZE</code>).</p>
      </li>
      <li>
        <p>제출 타임아웃(<code class="language-plaintext highlighter-rouge">SUBMIT_TIMEOUT_S</code>)을 적용.</p>
      </li>
      <li>
        <p>제출 stdout에서 <strong>Job ID</strong> 들을 수집.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>캐시 초기화 &amp; 시딩</strong></p>

    <ul>
      <li>
        <p>전역 캐시 파일 경로(<code class="language-plaintext highlighter-rouge">/tmp</code> 또는 <code class="language-plaintext highlighter-rouge">COMFYUI_LSF_CACHE_DIR</code>)를 준비.</p>
      </li>
      <li>
        <p>방금 제출한 Job ID들을 <strong>메모리/파일 캐시 모두에<code class="language-plaintext highlighter-rouge">SUBMITTED</code>로 기록</strong>(시딩).</p>

        <ul>
          <li>이로써 <strong>Node2가 Node1 직후에 폴링하더라도</strong> 해당 Job ID가 캐시에 나타나, “없는 잡”으로 오판하지 않아요.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>초기 UI 업데이트</strong></p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">status_md</code> 위젯에 <strong>SUBMITTED 상태 표</strong> 를 1회 반영.</p>
      </li>
      <li>
        <p>UI 전송 실패는 <strong>무시</strong>(컨트롤 플로우에 영향 없음).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>폴링 루프(완료 또는 타임아웃까지)</strong></p>

    <ul>
      <li>
        <p>주기(<code class="language-plaintext highlighter-rouge">POLL_INTERVAL_S</code>)마다 캐시에서 상태 조회:</p>

        <ul>
          <li>
            <p><strong>메모리 스냅샷이 신선(TTL 이내)</strong> → <strong>파일 읽기 없이</strong> 바로 사용.</p>
          </li>
          <li>
            <p>아니면 파일을 1회 읽어 메모리 동기화.</p>
          </li>
        </ul>
      </li>
      <li>
        <p><strong>리프레시 판단</strong> :</p>

        <ul>
          <li>
            <p>TTL 만료이거나, 요청 Job ID가 <strong>캐시에 없거나 오래됨</strong>(옵션 <code class="language-plaintext highlighter-rouge">FORCE_REFRESH_ON_MISS</code>) → <strong>전체 스냅샷 리프레시 필요</strong>.</p>
          </li>
          <li>
            <p>단, <strong>최소 간격(<code class="language-plaintext highlighter-rouge">MIN_REFRESH_GAP_S</code>)</strong>을 지키며, <strong>refresh 락</strong> 을 선점한 <strong>한 프로세스만</strong> <code class="language-plaintext highlighter-rouge">bjobs -a</code>를 실행.</p>
          </li>
          <li>
            <p><code class="language-plaintext highlighter-rouge">bjobs -a</code>가 실패하면:</p>

            <ul>
              <li>
                <p><strong>예외 없이</strong> 실패로 기록하고, <strong>연속 실패 횟수 증가</strong> → <strong>지수 백오프</strong>(최대 <code class="language-plaintext highlighter-rouge">BJOBS_BACKOFF_MAX_S</code>) 진입.</p>
              </li>
              <li>
                <p>백오프 동안은 리프레시를 스킵하고 <strong>마지막 캐시값</strong> 으로 계속 운영.</p>
              </li>
              <li>
                <p>성공 시에는 <strong>실패 카운터 초기화</strong> , 새 스냅샷으로 캐시 갱신.</p>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>
        <p><strong>UI 실시간 갱신</strong> :</p>

        <ul>
          <li>
            <p>마지막 전송 시각과 비교해 <strong>쓰로틀(<code class="language-plaintext highlighter-rouge">UI_UPDATE_GAP_S</code>)</strong>을 만족할 때 테이블을 재전송.</p>
          </li>
          <li>
            <p>UI 전송 실패는 무시하고 다음 루프 진행.</p>
          </li>
        </ul>
      </li>
      <li>
        <p><strong>종료 조건</strong> :</p>

        <ul>
          <li>
            <p>모든 Job ID가 <strong>터미널 상태(DONE/EXIT)</strong>.</p>
          </li>
          <li>
            <p>또는 <strong>전체 대기 타임아웃</strong>(<code class="language-plaintext highlighter-rouge">MAX_WAIT_S</code>가 None이 아니고 경과).</p>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>최종 UI 업데이트 &amp; 정리</strong></p>

    <ul>
      <li>
        <p>마지막 상태를 UI에 <strong>1회 더</strong> 반영(쓰로틀 없이).</p>
      </li>
      <li>
        <p>실행 요약(JSON)을 <strong><code class="language-plaintext highlighter-rouge">runs/</code> 디렉토리</strong>에 <strong>파일로 저장</strong>(제출·완료 시각, 소요 시간, 최종 상태, 실패 제출, 사용한 상수 기록 등).</p>
      </li>
      <li>
        <p>노드 출력으로 <code class="language-plaintext highlighter-rouge">job_ids</code>(문자열), <code class="language-plaintext highlighter-rouge">results_json</code>(요약 JSON 문자열)을 반환.</p>
      </li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="장애에러-대응-전략안-죽는-방향">장애/에러 대응 전략(안 죽는 방향)</h1>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">bsub</code> 제출 실패/타임아웃</strong>:</p>

    <ul>
      <li>
        <p>해당 라인만 실패로 기록(<code class="language-plaintext highlighter-rouge">failed_submissions</code>에 보존)하고 <strong>나머지는 계속 진행</strong>.</p>
      </li>
      <li>
        <p>전체 노드는 그대로 동작해 제출된 잡들에 대해 폴링을 계속함.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">bjobs -a</code> 실패/타임아웃/예외</strong>:</p>

    <ul>
      <li>
        <p><strong>예외를 던지지 않고</strong> 실패로 간주 → <strong>연속 실패 카운터 증가</strong> &amp; <strong>백오프 진입</strong>.</p>
      </li>
      <li>
        <p>백오프 동안은 <strong>마지막 스냅샷(캐시)</strong>를 사용해 폴링 루프를 유지(즉, 노드가 죽지 않음).</p>
      </li>
      <li>
        <p><strong>최소 재호출 간격</strong> 과 <strong>비차단 락</strong> 으로 동시 다발 <code class="language-plaintext highlighter-rouge">bjobs -a</code> 발생을 억제.</p>
      </li>
    </ul>
  </li>
  <li>
    <p><strong>UI 업데이트 실패</strong> :</p>

    <ul>
      <li><strong>무시</strong> 하고 다음 루프 진행(잡 컨트롤과 무관한 부가 기능이므로).</li>
    </ul>
  </li>
  <li>
    <p><strong>파일 락 미지원(Windows 등)</strong> :</p>

    <ul>
      <li>락 없이도 동작하지만 <strong>경쟁 가능성 증가</strong> 는 감수. (POSIX 환경이면 fcntl 락이 적용됨)</li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="동시성성능-포인트">동시성/성능 포인트</h1>

<ul>
  <li>
    <p><strong>2계층 캐시</strong> 로 대부분의 조회를 <strong>메모리에서 처리</strong> → 파일 I/O 최소화.</p>
  </li>
  <li>
    <p><strong>TTL + 최소 간격 + 락</strong> 으로 <code class="language-plaintext highlighter-rouge">bjobs -a</code> 호출을 <strong>최소화</strong>.</p>
  </li>
  <li>
    <p><strong>지수 백오프</strong> 로 장애 시에도 <strong>서버/스케줄러에 부담을 주지 않음</strong>.</p>
  </li>
  <li>
    <p><strong>배치 제한 제출</strong> 로 큐/로그인 노드 부담 분산.</p>
  </li>
  <li>
    <p><strong>UI 쓰로틀</strong> 로 프론트 과도한 리렌더 방지.</p>
  </li>
</ul>

<hr />

<h1 id="실사용-팁">실사용 팁</h1>

<ul>
  <li>
    <p>프론트엔드에는 간단한 <strong>커스텀 이벤트 리스너</strong>(“impact-node-feedback”)를 넣어야 <code class="language-plaintext highlighter-rouge">status_md</code> 위젯이 런타임에 갱신돼요.</p>
  </li>
  <li>
    <p>상수는 <strong>환경/정책에 맞게</strong> 파일 상단에서만 조정하면 됩니다. (예: 대형 클러스터라면 <code class="language-plaintext highlighter-rouge">MIN_REFRESH_GAP_S</code>/<code class="language-plaintext highlighter-rouge">FULL_TTL_S</code>를 늘려 <code class="language-plaintext highlighter-rouge">bjobs</code> 부하를 더 낮출 수 있음)</p>
  </li>
  <li>
    <p>캐시 위치는 기본 <code class="language-plaintext highlighter-rouge">/tmp/comfyui_lsf_cache</code>이며, 필요하면 <code class="language-plaintext highlighter-rouge">COMFYUI_LSF_CACHE_DIR</code>로 바꿀 수 있어요.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">results_json</code> 파일 로그(<code class="language-plaintext highlighter-rouge">runs/</code>)로 <strong>사후 분석/감사</strong> 가 가능.</p>
  </li>
</ul>

<hr />

<p>필요하면 상수들의 추천값(작업 규모/큐 정책별 프로파일)도 정리해 줄게.</p>]]></content><author><name>hvppyarchive</name></author><category term="comfyui" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Python 비동기 서브프로세스 실행</title><link href="https://hvppyarchive.github.io/python/python-async-subprocess/" rel="alternate" type="text/html" title="Python 비동기 서브프로세스 실행" /><published>2025-10-10T14:05:19+09:00</published><updated>2025-10-10T14:05:19+09:00</updated><id>https://hvppyarchive.github.io/python/python-async-subprocess</id><content type="html" xml:base="https://hvppyarchive.github.io/python/python-async-subprocess/"><![CDATA[<p class="chat--user">

Python에서 subprocess를 async task로 실행할 수 있어?

</p>

<p>네—가능합니다. “비동기적으로 서브프로세스 실행”은 보통 두 가지 방식이 있어요.</p>

<h2 id="1-asyncio가-제공하는-진짜-비동기-서브프로세스-api-쓰기">1) <code class="language-plaintext highlighter-rouge">asyncio</code>가 제공하는 <strong>진짜 비동기 서브프로세스</strong> API 쓰기</h2>

<p>핵심은 <code class="language-plaintext highlighter-rouge">asyncio.create_subprocess_exec()</code>(또는 <code class="language-plaintext highlighter-rouge">create_subprocess_shell()</code>)입니다. 반환값인 <code class="language-plaintext highlighter-rouge">Process</code>에는 <code class="language-plaintext highlighter-rouge">wait()</code>, <code class="language-plaintext highlighter-rouge">communicate()</code> 같은 <strong><code class="language-plaintext highlighter-rouge">await</code> 가능한</strong> 메서드가 있어서 이벤트 루프를 막지 않아요.</p>

<h3 id="a-출력-전체-한-번에-받기">(A) 출력 전체 한 번에 받기</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">import time; [print(i) or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span>
    <span class="p">)</span>
    <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>   <span class="c1"># 둘 다 bytes
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDOUT:</span><span class="sh">"</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">())</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDERR:</span><span class="sh">"</span><span class="p">,</span> <span class="n">err</span><span class="p">.</span><span class="nf">decode</span><span class="p">())</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="b-스트리밍-으로-줄-단위-읽기-긴-작업실시간-로그용">(B) <strong>스트리밍</strong> 으로 줄 단위 읽기 (긴 작업/실시간 로그용)</h3>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">import time,sys</span><span class="se">\n</span><span class="s">for i in range(5):</span><span class="se">\n</span><span class="s"> print(i); sys.stdout.flush(); time.sleep(0.3)</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">STDOUT</span>
    <span class="p">)</span>

    <span class="k">async</span> <span class="k">for</span> <span class="n">raw</span> <span class="ow">in</span> <span class="n">proc</span><span class="p">.</span><span class="n">stdout</span><span class="p">:</span>  <span class="c1"># bytes 스트림
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">&gt; </span><span class="sh">"</span><span class="p">,</span> <span class="n">raw</span><span class="p">.</span><span class="nf">decode</span><span class="p">().</span><span class="nf">rstrip</span><span class="p">())</span>

    <span class="n">rc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<p><strong>포인트</strong></p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">stdout=PIPE</code>, <code class="language-plaintext highlighter-rouge">stderr=PIPE/STDOUT</code>로 파이프 연결.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">communicate()</code>는 종료까지 기다리며 전부 모아 반환.</p>
  </li>
  <li>
    <p>실시간이 필요하면 <code class="language-plaintext highlighter-rouge">async for proc.stdout</code>로 읽기.</p>
  </li>
  <li>
    <p>파이썬 하위 프로세스는 <code class="language-plaintext highlighter-rouge">-u</code>(unbuffered)로 버퍼링 지연을 줄이는 게 좋아요.</p>
  </li>
</ul>

<h2 id="2-기존의-블로킹-subprocessrun을-스레드로-돌리기">2) 기존의 <strong>블로킹</strong> <code class="language-plaintext highlighter-rouge">subprocess.run()</code>을 스레드로 돌리기</h2>

<p>레거시 코드나 간단한 호출을 그대로 쓰고 싶다면, 이벤트 루프는 살리고 작업만 스레드로 넘길 수 있어요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">subprocess</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_blocking</span><span class="p">(</span><span class="n">cmd</span><span class="p">):</span>
    <span class="c1"># Python 3.9+: to_thread 권장
</span>    <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">to_thread</span><span class="p">(</span>
        <span class="n">subprocess</span><span class="p">.</span><span class="n">run</span><span class="p">,</span> <span class="n">cmd</span><span class="p">,</span>
        <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">check</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">res</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_blocking</span><span class="p">([</span><span class="sh">"</span><span class="s">git</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">status</span><span class="sh">"</span><span class="p">])</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">res</span><span class="p">.</span><span class="n">stdout</span><span class="p">)</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<p><strong>포인트</strong></p>

<ul>
  <li>
    <p>이 방법은 <em>진짜 비동기 I/O</em> 는 아니고, <strong>스레드 하나를 차지</strong> 해서 블로킹 호출을 우회합니다.</p>
  </li>
  <li>
    <p>입출력을 줄 단위로 실시간 처리하긴 불편하고, “끝나면 결과”가 필요한 경우에 적합.</p>
  </li>
</ul>

<hr />

<h2 id="여러-프로세스를-동시에-돌리기">여러 프로세스를 <strong>동시에</strong> 돌리기</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span> <span class="sa">f</span><span class="sh">"</span><span class="s">print(</span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span>
    <span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">procs</span> <span class="o">=</span> <span class="p">[</span><span class="k">await</span> <span class="nf">run_one</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
    <span class="n">outs</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">gather</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">procs</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">_err</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">outs</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>

<span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h2 id="타임아웃취소정리중요">타임아웃/취소/정리(중요)</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">safe_run</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span><span class="o">*</span><span class="n">cmd</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">timeout</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>                 <span class="c1"># or proc.terminate()
</span>        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>           <span class="c1"># 좀비 방지
</span>        <span class="k">raise</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="k">raise</span>
</code></pre></div></div>

<h2 id="플랫폼주의사항-한눈에">플랫폼/주의사항 한눈에</h2>

<ul>
  <li>
    <p><strong>Windows</strong> : 파이프가 연결된 서브프로세스는 Python ≥3.8의 기본 이벤트 루프(프로액터)에서 잘 동작합니다. (아주 옛 버전은 <code class="language-plaintext highlighter-rouge">ProactorEventLoop</code> 필요)</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">shell=True</code></strong>는 편하지만 인자 이스케이프/보안 이슈가 있으니 꼭 필요한 경우만 사용하세요.</p>
  </li>
  <li>
    <p><strong>대용량 출력</strong> 을 한꺼번에 <code class="language-plaintext highlighter-rouge">communicate()</code>로 받으면 메모리를 많이 먹을 수 있어요. 이런 경우 (B)처럼 스트리밍이 안전합니다.</p>
  </li>
  <li>
    <p><strong>텍스트 디코딩</strong> : <code class="language-plaintext highlighter-rouge">asyncio.subprocess</code>는 <strong>bytes</strong> 를 줍니다. <code class="language-plaintext highlighter-rouge">.decode()</code> 직접 호출하거나 <code class="language-plaintext highlighter-rouge">codecs.StreamReader</code>로 감싸세요.</p>
  </li>
  <li>
    <p><strong>프로세스 그룹</strong> : 리눅스/맥에서 하위 트리까지 종료하려면 <code class="language-plaintext highlighter-rouge">start_new_session=True</code>로 새 세션 시작 후, 필요 시 <code class="language-plaintext highlighter-rouge">os.killpg()</code> 사용(고급 주제).</p>
  </li>
</ul>

<hr />

<h3 id="요약">요약</h3>

<ul>
  <li>
    <p>“이벤트 루프를 막지 않고” 서브프로세스를 돌리려면: <strong><code class="language-plaintext highlighter-rouge">asyncio.create_subprocess_exec/shell</code></strong>을 쓰세요.</p>
  </li>
  <li>
    <p>기존 블로킹 코드를 그대로 쓰고 싶다면: <strong><code class="language-plaintext highlighter-rouge">asyncio.to_thread(subprocess.run, ...)</code></strong>으로 감싸세요.</p>
  </li>
  <li>
    <p>스트리밍, 병렬 실행, 타임아웃/취소까지 위 예제 패턴이면 대부분의 케이스를 커버합니다.</p>
  </li>
</ul>

<p class="chat--user">

async def main(): proc = await asyncio.create_subprocess_exec( sys.executable, "-u", "-c", "import time; [print(i) or time.sleep(0.3) for i in range(5)]", stdout=asp.PIPE, stderr=asp.PIPE ) out, err = await proc.communicate() # 둘 다 bytes print("RC:", proc.returncode) print("STDOUT:", out.decode()) print("STDERR:", err.decode()) 이 동작을 task로 만들고 싶어.

</p>

<p>가능하죠! 핵심은 “서브프로세스를 돌리는 코루틴”을 하나 만들고, 그걸 <code class="language-plaintext highlighter-rouge">asyncio.create_task()</code>로 스케줄하는 겁니다. 아래를 그대로 붙여 넣어 쓰세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">asyncio.subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="c1"># 1) 서브프로세스를 실행하고 결과를 반환하는 코루틴
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">run_subprocess</span><span class="p">():</span>
    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">import time; [print(i) or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span>
    <span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>  <span class="c1"># bytes 튜플
</span>        <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">(),</span> <span class="n">err</span><span class="p">.</span><span class="nf">decode</span><span class="p">()</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 취소 시 깔끔하게 종료(좀비 방지)
</span>        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="k">raise</span>

<span class="c1"># 2) 위 코루틴을 Task로 만들어 동시 실행
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_subprocess</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">my-subprocess-task</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># (선택) 여기서 다른 비동기 작업들을 병행할 수 있음
</span>    <span class="c1"># await do_other_async_work()
</span>
    <span class="c1"># (선택) 타임아웃을 걸고 싶다면:
</span>    <span class="k">try</span><span class="p">:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">task</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">task</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">raise</span>

    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDOUT:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDERR:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="포인트-한걸음씩">포인트 (한걸음씩)</h3>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">run_subprocess()</code>는 <strong>서브프로세스 생명주기</strong> 를 책임지는 코루틴입니다.</p>

    <ul>
      <li>
        <p>정상 완료 시 <code class="language-plaintext highlighter-rouge">(returncode, stdout(str), stderr(str))</code>를 반환.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">CancelledError</code>에서 <code class="language-plaintext highlighter-rouge">kill()</code>+<code class="language-plaintext highlighter-rouge">wait()</code>로 정리(필수).</p>
      </li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">main()</code>에서 <code class="language-plaintext highlighter-rouge">asyncio.create_task(...)</code>로 <strong>Task</strong> 를 만들면, 이벤트 루프는 이 작업을 백그라운드로 진행하고, 필요할 때 <code class="language-plaintext highlighter-rouge">await task</code>로 결과를 회수합니다.</p>
  </li>
  <li>
    <p><strong>타임아웃</strong> 은 <code class="language-plaintext highlighter-rouge">asyncio.wait_for(task, timeout=...)</code>로 감싸고, 만료 시 <code class="language-plaintext highlighter-rouge">task.cancel()</code> 후 정리.</p>
  </li>
  <li>
    <p>실시간 로그가 필요하면, <code class="language-plaintext highlighter-rouge">communicate()</code> 대신 <code class="language-plaintext highlighter-rouge">async for line in proc.stdout:</code> 패턴을 <code class="language-plaintext highlighter-rouge">run_subprocess()</code> 안에 넣으면 됩니다(그 경우 문자열을 누적해서 반환하거나 콜백/큐로 전달).</p>
  </li>
</ol>

<p>원하면, 같은 패턴으로 여러 개를 동시에 돌릴 수도 있어요:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main_many</span><span class="p">():</span>
    <span class="n">tasks</span> <span class="o">=</span> <span class="p">[</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_subprocess</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
    <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">as_completed</span><span class="p">(</span><span class="n">tasks</span><span class="p">):</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">t</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">done:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">()[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<p>이렇게 하면 “서브프로세스 실행 → Task로 스케줄 → 결과 대기/취소/타임아웃”까지 깔끔하게 처리됩니다.</p>

<p class="chat--user">

proc = await asyncio.create_subprocess_exec( sys.executable, "-u", "-c", "import time; [print(i) or time.sleep(0.3) for i in range(5)]", stdout=asp.PIPE, stderr=asp.PIPE ) 이 코드를 try 안에 넣지 않는 이유가 있어?

</p>

<p>짧게 말하면: <strong>정리(cleanup)가 필요한 구간만<code class="language-plaintext highlighter-rouge">try</code>로 감싸기</strong> 위해서예요.<br />
<code class="language-plaintext highlighter-rouge">create_subprocess_exec()</code> 호출 자체는 “아직 프로세스가 없거나(생성 전) 곧바로 실패하는” 단계라서, 여기서 예외/취소가 나면 <strong>정리할 대상이 없습니다.</strong></p>

<p>step-by-step로 보면:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">await asyncio.create_subprocess_exec(...)</code></p>

    <ul>
      <li>
        <p>여기서 <strong>취소(<code class="language-plaintext highlighter-rouge">CancelledError</code>)</strong>가 나면 프로세스는 만들어지지 않았으니 kill/wait 불필요.</p>
      </li>
      <li>
        <p>실행 파일 없음 등으로 <strong><code class="language-plaintext highlighter-rouge">FileNotFoundError</code>/<code class="language-plaintext highlighter-rouge">OSError</code></strong>가 나면 역시 프로세스가 없으니 정리할 게 없음.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>프로세스가 <strong>성공적으로 만들어진 뒤</strong> 에야 <code class="language-plaintext highlighter-rouge">proc</code>가 생깁니다.</p>

    <ul>
      <li>
        <p>이후 <code class="language-plaintext highlighter-rouge">await proc.communicate()</code>에서 취소/타임아웃이 나면 <strong>좀비 방지</strong> 를 위해 <code class="language-plaintext highlighter-rouge">proc.kill(); await proc.wait()</code>가 필요하죠.</p>
      </li>
      <li>
        <p>그래서 <code class="language-plaintext highlighter-rouge">try/except</code>는 이 <strong>두 번째 구간</strong>(communicate/대기 구간)에만 두는 게 맞습니다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>또 다른 이유:</p>

    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">create_subprocess_exec()</code>를 <code class="language-plaintext highlighter-rouge">try</code> 안에 두면, 예외 흐름에 따라 <code class="language-plaintext highlighter-rouge">proc</code>가 <strong>정의되지 않은 상태에서</strong> <code class="language-plaintext highlighter-rouge">proc.kill()</code>을 호출할 위험이 생깁니다(레퍼런스가 없어서 또 다른 예외 유발).</p>
      </li>
      <li>
        <p>“취소 신호가 생성 직후~<code class="language-plaintext highlighter-rouge">try</code> 진입 사이에 들어오면 어떡해요?” → 취소는 <strong>다음<code class="language-plaintext highlighter-rouge">await</code> 지점에서</strong> 던져지므로, 생성이 끝나고 <code class="language-plaintext highlighter-rouge">try</code> 블록으로 들어간 뒤의 <code class="language-plaintext highlighter-rouge">await</code>(예: <code class="language-plaintext highlighter-rouge">communicate</code>)에서 처리됩니다. 레이스 걱정 없음.</p>
      </li>
    </ul>
  </li>
</ol>

<p>원한다면 “스폰 실패”만 별도로 다루는 2단계 패턴이 가장 견고합니다:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">asyncio.subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_subprocess</span><span class="p">():</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
            <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">import time; [print(i) or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span>
        <span class="p">)</span>
    <span class="k">except</span> <span class="nb">OSError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>  <span class="c1"># 실행 파일 없음/권한 문제 등
</span>        <span class="c1"># 여기서는 정리할 프로세스가 없음
</span>        <span class="k">raise</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">(),</span> <span class="n">err</span><span class="p">.</span><span class="nf">decode</span><span class="p">()</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="k">raise</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="c1"># 원한다면 다른 예외에서도 프로세스 정리를 보장
</span>        <span class="n">proc</span><span class="p">.</span><span class="nf">kill</span><span class="p">()</span>
        <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
        <span class="k">raise</span>
</code></pre></div></div>

<p>요약: <strong>프로세스가 생긴 이후에만</strong> 정리가 필요하므로, 생성 호출은 <code class="language-plaintext highlighter-rouge">try</code> 밖에 두고, 대기/통신 구간을 <code class="language-plaintext highlighter-rouge">try</code>로 감싸는 게 깔끔하고 안전합니다.</p>

<p class="chat--user">

기존 코드에서 subprocess 실행할 때 preexec_fn=os.setsid, creationflags=0하고, 꺼질 때는 getpgid(pid)해서 다 같이 끄는 코드가 있었는데 여기에는 필요없어?

</p>

<p>요지는 이거예요: <strong>“전체 프로세스 그룹까지 한 번에 끄고 싶다면 필요”, 아니면 불필요.</strong></p>

<p>step-by-step로 정리하면:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">asyncio.create_subprocess_exec()</code> 자체는 <strong>단일 프로세스만</strong> 관리합니다.</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">proc.terminate()</code>/<code class="language-plaintext highlighter-rouge">proc.kill()</code>은 <strong>그 프로세스만</strong> 죽입니다. 자식·손자까지 보장하지 않아요.</li>
    </ul>
  </li>
  <li>
    <p>기존처럼 “프로세스 그룹(트리) 전체 종료”가 목적이면, <strong>스폰할 때 그룹을 분리</strong> 해야 합니다.</p>

    <ul>
      <li>
        <p>POSIX(리눅스/맥): <code class="language-plaintext highlighter-rouge">preexec_fn=os.setsid</code> 대신 <strong><code class="language-plaintext highlighter-rouge">start_new_session=True</code></strong>가 권장(동일 효과, 더 안전).</p>
      </li>
      <li>
        <p>윈도우: <strong><code class="language-plaintext highlighter-rouge">creationflags=subprocess.CREATE_NEW_PROCESS_GROUP</code></strong>로 새 그룹.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>종료할 때는 “그룹 신호”를 보내야 합니다.</p>

    <ul>
      <li>
        <p>POSIX: <code class="language-plaintext highlighter-rouge">os.killpg(pgid, signal.SIGTERM)</code> → 대기 → 필요 시 <code class="language-plaintext highlighter-rouge">SIGKILL</code>.</p>
      </li>
      <li>
        <p>윈도우: <code class="language-plaintext highlighter-rouge">proc.send_signal(signal.CTRL_BREAK_EVENT)</code>(새 그룹으로 띄웠을 때만 동작) → 필요 시 <code class="language-plaintext highlighter-rouge">taskkill /T</code>.</p>
      </li>
    </ul>
  </li>
</ol>

<p>아래는 앞서 만든 Task 버전에 “그룹 분리 + 그룹 종료”를 붙인 예시입니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">signal</span><span class="p">,</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">asyncio.subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_subprocess</span><span class="p">():</span>
    <span class="c1"># 1) 플랫폼별로 "새 그룹/세션"로 스폰
</span>    <span class="n">kwargs</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">platform</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">win32</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">start_new_session</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>          <span class="c1"># == setsid()
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">creationflags</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">CREATE_NEW_PROCESS_GROUP</span>

    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">import time,sys; [print(i) or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span> <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="o">**</span><span class="n">kwargs</span>
    <span class="p">)</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">(),</span> <span class="n">err</span><span class="p">.</span><span class="nf">decode</span><span class="p">()</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 2) Task 취소 시: 그룹 단위로 깔끔히 종료
</span>        <span class="k">await</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
        <span class="k">raise</span>
    <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
        <span class="c1"># 다른 예외에서도 정리 보장
</span>        <span class="k">await</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
        <span class="k">raise</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">platform</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">win32</span><span class="sh">"</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">killpg</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">ProcessLookupError</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">(),</span> <span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">killpg</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">SIGKILL</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ProcessLookupError</span><span class="p">:</span>
                <span class="k">pass</span>
            <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">proc</span><span class="p">.</span><span class="nf">send_signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">CTRL_BREAK_EVENT</span><span class="p">)</span>  <span class="c1"># CREATE_NEW_PROCESS_GROUP 필요
</span>        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">(),</span> <span class="n">timeout</span><span class="p">)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="c1"># 최후 수단: 하위 트리까지 강제 종료
</span>            <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="sh">"</span><span class="s">taskkill</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/F</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/PID</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">)],</span>
                           <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">run_subprocess</span><span class="p">())</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">task</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">out</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">task</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="k">pass</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="결론">결론</h3>

<ul>
  <li>
    <p>“그냥 그 프로세스 하나만” 종료해도 된다면 <code class="language-plaintext highlighter-rouge">start_new_session</code>/<code class="language-plaintext highlighter-rouge">CREATE_NEW_PROCESS_GROUP</code>는 불필요.</p>
  </li>
  <li>
    <p><strong>과거처럼 트리 전체를 확실히 종료</strong> 해야 한다면, 위처럼 <strong>스폰 시 그룹 분리 + 그룹 종료 루틴</strong> 을 그대로 넣어주세요.</p>
  </li>
  <li>
    <p>POSIX에선 <code class="language-plaintext highlighter-rouge">start_new_session=True</code>가 <code class="language-plaintext highlighter-rouge">preexec_fn=os.setsid</code>의 안전한 대체입니다.</p>
  </li>
</ul>

<p class="chat--user">

타이머를 따로 task로 만들어서 subprocess task, timeout task 두 개를 그룹으로 실행시키는 방식으로 만들어줘. 타임아웃이 되면 자손 프로세스도 다 죽여야해

</p>

<p>좋아요—“타이머(Task)와 서브프로세스(Task)를 <strong>그룹처럼 함께 돌리고</strong> , 타임아웃 시 <strong>프로세스 트리 전체</strong> 를 종료”하는 패턴을 깔끔히 만들었습니다. 그대로 붙여 쓰세요.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span><span class="p">,</span> <span class="n">sys</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">signal</span><span class="p">,</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">asyncio.subprocess</span> <span class="k">as</span> <span class="n">asp</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">subprocess</span><span class="p">.</span><span class="n">Process</span><span class="p">,</span> <span class="n">graceful_timeout</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">proc를 </span><span class="sh">'</span><span class="s">그룹 단위</span><span class="sh">'</span><span class="s">로 종료. 안 죽으면 강제 종료까지.</span><span class="sh">"""</span>
    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">platform</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">win32</span><span class="sh">"</span><span class="p">:</span>
        <span class="c1"># 새 세션으로 띄웠다는 가정(start_new_session=True)
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">os</span><span class="p">.</span><span class="nf">killpg</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">SIGTERM</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">ProcessLookupError</span><span class="p">:</span>
            <span class="k">return</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">graceful_timeout</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="k">try</span><span class="p">:</span>
                <span class="n">os</span><span class="p">.</span><span class="nf">killpg</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">,</span> <span class="n">signal</span><span class="p">.</span><span class="n">SIGKILL</span><span class="p">)</span>
            <span class="k">except</span> <span class="nb">ProcessLookupError</span><span class="p">:</span>
                <span class="k">pass</span>
            <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># CREATE_NEW_PROCESS_GROUP로 띄웠다는 가정
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">proc</span><span class="p">.</span><span class="nf">send_signal</span><span class="p">(</span><span class="n">signal</span><span class="p">.</span><span class="n">CTRL_BREAK_EVENT</span><span class="p">)</span>
        <span class="k">except</span> <span class="nb">Exception</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait_for</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">(),</span> <span class="n">timeout</span><span class="o">=</span><span class="n">graceful_timeout</span><span class="p">)</span>
            <span class="k">return</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="nb">TimeoutError</span><span class="p">:</span>
            <span class="c1"># 최후 수단: 트리까지 모두 강제 종료
</span>            <span class="n">subprocess</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span>
                <span class="p">[</span><span class="sh">"</span><span class="s">taskkill</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/F</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/T</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">/PID</span><span class="sh">"</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="n">pid</span><span class="p">)],</span>
                <span class="n">capture_output</span><span class="o">=</span><span class="bp">True</span>
            <span class="p">)</span>
            <span class="k">await</span> <span class="n">proc</span><span class="p">.</span><span class="nf">wait</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_with_timeout</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="p">:</span> <span class="nb">float</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    타이머 Task와 서브프로세스 Task를 동시에 돌리되,
    타임아웃이 먼저 끝나면 </span><span class="sh">'</span><span class="s">프로세스 트리</span><span class="sh">'</span><span class="s">를 종료한다.
    반환: (timed_out: bool, returncode, stdout_str, stderr_str)
    </span><span class="sh">"""</span>
    <span class="c1"># 1) 프로세스를 "새 그룹/세션"으로 스폰 (자손 일괄 종료를 위해 필수)
</span>    <span class="n">spawn_kwargs</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">if</span> <span class="n">sys</span><span class="p">.</span><span class="n">platform</span> <span class="o">!=</span> <span class="sh">"</span><span class="s">win32</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">spawn_kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">start_new_session</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>          <span class="c1"># == setsid()
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="n">spawn_kwargs</span><span class="p">[</span><span class="sh">"</span><span class="s">creationflags</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="n">CREATE_NEW_PROCESS_GROUP</span>

    <span class="n">proc</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_subprocess_exec</span><span class="p">(</span>
        <span class="o">*</span><span class="n">cmd</span><span class="p">,</span>
        <span class="n">stdout</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="n">stderr</span><span class="o">=</span><span class="n">asp</span><span class="p">.</span><span class="n">PIPE</span><span class="p">,</span>
        <span class="o">**</span><span class="n">spawn_kwargs</span>
    <span class="p">)</span>

    <span class="c1"># 2) 두 개의 Task를 그룹처럼 함께 실행
</span>    <span class="n">proc_task</span>  <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">proc</span><span class="p">.</span><span class="nf">communicate</span><span class="p">(),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">proc-communicate</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">timer_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">timeout</span><span class="p">),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">timeout-timer</span><span class="sh">"</span><span class="p">)</span>

    <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
        <span class="p">{</span><span class="n">proc_task</span><span class="p">,</span> <span class="n">timer_task</span><span class="p">},</span>
        <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
    <span class="p">)</span>

    <span class="c1"># 3) 타이머가 먼저 끝남 → 트리 종료 후 결과 정리
</span>    <span class="k">if</span> <span class="n">timer_task</span> <span class="ow">in</span> <span class="n">done</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">proc_task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
        <span class="c1"># 프로세스 트리 종료
</span>        <span class="k">await</span> <span class="nf">terminate_process_tree</span><span class="p">(</span><span class="n">proc</span><span class="p">)</span>
        <span class="c1"># 통신 Task 취소 (혹시 남아있다면)
</span>        <span class="n">proc_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">proc_task</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="k">pass</span>
        <span class="k">return</span> <span class="bp">True</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="sh">""</span><span class="p">,</span> <span class="sh">""</span>  <span class="c1"># timed_out=True
</span>
    <span class="c1"># 4) 프로세스가 먼저 끝남 → 타이머 취소 후 결과 반환
</span>    <span class="n">timer_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">timer_task</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="k">pass</span>

    <span class="n">out_b</span><span class="p">,</span> <span class="n">err_b</span> <span class="o">=</span> <span class="k">await</span> <span class="n">proc_task</span>  <span class="c1"># bytes
</span>    <span class="k">return</span> <span class="bp">False</span><span class="p">,</span> <span class="n">proc</span><span class="p">.</span><span class="n">returncode</span><span class="p">,</span> <span class="n">out_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">),</span> <span class="n">err_b</span><span class="p">.</span><span class="nf">decode</span><span class="p">(</span><span class="n">errors</span><span class="o">=</span><span class="sh">"</span><span class="s">replace</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># ------------------ 사용 예시 ------------------
</span><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="c1"># 예: 0.3초 간격으로 5줄 출력하는 하위 파이썬을 1초 타임아웃으로 실행
</span>    <span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">sys</span><span class="p">.</span><span class="n">executable</span><span class="p">,</span> <span class="sh">"</span><span class="s">-u</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">-c</span><span class="sh">"</span><span class="p">,</span>
           <span class="sh">"</span><span class="s">import time,sys; [print(i) or sys.stdout.flush() or time.sleep(0.3) for i in range(5)]</span><span class="sh">"</span><span class="p">]</span>

    <span class="n">timed_out</span><span class="p">,</span> <span class="n">rc</span><span class="p">,</span> <span class="n">out</span><span class="p">,</span> <span class="n">err</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">run_with_timeout</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="n">timeout</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">timed_out</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">[TIMEOUT] 하위 프로세스 트리를 모두 종료했습니다.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">RC:</span><span class="sh">"</span><span class="p">,</span> <span class="n">rc</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDOUT:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">out</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">STDERR:</span><span class="se">\n</span><span class="sh">"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">asyncio</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="nf">main</span><span class="p">())</span>
</code></pre></div></div>

<h3 id="핵심-포인트-요약">핵심 포인트 (요약)</h3>

<ul>
  <li>
    <p><strong>두 Task를 그룹처럼</strong> : <code class="language-plaintext highlighter-rouge">proc.communicate()</code> Task와 <code class="language-plaintext highlighter-rouge">asyncio.sleep(timeout)</code> Task를 <code class="language-plaintext highlighter-rouge">asyncio.wait(..., FIRST_COMPLETED)</code>로 경합시킵니다.</p>
  </li>
  <li>
    <p><strong>타임아웃 경로</strong> : 타이머가 먼저 끝나면 <code class="language-plaintext highlighter-rouge">terminate_process_tree()</code>로 <strong>프로세스 그룹(트리)</strong>을 종료 → 통신 Task 취소.</p>
  </li>
  <li>
    <p><strong>프로세스 완료 경로</strong> : 프로세스가 먼저 끝나면 타이머 Task만 취소.</p>
  </li>
  <li>
    <p><strong>트리 종료를 위해 스폰 옵션 필수</strong></p>

    <ul>
      <li>
        <p>POSIX: <code class="language-plaintext highlighter-rouge">start_new_session=True</code> (≒ <code class="language-plaintext highlighter-rouge">preexec_fn=os.setsid</code>)</p>
      </li>
      <li>
        <p>Windows: <code class="language-plaintext highlighter-rouge">creationflags=CREATE_NEW_PROCESS_GROUP</code></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Windows에선 <code class="language-plaintext highlighter-rouge">CTRL_BREAK_EVENT</code> → 불응 시 <code class="language-plaintext highlighter-rouge">taskkill /T</code>로 강제 정리.</p>
  </li>
</ul>

<p>이 패턴이면 “타이머를 별도 Task로 두고, 타임아웃 시 자손까지 전부 종료” 요구사항을 그대로 충족합니다.</p>]]></content><author><name>hvppyarchive</name></author><category term="python" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Async request 취소 처리</title><link href="https://hvppyarchive.github.io/comfyui/async-request-cancel/" rel="alternate" type="text/html" title="Async request 취소 처리" /><published>2025-10-10T11:53:02+09:00</published><updated>2025-10-10T11:53:02+09:00</updated><id>https://hvppyarchive.github.io/comfyui/async-request-cancel</id><content type="html" xml:base="https://hvppyarchive.github.io/comfyui/async-request-cancel/"><![CDATA[<p class="chat--user">

comfyui에서 custom node의 메인 함수를 async로 만들 수 있게 되었어. 그리고, openai python 패키지에서 AsyncOpenAI와 aiohttp를 이용해서 async하게 request를 보낼 수 있어. 근데 문제는 UI에서 stop을 보내고 interrupt가 즉시 동작하지 않는다는거야. request를 보낸 후 await 하는 도중에 작업이 취소되게 하고 싶어

</p>

<p>좋아, 핵심은 “네트워크 요청 await 중에도 바로 끊기게” 만드는 거야.<br />
asyncio에서는 <strong>취소 신호와 실제 작업을 ‘경쟁(race)’</strong> 시키면 돼. 즉, 요청을 <code class="language-plaintext highlighter-rouge">Task</code>로 만들고, UI에서 오는 stop 신호(이하 <code class="language-plaintext highlighter-rouge">stop_event</code>)의 <code class="language-plaintext highlighter-rouge">wait()</code>도 <code class="language-plaintext highlighter-rouge">Task</code>로 만들어서 <strong>둘 중 먼저 끝나는 쪽</strong> 을 보고 행동을 바꾸면 즉시 중단이 가능해.</p>

<p>아래를 그대로 가져다 쓸 수 있게 단계별(그리고 안전한) 패턴으로 정리했어.</p>

<hr />

<h1 id="1-공통-유틸-취소-가능한-await-래퍼">1) 공통 유틸: 취소 가능한 await 래퍼</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">class</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">UI stop/interrupt로 중단되었음을 나타내는 애플리케이션 레벨 예외.</span><span class="sh">"""</span>
    <span class="k">pass</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    coro(코루틴)와 stop_event.wait()를 경쟁시킨다.
    - stop이 먼저 오면 coro Task를 cancel하고 정리한 뒤 StopByUser를 올린다.
    - 요청이 먼저 끝나면 stop 대기 Task를 취소하고 결과를 반환한다.
    </span><span class="sh">"""</span>
    <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">coro</span><span class="p">)</span>
    <span class="n">stop_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">stop_event</span><span class="p">.</span><span class="nf">wait</span><span class="p">())</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
            <span class="p">{</span><span class="n">req_task</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
        <span class="p">)</span>

        <span class="k">if</span> <span class="n">stop_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
            <span class="c1"># UI가 stop을 눌렀다: 네트워크 요청을 취소
</span>            <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="c1"># 취소 정리 끝까지 기다려 경고/리소스 누수 방지
</span>            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">req_task</span>
            <span class="k">raise</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopped by user</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># 요청이 먼저 끝남: stop 대기는 취소
</span>        <span class="n">stop_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">stop_task</span>
        <span class="k">return</span> <span class="k">await</span> <span class="n">req_task</span>  <span class="c1"># 결과 리턴
</span>
    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 바깥 컨텍스트(ComfyUI 실행기)가 이 Task 자체를 취소한 경우: 바로 전파
</span>        <span class="k">raise</span>

    <span class="k">finally</span><span class="p">:</span>
        <span class="c1"># 혹시 남아있으면 확실히 정리
</span>        <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">(</span><span class="n">req_task</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">):</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">t</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
                <span class="n">t</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">t</span>
</code></pre></div></div>

<blockquote>
  <p>중요: 코드 어딘가에 <code class="language-plaintext highlighter-rouge">except Exception:</code> 같은 광범위한 예외 처리기가 있다면, <strong>반드시</strong><br />
 <code class="language-plaintext highlighter-rouge">except asyncio.CancelledError: raise</code> 를 <strong>맨 위에 따로</strong> 두어 취소가 삼켜지지 않게 하세요.<br />
 (파이썬 버전에 따라 <code class="language-plaintext highlighter-rouge">CancelledError</code>가 일반 <code class="language-plaintext highlighter-rouge">Exception</code>에 잡힐 수 있으니 명시적으로 분기하는 게 안전합니다.)</p>
</blockquote>

<hr />

<h1 id="2-comfyui-커스텀-노드mainasync에서-적용">2) ComfyUI 커스텀 노드(main=async)에서 적용</h1>

<p>ComfyUI가 stop을 누르면 내부적으로 “중단 플래그/이벤트”가 켜질 텐데, 그걸 <code class="language-plaintext highlighter-rouge">stop_event</code>(asyncio.Event 호환)로 받는다고 가정해 보자.<br />
(ComfyUI에서 제공하는 실제 인터럽트 신호를 어떻게 얻는지는 프로젝트마다 다를 수 있어. 노드에 주입 받거나, 실행 컨텍스트에서 꺼내 쓰는 식으로 연결해 주면 된다.)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">class</span> <span class="nc">AsyncLLMNode</span><span class="p">:</span>
    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">main</span><span class="sh">"</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">LLM</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1"># stop_event는 ComfyUI 쪽에서 넘겨주도록 연결해 두는 걸 권장
</span>        <span class="k">if</span> <span class="n">stop_event</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="c1"># 최악의 경우를 대비한 더미 (즉시 완료되지 않음)
</span>            <span class="n">stop_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>

        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>  <span class="c1"># 필요시 api_key, base_url 등 설정
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># ◇ 비-스트리밍 요청 예시
</span>            <span class="n">coro</span> <span class="o">=</span> <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                <span class="n">temperature</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
            <span class="p">)</span>

            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="n">coro</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">)</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>

        <span class="k">except</span> <span class="n">StopByUser</span><span class="p">:</span>
            <span class="c1"># ComfyUI가 즉시 멈췄음을 위쪽으로 알리거나, 빈 결과/상태 메시지를 반환
</span>            <span class="c1"># ComfyUI 쪽 정책에 맞춰 raise/return 중 하나를 선택
</span>            <span class="k">raise</span>  <span class="c1"># 보통은 raise로 전파하는 게 인터럽트 체인에 충실
</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 바깥에서 Task 자체가 취소된 경우
</span>            <span class="k">raise</span>

        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># http 커넥션 정리
</span>            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="3-스트리밍부분-응답일-때도-즉시-중단">3) 스트리밍(부분 응답)일 때도 즉시 중단</h1>

<p>스트리밍은 내부적으로 <code class="language-plaintext highlighter-rouge">async for</code>로 청크를 읽는 동안 <code class="language-plaintext highlighter-rouge">__anext__()</code>에서 블록돼서<br />
stop을 눌러도 바로 반응을 못할 수 있어. 이때도 <strong>chunk 읽기 vs stop</strong> 를 경쟁시키면 해결돼.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="c1"># 새로운 Responses API 예시 (필요에 맞춰 Chat Completions로 바꿔도 동일 패턴)
</span>    <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span>
        <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
        <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">,</span>
    <span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
        <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>  <span class="c1"># 텍스트 청크 이터레이터
</span>        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
            <span class="n">stop_task</span>  <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">stop_event</span><span class="p">.</span><span class="nf">wait</span><span class="p">())</span>
            <span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
                <span class="p">{</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">stop_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
            <span class="p">)</span>

            <span class="k">if</span> <span class="n">stop_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="c1"># 읽기 중단 + 연결 정리
</span>                <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">next_chunk</span>
                <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>  <span class="c1"># 서버 쪽 스트림도 닫기
</span>                <span class="k">raise</span> <span class="nc">StopByUser</span><span class="p">(</span><span class="sh">"</span><span class="s">Stopped by user</span><span class="sh">"</span><span class="p">)</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
            <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                <span class="c1"># 스트림 종료
</span>                <span class="k">break</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">stop_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">stop_task</span>

        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
</code></pre></div></div>

<p>ComfyUI 노드에서:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">main</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">stop_event</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">stop_event</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nc">Event</span><span class="p">()</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">text</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">)</span>
        <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>
    <span class="k">except</span> <span class="n">StopByUser</span><span class="p">:</span>
        <span class="k">raise</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="4-aiohttp-순수-사용-시-예시">4) aiohttp 순수 사용 시 예시</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">from</span> <span class="n">yarl</span> <span class="kn">import</span> <span class="n">URL</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">fetch_json_cancellable</span><span class="p">(</span><span class="n">url</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span> <span class="n">payload</span><span class="p">:</span> <span class="nb">dict</span><span class="p">,</span> <span class="n">stop_event</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">aiohttp</span><span class="p">.</span><span class="nc">ClientSession</span><span class="p">()</span> <span class="k">as</span> <span class="n">session</span><span class="p">:</span>
        <span class="c1"># POST 코루틴 생성
</span>        <span class="k">async</span> <span class="k">def</span> <span class="nf">do_post</span><span class="p">():</span>
            <span class="k">async</span> <span class="k">with</span> <span class="n">session</span><span class="p">.</span><span class="nf">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">json</span><span class="o">=</span><span class="n">payload</span><span class="p">)</span> <span class="k">as</span> <span class="n">resp</span><span class="p">:</span>
                <span class="n">resp</span><span class="p">.</span><span class="nf">raise_for_status</span><span class="p">()</span>
                <span class="k">return</span> <span class="k">await</span> <span class="n">resp</span><span class="p">.</span><span class="nf">json</span><span class="p">()</span>

        <span class="k">return</span> <span class="k">await</span> <span class="nf">await_cancellable</span><span class="p">(</span><span class="nf">do_post</span><span class="p">(),</span> <span class="n">stop_event</span><span class="p">)</span>
</code></pre></div></div>

<blockquote>
  <p>참고: <code class="language-plaintext highlighter-rouge">aiohttp</code>는 Task 취소 시 소켓을 닫으며 <code class="language-plaintext highlighter-rouge">CancelledError</code>가 전파돼요.<br />
 위의 패턴처럼 <em>항상</em> loser task를 <code class="language-plaintext highlighter-rouge">cancel()</code>하고 <code class="language-plaintext highlighter-rouge">await</code>해서 경고 없이 정리하세요.</p>
</blockquote>

<hr />

<h1 id="5-흔한-즉시-중단이-안-되는-원인-체크리스트">5) 흔한 “즉시 중단이 안 되는” 원인 체크리스트</h1>

<ol>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">CancelledError</code>를 삼키는 예외 처리</strong></p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">except Exception:</code> 이 있다면 바로 위에 <code class="language-plaintext highlighter-rouge">except asyncio.CancelledError: raise</code> 를 추가.</li>
    </ul>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">await</code> 없이 동기 블로킹 코드</strong></p>

    <ul>
      <li>CPU 바운드 루프/블로킹 I/O는 이벤트 루프를 막아 취소가 늦어짐 → <code class="language-plaintext highlighter-rouge">await</code> 가능한 API로 바꾸거나, <code class="language-plaintext highlighter-rouge">run_in_executor()</code>로 분리.</li>
    </ul>
  </li>
  <li>
    <p><strong>스트리밍 루프에서 stop을 안 보고 있음</strong></p>

    <ul>
      <li>위의 “스트리밍 경쟁” 패턴으로 <code class="language-plaintext highlighter-rouge">__anext__()</code>와 <code class="language-plaintext highlighter-rouge">stop_event.wait()</code>를 경쟁시키기.</li>
    </ul>
  </li>
  <li>
    <p><strong>정리(cleanup)를 취소가 덮어버림</strong></p>

    <ul>
      <li>정리 과정은 <code class="language-plaintext highlighter-rouge">asyncio.shield()</code>로 감싸거나 <code class="language-plaintext highlighter-rouge">with contextlib.suppress(asyncio.CancelledError)</code>로 마무리.</li>
    </ul>
  </li>
  <li>
    <p><strong>긴 네트워크 타임아웃</strong></p>

    <ul>
      <li>취소 자체는 타임아웃과 무관하지만, 라이브러리 정리가 지연될 수 있음 → 세션/스트림을 <code class="language-plaintext highlighter-rouge">close()</code> 해주기.</li>
    </ul>
  </li>
</ol>

<hr />

<h1 id="6-comfyui-쪽-stop_event-연결-팁">6) ComfyUI 쪽 ‘stop_event’ 연결 팁</h1>

<ul>
  <li>
    <p>프로젝트에 따라 다르지만, 보통 <strong>실행 컨텍스트</strong> 나 <strong>노드 인자 주입</strong> 으로 <code class="language-plaintext highlighter-rouge">asyncio.Event</code>를 받을 수 있게 해두면 가장 깔끔해.</p>
  </li>
  <li>
    <p>만약 지금은 그런 훅이 없다면:</p>

    <ul>
      <li>
        <p>최소한 주기적으로 확인하는 polling을 넣는 대신, <strong>위의 경쟁 패턴</strong> 을 사용하면 “await 중에도” 바로 반응한다.</p>
      </li>
      <li>
        <p>stop을 누를 때 노드 측에 <code class="language-plaintext highlighter-rouge">stop_event.set()</code>이 호출되도록 연결(주입)만 해주면 된다.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<p>필요하면 너의 현재 노드 코드 일부를 붙여줘. 거기에 맞춰 <code class="language-plaintext highlighter-rouge">await_cancellable</code>을 딱 들어맞게 리팩터링해 줄게.</p>

<p class="chat--user">

stop_event를 넣는다는게 뭔지 모르겠어. comfyui 내부적으로 interrupt 버튼이 있잖아? 그 버튼을 눌렀을 때 취소되면 좋겠어

</p>

<p>좋아, “UI의 Interrupt 버튼(또는 /interrupt)이 눌리면 내 async 커스텀 노드가 지금 <code class="language-plaintext highlighter-rouge">await</code> 중인 OpenAI 요청을 즉시 끊고 싶다”가 목표지요. 핵심은 <strong>ComfyUI가 인터럽트를 “플래그”로만 알리고, 실제로는 노드가 협조적으로 취소를 처리해야</strong> 한다는 점이에요. 아래를 그대로 넣으면 됩니다 — 단계별로 설명할게요.</p>

<hr />

<h2 id="1-comfyui가-인터럽트를-어떻게-알리냐">1) ComfyUI가 인터럽트를 어떻게 알리냐</h2>

<ul>
  <li>
    <p>프론트엔드 Interrupt 버튼/단축키가 <strong><code class="language-plaintext highlighter-rouge">POST /interrupt</code></strong> 를 호출합니다. 서버는 내부 인터럽트 플래그를 세팅해요. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI+2</a></p>
  </li>
  <li>
    <p>실행기는 다음 노드 경계 혹은 노드 내부에서 체크될 때 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code></strong> 으로 중단을 전파하고, 웹소켓 이벤트 <strong><code class="language-plaintext highlighter-rouge">execution_interrupted</code></strong> 를 보냅니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>단, <strong>노드가 블로킹 상태(타이트 루프/블로킹 I/O)</strong> 면 인터럽트가 바로 처리되지 않을 수 있습니다. 그래서 노드가 <strong>주기적으로 인터럽트를 체크</strong> 하거나 <strong><code class="language-plaintext highlighter-rouge">await</code> 를 취소</strong>해 줘야 해요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/3131?utm_source=chatgpt.com">GitHub</a></p>
  </li>
</ul>

<hr />

<h2 id="2-커스텀-노드에서-협조적-취소를-붙이는-가장-쉬운-방법">2) 커스텀 노드에서 “협조적 취소”를 붙이는 가장 쉬운 방법</h2>

<p>ComfyUI는 <code class="language-plaintext highlighter-rouge">comfy.model_management.throw_exception_if_processing_interrupted()</code> 를 제공합니다. 이걸 주기적으로 호출하면 인터럽트 시 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 을 던져요. (공식 코드와 여러 예시 노드에서 사용됩니다.) <a href="https://gitee.com/bug531/comfy-ui/blob/master/main.py?skip_mobile=true&amp;utm_source=chatgpt.com">Gitee+2</a></p>

<p>아이디어: <strong>요청 태스크</strong> 와 <strong>인터럽트 감시 태스크</strong> 를 동시에 돌리고, 감지되면 요청 태스크를 <code class="language-plaintext highlighter-rouge">cancel()</code>로 끊습니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 커스텀 노드 파일 안
</span><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">aiohttp</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_watch_interrupt_and_cancel</span><span class="p">(</span><span class="n">task</span><span class="p">:</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">Task</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">ComfyUI 인터럽트가 오면 주어진 task를 cancel()</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="n">task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>  <span class="c1"># 폴링 주기
</span>            <span class="n">mm</span><span class="p">.</span><span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>  <span class="c1"># 인터럽트면 예외 발생
</span>    <span class="k">except</span> <span class="n">mm</span><span class="p">.</span><span class="n">InterruptProcessingException</span><span class="p">:</span>
        <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>  <span class="c1"># 메인 요청 취소
</span>
<span class="k">class</span> <span class="nc">MyAsyncNode</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">example</span><span class="sh">"</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>  <span class="c1"># 필요 시 api_key, base_url, timeout 등 설정
</span>
        <span class="c1"># 1) OpenAI 비동기 요청을 태스크로 생성
</span>        <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
            <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>          <span class="c1"># 선택: 요청 타임아웃
</span>                <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span>         <span class="c1"># 선택: 재시도 비활성화(취소 응답을 빠르게)
</span>            <span class="p">)</span>
        <span class="p">)</span>

        <span class="c1"># 2) 인터럽트 감시 태스크 시작
</span>        <span class="n">watcher</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_watch_interrupt_and_cancel</span><span class="p">(</span><span class="n">req_task</span><span class="p">))</span>

        <span class="k">try</span><span class="p">:</span>
            <span class="c1"># 3) 결과 대기 — 인터럽트 시 req_task가 CancelledError로 깨짐
</span>            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
            <span class="n">text</span> <span class="o">=</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">text</span><span class="p">,)</span>
        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 4) ComfyUI에 “사용자 인터럽트”로 알리려면 이 예외로 승격
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="c1"># 5) 워처 정리
</span>            <span class="n">watcher</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">watcher</span>
</code></pre></div></div>

<h3 id="왜-이렇게-하느냐">왜 이렇게 하느냐?</h3>

<ul>
  <li>
    <p><strong>UI 버튼</strong> → <code class="language-plaintext highlighter-rouge">/interrupt</code> → 내부 플래그 on. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>감시 코루틴이 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code> 호출 중 <strong>예외를 받음</strong> → <strong><code class="language-plaintext highlighter-rouge">req_task.cancel()</code></strong> → <code class="language-plaintext highlighter-rouge">await</code>가 즉시 <code class="language-plaintext highlighter-rouge">CancelledError</code> 로 깨짐 → 이를 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 으로 다시 던져</strong> ComfyUI가 <em>“Processing interrupted”</em> 경로로 종료. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI+1</a></p>
  </li>
</ul>

<hr />

<h2 id="3-대안-asynciowait로-레이스-구성">3) 대안: <code class="language-plaintext highlighter-rouge">asyncio.wait()</code>로 “레이스” 구성</h2>

<p>폴링 코드를 줄이고 싶다면, “인터럽트 대기 코루틴”과 요청을 <strong>레이스</strong> 시키는 방법도 있어요:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt</span><span class="p">():</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
        <span class="n">mm</span><span class="p">.</span><span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>

<span class="c1"># ...
</span><span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(...))</span>
<span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt</span><span class="p">())</span>

<span class="n">done</span><span class="p">,</span> <span class="n">pending</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">(</span>
    <span class="p">{</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span> <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span>
<span class="p">)</span>

<span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
    <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>
<span class="k">else</span><span class="p">:</span>
    <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
    <span class="nf">return </span><span class="p">(</span> <span class="p">(</span><span class="k">await</span> <span class="n">req_task</span><span class="p">).</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="p">)</span>
</code></pre></div></div>

<hr />

<h2 id="4-자주-겪는-함정--팁">4) 자주 겪는 함정 &amp; 팁</h2>

<ul>
  <li>
    <p><strong>블로킹 코드</strong>(동기 HTTP, 무한 루프 등)가 있으면 인터럽트가 “즉시” 안 먹힙니다. 네트워크는 반드시 <strong>aiohttp/비동기</strong> 를 쓰고, 루프 안에는 간간이 <code class="language-plaintext highlighter-rouge">mm.throw_exception_if_processing_interrupted()</code> 를 넣으세요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/3131?utm_source=chatgpt.com">GitHub</a></p>
  </li>
  <li>
    <p><strong>OpenAI 비동기 클라이언트</strong> 는 <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code> 를 쓰면 됩니다(요청 옵션에 <code class="language-plaintext highlighter-rouge">timeout</code> 등 전달 가능).</p>
  </li>
  <li>
    <p><strong>취소 전파</strong> : <code class="language-plaintext highlighter-rouge">asyncio.CancelledError</code> 를 <strong>잡아서</strong> <code class="language-plaintext highlighter-rouge">mm.InterruptProcessingException</code> 으로 <strong>다시 던지는 것</strong> 이 포인트입니다 — 그래야 UI에 정상적인 “중단”으로 보입니다.</p>
  </li>
  <li>
    <p><strong>키보드 단축키</strong> 도 인터럽트를 보냅니다(Ctrl+Alt+Enter). <a href="https://docs.comfy.org/interface/shortcuts?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
</ul>

<hr />

<h2 id="5-동작-원리-한눈-요약">5) 동작 원리 한눈 요약</h2>

<ol>
  <li>
    <p>유저가 Interrupt 클릭 → <strong><code class="language-plaintext highlighter-rouge">POST /interrupt</code></strong> 호출 → 내부 플래그 on. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
  <li>
    <p>내 노드의 “인터럽트 워처”가 플래그 감지 → <strong>요청 태스크 cancel()</strong>.</p>
  </li>
  <li>
    <p>내 코드가 <code class="language-plaintext highlighter-rouge">CancelledError</code> 를 받아 <strong><code class="language-plaintext highlighter-rouge">InterruptProcessingException</code> 재-발생</strong> → 실행기에서 <strong><code class="language-plaintext highlighter-rouge">execution_interrupted</code></strong> 이벤트 전송 &amp; 즉시 중단. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages?utm_source=chatgpt.com">ComfyUI</a></p>
  </li>
</ol>

<p>이렇게 붙이면 “UI에서 정지 → 곧장 당신의 <code class="language-plaintext highlighter-rouge">await</code>가 끊기는” 동작을 안정적으로 만들 수 있어요.</p>

<p class="chat--user">

3번처럼 구성했어. 그런데 너가 만들어준 노드들이 다수의 노드가 동시에 실행될수도 있는데 그러면 그 중에 하나만 취소되는거 같기도해. 왜냐면 throw_exception_if_processing_interrupted() 함수가 interrupt_processing을 False로 만들거든. 그러면 두 번째 노드는 취소된지 모르지 않을까

</p>

<p>맞아. 네가 본 그대로야. ComfyUI의 인터럽트 플래그는 <strong>“한 번만 소비되는(edge-triggered)”</strong> 동작을 해.<br />
소스 보면:</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">interrupt_current_processing(True)</code> → 전역 플래그를 <strong>True</strong> 로 셋팅.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">processing_interrupted()</code> → <strong>플래그를 읽기만</strong> 함(안 지움). <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code> → 플래그가 <strong>True면 False로 지우고</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던짐(즉, <em>소비</em>). 그래서 <strong>먼저 호출한 노드만</strong> 확실히 취소 신호를 보게 되고, 뒤늦게 체크한 다른 노드는 “몰랐다”가 될 수 있어. <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
</ul>

<p>그래서 “여러 노드가 동시에 돌 때 하나만 취소되는 것 같다”는 네 추측이 정확해.</p>

<hr />

<h1 id="이렇게-바꿔서-해결해">이렇게 바꿔서 해결해</h1>

<p>핵심은 <strong>노드 내부에서 플래그를 ‘읽기만’ 하되 지우지 않는 것</strong> 이야.<br />
즉, 감시 코루틴은 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>(소비) 대신 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>(비소비)로 체크하고, <strong>직접<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 raise</strong> 하자. 그러면 <strong>모든</strong> 실행 중 노드가 같은 인터럽트를 감지하고 동시에 멈출 수 있어.</p>

<h2 id="1-레이스-패턴요청-vs-인터럽트-수정본">1) 레이스 패턴(요청 vs 인터럽트) 수정본</h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">():</span>
    <span class="c1"># 플래그를 '읽기만' 하는 루프: 여러 노드가 동시에 True를 감지 가능
</span>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mf">0.05</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mm</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>           <span class="c1"># ← 소비 안 함
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

<span class="k">class</span> <span class="nc">MyAsyncNode</span><span class="p">:</span>
    <span class="n">CATEGORY</span> <span class="o">=</span> <span class="sh">"</span><span class="s">example</span><span class="sh">"</span>
    <span class="n">RETURN_TYPES</span> <span class="o">=</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,)</span>
    <span class="n">FUNCTION</span> <span class="o">=</span> <span class="sh">"</span><span class="s">run</span><span class="sh">"</span>

    <span class="nd">@classmethod</span>
    <span class="k">def</span> <span class="nf">INPUT_TYPES</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">{</span><span class="sh">"</span><span class="s">required</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">prompt</span><span class="sh">"</span><span class="p">:</span> <span class="p">(</span><span class="sh">"</span><span class="s">STRING</span><span class="sh">"</span><span class="p">,</span> <span class="p">{</span><span class="sh">"</span><span class="s">multiline</span><span class="sh">"</span><span class="p">:</span> <span class="bp">True</span><span class="p">})}}</span>

    <span class="k">async</span> <span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
                <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
                    <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
                    <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
                    <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
                    <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                <span class="p">)</span>
            <span class="p">)</span>
            <span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                        <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="c1"># 인터럽트가 먼저 옴: 네트워크 요청 즉시 취소
</span>                <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">req_task</span>
                <span class="c1"># 여기서 throw_exception_if_processing_interrupted()를 부르면
</span>                <span class="c1"># 플래그를 '지워' 버려 다른 노드가 못 봄 → 쓰지 말자.
</span>                <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

            <span class="c1"># 요청이 먼저 끝남
</span>            <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">int_task</span>
            <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
            <span class="nf">return </span><span class="p">(</span><span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span><span class="p">,)</span>

        <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
            <span class="c1"># 상위에서 태스크 자체를 취소한 경우
</span>            <span class="k">raise</span>
        <span class="k">finally</span><span class="p">:</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<blockquote>
  <p>포인트: <strong>노드 코드에서는<code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하지 않는다.</strong><br />
 모든 실행 중 노드가 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>로 동시에 감지 → 각자 자신의 작업을 취소하고 <strong>직접</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던진다.<br />
 이렇게 해야 플래그가 한 노드에 의해 먼저 ‘소비’되어 사라지는 일이 없다. (해당 함수가 플래그를 False로 만들고 예외를 던지는 동작은 소스에 명시돼 있음) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
</blockquote>

<h2 id="2-스트리밍-루프도-동일-원리">2) 스트리밍 루프도 동일 원리</h2>

<p>청크 읽기(<code class="language-plaintext highlighter-rouge">__anext__</code>)와 인터럽트 감시를 레이스시키되, 감시는 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>만 사용:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">async</span> <span class="k">def</span> <span class="nf">stream_chat_cancellable</span><span class="p">(</span><span class="n">client</span><span class="p">,</span> <span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
        <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>
        <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
            <span class="n">int_task</span>   <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

            <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                         <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">next_chunk</span>
                <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

            <span class="k">try</span><span class="p">:</span>
                <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
            <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">finally</span><span class="p">:</span>
                <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                    <span class="k">await</span> <span class="n">int_task</span>

        <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="왜-이게-안전한가-step-by-step">왜 이게 안전한가 (step-by-step)</h1>

<ol>
  <li>
    <p>사용자가 UI에서 <strong>Interrupt 버튼</strong> → 서버가 <code class="language-plaintext highlighter-rouge">interrupt_current_processing(True)</code>로 전역 플래그를 킴.</p>
  </li>
  <li>
    <p>각 노드의 감시 코루틴이 <strong>지우지 않는</strong> <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>로 True를 감지. (동시에 여러 노드 OK) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
  <li>
    <p>감지한 노드는 <strong>자기 네트워크 태스크를<code class="language-plaintext highlighter-rouge">cancel()</code></strong> 하고 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 <strong>직접 raise</strong>.</p>
  </li>
  <li>
    <p>실행기는 이 예외를 받아 워크플로를 “Processing interrupted”로 종료.</p>
  </li>
  <li>
    <p>플래그 초기화는 <strong>코어 쪽</strong>(다음 실행 준비 타이밍)에 의해 처리되거나, 코어가 적절히 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 한 번만 호출해 소비함. (이 함수가 플래그를 지우는 동작은 소스에 명확) <a href="https://huggingface.co/spideyrim/ComfyUI/blob/main/comfy/model_management.py">Hugging Face</a></p>
  </li>
</ol>

<blockquote>
  <p>요약: <strong>노드 단에서는 ‘읽기(레벨 트리거)’만 하고, 지우는(엣지 소비) 일은 코어에게 맡겨라.</strong></p>
</blockquote>

<hr />

<h1 id="추가-체크리스트">추가 체크리스트</h1>

<ul>
  <li>
    <p>예외 처리에서 <code class="language-plaintext highlighter-rouge">CancelledError</code>는 <strong>절대 삼키지 말고 전파</strong> 하세요. (취소 감도가 떨어지는 대표 원인)</p>
  </li>
  <li>
    <p>aiohttp/OpenAI 비동기는 태스크 취소 시 소켓을 닫고 <code class="language-plaintext highlighter-rouge">CancelledError</code>를 던집니다. 취소 후에는 <code class="language-plaintext highlighter-rouge">with suppress(asyncio.CancelledError): await task</code>로 <strong>정리까지</strong> 해 주세요.</p>
  </li>
  <li>
    <p>장시간 블로킹/CPU 작업이 있으면 <code class="language-plaintext highlighter-rouge">processing_interrupted()</code>를 루프에 간간히 넣어 주세요. (블로킹이면 인터럽트가 늦게 반영)</p>
  </li>
</ul>

<p>이대로 바꾸면 “동시에 도는 여러 노드 중 하나만 멈추는” 현상 없이, <strong>모두가 즉시 멈추는</strong> 동작이 됩니다.</p>

<p class="chat--user">

Exception을 여러 노드에서 뿌려도 돼?

</p>

<p>짧게 답하면: <strong>네, 여러 노드에서<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 동시에(또는 거의 동시에) 던져도 됩니다.</strong><br />
ComfyUI 실행기는 이 예외를 “취소 신호”로 취급하고 상위 실행 루프에서 잡아서 프롬프트 실행을 중단하도록 설계되어 있어요. 한 노드가 던지든, 여러 노드가 던지든 결과는 같고, 추가로 던져지는 예외들은 상위에서 동일하게 처리(로그만 남기고 무시)됩니다. 공식 문서에도 <em>“노드가 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던질 때 실행이 중단된다”</em>고 명시돼 있어요. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서</a></p>

<p>조금 더 구체적으로, 단계별로 생각해보면:</p>

<ol>
  <li>
    <p><strong>UI의 Stop(또는<code class="language-plaintext highlighter-rouge">/interrupt</code>) → 실행 중단 플래그 세트</strong><br />
프론트엔드가 중단을 보내면 서버가 현재 워크플로 실행을 멈추는 라우트를 처리합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_routes?utm_source=chatgpt.com">ComfyUI 공식 문서</a></p>
  </li>
  <li>
    <p><strong>노드단 체크 → 예외 발생</strong><br />
각 노드(혹은 진행률 훅/대기 지점)에서 <code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하면, 플래그가 켜져 있을 때 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던집니다. 이건 의도된 흐름이에요. 실행기는 이 예외를 특별취급하여 “Processing interrupted”로 처리하고 <code class="language-plaintext highlighter-rouge">execution_interrupted</code> 메시지를 브로드캐스트합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서+1</a></p>
  </li>
  <li>
    <p><strong>여러 노드가 동시에 던져도 문제 없음</strong><br />
실행기는 노드 실행을 감싸는 상위 try/except에서 <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 잡아 “중단”으로 정리합니다. 다른 노드에서도 같은 예외가 연달아 터져도 동일하게 중단 처리로 흘러갑니다(중복 로그 정도만 생길 수 있음). <a href="https://github.com/comfyanonymous/ComfyUI/discussions/6766?utm_source=chatgpt.com">GitHub+1</a></p>
  </li>
</ol>

<p>그래서 실무 팁은 이렇습니다:</p>

<ul>
  <li>
    <p><strong>각 노드에서</strong> 진입 시점과 <strong>모든<code class="language-plaintext highlighter-rouge">await</code> 직후</strong>에<br />
<code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 호출하세요.</p>
  </li>
  <li>외부 비동기 요청(예: <code class="language-plaintext highlighter-rouge">AsyncOpenAI</code>/<code class="language-plaintext highlighter-rouge">aiohttp</code>)이 있다면 이렇게 감싸면 안전합니다:
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">comfy.model_management</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">InterruptProcessingException</span><span class="p">,</span>
    <span class="n">throw_exception_if_processing_interrupted</span><span class="p">,</span>
<span class="p">)</span>
    
<span class="k">async</span> <span class="k">def</span> <span class="nf">FUNCTION</span><span class="p">(...):</span>
    <span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>
    <span class="n">task</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="c1"># 예: 대기 전에 한 번 더 체크
</span>        <span class="nf">throw_exception_if_processing_interrupted</span><span class="p">()</span>
        <span class="n">task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(...))</span>
        <span class="n">result</span> <span class="o">=</span> <span class="k">await</span> <span class="n">task</span>
        <span class="k">return</span> <span class="n">result</span>
    <span class="k">except</span> <span class="n">InterruptProcessingException</span><span class="p">:</span>
        <span class="c1"># 외부 요청/태스크 정리
</span>        <span class="k">if</span> <span class="n">task</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">task</span><span class="p">.</span><span class="nf">done</span><span class="p">():</span>
            <span class="n">task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">task</span>
        <span class="k">raise</span>  <span class="c1"># 꼭 재전파! (중단으로 인식)
</span></code></pre></div>    </div>
  </li>
  <li>
    <p><strong>절대</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 일반 <code class="language-plaintext highlighter-rouge">Exception</code>으로 삼켜서 리턴하지 마세요. 그러면 “중단”이 아닌 “실패”로 기록됩니다(로그와 UI 이벤트가 달라짐). <code class="language-plaintext highlighter-rouge">execution_interrupted</code> 이벤트는 이 예외가 그대로 올라갈 때만 발생합니다. <a href="https://docs.comfy.org/development/comfyui-server/comms_messages">ComfyUI 공식 문서</a></p>
  </li>
  <li>여러 노드가 동시에 실행될 수 있는 구조라면 <strong>각 노드가 독립적으로 같은 예외를 던지도록</strong> 두는 게 맞습니다. 중복 예외는 상위 실행기에서 정리되며, 전체 프롬프트는 한 번만 “중단”으로 마감됩니다. <a href="https://github.com/comfyanonymous/ComfyUI/discussions/6766?utm_source=chatgpt.com">GitHub</a></li>
</ul>

<p>덤: 브라우저 탭을 닫아도 중단이 발생할 수 있다는 이슈들이 있어요(탭을 닫으면 세션이 끊기며 인터럽트가 트리거). API/헤드리스로 돌릴 때는 이 점을 유의하세요. <a href="https://github.com/comfyanonymous/ComfyUI/issues/6713?utm_source=chatgpt.com">GitHub+1</a></p>

<p>정리: <strong>여러 노드에서 마음 편히<code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던지세요.</strong> 이것이 ComfyUI가 의도한 “즉시 중단” 메커니즘이고, 예외가 여러 개여도 상위 실행기에서 안전하게 처리됩니다.</p>

<p class="chat--user">

_wait_for_interrupt_level_trigger()에서 raise 안하고 그냥 return 하는건 어때 어차피 밖에서 raise 하잖아

</p>

<p>가능해. <strong><code class="language-plaintext highlighter-rouge">_wait_for_interrupt_level_trigger()</code>에서 <code class="language-plaintext highlighter-rouge">raise</code> 대신 <code class="language-plaintext highlighter-rouge">return</code></strong> 해도 원하는 “레이스(요청 vs 인터럽트)” 동작은 똑같이 만들어져. 실무적으로는 <em>헬퍼에서 예외 스택을 남기지 않으니</em> 로그가 더 깔끔해지는 장점도 있어.</p>

<p>아래처럼 바꾸면 돼 — 단계별로 정리할게.</p>

<hr />

<h1 id="핵심-아이디어-step-by-step">핵심 아이디어 (step-by-step)</h1>

<ol>
  <li>
    <p><strong>헬퍼는 “인터럽트를 감지하면 끝났다”는 신호만 반환</strong> 한다.</p>
  </li>
  <li>
    <p><strong>바깥(콜러)</strong>는 <code class="language-plaintext highlighter-rouge">asyncio.wait(..., FIRST_COMPLETED)</code>로 <code class="language-plaintext highlighter-rouge">req_task</code>(네트워크 요청)와 <code class="language-plaintext highlighter-rouge">int_task</code>(인터럽트 감시) 중 <strong>먼저 끝난 쪽</strong> 을 확인한다.</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">int_task</code>가 먼저 끝났다면 <strong>요청 태스크를 cancel() 하고</strong> , 여기서 <strong>한 번만</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던진다.</p>
  </li>
</ol>

<hr />

<h1 id="헬퍼-return-버전-레벨-트리거-소비-안-함">헬퍼: return 버전 (레벨 트리거, 소비 안 함)</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>

<span class="c1"># sentinel: 결과를 명확히 구분하고 싶다면 씀
</span><span class="n">INTERRUPTED</span> <span class="o">=</span> <span class="nf">object</span><span class="p">()</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">(</span><span class="n">poll_ms</span><span class="p">:</span> <span class="nb">int</span> <span class="o">=</span> <span class="mi">50</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">ComfyUI 인터럽트 플래그를 </span><span class="sh">'</span><span class="s">읽기만</span><span class="sh">'</span><span class="s"> 하다가 감지되면 반환.</span><span class="sh">"""</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">sleep_s</span> <span class="o">=</span> <span class="n">poll_ms</span> <span class="o">/</span> <span class="mf">1000.0</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
            <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="n">sleep_s</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">mm</span><span class="p">.</span><span class="nf">processing_interrupted</span><span class="p">():</span>   <span class="c1"># ← 소비하지 않음(여러 노드 동시 감지 가능)
</span>                <span class="k">return</span> <span class="n">INTERRUPTED</span>            <span class="c1"># 또는 True 같은 간단한 값
</span>    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 바깥에서 int_task를 취소하면 여기로 옴. 정리 후 전파.
</span>        <span class="k">raise</span>
</code></pre></div></div>

<hr />

<h1 id="비-스트리밍-요청에-적용">비-스트리밍 요청에 적용</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">asyncio</span>
<span class="kn">import</span> <span class="n">contextlib</span>
<span class="kn">import</span> <span class="n">comfy.model_management</span> <span class="k">as</span> <span class="n">mm</span>
<span class="kn">from</span> <span class="n">openai</span> <span class="kn">import</span> <span class="n">AsyncOpenAI</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">run_node</span><span class="p">(</span><span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="n">req_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span>
        <span class="n">client</span><span class="p">.</span><span class="n">chat</span><span class="p">.</span><span class="n">completions</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
            <span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">messages</span><span class="o">=</span><span class="p">[{</span><span class="sh">"</span><span class="s">role</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">user</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">content</span><span class="sh">"</span><span class="p">:</span> <span class="n">prompt</span><span class="p">}],</span>
            <span class="n">timeout</span><span class="o">=</span><span class="mi">120</span><span class="p">,</span>
            <span class="n">max_retries</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
        <span class="p">)</span>
    <span class="p">)</span>
    <span class="n">int_task</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

    <span class="k">try</span><span class="p">:</span>
        <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">req_task</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                     <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

        <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
            <span class="c1"># 1) 네트워크 요청 즉시 취소
</span>            <span class="n">req_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
            <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                <span class="k">await</span> <span class="n">req_task</span>

            <span class="c1"># 2) (선택) 감시 결과를 확인해도 됨
</span>            <span class="n">_</span> <span class="o">=</span> <span class="n">int_task</span><span class="p">.</span><span class="nf">result</span><span class="p">()</span>  <span class="c1"># INTERRUPTED 같은 값
</span>
            <span class="c1"># 3) 여기서 단 한 번 raise
</span>            <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

        <span class="c1"># 요청이 먼저 끝남 → 감시 태스크 취소/정리
</span>        <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">int_task</span>

        <span class="n">resp</span> <span class="o">=</span> <span class="k">await</span> <span class="n">req_task</span>
        <span class="k">return</span> <span class="n">resp</span><span class="p">.</span><span class="n">choices</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">message</span><span class="p">.</span><span class="n">content</span>

    <span class="k">except</span> <span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">:</span>
        <span class="c1"># 상위에서 이 노드 태스크 자체를 취소했을 때
</span>        <span class="k">raise</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="스트리밍에도-동일-패턴">스트리밍에도 동일 패턴</h1>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">contextlib</span>

<span class="k">async</span> <span class="k">def</span> <span class="nf">stream_node</span><span class="p">(</span><span class="n">prompt</span><span class="p">:</span> <span class="nb">str</span><span class="p">):</span>
    <span class="n">client</span> <span class="o">=</span> <span class="nc">AsyncOpenAI</span><span class="p">()</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">async</span> <span class="k">with</span> <span class="n">client</span><span class="p">.</span><span class="n">responses</span><span class="p">.</span><span class="nf">stream</span><span class="p">(</span><span class="n">model</span><span class="o">=</span><span class="sh">"</span><span class="s">gpt-4o-mini</span><span class="sh">"</span><span class="p">,</span> <span class="nb">input</span><span class="o">=</span><span class="n">prompt</span><span class="p">)</span> <span class="k">as</span> <span class="n">stream</span><span class="p">:</span>
            <span class="n">aiter</span> <span class="o">=</span> <span class="n">stream</span><span class="p">.</span><span class="nf">aiter_text</span><span class="p">()</span>
            <span class="n">chunks</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">next_chunk</span> <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="n">aiter</span><span class="p">.</span><span class="nf">__anext__</span><span class="p">())</span>
                <span class="n">int_task</span>   <span class="o">=</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">create_task</span><span class="p">(</span><span class="nf">_wait_for_interrupt_level_trigger</span><span class="p">())</span>

                <span class="n">done</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="k">await</span> <span class="n">asyncio</span><span class="p">.</span><span class="nf">wait</span><span class="p">({</span><span class="n">next_chunk</span><span class="p">,</span> <span class="n">int_task</span><span class="p">},</span>
                                             <span class="n">return_when</span><span class="o">=</span><span class="n">asyncio</span><span class="p">.</span><span class="n">FIRST_COMPLETED</span><span class="p">)</span>

                <span class="k">if</span> <span class="n">int_task</span> <span class="ow">in</span> <span class="n">done</span><span class="p">:</span>
                    <span class="c1"># 스트림/청크 읽기 취소 및 정리
</span>                    <span class="n">next_chunk</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                    <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                        <span class="k">await</span> <span class="n">next_chunk</span>
                    <span class="k">await</span> <span class="n">stream</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
                    <span class="c1"># 여기서 raise 한 번
</span>                    <span class="k">raise</span> <span class="n">mm</span><span class="p">.</span><span class="nc">InterruptProcessingException</span><span class="p">()</span>

                <span class="k">try</span><span class="p">:</span>
                    <span class="n">chunks</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_chunk</span><span class="p">.</span><span class="nf">result</span><span class="p">())</span>
                <span class="k">except</span> <span class="nb">StopAsyncIteration</span><span class="p">:</span>
                    <span class="k">break</span>
                <span class="k">finally</span><span class="p">:</span>
                    <span class="n">int_task</span><span class="p">.</span><span class="nf">cancel</span><span class="p">()</span>
                    <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="n">asyncio</span><span class="p">.</span><span class="n">CancelledError</span><span class="p">):</span>
                        <span class="k">await</span> <span class="n">int_task</span>

            <span class="k">return</span> <span class="sh">""</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunks</span><span class="p">)</span>
    <span class="k">finally</span><span class="p">:</span>
        <span class="k">with</span> <span class="n">contextlib</span><span class="p">.</span><span class="nf">suppress</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
            <span class="k">await</span> <span class="n">client</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h1 id="return-방식의-장단점-요약">return 방식의 장단점 요약</h1>

<ul>
  <li>
    <p>✅ <strong>장점</strong></p>

    <ul>
      <li>
        <p>헬퍼 내부에서 예외 스택이 안 생겨 <strong>로그가 단정</strong> 해짐.</p>
      </li>
      <li>
        <p>“누가 예외를 던지나?”가 <strong>콜러 한 지점</strong> 으로 모여 <strong>정책 일관성</strong> 확보.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>⚠️ <strong>주의</strong></p>

    <ul>
      <li>
        <p>나중에 실수로 <code class="language-plaintext highlighter-rouge">int_task.result()</code>를 다른 곳에서 써버리면 <code class="language-plaintext highlighter-rouge">None</code>을 받아 헷갈릴 수 있어.<br />
→ 위처럼 <strong><code class="language-plaintext highlighter-rouge">INTERRUPTED</code> 센티널</strong>을 반환해 명시적으로 구분하는 걸 추천.</p>
      </li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">req_task</code>가 먼저 끝난 케이스에서 <code class="language-plaintext highlighter-rouge">int_task</code>를 <strong>반드시 cancel &amp; await</strong>(suppress)로 정리해야 경고가 안 남아.</p>
      </li>
    </ul>
  </li>
</ul>

<hr />

<h1 id="여러-노드-동시-실행일-때의-의미">여러 노드 동시 실행일 때의 의미</h1>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">processing_interrupted()</code>를 <strong>읽기만</strong> 하는 이 방식은 <strong>모든 노드가 같은 인터럽트를 함께 감지</strong> 할 수 있게 해.</p>
  </li>
  <li>
    <p>각 노드는 자기 요청을 끊고, <strong>콜러 한 군데에서만</strong> <code class="language-plaintext highlighter-rouge">InterruptProcessingException</code>을 던지면 됨(혹은 각 노드가 자기 컨텍스트에서 던져도 무방).</p>
  </li>
  <li>
    <p>핵심은 <strong><code class="language-plaintext highlighter-rouge">throw_exception_if_processing_interrupted()</code>를 노드 내부 헬퍼에서 호출하지 않는 것</strong>(그 함수는 플래그를 지우므로 ‘첫 번째 소비’ 문제가 생김).</p>
  </li>
</ul>

<hr />

<p>정리: <strong>응, 헬퍼에서<code class="language-plaintext highlighter-rouge">raise</code> 대신 <code class="language-plaintext highlighter-rouge">return</code> 해도 완전히 OK.</strong><br />
오히려 깔끔할 때가 많고, 위 패턴대로 센티널을 반환해주면 실수도 줄일 수 있어.</p>]]></content><author><name>hvppyarchive</name></author><category term="comfyui" /><summary type="html"><![CDATA[]]></summary></entry></feed>